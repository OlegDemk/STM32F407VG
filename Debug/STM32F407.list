
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aac8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  0800ac58  0800ac58  0001ac58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af08  0800af08  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800af08  0800af08  0001af08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af10  0800af10  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af10  0800af10  0001af10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af14  0800af14  0001af14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800af18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000870  20000098  0800afb0  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000908  0800afb0  00020908  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f97d  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047a6  00000000  00000000  0003fa45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  000441f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c8  00000000  00000000  000457a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002516b  00000000  00000000  00046b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e456  00000000  00000000  0006bcd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2204  00000000  00000000  0008a129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c32d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ebc  00000000  00000000  0015c380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ac40 	.word	0x0800ac40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800ac40 	.word	0x0800ac40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800088c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000890:	f000 b96e 	b.w	8000b70 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	4604      	mov	r4, r0
 80008b4:	468c      	mov	ip, r1
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	f040 8083 	bne.w	80009c2 <__udivmoddi4+0x116>
 80008bc:	428a      	cmp	r2, r1
 80008be:	4617      	mov	r7, r2
 80008c0:	d947      	bls.n	8000952 <__udivmoddi4+0xa6>
 80008c2:	fab2 f282 	clz	r2, r2
 80008c6:	b142      	cbz	r2, 80008da <__udivmoddi4+0x2e>
 80008c8:	f1c2 0020 	rsb	r0, r2, #32
 80008cc:	fa24 f000 	lsr.w	r0, r4, r0
 80008d0:	4091      	lsls	r1, r2
 80008d2:	4097      	lsls	r7, r2
 80008d4:	ea40 0c01 	orr.w	ip, r0, r1
 80008d8:	4094      	lsls	r4, r2
 80008da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008de:	0c23      	lsrs	r3, r4, #16
 80008e0:	fbbc f6f8 	udiv	r6, ip, r8
 80008e4:	fa1f fe87 	uxth.w	lr, r7
 80008e8:	fb08 c116 	mls	r1, r8, r6, ip
 80008ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008f0:	fb06 f10e 	mul.w	r1, r6, lr
 80008f4:	4299      	cmp	r1, r3
 80008f6:	d909      	bls.n	800090c <__udivmoddi4+0x60>
 80008f8:	18fb      	adds	r3, r7, r3
 80008fa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80008fe:	f080 8119 	bcs.w	8000b34 <__udivmoddi4+0x288>
 8000902:	4299      	cmp	r1, r3
 8000904:	f240 8116 	bls.w	8000b34 <__udivmoddi4+0x288>
 8000908:	3e02      	subs	r6, #2
 800090a:	443b      	add	r3, r7
 800090c:	1a5b      	subs	r3, r3, r1
 800090e:	b2a4      	uxth	r4, r4
 8000910:	fbb3 f0f8 	udiv	r0, r3, r8
 8000914:	fb08 3310 	mls	r3, r8, r0, r3
 8000918:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800091c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000920:	45a6      	cmp	lr, r4
 8000922:	d909      	bls.n	8000938 <__udivmoddi4+0x8c>
 8000924:	193c      	adds	r4, r7, r4
 8000926:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800092a:	f080 8105 	bcs.w	8000b38 <__udivmoddi4+0x28c>
 800092e:	45a6      	cmp	lr, r4
 8000930:	f240 8102 	bls.w	8000b38 <__udivmoddi4+0x28c>
 8000934:	3802      	subs	r0, #2
 8000936:	443c      	add	r4, r7
 8000938:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800093c:	eba4 040e 	sub.w	r4, r4, lr
 8000940:	2600      	movs	r6, #0
 8000942:	b11d      	cbz	r5, 800094c <__udivmoddi4+0xa0>
 8000944:	40d4      	lsrs	r4, r2
 8000946:	2300      	movs	r3, #0
 8000948:	e9c5 4300 	strd	r4, r3, [r5]
 800094c:	4631      	mov	r1, r6
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	b902      	cbnz	r2, 8000956 <__udivmoddi4+0xaa>
 8000954:	deff      	udf	#255	; 0xff
 8000956:	fab2 f282 	clz	r2, r2
 800095a:	2a00      	cmp	r2, #0
 800095c:	d150      	bne.n	8000a00 <__udivmoddi4+0x154>
 800095e:	1bcb      	subs	r3, r1, r7
 8000960:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000964:	fa1f f887 	uxth.w	r8, r7
 8000968:	2601      	movs	r6, #1
 800096a:	fbb3 fcfe 	udiv	ip, r3, lr
 800096e:	0c21      	lsrs	r1, r4, #16
 8000970:	fb0e 331c 	mls	r3, lr, ip, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb08 f30c 	mul.w	r3, r8, ip
 800097c:	428b      	cmp	r3, r1
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0xe4>
 8000980:	1879      	adds	r1, r7, r1
 8000982:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0xe2>
 8000988:	428b      	cmp	r3, r1
 800098a:	f200 80e9 	bhi.w	8000b60 <__udivmoddi4+0x2b4>
 800098e:	4684      	mov	ip, r0
 8000990:	1ac9      	subs	r1, r1, r3
 8000992:	b2a3      	uxth	r3, r4
 8000994:	fbb1 f0fe 	udiv	r0, r1, lr
 8000998:	fb0e 1110 	mls	r1, lr, r0, r1
 800099c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009a0:	fb08 f800 	mul.w	r8, r8, r0
 80009a4:	45a0      	cmp	r8, r4
 80009a6:	d907      	bls.n	80009b8 <__udivmoddi4+0x10c>
 80009a8:	193c      	adds	r4, r7, r4
 80009aa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009ae:	d202      	bcs.n	80009b6 <__udivmoddi4+0x10a>
 80009b0:	45a0      	cmp	r8, r4
 80009b2:	f200 80d9 	bhi.w	8000b68 <__udivmoddi4+0x2bc>
 80009b6:	4618      	mov	r0, r3
 80009b8:	eba4 0408 	sub.w	r4, r4, r8
 80009bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009c0:	e7bf      	b.n	8000942 <__udivmoddi4+0x96>
 80009c2:	428b      	cmp	r3, r1
 80009c4:	d909      	bls.n	80009da <__udivmoddi4+0x12e>
 80009c6:	2d00      	cmp	r5, #0
 80009c8:	f000 80b1 	beq.w	8000b2e <__udivmoddi4+0x282>
 80009cc:	2600      	movs	r6, #0
 80009ce:	e9c5 0100 	strd	r0, r1, [r5]
 80009d2:	4630      	mov	r0, r6
 80009d4:	4631      	mov	r1, r6
 80009d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009da:	fab3 f683 	clz	r6, r3
 80009de:	2e00      	cmp	r6, #0
 80009e0:	d14a      	bne.n	8000a78 <__udivmoddi4+0x1cc>
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d302      	bcc.n	80009ec <__udivmoddi4+0x140>
 80009e6:	4282      	cmp	r2, r0
 80009e8:	f200 80b8 	bhi.w	8000b5c <__udivmoddi4+0x2b0>
 80009ec:	1a84      	subs	r4, r0, r2
 80009ee:	eb61 0103 	sbc.w	r1, r1, r3
 80009f2:	2001      	movs	r0, #1
 80009f4:	468c      	mov	ip, r1
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	d0a8      	beq.n	800094c <__udivmoddi4+0xa0>
 80009fa:	e9c5 4c00 	strd	r4, ip, [r5]
 80009fe:	e7a5      	b.n	800094c <__udivmoddi4+0xa0>
 8000a00:	f1c2 0320 	rsb	r3, r2, #32
 8000a04:	fa20 f603 	lsr.w	r6, r0, r3
 8000a08:	4097      	lsls	r7, r2
 8000a0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a12:	40d9      	lsrs	r1, r3
 8000a14:	4330      	orrs	r0, r6
 8000a16:	0c03      	lsrs	r3, r0, #16
 8000a18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a1c:	fa1f f887 	uxth.w	r8, r7
 8000a20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a28:	fb06 f108 	mul.w	r1, r6, r8
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a32:	d909      	bls.n	8000a48 <__udivmoddi4+0x19c>
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000a3a:	f080 808d 	bcs.w	8000b58 <__udivmoddi4+0x2ac>
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	f240 808a 	bls.w	8000b58 <__udivmoddi4+0x2ac>
 8000a44:	3e02      	subs	r6, #2
 8000a46:	443b      	add	r3, r7
 8000a48:	1a5b      	subs	r3, r3, r1
 8000a4a:	b281      	uxth	r1, r0
 8000a4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a58:	fb00 f308 	mul.w	r3, r0, r8
 8000a5c:	428b      	cmp	r3, r1
 8000a5e:	d907      	bls.n	8000a70 <__udivmoddi4+0x1c4>
 8000a60:	1879      	adds	r1, r7, r1
 8000a62:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000a66:	d273      	bcs.n	8000b50 <__udivmoddi4+0x2a4>
 8000a68:	428b      	cmp	r3, r1
 8000a6a:	d971      	bls.n	8000b50 <__udivmoddi4+0x2a4>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	4439      	add	r1, r7
 8000a70:	1acb      	subs	r3, r1, r3
 8000a72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a76:	e778      	b.n	800096a <__udivmoddi4+0xbe>
 8000a78:	f1c6 0c20 	rsb	ip, r6, #32
 8000a7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a84:	431c      	orrs	r4, r3
 8000a86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a96:	431f      	orrs	r7, r3
 8000a98:	0c3b      	lsrs	r3, r7, #16
 8000a9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9e:	fa1f f884 	uxth.w	r8, r4
 8000aa2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000aa6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aaa:	fb09 fa08 	mul.w	sl, r9, r8
 8000aae:	458a      	cmp	sl, r1
 8000ab0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ab4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ab8:	d908      	bls.n	8000acc <__udivmoddi4+0x220>
 8000aba:	1861      	adds	r1, r4, r1
 8000abc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ac0:	d248      	bcs.n	8000b54 <__udivmoddi4+0x2a8>
 8000ac2:	458a      	cmp	sl, r1
 8000ac4:	d946      	bls.n	8000b54 <__udivmoddi4+0x2a8>
 8000ac6:	f1a9 0902 	sub.w	r9, r9, #2
 8000aca:	4421      	add	r1, r4
 8000acc:	eba1 010a 	sub.w	r1, r1, sl
 8000ad0:	b2bf      	uxth	r7, r7
 8000ad2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ad6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ada:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ade:	fb00 f808 	mul.w	r8, r0, r8
 8000ae2:	45b8      	cmp	r8, r7
 8000ae4:	d907      	bls.n	8000af6 <__udivmoddi4+0x24a>
 8000ae6:	19e7      	adds	r7, r4, r7
 8000ae8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000aec:	d22e      	bcs.n	8000b4c <__udivmoddi4+0x2a0>
 8000aee:	45b8      	cmp	r8, r7
 8000af0:	d92c      	bls.n	8000b4c <__udivmoddi4+0x2a0>
 8000af2:	3802      	subs	r0, #2
 8000af4:	4427      	add	r7, r4
 8000af6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000afa:	eba7 0708 	sub.w	r7, r7, r8
 8000afe:	fba0 8902 	umull	r8, r9, r0, r2
 8000b02:	454f      	cmp	r7, r9
 8000b04:	46c6      	mov	lr, r8
 8000b06:	4649      	mov	r1, r9
 8000b08:	d31a      	bcc.n	8000b40 <__udivmoddi4+0x294>
 8000b0a:	d017      	beq.n	8000b3c <__udivmoddi4+0x290>
 8000b0c:	b15d      	cbz	r5, 8000b26 <__udivmoddi4+0x27a>
 8000b0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b12:	eb67 0701 	sbc.w	r7, r7, r1
 8000b16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b1a:	40f2      	lsrs	r2, r6
 8000b1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b20:	40f7      	lsrs	r7, r6
 8000b22:	e9c5 2700 	strd	r2, r7, [r5]
 8000b26:	2600      	movs	r6, #0
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	462e      	mov	r6, r5
 8000b30:	4628      	mov	r0, r5
 8000b32:	e70b      	b.n	800094c <__udivmoddi4+0xa0>
 8000b34:	4606      	mov	r6, r0
 8000b36:	e6e9      	b.n	800090c <__udivmoddi4+0x60>
 8000b38:	4618      	mov	r0, r3
 8000b3a:	e6fd      	b.n	8000938 <__udivmoddi4+0x8c>
 8000b3c:	4543      	cmp	r3, r8
 8000b3e:	d2e5      	bcs.n	8000b0c <__udivmoddi4+0x260>
 8000b40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b44:	eb69 0104 	sbc.w	r1, r9, r4
 8000b48:	3801      	subs	r0, #1
 8000b4a:	e7df      	b.n	8000b0c <__udivmoddi4+0x260>
 8000b4c:	4608      	mov	r0, r1
 8000b4e:	e7d2      	b.n	8000af6 <__udivmoddi4+0x24a>
 8000b50:	4660      	mov	r0, ip
 8000b52:	e78d      	b.n	8000a70 <__udivmoddi4+0x1c4>
 8000b54:	4681      	mov	r9, r0
 8000b56:	e7b9      	b.n	8000acc <__udivmoddi4+0x220>
 8000b58:	4666      	mov	r6, ip
 8000b5a:	e775      	b.n	8000a48 <__udivmoddi4+0x19c>
 8000b5c:	4630      	mov	r0, r6
 8000b5e:	e74a      	b.n	80009f6 <__udivmoddi4+0x14a>
 8000b60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b64:	4439      	add	r1, r7
 8000b66:	e713      	b.n	8000990 <__udivmoddi4+0xe4>
 8000b68:	3802      	subs	r0, #2
 8000b6a:	443c      	add	r4, r7
 8000b6c:	e724      	b.n	80009b8 <__udivmoddi4+0x10c>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_idiv0>:
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b08b      	sub	sp, #44	; 0x2c
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	4611      	mov	r1, r2
 8000b80:	461a      	mov	r2, r3
 8000b82:	4623      	mov	r3, r4
 8000b84:	80fb      	strh	r3, [r7, #6]
 8000b86:	4603      	mov	r3, r0
 8000b88:	80bb      	strh	r3, [r7, #4]
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	807b      	strh	r3, [r7, #2]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8000b92:	887b      	ldrh	r3, [r7, #2]
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8000b9a:	887b      	ldrh	r3, [r7, #2]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	f1c3 0301 	rsb	r3, r3, #1
 8000ba2:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8000bac:	e061      	b.n	8000c72 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8000bae:	88fa      	ldrh	r2, [r7, #6]
 8000bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	e018      	b.n	8000bea <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	b298      	uxth	r0, r3
 8000bbc:	6a3b      	ldr	r3, [r7, #32]
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	88bb      	ldrh	r3, [r7, #4]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	883a      	ldrh	r2, [r7, #0]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f000 fc0b 	bl	80013e4 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	b298      	uxth	r0, r3
 8000bd2:	6a3b      	ldr	r3, [r7, #32]
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	88ba      	ldrh	r2, [r7, #4]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	883a      	ldrh	r2, [r7, #0]
 8000bde:	4619      	mov	r1, r3
 8000be0:	f000 fc00 	bl	80013e4 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	3301      	adds	r3, #1
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	88fa      	ldrh	r2, [r7, #6]
 8000bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bee:	4413      	add	r3, r2
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	dde0      	ble.n	8000bb8 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8000bf6:	88fa      	ldrh	r2, [r7, #6]
 8000bf8:	6a3b      	ldr	r3, [r7, #32]
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	e018      	b.n	8000c32 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	b298      	uxth	r0, r3
 8000c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	88bb      	ldrh	r3, [r7, #4]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	883a      	ldrh	r2, [r7, #0]
 8000c10:	4619      	mov	r1, r3
 8000c12:	f000 fbe7 	bl	80013e4 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	b298      	uxth	r0, r3
 8000c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	88ba      	ldrh	r2, [r7, #4]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	883a      	ldrh	r2, [r7, #0]
 8000c26:	4619      	mov	r1, r3
 8000c28:	f000 fbdc 	bl	80013e4 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	88fa      	ldrh	r2, [r7, #6]
 8000c34:	6a3b      	ldr	r3, [r7, #32]
 8000c36:	4413      	add	r3, r2
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	dde0      	ble.n	8000c00 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8000c3e:	6a3b      	ldr	r3, [r7, #32]
 8000c40:	3301      	adds	r3, #1
 8000c42:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8000c44:	697a      	ldr	r2, [r7, #20]
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	4413      	add	r3, r2
 8000c4a:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	3302      	adds	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	005a      	lsls	r2, r3, #1
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	4413      	add	r3, r2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	dd09      	ble.n	8000c72 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c60:	3b01      	subs	r3, #1
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	4413      	add	r3, r2
 8000c6a:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	3302      	adds	r3, #2
 8000c70:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8000c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c74:	6a3b      	ldr	r3, [r7, #32]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	da99      	bge.n	8000bae <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8000c7a:	bf00      	nop
 8000c7c:	bf00      	nop
 8000c7e:	372c      	adds	r7, #44	; 0x2c
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd90      	pop	{r4, r7, pc}

08000c84 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af02      	add	r7, sp, #8
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	4608      	mov	r0, r1
 8000c8e:	4611      	mov	r1, r2
 8000c90:	461a      	mov	r2, r3
 8000c92:	4623      	mov	r3, r4
 8000c94:	71fb      	strb	r3, [r7, #7]
 8000c96:	4603      	mov	r3, r0
 8000c98:	80bb      	strh	r3, [r7, #4]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	71bb      	strb	r3, [r7, #6]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8000ca6:	7dfb      	ldrb	r3, [r7, #23]
 8000ca8:	2b1f      	cmp	r3, #31
 8000caa:	d902      	bls.n	8000cb2 <ILI9341_Draw_Char+0x2e>
        //Character = 0;
    	//break;
    } else {
        function_char -= 32;
 8000cac:	7dfb      	ldrb	r3, [r7, #23]
 8000cae:	3b20      	subs	r3, #32
 8000cb0:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	753b      	strb	r3, [r7, #20]
 8000cb6:	e012      	b.n	8000cde <ILI9341_Draw_Char+0x5a>
		{
		temp[k] = font[function_char][k];
 8000cb8:	7dfa      	ldrb	r2, [r7, #23]
 8000cba:	7d38      	ldrb	r0, [r7, #20]
 8000cbc:	7d39      	ldrb	r1, [r7, #20]
 8000cbe:	4c3b      	ldr	r4, [pc, #236]	; (8000dac <ILI9341_Draw_Char+0x128>)
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	4413      	add	r3, r2
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	4423      	add	r3, r4
 8000cca:	4403      	add	r3, r0
 8000ccc:	781a      	ldrb	r2, [r3, #0]
 8000cce:	f107 0318 	add.w	r3, r7, #24
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000cd8:	7d3b      	ldrb	r3, [r7, #20]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	753b      	strb	r3, [r7, #20]
 8000cde:	7d3b      	ldrb	r3, [r7, #20]
 8000ce0:	2b05      	cmp	r3, #5
 8000ce2:	d9e9      	bls.n	8000cb8 <ILI9341_Draw_Char+0x34>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8000ce4:	79bb      	ldrb	r3, [r7, #6]
 8000ce6:	b299      	uxth	r1, r3
 8000ce8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000cea:	461a      	mov	r2, r3
 8000cec:	0052      	lsls	r2, r2, #1
 8000cee:	4413      	add	r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000cf6:	00db      	lsls	r3, r3, #3
 8000cf8:	b29c      	uxth	r4, r3
 8000cfa:	88b8      	ldrh	r0, [r7, #4]
 8000cfc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	4623      	mov	r3, r4
 8000d02:	f000 fc37 	bl	8001574 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000d06:	2300      	movs	r3, #0
 8000d08:	757b      	strb	r3, [r7, #21]
 8000d0a:	e046      	b.n	8000d9a <ILI9341_Draw_Char+0x116>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	75bb      	strb	r3, [r7, #22]
 8000d10:	e03d      	b.n	8000d8e <ILI9341_Draw_Char+0x10a>
            if (temp[j] & (1<<i)) {			
 8000d12:	7d7b      	ldrb	r3, [r7, #21]
 8000d14:	f107 0218 	add.w	r2, r7, #24
 8000d18:	4413      	add	r3, r2
 8000d1a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	7dbb      	ldrb	r3, [r7, #22]
 8000d22:	fa42 f303 	asr.w	r3, r2, r3
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d02c      	beq.n	8000d88 <ILI9341_Draw_Char+0x104>
							if(Size == 1)
 8000d2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d10f      	bne.n	8000d54 <ILI9341_Draw_Char+0xd0>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8000d34:	7d7b      	ldrb	r3, [r7, #21]
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	88bb      	ldrh	r3, [r7, #4]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	b298      	uxth	r0, r3
 8000d3e:	79bb      	ldrb	r3, [r7, #6]
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	7dbb      	ldrb	r3, [r7, #22]
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	4413      	add	r3, r2
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	887a      	ldrh	r2, [r7, #2]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f000 fb49 	bl	80013e4 <ILI9341_Draw_Pixel>
 8000d52:	e019      	b.n	8000d88 <ILI9341_Draw_Char+0x104>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8000d54:	7d7b      	ldrb	r3, [r7, #21]
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000d5a:	fb12 f303 	smulbb	r3, r2, r3
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	88bb      	ldrh	r3, [r7, #4]
 8000d62:	4413      	add	r3, r2
 8000d64:	b298      	uxth	r0, r3
 8000d66:	79bb      	ldrb	r3, [r7, #6]
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	7dbb      	ldrb	r3, [r7, #22]
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000d70:	fb11 f303 	smulbb	r3, r1, r3
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	4413      	add	r3, r2
 8000d78:	b299      	uxth	r1, r3
 8000d7a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8000d7c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000d7e:	887b      	ldrh	r3, [r7, #2]
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	4623      	mov	r3, r4
 8000d84:	f000 fbf6 	bl	8001574 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000d88:	7dbb      	ldrb	r3, [r7, #22]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	75bb      	strb	r3, [r7, #22]
 8000d8e:	7dbb      	ldrb	r3, [r7, #22]
 8000d90:	2b07      	cmp	r3, #7
 8000d92:	d9be      	bls.n	8000d12 <ILI9341_Draw_Char+0x8e>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000d94:	7d7b      	ldrb	r3, [r7, #21]
 8000d96:	3301      	adds	r3, #1
 8000d98:	757b      	strb	r3, [r7, #21]
 8000d9a:	7d7b      	ldrb	r3, [r7, #21]
 8000d9c:	2b05      	cmp	r3, #5
 8000d9e:	d9b5      	bls.n	8000d0c <ILI9341_Draw_Char+0x88>
							}
            }						
        }
    }
}
 8000da0:	bf00      	nop
 8000da2:	bf00      	nop
 8000da4:	371c      	adds	r7, #28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd90      	pop	{r4, r7, pc}
 8000daa:	bf00      	nop
 8000dac:	0800ac84 	.word	0x0800ac84

08000db0 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b087      	sub	sp, #28
 8000db4:	af02      	add	r7, sp, #8
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	4608      	mov	r0, r1
 8000dba:	4611      	mov	r1, r2
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	817b      	strh	r3, [r7, #10]
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	727b      	strb	r3, [r7, #9]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	80fb      	strh	r3, [r7, #6]
    while (*Text) {
 8000dca:	e016      	b.n	8000dfa <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	60fa      	str	r2, [r7, #12]
 8000dd2:	7818      	ldrb	r0, [r3, #0]
 8000dd4:	88fc      	ldrh	r4, [r7, #6]
 8000dd6:	7a7a      	ldrb	r2, [r7, #9]
 8000dd8:	8979      	ldrh	r1, [r7, #10]
 8000dda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ddc:	9301      	str	r3, [sp, #4]
 8000dde:	8c3b      	ldrh	r3, [r7, #32]
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	4623      	mov	r3, r4
 8000de4:	f7ff ff4e 	bl	8000c84 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8000de8:	8c3b      	ldrh	r3, [r7, #32]
 8000dea:	461a      	mov	r2, r3
 8000dec:	0052      	lsls	r2, r2, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	897b      	ldrh	r3, [r7, #10]
 8000df6:	4413      	add	r3, r2
 8000df8:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1e4      	bne.n	8000dcc <ILI9341_Draw_Text+0x1c>
    }
}
 8000e02:	bf00      	nop
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd90      	pop	{r4, r7, pc}

08000e0c <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8000e10:	2200      	movs	r2, #0
 8000e12:	2110      	movs	r1, #16
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <ILI9341_SPI_Init+0x14>)
 8000e16:	f001 ff87 	bl	8002d28 <HAL_GPIO_WritePin>
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000

08000e24 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8000e2e:	1df9      	adds	r1, r7, #7
 8000e30:	2301      	movs	r3, #1
 8000e32:	2201      	movs	r2, #1
 8000e34:	4803      	ldr	r0, [pc, #12]	; (8000e44 <ILI9341_SPI_Send+0x20>)
 8000e36:	f005 f846 	bl	8005ec6 <HAL_SPI_Transmit>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200000c8 	.word	0x200000c8

08000e48 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2110      	movs	r1, #16
 8000e56:	480a      	ldr	r0, [pc, #40]	; (8000e80 <ILI9341_Write_Command+0x38>)
 8000e58:	f001 ff66 	bl	8002d28 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2140      	movs	r1, #64	; 0x40
 8000e60:	4807      	ldr	r0, [pc, #28]	; (8000e80 <ILI9341_Write_Command+0x38>)
 8000e62:	f001 ff61 	bl	8002d28 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ffdb 	bl	8000e24 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000e6e:	2201      	movs	r2, #1
 8000e70:	2110      	movs	r1, #16
 8000e72:	4803      	ldr	r0, [pc, #12]	; (8000e80 <ILI9341_Write_Command+0x38>)
 8000e74:	f001 ff58 	bl	8002d28 <HAL_GPIO_WritePin>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40021000 	.word	0x40021000

08000e84 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000e8e:	2201      	movs	r2, #1
 8000e90:	2140      	movs	r1, #64	; 0x40
 8000e92:	480a      	ldr	r0, [pc, #40]	; (8000ebc <ILI9341_Write_Data+0x38>)
 8000e94:	f001 ff48 	bl	8002d28 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2110      	movs	r1, #16
 8000e9c:	4807      	ldr	r0, [pc, #28]	; (8000ebc <ILI9341_Write_Data+0x38>)
 8000e9e:	f001 ff43 	bl	8002d28 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ffbd 	bl	8000e24 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2110      	movs	r1, #16
 8000eae:	4803      	ldr	r0, [pc, #12]	; (8000ebc <ILI9341_Write_Data+0x38>)
 8000eb0:	f001 ff3a 	bl	8002d28 <HAL_GPIO_WritePin>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	4608      	mov	r0, r1
 8000eca:	4611      	mov	r1, r2
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4623      	mov	r3, r4
 8000ed0:	80fb      	strh	r3, [r7, #6]
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	80bb      	strh	r3, [r7, #4]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	807b      	strh	r3, [r7, #2]
 8000eda:	4613      	mov	r3, r2
 8000edc:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8000ede:	202a      	movs	r0, #42	; 0x2a
 8000ee0:	f7ff ffb2 	bl	8000e48 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000ee4:	88fb      	ldrh	r3, [r7, #6]
 8000ee6:	0a1b      	lsrs	r3, r3, #8
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ffc9 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ffc4 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000efc:	887b      	ldrh	r3, [r7, #2]
 8000efe:	0a1b      	lsrs	r3, r3, #8
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ffbd 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000f0a:	887b      	ldrh	r3, [r7, #2]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ffb8 	bl	8000e84 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000f14:	202b      	movs	r0, #43	; 0x2b
 8000f16:	f7ff ff97 	bl	8000e48 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000f1a:	88bb      	ldrh	r3, [r7, #4]
 8000f1c:	0a1b      	lsrs	r3, r3, #8
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ffae 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000f28:	88bb      	ldrh	r3, [r7, #4]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ffa9 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000f32:	883b      	ldrh	r3, [r7, #0]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ffa2 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000f40:	883b      	ldrh	r3, [r7, #0]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff9d 	bl	8000e84 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000f4a:	202c      	movs	r0, #44	; 0x2c
 8000f4c:	f7ff ff7c 	bl	8000e48 <ILI9341_Write_Command>
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd90      	pop	{r4, r7, pc}

08000f58 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2120      	movs	r1, #32
 8000f60:	480a      	ldr	r0, [pc, #40]	; (8000f8c <ILI9341_Reset+0x34>)
 8000f62:	f001 fee1 	bl	8002d28 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000f66:	20c8      	movs	r0, #200	; 0xc8
 8000f68:	f001 fbf4 	bl	8002754 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2110      	movs	r1, #16
 8000f70:	4806      	ldr	r0, [pc, #24]	; (8000f8c <ILI9341_Reset+0x34>)
 8000f72:	f001 fed9 	bl	8002d28 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000f76:	20c8      	movs	r0, #200	; 0xc8
 8000f78:	f001 fbec 	bl	8002754 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2120      	movs	r1, #32
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <ILI9341_Reset+0x34>)
 8000f82:	f001 fed1 	bl	8002d28 <HAL_GPIO_WritePin>
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000

08000f90 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000f9e:	2036      	movs	r0, #54	; 0x36
 8000fa0:	f7ff ff52 	bl	8000e48 <ILI9341_Write_Command>
HAL_Delay(1);
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f001 fbd5 	bl	8002754 <HAL_Delay>
	
switch(screen_rotation) 
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d837      	bhi.n	8001020 <ILI9341_Set_Rotation+0x90>
 8000fb0:	a201      	add	r2, pc, #4	; (adr r2, 8000fb8 <ILI9341_Set_Rotation+0x28>)
 8000fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb6:	bf00      	nop
 8000fb8:	08000fc9 	.word	0x08000fc9
 8000fbc:	08000fdf 	.word	0x08000fdf
 8000fc0:	08000ff5 	.word	0x08000ff5
 8000fc4:	0800100b 	.word	0x0800100b
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000fc8:	2048      	movs	r0, #72	; 0x48
 8000fca:	f7ff ff5b 	bl	8000e84 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000fce:	4b17      	ldr	r3, [pc, #92]	; (800102c <ILI9341_Set_Rotation+0x9c>)
 8000fd0:	22f0      	movs	r2, #240	; 0xf0
 8000fd2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <ILI9341_Set_Rotation+0xa0>)
 8000fd6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000fda:	801a      	strh	r2, [r3, #0]
			break;
 8000fdc:	e021      	b.n	8001022 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8000fde:	2028      	movs	r0, #40	; 0x28
 8000fe0:	f7ff ff50 	bl	8000e84 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <ILI9341_Set_Rotation+0x9c>)
 8000fe6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000fea:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000fec:	4b10      	ldr	r3, [pc, #64]	; (8001030 <ILI9341_Set_Rotation+0xa0>)
 8000fee:	22f0      	movs	r2, #240	; 0xf0
 8000ff0:	801a      	strh	r2, [r3, #0]
			break;
 8000ff2:	e016      	b.n	8001022 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000ff4:	2088      	movs	r0, #136	; 0x88
 8000ff6:	f7ff ff45 	bl	8000e84 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <ILI9341_Set_Rotation+0x9c>)
 8000ffc:	22f0      	movs	r2, #240	; 0xf0
 8000ffe:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <ILI9341_Set_Rotation+0xa0>)
 8001002:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001006:	801a      	strh	r2, [r3, #0]
			break;
 8001008:	e00b      	b.n	8001022 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800100a:	20e8      	movs	r0, #232	; 0xe8
 800100c:	f7ff ff3a 	bl	8000e84 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <ILI9341_Set_Rotation+0x9c>)
 8001012:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001016:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <ILI9341_Set_Rotation+0xa0>)
 800101a:	22f0      	movs	r2, #240	; 0xf0
 800101c:	801a      	strh	r2, [r3, #0]
			break;
 800101e:	e000      	b.n	8001022 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8001020:	bf00      	nop
	}
}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000002 	.word	0x20000002
 8001030:	20000000 	.word	0x20000000

08001034 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2120      	movs	r1, #32
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <ILI9341_Enable+0x14>)
 800103e:	f001 fe73 	bl	8002d28 <HAL_GPIO_WritePin>
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000

0800104c <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8001050:	f7ff fff0 	bl	8001034 <ILI9341_Enable>
ILI9341_SPI_Init();
 8001054:	f7ff feda 	bl	8000e0c <ILI9341_SPI_Init>
ILI9341_Reset();
 8001058:	f7ff ff7e 	bl	8000f58 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 800105c:	2001      	movs	r0, #1
 800105e:	f7ff fef3 	bl	8000e48 <ILI9341_Write_Command>
HAL_Delay(1000);
 8001062:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001066:	f001 fb75 	bl	8002754 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800106a:	20cb      	movs	r0, #203	; 0xcb
 800106c:	f7ff feec 	bl	8000e48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8001070:	2039      	movs	r0, #57	; 0x39
 8001072:	f7ff ff07 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8001076:	202c      	movs	r0, #44	; 0x2c
 8001078:	f7ff ff04 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800107c:	2000      	movs	r0, #0
 800107e:	f7ff ff01 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8001082:	2034      	movs	r0, #52	; 0x34
 8001084:	f7ff fefe 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8001088:	2002      	movs	r0, #2
 800108a:	f7ff fefb 	bl	8000e84 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 800108e:	20cf      	movs	r0, #207	; 0xcf
 8001090:	f7ff feda 	bl	8000e48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001094:	2000      	movs	r0, #0
 8001096:	f7ff fef5 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800109a:	20c1      	movs	r0, #193	; 0xc1
 800109c:	f7ff fef2 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80010a0:	2030      	movs	r0, #48	; 0x30
 80010a2:	f7ff feef 	bl	8000e84 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80010a6:	20e8      	movs	r0, #232	; 0xe8
 80010a8:	f7ff fece 	bl	8000e48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80010ac:	2085      	movs	r0, #133	; 0x85
 80010ae:	f7ff fee9 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f7ff fee6 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80010b8:	2078      	movs	r0, #120	; 0x78
 80010ba:	f7ff fee3 	bl	8000e84 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80010be:	20ea      	movs	r0, #234	; 0xea
 80010c0:	f7ff fec2 	bl	8000e48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80010c4:	2000      	movs	r0, #0
 80010c6:	f7ff fedd 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff feda 	bl	8000e84 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80010d0:	20ed      	movs	r0, #237	; 0xed
 80010d2:	f7ff feb9 	bl	8000e48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80010d6:	2064      	movs	r0, #100	; 0x64
 80010d8:	f7ff fed4 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80010dc:	2003      	movs	r0, #3
 80010de:	f7ff fed1 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80010e2:	2012      	movs	r0, #18
 80010e4:	f7ff fece 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80010e8:	2081      	movs	r0, #129	; 0x81
 80010ea:	f7ff fecb 	bl	8000e84 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 80010ee:	20f7      	movs	r0, #247	; 0xf7
 80010f0:	f7ff feaa 	bl	8000e48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 80010f4:	2020      	movs	r0, #32
 80010f6:	f7ff fec5 	bl	8000e84 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 80010fa:	20c0      	movs	r0, #192	; 0xc0
 80010fc:	f7ff fea4 	bl	8000e48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001100:	2023      	movs	r0, #35	; 0x23
 8001102:	f7ff febf 	bl	8000e84 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8001106:	20c1      	movs	r0, #193	; 0xc1
 8001108:	f7ff fe9e 	bl	8000e48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 800110c:	2010      	movs	r0, #16
 800110e:	f7ff feb9 	bl	8000e84 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8001112:	20c5      	movs	r0, #197	; 0xc5
 8001114:	f7ff fe98 	bl	8000e48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8001118:	203e      	movs	r0, #62	; 0x3e
 800111a:	f7ff feb3 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800111e:	2028      	movs	r0, #40	; 0x28
 8001120:	f7ff feb0 	bl	8000e84 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8001124:	20c7      	movs	r0, #199	; 0xc7
 8001126:	f7ff fe8f 	bl	8000e48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800112a:	2086      	movs	r0, #134	; 0x86
 800112c:	f7ff feaa 	bl	8000e84 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8001130:	2036      	movs	r0, #54	; 0x36
 8001132:	f7ff fe89 	bl	8000e48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8001136:	2048      	movs	r0, #72	; 0x48
 8001138:	f7ff fea4 	bl	8000e84 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 800113c:	203a      	movs	r0, #58	; 0x3a
 800113e:	f7ff fe83 	bl	8000e48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8001142:	2055      	movs	r0, #85	; 0x55
 8001144:	f7ff fe9e 	bl	8000e84 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8001148:	20b1      	movs	r0, #177	; 0xb1
 800114a:	f7ff fe7d 	bl	8000e48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800114e:	2000      	movs	r0, #0
 8001150:	f7ff fe98 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001154:	2018      	movs	r0, #24
 8001156:	f7ff fe95 	bl	8000e84 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800115a:	20b6      	movs	r0, #182	; 0xb6
 800115c:	f7ff fe74 	bl	8000e48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8001160:	2008      	movs	r0, #8
 8001162:	f7ff fe8f 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8001166:	2082      	movs	r0, #130	; 0x82
 8001168:	f7ff fe8c 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 800116c:	2027      	movs	r0, #39	; 0x27
 800116e:	f7ff fe89 	bl	8000e84 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8001172:	20f2      	movs	r0, #242	; 0xf2
 8001174:	f7ff fe68 	bl	8000e48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff fe83 	bl	8000e84 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 800117e:	2026      	movs	r0, #38	; 0x26
 8001180:	f7ff fe62 	bl	8000e48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8001184:	2001      	movs	r0, #1
 8001186:	f7ff fe7d 	bl	8000e84 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 800118a:	20e0      	movs	r0, #224	; 0xe0
 800118c:	f7ff fe5c 	bl	8000e48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8001190:	200f      	movs	r0, #15
 8001192:	f7ff fe77 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001196:	2031      	movs	r0, #49	; 0x31
 8001198:	f7ff fe74 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 800119c:	202b      	movs	r0, #43	; 0x2b
 800119e:	f7ff fe71 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80011a2:	200c      	movs	r0, #12
 80011a4:	f7ff fe6e 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80011a8:	200e      	movs	r0, #14
 80011aa:	f7ff fe6b 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80011ae:	2008      	movs	r0, #8
 80011b0:	f7ff fe68 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80011b4:	204e      	movs	r0, #78	; 0x4e
 80011b6:	f7ff fe65 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80011ba:	20f1      	movs	r0, #241	; 0xf1
 80011bc:	f7ff fe62 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80011c0:	2037      	movs	r0, #55	; 0x37
 80011c2:	f7ff fe5f 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80011c6:	2007      	movs	r0, #7
 80011c8:	f7ff fe5c 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80011cc:	2010      	movs	r0, #16
 80011ce:	f7ff fe59 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80011d2:	2003      	movs	r0, #3
 80011d4:	f7ff fe56 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80011d8:	200e      	movs	r0, #14
 80011da:	f7ff fe53 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80011de:	2009      	movs	r0, #9
 80011e0:	f7ff fe50 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff fe4d 	bl	8000e84 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80011ea:	20e1      	movs	r0, #225	; 0xe1
 80011ec:	f7ff fe2c 	bl	8000e48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80011f0:	2000      	movs	r0, #0
 80011f2:	f7ff fe47 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80011f6:	200e      	movs	r0, #14
 80011f8:	f7ff fe44 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80011fc:	2014      	movs	r0, #20
 80011fe:	f7ff fe41 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001202:	2003      	movs	r0, #3
 8001204:	f7ff fe3e 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8001208:	2011      	movs	r0, #17
 800120a:	f7ff fe3b 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800120e:	2007      	movs	r0, #7
 8001210:	f7ff fe38 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001214:	2031      	movs	r0, #49	; 0x31
 8001216:	f7ff fe35 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800121a:	20c1      	movs	r0, #193	; 0xc1
 800121c:	f7ff fe32 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8001220:	2048      	movs	r0, #72	; 0x48
 8001222:	f7ff fe2f 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001226:	2008      	movs	r0, #8
 8001228:	f7ff fe2c 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 800122c:	200f      	movs	r0, #15
 800122e:	f7ff fe29 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001232:	200c      	movs	r0, #12
 8001234:	f7ff fe26 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001238:	2031      	movs	r0, #49	; 0x31
 800123a:	f7ff fe23 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800123e:	2036      	movs	r0, #54	; 0x36
 8001240:	f7ff fe20 	bl	8000e84 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001244:	200f      	movs	r0, #15
 8001246:	f7ff fe1d 	bl	8000e84 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800124a:	2011      	movs	r0, #17
 800124c:	f7ff fdfc 	bl	8000e48 <ILI9341_Write_Command>
HAL_Delay(120);
 8001250:	2078      	movs	r0, #120	; 0x78
 8001252:	f001 fa7f 	bl	8002754 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8001256:	2029      	movs	r0, #41	; 0x29
 8001258:	f7ff fdf6 	bl	8000e48 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 800125c:	2003      	movs	r0, #3
 800125e:	f7ff fe97 	bl	8000f90 <ILI9341_Set_Rotation>

HAL_Delay(10);
 8001262:	200a      	movs	r0, #10
 8001264:	f001 fa76 	bl	8002754 <HAL_Delay>
//
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}

0800126c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 800126c:	b5b0      	push	{r4, r5, r7, lr}
 800126e:	b08c      	sub	sp, #48	; 0x30
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	80fb      	strh	r3, [r7, #6]
 8001278:	466b      	mov	r3, sp
 800127a:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001288:	d202      	bcs.n	8001290 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
 800128e:	e002      	b.n	8001296 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8001290:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001296:	2201      	movs	r2, #1
 8001298:	2140      	movs	r1, #64	; 0x40
 800129a:	483d      	ldr	r0, [pc, #244]	; (8001390 <ILI9341_Draw_Colour_Burst+0x124>)
 800129c:	f001 fd44 	bl	8002d28 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2110      	movs	r1, #16
 80012a4:	483a      	ldr	r0, [pc, #232]	; (8001390 <ILI9341_Draw_Colour_Burst+0x124>)
 80012a6:	f001 fd3f 	bl	8002d28 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 80012b4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80012b6:	4623      	mov	r3, r4
 80012b8:	3b01      	subs	r3, #1
 80012ba:	61fb      	str	r3, [r7, #28]
 80012bc:	4620      	mov	r0, r4
 80012be:	f04f 0100 	mov.w	r1, #0
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	f04f 0300 	mov.w	r3, #0
 80012ca:	00cb      	lsls	r3, r1, #3
 80012cc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80012d0:	00c2      	lsls	r2, r0, #3
 80012d2:	4620      	mov	r0, r4
 80012d4:	f04f 0100 	mov.w	r1, #0
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	f04f 0300 	mov.w	r3, #0
 80012e0:	00cb      	lsls	r3, r1, #3
 80012e2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80012e6:	00c2      	lsls	r2, r0, #3
 80012e8:	1de3      	adds	r3, r4, #7
 80012ea:	08db      	lsrs	r3, r3, #3
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	ebad 0d03 	sub.w	sp, sp, r3
 80012f2:	466b      	mov	r3, sp
 80012f4:	3300      	adds	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80012f8:	2300      	movs	r3, #0
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80012fc:	e00e      	b.n	800131c <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001302:	4413      	add	r3, r2
 8001304:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001308:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 800130a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130c:	3301      	adds	r3, #1
 800130e:	88fa      	ldrh	r2, [r7, #6]
 8001310:	b2d1      	uxtb	r1, r2
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001318:	3302      	adds	r3, #2
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
 800131c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	429a      	cmp	r2, r3
 8001322:	d3ec      	bcc.n	80012fe <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001332:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001338:	fbb3 f2f2 	udiv	r2, r3, r2
 800133c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800133e:	fb01 f202 	mul.w	r2, r1, r2
 8001342:	1a9b      	subs	r3, r3, r2
 8001344:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d010      	beq.n	800136e <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800134c:	2300      	movs	r3, #0
 800134e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001350:	e009      	b.n	8001366 <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8001352:	69b9      	ldr	r1, [r7, #24]
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	b29a      	uxth	r2, r3
 8001358:	230a      	movs	r3, #10
 800135a:	480e      	ldr	r0, [pc, #56]	; (8001394 <ILI9341_Draw_Colour_Burst+0x128>)
 800135c:	f004 fdb3 	bl	8005ec6 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001362:	3301      	adds	r3, #1
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	429a      	cmp	r2, r3
 800136c:	d3f1      	bcc.n	8001352 <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 800136e:	69b9      	ldr	r1, [r7, #24]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	b29a      	uxth	r2, r3
 8001374:	230a      	movs	r3, #10
 8001376:	4807      	ldr	r0, [pc, #28]	; (8001394 <ILI9341_Draw_Colour_Burst+0x128>)
 8001378:	f004 fda5 	bl	8005ec6 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800137c:	2201      	movs	r2, #1
 800137e:	2110      	movs	r1, #16
 8001380:	4803      	ldr	r0, [pc, #12]	; (8001390 <ILI9341_Draw_Colour_Burst+0x124>)
 8001382:	f001 fcd1 	bl	8002d28 <HAL_GPIO_WritePin>
 8001386:	46ad      	mov	sp, r5
}
 8001388:	bf00      	nop
 800138a:	3730      	adds	r7, #48	; 0x30
 800138c:	46bd      	mov	sp, r7
 800138e:	bdb0      	pop	{r4, r5, r7, pc}
 8001390:	40021000 	.word	0x40021000
 8001394:	200000c8 	.word	0x200000c8

08001398 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <ILI9341_Fill_Screen+0x44>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <ILI9341_Fill_Screen+0x48>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	2100      	movs	r1, #0
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff fd85 	bl	8000ec0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <ILI9341_Fill_Screen+0x44>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	461a      	mov	r2, r3
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <ILI9341_Fill_Screen+0x48>)
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	fb03 f302 	mul.w	r3, r3, r2
 80013c8:	461a      	mov	r2, r3
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	4611      	mov	r1, r2
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff ff4c 	bl	800126c <ILI9341_Draw_Colour_Burst>
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000002 	.word	0x20000002
 80013e0:	20000000 	.word	0x20000000

080013e4 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	80fb      	strh	r3, [r7, #6]
 80013ee:	460b      	mov	r3, r1
 80013f0:	80bb      	strh	r3, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80013f6:	4b5b      	ldr	r3, [pc, #364]	; (8001564 <ILI9341_Draw_Pixel+0x180>)
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	88fa      	ldrh	r2, [r7, #6]
 80013fe:	429a      	cmp	r2, r3
 8001400:	f080 80ac 	bcs.w	800155c <ILI9341_Draw_Pixel+0x178>
 8001404:	4b58      	ldr	r3, [pc, #352]	; (8001568 <ILI9341_Draw_Pixel+0x184>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	b29b      	uxth	r3, r3
 800140a:	88ba      	ldrh	r2, [r7, #4]
 800140c:	429a      	cmp	r2, r3
 800140e:	f080 80a5 	bcs.w	800155c <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001412:	2200      	movs	r2, #0
 8001414:	2140      	movs	r1, #64	; 0x40
 8001416:	4855      	ldr	r0, [pc, #340]	; (800156c <ILI9341_Draw_Pixel+0x188>)
 8001418:	f001 fc86 	bl	8002d28 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	2110      	movs	r1, #16
 8001420:	4852      	ldr	r0, [pc, #328]	; (800156c <ILI9341_Draw_Pixel+0x188>)
 8001422:	f001 fc81 	bl	8002d28 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8001426:	202a      	movs	r0, #42	; 0x2a
 8001428:	f7ff fcfc 	bl	8000e24 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800142c:	2201      	movs	r2, #1
 800142e:	2140      	movs	r1, #64	; 0x40
 8001430:	484e      	ldr	r0, [pc, #312]	; (800156c <ILI9341_Draw_Pixel+0x188>)
 8001432:	f001 fc79 	bl	8002d28 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001436:	2201      	movs	r2, #1
 8001438:	2110      	movs	r1, #16
 800143a:	484c      	ldr	r0, [pc, #304]	; (800156c <ILI9341_Draw_Pixel+0x188>)
 800143c:	f001 fc74 	bl	8002d28 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001440:	2200      	movs	r2, #0
 8001442:	2110      	movs	r1, #16
 8001444:	4849      	ldr	r0, [pc, #292]	; (800156c <ILI9341_Draw_Pixel+0x188>)
 8001446:	f001 fc6f 	bl	8002d28 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 800144a:	88fb      	ldrh	r3, [r7, #6]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	b29b      	uxth	r3, r3
 8001450:	b2db      	uxtb	r3, r3
 8001452:	753b      	strb	r3, [r7, #20]
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	757b      	strb	r3, [r7, #21]
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	3301      	adds	r3, #1
 800145e:	121b      	asrs	r3, r3, #8
 8001460:	b2db      	uxtb	r3, r3
 8001462:	75bb      	strb	r3, [r7, #22]
 8001464:	88fb      	ldrh	r3, [r7, #6]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	3301      	adds	r3, #1
 800146a:	b2db      	uxtb	r3, r3
 800146c:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 800146e:	f107 0114 	add.w	r1, r7, #20
 8001472:	2301      	movs	r3, #1
 8001474:	2204      	movs	r2, #4
 8001476:	483e      	ldr	r0, [pc, #248]	; (8001570 <ILI9341_Draw_Pixel+0x18c>)
 8001478:	f004 fd25 	bl	8005ec6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800147c:	2201      	movs	r2, #1
 800147e:	2110      	movs	r1, #16
 8001480:	483a      	ldr	r0, [pc, #232]	; (800156c <ILI9341_Draw_Pixel+0x188>)
 8001482:	f001 fc51 	bl	8002d28 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001486:	2200      	movs	r2, #0
 8001488:	2140      	movs	r1, #64	; 0x40
 800148a:	4838      	ldr	r0, [pc, #224]	; (800156c <ILI9341_Draw_Pixel+0x188>)
 800148c:	f001 fc4c 	bl	8002d28 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001490:	2200      	movs	r2, #0
 8001492:	2110      	movs	r1, #16
 8001494:	4835      	ldr	r0, [pc, #212]	; (800156c <ILI9341_Draw_Pixel+0x188>)
 8001496:	f001 fc47 	bl	8002d28 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800149a:	202b      	movs	r0, #43	; 0x2b
 800149c:	f7ff fcc2 	bl	8000e24 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80014a0:	2201      	movs	r2, #1
 80014a2:	2140      	movs	r1, #64	; 0x40
 80014a4:	4831      	ldr	r0, [pc, #196]	; (800156c <ILI9341_Draw_Pixel+0x188>)
 80014a6:	f001 fc3f 	bl	8002d28 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80014aa:	2201      	movs	r2, #1
 80014ac:	2110      	movs	r1, #16
 80014ae:	482f      	ldr	r0, [pc, #188]	; (800156c <ILI9341_Draw_Pixel+0x188>)
 80014b0:	f001 fc3a 	bl	8002d28 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2110      	movs	r1, #16
 80014b8:	482c      	ldr	r0, [pc, #176]	; (800156c <ILI9341_Draw_Pixel+0x188>)
 80014ba:	f001 fc35 	bl	8002d28 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80014be:	88bb      	ldrh	r3, [r7, #4]
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	743b      	strb	r3, [r7, #16]
 80014c8:	88bb      	ldrh	r3, [r7, #4]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	747b      	strb	r3, [r7, #17]
 80014ce:	88bb      	ldrh	r3, [r7, #4]
 80014d0:	3301      	adds	r3, #1
 80014d2:	121b      	asrs	r3, r3, #8
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	74bb      	strb	r3, [r7, #18]
 80014d8:	88bb      	ldrh	r3, [r7, #4]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	3301      	adds	r3, #1
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80014e2:	f107 0110 	add.w	r1, r7, #16
 80014e6:	2301      	movs	r3, #1
 80014e8:	2204      	movs	r2, #4
 80014ea:	4821      	ldr	r0, [pc, #132]	; (8001570 <ILI9341_Draw_Pixel+0x18c>)
 80014ec:	f004 fceb 	bl	8005ec6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80014f0:	2201      	movs	r2, #1
 80014f2:	2110      	movs	r1, #16
 80014f4:	481d      	ldr	r0, [pc, #116]	; (800156c <ILI9341_Draw_Pixel+0x188>)
 80014f6:	f001 fc17 	bl	8002d28 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80014fa:	2200      	movs	r2, #0
 80014fc:	2140      	movs	r1, #64	; 0x40
 80014fe:	481b      	ldr	r0, [pc, #108]	; (800156c <ILI9341_Draw_Pixel+0x188>)
 8001500:	f001 fc12 	bl	8002d28 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001504:	2200      	movs	r2, #0
 8001506:	2110      	movs	r1, #16
 8001508:	4818      	ldr	r0, [pc, #96]	; (800156c <ILI9341_Draw_Pixel+0x188>)
 800150a:	f001 fc0d 	bl	8002d28 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 800150e:	202c      	movs	r0, #44	; 0x2c
 8001510:	f7ff fc88 	bl	8000e24 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001514:	2201      	movs	r2, #1
 8001516:	2140      	movs	r1, #64	; 0x40
 8001518:	4814      	ldr	r0, [pc, #80]	; (800156c <ILI9341_Draw_Pixel+0x188>)
 800151a:	f001 fc05 	bl	8002d28 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800151e:	2201      	movs	r2, #1
 8001520:	2110      	movs	r1, #16
 8001522:	4812      	ldr	r0, [pc, #72]	; (800156c <ILI9341_Draw_Pixel+0x188>)
 8001524:	f001 fc00 	bl	8002d28 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	2110      	movs	r1, #16
 800152c:	480f      	ldr	r0, [pc, #60]	; (800156c <ILI9341_Draw_Pixel+0x188>)
 800152e:	f001 fbfb 	bl	8002d28 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8001532:	887b      	ldrh	r3, [r7, #2]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	b29b      	uxth	r3, r3
 8001538:	b2db      	uxtb	r3, r3
 800153a:	733b      	strb	r3, [r7, #12]
 800153c:	887b      	ldrh	r3, [r7, #2]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8001542:	f107 010c 	add.w	r1, r7, #12
 8001546:	2301      	movs	r3, #1
 8001548:	2202      	movs	r2, #2
 800154a:	4809      	ldr	r0, [pc, #36]	; (8001570 <ILI9341_Draw_Pixel+0x18c>)
 800154c:	f004 fcbb 	bl	8005ec6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001550:	2201      	movs	r2, #1
 8001552:	2110      	movs	r1, #16
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <ILI9341_Draw_Pixel+0x188>)
 8001556:	f001 fbe7 	bl	8002d28 <HAL_GPIO_WritePin>
 800155a:	e000      	b.n	800155e <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800155c:	bf00      	nop
	
}
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000002 	.word	0x20000002
 8001568:	20000000 	.word	0x20000000
 800156c:	40021000 	.word	0x40021000
 8001570:	200000c8 	.word	0x200000c8

08001574 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4604      	mov	r4, r0
 800157c:	4608      	mov	r0, r1
 800157e:	4611      	mov	r1, r2
 8001580:	461a      	mov	r2, r3
 8001582:	4623      	mov	r3, r4
 8001584:	80fb      	strh	r3, [r7, #6]
 8001586:	4603      	mov	r3, r0
 8001588:	80bb      	strh	r3, [r7, #4]
 800158a:	460b      	mov	r3, r1
 800158c:	807b      	strh	r3, [r7, #2]
 800158e:	4613      	mov	r3, r2
 8001590:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001592:	4b24      	ldr	r3, [pc, #144]	; (8001624 <ILI9341_Draw_Rectangle+0xb0>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	b29b      	uxth	r3, r3
 8001598:	88fa      	ldrh	r2, [r7, #6]
 800159a:	429a      	cmp	r2, r3
 800159c:	d23d      	bcs.n	800161a <ILI9341_Draw_Rectangle+0xa6>
 800159e:	4b22      	ldr	r3, [pc, #136]	; (8001628 <ILI9341_Draw_Rectangle+0xb4>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	88ba      	ldrh	r2, [r7, #4]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d237      	bcs.n	800161a <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 80015aa:	88fa      	ldrh	r2, [r7, #6]
 80015ac:	887b      	ldrh	r3, [r7, #2]
 80015ae:	4413      	add	r3, r2
 80015b0:	4a1c      	ldr	r2, [pc, #112]	; (8001624 <ILI9341_Draw_Rectangle+0xb0>)
 80015b2:	8812      	ldrh	r2, [r2, #0]
 80015b4:	b292      	uxth	r2, r2
 80015b6:	4293      	cmp	r3, r2
 80015b8:	dd05      	ble.n	80015c6 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <ILI9341_Draw_Rectangle+0xb0>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	b29a      	uxth	r2, r3
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80015c6:	88ba      	ldrh	r2, [r7, #4]
 80015c8:	883b      	ldrh	r3, [r7, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	4a16      	ldr	r2, [pc, #88]	; (8001628 <ILI9341_Draw_Rectangle+0xb4>)
 80015ce:	8812      	ldrh	r2, [r2, #0]
 80015d0:	b292      	uxth	r2, r2
 80015d2:	4293      	cmp	r3, r2
 80015d4:	dd05      	ble.n	80015e2 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 80015d6:	4b14      	ldr	r3, [pc, #80]	; (8001628 <ILI9341_Draw_Rectangle+0xb4>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	b29a      	uxth	r2, r3
 80015dc:	88bb      	ldrh	r3, [r7, #4]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 80015e2:	88fa      	ldrh	r2, [r7, #6]
 80015e4:	887b      	ldrh	r3, [r7, #2]
 80015e6:	4413      	add	r3, r2
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	3b01      	subs	r3, #1
 80015ec:	b29c      	uxth	r4, r3
 80015ee:	88ba      	ldrh	r2, [r7, #4]
 80015f0:	883b      	ldrh	r3, [r7, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	3b01      	subs	r3, #1
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	88b9      	ldrh	r1, [r7, #4]
 80015fc:	88f8      	ldrh	r0, [r7, #6]
 80015fe:	4622      	mov	r2, r4
 8001600:	f7ff fc5e 	bl	8000ec0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8001604:	883b      	ldrh	r3, [r7, #0]
 8001606:	887a      	ldrh	r2, [r7, #2]
 8001608:	fb02 f303 	mul.w	r3, r2, r3
 800160c:	461a      	mov	r2, r3
 800160e:	8b3b      	ldrh	r3, [r7, #24]
 8001610:	4611      	mov	r1, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fe2a 	bl	800126c <ILI9341_Draw_Colour_Burst>
 8001618:	e000      	b.n	800161c <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800161a:	bf00      	nop
}
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bd90      	pop	{r4, r7, pc}
 8001622:	bf00      	nop
 8001624:	20000002 	.word	0x20000002
 8001628:	20000000 	.word	0x20000000

0800162c <TP_Read>:
#include "stm32f4xx_hal.h"


//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 8001632:	2310      	movs	r3, #16
 8001634:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 800163a:	e019      	b.n	8001670 <TP_Read+0x44>
    {
        value <<= 1;
 800163c:	88bb      	ldrh	r3, [r7, #4]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8001642:	2201      	movs	r2, #1
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	480e      	ldr	r0, [pc, #56]	; (8001680 <TP_Read+0x54>)
 8001648:	f001 fb6e 	bl	8002d28 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	2180      	movs	r1, #128	; 0x80
 8001650:	480b      	ldr	r0, [pc, #44]	; (8001680 <TP_Read+0x54>)
 8001652:	f001 fb69 	bl	8002d28 <HAL_GPIO_WritePin>

        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 8001656:	2101      	movs	r1, #1
 8001658:	480a      	ldr	r0, [pc, #40]	; (8001684 <TP_Read+0x58>)
 800165a:	f001 fb4d 	bl	8002cf8 <HAL_GPIO_ReadPin>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d002      	beq.n	800166a <TP_Read+0x3e>
        {
            value++;
 8001664:	88bb      	ldrh	r3, [r7, #4]
 8001666:	3301      	adds	r3, #1
 8001668:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	3b01      	subs	r3, #1
 800166e:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1e2      	bne.n	800163c <TP_Read+0x10>
    };

    return value;
 8001676:	88bb      	ldrh	r3, [r7, #4]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40020400 	.word	0x40020400
 8001684:	40021000 	.word	0x40021000

08001688 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 8001692:	2308      	movs	r3, #8
 8001694:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	2180      	movs	r1, #128	; 0x80
 800169a:	4815      	ldr	r0, [pc, #84]	; (80016f0 <TP_Write+0x68>)
 800169c:	f001 fb44 	bl	8002d28 <HAL_GPIO_WritePin>

    while(i > 0)
 80016a0:	e01e      	b.n	80016e0 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	da05      	bge.n	80016b6 <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 80016aa:	2201      	movs	r2, #1
 80016ac:	2104      	movs	r1, #4
 80016ae:	4811      	ldr	r0, [pc, #68]	; (80016f4 <TP_Write+0x6c>)
 80016b0:	f001 fb3a 	bl	8002d28 <HAL_GPIO_WritePin>
 80016b4:	e004      	b.n	80016c0 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2104      	movs	r1, #4
 80016ba:	480e      	ldr	r0, [pc, #56]	; (80016f4 <TP_Write+0x6c>)
 80016bc:	f001 fb34 	bl	8002d28 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 80016c6:	2201      	movs	r2, #1
 80016c8:	2180      	movs	r1, #128	; 0x80
 80016ca:	4809      	ldr	r0, [pc, #36]	; (80016f0 <TP_Write+0x68>)
 80016cc:	f001 fb2c 	bl	8002d28 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2180      	movs	r1, #128	; 0x80
 80016d4:	4806      	ldr	r0, [pc, #24]	; (80016f0 <TP_Write+0x68>)
 80016d6:	f001 fb27 	bl	8002d28 <HAL_GPIO_WritePin>
        i--;
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	3b01      	subs	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1dd      	bne.n	80016a2 <TP_Write+0x1a>
    };
}
 80016e6:	bf00      	nop
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40020400 	.word	0x40020400
 80016f4:	40021000 	.word	0x40021000

080016f8 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b08b      	sub	sp, #44	; 0x2c
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8001700:	2201      	movs	r2, #1
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	4862      	ldr	r0, [pc, #392]	; (8001890 <TP_Read_Coordinates+0x198>)
 8001706:	f001 fb0f 	bl	8002d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 800170a:	2201      	movs	r2, #1
 800170c:	2104      	movs	r1, #4
 800170e:	4861      	ldr	r0, [pc, #388]	; (8001894 <TP_Read_Coordinates+0x19c>)
 8001710:	f001 fb0a 	bl	8002d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8001714:	2201      	movs	r2, #1
 8001716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800171a:	485d      	ldr	r0, [pc, #372]	; (8001890 <TP_Read_Coordinates+0x198>)
 800171c:	f001 fb04 	bl	8002d28 <HAL_GPIO_WritePin>

    uint32_t avg_x = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t avg_y = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
	uint16_t rawx = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	81fb      	strh	r3, [r7, #14]
	uint16_t rawy = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	81bb      	strh	r3, [r7, #12]
	uint32_t calculating_x =0;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
	uint32_t calculating_y = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]

    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8001738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173c:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001748:	4851      	ldr	r0, [pc, #324]	; (8001890 <TP_Read_Coordinates+0x198>)
 800174a:	f001 faed 	bl	8002d28 <HAL_GPIO_WritePin>


    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 800174e:	e023      	b.n	8001798 <TP_Read_Coordinates+0xa0>
    {
        TP_Write(CMD_RDY);
 8001750:	2090      	movs	r0, #144	; 0x90
 8001752:	f7ff ff99 	bl	8001688 <TP_Write>

		rawy = TP_Read();
 8001756:	f7ff ff69 	bl	800162c <TP_Read>
 800175a:	4603      	mov	r3, r0
 800175c:	81bb      	strh	r3, [r7, #12]
		avg_y += rawy;
 800175e:	89bb      	ldrh	r3, [r7, #12]
 8001760:	6a3a      	ldr	r2, [r7, #32]
 8001762:	4413      	add	r3, r2
 8001764:	623b      	str	r3, [r7, #32]
		calculating_y += rawy;
 8001766:	89bb      	ldrh	r3, [r7, #12]
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4413      	add	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]


        TP_Write(CMD_RDX);
 800176e:	20d0      	movs	r0, #208	; 0xd0
 8001770:	f7ff ff8a 	bl	8001688 <TP_Write>
        rawx = TP_Read();
 8001774:	f7ff ff5a 	bl	800162c <TP_Read>
 8001778:	4603      	mov	r3, r0
 800177a:	81fb      	strh	r3, [r7, #14]
		avg_x += rawx;
 800177c:	89fb      	ldrh	r3, [r7, #14]
 800177e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001780:	4413      	add	r3, r2
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
		calculating_x += rawx;
 8001784:	89fb      	ldrh	r3, [r7, #14]
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	4413      	add	r3, r2
 800178a:	61fb      	str	r3, [r7, #28]
        samples--;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	3b01      	subs	r3, #1
 8001790:	617b      	str	r3, [r7, #20]
		counted_samples++;
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	3301      	adds	r3, #1
 8001796:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d007      	beq.n	80017ae <TP_Read_Coordinates+0xb6>
 800179e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a2:	483d      	ldr	r0, [pc, #244]	; (8001898 <TP_Read_Coordinates+0x1a0>)
 80017a4:	f001 faa8 	bl	8002cf8 <HAL_GPIO_ReadPin>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0d0      	beq.n	8001750 <TP_Read_Coordinates+0x58>
    };

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 80017ae:	2201      	movs	r2, #1
 80017b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b4:	4836      	ldr	r0, [pc, #216]	; (8001890 <TP_Read_Coordinates+0x198>)
 80017b6:	f001 fab7 	bl	8002d28 <HAL_GPIO_WritePin>


		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017c0:	d154      	bne.n	800186c <TP_Read_Coordinates+0x174>
 80017c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017c6:	4834      	ldr	r0, [pc, #208]	; (8001898 <TP_Read_Coordinates+0x1a0>)
 80017c8:	f001 fa96 	bl	8002cf8 <HAL_GPIO_ReadPin>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d14c      	bne.n	800186c <TP_Read_Coordinates+0x174>
		{

		calculating_x /= counted_samples;
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017da:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e4:	61bb      	str	r3, [r7, #24]

		rawx = calculating_x;
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	81fb      	strh	r3, [r7, #14]
		rawy = calculating_y;
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	81bb      	strh	r3, [r7, #12]

		rawx *= -1;
 80017ee:	89fb      	ldrh	r3, [r7, #14]
 80017f0:	425b      	negs	r3, r3
 80017f2:	81fb      	strh	r3, [r7, #14]
		rawy *= -1;
 80017f4:	89bb      	ldrh	r3, [r7, #12]
 80017f6:	425b      	negs	r3, r3
 80017f8:	81bb      	strh	r3, [r7, #12]

		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
        Coordinates[1] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 80017fa:	89fa      	ldrh	r2, [r7, #14]
 80017fc:	4b27      	ldr	r3, [pc, #156]	; (800189c <TP_Read_Coordinates+0x1a4>)
 80017fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001802:	1ad2      	subs	r2, r2, r3
 8001804:	0852      	lsrs	r2, r2, #1
 8001806:	4413      	add	r3, r2
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	b29b      	uxth	r3, r3
 800180c:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe ffa9 	bl	8000768 <__aeabi_i2d>
 8001816:	a31c      	add	r3, pc, #112	; (adr r3, 8001888 <TP_Read_Coordinates+0x190>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	f7fe fd28 	bl	8000270 <__aeabi_dmul>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	1c9c      	adds	r4, r3, #2
 800182c:	f7ff f806 	bl	800083c <__aeabi_d2uiz>
 8001830:	4603      	mov	r3, r0
 8001832:	b29b      	uxth	r3, r3
 8001834:	8023      	strh	r3, [r4, #0]
		Coordinates[0] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 8001836:	89bb      	ldrh	r3, [r7, #12]
 8001838:	4a19      	ldr	r2, [pc, #100]	; (80018a0 <TP_Read_Coordinates+0x1a8>)
 800183a:	fba2 2303 	umull	r2, r3, r2, r3
 800183e:	09db      	lsrs	r3, r3, #7
 8001840:	b29b      	uxth	r3, r3
 8001842:	3b0f      	subs	r3, #15
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe ff8f 	bl	8000768 <__aeabi_i2d>
 800184a:	a30f      	add	r3, pc, #60	; (adr r3, 8001888 <TP_Read_Coordinates+0x190>)
 800184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001850:	f7fe fd0e 	bl	8000270 <__aeabi_dmul>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	f7fe ffee 	bl	800083c <__aeabi_d2uiz>
 8001860:	4603      	mov	r3, r0
 8001862:	b29a      	uxth	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	801a      	strh	r2, [r3, #0]

		return TOUCHPAD_DATA_OK;
 8001868:	2301      	movs	r3, #1
 800186a:	e007      	b.n	800187c <TP_Read_Coordinates+0x184>
		}
		else
		{
			Coordinates[0] = 0;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3302      	adds	r3, #2
 8001876:	2200      	movs	r2, #0
 8001878:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 800187a:	2300      	movs	r3, #0
		}
}
 800187c:	4618      	mov	r0, r3
 800187e:	372c      	adds	r7, #44	; 0x2c
 8001880:	46bd      	mov	sp, r7
 8001882:	bd90      	pop	{r4, r7, pc}
 8001884:	f3af 8000 	nop.w
 8001888:	28f5c28f 	.word	0x28f5c28f
 800188c:	3ff28f5c 	.word	0x3ff28f5c
 8001890:	40020400 	.word	0x40020400
 8001894:	40021000 	.word	0x40021000
 8001898:	40020800 	.word	0x40020800
 800189c:	e01e01e1 	.word	0xe01e01e1
 80018a0:	a0a0a0a1 	.word	0xa0a0a0a1

080018a4 <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 80018a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ac:	4805      	ldr	r0, [pc, #20]	; (80018c4 <TP_Touchpad_Pressed+0x20>)
 80018ae:	f001 fa23 	bl	8002cf8 <HAL_GPIO_ReadPin>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <TP_Touchpad_Pressed+0x18>
	{
		return TOUCHPAD_PRESSED;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e000      	b.n	80018be <TP_Touchpad_Pressed+0x1a>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 80018bc:	2300      	movs	r3, #0
	}
}
 80018be:	4618      	mov	r0, r3
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40020800 	.word	0x40020800

080018c8 <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	int i =0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 80018d4:	e036      	b.n	8001944 <speed_test_LCD+0x7c>
	{
		i ++;
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	3301      	adds	r3, #1
 80018da:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80018f0:	4819      	ldr	r0, [pc, #100]	; (8001958 <speed_test_LCD+0x90>)
 80018f2:	f004 fa4a 	bl	8005d8a <HAL_RNG_GetRandomNumber>
 80018f6:	6138      	str	r0, [r7, #16]
		xr = random_num;
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 80018fc:	4816      	ldr	r0, [pc, #88]	; (8001958 <speed_test_LCD+0x90>)
 80018fe:	f004 fa44 	bl	8005d8a <HAL_RNG_GetRandomNumber>
 8001902:	6138      	str	r0, [r7, #16]
		yr = random_num;
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001908:	4813      	ldr	r0, [pc, #76]	; (8001958 <speed_test_LCD+0x90>)
 800190a:	f004 fa3e 	bl	8005d8a <HAL_RNG_GetRandomNumber>
 800190e:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001914:	4810      	ldr	r0, [pc, #64]	; (8001958 <speed_test_LCD+0x90>)
 8001916:	f004 fa38 	bl	8005d8a <HAL_RNG_GetRandomNumber>
 800191a:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 8001920:	89fb      	ldrh	r3, [r7, #14]
 8001922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001926:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 8001928:	89bb      	ldrh	r3, [r7, #12]
 800192a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800192e:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 8001930:	897b      	ldrh	r3, [r7, #10]
 8001932:	f003 031f 	and.w	r3, r3, #31
 8001936:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 8001938:	893b      	ldrh	r3, [r7, #8]
 800193a:	897a      	ldrh	r2, [r7, #10]
 800193c:	89b9      	ldrh	r1, [r7, #12]
 800193e:	89f8      	ldrh	r0, [r7, #14]
 8001940:	f7ff f918 	bl	8000b74 <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	429a      	cmp	r2, r3
 800194a:	ddc4      	ble.n	80018d6 <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000120 	.word	0x20000120

0800195c <test_touchsreen>:
//-------------------------------------------------------------------------------------------
/*
 * Print coordinates on LCD
 */
void test_touchsreen(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08e      	sub	sp, #56	; 0x38
 8001960:	af02      	add	r7, sp, #8
	if(TP_Touchpad_Pressed())
 8001962:	f7ff ff9f 	bl	80018a4 <TP_Touchpad_Pressed>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d07a      	beq.n	8001a62 <test_touchsreen+0x106>
	{
		uint16_t x_pos_1 = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		uint16_t y_pos_1 = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	85bb      	strh	r3, [r7, #44]	; 0x2c

		uint16_t x_pos_2 = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	857b      	strh	r3, [r7, #42]	; 0x2a
		uint16_t y_pos_2 = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	853b      	strh	r3, [r7, #40]	; 0x28

		uint16_t position_array[2];
		if(TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 800197c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff feb9 	bl	80016f8 <TP_Read_Coordinates>
 8001986:	4603      	mov	r3, r0
 8001988:	2b01      	cmp	r3, #1
 800198a:	f040 8081 	bne.w	8001a90 <test_touchsreen+0x134>
		{
			x_pos_1 = position_array[0];
 800198e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001990:	85fb      	strh	r3, [r7, #46]	; 0x2e
			y_pos_1 = position_array[1];
 8001992:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001994:	85bb      	strh	r3, [r7, #44]	; 0x2c

			char x_pos_char_buff[15] = {0};
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	f107 0318 	add.w	r3, r7, #24
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	f8c3 2007 	str.w	r2, [r3, #7]
			char y_pos_char_buff[15] = {0};
 80019a8:	2300      	movs	r3, #0
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	f107 0308 	add.w	r3, r7, #8
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	f8c3 2007 	str.w	r2, [r3, #7]

			TP_Read_Coordinates(position_array);
 80019ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fe9a 	bl	80016f8 <TP_Read_Coordinates>
			x_pos_2 = position_array[0];
 80019c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019c6:	857b      	strh	r3, [r7, #42]	; 0x2a
			y_pos_2 = position_array[1];
 80019c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019ca:	853b      	strh	r3, [r7, #40]	; 0x28

			if((x_pos_1 != x_pos_2) || (y_pos_1 != y_pos_2))		// If changed position clear lines
 80019cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80019ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d103      	bne.n	80019dc <test_touchsreen+0x80>
 80019d4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80019d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019d8:	429a      	cmp	r2, r3
 80019da:	d015      	beq.n	8001a08 <test_touchsreen+0xac>
			{
				ILI9341_Draw_Text("            ", 0, 0, WHITE, 3, BLACK);
 80019dc:	2300      	movs	r3, #0
 80019de:	9301      	str	r3, [sp, #4]
 80019e0:	2303      	movs	r3, #3
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019e8:	2200      	movs	r2, #0
 80019ea:	2100      	movs	r1, #0
 80019ec:	482a      	ldr	r0, [pc, #168]	; (8001a98 <test_touchsreen+0x13c>)
 80019ee:	f7ff f9df 	bl	8000db0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("            ", 0, 20, WHITE, 3, BLACK);
 80019f2:	2300      	movs	r3, #0
 80019f4:	9301      	str	r3, [sp, #4]
 80019f6:	2303      	movs	r3, #3
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019fe:	2214      	movs	r2, #20
 8001a00:	2100      	movs	r1, #0
 8001a02:	4825      	ldr	r0, [pc, #148]	; (8001a98 <test_touchsreen+0x13c>)
 8001a04:	f7ff f9d4 	bl	8000db0 <ILI9341_Draw_Text>
			}

			if((x_pos_1 == x_pos_2) && (y_pos_1 == y_pos_2))
 8001a08:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001a0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d103      	bne.n	8001a18 <test_touchsreen+0xbc>
 8001a10:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001a12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d03b      	beq.n	8001a90 <test_touchsreen+0x134>
			{

			}
			else
			{
				sprintf(x_pos_char_buff, "x_pos: %d", x_pos_2);
 8001a18:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	491f      	ldr	r1, [pc, #124]	; (8001a9c <test_touchsreen+0x140>)
 8001a20:	4618      	mov	r0, r3
 8001a22:	f008 fd99 	bl	800a558 <siprintf>
				ILI9341_Draw_Text(x_pos_char_buff, 0, 0, WHITE, 2, BLACK);
 8001a26:	f107 0014 	add.w	r0, r7, #20
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	9301      	str	r3, [sp, #4]
 8001a2e:	2302      	movs	r3, #2
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a36:	2200      	movs	r2, #0
 8001a38:	2100      	movs	r1, #0
 8001a3a:	f7ff f9b9 	bl	8000db0 <ILI9341_Draw_Text>
				sprintf(y_pos_char_buff, "y_pos: %d", y_pos_2);
 8001a3e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	4917      	ldr	r1, [pc, #92]	; (8001aa0 <test_touchsreen+0x144>)
 8001a44:	4618      	mov	r0, r3
 8001a46:	f008 fd87 	bl	800a558 <siprintf>
				ILI9341_Draw_Text(y_pos_char_buff, 0, 20, WHITE, 2, BLACK);
 8001a4a:	1d38      	adds	r0, r7, #4
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	9301      	str	r3, [sp, #4]
 8001a50:	2302      	movs	r3, #2
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a58:	2214      	movs	r2, #20
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	f7ff f9a8 	bl	8000db0 <ILI9341_Draw_Text>
	else
	{
		ILI9341_Draw_Text("            ", 0, 0, WHITE, 3, BLACK);
		ILI9341_Draw_Text("            ", 0, 20, WHITE, 3, BLACK);
	}
}
 8001a60:	e016      	b.n	8001a90 <test_touchsreen+0x134>
		ILI9341_Draw_Text("            ", 0, 0, WHITE, 3, BLACK);
 8001a62:	2300      	movs	r3, #0
 8001a64:	9301      	str	r3, [sp, #4]
 8001a66:	2303      	movs	r3, #3
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2100      	movs	r1, #0
 8001a72:	4809      	ldr	r0, [pc, #36]	; (8001a98 <test_touchsreen+0x13c>)
 8001a74:	f7ff f99c 	bl	8000db0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("            ", 0, 20, WHITE, 3, BLACK);
 8001a78:	2300      	movs	r3, #0
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a84:	2214      	movs	r2, #20
 8001a86:	2100      	movs	r1, #0
 8001a88:	4803      	ldr	r0, [pc, #12]	; (8001a98 <test_touchsreen+0x13c>)
 8001a8a:	f7ff f991 	bl	8000db0 <ILI9341_Draw_Text>
}
 8001a8e:	e7ff      	b.n	8001a90 <test_touchsreen+0x134>
 8001a90:	bf00      	nop
 8001a92:	3730      	adds	r7, #48	; 0x30
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	0800ac58 	.word	0x0800ac58
 8001a9c:	0800ac68 	.word	0x0800ac68
 8001aa0:	0800ac74 	.word	0x0800ac74

08001aa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aaa:	f000 fde1 	bl	8002670 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aae:	f000 f82b 	bl	8001b08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ab2:	f000 f9dd 	bl	8001e70 <MX_GPIO_Init>
  MX_I2S3_Init();
 8001ab6:	f000 f8b5 	bl	8001c24 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001aba:	f000 f8f7 	bl	8001cac <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001abe:	f008 f947 	bl	8009d50 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8001ac2:	f000 f95f 	bl	8001d84 <MX_TIM2_Init>
  MX_SPI2_Init();
 8001ac6:	f000 f927 	bl	8001d18 <MX_SPI2_Init>
  MX_RNG_Init();
 8001aca:	f000 f8db 	bl	8001c84 <MX_RNG_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001ace:	f000 f89d 	bl	8001c0c <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 8001ad2:	f7ff fabb 	bl	800104c <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f7ff fc5e 	bl	8001398 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 8001adc:	2003      	movs	r0, #3
 8001ade:	f7ff fa57 	bl	8000f90 <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f7ff fc58 	bl	8001398 <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 8001ae8:	2364      	movs	r3, #100	; 0x64
 8001aea:	607b      	str	r3, [r7, #4]
  speed_test_LCD(number_of_tests);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff feeb 	bl	80018c8 <speed_test_LCD>

  ILI9341_Fill_Screen(BLACK);
 8001af2:	2000      	movs	r0, #0
 8001af4:	f7ff fc50 	bl	8001398 <ILI9341_Fill_Screen>


  int i = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	603b      	str	r3, [r7, #0]
  while (1)
  {

	  test_touchsreen();
 8001afc:	f7ff ff2e 	bl	800195c <test_touchsreen>


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001b00:	f008 f94c 	bl	8009d9c <MX_USB_HOST_Process>
	  test_touchsreen();
 8001b04:	e7fa      	b.n	8001afc <main+0x58>
	...

08001b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b098      	sub	sp, #96	; 0x60
 8001b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b12:	2230      	movs	r2, #48	; 0x30
 8001b14:	2100      	movs	r1, #0
 8001b16:	4618      	mov	r0, r3
 8001b18:	f008 fc5c 	bl	800a3d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b2c:	f107 030c 	add.w	r3, r7, #12
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	4b31      	ldr	r3, [pc, #196]	; (8001c04 <SystemClock_Config+0xfc>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	4a30      	ldr	r2, [pc, #192]	; (8001c04 <SystemClock_Config+0xfc>)
 8001b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b48:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4a:	4b2e      	ldr	r3, [pc, #184]	; (8001c04 <SystemClock_Config+0xfc>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b56:	2300      	movs	r3, #0
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <SystemClock_Config+0x100>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a2a      	ldr	r2, [pc, #168]	; (8001c08 <SystemClock_Config+0x100>)
 8001b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <SystemClock_Config+0x100>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b72:	2301      	movs	r3, #1
 8001b74:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b7a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b84:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b86:	2308      	movs	r3, #8
 8001b88:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b8a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001b8e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b90:	2302      	movs	r3, #2
 8001b92:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b94:	2307      	movs	r3, #7
 8001b96:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f003 fafb 	bl	8005198 <HAL_RCC_OscConfig>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001ba8:	f000 faba 	bl	8002120 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bac:	230f      	movs	r3, #15
 8001bae:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bb8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	2105      	movs	r1, #5
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f003 fd5c 	bl	8005688 <HAL_RCC_ClockConfig>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001bd6:	f000 faa3 	bl	8002120 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001bde:	23c0      	movs	r3, #192	; 0xc0
 8001be0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001be2:	2302      	movs	r3, #2
 8001be4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	4618      	mov	r0, r3
 8001bec:	f003 ff14 	bl	8005a18 <HAL_RCCEx_PeriphCLKConfig>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001bf6:	f000 fa93 	bl	8002120 <Error_Handler>
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	3760      	adds	r7, #96	; 0x60
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40007000 	.word	0x40007000

08001c0c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2100      	movs	r1, #0
 8001c14:	201c      	movs	r0, #28
 8001c16:	f000 fe9c 	bl	8002952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c1a:	201c      	movs	r0, #28
 8001c1c:	f000 feb5 	bl	800298a <HAL_NVIC_EnableIRQ>
}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <MX_I2S3_Init+0x54>)
 8001c2a:	4a14      	ldr	r2, [pc, #80]	; (8001c7c <MX_I2S3_Init+0x58>)
 8001c2c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001c2e:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <MX_I2S3_Init+0x54>)
 8001c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c34:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <MX_I2S3_Init+0x54>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001c3c:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <MX_I2S3_Init+0x54>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001c42:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <MX_I2S3_Init+0x54>)
 8001c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c48:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <MX_I2S3_Init+0x54>)
 8001c4c:	4a0c      	ldr	r2, [pc, #48]	; (8001c80 <MX_I2S3_Init+0x5c>)
 8001c4e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <MX_I2S3_Init+0x54>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <MX_I2S3_Init+0x54>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <MX_I2S3_Init+0x54>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001c62:	4805      	ldr	r0, [pc, #20]	; (8001c78 <MX_I2S3_Init+0x54>)
 8001c64:	f002 fdf8 	bl	8004858 <HAL_I2S_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001c6e:	f000 fa57 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200001d0 	.word	0x200001d0
 8001c7c:	40003c00 	.word	0x40003c00
 8001c80:	00017700 	.word	0x00017700

08001c84 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <MX_RNG_Init+0x20>)
 8001c8a:	4a07      	ldr	r2, [pc, #28]	; (8001ca8 <MX_RNG_Init+0x24>)
 8001c8c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001c8e:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <MX_RNG_Init+0x20>)
 8001c90:	f004 f802 	bl	8005c98 <HAL_RNG_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001c9a:	f000 fa41 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000120 	.word	0x20000120
 8001ca8:	50060800 	.word	0x50060800

08001cac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cb0:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <MX_SPI1_Init+0x64>)
 8001cb2:	4a18      	ldr	r2, [pc, #96]	; (8001d14 <MX_SPI1_Init+0x68>)
 8001cb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cb6:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <MX_SPI1_Init+0x64>)
 8001cb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cbe:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <MX_SPI1_Init+0x64>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <MX_SPI1_Init+0x64>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <MX_SPI1_Init+0x64>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <MX_SPI1_Init+0x64>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <MX_SPI1_Init+0x64>)
 8001cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cde:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <MX_SPI1_Init+0x64>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <MX_SPI1_Init+0x64>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_SPI1_Init+0x64>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf0:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <MX_SPI1_Init+0x64>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <MX_SPI1_Init+0x64>)
 8001cf8:	220a      	movs	r2, #10
 8001cfa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cfc:	4804      	ldr	r0, [pc, #16]	; (8001d10 <MX_SPI1_Init+0x64>)
 8001cfe:	f004 f859 	bl	8005db4 <HAL_SPI_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d08:	f000 fa0a 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000130 	.word	0x20000130
 8001d14:	40013000 	.word	0x40013000

08001d18 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d1c:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <MX_SPI2_Init+0x64>)
 8001d1e:	4a18      	ldr	r2, [pc, #96]	; (8001d80 <MX_SPI2_Init+0x68>)
 8001d20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d22:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <MX_SPI2_Init+0x64>)
 8001d24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d2a:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <MX_SPI2_Init+0x64>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <MX_SPI2_Init+0x64>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d36:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <MX_SPI2_Init+0x64>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <MX_SPI2_Init+0x64>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d42:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <MX_SPI2_Init+0x64>)
 8001d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d48:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <MX_SPI2_Init+0x64>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <MX_SPI2_Init+0x64>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <MX_SPI2_Init+0x64>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d5c:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <MX_SPI2_Init+0x64>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <MX_SPI2_Init+0x64>)
 8001d64:	220a      	movs	r2, #10
 8001d66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d68:	4804      	ldr	r0, [pc, #16]	; (8001d7c <MX_SPI2_Init+0x64>)
 8001d6a:	f004 f823 	bl	8005db4 <HAL_SPI_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d74:	f000 f9d4 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	200000c8 	.word	0x200000c8
 8001d80:	40003800 	.word	0x40003800

08001d84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08e      	sub	sp, #56	; 0x38
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d98:	f107 0320 	add.w	r3, r7, #32
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
 8001db0:	615a      	str	r2, [r3, #20]
 8001db2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001db4:	4b2d      	ldr	r3, [pc, #180]	; (8001e6c <MX_TIM2_Init+0xe8>)
 8001db6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8001dbc:	4b2b      	ldr	r3, [pc, #172]	; (8001e6c <MX_TIM2_Init+0xe8>)
 8001dbe:	f240 3247 	movw	r2, #839	; 0x347
 8001dc2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc4:	4b29      	ldr	r3, [pc, #164]	; (8001e6c <MX_TIM2_Init+0xe8>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001dca:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <MX_TIM2_Init+0xe8>)
 8001dcc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001dd0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd2:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <MX_TIM2_Init+0xe8>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001dd8:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <MX_TIM2_Init+0xe8>)
 8001dda:	2280      	movs	r2, #128	; 0x80
 8001ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dde:	4823      	ldr	r0, [pc, #140]	; (8001e6c <MX_TIM2_Init+0xe8>)
 8001de0:	f004 fa78 	bl	80062d4 <HAL_TIM_Base_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001dea:	f000 f999 	bl	8002120 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001df4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001df8:	4619      	mov	r1, r3
 8001dfa:	481c      	ldr	r0, [pc, #112]	; (8001e6c <MX_TIM2_Init+0xe8>)
 8001dfc:	f004 fcd8 	bl	80067b0 <HAL_TIM_ConfigClockSource>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001e06:	f000 f98b 	bl	8002120 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e0a:	4818      	ldr	r0, [pc, #96]	; (8001e6c <MX_TIM2_Init+0xe8>)
 8001e0c:	f004 fab1 	bl	8006372 <HAL_TIM_PWM_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001e16:	f000 f983 	bl	8002120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001e1a:	2310      	movs	r3, #16
 8001e1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e22:	f107 0320 	add.w	r3, r7, #32
 8001e26:	4619      	mov	r1, r3
 8001e28:	4810      	ldr	r0, [pc, #64]	; (8001e6c <MX_TIM2_Init+0xe8>)
 8001e2a:	f005 f8a1 	bl	8006f70 <HAL_TIMEx_MasterConfigSynchronization>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001e34:	f000 f974 	bl	8002120 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e38:	2360      	movs	r3, #96	; 0x60
 8001e3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8001e3c:	2364      	movs	r3, #100	; 0x64
 8001e3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4807      	ldr	r0, [pc, #28]	; (8001e6c <MX_TIM2_Init+0xe8>)
 8001e50:	f004 fbf0 	bl	8006634 <HAL_TIM_PWM_ConfigChannel>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001e5a:	f000 f961 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e5e:	4803      	ldr	r0, [pc, #12]	; (8001e6c <MX_TIM2_Init+0xe8>)
 8001e60:	f000 fadc 	bl	800241c <HAL_TIM_MspPostInit>

}
 8001e64:	bf00      	nop
 8001e66:	3738      	adds	r7, #56	; 0x38
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000188 	.word	0x20000188

08001e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08c      	sub	sp, #48	; 0x30
 8001e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]
 8001e84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
 8001e8a:	4b9e      	ldr	r3, [pc, #632]	; (8002104 <MX_GPIO_Init+0x294>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a9d      	ldr	r2, [pc, #628]	; (8002104 <MX_GPIO_Init+0x294>)
 8001e90:	f043 0310 	orr.w	r3, r3, #16
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b9b      	ldr	r3, [pc, #620]	; (8002104 <MX_GPIO_Init+0x294>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	61bb      	str	r3, [r7, #24]
 8001ea0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	4b97      	ldr	r3, [pc, #604]	; (8002104 <MX_GPIO_Init+0x294>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a96      	ldr	r2, [pc, #600]	; (8002104 <MX_GPIO_Init+0x294>)
 8001eac:	f043 0304 	orr.w	r3, r3, #4
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b94      	ldr	r3, [pc, #592]	; (8002104 <MX_GPIO_Init+0x294>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	4b90      	ldr	r3, [pc, #576]	; (8002104 <MX_GPIO_Init+0x294>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a8f      	ldr	r2, [pc, #572]	; (8002104 <MX_GPIO_Init+0x294>)
 8001ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b8d      	ldr	r3, [pc, #564]	; (8002104 <MX_GPIO_Init+0x294>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	4b89      	ldr	r3, [pc, #548]	; (8002104 <MX_GPIO_Init+0x294>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a88      	ldr	r2, [pc, #544]	; (8002104 <MX_GPIO_Init+0x294>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b86      	ldr	r3, [pc, #536]	; (8002104 <MX_GPIO_Init+0x294>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	4b82      	ldr	r3, [pc, #520]	; (8002104 <MX_GPIO_Init+0x294>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a81      	ldr	r2, [pc, #516]	; (8002104 <MX_GPIO_Init+0x294>)
 8001f00:	f043 0302 	orr.w	r3, r3, #2
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b7f      	ldr	r3, [pc, #508]	; (8002104 <MX_GPIO_Init+0x294>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	4b7b      	ldr	r3, [pc, #492]	; (8002104 <MX_GPIO_Init+0x294>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a7a      	ldr	r2, [pc, #488]	; (8002104 <MX_GPIO_Init+0x294>)
 8001f1c:	f043 0308 	orr.w	r3, r3, #8
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b78      	ldr	r3, [pc, #480]	; (8002104 <MX_GPIO_Init+0x294>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 8001f2e:	2200      	movs	r2, #0
 8001f30:	217c      	movs	r1, #124	; 0x7c
 8001f32:	4875      	ldr	r0, [pc, #468]	; (8002108 <MX_GPIO_Init+0x298>)
 8001f34:	f000 fef8 	bl	8002d28 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001f38:	2201      	movs	r2, #1
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	4873      	ldr	r0, [pc, #460]	; (800210c <MX_GPIO_Init+0x29c>)
 8001f3e:	f000 fef3 	bl	8002d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001f42:	2200      	movs	r2, #0
 8001f44:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001f48:	4871      	ldr	r0, [pc, #452]	; (8002110 <MX_GPIO_Init+0x2a0>)
 8001f4a:	f000 feed 	bl	8002d28 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001f54:	486f      	ldr	r0, [pc, #444]	; (8002114 <MX_GPIO_Init+0x2a4>)
 8001f56:	f000 fee7 	bl	8002d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 8001f5a:	2374      	movs	r3, #116	; 0x74
 8001f5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f66:	2303      	movs	r3, #3
 8001f68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f6a:	f107 031c 	add.w	r3, r7, #28
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4865      	ldr	r0, [pc, #404]	; (8002108 <MX_GPIO_Init+0x298>)
 8001f72:	f000 fd25 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001f76:	2308      	movs	r3, #8
 8001f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f82:	2300      	movs	r3, #0
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001f86:	f107 031c 	add.w	r3, r7, #28
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	485e      	ldr	r0, [pc, #376]	; (8002108 <MX_GPIO_Init+0x298>)
 8001f8e:	f000 fd17 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001f92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001fa0:	f107 031c 	add.w	r3, r7, #28
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4859      	ldr	r0, [pc, #356]	; (800210c <MX_GPIO_Init+0x29c>)
 8001fa8:	f000 fd0a 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001fac:	2301      	movs	r3, #1
 8001fae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001fbc:	f107 031c 	add.w	r3, r7, #28
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4852      	ldr	r0, [pc, #328]	; (800210c <MX_GPIO_Init+0x29c>)
 8001fc4:	f000 fcfc 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001fc8:	2308      	movs	r3, #8
 8001fca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fd8:	2305      	movs	r3, #5
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001fdc:	f107 031c 	add.w	r3, r7, #28
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	484a      	ldr	r0, [pc, #296]	; (800210c <MX_GPIO_Init+0x29c>)
 8001fe4:	f000 fcec 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001fec:	4b4a      	ldr	r3, [pc, #296]	; (8002118 <MX_GPIO_Init+0x2a8>)
 8001fee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ff4:	f107 031c 	add.w	r3, r7, #28
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4848      	ldr	r0, [pc, #288]	; (800211c <MX_GPIO_Init+0x2ac>)
 8001ffc:	f000 fce0 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002000:	2304      	movs	r3, #4
 8002002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002004:	2300      	movs	r3, #0
 8002006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800200c:	f107 031c 	add.w	r3, r7, #28
 8002010:	4619      	mov	r1, r3
 8002012:	4840      	ldr	r0, [pc, #256]	; (8002114 <MX_GPIO_Init+0x2a4>)
 8002014:	f000 fcd4 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800201c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2300      	movs	r3, #0
 8002028:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800202a:	2305      	movs	r3, #5
 800202c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800202e:	f107 031c 	add.w	r3, r7, #28
 8002032:	4619      	mov	r1, r3
 8002034:	4837      	ldr	r0, [pc, #220]	; (8002114 <MX_GPIO_Init+0x2a4>)
 8002036:	f000 fcc3 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800203a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800203e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002040:	2301      	movs	r3, #1
 8002042:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2300      	movs	r3, #0
 800204a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800204c:	f107 031c 	add.w	r3, r7, #28
 8002050:	4619      	mov	r1, r3
 8002052:	482f      	ldr	r0, [pc, #188]	; (8002110 <MX_GPIO_Init+0x2a0>)
 8002054:	f000 fcb4 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002058:	2320      	movs	r3, #32
 800205a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800205c:	2300      	movs	r3, #0
 800205e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	4619      	mov	r1, r3
 800206a:	4829      	ldr	r0, [pc, #164]	; (8002110 <MX_GPIO_Init+0x2a0>)
 800206c:	f000 fca8 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002070:	2340      	movs	r3, #64	; 0x40
 8002072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002074:	2301      	movs	r3, #1
 8002076:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207c:	2300      	movs	r3, #0
 800207e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002080:	f107 031c 	add.w	r3, r7, #28
 8002084:	4619      	mov	r1, r3
 8002086:	4823      	ldr	r0, [pc, #140]	; (8002114 <MX_GPIO_Init+0x2a4>)
 8002088:	f000 fc9a 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 800208c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002092:	2301      	movs	r3, #1
 8002094:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209a:	2303      	movs	r3, #3
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209e:	f107 031c 	add.w	r3, r7, #28
 80020a2:	4619      	mov	r1, r3
 80020a4:	481b      	ldr	r0, [pc, #108]	; (8002114 <MX_GPIO_Init+0x2a4>)
 80020a6:	f000 fc8b 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 80020aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020b0:	2312      	movs	r3, #18
 80020b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020b4:	2301      	movs	r3, #1
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b8:	2300      	movs	r3, #0
 80020ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020bc:	2304      	movs	r3, #4
 80020be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 80020c0:	f107 031c 	add.w	r3, r7, #28
 80020c4:	4619      	mov	r1, r3
 80020c6:	4813      	ldr	r0, [pc, #76]	; (8002114 <MX_GPIO_Init+0x2a4>)
 80020c8:	f000 fc7a 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 80020cc:	2301      	movs	r3, #1
 80020ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d0:	2300      	movs	r3, #0
 80020d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 80020d8:	f107 031c 	add.w	r3, r7, #28
 80020dc:	4619      	mov	r1, r3
 80020de:	480a      	ldr	r0, [pc, #40]	; (8002108 <MX_GPIO_Init+0x298>)
 80020e0:	f000 fc6e 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80020e4:	2302      	movs	r3, #2
 80020e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <MX_GPIO_Init+0x2a8>)
 80020ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80020f0:	f107 031c 	add.w	r3, r7, #28
 80020f4:	4619      	mov	r1, r3
 80020f6:	4804      	ldr	r0, [pc, #16]	; (8002108 <MX_GPIO_Init+0x298>)
 80020f8:	f000 fc62 	bl	80029c0 <HAL_GPIO_Init>

}
 80020fc:	bf00      	nop
 80020fe:	3730      	adds	r7, #48	; 0x30
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40023800 	.word	0x40023800
 8002108:	40021000 	.word	0x40021000
 800210c:	40020800 	.word	0x40020800
 8002110:	40020c00 	.word	0x40020c00
 8002114:	40020400 	.word	0x40020400
 8002118:	10120000 	.word	0x10120000
 800211c:	40020000 	.word	0x40020000

08002120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002124:	b672      	cpsid	i
}
 8002126:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002128:	e7fe      	b.n	8002128 <Error_Handler+0x8>
	...

0800212c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	4b14      	ldr	r3, [pc, #80]	; (8002188 <HAL_MspInit+0x5c>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	4a13      	ldr	r2, [pc, #76]	; (8002188 <HAL_MspInit+0x5c>)
 800213c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002140:	6453      	str	r3, [r2, #68]	; 0x44
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <HAL_MspInit+0x5c>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	603b      	str	r3, [r7, #0]
 8002152:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <HAL_MspInit+0x5c>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	4a0c      	ldr	r2, [pc, #48]	; (8002188 <HAL_MspInit+0x5c>)
 8002158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800215c:	6413      	str	r3, [r2, #64]	; 0x40
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <HAL_MspInit+0x5c>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002166:	603b      	str	r3, [r7, #0]
 8002168:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800216a:	2007      	movs	r0, #7
 800216c:	f000 fbe6 	bl	800293c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002170:	2200      	movs	r2, #0
 8002172:	2100      	movs	r1, #0
 8002174:	2005      	movs	r0, #5
 8002176:	f000 fbec 	bl	8002952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800217a:	2005      	movs	r0, #5
 800217c:	f000 fc05 	bl	800298a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002180:	bf00      	nop
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40023800 	.word	0x40023800

0800218c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08a      	sub	sp, #40	; 0x28
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a28      	ldr	r2, [pc, #160]	; (800224c <HAL_I2S_MspInit+0xc0>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d14a      	bne.n	8002244 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	4b27      	ldr	r3, [pc, #156]	; (8002250 <HAL_I2S_MspInit+0xc4>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	4a26      	ldr	r2, [pc, #152]	; (8002250 <HAL_I2S_MspInit+0xc4>)
 80021b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021bc:	6413      	str	r3, [r2, #64]	; 0x40
 80021be:	4b24      	ldr	r3, [pc, #144]	; (8002250 <HAL_I2S_MspInit+0xc4>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	4b20      	ldr	r3, [pc, #128]	; (8002250 <HAL_I2S_MspInit+0xc4>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a1f      	ldr	r2, [pc, #124]	; (8002250 <HAL_I2S_MspInit+0xc4>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <HAL_I2S_MspInit+0xc4>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	4b19      	ldr	r3, [pc, #100]	; (8002250 <HAL_I2S_MspInit+0xc4>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a18      	ldr	r2, [pc, #96]	; (8002250 <HAL_I2S_MspInit+0xc4>)
 80021f0:	f043 0304 	orr.w	r3, r3, #4
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b16      	ldr	r3, [pc, #88]	; (8002250 <HAL_I2S_MspInit+0xc4>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002202:	2310      	movs	r3, #16
 8002204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2300      	movs	r3, #0
 8002210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002212:	2306      	movs	r3, #6
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002216:	f107 0314 	add.w	r3, r7, #20
 800221a:	4619      	mov	r1, r3
 800221c:	480d      	ldr	r0, [pc, #52]	; (8002254 <HAL_I2S_MspInit+0xc8>)
 800221e:	f000 fbcf 	bl	80029c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002222:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002228:	2302      	movs	r3, #2
 800222a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002230:	2300      	movs	r3, #0
 8002232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002234:	2306      	movs	r3, #6
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	4619      	mov	r1, r3
 800223e:	4806      	ldr	r0, [pc, #24]	; (8002258 <HAL_I2S_MspInit+0xcc>)
 8002240:	f000 fbbe 	bl	80029c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002244:	bf00      	nop
 8002246:	3728      	adds	r7, #40	; 0x28
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40003c00 	.word	0x40003c00
 8002250:	40023800 	.word	0x40023800
 8002254:	40020000 	.word	0x40020000
 8002258:	40020800 	.word	0x40020800

0800225c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0b      	ldr	r2, [pc, #44]	; (8002298 <HAL_RNG_MspInit+0x3c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d10d      	bne.n	800228a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <HAL_RNG_MspInit+0x40>)
 8002274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002276:	4a09      	ldr	r2, [pc, #36]	; (800229c <HAL_RNG_MspInit+0x40>)
 8002278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800227c:	6353      	str	r3, [r2, #52]	; 0x34
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <HAL_RNG_MspInit+0x40>)
 8002280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800228a:	bf00      	nop
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	50060800 	.word	0x50060800
 800229c:	40023800 	.word	0x40023800

080022a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08c      	sub	sp, #48	; 0x30
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	f107 031c 	add.w	r3, r7, #28
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a41      	ldr	r2, [pc, #260]	; (80023c4 <HAL_SPI_MspInit+0x124>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d12c      	bne.n	800231c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	4b40      	ldr	r3, [pc, #256]	; (80023c8 <HAL_SPI_MspInit+0x128>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	4a3f      	ldr	r2, [pc, #252]	; (80023c8 <HAL_SPI_MspInit+0x128>)
 80022cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022d0:	6453      	str	r3, [r2, #68]	; 0x44
 80022d2:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <HAL_SPI_MspInit+0x128>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022da:	61bb      	str	r3, [r7, #24]
 80022dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	4b39      	ldr	r3, [pc, #228]	; (80023c8 <HAL_SPI_MspInit+0x128>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a38      	ldr	r2, [pc, #224]	; (80023c8 <HAL_SPI_MspInit+0x128>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b36      	ldr	r3, [pc, #216]	; (80023c8 <HAL_SPI_MspInit+0x128>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80022fa:	23e0      	movs	r3, #224	; 0xe0
 80022fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fe:	2302      	movs	r3, #2
 8002300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002306:	2300      	movs	r3, #0
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800230a:	2305      	movs	r3, #5
 800230c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230e:	f107 031c 	add.w	r3, r7, #28
 8002312:	4619      	mov	r1, r3
 8002314:	482d      	ldr	r0, [pc, #180]	; (80023cc <HAL_SPI_MspInit+0x12c>)
 8002316:	f000 fb53 	bl	80029c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800231a:	e04f      	b.n	80023bc <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a2b      	ldr	r2, [pc, #172]	; (80023d0 <HAL_SPI_MspInit+0x130>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d14a      	bne.n	80023bc <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	613b      	str	r3, [r7, #16]
 800232a:	4b27      	ldr	r3, [pc, #156]	; (80023c8 <HAL_SPI_MspInit+0x128>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	4a26      	ldr	r2, [pc, #152]	; (80023c8 <HAL_SPI_MspInit+0x128>)
 8002330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002334:	6413      	str	r3, [r2, #64]	; 0x40
 8002336:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <HAL_SPI_MspInit+0x128>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <HAL_SPI_MspInit+0x128>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	4a1f      	ldr	r2, [pc, #124]	; (80023c8 <HAL_SPI_MspInit+0x128>)
 800234c:	f043 0304 	orr.w	r3, r3, #4
 8002350:	6313      	str	r3, [r2, #48]	; 0x30
 8002352:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <HAL_SPI_MspInit+0x128>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <HAL_SPI_MspInit+0x128>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a18      	ldr	r2, [pc, #96]	; (80023c8 <HAL_SPI_MspInit+0x128>)
 8002368:	f043 0302 	orr.w	r3, r3, #2
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <HAL_SPI_MspInit+0x128>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800237a:	2304      	movs	r3, #4
 800237c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002386:	2303      	movs	r3, #3
 8002388:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800238a:	2305      	movs	r3, #5
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800238e:	f107 031c 	add.w	r3, r7, #28
 8002392:	4619      	mov	r1, r3
 8002394:	480f      	ldr	r0, [pc, #60]	; (80023d4 <HAL_SPI_MspInit+0x134>)
 8002396:	f000 fb13 	bl	80029c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800239a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800239e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a0:	2302      	movs	r3, #2
 80023a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a8:	2303      	movs	r3, #3
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023ac:	2305      	movs	r3, #5
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b0:	f107 031c 	add.w	r3, r7, #28
 80023b4:	4619      	mov	r1, r3
 80023b6:	4808      	ldr	r0, [pc, #32]	; (80023d8 <HAL_SPI_MspInit+0x138>)
 80023b8:	f000 fb02 	bl	80029c0 <HAL_GPIO_Init>
}
 80023bc:	bf00      	nop
 80023be:	3730      	adds	r7, #48	; 0x30
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40013000 	.word	0x40013000
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40020000 	.word	0x40020000
 80023d0:	40003800 	.word	0x40003800
 80023d4:	40020800 	.word	0x40020800
 80023d8:	40020400 	.word	0x40020400

080023dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ec:	d10d      	bne.n	800240a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	4b09      	ldr	r3, [pc, #36]	; (8002418 <HAL_TIM_Base_MspInit+0x3c>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	4a08      	ldr	r2, [pc, #32]	; (8002418 <HAL_TIM_Base_MspInit+0x3c>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6413      	str	r3, [r2, #64]	; 0x40
 80023fe:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_TIM_Base_MspInit+0x3c>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800

0800241c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 030c 	add.w	r3, r7, #12
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800243c:	d11e      	bne.n	800247c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	4b10      	ldr	r3, [pc, #64]	; (8002484 <HAL_TIM_MspPostInit+0x68>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	4a0f      	ldr	r2, [pc, #60]	; (8002484 <HAL_TIM_MspPostInit+0x68>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6313      	str	r3, [r2, #48]	; 0x30
 800244e:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <HAL_TIM_MspPostInit+0x68>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800245a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800245e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002460:	2302      	movs	r3, #2
 8002462:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002468:	2300      	movs	r3, #0
 800246a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800246c:	2301      	movs	r3, #1
 800246e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002470:	f107 030c 	add.w	r3, r7, #12
 8002474:	4619      	mov	r1, r3
 8002476:	4804      	ldr	r0, [pc, #16]	; (8002488 <HAL_TIM_MspPostInit+0x6c>)
 8002478:	f000 faa2 	bl	80029c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800247c:	bf00      	nop
 800247e:	3720      	adds	r7, #32
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40023800 	.word	0x40023800
 8002488:	40020000 	.word	0x40020000

0800248c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002490:	e7fe      	b.n	8002490 <NMI_Handler+0x4>

08002492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002496:	e7fe      	b.n	8002496 <HardFault_Handler+0x4>

08002498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800249c:	e7fe      	b.n	800249c <MemManage_Handler+0x4>

0800249e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024a2:	e7fe      	b.n	80024a2 <BusFault_Handler+0x4>

080024a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <UsageFault_Handler+0x4>

080024aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024c6:	b480      	push	{r7}
 80024c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024d8:	f000 f91c 	bl	8002714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}

080024e0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
	...

080024f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 80024f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024f8:	481b      	ldr	r0, [pc, #108]	; (8002568 <TIM2_IRQHandler+0x78>)
 80024fa:	f000 fc2e 	bl	8002d5a <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 80024fe:	4b1b      	ldr	r3, [pc, #108]	; (800256c <TIM2_IRQHandler+0x7c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d111      	bne.n	800252a <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 8002506:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <TIM2_IRQHandler+0x80>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2bc8      	cmp	r3, #200	; 0xc8
 800250c:	dc0a      	bgt.n	8002524 <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 800250e:	4b18      	ldr	r3, [pc, #96]	; (8002570 <TIM2_IRQHandler+0x80>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4b18      	ldr	r3, [pc, #96]	; (8002574 <TIM2_IRQHandler+0x84>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 8002518:	4b15      	ldr	r3, [pc, #84]	; (8002570 <TIM2_IRQHandler+0x80>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	3301      	adds	r3, #1
 800251e:	4a14      	ldr	r2, [pc, #80]	; (8002570 <TIM2_IRQHandler+0x80>)
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	e002      	b.n	800252a <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <TIM2_IRQHandler+0x7c>)
 8002526:	2201      	movs	r2, #1
 8002528:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <TIM2_IRQHandler+0x7c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d114      	bne.n	800255c <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 8002532:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <TIM2_IRQHandler+0x80>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b63      	cmp	r3, #99	; 0x63
 8002538:	dd0a      	ble.n	8002550 <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 800253a:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <TIM2_IRQHandler+0x80>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <TIM2_IRQHandler+0x84>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 8002544:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <TIM2_IRQHandler+0x80>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	3b01      	subs	r3, #1
 800254a:	4a09      	ldr	r2, [pc, #36]	; (8002570 <TIM2_IRQHandler+0x80>)
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	e005      	b.n	800255c <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <TIM2_IRQHandler+0x7c>)
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
		  i = 100;
 8002556:	4b06      	ldr	r3, [pc, #24]	; (8002570 <TIM2_IRQHandler+0x80>)
 8002558:	2264      	movs	r2, #100	; 0x64
 800255a:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800255c:	4805      	ldr	r0, [pc, #20]	; (8002574 <TIM2_IRQHandler+0x84>)
 800255e:	f003 ff61 	bl	8006424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40020c00 	.word	0x40020c00
 800256c:	200000b4 	.word	0x200000b4
 8002570:	20000004 	.word	0x20000004
 8002574:	20000188 	.word	0x20000188

08002578 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <OTG_FS_IRQHandler+0x10>)
 800257e:	f000 fe71 	bl	8003264 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	200005f4 	.word	0x200005f4

0800258c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002594:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <_sbrk+0x5c>)
 8002596:	4b15      	ldr	r3, [pc, #84]	; (80025ec <_sbrk+0x60>)
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a0:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <_sbrk+0x64>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d102      	bne.n	80025ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <_sbrk+0x64>)
 80025aa:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <_sbrk+0x68>)
 80025ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ae:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <_sbrk+0x64>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4413      	add	r3, r2
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d207      	bcs.n	80025cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025bc:	f007 fed0 	bl	800a360 <__errno>
 80025c0:	4603      	mov	r3, r0
 80025c2:	220c      	movs	r2, #12
 80025c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025ca:	e009      	b.n	80025e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <_sbrk+0x64>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025d2:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <_sbrk+0x64>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <_sbrk+0x64>)
 80025dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025de:	68fb      	ldr	r3, [r7, #12]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20020000 	.word	0x20020000
 80025ec:	00000400 	.word	0x00000400
 80025f0:	200000b8 	.word	0x200000b8
 80025f4:	20000908 	.word	0x20000908

080025f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <SystemInit+0x20>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	4a05      	ldr	r2, [pc, #20]	; (8002618 <SystemInit+0x20>)
 8002604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800261c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002654 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002620:	480d      	ldr	r0, [pc, #52]	; (8002658 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002622:	490e      	ldr	r1, [pc, #56]	; (800265c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002624:	4a0e      	ldr	r2, [pc, #56]	; (8002660 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002628:	e002      	b.n	8002630 <LoopCopyDataInit>

0800262a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800262a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800262c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800262e:	3304      	adds	r3, #4

08002630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002634:	d3f9      	bcc.n	800262a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002636:	4a0b      	ldr	r2, [pc, #44]	; (8002664 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002638:	4c0b      	ldr	r4, [pc, #44]	; (8002668 <LoopFillZerobss+0x26>)
  movs r3, #0
 800263a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800263c:	e001      	b.n	8002642 <LoopFillZerobss>

0800263e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800263e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002640:	3204      	adds	r2, #4

08002642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002644:	d3fb      	bcc.n	800263e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002646:	f7ff ffd7 	bl	80025f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800264a:	f007 fe8f 	bl	800a36c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800264e:	f7ff fa29 	bl	8001aa4 <main>
  bx  lr    
 8002652:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002654:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800265c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002660:	0800af18 	.word	0x0800af18
  ldr r2, =_sbss
 8002664:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002668:	20000908 	.word	0x20000908

0800266c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800266c:	e7fe      	b.n	800266c <ADC_IRQHandler>
	...

08002670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002674:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <HAL_Init+0x40>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0d      	ldr	r2, [pc, #52]	; (80026b0 <HAL_Init+0x40>)
 800267a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800267e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_Init+0x40>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <HAL_Init+0x40>)
 8002686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800268a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800268c:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <HAL_Init+0x40>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a07      	ldr	r2, [pc, #28]	; (80026b0 <HAL_Init+0x40>)
 8002692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002696:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002698:	2003      	movs	r0, #3
 800269a:	f000 f94f 	bl	800293c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800269e:	2000      	movs	r0, #0
 80026a0:	f000 f808 	bl	80026b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026a4:	f7ff fd42 	bl	800212c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40023c00 	.word	0x40023c00

080026b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026bc:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_InitTick+0x54>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4b12      	ldr	r3, [pc, #72]	; (800270c <HAL_InitTick+0x58>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	4619      	mov	r1, r3
 80026c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 f967 	bl	80029a6 <HAL_SYSTICK_Config>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e00e      	b.n	8002700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b0f      	cmp	r3, #15
 80026e6:	d80a      	bhi.n	80026fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e8:	2200      	movs	r2, #0
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026f0:	f000 f92f 	bl	8002952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026f4:	4a06      	ldr	r2, [pc, #24]	; (8002710 <HAL_InitTick+0x5c>)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	e000      	b.n	8002700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
}
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20000008 	.word	0x20000008
 800270c:	20000010 	.word	0x20000010
 8002710:	2000000c 	.word	0x2000000c

08002714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002718:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_IncTick+0x20>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_IncTick+0x24>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4413      	add	r3, r2
 8002724:	4a04      	ldr	r2, [pc, #16]	; (8002738 <HAL_IncTick+0x24>)
 8002726:	6013      	str	r3, [r2, #0]
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	20000010 	.word	0x20000010
 8002738:	20000218 	.word	0x20000218

0800273c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return uwTick;
 8002740:	4b03      	ldr	r3, [pc, #12]	; (8002750 <HAL_GetTick+0x14>)
 8002742:	681b      	ldr	r3, [r3, #0]
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20000218 	.word	0x20000218

08002754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800275c:	f7ff ffee 	bl	800273c <HAL_GetTick>
 8002760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800276c:	d005      	beq.n	800277a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800276e:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <HAL_Delay+0x44>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	461a      	mov	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4413      	add	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800277a:	bf00      	nop
 800277c:	f7ff ffde 	bl	800273c <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	429a      	cmp	r2, r3
 800278a:	d8f7      	bhi.n	800277c <HAL_Delay+0x28>
  {
  }
}
 800278c:	bf00      	nop
 800278e:	bf00      	nop
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000010 	.word	0x20000010

0800279c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027ac:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <__NVIC_SetPriorityGrouping+0x44>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027b8:	4013      	ands	r3, r2
 80027ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ce:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <__NVIC_SetPriorityGrouping+0x44>)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	60d3      	str	r3, [r2, #12]
}
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e8:	4b04      	ldr	r3, [pc, #16]	; (80027fc <__NVIC_GetPriorityGrouping+0x18>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	0a1b      	lsrs	r3, r3, #8
 80027ee:	f003 0307 	and.w	r3, r3, #7
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	2b00      	cmp	r3, #0
 8002810:	db0b      	blt.n	800282a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	f003 021f 	and.w	r2, r3, #31
 8002818:	4907      	ldr	r1, [pc, #28]	; (8002838 <__NVIC_EnableIRQ+0x38>)
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	2001      	movs	r0, #1
 8002822:	fa00 f202 	lsl.w	r2, r0, r2
 8002826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	e000e100 	.word	0xe000e100

0800283c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	6039      	str	r1, [r7, #0]
 8002846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284c:	2b00      	cmp	r3, #0
 800284e:	db0a      	blt.n	8002866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	b2da      	uxtb	r2, r3
 8002854:	490c      	ldr	r1, [pc, #48]	; (8002888 <__NVIC_SetPriority+0x4c>)
 8002856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285a:	0112      	lsls	r2, r2, #4
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	440b      	add	r3, r1
 8002860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002864:	e00a      	b.n	800287c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	b2da      	uxtb	r2, r3
 800286a:	4908      	ldr	r1, [pc, #32]	; (800288c <__NVIC_SetPriority+0x50>)
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	3b04      	subs	r3, #4
 8002874:	0112      	lsls	r2, r2, #4
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	440b      	add	r3, r1
 800287a:	761a      	strb	r2, [r3, #24]
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	e000e100 	.word	0xe000e100
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002890:	b480      	push	{r7}
 8002892:	b089      	sub	sp, #36	; 0x24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f1c3 0307 	rsb	r3, r3, #7
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	bf28      	it	cs
 80028ae:	2304      	movcs	r3, #4
 80028b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3304      	adds	r3, #4
 80028b6:	2b06      	cmp	r3, #6
 80028b8:	d902      	bls.n	80028c0 <NVIC_EncodePriority+0x30>
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3b03      	subs	r3, #3
 80028be:	e000      	b.n	80028c2 <NVIC_EncodePriority+0x32>
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43da      	mvns	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	401a      	ands	r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	fa01 f303 	lsl.w	r3, r1, r3
 80028e2:	43d9      	mvns	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e8:	4313      	orrs	r3, r2
         );
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3724      	adds	r7, #36	; 0x24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3b01      	subs	r3, #1
 8002904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002908:	d301      	bcc.n	800290e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800290a:	2301      	movs	r3, #1
 800290c:	e00f      	b.n	800292e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800290e:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <SysTick_Config+0x40>)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3b01      	subs	r3, #1
 8002914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002916:	210f      	movs	r1, #15
 8002918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800291c:	f7ff ff8e 	bl	800283c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002920:	4b05      	ldr	r3, [pc, #20]	; (8002938 <SysTick_Config+0x40>)
 8002922:	2200      	movs	r2, #0
 8002924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002926:	4b04      	ldr	r3, [pc, #16]	; (8002938 <SysTick_Config+0x40>)
 8002928:	2207      	movs	r2, #7
 800292a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	e000e010 	.word	0xe000e010

0800293c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7ff ff29 	bl	800279c <__NVIC_SetPriorityGrouping>
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002952:	b580      	push	{r7, lr}
 8002954:	b086      	sub	sp, #24
 8002956:	af00      	add	r7, sp, #0
 8002958:	4603      	mov	r3, r0
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002964:	f7ff ff3e 	bl	80027e4 <__NVIC_GetPriorityGrouping>
 8002968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	68b9      	ldr	r1, [r7, #8]
 800296e:	6978      	ldr	r0, [r7, #20]
 8002970:	f7ff ff8e 	bl	8002890 <NVIC_EncodePriority>
 8002974:	4602      	mov	r2, r0
 8002976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800297a:	4611      	mov	r1, r2
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff5d 	bl	800283c <__NVIC_SetPriority>
}
 8002982:	bf00      	nop
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	4603      	mov	r3, r0
 8002992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff ff31 	bl	8002800 <__NVIC_EnableIRQ>
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff ffa2 	bl	80028f8 <SysTick_Config>
 80029b4:	4603      	mov	r3, r0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b089      	sub	sp, #36	; 0x24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
 80029da:	e16b      	b.n	8002cb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029dc:	2201      	movs	r2, #1
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	4013      	ands	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	f040 815a 	bne.w	8002cae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d005      	beq.n	8002a12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d130      	bne.n	8002a74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4013      	ands	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a48:	2201      	movs	r2, #1
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	f003 0201 	and.w	r2, r3, #1
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d017      	beq.n	8002ab0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d123      	bne.n	8002b04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	08da      	lsrs	r2, r3, #3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3208      	adds	r2, #8
 8002ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	220f      	movs	r2, #15
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	08da      	lsrs	r2, r3, #3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3208      	adds	r2, #8
 8002afe:	69b9      	ldr	r1, [r7, #24]
 8002b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	2203      	movs	r2, #3
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 0203 	and.w	r2, r3, #3
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 80b4 	beq.w	8002cae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	4b60      	ldr	r3, [pc, #384]	; (8002ccc <HAL_GPIO_Init+0x30c>)
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	4a5f      	ldr	r2, [pc, #380]	; (8002ccc <HAL_GPIO_Init+0x30c>)
 8002b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b54:	6453      	str	r3, [r2, #68]	; 0x44
 8002b56:	4b5d      	ldr	r3, [pc, #372]	; (8002ccc <HAL_GPIO_Init+0x30c>)
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b62:	4a5b      	ldr	r2, [pc, #364]	; (8002cd0 <HAL_GPIO_Init+0x310>)
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	089b      	lsrs	r3, r3, #2
 8002b68:	3302      	adds	r3, #2
 8002b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	220f      	movs	r2, #15
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4013      	ands	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a52      	ldr	r2, [pc, #328]	; (8002cd4 <HAL_GPIO_Init+0x314>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d02b      	beq.n	8002be6 <HAL_GPIO_Init+0x226>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a51      	ldr	r2, [pc, #324]	; (8002cd8 <HAL_GPIO_Init+0x318>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d025      	beq.n	8002be2 <HAL_GPIO_Init+0x222>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a50      	ldr	r2, [pc, #320]	; (8002cdc <HAL_GPIO_Init+0x31c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d01f      	beq.n	8002bde <HAL_GPIO_Init+0x21e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a4f      	ldr	r2, [pc, #316]	; (8002ce0 <HAL_GPIO_Init+0x320>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d019      	beq.n	8002bda <HAL_GPIO_Init+0x21a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a4e      	ldr	r2, [pc, #312]	; (8002ce4 <HAL_GPIO_Init+0x324>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d013      	beq.n	8002bd6 <HAL_GPIO_Init+0x216>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a4d      	ldr	r2, [pc, #308]	; (8002ce8 <HAL_GPIO_Init+0x328>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00d      	beq.n	8002bd2 <HAL_GPIO_Init+0x212>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a4c      	ldr	r2, [pc, #304]	; (8002cec <HAL_GPIO_Init+0x32c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d007      	beq.n	8002bce <HAL_GPIO_Init+0x20e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a4b      	ldr	r2, [pc, #300]	; (8002cf0 <HAL_GPIO_Init+0x330>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d101      	bne.n	8002bca <HAL_GPIO_Init+0x20a>
 8002bc6:	2307      	movs	r3, #7
 8002bc8:	e00e      	b.n	8002be8 <HAL_GPIO_Init+0x228>
 8002bca:	2308      	movs	r3, #8
 8002bcc:	e00c      	b.n	8002be8 <HAL_GPIO_Init+0x228>
 8002bce:	2306      	movs	r3, #6
 8002bd0:	e00a      	b.n	8002be8 <HAL_GPIO_Init+0x228>
 8002bd2:	2305      	movs	r3, #5
 8002bd4:	e008      	b.n	8002be8 <HAL_GPIO_Init+0x228>
 8002bd6:	2304      	movs	r3, #4
 8002bd8:	e006      	b.n	8002be8 <HAL_GPIO_Init+0x228>
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e004      	b.n	8002be8 <HAL_GPIO_Init+0x228>
 8002bde:	2302      	movs	r3, #2
 8002be0:	e002      	b.n	8002be8 <HAL_GPIO_Init+0x228>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <HAL_GPIO_Init+0x228>
 8002be6:	2300      	movs	r3, #0
 8002be8:	69fa      	ldr	r2, [r7, #28]
 8002bea:	f002 0203 	and.w	r2, r2, #3
 8002bee:	0092      	lsls	r2, r2, #2
 8002bf0:	4093      	lsls	r3, r2
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bf8:	4935      	ldr	r1, [pc, #212]	; (8002cd0 <HAL_GPIO_Init+0x310>)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	089b      	lsrs	r3, r3, #2
 8002bfe:	3302      	adds	r3, #2
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c06:	4b3b      	ldr	r3, [pc, #236]	; (8002cf4 <HAL_GPIO_Init+0x334>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4013      	ands	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c2a:	4a32      	ldr	r2, [pc, #200]	; (8002cf4 <HAL_GPIO_Init+0x334>)
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c30:	4b30      	ldr	r3, [pc, #192]	; (8002cf4 <HAL_GPIO_Init+0x334>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c54:	4a27      	ldr	r2, [pc, #156]	; (8002cf4 <HAL_GPIO_Init+0x334>)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c5a:	4b26      	ldr	r3, [pc, #152]	; (8002cf4 <HAL_GPIO_Init+0x334>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	43db      	mvns	r3, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4013      	ands	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c7e:	4a1d      	ldr	r2, [pc, #116]	; (8002cf4 <HAL_GPIO_Init+0x334>)
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c84:	4b1b      	ldr	r3, [pc, #108]	; (8002cf4 <HAL_GPIO_Init+0x334>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ca8:	4a12      	ldr	r2, [pc, #72]	; (8002cf4 <HAL_GPIO_Init+0x334>)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	61fb      	str	r3, [r7, #28]
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	2b0f      	cmp	r3, #15
 8002cb8:	f67f ae90 	bls.w	80029dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cbc:	bf00      	nop
 8002cbe:	bf00      	nop
 8002cc0:	3724      	adds	r7, #36	; 0x24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40013800 	.word	0x40013800
 8002cd4:	40020000 	.word	0x40020000
 8002cd8:	40020400 	.word	0x40020400
 8002cdc:	40020800 	.word	0x40020800
 8002ce0:	40020c00 	.word	0x40020c00
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40021400 	.word	0x40021400
 8002cec:	40021800 	.word	0x40021800
 8002cf0:	40021c00 	.word	0x40021c00
 8002cf4:	40013c00 	.word	0x40013c00

08002cf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691a      	ldr	r2, [r3, #16]
 8002d08:	887b      	ldrh	r3, [r7, #2]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d10:	2301      	movs	r3, #1
 8002d12:	73fb      	strb	r3, [r7, #15]
 8002d14:	e001      	b.n	8002d1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d16:	2300      	movs	r3, #0
 8002d18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	807b      	strh	r3, [r7, #2]
 8002d34:	4613      	mov	r3, r2
 8002d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d38:	787b      	ldrb	r3, [r7, #1]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d3e:	887a      	ldrh	r2, [r7, #2]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d44:	e003      	b.n	8002d4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d46:	887b      	ldrh	r3, [r7, #2]
 8002d48:	041a      	lsls	r2, r3, #16
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	619a      	str	r2, [r3, #24]
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b085      	sub	sp, #20
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	460b      	mov	r3, r1
 8002d64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d6c:	887a      	ldrh	r2, [r7, #2]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4013      	ands	r3, r2
 8002d72:	041a      	lsls	r2, r3, #16
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	43d9      	mvns	r1, r3
 8002d78:	887b      	ldrh	r3, [r7, #2]
 8002d7a:	400b      	ands	r3, r1
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	619a      	str	r2, [r3, #24]
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002d8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d90:	b08f      	sub	sp, #60	; 0x3c
 8002d92:	af0a      	add	r7, sp, #40	; 0x28
 8002d94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e054      	b.n	8002e4a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f007 f826 	bl	8009e0c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f004 f9c8 	bl	8007174 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	603b      	str	r3, [r7, #0]
 8002dea:	687e      	ldr	r6, [r7, #4]
 8002dec:	466d      	mov	r5, sp
 8002dee:	f106 0410 	add.w	r4, r6, #16
 8002df2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002df4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002df6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002df8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dfa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dfe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e02:	1d33      	adds	r3, r6, #4
 8002e04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e06:	6838      	ldr	r0, [r7, #0]
 8002e08:	f004 f942 	bl	8007090 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2101      	movs	r1, #1
 8002e12:	4618      	mov	r0, r3
 8002e14:	f004 f9bf 	bl	8007196 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	603b      	str	r3, [r7, #0]
 8002e1e:	687e      	ldr	r6, [r7, #4]
 8002e20:	466d      	mov	r5, sp
 8002e22:	f106 0410 	add.w	r4, r6, #16
 8002e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e32:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e36:	1d33      	adds	r3, r6, #4
 8002e38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e3a:	6838      	ldr	r0, [r7, #0]
 8002e3c:	f004 fad2 	bl	80073e4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e52 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002e52:	b590      	push	{r4, r7, lr}
 8002e54:	b089      	sub	sp, #36	; 0x24
 8002e56:	af04      	add	r7, sp, #16
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	4608      	mov	r0, r1
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	461a      	mov	r2, r3
 8002e60:	4603      	mov	r3, r0
 8002e62:	70fb      	strb	r3, [r7, #3]
 8002e64:	460b      	mov	r3, r1
 8002e66:	70bb      	strb	r3, [r7, #2]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_HCD_HC_Init+0x28>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e076      	b.n	8002f68 <HAL_HCD_HC_Init+0x116>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002e82:	78fb      	ldrb	r3, [r7, #3]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	212c      	movs	r1, #44	; 0x2c
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	333d      	adds	r3, #61	; 0x3d
 8002e90:	2200      	movs	r2, #0
 8002e92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	212c      	movs	r1, #44	; 0x2c
 8002e9a:	fb01 f303 	mul.w	r3, r1, r3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3338      	adds	r3, #56	; 0x38
 8002ea2:	787a      	ldrb	r2, [r7, #1]
 8002ea4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002ea6:	78fb      	ldrb	r3, [r7, #3]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	212c      	movs	r1, #44	; 0x2c
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3340      	adds	r3, #64	; 0x40
 8002eb4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002eb6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	212c      	movs	r1, #44	; 0x2c
 8002ebe:	fb01 f303 	mul.w	r3, r1, r3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3339      	adds	r3, #57	; 0x39
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002eca:	78fb      	ldrb	r3, [r7, #3]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	212c      	movs	r1, #44	; 0x2c
 8002ed0:	fb01 f303 	mul.w	r3, r1, r3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	333f      	adds	r3, #63	; 0x3f
 8002ed8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002edc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	78ba      	ldrb	r2, [r7, #2]
 8002ee2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ee6:	b2d0      	uxtb	r0, r2
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	212c      	movs	r1, #44	; 0x2c
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	333a      	adds	r3, #58	; 0x3a
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002ef8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	da09      	bge.n	8002f14 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002f00:	78fb      	ldrb	r3, [r7, #3]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	212c      	movs	r1, #44	; 0x2c
 8002f06:	fb01 f303 	mul.w	r3, r1, r3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	333b      	adds	r3, #59	; 0x3b
 8002f0e:	2201      	movs	r2, #1
 8002f10:	701a      	strb	r2, [r3, #0]
 8002f12:	e008      	b.n	8002f26 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	212c      	movs	r1, #44	; 0x2c
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	4413      	add	r3, r2
 8002f20:	333b      	adds	r3, #59	; 0x3b
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002f26:	78fb      	ldrb	r3, [r7, #3]
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	212c      	movs	r1, #44	; 0x2c
 8002f2c:	fb01 f303 	mul.w	r3, r1, r3
 8002f30:	4413      	add	r3, r2
 8002f32:	333c      	adds	r3, #60	; 0x3c
 8002f34:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002f38:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6818      	ldr	r0, [r3, #0]
 8002f3e:	787c      	ldrb	r4, [r7, #1]
 8002f40:	78ba      	ldrb	r2, [r7, #2]
 8002f42:	78f9      	ldrb	r1, [r7, #3]
 8002f44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f46:	9302      	str	r3, [sp, #8]
 8002f48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f4c:	9301      	str	r3, [sp, #4]
 8002f4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	4623      	mov	r3, r4
 8002f56:	f004 fbc7 	bl	80076e8 <USB_HC_Init>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd90      	pop	{r4, r7, pc}

08002f70 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d101      	bne.n	8002f8e <HAL_HCD_HC_Halt+0x1e>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e00f      	b.n	8002fae <HAL_HCD_HC_Halt+0x3e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f004 fe03 	bl	8007baa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	4608      	mov	r0, r1
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	70fb      	strb	r3, [r7, #3]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	70bb      	strb	r3, [r7, #2]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	212c      	movs	r1, #44	; 0x2c
 8002fd8:	fb01 f303 	mul.w	r3, r1, r3
 8002fdc:	4413      	add	r3, r2
 8002fde:	333b      	adds	r3, #59	; 0x3b
 8002fe0:	78ba      	ldrb	r2, [r7, #2]
 8002fe2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	212c      	movs	r1, #44	; 0x2c
 8002fea:	fb01 f303 	mul.w	r3, r1, r3
 8002fee:	4413      	add	r3, r2
 8002ff0:	333f      	adds	r3, #63	; 0x3f
 8002ff2:	787a      	ldrb	r2, [r7, #1]
 8002ff4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002ff6:	7c3b      	ldrb	r3, [r7, #16]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d112      	bne.n	8003022 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	212c      	movs	r1, #44	; 0x2c
 8003002:	fb01 f303 	mul.w	r3, r1, r3
 8003006:	4413      	add	r3, r2
 8003008:	3342      	adds	r3, #66	; 0x42
 800300a:	2203      	movs	r2, #3
 800300c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800300e:	78fb      	ldrb	r3, [r7, #3]
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	4413      	add	r3, r2
 800301a:	333d      	adds	r3, #61	; 0x3d
 800301c:	7f3a      	ldrb	r2, [r7, #28]
 800301e:	701a      	strb	r2, [r3, #0]
 8003020:	e008      	b.n	8003034 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003022:	78fb      	ldrb	r3, [r7, #3]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	212c      	movs	r1, #44	; 0x2c
 8003028:	fb01 f303 	mul.w	r3, r1, r3
 800302c:	4413      	add	r3, r2
 800302e:	3342      	adds	r3, #66	; 0x42
 8003030:	2202      	movs	r2, #2
 8003032:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003034:	787b      	ldrb	r3, [r7, #1]
 8003036:	2b03      	cmp	r3, #3
 8003038:	f200 80c6 	bhi.w	80031c8 <HAL_HCD_HC_SubmitRequest+0x210>
 800303c:	a201      	add	r2, pc, #4	; (adr r2, 8003044 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800303e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003042:	bf00      	nop
 8003044:	08003055 	.word	0x08003055
 8003048:	080031b5 	.word	0x080031b5
 800304c:	080030b9 	.word	0x080030b9
 8003050:	08003137 	.word	0x08003137
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003054:	7c3b      	ldrb	r3, [r7, #16]
 8003056:	2b01      	cmp	r3, #1
 8003058:	f040 80b8 	bne.w	80031cc <HAL_HCD_HC_SubmitRequest+0x214>
 800305c:	78bb      	ldrb	r3, [r7, #2]
 800305e:	2b00      	cmp	r3, #0
 8003060:	f040 80b4 	bne.w	80031cc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003064:	8b3b      	ldrh	r3, [r7, #24]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d108      	bne.n	800307c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	212c      	movs	r1, #44	; 0x2c
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	4413      	add	r3, r2
 8003076:	3355      	adds	r3, #85	; 0x55
 8003078:	2201      	movs	r2, #1
 800307a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	212c      	movs	r1, #44	; 0x2c
 8003082:	fb01 f303 	mul.w	r3, r1, r3
 8003086:	4413      	add	r3, r2
 8003088:	3355      	adds	r3, #85	; 0x55
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d109      	bne.n	80030a4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003090:	78fb      	ldrb	r3, [r7, #3]
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	212c      	movs	r1, #44	; 0x2c
 8003096:	fb01 f303 	mul.w	r3, r1, r3
 800309a:	4413      	add	r3, r2
 800309c:	3342      	adds	r3, #66	; 0x42
 800309e:	2200      	movs	r2, #0
 80030a0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80030a2:	e093      	b.n	80031cc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030a4:	78fb      	ldrb	r3, [r7, #3]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	212c      	movs	r1, #44	; 0x2c
 80030aa:	fb01 f303 	mul.w	r3, r1, r3
 80030ae:	4413      	add	r3, r2
 80030b0:	3342      	adds	r3, #66	; 0x42
 80030b2:	2202      	movs	r2, #2
 80030b4:	701a      	strb	r2, [r3, #0]
      break;
 80030b6:	e089      	b.n	80031cc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80030b8:	78bb      	ldrb	r3, [r7, #2]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d11d      	bne.n	80030fa <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030be:	78fb      	ldrb	r3, [r7, #3]
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	212c      	movs	r1, #44	; 0x2c
 80030c4:	fb01 f303 	mul.w	r3, r1, r3
 80030c8:	4413      	add	r3, r2
 80030ca:	3355      	adds	r3, #85	; 0x55
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d109      	bne.n	80030e6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030d2:	78fb      	ldrb	r3, [r7, #3]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	212c      	movs	r1, #44	; 0x2c
 80030d8:	fb01 f303 	mul.w	r3, r1, r3
 80030dc:	4413      	add	r3, r2
 80030de:	3342      	adds	r3, #66	; 0x42
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80030e4:	e073      	b.n	80031ce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	212c      	movs	r1, #44	; 0x2c
 80030ec:	fb01 f303 	mul.w	r3, r1, r3
 80030f0:	4413      	add	r3, r2
 80030f2:	3342      	adds	r3, #66	; 0x42
 80030f4:	2202      	movs	r2, #2
 80030f6:	701a      	strb	r2, [r3, #0]
      break;
 80030f8:	e069      	b.n	80031ce <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80030fa:	78fb      	ldrb	r3, [r7, #3]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	212c      	movs	r1, #44	; 0x2c
 8003100:	fb01 f303 	mul.w	r3, r1, r3
 8003104:	4413      	add	r3, r2
 8003106:	3354      	adds	r3, #84	; 0x54
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d109      	bne.n	8003122 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800310e:	78fb      	ldrb	r3, [r7, #3]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	212c      	movs	r1, #44	; 0x2c
 8003114:	fb01 f303 	mul.w	r3, r1, r3
 8003118:	4413      	add	r3, r2
 800311a:	3342      	adds	r3, #66	; 0x42
 800311c:	2200      	movs	r2, #0
 800311e:	701a      	strb	r2, [r3, #0]
      break;
 8003120:	e055      	b.n	80031ce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	212c      	movs	r1, #44	; 0x2c
 8003128:	fb01 f303 	mul.w	r3, r1, r3
 800312c:	4413      	add	r3, r2
 800312e:	3342      	adds	r3, #66	; 0x42
 8003130:	2202      	movs	r2, #2
 8003132:	701a      	strb	r2, [r3, #0]
      break;
 8003134:	e04b      	b.n	80031ce <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003136:	78bb      	ldrb	r3, [r7, #2]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d11d      	bne.n	8003178 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800313c:	78fb      	ldrb	r3, [r7, #3]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	212c      	movs	r1, #44	; 0x2c
 8003142:	fb01 f303 	mul.w	r3, r1, r3
 8003146:	4413      	add	r3, r2
 8003148:	3355      	adds	r3, #85	; 0x55
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d109      	bne.n	8003164 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003150:	78fb      	ldrb	r3, [r7, #3]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	212c      	movs	r1, #44	; 0x2c
 8003156:	fb01 f303 	mul.w	r3, r1, r3
 800315a:	4413      	add	r3, r2
 800315c:	3342      	adds	r3, #66	; 0x42
 800315e:	2200      	movs	r2, #0
 8003160:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003162:	e034      	b.n	80031ce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	212c      	movs	r1, #44	; 0x2c
 800316a:	fb01 f303 	mul.w	r3, r1, r3
 800316e:	4413      	add	r3, r2
 8003170:	3342      	adds	r3, #66	; 0x42
 8003172:	2202      	movs	r2, #2
 8003174:	701a      	strb	r2, [r3, #0]
      break;
 8003176:	e02a      	b.n	80031ce <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	212c      	movs	r1, #44	; 0x2c
 800317e:	fb01 f303 	mul.w	r3, r1, r3
 8003182:	4413      	add	r3, r2
 8003184:	3354      	adds	r3, #84	; 0x54
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d109      	bne.n	80031a0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	212c      	movs	r1, #44	; 0x2c
 8003192:	fb01 f303 	mul.w	r3, r1, r3
 8003196:	4413      	add	r3, r2
 8003198:	3342      	adds	r3, #66	; 0x42
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]
      break;
 800319e:	e016      	b.n	80031ce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031a0:	78fb      	ldrb	r3, [r7, #3]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	212c      	movs	r1, #44	; 0x2c
 80031a6:	fb01 f303 	mul.w	r3, r1, r3
 80031aa:	4413      	add	r3, r2
 80031ac:	3342      	adds	r3, #66	; 0x42
 80031ae:	2202      	movs	r2, #2
 80031b0:	701a      	strb	r2, [r3, #0]
      break;
 80031b2:	e00c      	b.n	80031ce <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	212c      	movs	r1, #44	; 0x2c
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	3342      	adds	r3, #66	; 0x42
 80031c2:	2200      	movs	r2, #0
 80031c4:	701a      	strb	r2, [r3, #0]
      break;
 80031c6:	e002      	b.n	80031ce <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80031c8:	bf00      	nop
 80031ca:	e000      	b.n	80031ce <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80031cc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80031ce:	78fb      	ldrb	r3, [r7, #3]
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	212c      	movs	r1, #44	; 0x2c
 80031d4:	fb01 f303 	mul.w	r3, r1, r3
 80031d8:	4413      	add	r3, r2
 80031da:	3344      	adds	r3, #68	; 0x44
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	8b3a      	ldrh	r2, [r7, #24]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	202c      	movs	r0, #44	; 0x2c
 80031e8:	fb00 f303 	mul.w	r3, r0, r3
 80031ec:	440b      	add	r3, r1
 80031ee:	334c      	adds	r3, #76	; 0x4c
 80031f0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	212c      	movs	r1, #44	; 0x2c
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	4413      	add	r3, r2
 80031fe:	3360      	adds	r3, #96	; 0x60
 8003200:	2200      	movs	r2, #0
 8003202:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	212c      	movs	r1, #44	; 0x2c
 800320a:	fb01 f303 	mul.w	r3, r1, r3
 800320e:	4413      	add	r3, r2
 8003210:	3350      	adds	r3, #80	; 0x50
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003216:	78fb      	ldrb	r3, [r7, #3]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	212c      	movs	r1, #44	; 0x2c
 800321c:	fb01 f303 	mul.w	r3, r1, r3
 8003220:	4413      	add	r3, r2
 8003222:	3339      	adds	r3, #57	; 0x39
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	212c      	movs	r1, #44	; 0x2c
 800322e:	fb01 f303 	mul.w	r3, r1, r3
 8003232:	4413      	add	r3, r2
 8003234:	3361      	adds	r3, #97	; 0x61
 8003236:	2200      	movs	r2, #0
 8003238:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	222c      	movs	r2, #44	; 0x2c
 8003242:	fb02 f303 	mul.w	r3, r2, r3
 8003246:	3338      	adds	r3, #56	; 0x38
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	18d1      	adds	r1, r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	b2db      	uxtb	r3, r3
 8003252:	461a      	mov	r2, r3
 8003254:	f004 fb56 	bl	8007904 <USB_HC_StartXfer>
 8003258:	4603      	mov	r3, r0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop

08003264 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f004 f86f 	bl	800735e <USB_GetMode>
 8003280:	4603      	mov	r3, r0
 8003282:	2b01      	cmp	r3, #1
 8003284:	f040 80ef 	bne.w	8003466 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f004 f853 	bl	8007338 <USB_ReadInterrupts>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80e5 	beq.w	8003464 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f004 f84a 	bl	8007338 <USB_ReadInterrupts>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032ae:	d104      	bne.n	80032ba <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80032b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f004 f83a 	bl	8007338 <USB_ReadInterrupts>
 80032c4:	4603      	mov	r3, r0
 80032c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032ce:	d104      	bne.n	80032da <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80032d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f004 f82a 	bl	8007338 <USB_ReadInterrupts>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032ee:	d104      	bne.n	80032fa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80032f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f004 f81a 	bl	8007338 <USB_ReadInterrupts>
 8003304:	4603      	mov	r3, r0
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b02      	cmp	r3, #2
 800330c:	d103      	bne.n	8003316 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2202      	movs	r2, #2
 8003314:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f004 f80c 	bl	8007338 <USB_ReadInterrupts>
 8003320:	4603      	mov	r3, r0
 8003322:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003326:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800332a:	d115      	bne.n	8003358 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003334:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d108      	bne.n	8003358 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f006 fdde 	bl	8009f08 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2101      	movs	r1, #1
 8003352:	4618      	mov	r0, r3
 8003354:	f004 f902 	bl	800755c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f003 ffeb 	bl	8007338 <USB_ReadInterrupts>
 8003362:	4603      	mov	r3, r0
 8003364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800336c:	d102      	bne.n	8003374 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f001 f9ff 	bl	8004772 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f003 ffdd 	bl	8007338 <USB_ReadInterrupts>
 800337e:	4603      	mov	r3, r0
 8003380:	f003 0308 	and.w	r3, r3, #8
 8003384:	2b08      	cmp	r3, #8
 8003386:	d106      	bne.n	8003396 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f006 fda1 	bl	8009ed0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2208      	movs	r2, #8
 8003394:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f003 ffcc 	bl	8007338 <USB_ReadInterrupts>
 80033a0:	4603      	mov	r3, r0
 80033a2:	f003 0310 	and.w	r3, r3, #16
 80033a6:	2b10      	cmp	r3, #16
 80033a8:	d101      	bne.n	80033ae <HAL_HCD_IRQHandler+0x14a>
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <HAL_HCD_IRQHandler+0x14c>
 80033ae:	2300      	movs	r3, #0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d012      	beq.n	80033da <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0210 	bic.w	r2, r2, #16
 80033c2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f001 f902 	bl	80045ce <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	699a      	ldr	r2, [r3, #24]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f042 0210 	orr.w	r2, r2, #16
 80033d8:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f003 ffaa 	bl	8007338 <USB_ReadInterrupts>
 80033e4:	4603      	mov	r3, r0
 80033e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033ee:	d13a      	bne.n	8003466 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f004 fbc7 	bl	8007b88 <USB_HC_ReadInterrupt>
 80033fa:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	e025      	b.n	800344e <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f003 030f 	and.w	r3, r3, #15
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	fa22 f303 	lsr.w	r3, r2, r3
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d018      	beq.n	8003448 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4413      	add	r3, r2
 800341e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800342c:	d106      	bne.n	800343c <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	4619      	mov	r1, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f8ab 	bl	8003590 <HCD_HC_IN_IRQHandler>
 800343a:	e005      	b.n	8003448 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	b2db      	uxtb	r3, r3
 8003440:	4619      	mov	r1, r3
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fcc6 	bl	8003dd4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	3301      	adds	r3, #1
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	429a      	cmp	r2, r3
 8003456:	d3d4      	bcc.n	8003402 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003460:	615a      	str	r2, [r3, #20]
 8003462:	e000      	b.n	8003466 <HAL_HCD_IRQHandler+0x202>
      return;
 8003464:	bf00      	nop
    }
  }
}
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_HCD_Start+0x16>
 800347e:	2302      	movs	r3, #2
 8003480:	e013      	b.n	80034aa <HAL_HCD_Start+0x3e>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f003 fe5f 	bl	8007152 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2101      	movs	r1, #1
 800349a:	4618      	mov	r0, r3
 800349c:	f004 f8c2 	bl	8007624 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_HCD_Stop+0x16>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e00d      	b.n	80034e4 <HAL_HCD_Stop+0x32>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f004 fcc1 	bl	8007e5c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f004 f869 	bl	80075d0 <USB_ResetPort>
 80034fe:	4603      	mov	r3, r0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003514:	78fb      	ldrb	r3, [r7, #3]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	212c      	movs	r1, #44	; 0x2c
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	4413      	add	r3, r2
 8003520:	3360      	adds	r3, #96	; 0x60
 8003522:	781b      	ldrb	r3, [r3, #0]
}
 8003524:	4618      	mov	r0, r3
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	212c      	movs	r1, #44	; 0x2c
 8003542:	fb01 f303 	mul.w	r3, r1, r3
 8003546:	4413      	add	r3, r2
 8003548:	3350      	adds	r3, #80	; 0x50
 800354a:	681b      	ldr	r3, [r3, #0]
}
 800354c:	4618      	mov	r0, r3
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f004 f8ad 	bl	80076c4 <USB_GetCurrentFrame>
 800356a:	4603      	mov	r3, r0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f004 f888 	bl	8007696 <USB_GetHostSpeed>
 8003586:	4603      	mov	r3, r0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d119      	bne.n	80035f4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035cc:	461a      	mov	r2, r3
 80035ce:	2304      	movs	r3, #4
 80035d0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	0151      	lsls	r1, r2, #5
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	440a      	add	r2, r1
 80035e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035ec:	f043 0302 	orr.w	r3, r3, #2
 80035f0:	60d3      	str	r3, [r2, #12]
 80035f2:	e101      	b.n	80037f8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	015a      	lsls	r2, r3, #5
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	4413      	add	r3, r2
 80035fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800360a:	d12b      	bne.n	8003664 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4413      	add	r3, r2
 8003614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003618:	461a      	mov	r2, r3
 800361a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800361e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	212c      	movs	r1, #44	; 0x2c
 8003626:	fb01 f303 	mul.w	r3, r1, r3
 800362a:	4413      	add	r3, r2
 800362c:	3361      	adds	r3, #97	; 0x61
 800362e:	2207      	movs	r2, #7
 8003630:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4413      	add	r3, r2
 800363a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	0151      	lsls	r1, r2, #5
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	440a      	add	r2, r1
 8003648:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800364c:	f043 0302 	orr.w	r3, r3, #2
 8003650:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	4611      	mov	r1, r2
 800365c:	4618      	mov	r0, r3
 800365e:	f004 faa4 	bl	8007baa <USB_HC_Halt>
 8003662:	e0c9      	b.n	80037f8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4413      	add	r3, r2
 800366c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b20      	cmp	r3, #32
 8003678:	d109      	bne.n	800368e <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4413      	add	r3, r2
 8003682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003686:	461a      	mov	r2, r3
 8003688:	2320      	movs	r3, #32
 800368a:	6093      	str	r3, [r2, #8]
 800368c:	e0b4      	b.n	80037f8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4413      	add	r3, r2
 8003696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	2b08      	cmp	r3, #8
 80036a2:	d133      	bne.n	800370c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	015a      	lsls	r2, r3, #5
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	4413      	add	r3, r2
 80036ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	0151      	lsls	r1, r2, #5
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	440a      	add	r2, r1
 80036ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036be:	f043 0302 	orr.w	r3, r3, #2
 80036c2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	212c      	movs	r1, #44	; 0x2c
 80036ca:	fb01 f303 	mul.w	r3, r1, r3
 80036ce:	4413      	add	r3, r2
 80036d0:	3361      	adds	r3, #97	; 0x61
 80036d2:	2205      	movs	r2, #5
 80036d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e2:	461a      	mov	r2, r3
 80036e4:	2310      	movs	r3, #16
 80036e6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f4:	461a      	mov	r2, r3
 80036f6:	2308      	movs	r3, #8
 80036f8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	4611      	mov	r1, r2
 8003704:	4618      	mov	r0, r3
 8003706:	f004 fa50 	bl	8007baa <USB_HC_Halt>
 800370a:	e075      	b.n	80037f8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	4413      	add	r3, r2
 8003714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003722:	d134      	bne.n	800378e <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	4413      	add	r3, r2
 800372c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	0151      	lsls	r1, r2, #5
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	440a      	add	r2, r1
 800373a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800373e:	f043 0302 	orr.w	r3, r3, #2
 8003742:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	212c      	movs	r1, #44	; 0x2c
 800374a:	fb01 f303 	mul.w	r3, r1, r3
 800374e:	4413      	add	r3, r2
 8003750:	3361      	adds	r3, #97	; 0x61
 8003752:	2208      	movs	r2, #8
 8003754:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	4413      	add	r3, r2
 800375e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003762:	461a      	mov	r2, r3
 8003764:	2310      	movs	r3, #16
 8003766:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4413      	add	r3, r2
 8003770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003774:	461a      	mov	r2, r3
 8003776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800377a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	4611      	mov	r1, r2
 8003786:	4618      	mov	r0, r3
 8003788:	f004 fa0f 	bl	8007baa <USB_HC_Halt>
 800378c:	e034      	b.n	80037f8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4413      	add	r3, r2
 8003796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a0:	2b80      	cmp	r3, #128	; 0x80
 80037a2:	d129      	bne.n	80037f8 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	0151      	lsls	r1, r2, #5
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	440a      	add	r2, r1
 80037ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037be:	f043 0302 	orr.w	r3, r3, #2
 80037c2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	212c      	movs	r1, #44	; 0x2c
 80037ca:	fb01 f303 	mul.w	r3, r1, r3
 80037ce:	4413      	add	r3, r2
 80037d0:	3361      	adds	r3, #97	; 0x61
 80037d2:	2206      	movs	r2, #6
 80037d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	4611      	mov	r1, r2
 80037e0:	4618      	mov	r0, r3
 80037e2:	f004 f9e2 	bl	8007baa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f2:	461a      	mov	r2, r3
 80037f4:	2380      	movs	r3, #128	; 0x80
 80037f6:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800380a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800380e:	d122      	bne.n	8003856 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4413      	add	r3, r2
 8003818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	0151      	lsls	r1, r2, #5
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	440a      	add	r2, r1
 8003826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800382a:	f043 0302 	orr.w	r3, r3, #2
 800382e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	4611      	mov	r1, r2
 800383a:	4618      	mov	r0, r3
 800383c:	f004 f9b5 	bl	8007baa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	4413      	add	r3, r2
 8003848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800384c:	461a      	mov	r2, r3
 800384e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003852:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003854:	e2ba      	b.n	8003dcc <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	4413      	add	r3, r2
 800385e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b01      	cmp	r3, #1
 800386a:	f040 811b 	bne.w	8003aa4 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d019      	beq.n	80038aa <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	212c      	movs	r1, #44	; 0x2c
 800387c:	fb01 f303 	mul.w	r3, r1, r3
 8003880:	4413      	add	r3, r2
 8003882:	3348      	adds	r3, #72	; 0x48
 8003884:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	0159      	lsls	r1, r3, #5
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	440b      	add	r3, r1
 800388e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003898:	1ad2      	subs	r2, r2, r3
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	202c      	movs	r0, #44	; 0x2c
 80038a0:	fb00 f303 	mul.w	r3, r0, r3
 80038a4:	440b      	add	r3, r1
 80038a6:	3350      	adds	r3, #80	; 0x50
 80038a8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	212c      	movs	r1, #44	; 0x2c
 80038b0:	fb01 f303 	mul.w	r3, r1, r3
 80038b4:	4413      	add	r3, r2
 80038b6:	3361      	adds	r3, #97	; 0x61
 80038b8:	2201      	movs	r2, #1
 80038ba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	212c      	movs	r1, #44	; 0x2c
 80038c2:	fb01 f303 	mul.w	r3, r1, r3
 80038c6:	4413      	add	r3, r2
 80038c8:	335c      	adds	r3, #92	; 0x5c
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038da:	461a      	mov	r2, r3
 80038dc:	2301      	movs	r3, #1
 80038de:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	212c      	movs	r1, #44	; 0x2c
 80038e6:	fb01 f303 	mul.w	r3, r1, r3
 80038ea:	4413      	add	r3, r2
 80038ec:	333f      	adds	r3, #63	; 0x3f
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d009      	beq.n	8003908 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	212c      	movs	r1, #44	; 0x2c
 80038fa:	fb01 f303 	mul.w	r3, r1, r3
 80038fe:	4413      	add	r3, r2
 8003900:	333f      	adds	r3, #63	; 0x3f
 8003902:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003904:	2b02      	cmp	r3, #2
 8003906:	d121      	bne.n	800394c <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	4413      	add	r3, r2
 8003910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	0151      	lsls	r1, r2, #5
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	440a      	add	r2, r1
 800391e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003922:	f043 0302 	orr.w	r3, r3, #2
 8003926:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	4611      	mov	r1, r2
 8003932:	4618      	mov	r0, r3
 8003934:	f004 f939 	bl	8007baa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4413      	add	r3, r2
 8003940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003944:	461a      	mov	r2, r3
 8003946:	2310      	movs	r3, #16
 8003948:	6093      	str	r3, [r2, #8]
 800394a:	e066      	b.n	8003a1a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	212c      	movs	r1, #44	; 0x2c
 8003952:	fb01 f303 	mul.w	r3, r1, r3
 8003956:	4413      	add	r3, r2
 8003958:	333f      	adds	r3, #63	; 0x3f
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b03      	cmp	r3, #3
 800395e:	d127      	bne.n	80039b0 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	4413      	add	r3, r2
 8003968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	0151      	lsls	r1, r2, #5
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	440a      	add	r2, r1
 8003976:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800397a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800397e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	212c      	movs	r1, #44	; 0x2c
 8003986:	fb01 f303 	mul.w	r3, r1, r3
 800398a:	4413      	add	r3, r2
 800398c:	3360      	adds	r3, #96	; 0x60
 800398e:	2201      	movs	r2, #1
 8003990:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	b2d9      	uxtb	r1, r3
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	202c      	movs	r0, #44	; 0x2c
 800399c:	fb00 f303 	mul.w	r3, r0, r3
 80039a0:	4413      	add	r3, r2
 80039a2:	3360      	adds	r3, #96	; 0x60
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f006 fabb 	bl	8009f24 <HAL_HCD_HC_NotifyURBChange_Callback>
 80039ae:	e034      	b.n	8003a1a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	212c      	movs	r1, #44	; 0x2c
 80039b6:	fb01 f303 	mul.w	r3, r1, r3
 80039ba:	4413      	add	r3, r2
 80039bc:	333f      	adds	r3, #63	; 0x3f
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d12a      	bne.n	8003a1a <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	212c      	movs	r1, #44	; 0x2c
 80039ca:	fb01 f303 	mul.w	r3, r1, r3
 80039ce:	4413      	add	r3, r2
 80039d0:	3360      	adds	r3, #96	; 0x60
 80039d2:	2201      	movs	r2, #1
 80039d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	212c      	movs	r1, #44	; 0x2c
 80039dc:	fb01 f303 	mul.w	r3, r1, r3
 80039e0:	4413      	add	r3, r2
 80039e2:	3354      	adds	r3, #84	; 0x54
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	f083 0301 	eor.w	r3, r3, #1
 80039ea:	b2d8      	uxtb	r0, r3
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	212c      	movs	r1, #44	; 0x2c
 80039f2:	fb01 f303 	mul.w	r3, r1, r3
 80039f6:	4413      	add	r3, r2
 80039f8:	3354      	adds	r3, #84	; 0x54
 80039fa:	4602      	mov	r2, r0
 80039fc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	b2d9      	uxtb	r1, r3
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	202c      	movs	r0, #44	; 0x2c
 8003a08:	fb00 f303 	mul.w	r3, r0, r3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3360      	adds	r3, #96	; 0x60
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	461a      	mov	r2, r3
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f006 fa85 	bl	8009f24 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d12b      	bne.n	8003a7a <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	212c      	movs	r1, #44	; 0x2c
 8003a28:	fb01 f303 	mul.w	r3, r1, r3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3348      	adds	r3, #72	; 0x48
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	202c      	movs	r0, #44	; 0x2c
 8003a38:	fb00 f202 	mul.w	r2, r0, r2
 8003a3c:	440a      	add	r2, r1
 8003a3e:	3240      	adds	r2, #64	; 0x40
 8003a40:	8812      	ldrh	r2, [r2, #0]
 8003a42:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 81be 	beq.w	8003dcc <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	212c      	movs	r1, #44	; 0x2c
 8003a56:	fb01 f303 	mul.w	r3, r1, r3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	3354      	adds	r3, #84	; 0x54
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	f083 0301 	eor.w	r3, r3, #1
 8003a64:	b2d8      	uxtb	r0, r3
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	212c      	movs	r1, #44	; 0x2c
 8003a6c:	fb01 f303 	mul.w	r3, r1, r3
 8003a70:	4413      	add	r3, r2
 8003a72:	3354      	adds	r3, #84	; 0x54
 8003a74:	4602      	mov	r2, r0
 8003a76:	701a      	strb	r2, [r3, #0]
}
 8003a78:	e1a8      	b.n	8003dcc <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	212c      	movs	r1, #44	; 0x2c
 8003a80:	fb01 f303 	mul.w	r3, r1, r3
 8003a84:	4413      	add	r3, r2
 8003a86:	3354      	adds	r3, #84	; 0x54
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	f083 0301 	eor.w	r3, r3, #1
 8003a8e:	b2d8      	uxtb	r0, r3
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	212c      	movs	r1, #44	; 0x2c
 8003a96:	fb01 f303 	mul.w	r3, r1, r3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	3354      	adds	r3, #84	; 0x54
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	701a      	strb	r2, [r3, #0]
}
 8003aa2:	e193      	b.n	8003dcc <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	f040 8106 	bne.w	8003cc8 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	0151      	lsls	r1, r2, #5
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	440a      	add	r2, r1
 8003ad2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ad6:	f023 0302 	bic.w	r3, r3, #2
 8003ada:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	212c      	movs	r1, #44	; 0x2c
 8003ae2:	fb01 f303 	mul.w	r3, r1, r3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	3361      	adds	r3, #97	; 0x61
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d109      	bne.n	8003b04 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	212c      	movs	r1, #44	; 0x2c
 8003af6:	fb01 f303 	mul.w	r3, r1, r3
 8003afa:	4413      	add	r3, r2
 8003afc:	3360      	adds	r3, #96	; 0x60
 8003afe:	2201      	movs	r2, #1
 8003b00:	701a      	strb	r2, [r3, #0]
 8003b02:	e0c9      	b.n	8003c98 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	212c      	movs	r1, #44	; 0x2c
 8003b0a:	fb01 f303 	mul.w	r3, r1, r3
 8003b0e:	4413      	add	r3, r2
 8003b10:	3361      	adds	r3, #97	; 0x61
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b05      	cmp	r3, #5
 8003b16:	d109      	bne.n	8003b2c <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	212c      	movs	r1, #44	; 0x2c
 8003b1e:	fb01 f303 	mul.w	r3, r1, r3
 8003b22:	4413      	add	r3, r2
 8003b24:	3360      	adds	r3, #96	; 0x60
 8003b26:	2205      	movs	r2, #5
 8003b28:	701a      	strb	r2, [r3, #0]
 8003b2a:	e0b5      	b.n	8003c98 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	212c      	movs	r1, #44	; 0x2c
 8003b32:	fb01 f303 	mul.w	r3, r1, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	3361      	adds	r3, #97	; 0x61
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b06      	cmp	r3, #6
 8003b3e:	d009      	beq.n	8003b54 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	212c      	movs	r1, #44	; 0x2c
 8003b46:	fb01 f303 	mul.w	r3, r1, r3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	3361      	adds	r3, #97	; 0x61
 8003b4e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d150      	bne.n	8003bf6 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	212c      	movs	r1, #44	; 0x2c
 8003b5a:	fb01 f303 	mul.w	r3, r1, r3
 8003b5e:	4413      	add	r3, r2
 8003b60:	335c      	adds	r3, #92	; 0x5c
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	202c      	movs	r0, #44	; 0x2c
 8003b6c:	fb00 f303 	mul.w	r3, r0, r3
 8003b70:	440b      	add	r3, r1
 8003b72:	335c      	adds	r3, #92	; 0x5c
 8003b74:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	212c      	movs	r1, #44	; 0x2c
 8003b7c:	fb01 f303 	mul.w	r3, r1, r3
 8003b80:	4413      	add	r3, r2
 8003b82:	335c      	adds	r3, #92	; 0x5c
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d912      	bls.n	8003bb0 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	212c      	movs	r1, #44	; 0x2c
 8003b90:	fb01 f303 	mul.w	r3, r1, r3
 8003b94:	4413      	add	r3, r2
 8003b96:	335c      	adds	r3, #92	; 0x5c
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	212c      	movs	r1, #44	; 0x2c
 8003ba2:	fb01 f303 	mul.w	r3, r1, r3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3360      	adds	r3, #96	; 0x60
 8003baa:	2204      	movs	r2, #4
 8003bac:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003bae:	e073      	b.n	8003c98 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	212c      	movs	r1, #44	; 0x2c
 8003bb6:	fb01 f303 	mul.w	r3, r1, r3
 8003bba:	4413      	add	r3, r2
 8003bbc:	3360      	adds	r3, #96	; 0x60
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bd8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003be0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bee:	461a      	mov	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003bf4:	e050      	b.n	8003c98 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	212c      	movs	r1, #44	; 0x2c
 8003bfc:	fb01 f303 	mul.w	r3, r1, r3
 8003c00:	4413      	add	r3, r2
 8003c02:	3361      	adds	r3, #97	; 0x61
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d122      	bne.n	8003c50 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	212c      	movs	r1, #44	; 0x2c
 8003c10:	fb01 f303 	mul.w	r3, r1, r3
 8003c14:	4413      	add	r3, r2
 8003c16:	3360      	adds	r3, #96	; 0x60
 8003c18:	2202      	movs	r2, #2
 8003c1a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c32:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c3a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c48:	461a      	mov	r2, r3
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	e023      	b.n	8003c98 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	212c      	movs	r1, #44	; 0x2c
 8003c56:	fb01 f303 	mul.w	r3, r1, r3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3361      	adds	r3, #97	; 0x61
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b07      	cmp	r3, #7
 8003c62:	d119      	bne.n	8003c98 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	212c      	movs	r1, #44	; 0x2c
 8003c6a:	fb01 f303 	mul.w	r3, r1, r3
 8003c6e:	4413      	add	r3, r2
 8003c70:	335c      	adds	r3, #92	; 0x5c
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	202c      	movs	r0, #44	; 0x2c
 8003c7c:	fb00 f303 	mul.w	r3, r0, r3
 8003c80:	440b      	add	r3, r1
 8003c82:	335c      	adds	r3, #92	; 0x5c
 8003c84:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	212c      	movs	r1, #44	; 0x2c
 8003c8c:	fb01 f303 	mul.w	r3, r1, r3
 8003c90:	4413      	add	r3, r2
 8003c92:	3360      	adds	r3, #96	; 0x60
 8003c94:	2204      	movs	r2, #4
 8003c96:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	b2d9      	uxtb	r1, r3
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	202c      	movs	r0, #44	; 0x2c
 8003cb4:	fb00 f303 	mul.w	r3, r0, r3
 8003cb8:	4413      	add	r3, r2
 8003cba:	3360      	adds	r3, #96	; 0x60
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f006 f92f 	bl	8009f24 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003cc6:	e081      	b.n	8003dcc <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 0310 	and.w	r3, r3, #16
 8003cda:	2b10      	cmp	r3, #16
 8003cdc:	d176      	bne.n	8003dcc <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	212c      	movs	r1, #44	; 0x2c
 8003ce4:	fb01 f303 	mul.w	r3, r1, r3
 8003ce8:	4413      	add	r3, r2
 8003cea:	333f      	adds	r3, #63	; 0x3f
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	d121      	bne.n	8003d36 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	212c      	movs	r1, #44	; 0x2c
 8003cf8:	fb01 f303 	mul.w	r3, r1, r3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	335c      	adds	r3, #92	; 0x5c
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	0151      	lsls	r1, r2, #5
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	440a      	add	r2, r1
 8003d1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d1e:	f043 0302 	orr.w	r3, r3, #2
 8003d22:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f003 ff3b 	bl	8007baa <USB_HC_Halt>
 8003d34:	e041      	b.n	8003dba <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	212c      	movs	r1, #44	; 0x2c
 8003d3c:	fb01 f303 	mul.w	r3, r1, r3
 8003d40:	4413      	add	r3, r2
 8003d42:	333f      	adds	r3, #63	; 0x3f
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d009      	beq.n	8003d5e <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	212c      	movs	r1, #44	; 0x2c
 8003d50:	fb01 f303 	mul.w	r3, r1, r3
 8003d54:	4413      	add	r3, r2
 8003d56:	333f      	adds	r3, #63	; 0x3f
 8003d58:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d12d      	bne.n	8003dba <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	212c      	movs	r1, #44	; 0x2c
 8003d64:	fb01 f303 	mul.w	r3, r1, r3
 8003d68:	4413      	add	r3, r2
 8003d6a:	335c      	adds	r3, #92	; 0x5c
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d120      	bne.n	8003dba <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	212c      	movs	r1, #44	; 0x2c
 8003d7e:	fb01 f303 	mul.w	r3, r1, r3
 8003d82:	4413      	add	r3, r2
 8003d84:	3361      	adds	r3, #97	; 0x61
 8003d86:	2203      	movs	r2, #3
 8003d88:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	015a      	lsls	r2, r3, #5
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	0151      	lsls	r1, r2, #5
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	440a      	add	r2, r1
 8003da0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003da4:	f043 0302 	orr.w	r3, r3, #2
 8003da8:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	4611      	mov	r1, r2
 8003db4:	4618      	mov	r0, r3
 8003db6:	f003 fef8 	bl	8007baa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	2310      	movs	r3, #16
 8003dca:	6093      	str	r3, [r2, #8]
}
 8003dcc:	bf00      	nop
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003dea:	78fb      	ldrb	r3, [r7, #3]
 8003dec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d119      	bne.n	8003e38 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e10:	461a      	mov	r2, r3
 8003e12:	2304      	movs	r3, #4
 8003e14:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	0151      	lsls	r1, r2, #5
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	440a      	add	r2, r1
 8003e2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e30:	f043 0302 	orr.w	r3, r3, #2
 8003e34:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003e36:	e3c6      	b.n	80045c6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 0320 	and.w	r3, r3, #32
 8003e4a:	2b20      	cmp	r3, #32
 8003e4c:	d13e      	bne.n	8003ecc <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	2320      	movs	r3, #32
 8003e5e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	212c      	movs	r1, #44	; 0x2c
 8003e66:	fb01 f303 	mul.w	r3, r1, r3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	333d      	adds	r3, #61	; 0x3d
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	f040 83a8 	bne.w	80045c6 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	212c      	movs	r1, #44	; 0x2c
 8003e7c:	fb01 f303 	mul.w	r3, r1, r3
 8003e80:	4413      	add	r3, r2
 8003e82:	333d      	adds	r3, #61	; 0x3d
 8003e84:	2200      	movs	r2, #0
 8003e86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	212c      	movs	r1, #44	; 0x2c
 8003e8e:	fb01 f303 	mul.w	r3, r1, r3
 8003e92:	4413      	add	r3, r2
 8003e94:	3360      	adds	r3, #96	; 0x60
 8003e96:	2202      	movs	r2, #2
 8003e98:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	0151      	lsls	r1, r2, #5
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	440a      	add	r2, r1
 8003eb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003eb4:	f043 0302 	orr.w	r3, r3, #2
 8003eb8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f003 fe70 	bl	8007baa <USB_HC_Halt>
}
 8003eca:	e37c      	b.n	80045c6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ee2:	d122      	bne.n	8003f2a <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	0151      	lsls	r1, r2, #5
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	440a      	add	r2, r1
 8003efa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003efe:	f043 0302 	orr.w	r3, r3, #2
 8003f02:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	4611      	mov	r1, r2
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f003 fe4b 	bl	8007baa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f20:	461a      	mov	r2, r3
 8003f22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f26:	6093      	str	r3, [r2, #8]
}
 8003f28:	e34d      	b.n	80045c6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d150      	bne.n	8003fe2 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	212c      	movs	r1, #44	; 0x2c
 8003f46:	fb01 f303 	mul.w	r3, r1, r3
 8003f4a:	4413      	add	r3, r2
 8003f4c:	335c      	adds	r3, #92	; 0x5c
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f64:	2b40      	cmp	r3, #64	; 0x40
 8003f66:	d111      	bne.n	8003f8c <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	212c      	movs	r1, #44	; 0x2c
 8003f6e:	fb01 f303 	mul.w	r3, r1, r3
 8003f72:	4413      	add	r3, r2
 8003f74:	333d      	adds	r3, #61	; 0x3d
 8003f76:	2201      	movs	r2, #1
 8003f78:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	015a      	lsls	r2, r3, #5
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	4413      	add	r3, r2
 8003f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f86:	461a      	mov	r2, r3
 8003f88:	2340      	movs	r3, #64	; 0x40
 8003f8a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	0151      	lsls	r1, r2, #5
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	440a      	add	r2, r1
 8003fa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fa6:	f043 0302 	orr.w	r3, r3, #2
 8003faa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f003 fdf7 	bl	8007baa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2301      	movs	r3, #1
 8003fcc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	212c      	movs	r1, #44	; 0x2c
 8003fd4:	fb01 f303 	mul.w	r3, r1, r3
 8003fd8:	4413      	add	r3, r2
 8003fda:	3361      	adds	r3, #97	; 0x61
 8003fdc:	2201      	movs	r2, #1
 8003fde:	701a      	strb	r2, [r3, #0]
}
 8003fe0:	e2f1      	b.n	80045c6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff4:	2b40      	cmp	r3, #64	; 0x40
 8003ff6:	d13c      	bne.n	8004072 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	212c      	movs	r1, #44	; 0x2c
 8003ffe:	fb01 f303 	mul.w	r3, r1, r3
 8004002:	4413      	add	r3, r2
 8004004:	3361      	adds	r3, #97	; 0x61
 8004006:	2204      	movs	r2, #4
 8004008:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	212c      	movs	r1, #44	; 0x2c
 8004010:	fb01 f303 	mul.w	r3, r1, r3
 8004014:	4413      	add	r3, r2
 8004016:	333d      	adds	r3, #61	; 0x3d
 8004018:	2201      	movs	r2, #1
 800401a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	212c      	movs	r1, #44	; 0x2c
 8004022:	fb01 f303 	mul.w	r3, r1, r3
 8004026:	4413      	add	r3, r2
 8004028:	335c      	adds	r3, #92	; 0x5c
 800402a:	2200      	movs	r2, #0
 800402c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	4413      	add	r3, r2
 8004036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	0151      	lsls	r1, r2, #5
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	440a      	add	r2, r1
 8004044:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004048:	f043 0302 	orr.w	r3, r3, #2
 800404c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f003 fda6 	bl	8007baa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	4413      	add	r3, r2
 8004066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800406a:	461a      	mov	r2, r3
 800406c:	2340      	movs	r3, #64	; 0x40
 800406e:	6093      	str	r3, [r2, #8]
}
 8004070:	e2a9      	b.n	80045c6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	4413      	add	r3, r2
 800407a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b08      	cmp	r3, #8
 8004086:	d12a      	bne.n	80040de <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	4413      	add	r3, r2
 8004090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004094:	461a      	mov	r2, r3
 8004096:	2308      	movs	r3, #8
 8004098:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	0151      	lsls	r1, r2, #5
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	440a      	add	r2, r1
 80040b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040b4:	f043 0302 	orr.w	r3, r3, #2
 80040b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	4611      	mov	r1, r2
 80040c4:	4618      	mov	r0, r3
 80040c6:	f003 fd70 	bl	8007baa <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	212c      	movs	r1, #44	; 0x2c
 80040d0:	fb01 f303 	mul.w	r3, r1, r3
 80040d4:	4413      	add	r3, r2
 80040d6:	3361      	adds	r3, #97	; 0x61
 80040d8:	2205      	movs	r2, #5
 80040da:	701a      	strb	r2, [r3, #0]
}
 80040dc:	e273      	b.n	80045c6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 0310 	and.w	r3, r3, #16
 80040f0:	2b10      	cmp	r3, #16
 80040f2:	d150      	bne.n	8004196 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	212c      	movs	r1, #44	; 0x2c
 80040fa:	fb01 f303 	mul.w	r3, r1, r3
 80040fe:	4413      	add	r3, r2
 8004100:	335c      	adds	r3, #92	; 0x5c
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	212c      	movs	r1, #44	; 0x2c
 800410c:	fb01 f303 	mul.w	r3, r1, r3
 8004110:	4413      	add	r3, r2
 8004112:	3361      	adds	r3, #97	; 0x61
 8004114:	2203      	movs	r2, #3
 8004116:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	212c      	movs	r1, #44	; 0x2c
 800411e:	fb01 f303 	mul.w	r3, r1, r3
 8004122:	4413      	add	r3, r2
 8004124:	333d      	adds	r3, #61	; 0x3d
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d112      	bne.n	8004152 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	212c      	movs	r1, #44	; 0x2c
 8004132:	fb01 f303 	mul.w	r3, r1, r3
 8004136:	4413      	add	r3, r2
 8004138:	333c      	adds	r3, #60	; 0x3c
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d108      	bne.n	8004152 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	212c      	movs	r1, #44	; 0x2c
 8004146:	fb01 f303 	mul.w	r3, r1, r3
 800414a:	4413      	add	r3, r2
 800414c:	333d      	adds	r3, #61	; 0x3d
 800414e:	2201      	movs	r2, #1
 8004150:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	4413      	add	r3, r2
 800415a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	0151      	lsls	r1, r2, #5
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	440a      	add	r2, r1
 8004168:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800416c:	f043 0302 	orr.w	r3, r3, #2
 8004170:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	4611      	mov	r1, r2
 800417c:	4618      	mov	r0, r3
 800417e:	f003 fd14 	bl	8007baa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	4413      	add	r3, r2
 800418a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800418e:	461a      	mov	r2, r3
 8004190:	2310      	movs	r3, #16
 8004192:	6093      	str	r3, [r2, #8]
}
 8004194:	e217      	b.n	80045c6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	4413      	add	r3, r2
 800419e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a8:	2b80      	cmp	r3, #128	; 0x80
 80041aa:	d174      	bne.n	8004296 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d121      	bne.n	80041f8 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	212c      	movs	r1, #44	; 0x2c
 80041ba:	fb01 f303 	mul.w	r3, r1, r3
 80041be:	4413      	add	r3, r2
 80041c0:	3361      	adds	r3, #97	; 0x61
 80041c2:	2206      	movs	r2, #6
 80041c4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	0151      	lsls	r1, r2, #5
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	440a      	add	r2, r1
 80041dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041e0:	f043 0302 	orr.w	r3, r3, #2
 80041e4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	4611      	mov	r1, r2
 80041f0:	4618      	mov	r0, r3
 80041f2:	f003 fcda 	bl	8007baa <USB_HC_Halt>
 80041f6:	e044      	b.n	8004282 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	212c      	movs	r1, #44	; 0x2c
 80041fe:	fb01 f303 	mul.w	r3, r1, r3
 8004202:	4413      	add	r3, r2
 8004204:	335c      	adds	r3, #92	; 0x5c
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	202c      	movs	r0, #44	; 0x2c
 8004210:	fb00 f303 	mul.w	r3, r0, r3
 8004214:	440b      	add	r3, r1
 8004216:	335c      	adds	r3, #92	; 0x5c
 8004218:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	212c      	movs	r1, #44	; 0x2c
 8004220:	fb01 f303 	mul.w	r3, r1, r3
 8004224:	4413      	add	r3, r2
 8004226:	335c      	adds	r3, #92	; 0x5c
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b02      	cmp	r3, #2
 800422c:	d920      	bls.n	8004270 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	212c      	movs	r1, #44	; 0x2c
 8004234:	fb01 f303 	mul.w	r3, r1, r3
 8004238:	4413      	add	r3, r2
 800423a:	335c      	adds	r3, #92	; 0x5c
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	212c      	movs	r1, #44	; 0x2c
 8004246:	fb01 f303 	mul.w	r3, r1, r3
 800424a:	4413      	add	r3, r2
 800424c:	3360      	adds	r3, #96	; 0x60
 800424e:	2204      	movs	r2, #4
 8004250:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	b2d9      	uxtb	r1, r3
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	202c      	movs	r0, #44	; 0x2c
 800425c:	fb00 f303 	mul.w	r3, r0, r3
 8004260:	4413      	add	r3, r2
 8004262:	3360      	adds	r3, #96	; 0x60
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f005 fe5b 	bl	8009f24 <HAL_HCD_HC_NotifyURBChange_Callback>
 800426e:	e008      	b.n	8004282 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	212c      	movs	r1, #44	; 0x2c
 8004276:	fb01 f303 	mul.w	r3, r1, r3
 800427a:	4413      	add	r3, r2
 800427c:	3360      	adds	r3, #96	; 0x60
 800427e:	2202      	movs	r2, #2
 8004280:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	4413      	add	r3, r2
 800428a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800428e:	461a      	mov	r2, r3
 8004290:	2380      	movs	r3, #128	; 0x80
 8004292:	6093      	str	r3, [r2, #8]
}
 8004294:	e197      	b.n	80045c6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	4413      	add	r3, r2
 800429e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ac:	d134      	bne.n	8004318 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	0151      	lsls	r1, r2, #5
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	440a      	add	r2, r1
 80042c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042c8:	f043 0302 	orr.w	r3, r3, #2
 80042cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	4611      	mov	r1, r2
 80042d8:	4618      	mov	r0, r3
 80042da:	f003 fc66 	bl	8007baa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ea:	461a      	mov	r2, r3
 80042ec:	2310      	movs	r3, #16
 80042ee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fc:	461a      	mov	r2, r3
 80042fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004302:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	212c      	movs	r1, #44	; 0x2c
 800430a:	fb01 f303 	mul.w	r3, r1, r3
 800430e:	4413      	add	r3, r2
 8004310:	3361      	adds	r3, #97	; 0x61
 8004312:	2208      	movs	r2, #8
 8004314:	701a      	strb	r2, [r3, #0]
}
 8004316:	e156      	b.n	80045c6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	4413      	add	r3, r2
 8004320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b02      	cmp	r3, #2
 800432c:	f040 814b 	bne.w	80045c6 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	4413      	add	r3, r2
 8004338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	0151      	lsls	r1, r2, #5
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	440a      	add	r2, r1
 8004346:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800434a:	f023 0302 	bic.w	r3, r3, #2
 800434e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	212c      	movs	r1, #44	; 0x2c
 8004356:	fb01 f303 	mul.w	r3, r1, r3
 800435a:	4413      	add	r3, r2
 800435c:	3361      	adds	r3, #97	; 0x61
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d179      	bne.n	8004458 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	212c      	movs	r1, #44	; 0x2c
 800436a:	fb01 f303 	mul.w	r3, r1, r3
 800436e:	4413      	add	r3, r2
 8004370:	3360      	adds	r3, #96	; 0x60
 8004372:	2201      	movs	r2, #1
 8004374:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	212c      	movs	r1, #44	; 0x2c
 800437c:	fb01 f303 	mul.w	r3, r1, r3
 8004380:	4413      	add	r3, r2
 8004382:	333f      	adds	r3, #63	; 0x3f
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b02      	cmp	r3, #2
 8004388:	d00a      	beq.n	80043a0 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	212c      	movs	r1, #44	; 0x2c
 8004390:	fb01 f303 	mul.w	r3, r1, r3
 8004394:	4413      	add	r3, r2
 8004396:	333f      	adds	r3, #63	; 0x3f
 8004398:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800439a:	2b03      	cmp	r3, #3
 800439c:	f040 80fc 	bne.w	8004598 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d142      	bne.n	800442e <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	212c      	movs	r1, #44	; 0x2c
 80043ae:	fb01 f303 	mul.w	r3, r1, r3
 80043b2:	4413      	add	r3, r2
 80043b4:	334c      	adds	r3, #76	; 0x4c
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 80ed 	beq.w	8004598 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	212c      	movs	r1, #44	; 0x2c
 80043c4:	fb01 f303 	mul.w	r3, r1, r3
 80043c8:	4413      	add	r3, r2
 80043ca:	334c      	adds	r3, #76	; 0x4c
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	202c      	movs	r0, #44	; 0x2c
 80043d4:	fb00 f202 	mul.w	r2, r0, r2
 80043d8:	440a      	add	r2, r1
 80043da:	3240      	adds	r2, #64	; 0x40
 80043dc:	8812      	ldrh	r2, [r2, #0]
 80043de:	4413      	add	r3, r2
 80043e0:	3b01      	subs	r3, #1
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	202c      	movs	r0, #44	; 0x2c
 80043e8:	fb00 f202 	mul.w	r2, r0, r2
 80043ec:	440a      	add	r2, r1
 80043ee:	3240      	adds	r2, #64	; 0x40
 80043f0:	8812      	ldrh	r2, [r2, #0]
 80043f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 80ca 	beq.w	8004598 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	212c      	movs	r1, #44	; 0x2c
 800440a:	fb01 f303 	mul.w	r3, r1, r3
 800440e:	4413      	add	r3, r2
 8004410:	3355      	adds	r3, #85	; 0x55
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	f083 0301 	eor.w	r3, r3, #1
 8004418:	b2d8      	uxtb	r0, r3
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	212c      	movs	r1, #44	; 0x2c
 8004420:	fb01 f303 	mul.w	r3, r1, r3
 8004424:	4413      	add	r3, r2
 8004426:	3355      	adds	r3, #85	; 0x55
 8004428:	4602      	mov	r2, r0
 800442a:	701a      	strb	r2, [r3, #0]
 800442c:	e0b4      	b.n	8004598 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	212c      	movs	r1, #44	; 0x2c
 8004434:	fb01 f303 	mul.w	r3, r1, r3
 8004438:	4413      	add	r3, r2
 800443a:	3355      	adds	r3, #85	; 0x55
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	f083 0301 	eor.w	r3, r3, #1
 8004442:	b2d8      	uxtb	r0, r3
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	212c      	movs	r1, #44	; 0x2c
 800444a:	fb01 f303 	mul.w	r3, r1, r3
 800444e:	4413      	add	r3, r2
 8004450:	3355      	adds	r3, #85	; 0x55
 8004452:	4602      	mov	r2, r0
 8004454:	701a      	strb	r2, [r3, #0]
 8004456:	e09f      	b.n	8004598 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	212c      	movs	r1, #44	; 0x2c
 800445e:	fb01 f303 	mul.w	r3, r1, r3
 8004462:	4413      	add	r3, r2
 8004464:	3361      	adds	r3, #97	; 0x61
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	2b03      	cmp	r3, #3
 800446a:	d109      	bne.n	8004480 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	212c      	movs	r1, #44	; 0x2c
 8004472:	fb01 f303 	mul.w	r3, r1, r3
 8004476:	4413      	add	r3, r2
 8004478:	3360      	adds	r3, #96	; 0x60
 800447a:	2202      	movs	r2, #2
 800447c:	701a      	strb	r2, [r3, #0]
 800447e:	e08b      	b.n	8004598 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	212c      	movs	r1, #44	; 0x2c
 8004486:	fb01 f303 	mul.w	r3, r1, r3
 800448a:	4413      	add	r3, r2
 800448c:	3361      	adds	r3, #97	; 0x61
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b04      	cmp	r3, #4
 8004492:	d109      	bne.n	80044a8 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	212c      	movs	r1, #44	; 0x2c
 800449a:	fb01 f303 	mul.w	r3, r1, r3
 800449e:	4413      	add	r3, r2
 80044a0:	3360      	adds	r3, #96	; 0x60
 80044a2:	2202      	movs	r2, #2
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	e077      	b.n	8004598 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	212c      	movs	r1, #44	; 0x2c
 80044ae:	fb01 f303 	mul.w	r3, r1, r3
 80044b2:	4413      	add	r3, r2
 80044b4:	3361      	adds	r3, #97	; 0x61
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	2b05      	cmp	r3, #5
 80044ba:	d109      	bne.n	80044d0 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	212c      	movs	r1, #44	; 0x2c
 80044c2:	fb01 f303 	mul.w	r3, r1, r3
 80044c6:	4413      	add	r3, r2
 80044c8:	3360      	adds	r3, #96	; 0x60
 80044ca:	2205      	movs	r2, #5
 80044cc:	701a      	strb	r2, [r3, #0]
 80044ce:	e063      	b.n	8004598 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	212c      	movs	r1, #44	; 0x2c
 80044d6:	fb01 f303 	mul.w	r3, r1, r3
 80044da:	4413      	add	r3, r2
 80044dc:	3361      	adds	r3, #97	; 0x61
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b06      	cmp	r3, #6
 80044e2:	d009      	beq.n	80044f8 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	212c      	movs	r1, #44	; 0x2c
 80044ea:	fb01 f303 	mul.w	r3, r1, r3
 80044ee:	4413      	add	r3, r2
 80044f0:	3361      	adds	r3, #97	; 0x61
 80044f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d14f      	bne.n	8004598 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	212c      	movs	r1, #44	; 0x2c
 80044fe:	fb01 f303 	mul.w	r3, r1, r3
 8004502:	4413      	add	r3, r2
 8004504:	335c      	adds	r3, #92	; 0x5c
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	202c      	movs	r0, #44	; 0x2c
 8004510:	fb00 f303 	mul.w	r3, r0, r3
 8004514:	440b      	add	r3, r1
 8004516:	335c      	adds	r3, #92	; 0x5c
 8004518:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	212c      	movs	r1, #44	; 0x2c
 8004520:	fb01 f303 	mul.w	r3, r1, r3
 8004524:	4413      	add	r3, r2
 8004526:	335c      	adds	r3, #92	; 0x5c
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b02      	cmp	r3, #2
 800452c:	d912      	bls.n	8004554 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	212c      	movs	r1, #44	; 0x2c
 8004534:	fb01 f303 	mul.w	r3, r1, r3
 8004538:	4413      	add	r3, r2
 800453a:	335c      	adds	r3, #92	; 0x5c
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	212c      	movs	r1, #44	; 0x2c
 8004546:	fb01 f303 	mul.w	r3, r1, r3
 800454a:	4413      	add	r3, r2
 800454c:	3360      	adds	r3, #96	; 0x60
 800454e:	2204      	movs	r2, #4
 8004550:	701a      	strb	r2, [r3, #0]
 8004552:	e021      	b.n	8004598 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	212c      	movs	r1, #44	; 0x2c
 800455a:	fb01 f303 	mul.w	r3, r1, r3
 800455e:	4413      	add	r3, r2
 8004560:	3360      	adds	r3, #96	; 0x60
 8004562:	2202      	movs	r2, #2
 8004564:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	4413      	add	r3, r2
 800456e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800457c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004584:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	4413      	add	r3, r2
 800458e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004592:	461a      	mov	r2, r3
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a4:	461a      	mov	r2, r3
 80045a6:	2302      	movs	r3, #2
 80045a8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	b2d9      	uxtb	r1, r3
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	202c      	movs	r0, #44	; 0x2c
 80045b4:	fb00 f303 	mul.w	r3, r0, r3
 80045b8:	4413      	add	r3, r2
 80045ba:	3360      	adds	r3, #96	; 0x60
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f005 fcaf 	bl	8009f24 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80045c6:	bf00      	nop
 80045c8:	3720      	adds	r7, #32
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b08a      	sub	sp, #40	; 0x28
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	0c5b      	lsrs	r3, r3, #17
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	091b      	lsrs	r3, r3, #4
 80045fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004602:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	2b02      	cmp	r3, #2
 8004608:	d004      	beq.n	8004614 <HCD_RXQLVL_IRQHandler+0x46>
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2b05      	cmp	r3, #5
 800460e:	f000 80a9 	beq.w	8004764 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004612:	e0aa      	b.n	800476a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	2b00      	cmp	r3, #0
 8004618:	f000 80a6 	beq.w	8004768 <HCD_RXQLVL_IRQHandler+0x19a>
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	212c      	movs	r1, #44	; 0x2c
 8004622:	fb01 f303 	mul.w	r3, r1, r3
 8004626:	4413      	add	r3, r2
 8004628:	3344      	adds	r3, #68	; 0x44
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 809b 	beq.w	8004768 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	212c      	movs	r1, #44	; 0x2c
 8004638:	fb01 f303 	mul.w	r3, r1, r3
 800463c:	4413      	add	r3, r2
 800463e:	3350      	adds	r3, #80	; 0x50
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	441a      	add	r2, r3
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	202c      	movs	r0, #44	; 0x2c
 800464c:	fb00 f303 	mul.w	r3, r0, r3
 8004650:	440b      	add	r3, r1
 8004652:	334c      	adds	r3, #76	; 0x4c
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d87a      	bhi.n	8004750 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	212c      	movs	r1, #44	; 0x2c
 8004664:	fb01 f303 	mul.w	r3, r1, r3
 8004668:	4413      	add	r3, r2
 800466a:	3344      	adds	r3, #68	; 0x44
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	b292      	uxth	r2, r2
 8004672:	4619      	mov	r1, r3
 8004674:	f002 fe37 	bl	80072e6 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	212c      	movs	r1, #44	; 0x2c
 800467e:	fb01 f303 	mul.w	r3, r1, r3
 8004682:	4413      	add	r3, r2
 8004684:	3344      	adds	r3, #68	; 0x44
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	441a      	add	r2, r3
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	202c      	movs	r0, #44	; 0x2c
 8004692:	fb00 f303 	mul.w	r3, r0, r3
 8004696:	440b      	add	r3, r1
 8004698:	3344      	adds	r3, #68	; 0x44
 800469a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	212c      	movs	r1, #44	; 0x2c
 80046a2:	fb01 f303 	mul.w	r3, r1, r3
 80046a6:	4413      	add	r3, r2
 80046a8:	3350      	adds	r3, #80	; 0x50
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	441a      	add	r2, r3
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	202c      	movs	r0, #44	; 0x2c
 80046b6:	fb00 f303 	mul.w	r3, r0, r3
 80046ba:	440b      	add	r3, r1
 80046bc:	3350      	adds	r3, #80	; 0x50
 80046be:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	015a      	lsls	r2, r3, #5
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	4413      	add	r3, r2
 80046c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	0cdb      	lsrs	r3, r3, #19
 80046d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046d4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	212c      	movs	r1, #44	; 0x2c
 80046dc:	fb01 f303 	mul.w	r3, r1, r3
 80046e0:	4413      	add	r3, r2
 80046e2:	3340      	adds	r3, #64	; 0x40
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	461a      	mov	r2, r3
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d13c      	bne.n	8004768 <HCD_RXQLVL_IRQHandler+0x19a>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d039      	beq.n	8004768 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800470a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004712:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	4413      	add	r3, r2
 800471c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004720:	461a      	mov	r2, r3
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	212c      	movs	r1, #44	; 0x2c
 800472c:	fb01 f303 	mul.w	r3, r1, r3
 8004730:	4413      	add	r3, r2
 8004732:	3354      	adds	r3, #84	; 0x54
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	f083 0301 	eor.w	r3, r3, #1
 800473a:	b2d8      	uxtb	r0, r3
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	212c      	movs	r1, #44	; 0x2c
 8004742:	fb01 f303 	mul.w	r3, r1, r3
 8004746:	4413      	add	r3, r2
 8004748:	3354      	adds	r3, #84	; 0x54
 800474a:	4602      	mov	r2, r0
 800474c:	701a      	strb	r2, [r3, #0]
      break;
 800474e:	e00b      	b.n	8004768 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	212c      	movs	r1, #44	; 0x2c
 8004756:	fb01 f303 	mul.w	r3, r1, r3
 800475a:	4413      	add	r3, r2
 800475c:	3360      	adds	r3, #96	; 0x60
 800475e:	2204      	movs	r2, #4
 8004760:	701a      	strb	r2, [r3, #0]
      break;
 8004762:	e001      	b.n	8004768 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004764:	bf00      	nop
 8004766:	e000      	b.n	800476a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004768:	bf00      	nop
  }
}
 800476a:	bf00      	nop
 800476c:	3728      	adds	r7, #40	; 0x28
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b086      	sub	sp, #24
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800479e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d10b      	bne.n	80047c2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d102      	bne.n	80047ba <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f005 fb99 	bl	8009eec <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	f043 0302 	orr.w	r3, r3, #2
 80047c0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f003 0308 	and.w	r3, r3, #8
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d132      	bne.n	8004832 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f043 0308 	orr.w	r3, r3, #8
 80047d2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d126      	bne.n	800482c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d113      	bne.n	800480e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80047ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047f0:	d106      	bne.n	8004800 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2102      	movs	r1, #2
 80047f8:	4618      	mov	r0, r3
 80047fa:	f002 feaf 	bl	800755c <USB_InitFSLSPClkSel>
 80047fe:	e011      	b.n	8004824 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2101      	movs	r1, #1
 8004806:	4618      	mov	r0, r3
 8004808:	f002 fea8 	bl	800755c <USB_InitFSLSPClkSel>
 800480c:	e00a      	b.n	8004824 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d106      	bne.n	8004824 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800481c:	461a      	mov	r2, r3
 800481e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004822:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f005 fb8b 	bl	8009f40 <HAL_HCD_PortEnabled_Callback>
 800482a:	e002      	b.n	8004832 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f005 fb95 	bl	8009f5c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f003 0320 	and.w	r3, r3, #32
 8004838:	2b20      	cmp	r3, #32
 800483a:	d103      	bne.n	8004844 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f043 0320 	orr.w	r3, r3, #32
 8004842:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800484a:	461a      	mov	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	6013      	str	r3, [r2, #0]
}
 8004850:	bf00      	nop
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b088      	sub	sp, #32
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e128      	b.n	8004abc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a90      	ldr	r2, [pc, #576]	; (8004ac4 <HAL_I2S_Init+0x26c>)
 8004882:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7fd fc81 	bl	800218c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2202      	movs	r2, #2
 800488e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6812      	ldr	r2, [r2, #0]
 800489c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80048a0:	f023 030f 	bic.w	r3, r3, #15
 80048a4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2202      	movs	r2, #2
 80048ac:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d060      	beq.n	8004978 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d102      	bne.n	80048c4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80048be:	2310      	movs	r3, #16
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	e001      	b.n	80048c8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80048c4:	2320      	movs	r3, #32
 80048c6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	d802      	bhi.n	80048d6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80048d6:	2001      	movs	r0, #1
 80048d8:	f001 f980 	bl	8005bdc <HAL_RCCEx_GetPeriphCLKFreq>
 80048dc:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048e6:	d125      	bne.n	8004934 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d010      	beq.n	8004912 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	461a      	mov	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	fbb2 f3f3 	udiv	r3, r2, r3
 800490c:	3305      	adds	r3, #5
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	e01f      	b.n	8004952 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	fbb2 f2f3 	udiv	r2, r2, r3
 800491c:	4613      	mov	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	461a      	mov	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	fbb2 f3f3 	udiv	r3, r2, r3
 800492e:	3305      	adds	r3, #5
 8004930:	613b      	str	r3, [r7, #16]
 8004932:	e00e      	b.n	8004952 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	fbb2 f2f3 	udiv	r2, r2, r3
 800493c:	4613      	mov	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	461a      	mov	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	fbb2 f3f3 	udiv	r3, r2, r3
 800494e:	3305      	adds	r3, #5
 8004950:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	4a5c      	ldr	r2, [pc, #368]	; (8004ac8 <HAL_I2S_Init+0x270>)
 8004956:	fba2 2303 	umull	r2, r3, r2, r3
 800495a:	08db      	lsrs	r3, r3, #3
 800495c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	085b      	lsrs	r3, r3, #1
 800496e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	021b      	lsls	r3, r3, #8
 8004974:	61bb      	str	r3, [r7, #24]
 8004976:	e003      	b.n	8004980 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004978:	2302      	movs	r3, #2
 800497a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800497c:	2300      	movs	r3, #0
 800497e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d902      	bls.n	800498c <HAL_I2S_Init+0x134>
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	2bff      	cmp	r3, #255	; 0xff
 800498a:	d907      	bls.n	800499c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004990:	f043 0210 	orr.w	r2, r3, #16
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e08f      	b.n	8004abc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691a      	ldr	r2, [r3, #16]
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	ea42 0103 	orr.w	r1, r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	69fa      	ldr	r2, [r7, #28]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80049ba:	f023 030f 	bic.w	r3, r3, #15
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6851      	ldr	r1, [r2, #4]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6892      	ldr	r2, [r2, #8]
 80049c6:	4311      	orrs	r1, r2
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	68d2      	ldr	r2, [r2, #12]
 80049cc:	4311      	orrs	r1, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6992      	ldr	r2, [r2, #24]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049de:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d161      	bne.n	8004aac <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a38      	ldr	r2, [pc, #224]	; (8004acc <HAL_I2S_Init+0x274>)
 80049ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a37      	ldr	r2, [pc, #220]	; (8004ad0 <HAL_I2S_Init+0x278>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d101      	bne.n	80049fc <HAL_I2S_Init+0x1a4>
 80049f8:	4b36      	ldr	r3, [pc, #216]	; (8004ad4 <HAL_I2S_Init+0x27c>)
 80049fa:	e001      	b.n	8004a00 <HAL_I2S_Init+0x1a8>
 80049fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6812      	ldr	r2, [r2, #0]
 8004a06:	4932      	ldr	r1, [pc, #200]	; (8004ad0 <HAL_I2S_Init+0x278>)
 8004a08:	428a      	cmp	r2, r1
 8004a0a:	d101      	bne.n	8004a10 <HAL_I2S_Init+0x1b8>
 8004a0c:	4a31      	ldr	r2, [pc, #196]	; (8004ad4 <HAL_I2S_Init+0x27c>)
 8004a0e:	e001      	b.n	8004a14 <HAL_I2S_Init+0x1bc>
 8004a10:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004a14:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004a18:	f023 030f 	bic.w	r3, r3, #15
 8004a1c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a2b      	ldr	r2, [pc, #172]	; (8004ad0 <HAL_I2S_Init+0x278>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d101      	bne.n	8004a2c <HAL_I2S_Init+0x1d4>
 8004a28:	4b2a      	ldr	r3, [pc, #168]	; (8004ad4 <HAL_I2S_Init+0x27c>)
 8004a2a:	e001      	b.n	8004a30 <HAL_I2S_Init+0x1d8>
 8004a2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a30:	2202      	movs	r2, #2
 8004a32:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a25      	ldr	r2, [pc, #148]	; (8004ad0 <HAL_I2S_Init+0x278>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d101      	bne.n	8004a42 <HAL_I2S_Init+0x1ea>
 8004a3e:	4b25      	ldr	r3, [pc, #148]	; (8004ad4 <HAL_I2S_Init+0x27c>)
 8004a40:	e001      	b.n	8004a46 <HAL_I2S_Init+0x1ee>
 8004a42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a52:	d003      	beq.n	8004a5c <HAL_I2S_Init+0x204>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d103      	bne.n	8004a64 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004a5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a60:	613b      	str	r3, [r7, #16]
 8004a62:	e001      	b.n	8004a68 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004a64:	2300      	movs	r3, #0
 8004a66:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004a72:	4313      	orrs	r3, r2
 8004a74:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004a86:	4313      	orrs	r3, r2
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	897b      	ldrh	r3, [r7, #10]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a94:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a0d      	ldr	r2, [pc, #52]	; (8004ad0 <HAL_I2S_Init+0x278>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d101      	bne.n	8004aa4 <HAL_I2S_Init+0x24c>
 8004aa0:	4b0c      	ldr	r3, [pc, #48]	; (8004ad4 <HAL_I2S_Init+0x27c>)
 8004aa2:	e001      	b.n	8004aa8 <HAL_I2S_Init+0x250>
 8004aa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004aa8:	897a      	ldrh	r2, [r7, #10]
 8004aaa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3720      	adds	r7, #32
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	08004bcf 	.word	0x08004bcf
 8004ac8:	cccccccd 	.word	0xcccccccd
 8004acc:	08004ce5 	.word	0x08004ce5
 8004ad0:	40003800 	.word	0x40003800
 8004ad4:	40003400 	.word	0x40003400

08004ad8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	881a      	ldrh	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	1c9a      	adds	r2, r3, #2
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10e      	bne.n	8004b68 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b58:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7ff ffb8 	bl	8004ad8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004b68:	bf00      	nop
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b82:	b292      	uxth	r2, r2
 8004b84:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8a:	1c9a      	adds	r2, r3, #2
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10e      	bne.n	8004bc6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004bb6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7ff ff93 	bl	8004aec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004bc6:	bf00      	nop
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b086      	sub	sp, #24
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	d13a      	bne.n	8004c60 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d109      	bne.n	8004c08 <I2S_IRQHandler+0x3a>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfe:	2b40      	cmp	r3, #64	; 0x40
 8004c00:	d102      	bne.n	8004c08 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7ff ffb4 	bl	8004b70 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0e:	2b40      	cmp	r3, #64	; 0x40
 8004c10:	d126      	bne.n	8004c60 <I2S_IRQHandler+0x92>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f003 0320 	and.w	r3, r3, #32
 8004c1c:	2b20      	cmp	r3, #32
 8004c1e:	d11f      	bne.n	8004c60 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c2e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004c30:	2300      	movs	r3, #0
 8004c32:	613b      	str	r3, [r7, #16]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	613b      	str	r3, [r7, #16]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	613b      	str	r3, [r7, #16]
 8004c44:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c52:	f043 0202 	orr.w	r2, r3, #2
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff ff50 	bl	8004b00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b03      	cmp	r3, #3
 8004c6a:	d136      	bne.n	8004cda <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d109      	bne.n	8004c8a <I2S_IRQHandler+0xbc>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c80:	2b80      	cmp	r3, #128	; 0x80
 8004c82:	d102      	bne.n	8004c8a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff ff45 	bl	8004b14 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d122      	bne.n	8004cda <I2S_IRQHandler+0x10c>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f003 0320 	and.w	r3, r3, #32
 8004c9e:	2b20      	cmp	r3, #32
 8004ca0:	d11b      	bne.n	8004cda <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cb0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ccc:	f043 0204 	orr.w	r2, r3, #4
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7ff ff13 	bl	8004b00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cda:	bf00      	nop
 8004cdc:	3718      	adds	r7, #24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
	...

08004ce4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4aa2      	ldr	r2, [pc, #648]	; (8004f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d101      	bne.n	8004d02 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004cfe:	4ba2      	ldr	r3, [pc, #648]	; (8004f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d00:	e001      	b.n	8004d06 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004d02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a9b      	ldr	r2, [pc, #620]	; (8004f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d101      	bne.n	8004d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004d1c:	4b9a      	ldr	r3, [pc, #616]	; (8004f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d1e:	e001      	b.n	8004d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004d20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d30:	d004      	beq.n	8004d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f040 8099 	bne.w	8004e6e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d107      	bne.n	8004d56 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d002      	beq.n	8004d56 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f925 	bl	8004fa0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d107      	bne.n	8004d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f9c8 	bl	8005100 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d76:	2b40      	cmp	r3, #64	; 0x40
 8004d78:	d13a      	bne.n	8004df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f003 0320 	and.w	r3, r3, #32
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d035      	beq.n	8004df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a7e      	ldr	r2, [pc, #504]	; (8004f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d101      	bne.n	8004d92 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004d8e:	4b7e      	ldr	r3, [pc, #504]	; (8004f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d90:	e001      	b.n	8004d96 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004d92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4979      	ldr	r1, [pc, #484]	; (8004f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d9e:	428b      	cmp	r3, r1
 8004da0:	d101      	bne.n	8004da6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004da2:	4b79      	ldr	r3, [pc, #484]	; (8004f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004da4:	e001      	b.n	8004daa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004da6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004daa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004dae:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004dbe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de2:	f043 0202 	orr.w	r2, r3, #2
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7ff fe88 	bl	8004b00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	f040 80be 	bne.w	8004f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f003 0320 	and.w	r3, r3, #32
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 80b8 	beq.w	8004f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e16:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a59      	ldr	r2, [pc, #356]	; (8004f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d101      	bne.n	8004e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004e22:	4b59      	ldr	r3, [pc, #356]	; (8004f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e24:	e001      	b.n	8004e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004e26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4954      	ldr	r1, [pc, #336]	; (8004f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e32:	428b      	cmp	r3, r1
 8004e34:	d101      	bne.n	8004e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004e36:	4b54      	ldr	r3, [pc, #336]	; (8004f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e38:	e001      	b.n	8004e3e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004e3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e42:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004e44:	2300      	movs	r3, #0
 8004e46:	60bb      	str	r3, [r7, #8]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	60bb      	str	r3, [r7, #8]
 8004e50:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5e:	f043 0204 	orr.w	r2, r3, #4
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff fe4a 	bl	8004b00 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e6c:	e084      	b.n	8004f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d107      	bne.n	8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f8be 	bl	8005004 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d107      	bne.n	8004ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f8fd 	bl	800509c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea8:	2b40      	cmp	r3, #64	; 0x40
 8004eaa:	d12f      	bne.n	8004f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f003 0320 	and.w	r3, r3, #32
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d02a      	beq.n	8004f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ec4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a2e      	ldr	r2, [pc, #184]	; (8004f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d101      	bne.n	8004ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004ed0:	4b2d      	ldr	r3, [pc, #180]	; (8004f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ed2:	e001      	b.n	8004ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004ed4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4929      	ldr	r1, [pc, #164]	; (8004f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ee0:	428b      	cmp	r3, r1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004ee4:	4b28      	ldr	r3, [pc, #160]	; (8004f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ee6:	e001      	b.n	8004eec <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004ee8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004eec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ef0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efe:	f043 0202 	orr.w	r2, r3, #2
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff fdfa 	bl	8004b00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b08      	cmp	r3, #8
 8004f14:	d131      	bne.n	8004f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f003 0320 	and.w	r3, r3, #32
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d02c      	beq.n	8004f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a17      	ldr	r2, [pc, #92]	; (8004f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d101      	bne.n	8004f2e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004f2a:	4b17      	ldr	r3, [pc, #92]	; (8004f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f2c:	e001      	b.n	8004f32 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004f2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4912      	ldr	r1, [pc, #72]	; (8004f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f3a:	428b      	cmp	r3, r1
 8004f3c:	d101      	bne.n	8004f42 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004f3e:	4b12      	ldr	r3, [pc, #72]	; (8004f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f40:	e001      	b.n	8004f46 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004f42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f4a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f5a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f68:	f043 0204 	orr.w	r2, r3, #4
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f7ff fdc5 	bl	8004b00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f76:	e000      	b.n	8004f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f78:	bf00      	nop
}
 8004f7a:	bf00      	nop
 8004f7c:	3720      	adds	r7, #32
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	40003800 	.word	0x40003800
 8004f88:	40003400 	.word	0x40003400

08004f8c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	1c99      	adds	r1, r3, #2
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6251      	str	r1, [r2, #36]	; 0x24
 8004fb2:	881a      	ldrh	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d113      	bne.n	8004ffa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fe0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d106      	bne.n	8004ffa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f7ff ffc9 	bl	8004f8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ffa:	bf00      	nop
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
	...

08005004 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	1c99      	adds	r1, r3, #2
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6251      	str	r1, [r2, #36]	; 0x24
 8005016:	8819      	ldrh	r1, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a1d      	ldr	r2, [pc, #116]	; (8005094 <I2SEx_TxISR_I2SExt+0x90>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d101      	bne.n	8005026 <I2SEx_TxISR_I2SExt+0x22>
 8005022:	4b1d      	ldr	r3, [pc, #116]	; (8005098 <I2SEx_TxISR_I2SExt+0x94>)
 8005024:	e001      	b.n	800502a <I2SEx_TxISR_I2SExt+0x26>
 8005026:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800502a:	460a      	mov	r2, r1
 800502c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005032:	b29b      	uxth	r3, r3
 8005034:	3b01      	subs	r3, #1
 8005036:	b29a      	uxth	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005040:	b29b      	uxth	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d121      	bne.n	800508a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a12      	ldr	r2, [pc, #72]	; (8005094 <I2SEx_TxISR_I2SExt+0x90>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d101      	bne.n	8005054 <I2SEx_TxISR_I2SExt+0x50>
 8005050:	4b11      	ldr	r3, [pc, #68]	; (8005098 <I2SEx_TxISR_I2SExt+0x94>)
 8005052:	e001      	b.n	8005058 <I2SEx_TxISR_I2SExt+0x54>
 8005054:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	490d      	ldr	r1, [pc, #52]	; (8005094 <I2SEx_TxISR_I2SExt+0x90>)
 8005060:	428b      	cmp	r3, r1
 8005062:	d101      	bne.n	8005068 <I2SEx_TxISR_I2SExt+0x64>
 8005064:	4b0c      	ldr	r3, [pc, #48]	; (8005098 <I2SEx_TxISR_I2SExt+0x94>)
 8005066:	e001      	b.n	800506c <I2SEx_TxISR_I2SExt+0x68>
 8005068:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800506c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005070:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005076:	b29b      	uxth	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	d106      	bne.n	800508a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7ff ff81 	bl	8004f8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800508a:	bf00      	nop
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40003800 	.word	0x40003800
 8005098:	40003400 	.word	0x40003400

0800509c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68d8      	ldr	r0, [r3, #12]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ae:	1c99      	adds	r1, r3, #2
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80050b4:	b282      	uxth	r2, r0
 80050b6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050bc:	b29b      	uxth	r3, r3
 80050be:	3b01      	subs	r3, #1
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d113      	bne.n	80050f8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050de:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d106      	bne.n	80050f8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7ff ff4a 	bl	8004f8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050f8:	bf00      	nop
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a20      	ldr	r2, [pc, #128]	; (8005190 <I2SEx_RxISR_I2SExt+0x90>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d101      	bne.n	8005116 <I2SEx_RxISR_I2SExt+0x16>
 8005112:	4b20      	ldr	r3, [pc, #128]	; (8005194 <I2SEx_RxISR_I2SExt+0x94>)
 8005114:	e001      	b.n	800511a <I2SEx_RxISR_I2SExt+0x1a>
 8005116:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800511a:	68d8      	ldr	r0, [r3, #12]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005120:	1c99      	adds	r1, r3, #2
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005126:	b282      	uxth	r2, r0
 8005128:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800512e:	b29b      	uxth	r3, r3
 8005130:	3b01      	subs	r3, #1
 8005132:	b29a      	uxth	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800513c:	b29b      	uxth	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d121      	bne.n	8005186 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a12      	ldr	r2, [pc, #72]	; (8005190 <I2SEx_RxISR_I2SExt+0x90>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d101      	bne.n	8005150 <I2SEx_RxISR_I2SExt+0x50>
 800514c:	4b11      	ldr	r3, [pc, #68]	; (8005194 <I2SEx_RxISR_I2SExt+0x94>)
 800514e:	e001      	b.n	8005154 <I2SEx_RxISR_I2SExt+0x54>
 8005150:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	490d      	ldr	r1, [pc, #52]	; (8005190 <I2SEx_RxISR_I2SExt+0x90>)
 800515c:	428b      	cmp	r3, r1
 800515e:	d101      	bne.n	8005164 <I2SEx_RxISR_I2SExt+0x64>
 8005160:	4b0c      	ldr	r3, [pc, #48]	; (8005194 <I2SEx_RxISR_I2SExt+0x94>)
 8005162:	e001      	b.n	8005168 <I2SEx_RxISR_I2SExt+0x68>
 8005164:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005168:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800516c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005172:	b29b      	uxth	r3, r3
 8005174:	2b00      	cmp	r3, #0
 8005176:	d106      	bne.n	8005186 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff ff03 	bl	8004f8c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005186:	bf00      	nop
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	40003800 	.word	0x40003800
 8005194:	40003400 	.word	0x40003400

08005198 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e264      	b.n	8005674 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d075      	beq.n	80052a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051b6:	4ba3      	ldr	r3, [pc, #652]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 030c 	and.w	r3, r3, #12
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d00c      	beq.n	80051dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051c2:	4ba0      	ldr	r3, [pc, #640]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051ca:	2b08      	cmp	r3, #8
 80051cc:	d112      	bne.n	80051f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051ce:	4b9d      	ldr	r3, [pc, #628]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051da:	d10b      	bne.n	80051f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051dc:	4b99      	ldr	r3, [pc, #612]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d05b      	beq.n	80052a0 <HAL_RCC_OscConfig+0x108>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d157      	bne.n	80052a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e23f      	b.n	8005674 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051fc:	d106      	bne.n	800520c <HAL_RCC_OscConfig+0x74>
 80051fe:	4b91      	ldr	r3, [pc, #580]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a90      	ldr	r2, [pc, #576]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 8005204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005208:	6013      	str	r3, [r2, #0]
 800520a:	e01d      	b.n	8005248 <HAL_RCC_OscConfig+0xb0>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005214:	d10c      	bne.n	8005230 <HAL_RCC_OscConfig+0x98>
 8005216:	4b8b      	ldr	r3, [pc, #556]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a8a      	ldr	r2, [pc, #552]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 800521c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005220:	6013      	str	r3, [r2, #0]
 8005222:	4b88      	ldr	r3, [pc, #544]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a87      	ldr	r2, [pc, #540]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 8005228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800522c:	6013      	str	r3, [r2, #0]
 800522e:	e00b      	b.n	8005248 <HAL_RCC_OscConfig+0xb0>
 8005230:	4b84      	ldr	r3, [pc, #528]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a83      	ldr	r2, [pc, #524]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 8005236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800523a:	6013      	str	r3, [r2, #0]
 800523c:	4b81      	ldr	r3, [pc, #516]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a80      	ldr	r2, [pc, #512]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 8005242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005246:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d013      	beq.n	8005278 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005250:	f7fd fa74 	bl	800273c <HAL_GetTick>
 8005254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005258:	f7fd fa70 	bl	800273c <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b64      	cmp	r3, #100	; 0x64
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e204      	b.n	8005674 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800526a:	4b76      	ldr	r3, [pc, #472]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0f0      	beq.n	8005258 <HAL_RCC_OscConfig+0xc0>
 8005276:	e014      	b.n	80052a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005278:	f7fd fa60 	bl	800273c <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005280:	f7fd fa5c 	bl	800273c <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b64      	cmp	r3, #100	; 0x64
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e1f0      	b.n	8005674 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005292:	4b6c      	ldr	r3, [pc, #432]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1f0      	bne.n	8005280 <HAL_RCC_OscConfig+0xe8>
 800529e:	e000      	b.n	80052a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d063      	beq.n	8005376 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052ae:	4b65      	ldr	r3, [pc, #404]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f003 030c 	and.w	r3, r3, #12
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00b      	beq.n	80052d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052ba:	4b62      	ldr	r3, [pc, #392]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d11c      	bne.n	8005300 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052c6:	4b5f      	ldr	r3, [pc, #380]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d116      	bne.n	8005300 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052d2:	4b5c      	ldr	r3, [pc, #368]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d005      	beq.n	80052ea <HAL_RCC_OscConfig+0x152>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d001      	beq.n	80052ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e1c4      	b.n	8005674 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ea:	4b56      	ldr	r3, [pc, #344]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	4952      	ldr	r1, [pc, #328]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052fe:	e03a      	b.n	8005376 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d020      	beq.n	800534a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005308:	4b4f      	ldr	r3, [pc, #316]	; (8005448 <HAL_RCC_OscConfig+0x2b0>)
 800530a:	2201      	movs	r2, #1
 800530c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530e:	f7fd fa15 	bl	800273c <HAL_GetTick>
 8005312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005314:	e008      	b.n	8005328 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005316:	f7fd fa11 	bl	800273c <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d901      	bls.n	8005328 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e1a5      	b.n	8005674 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005328:	4b46      	ldr	r3, [pc, #280]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0f0      	beq.n	8005316 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005334:	4b43      	ldr	r3, [pc, #268]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	00db      	lsls	r3, r3, #3
 8005342:	4940      	ldr	r1, [pc, #256]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 8005344:	4313      	orrs	r3, r2
 8005346:	600b      	str	r3, [r1, #0]
 8005348:	e015      	b.n	8005376 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800534a:	4b3f      	ldr	r3, [pc, #252]	; (8005448 <HAL_RCC_OscConfig+0x2b0>)
 800534c:	2200      	movs	r2, #0
 800534e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005350:	f7fd f9f4 	bl	800273c <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005358:	f7fd f9f0 	bl	800273c <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e184      	b.n	8005674 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800536a:	4b36      	ldr	r3, [pc, #216]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1f0      	bne.n	8005358 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d030      	beq.n	80053e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d016      	beq.n	80053b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800538a:	4b30      	ldr	r3, [pc, #192]	; (800544c <HAL_RCC_OscConfig+0x2b4>)
 800538c:	2201      	movs	r2, #1
 800538e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005390:	f7fd f9d4 	bl	800273c <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005396:	e008      	b.n	80053aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005398:	f7fd f9d0 	bl	800273c <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e164      	b.n	8005674 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053aa:	4b26      	ldr	r3, [pc, #152]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 80053ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0f0      	beq.n	8005398 <HAL_RCC_OscConfig+0x200>
 80053b6:	e015      	b.n	80053e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053b8:	4b24      	ldr	r3, [pc, #144]	; (800544c <HAL_RCC_OscConfig+0x2b4>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053be:	f7fd f9bd 	bl	800273c <HAL_GetTick>
 80053c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053c4:	e008      	b.n	80053d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053c6:	f7fd f9b9 	bl	800273c <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d901      	bls.n	80053d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e14d      	b.n	8005674 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053d8:	4b1a      	ldr	r3, [pc, #104]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 80053da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1f0      	bne.n	80053c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0304 	and.w	r3, r3, #4
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 80a0 	beq.w	8005532 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053f2:	2300      	movs	r3, #0
 80053f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053f6:	4b13      	ldr	r3, [pc, #76]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10f      	bne.n	8005422 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005402:	2300      	movs	r3, #0
 8005404:	60bb      	str	r3, [r7, #8]
 8005406:	4b0f      	ldr	r3, [pc, #60]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	4a0e      	ldr	r2, [pc, #56]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 800540c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005410:	6413      	str	r3, [r2, #64]	; 0x40
 8005412:	4b0c      	ldr	r3, [pc, #48]	; (8005444 <HAL_RCC_OscConfig+0x2ac>)
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800541a:	60bb      	str	r3, [r7, #8]
 800541c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800541e:	2301      	movs	r3, #1
 8005420:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005422:	4b0b      	ldr	r3, [pc, #44]	; (8005450 <HAL_RCC_OscConfig+0x2b8>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542a:	2b00      	cmp	r3, #0
 800542c:	d121      	bne.n	8005472 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800542e:	4b08      	ldr	r3, [pc, #32]	; (8005450 <HAL_RCC_OscConfig+0x2b8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a07      	ldr	r2, [pc, #28]	; (8005450 <HAL_RCC_OscConfig+0x2b8>)
 8005434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800543a:	f7fd f97f 	bl	800273c <HAL_GetTick>
 800543e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005440:	e011      	b.n	8005466 <HAL_RCC_OscConfig+0x2ce>
 8005442:	bf00      	nop
 8005444:	40023800 	.word	0x40023800
 8005448:	42470000 	.word	0x42470000
 800544c:	42470e80 	.word	0x42470e80
 8005450:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005454:	f7fd f972 	bl	800273c <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e106      	b.n	8005674 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005466:	4b85      	ldr	r3, [pc, #532]	; (800567c <HAL_RCC_OscConfig+0x4e4>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546e:	2b00      	cmp	r3, #0
 8005470:	d0f0      	beq.n	8005454 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d106      	bne.n	8005488 <HAL_RCC_OscConfig+0x2f0>
 800547a:	4b81      	ldr	r3, [pc, #516]	; (8005680 <HAL_RCC_OscConfig+0x4e8>)
 800547c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547e:	4a80      	ldr	r2, [pc, #512]	; (8005680 <HAL_RCC_OscConfig+0x4e8>)
 8005480:	f043 0301 	orr.w	r3, r3, #1
 8005484:	6713      	str	r3, [r2, #112]	; 0x70
 8005486:	e01c      	b.n	80054c2 <HAL_RCC_OscConfig+0x32a>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	2b05      	cmp	r3, #5
 800548e:	d10c      	bne.n	80054aa <HAL_RCC_OscConfig+0x312>
 8005490:	4b7b      	ldr	r3, [pc, #492]	; (8005680 <HAL_RCC_OscConfig+0x4e8>)
 8005492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005494:	4a7a      	ldr	r2, [pc, #488]	; (8005680 <HAL_RCC_OscConfig+0x4e8>)
 8005496:	f043 0304 	orr.w	r3, r3, #4
 800549a:	6713      	str	r3, [r2, #112]	; 0x70
 800549c:	4b78      	ldr	r3, [pc, #480]	; (8005680 <HAL_RCC_OscConfig+0x4e8>)
 800549e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a0:	4a77      	ldr	r2, [pc, #476]	; (8005680 <HAL_RCC_OscConfig+0x4e8>)
 80054a2:	f043 0301 	orr.w	r3, r3, #1
 80054a6:	6713      	str	r3, [r2, #112]	; 0x70
 80054a8:	e00b      	b.n	80054c2 <HAL_RCC_OscConfig+0x32a>
 80054aa:	4b75      	ldr	r3, [pc, #468]	; (8005680 <HAL_RCC_OscConfig+0x4e8>)
 80054ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ae:	4a74      	ldr	r2, [pc, #464]	; (8005680 <HAL_RCC_OscConfig+0x4e8>)
 80054b0:	f023 0301 	bic.w	r3, r3, #1
 80054b4:	6713      	str	r3, [r2, #112]	; 0x70
 80054b6:	4b72      	ldr	r3, [pc, #456]	; (8005680 <HAL_RCC_OscConfig+0x4e8>)
 80054b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ba:	4a71      	ldr	r2, [pc, #452]	; (8005680 <HAL_RCC_OscConfig+0x4e8>)
 80054bc:	f023 0304 	bic.w	r3, r3, #4
 80054c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d015      	beq.n	80054f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ca:	f7fd f937 	bl	800273c <HAL_GetTick>
 80054ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054d0:	e00a      	b.n	80054e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054d2:	f7fd f933 	bl	800273c <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d901      	bls.n	80054e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e0c5      	b.n	8005674 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054e8:	4b65      	ldr	r3, [pc, #404]	; (8005680 <HAL_RCC_OscConfig+0x4e8>)
 80054ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0ee      	beq.n	80054d2 <HAL_RCC_OscConfig+0x33a>
 80054f4:	e014      	b.n	8005520 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054f6:	f7fd f921 	bl	800273c <HAL_GetTick>
 80054fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054fc:	e00a      	b.n	8005514 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054fe:	f7fd f91d 	bl	800273c <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	f241 3288 	movw	r2, #5000	; 0x1388
 800550c:	4293      	cmp	r3, r2
 800550e:	d901      	bls.n	8005514 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e0af      	b.n	8005674 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005514:	4b5a      	ldr	r3, [pc, #360]	; (8005680 <HAL_RCC_OscConfig+0x4e8>)
 8005516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1ee      	bne.n	80054fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005520:	7dfb      	ldrb	r3, [r7, #23]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d105      	bne.n	8005532 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005526:	4b56      	ldr	r3, [pc, #344]	; (8005680 <HAL_RCC_OscConfig+0x4e8>)
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	4a55      	ldr	r2, [pc, #340]	; (8005680 <HAL_RCC_OscConfig+0x4e8>)
 800552c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005530:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 809b 	beq.w	8005672 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800553c:	4b50      	ldr	r3, [pc, #320]	; (8005680 <HAL_RCC_OscConfig+0x4e8>)
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f003 030c 	and.w	r3, r3, #12
 8005544:	2b08      	cmp	r3, #8
 8005546:	d05c      	beq.n	8005602 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	2b02      	cmp	r3, #2
 800554e:	d141      	bne.n	80055d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005550:	4b4c      	ldr	r3, [pc, #304]	; (8005684 <HAL_RCC_OscConfig+0x4ec>)
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005556:	f7fd f8f1 	bl	800273c <HAL_GetTick>
 800555a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800555c:	e008      	b.n	8005570 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800555e:	f7fd f8ed 	bl	800273c <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e081      	b.n	8005674 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005570:	4b43      	ldr	r3, [pc, #268]	; (8005680 <HAL_RCC_OscConfig+0x4e8>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1f0      	bne.n	800555e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	69da      	ldr	r2, [r3, #28]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	431a      	orrs	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	019b      	lsls	r3, r3, #6
 800558c:	431a      	orrs	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	085b      	lsrs	r3, r3, #1
 8005594:	3b01      	subs	r3, #1
 8005596:	041b      	lsls	r3, r3, #16
 8005598:	431a      	orrs	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559e:	061b      	lsls	r3, r3, #24
 80055a0:	4937      	ldr	r1, [pc, #220]	; (8005680 <HAL_RCC_OscConfig+0x4e8>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055a6:	4b37      	ldr	r3, [pc, #220]	; (8005684 <HAL_RCC_OscConfig+0x4ec>)
 80055a8:	2201      	movs	r2, #1
 80055aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ac:	f7fd f8c6 	bl	800273c <HAL_GetTick>
 80055b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055b4:	f7fd f8c2 	bl	800273c <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e056      	b.n	8005674 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055c6:	4b2e      	ldr	r3, [pc, #184]	; (8005680 <HAL_RCC_OscConfig+0x4e8>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0f0      	beq.n	80055b4 <HAL_RCC_OscConfig+0x41c>
 80055d2:	e04e      	b.n	8005672 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055d4:	4b2b      	ldr	r3, [pc, #172]	; (8005684 <HAL_RCC_OscConfig+0x4ec>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055da:	f7fd f8af 	bl	800273c <HAL_GetTick>
 80055de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055e0:	e008      	b.n	80055f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055e2:	f7fd f8ab 	bl	800273c <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d901      	bls.n	80055f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e03f      	b.n	8005674 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055f4:	4b22      	ldr	r3, [pc, #136]	; (8005680 <HAL_RCC_OscConfig+0x4e8>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1f0      	bne.n	80055e2 <HAL_RCC_OscConfig+0x44a>
 8005600:	e037      	b.n	8005672 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d101      	bne.n	800560e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e032      	b.n	8005674 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800560e:	4b1c      	ldr	r3, [pc, #112]	; (8005680 <HAL_RCC_OscConfig+0x4e8>)
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d028      	beq.n	800566e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005626:	429a      	cmp	r2, r3
 8005628:	d121      	bne.n	800566e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005634:	429a      	cmp	r2, r3
 8005636:	d11a      	bne.n	800566e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800563e:	4013      	ands	r3, r2
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005644:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005646:	4293      	cmp	r3, r2
 8005648:	d111      	bne.n	800566e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005654:	085b      	lsrs	r3, r3, #1
 8005656:	3b01      	subs	r3, #1
 8005658:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800565a:	429a      	cmp	r2, r3
 800565c:	d107      	bne.n	800566e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005668:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800566a:	429a      	cmp	r2, r3
 800566c:	d001      	beq.n	8005672 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e000      	b.n	8005674 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3718      	adds	r7, #24
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	40007000 	.word	0x40007000
 8005680:	40023800 	.word	0x40023800
 8005684:	42470060 	.word	0x42470060

08005688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e0cc      	b.n	8005836 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800569c:	4b68      	ldr	r3, [pc, #416]	; (8005840 <HAL_RCC_ClockConfig+0x1b8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0307 	and.w	r3, r3, #7
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d90c      	bls.n	80056c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056aa:	4b65      	ldr	r3, [pc, #404]	; (8005840 <HAL_RCC_ClockConfig+0x1b8>)
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	b2d2      	uxtb	r2, r2
 80056b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056b2:	4b63      	ldr	r3, [pc, #396]	; (8005840 <HAL_RCC_ClockConfig+0x1b8>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d001      	beq.n	80056c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e0b8      	b.n	8005836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d020      	beq.n	8005712 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0304 	and.w	r3, r3, #4
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056dc:	4b59      	ldr	r3, [pc, #356]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	4a58      	ldr	r2, [pc, #352]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 80056e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0308 	and.w	r3, r3, #8
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d005      	beq.n	8005700 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056f4:	4b53      	ldr	r3, [pc, #332]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	4a52      	ldr	r2, [pc, #328]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 80056fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005700:	4b50      	ldr	r3, [pc, #320]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	494d      	ldr	r1, [pc, #308]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 800570e:	4313      	orrs	r3, r2
 8005710:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d044      	beq.n	80057a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d107      	bne.n	8005736 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005726:	4b47      	ldr	r3, [pc, #284]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d119      	bne.n	8005766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e07f      	b.n	8005836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	2b02      	cmp	r3, #2
 800573c:	d003      	beq.n	8005746 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005742:	2b03      	cmp	r3, #3
 8005744:	d107      	bne.n	8005756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005746:	4b3f      	ldr	r3, [pc, #252]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d109      	bne.n	8005766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e06f      	b.n	8005836 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005756:	4b3b      	ldr	r3, [pc, #236]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e067      	b.n	8005836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005766:	4b37      	ldr	r3, [pc, #220]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f023 0203 	bic.w	r2, r3, #3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	4934      	ldr	r1, [pc, #208]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 8005774:	4313      	orrs	r3, r2
 8005776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005778:	f7fc ffe0 	bl	800273c <HAL_GetTick>
 800577c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800577e:	e00a      	b.n	8005796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005780:	f7fc ffdc 	bl	800273c <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	f241 3288 	movw	r2, #5000	; 0x1388
 800578e:	4293      	cmp	r3, r2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e04f      	b.n	8005836 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005796:	4b2b      	ldr	r3, [pc, #172]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f003 020c 	and.w	r2, r3, #12
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d1eb      	bne.n	8005780 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057a8:	4b25      	ldr	r3, [pc, #148]	; (8005840 <HAL_RCC_ClockConfig+0x1b8>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0307 	and.w	r3, r3, #7
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d20c      	bcs.n	80057d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057b6:	4b22      	ldr	r3, [pc, #136]	; (8005840 <HAL_RCC_ClockConfig+0x1b8>)
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	b2d2      	uxtb	r2, r2
 80057bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057be:	4b20      	ldr	r3, [pc, #128]	; (8005840 <HAL_RCC_ClockConfig+0x1b8>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d001      	beq.n	80057d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e032      	b.n	8005836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d008      	beq.n	80057ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057dc:	4b19      	ldr	r3, [pc, #100]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	4916      	ldr	r1, [pc, #88]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0308 	and.w	r3, r3, #8
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d009      	beq.n	800580e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057fa:	4b12      	ldr	r3, [pc, #72]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	490e      	ldr	r1, [pc, #56]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 800580a:	4313      	orrs	r3, r2
 800580c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800580e:	f000 f821 	bl	8005854 <HAL_RCC_GetSysClockFreq>
 8005812:	4602      	mov	r2, r0
 8005814:	4b0b      	ldr	r3, [pc, #44]	; (8005844 <HAL_RCC_ClockConfig+0x1bc>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	091b      	lsrs	r3, r3, #4
 800581a:	f003 030f 	and.w	r3, r3, #15
 800581e:	490a      	ldr	r1, [pc, #40]	; (8005848 <HAL_RCC_ClockConfig+0x1c0>)
 8005820:	5ccb      	ldrb	r3, [r1, r3]
 8005822:	fa22 f303 	lsr.w	r3, r2, r3
 8005826:	4a09      	ldr	r2, [pc, #36]	; (800584c <HAL_RCC_ClockConfig+0x1c4>)
 8005828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800582a:	4b09      	ldr	r3, [pc, #36]	; (8005850 <HAL_RCC_ClockConfig+0x1c8>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4618      	mov	r0, r3
 8005830:	f7fc ff40 	bl	80026b4 <HAL_InitTick>

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	40023c00 	.word	0x40023c00
 8005844:	40023800 	.word	0x40023800
 8005848:	0800aec4 	.word	0x0800aec4
 800584c:	20000008 	.word	0x20000008
 8005850:	2000000c 	.word	0x2000000c

08005854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005854:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005858:	b084      	sub	sp, #16
 800585a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800585c:	2300      	movs	r3, #0
 800585e:	607b      	str	r3, [r7, #4]
 8005860:	2300      	movs	r3, #0
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	2300      	movs	r3, #0
 8005866:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005868:	2300      	movs	r3, #0
 800586a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800586c:	4b67      	ldr	r3, [pc, #412]	; (8005a0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f003 030c 	and.w	r3, r3, #12
 8005874:	2b08      	cmp	r3, #8
 8005876:	d00d      	beq.n	8005894 <HAL_RCC_GetSysClockFreq+0x40>
 8005878:	2b08      	cmp	r3, #8
 800587a:	f200 80bd 	bhi.w	80059f8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800587e:	2b00      	cmp	r3, #0
 8005880:	d002      	beq.n	8005888 <HAL_RCC_GetSysClockFreq+0x34>
 8005882:	2b04      	cmp	r3, #4
 8005884:	d003      	beq.n	800588e <HAL_RCC_GetSysClockFreq+0x3a>
 8005886:	e0b7      	b.n	80059f8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005888:	4b61      	ldr	r3, [pc, #388]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800588a:	60bb      	str	r3, [r7, #8]
       break;
 800588c:	e0b7      	b.n	80059fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800588e:	4b61      	ldr	r3, [pc, #388]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005890:	60bb      	str	r3, [r7, #8]
      break;
 8005892:	e0b4      	b.n	80059fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005894:	4b5d      	ldr	r3, [pc, #372]	; (8005a0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800589c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800589e:	4b5b      	ldr	r3, [pc, #364]	; (8005a0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d04d      	beq.n	8005946 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058aa:	4b58      	ldr	r3, [pc, #352]	; (8005a0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	099b      	lsrs	r3, r3, #6
 80058b0:	461a      	mov	r2, r3
 80058b2:	f04f 0300 	mov.w	r3, #0
 80058b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80058ba:	f04f 0100 	mov.w	r1, #0
 80058be:	ea02 0800 	and.w	r8, r2, r0
 80058c2:	ea03 0901 	and.w	r9, r3, r1
 80058c6:	4640      	mov	r0, r8
 80058c8:	4649      	mov	r1, r9
 80058ca:	f04f 0200 	mov.w	r2, #0
 80058ce:	f04f 0300 	mov.w	r3, #0
 80058d2:	014b      	lsls	r3, r1, #5
 80058d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80058d8:	0142      	lsls	r2, r0, #5
 80058da:	4610      	mov	r0, r2
 80058dc:	4619      	mov	r1, r3
 80058de:	ebb0 0008 	subs.w	r0, r0, r8
 80058e2:	eb61 0109 	sbc.w	r1, r1, r9
 80058e6:	f04f 0200 	mov.w	r2, #0
 80058ea:	f04f 0300 	mov.w	r3, #0
 80058ee:	018b      	lsls	r3, r1, #6
 80058f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80058f4:	0182      	lsls	r2, r0, #6
 80058f6:	1a12      	subs	r2, r2, r0
 80058f8:	eb63 0301 	sbc.w	r3, r3, r1
 80058fc:	f04f 0000 	mov.w	r0, #0
 8005900:	f04f 0100 	mov.w	r1, #0
 8005904:	00d9      	lsls	r1, r3, #3
 8005906:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800590a:	00d0      	lsls	r0, r2, #3
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	eb12 0208 	adds.w	r2, r2, r8
 8005914:	eb43 0309 	adc.w	r3, r3, r9
 8005918:	f04f 0000 	mov.w	r0, #0
 800591c:	f04f 0100 	mov.w	r1, #0
 8005920:	0259      	lsls	r1, r3, #9
 8005922:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005926:	0250      	lsls	r0, r2, #9
 8005928:	4602      	mov	r2, r0
 800592a:	460b      	mov	r3, r1
 800592c:	4610      	mov	r0, r2
 800592e:	4619      	mov	r1, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	461a      	mov	r2, r3
 8005934:	f04f 0300 	mov.w	r3, #0
 8005938:	f7fa ffa0 	bl	800087c <__aeabi_uldivmod>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	4613      	mov	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	e04a      	b.n	80059dc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005946:	4b31      	ldr	r3, [pc, #196]	; (8005a0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	099b      	lsrs	r3, r3, #6
 800594c:	461a      	mov	r2, r3
 800594e:	f04f 0300 	mov.w	r3, #0
 8005952:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005956:	f04f 0100 	mov.w	r1, #0
 800595a:	ea02 0400 	and.w	r4, r2, r0
 800595e:	ea03 0501 	and.w	r5, r3, r1
 8005962:	4620      	mov	r0, r4
 8005964:	4629      	mov	r1, r5
 8005966:	f04f 0200 	mov.w	r2, #0
 800596a:	f04f 0300 	mov.w	r3, #0
 800596e:	014b      	lsls	r3, r1, #5
 8005970:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005974:	0142      	lsls	r2, r0, #5
 8005976:	4610      	mov	r0, r2
 8005978:	4619      	mov	r1, r3
 800597a:	1b00      	subs	r0, r0, r4
 800597c:	eb61 0105 	sbc.w	r1, r1, r5
 8005980:	f04f 0200 	mov.w	r2, #0
 8005984:	f04f 0300 	mov.w	r3, #0
 8005988:	018b      	lsls	r3, r1, #6
 800598a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800598e:	0182      	lsls	r2, r0, #6
 8005990:	1a12      	subs	r2, r2, r0
 8005992:	eb63 0301 	sbc.w	r3, r3, r1
 8005996:	f04f 0000 	mov.w	r0, #0
 800599a:	f04f 0100 	mov.w	r1, #0
 800599e:	00d9      	lsls	r1, r3, #3
 80059a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059a4:	00d0      	lsls	r0, r2, #3
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	1912      	adds	r2, r2, r4
 80059ac:	eb45 0303 	adc.w	r3, r5, r3
 80059b0:	f04f 0000 	mov.w	r0, #0
 80059b4:	f04f 0100 	mov.w	r1, #0
 80059b8:	0299      	lsls	r1, r3, #10
 80059ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80059be:	0290      	lsls	r0, r2, #10
 80059c0:	4602      	mov	r2, r0
 80059c2:	460b      	mov	r3, r1
 80059c4:	4610      	mov	r0, r2
 80059c6:	4619      	mov	r1, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	461a      	mov	r2, r3
 80059cc:	f04f 0300 	mov.w	r3, #0
 80059d0:	f7fa ff54 	bl	800087c <__aeabi_uldivmod>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	4613      	mov	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059dc:	4b0b      	ldr	r3, [pc, #44]	; (8005a0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	0c1b      	lsrs	r3, r3, #16
 80059e2:	f003 0303 	and.w	r3, r3, #3
 80059e6:	3301      	adds	r3, #1
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f4:	60bb      	str	r3, [r7, #8]
      break;
 80059f6:	e002      	b.n	80059fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059f8:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80059fa:	60bb      	str	r3, [r7, #8]
      break;
 80059fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059fe:	68bb      	ldr	r3, [r7, #8]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005a0a:	bf00      	nop
 8005a0c:	40023800 	.word	0x40023800
 8005a10:	00f42400 	.word	0x00f42400
 8005a14:	007a1200 	.word	0x007a1200

08005a18 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d105      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d035      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a40:	4b62      	ldr	r3, [pc, #392]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a46:	f7fc fe79 	bl	800273c <HAL_GetTick>
 8005a4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a4c:	e008      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a4e:	f7fc fe75 	bl	800273c <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e0b0      	b.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a60:	4b5b      	ldr	r3, [pc, #364]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1f0      	bne.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	019a      	lsls	r2, r3, #6
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	071b      	lsls	r3, r3, #28
 8005a78:	4955      	ldr	r1, [pc, #340]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a80:	4b52      	ldr	r3, [pc, #328]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005a82:	2201      	movs	r2, #1
 8005a84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a86:	f7fc fe59 	bl	800273c <HAL_GetTick>
 8005a8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a8c:	e008      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a8e:	f7fc fe55 	bl	800273c <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d901      	bls.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e090      	b.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005aa0:	4b4b      	ldr	r3, [pc, #300]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d0f0      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 8083 	beq.w	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	4b44      	ldr	r3, [pc, #272]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	4a43      	ldr	r2, [pc, #268]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8005aca:	4b41      	ldr	r3, [pc, #260]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ad2:	60fb      	str	r3, [r7, #12]
 8005ad4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005ad6:	4b3f      	ldr	r3, [pc, #252]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a3e      	ldr	r2, [pc, #248]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ae0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ae2:	f7fc fe2b 	bl	800273c <HAL_GetTick>
 8005ae6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ae8:	e008      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005aea:	f7fc fe27 	bl	800273c <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d901      	bls.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e062      	b.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005afc:	4b35      	ldr	r3, [pc, #212]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0f0      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b08:	4b31      	ldr	r3, [pc, #196]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b10:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d02f      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d028      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b26:	4b2a      	ldr	r3, [pc, #168]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b2e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b30:	4b29      	ldr	r3, [pc, #164]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005b32:	2201      	movs	r2, #1
 8005b34:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b36:	4b28      	ldr	r3, [pc, #160]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b3c:	4a24      	ldr	r2, [pc, #144]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b42:	4b23      	ldr	r3, [pc, #140]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d114      	bne.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b4e:	f7fc fdf5 	bl	800273c <HAL_GetTick>
 8005b52:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b54:	e00a      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b56:	f7fc fdf1 	bl	800273c <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e02a      	b.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b6c:	4b18      	ldr	r3, [pc, #96]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0ee      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b84:	d10d      	bne.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005b86:	4b12      	ldr	r3, [pc, #72]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b9a:	490d      	ldr	r1, [pc, #52]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	608b      	str	r3, [r1, #8]
 8005ba0:	e005      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005ba2:	4b0b      	ldr	r3, [pc, #44]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	4a0a      	ldr	r2, [pc, #40]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ba8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005bac:	6093      	str	r3, [r2, #8]
 8005bae:	4b08      	ldr	r3, [pc, #32]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bba:	4905      	ldr	r1, [pc, #20]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3718      	adds	r7, #24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	42470068 	.word	0x42470068
 8005bd0:	40023800 	.word	0x40023800
 8005bd4:	40007000 	.word	0x40007000
 8005bd8:	42470e40 	.word	0x42470e40

08005bdc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005be4:	2300      	movs	r3, #0
 8005be6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005be8:	2300      	movs	r3, #0
 8005bea:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d13e      	bne.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005bfa:	4b23      	ldr	r3, [pc, #140]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d005      	beq.n	8005c16 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d12f      	bne.n	8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005c10:	4b1e      	ldr	r3, [pc, #120]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005c12:	617b      	str	r3, [r7, #20]
          break;
 8005c14:	e02f      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005c16:	4b1c      	ldr	r3, [pc, #112]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c22:	d108      	bne.n	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005c24:	4b18      	ldr	r3, [pc, #96]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c2c:	4a18      	ldr	r2, [pc, #96]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c32:	613b      	str	r3, [r7, #16]
 8005c34:	e007      	b.n	8005c46 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005c36:	4b14      	ldr	r3, [pc, #80]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c3e:	4a15      	ldr	r2, [pc, #84]	; (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c44:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005c46:	4b10      	ldr	r3, [pc, #64]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c4c:	099b      	lsrs	r3, r3, #6
 8005c4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	fb02 f303 	mul.w	r3, r2, r3
 8005c58:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005c5a:	4b0b      	ldr	r3, [pc, #44]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c60:	0f1b      	lsrs	r3, r3, #28
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6c:	617b      	str	r3, [r7, #20]
          break;
 8005c6e:	e002      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005c70:	2300      	movs	r3, #0
 8005c72:	617b      	str	r3, [r7, #20]
          break;
 8005c74:	bf00      	nop
        }
      }
      break;
 8005c76:	bf00      	nop
    }
  }
  return frequency;
 8005c78:	697b      	ldr	r3, [r7, #20]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	371c      	adds	r7, #28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	40023800 	.word	0x40023800
 8005c8c:	00bb8000 	.word	0x00bb8000
 8005c90:	007a1200 	.word	0x007a1200
 8005c94:	00f42400 	.word	0x00f42400

08005c98 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e01c      	b.n	8005ce4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	795b      	ldrb	r3, [r3, #5]
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d105      	bne.n	8005cc0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7fc face 	bl	800225c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f042 0204 	orr.w	r2, r2, #4
 8005cd4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	791b      	ldrb	r3, [r3, #4]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d101      	bne.n	8005d06 <HAL_RNG_GenerateRandomNumber+0x1a>
 8005d02:	2302      	movs	r3, #2
 8005d04:	e03d      	b.n	8005d82 <HAL_RNG_GenerateRandomNumber+0x96>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	795b      	ldrb	r3, [r3, #5]
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d12c      	bne.n	8005d70 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2202      	movs	r2, #2
 8005d1a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d1c:	f7fc fd0e 	bl	800273c <HAL_GetTick>
 8005d20:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005d22:	e011      	b.n	8005d48 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005d24:	f7fc fd0a 	bl	800273c <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d90a      	bls.n	8005d48 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e01c      	b.n	8005d82 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d1e6      	bne.n	8005d24 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	715a      	strb	r2, [r3, #5]
 8005d6e:	e004      	b.n	8005d7a <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2204      	movs	r2, #4
 8005d74:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	711a      	strb	r2, [r3, #4]

  return status;
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b082      	sub	sp, #8
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	330c      	adds	r3, #12
 8005d96:	4619      	mov	r1, r3
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f7ff ffa7 	bl	8005cec <HAL_RNG_GenerateRandomNumber>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d102      	bne.n	8005daa <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	e000      	b.n	8005dac <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8005daa:	2300      	movs	r3, #0
  }
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3708      	adds	r7, #8
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e07b      	b.n	8005ebe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d108      	bne.n	8005de0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dd6:	d009      	beq.n	8005dec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	61da      	str	r2, [r3, #28]
 8005dde:	e005      	b.n	8005dec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d106      	bne.n	8005e0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7fc fa4a 	bl	80022a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e34:	431a      	orrs	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	f003 0302 	and.w	r3, r3, #2
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	431a      	orrs	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e66:	431a      	orrs	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e70:	ea42 0103 	orr.w	r1, r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e78:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	0c1b      	lsrs	r3, r3, #16
 8005e8a:	f003 0104 	and.w	r1, r3, #4
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	f003 0210 	and.w	r2, r3, #16
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	69da      	ldr	r2, [r3, #28]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005eac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b088      	sub	sp, #32
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	603b      	str	r3, [r7, #0]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d101      	bne.n	8005ee8 <HAL_SPI_Transmit+0x22>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e126      	b.n	8006136 <HAL_SPI_Transmit+0x270>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ef0:	f7fc fc24 	bl	800273c <HAL_GetTick>
 8005ef4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ef6:	88fb      	ldrh	r3, [r7, #6]
 8005ef8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d002      	beq.n	8005f0c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005f06:	2302      	movs	r3, #2
 8005f08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f0a:	e10b      	b.n	8006124 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <HAL_SPI_Transmit+0x52>
 8005f12:	88fb      	ldrh	r3, [r7, #6]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d102      	bne.n	8005f1e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f1c:	e102      	b.n	8006124 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2203      	movs	r2, #3
 8005f22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	88fa      	ldrh	r2, [r7, #6]
 8005f36:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	88fa      	ldrh	r2, [r7, #6]
 8005f3c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f64:	d10f      	bne.n	8005f86 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f90:	2b40      	cmp	r3, #64	; 0x40
 8005f92:	d007      	beq.n	8005fa4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fac:	d14b      	bne.n	8006046 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d002      	beq.n	8005fbc <HAL_SPI_Transmit+0xf6>
 8005fb6:	8afb      	ldrh	r3, [r7, #22]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d13e      	bne.n	800603a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc0:	881a      	ldrh	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fcc:	1c9a      	adds	r2, r3, #2
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005fe0:	e02b      	b.n	800603a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d112      	bne.n	8006016 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff4:	881a      	ldrh	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006000:	1c9a      	adds	r2, r3, #2
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800600a:	b29b      	uxth	r3, r3
 800600c:	3b01      	subs	r3, #1
 800600e:	b29a      	uxth	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	86da      	strh	r2, [r3, #54]	; 0x36
 8006014:	e011      	b.n	800603a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006016:	f7fc fb91 	bl	800273c <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	429a      	cmp	r2, r3
 8006024:	d803      	bhi.n	800602e <HAL_SPI_Transmit+0x168>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800602c:	d102      	bne.n	8006034 <HAL_SPI_Transmit+0x16e>
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d102      	bne.n	800603a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006038:	e074      	b.n	8006124 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800603e:	b29b      	uxth	r3, r3
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1ce      	bne.n	8005fe2 <HAL_SPI_Transmit+0x11c>
 8006044:	e04c      	b.n	80060e0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d002      	beq.n	8006054 <HAL_SPI_Transmit+0x18e>
 800604e:	8afb      	ldrh	r3, [r7, #22]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d140      	bne.n	80060d6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	330c      	adds	r3, #12
 800605e:	7812      	ldrb	r2, [r2, #0]
 8006060:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006066:	1c5a      	adds	r2, r3, #1
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006070:	b29b      	uxth	r3, r3
 8006072:	3b01      	subs	r3, #1
 8006074:	b29a      	uxth	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800607a:	e02c      	b.n	80060d6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b02      	cmp	r3, #2
 8006088:	d113      	bne.n	80060b2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	330c      	adds	r3, #12
 8006094:	7812      	ldrb	r2, [r2, #0]
 8006096:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609c:	1c5a      	adds	r2, r3, #1
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	3b01      	subs	r3, #1
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80060b0:	e011      	b.n	80060d6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060b2:	f7fc fb43 	bl	800273c <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d803      	bhi.n	80060ca <HAL_SPI_Transmit+0x204>
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060c8:	d102      	bne.n	80060d0 <HAL_SPI_Transmit+0x20a>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d102      	bne.n	80060d6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80060d4:	e026      	b.n	8006124 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060da:	b29b      	uxth	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1cd      	bne.n	800607c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	6839      	ldr	r1, [r7, #0]
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 f8b3 	bl	8006250 <SPI_EndRxTxTransaction>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d002      	beq.n	80060f6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2220      	movs	r2, #32
 80060f4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10a      	bne.n	8006114 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060fe:	2300      	movs	r3, #0
 8006100:	613b      	str	r3, [r7, #16]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	613b      	str	r3, [r7, #16]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	613b      	str	r3, [r7, #16]
 8006112:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006118:	2b00      	cmp	r3, #0
 800611a:	d002      	beq.n	8006122 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	77fb      	strb	r3, [r7, #31]
 8006120:	e000      	b.n	8006124 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006122:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006134:	7ffb      	ldrb	r3, [r7, #31]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3720      	adds	r7, #32
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
	...

08006140 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b088      	sub	sp, #32
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	603b      	str	r3, [r7, #0]
 800614c:	4613      	mov	r3, r2
 800614e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006150:	f7fc faf4 	bl	800273c <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006158:	1a9b      	subs	r3, r3, r2
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	4413      	add	r3, r2
 800615e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006160:	f7fc faec 	bl	800273c <HAL_GetTick>
 8006164:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006166:	4b39      	ldr	r3, [pc, #228]	; (800624c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	015b      	lsls	r3, r3, #5
 800616c:	0d1b      	lsrs	r3, r3, #20
 800616e:	69fa      	ldr	r2, [r7, #28]
 8006170:	fb02 f303 	mul.w	r3, r2, r3
 8006174:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006176:	e054      	b.n	8006222 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800617e:	d050      	beq.n	8006222 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006180:	f7fc fadc 	bl	800273c <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	69fa      	ldr	r2, [r7, #28]
 800618c:	429a      	cmp	r2, r3
 800618e:	d902      	bls.n	8006196 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d13d      	bne.n	8006212 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061ae:	d111      	bne.n	80061d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061b8:	d004      	beq.n	80061c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061c2:	d107      	bne.n	80061d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061dc:	d10f      	bne.n	80061fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061ec:	601a      	str	r2, [r3, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e017      	b.n	8006242 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	3b01      	subs	r3, #1
 8006220:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	4013      	ands	r3, r2
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	429a      	cmp	r2, r3
 8006230:	bf0c      	ite	eq
 8006232:	2301      	moveq	r3, #1
 8006234:	2300      	movne	r3, #0
 8006236:	b2db      	uxtb	r3, r3
 8006238:	461a      	mov	r2, r3
 800623a:	79fb      	ldrb	r3, [r7, #7]
 800623c:	429a      	cmp	r2, r3
 800623e:	d19b      	bne.n	8006178 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3720      	adds	r7, #32
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	20000008 	.word	0x20000008

08006250 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b088      	sub	sp, #32
 8006254:	af02      	add	r7, sp, #8
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800625c:	4b1b      	ldr	r3, [pc, #108]	; (80062cc <SPI_EndRxTxTransaction+0x7c>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a1b      	ldr	r2, [pc, #108]	; (80062d0 <SPI_EndRxTxTransaction+0x80>)
 8006262:	fba2 2303 	umull	r2, r3, r2, r3
 8006266:	0d5b      	lsrs	r3, r3, #21
 8006268:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800626c:	fb02 f303 	mul.w	r3, r2, r3
 8006270:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800627a:	d112      	bne.n	80062a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2200      	movs	r2, #0
 8006284:	2180      	movs	r1, #128	; 0x80
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f7ff ff5a 	bl	8006140 <SPI_WaitFlagStateUntilTimeout>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d016      	beq.n	80062c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006296:	f043 0220 	orr.w	r2, r3, #32
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e00f      	b.n	80062c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00a      	beq.n	80062be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	3b01      	subs	r3, #1
 80062ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b8:	2b80      	cmp	r3, #128	; 0x80
 80062ba:	d0f2      	beq.n	80062a2 <SPI_EndRxTxTransaction+0x52>
 80062bc:	e000      	b.n	80062c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80062be:	bf00      	nop
  }

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3718      	adds	r7, #24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	20000008 	.word	0x20000008
 80062d0:	165e9f81 	.word	0x165e9f81

080062d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e041      	b.n	800636a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d106      	bne.n	8006300 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7fc f86e 	bl	80023dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2202      	movs	r2, #2
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	3304      	adds	r3, #4
 8006310:	4619      	mov	r1, r3
 8006312:	4610      	mov	r0, r2
 8006314:	f000 fb42 	bl	800699c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b082      	sub	sp, #8
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e041      	b.n	8006408 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b00      	cmp	r3, #0
 800638e:	d106      	bne.n	800639e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 f839 	bl	8006410 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2202      	movs	r2, #2
 80063a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	3304      	adds	r3, #4
 80063ae:	4619      	mov	r1, r3
 80063b0:	4610      	mov	r0, r2
 80063b2:	f000 faf3 	bl	800699c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b02      	cmp	r3, #2
 8006438:	d122      	bne.n	8006480 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b02      	cmp	r3, #2
 8006446:	d11b      	bne.n	8006480 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f06f 0202 	mvn.w	r2, #2
 8006450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	f003 0303 	and.w	r3, r3, #3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fa7a 	bl	8006960 <HAL_TIM_IC_CaptureCallback>
 800646c:	e005      	b.n	800647a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fa6c 	bl	800694c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fa7d 	bl	8006974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f003 0304 	and.w	r3, r3, #4
 800648a:	2b04      	cmp	r3, #4
 800648c:	d122      	bne.n	80064d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b04      	cmp	r3, #4
 800649a:	d11b      	bne.n	80064d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f06f 0204 	mvn.w	r2, #4
 80064a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2202      	movs	r2, #2
 80064aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fa50 	bl	8006960 <HAL_TIM_IC_CaptureCallback>
 80064c0:	e005      	b.n	80064ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 fa42 	bl	800694c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fa53 	bl	8006974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	f003 0308 	and.w	r3, r3, #8
 80064de:	2b08      	cmp	r3, #8
 80064e0:	d122      	bne.n	8006528 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f003 0308 	and.w	r3, r3, #8
 80064ec:	2b08      	cmp	r3, #8
 80064ee:	d11b      	bne.n	8006528 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f06f 0208 	mvn.w	r2, #8
 80064f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2204      	movs	r2, #4
 80064fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	f003 0303 	and.w	r3, r3, #3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fa26 	bl	8006960 <HAL_TIM_IC_CaptureCallback>
 8006514:	e005      	b.n	8006522 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fa18 	bl	800694c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 fa29 	bl	8006974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	f003 0310 	and.w	r3, r3, #16
 8006532:	2b10      	cmp	r3, #16
 8006534:	d122      	bne.n	800657c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f003 0310 	and.w	r3, r3, #16
 8006540:	2b10      	cmp	r3, #16
 8006542:	d11b      	bne.n	800657c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f06f 0210 	mvn.w	r2, #16
 800654c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2208      	movs	r2, #8
 8006552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f9fc 	bl	8006960 <HAL_TIM_IC_CaptureCallback>
 8006568:	e005      	b.n	8006576 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f9ee 	bl	800694c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f9ff 	bl	8006974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	2b01      	cmp	r3, #1
 8006588:	d10e      	bne.n	80065a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	2b01      	cmp	r3, #1
 8006596:	d107      	bne.n	80065a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f06f 0201 	mvn.w	r2, #1
 80065a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f9c8 	bl	8006938 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b2:	2b80      	cmp	r3, #128	; 0x80
 80065b4:	d10e      	bne.n	80065d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c0:	2b80      	cmp	r3, #128	; 0x80
 80065c2:	d107      	bne.n	80065d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 fd54 	bl	800707c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065de:	2b40      	cmp	r3, #64	; 0x40
 80065e0:	d10e      	bne.n	8006600 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ec:	2b40      	cmp	r3, #64	; 0x40
 80065ee:	d107      	bne.n	8006600 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f9c4 	bl	8006988 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	f003 0320 	and.w	r3, r3, #32
 800660a:	2b20      	cmp	r3, #32
 800660c:	d10e      	bne.n	800662c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f003 0320 	and.w	r3, r3, #32
 8006618:	2b20      	cmp	r3, #32
 800661a:	d107      	bne.n	800662c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f06f 0220 	mvn.w	r2, #32
 8006624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fd1e 	bl	8007068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800662c:	bf00      	nop
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006646:	2b01      	cmp	r3, #1
 8006648:	d101      	bne.n	800664e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800664a:	2302      	movs	r3, #2
 800664c:	e0ac      	b.n	80067a8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2b0c      	cmp	r3, #12
 800665a:	f200 809f 	bhi.w	800679c <HAL_TIM_PWM_ConfigChannel+0x168>
 800665e:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006664:	08006699 	.word	0x08006699
 8006668:	0800679d 	.word	0x0800679d
 800666c:	0800679d 	.word	0x0800679d
 8006670:	0800679d 	.word	0x0800679d
 8006674:	080066d9 	.word	0x080066d9
 8006678:	0800679d 	.word	0x0800679d
 800667c:	0800679d 	.word	0x0800679d
 8006680:	0800679d 	.word	0x0800679d
 8006684:	0800671b 	.word	0x0800671b
 8006688:	0800679d 	.word	0x0800679d
 800668c:	0800679d 	.word	0x0800679d
 8006690:	0800679d 	.word	0x0800679d
 8006694:	0800675b 	.word	0x0800675b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68b9      	ldr	r1, [r7, #8]
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 fa1c 	bl	8006adc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	699a      	ldr	r2, [r3, #24]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f042 0208 	orr.w	r2, r2, #8
 80066b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	699a      	ldr	r2, [r3, #24]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0204 	bic.w	r2, r2, #4
 80066c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6999      	ldr	r1, [r3, #24]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	691a      	ldr	r2, [r3, #16]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	619a      	str	r2, [r3, #24]
      break;
 80066d6:	e062      	b.n	800679e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68b9      	ldr	r1, [r7, #8]
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 fa6c 	bl	8006bbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699a      	ldr	r2, [r3, #24]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699a      	ldr	r2, [r3, #24]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6999      	ldr	r1, [r3, #24]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	021a      	lsls	r2, r3, #8
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	430a      	orrs	r2, r1
 8006716:	619a      	str	r2, [r3, #24]
      break;
 8006718:	e041      	b.n	800679e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68b9      	ldr	r1, [r7, #8]
 8006720:	4618      	mov	r0, r3
 8006722:	f000 fac1 	bl	8006ca8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	69da      	ldr	r2, [r3, #28]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f042 0208 	orr.w	r2, r2, #8
 8006734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69da      	ldr	r2, [r3, #28]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 0204 	bic.w	r2, r2, #4
 8006744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	69d9      	ldr	r1, [r3, #28]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	691a      	ldr	r2, [r3, #16]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	61da      	str	r2, [r3, #28]
      break;
 8006758:	e021      	b.n	800679e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68b9      	ldr	r1, [r7, #8]
 8006760:	4618      	mov	r0, r3
 8006762:	f000 fb15 	bl	8006d90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	69da      	ldr	r2, [r3, #28]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69da      	ldr	r2, [r3, #28]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69d9      	ldr	r1, [r3, #28]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	021a      	lsls	r2, r3, #8
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	61da      	str	r2, [r3, #28]
      break;
 800679a:	e000      	b.n	800679e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800679c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d101      	bne.n	80067c8 <HAL_TIM_ConfigClockSource+0x18>
 80067c4:	2302      	movs	r3, #2
 80067c6:	e0b3      	b.n	8006930 <HAL_TIM_ConfigClockSource+0x180>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2202      	movs	r2, #2
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006800:	d03e      	beq.n	8006880 <HAL_TIM_ConfigClockSource+0xd0>
 8006802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006806:	f200 8087 	bhi.w	8006918 <HAL_TIM_ConfigClockSource+0x168>
 800680a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800680e:	f000 8085 	beq.w	800691c <HAL_TIM_ConfigClockSource+0x16c>
 8006812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006816:	d87f      	bhi.n	8006918 <HAL_TIM_ConfigClockSource+0x168>
 8006818:	2b70      	cmp	r3, #112	; 0x70
 800681a:	d01a      	beq.n	8006852 <HAL_TIM_ConfigClockSource+0xa2>
 800681c:	2b70      	cmp	r3, #112	; 0x70
 800681e:	d87b      	bhi.n	8006918 <HAL_TIM_ConfigClockSource+0x168>
 8006820:	2b60      	cmp	r3, #96	; 0x60
 8006822:	d050      	beq.n	80068c6 <HAL_TIM_ConfigClockSource+0x116>
 8006824:	2b60      	cmp	r3, #96	; 0x60
 8006826:	d877      	bhi.n	8006918 <HAL_TIM_ConfigClockSource+0x168>
 8006828:	2b50      	cmp	r3, #80	; 0x50
 800682a:	d03c      	beq.n	80068a6 <HAL_TIM_ConfigClockSource+0xf6>
 800682c:	2b50      	cmp	r3, #80	; 0x50
 800682e:	d873      	bhi.n	8006918 <HAL_TIM_ConfigClockSource+0x168>
 8006830:	2b40      	cmp	r3, #64	; 0x40
 8006832:	d058      	beq.n	80068e6 <HAL_TIM_ConfigClockSource+0x136>
 8006834:	2b40      	cmp	r3, #64	; 0x40
 8006836:	d86f      	bhi.n	8006918 <HAL_TIM_ConfigClockSource+0x168>
 8006838:	2b30      	cmp	r3, #48	; 0x30
 800683a:	d064      	beq.n	8006906 <HAL_TIM_ConfigClockSource+0x156>
 800683c:	2b30      	cmp	r3, #48	; 0x30
 800683e:	d86b      	bhi.n	8006918 <HAL_TIM_ConfigClockSource+0x168>
 8006840:	2b20      	cmp	r3, #32
 8006842:	d060      	beq.n	8006906 <HAL_TIM_ConfigClockSource+0x156>
 8006844:	2b20      	cmp	r3, #32
 8006846:	d867      	bhi.n	8006918 <HAL_TIM_ConfigClockSource+0x168>
 8006848:	2b00      	cmp	r3, #0
 800684a:	d05c      	beq.n	8006906 <HAL_TIM_ConfigClockSource+0x156>
 800684c:	2b10      	cmp	r3, #16
 800684e:	d05a      	beq.n	8006906 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006850:	e062      	b.n	8006918 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6818      	ldr	r0, [r3, #0]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	6899      	ldr	r1, [r3, #8]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f000 fb65 	bl	8006f30 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006874:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	609a      	str	r2, [r3, #8]
      break;
 800687e:	e04e      	b.n	800691e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6818      	ldr	r0, [r3, #0]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	6899      	ldr	r1, [r3, #8]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f000 fb4e 	bl	8006f30 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689a      	ldr	r2, [r3, #8]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068a2:	609a      	str	r2, [r3, #8]
      break;
 80068a4:	e03b      	b.n	800691e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6818      	ldr	r0, [r3, #0]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	6859      	ldr	r1, [r3, #4]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	461a      	mov	r2, r3
 80068b4:	f000 fac2 	bl	8006e3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2150      	movs	r1, #80	; 0x50
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 fb1b 	bl	8006efa <TIM_ITRx_SetConfig>
      break;
 80068c4:	e02b      	b.n	800691e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6818      	ldr	r0, [r3, #0]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	6859      	ldr	r1, [r3, #4]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	461a      	mov	r2, r3
 80068d4:	f000 fae1 	bl	8006e9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2160      	movs	r1, #96	; 0x60
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 fb0b 	bl	8006efa <TIM_ITRx_SetConfig>
      break;
 80068e4:	e01b      	b.n	800691e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6818      	ldr	r0, [r3, #0]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	6859      	ldr	r1, [r3, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	461a      	mov	r2, r3
 80068f4:	f000 faa2 	bl	8006e3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2140      	movs	r1, #64	; 0x40
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 fafb 	bl	8006efa <TIM_ITRx_SetConfig>
      break;
 8006904:	e00b      	b.n	800691e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4619      	mov	r1, r3
 8006910:	4610      	mov	r0, r2
 8006912:	f000 faf2 	bl	8006efa <TIM_ITRx_SetConfig>
        break;
 8006916:	e002      	b.n	800691e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006918:	bf00      	nop
 800691a:	e000      	b.n	800691e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800691c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a40      	ldr	r2, [pc, #256]	; (8006ab0 <TIM_Base_SetConfig+0x114>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d013      	beq.n	80069dc <TIM_Base_SetConfig+0x40>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ba:	d00f      	beq.n	80069dc <TIM_Base_SetConfig+0x40>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a3d      	ldr	r2, [pc, #244]	; (8006ab4 <TIM_Base_SetConfig+0x118>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d00b      	beq.n	80069dc <TIM_Base_SetConfig+0x40>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a3c      	ldr	r2, [pc, #240]	; (8006ab8 <TIM_Base_SetConfig+0x11c>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d007      	beq.n	80069dc <TIM_Base_SetConfig+0x40>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a3b      	ldr	r2, [pc, #236]	; (8006abc <TIM_Base_SetConfig+0x120>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d003      	beq.n	80069dc <TIM_Base_SetConfig+0x40>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a3a      	ldr	r2, [pc, #232]	; (8006ac0 <TIM_Base_SetConfig+0x124>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d108      	bne.n	80069ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a2f      	ldr	r2, [pc, #188]	; (8006ab0 <TIM_Base_SetConfig+0x114>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d02b      	beq.n	8006a4e <TIM_Base_SetConfig+0xb2>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069fc:	d027      	beq.n	8006a4e <TIM_Base_SetConfig+0xb2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a2c      	ldr	r2, [pc, #176]	; (8006ab4 <TIM_Base_SetConfig+0x118>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d023      	beq.n	8006a4e <TIM_Base_SetConfig+0xb2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a2b      	ldr	r2, [pc, #172]	; (8006ab8 <TIM_Base_SetConfig+0x11c>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d01f      	beq.n	8006a4e <TIM_Base_SetConfig+0xb2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a2a      	ldr	r2, [pc, #168]	; (8006abc <TIM_Base_SetConfig+0x120>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d01b      	beq.n	8006a4e <TIM_Base_SetConfig+0xb2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a29      	ldr	r2, [pc, #164]	; (8006ac0 <TIM_Base_SetConfig+0x124>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d017      	beq.n	8006a4e <TIM_Base_SetConfig+0xb2>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a28      	ldr	r2, [pc, #160]	; (8006ac4 <TIM_Base_SetConfig+0x128>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d013      	beq.n	8006a4e <TIM_Base_SetConfig+0xb2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a27      	ldr	r2, [pc, #156]	; (8006ac8 <TIM_Base_SetConfig+0x12c>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00f      	beq.n	8006a4e <TIM_Base_SetConfig+0xb2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a26      	ldr	r2, [pc, #152]	; (8006acc <TIM_Base_SetConfig+0x130>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d00b      	beq.n	8006a4e <TIM_Base_SetConfig+0xb2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a25      	ldr	r2, [pc, #148]	; (8006ad0 <TIM_Base_SetConfig+0x134>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d007      	beq.n	8006a4e <TIM_Base_SetConfig+0xb2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a24      	ldr	r2, [pc, #144]	; (8006ad4 <TIM_Base_SetConfig+0x138>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d003      	beq.n	8006a4e <TIM_Base_SetConfig+0xb2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a23      	ldr	r2, [pc, #140]	; (8006ad8 <TIM_Base_SetConfig+0x13c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d108      	bne.n	8006a60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	689a      	ldr	r2, [r3, #8]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a0a      	ldr	r2, [pc, #40]	; (8006ab0 <TIM_Base_SetConfig+0x114>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d003      	beq.n	8006a94 <TIM_Base_SetConfig+0xf8>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a0c      	ldr	r2, [pc, #48]	; (8006ac0 <TIM_Base_SetConfig+0x124>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d103      	bne.n	8006a9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	691a      	ldr	r2, [r3, #16]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	615a      	str	r2, [r3, #20]
}
 8006aa2:	bf00      	nop
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	40010000 	.word	0x40010000
 8006ab4:	40000400 	.word	0x40000400
 8006ab8:	40000800 	.word	0x40000800
 8006abc:	40000c00 	.word	0x40000c00
 8006ac0:	40010400 	.word	0x40010400
 8006ac4:	40014000 	.word	0x40014000
 8006ac8:	40014400 	.word	0x40014400
 8006acc:	40014800 	.word	0x40014800
 8006ad0:	40001800 	.word	0x40001800
 8006ad4:	40001c00 	.word	0x40001c00
 8006ad8:	40002000 	.word	0x40002000

08006adc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b087      	sub	sp, #28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	f023 0201 	bic.w	r2, r3, #1
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f023 0303 	bic.w	r3, r3, #3
 8006b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f023 0302 	bic.w	r3, r3, #2
 8006b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a20      	ldr	r2, [pc, #128]	; (8006bb4 <TIM_OC1_SetConfig+0xd8>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d003      	beq.n	8006b40 <TIM_OC1_SetConfig+0x64>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a1f      	ldr	r2, [pc, #124]	; (8006bb8 <TIM_OC1_SetConfig+0xdc>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d10c      	bne.n	8006b5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f023 0308 	bic.w	r3, r3, #8
 8006b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f023 0304 	bic.w	r3, r3, #4
 8006b58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a15      	ldr	r2, [pc, #84]	; (8006bb4 <TIM_OC1_SetConfig+0xd8>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d003      	beq.n	8006b6a <TIM_OC1_SetConfig+0x8e>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a14      	ldr	r2, [pc, #80]	; (8006bb8 <TIM_OC1_SetConfig+0xdc>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d111      	bne.n	8006b8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	621a      	str	r2, [r3, #32]
}
 8006ba8:	bf00      	nop
 8006baa:	371c      	adds	r7, #28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	40010000 	.word	0x40010000
 8006bb8:	40010400 	.word	0x40010400

08006bbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	f023 0210 	bic.w	r2, r3, #16
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	021b      	lsls	r3, r3, #8
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f023 0320 	bic.w	r3, r3, #32
 8006c06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	011b      	lsls	r3, r3, #4
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a22      	ldr	r2, [pc, #136]	; (8006ca0 <TIM_OC2_SetConfig+0xe4>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d003      	beq.n	8006c24 <TIM_OC2_SetConfig+0x68>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a21      	ldr	r2, [pc, #132]	; (8006ca4 <TIM_OC2_SetConfig+0xe8>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d10d      	bne.n	8006c40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	011b      	lsls	r3, r3, #4
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a17      	ldr	r2, [pc, #92]	; (8006ca0 <TIM_OC2_SetConfig+0xe4>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d003      	beq.n	8006c50 <TIM_OC2_SetConfig+0x94>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a16      	ldr	r2, [pc, #88]	; (8006ca4 <TIM_OC2_SetConfig+0xe8>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d113      	bne.n	8006c78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	695b      	ldr	r3, [r3, #20]
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	621a      	str	r2, [r3, #32]
}
 8006c92:	bf00      	nop
 8006c94:	371c      	adds	r7, #28
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	40010000 	.word	0x40010000
 8006ca4:	40010400 	.word	0x40010400

08006ca8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b087      	sub	sp, #28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 0303 	bic.w	r3, r3, #3
 8006cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	021b      	lsls	r3, r3, #8
 8006cf8:	697a      	ldr	r2, [r7, #20]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a21      	ldr	r2, [pc, #132]	; (8006d88 <TIM_OC3_SetConfig+0xe0>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d003      	beq.n	8006d0e <TIM_OC3_SetConfig+0x66>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a20      	ldr	r2, [pc, #128]	; (8006d8c <TIM_OC3_SetConfig+0xe4>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d10d      	bne.n	8006d2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	021b      	lsls	r3, r3, #8
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a16      	ldr	r2, [pc, #88]	; (8006d88 <TIM_OC3_SetConfig+0xe0>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d003      	beq.n	8006d3a <TIM_OC3_SetConfig+0x92>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a15      	ldr	r2, [pc, #84]	; (8006d8c <TIM_OC3_SetConfig+0xe4>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d113      	bne.n	8006d62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	011b      	lsls	r3, r3, #4
 8006d50:	693a      	ldr	r2, [r7, #16]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	011b      	lsls	r3, r3, #4
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	621a      	str	r2, [r3, #32]
}
 8006d7c:	bf00      	nop
 8006d7e:	371c      	adds	r7, #28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	40010000 	.word	0x40010000
 8006d8c:	40010400 	.word	0x40010400

08006d90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b087      	sub	sp, #28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	69db      	ldr	r3, [r3, #28]
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	021b      	lsls	r3, r3, #8
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	031b      	lsls	r3, r3, #12
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a12      	ldr	r2, [pc, #72]	; (8006e34 <TIM_OC4_SetConfig+0xa4>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d003      	beq.n	8006df8 <TIM_OC4_SetConfig+0x68>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a11      	ldr	r2, [pc, #68]	; (8006e38 <TIM_OC4_SetConfig+0xa8>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d109      	bne.n	8006e0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	019b      	lsls	r3, r3, #6
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	697a      	ldr	r2, [r7, #20]
 8006e10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	685a      	ldr	r2, [r3, #4]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	621a      	str	r2, [r3, #32]
}
 8006e26:	bf00      	nop
 8006e28:	371c      	adds	r7, #28
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	40010000 	.word	0x40010000
 8006e38:	40010400 	.word	0x40010400

08006e3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6a1b      	ldr	r3, [r3, #32]
 8006e4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	f023 0201 	bic.w	r2, r3, #1
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	011b      	lsls	r3, r3, #4
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f023 030a 	bic.w	r3, r3, #10
 8006e78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	621a      	str	r2, [r3, #32]
}
 8006e8e:	bf00      	nop
 8006e90:	371c      	adds	r7, #28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b087      	sub	sp, #28
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	60f8      	str	r0, [r7, #12]
 8006ea2:	60b9      	str	r1, [r7, #8]
 8006ea4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	f023 0210 	bic.w	r2, r3, #16
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ec4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	031b      	lsls	r3, r3, #12
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ed6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	011b      	lsls	r3, r3, #4
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	621a      	str	r2, [r3, #32]
}
 8006eee:	bf00      	nop
 8006ef0:	371c      	adds	r7, #28
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b085      	sub	sp, #20
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
 8006f02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	f043 0307 	orr.w	r3, r3, #7
 8006f1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	609a      	str	r2, [r3, #8]
}
 8006f24:	bf00      	nop
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	021a      	lsls	r2, r3, #8
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	431a      	orrs	r2, r3
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	609a      	str	r2, [r3, #8]
}
 8006f64:	bf00      	nop
 8006f66:	371c      	adds	r7, #28
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d101      	bne.n	8006f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f84:	2302      	movs	r3, #2
 8006f86:	e05a      	b.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a21      	ldr	r2, [pc, #132]	; (800704c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d022      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fd4:	d01d      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a1d      	ldr	r2, [pc, #116]	; (8007050 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d018      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a1b      	ldr	r2, [pc, #108]	; (8007054 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d013      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a1a      	ldr	r2, [pc, #104]	; (8007058 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d00e      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a18      	ldr	r2, [pc, #96]	; (800705c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d009      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a17      	ldr	r2, [pc, #92]	; (8007060 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d004      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a15      	ldr	r2, [pc, #84]	; (8007064 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d10c      	bne.n	800702c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007018:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	4313      	orrs	r3, r2
 8007022:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	40010000 	.word	0x40010000
 8007050:	40000400 	.word	0x40000400
 8007054:	40000800 	.word	0x40000800
 8007058:	40000c00 	.word	0x40000c00
 800705c:	40010400 	.word	0x40010400
 8007060:	40014000 	.word	0x40014000
 8007064:	40001800 	.word	0x40001800

08007068 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007090:	b084      	sub	sp, #16
 8007092:	b580      	push	{r7, lr}
 8007094:	b084      	sub	sp, #16
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
 800709a:	f107 001c 	add.w	r0, r7, #28
 800709e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80070a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d122      	bne.n	80070ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80070bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80070d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d105      	bne.n	80070e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f94a 	bl	800737c <USB_CoreReset>
 80070e8:	4603      	mov	r3, r0
 80070ea:	73fb      	strb	r3, [r7, #15]
 80070ec:	e01a      	b.n	8007124 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f93e 	bl	800737c <USB_CoreReset>
 8007100:	4603      	mov	r3, r0
 8007102:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007106:	2b00      	cmp	r3, #0
 8007108:	d106      	bne.n	8007118 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	639a      	str	r2, [r3, #56]	; 0x38
 8007116:	e005      	b.n	8007124 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007126:	2b01      	cmp	r3, #1
 8007128:	d10b      	bne.n	8007142 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f043 0206 	orr.w	r2, r3, #6
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f043 0220 	orr.w	r2, r3, #32
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007142:	7bfb      	ldrb	r3, [r7, #15]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800714e:	b004      	add	sp, #16
 8007150:	4770      	bx	lr

08007152 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007152:	b480      	push	{r7}
 8007154:	b083      	sub	sp, #12
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f043 0201 	orr.w	r2, r3, #1
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f023 0201 	bic.w	r2, r3, #1
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b082      	sub	sp, #8
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	460b      	mov	r3, r1
 80071a0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80071ae:	78fb      	ldrb	r3, [r7, #3]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d106      	bne.n	80071c2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	60da      	str	r2, [r3, #12]
 80071c0:	e00b      	b.n	80071da <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80071c2:	78fb      	ldrb	r3, [r7, #3]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d106      	bne.n	80071d6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	60da      	str	r2, [r3, #12]
 80071d4:	e001      	b.n	80071da <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e003      	b.n	80071e2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80071da:	2032      	movs	r0, #50	; 0x32
 80071dc:	f7fb faba 	bl	8002754 <HAL_Delay>

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
	...

080071ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80071f6:	2300      	movs	r3, #0
 80071f8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	019b      	lsls	r3, r3, #6
 80071fe:	f043 0220 	orr.w	r2, r3, #32
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	3301      	adds	r3, #1
 800720a:	60fb      	str	r3, [r7, #12]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4a09      	ldr	r2, [pc, #36]	; (8007234 <USB_FlushTxFifo+0x48>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d901      	bls.n	8007218 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e006      	b.n	8007226 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	f003 0320 	and.w	r3, r3, #32
 8007220:	2b20      	cmp	r3, #32
 8007222:	d0f0      	beq.n	8007206 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	00030d40 	.word	0x00030d40

08007238 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007240:	2300      	movs	r3, #0
 8007242:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2210      	movs	r2, #16
 8007248:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	3301      	adds	r3, #1
 800724e:	60fb      	str	r3, [r7, #12]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	4a09      	ldr	r2, [pc, #36]	; (8007278 <USB_FlushRxFifo+0x40>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d901      	bls.n	800725c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e006      	b.n	800726a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	f003 0310 	and.w	r3, r3, #16
 8007264:	2b10      	cmp	r3, #16
 8007266:	d0f0      	beq.n	800724a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3714      	adds	r7, #20
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	00030d40 	.word	0x00030d40

0800727c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800727c:	b480      	push	{r7}
 800727e:	b089      	sub	sp, #36	; 0x24
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	4611      	mov	r1, r2
 8007288:	461a      	mov	r2, r3
 800728a:	460b      	mov	r3, r1
 800728c:	71fb      	strb	r3, [r7, #7]
 800728e:	4613      	mov	r3, r2
 8007290:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800729a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d11a      	bne.n	80072d8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80072a2:	88bb      	ldrh	r3, [r7, #4]
 80072a4:	3303      	adds	r3, #3
 80072a6:	089b      	lsrs	r3, r3, #2
 80072a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80072aa:	2300      	movs	r3, #0
 80072ac:	61bb      	str	r3, [r7, #24]
 80072ae:	e00f      	b.n	80072d0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80072b0:	79fb      	ldrb	r3, [r7, #7]
 80072b2:	031a      	lsls	r2, r3, #12
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072bc:	461a      	mov	r2, r3
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	3304      	adds	r3, #4
 80072c8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	3301      	adds	r3, #1
 80072ce:	61bb      	str	r3, [r7, #24]
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d3eb      	bcc.n	80072b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3724      	adds	r7, #36	; 0x24
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80072e6:	b480      	push	{r7}
 80072e8:	b089      	sub	sp, #36	; 0x24
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	60f8      	str	r0, [r7, #12]
 80072ee:	60b9      	str	r1, [r7, #8]
 80072f0:	4613      	mov	r3, r2
 80072f2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80072fc:	88fb      	ldrh	r3, [r7, #6]
 80072fe:	3303      	adds	r3, #3
 8007300:	089b      	lsrs	r3, r3, #2
 8007302:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007304:	2300      	movs	r3, #0
 8007306:	61bb      	str	r3, [r7, #24]
 8007308:	e00b      	b.n	8007322 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	601a      	str	r2, [r3, #0]
    pDest++;
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	3304      	adds	r3, #4
 800731a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	3301      	adds	r3, #1
 8007320:	61bb      	str	r3, [r7, #24]
 8007322:	69ba      	ldr	r2, [r7, #24]
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	429a      	cmp	r2, r3
 8007328:	d3ef      	bcc.n	800730a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800732a:	69fb      	ldr	r3, [r7, #28]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3724      	adds	r7, #36	; 0x24
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	4013      	ands	r3, r2
 800734e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007350:	68fb      	ldr	r3, [r7, #12]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800735e:	b480      	push	{r7}
 8007360:	b083      	sub	sp, #12
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	f003 0301 	and.w	r3, r3, #1
}
 800736e:	4618      	mov	r0, r3
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
	...

0800737c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007384:	2300      	movs	r3, #0
 8007386:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	3301      	adds	r3, #1
 800738c:	60fb      	str	r3, [r7, #12]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	4a13      	ldr	r2, [pc, #76]	; (80073e0 <USB_CoreReset+0x64>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d901      	bls.n	800739a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e01b      	b.n	80073d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	daf2      	bge.n	8007388 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80073a2:	2300      	movs	r3, #0
 80073a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	f043 0201 	orr.w	r2, r3, #1
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3301      	adds	r3, #1
 80073b6:	60fb      	str	r3, [r7, #12]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	4a09      	ldr	r2, [pc, #36]	; (80073e0 <USB_CoreReset+0x64>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d901      	bls.n	80073c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e006      	b.n	80073d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d0f0      	beq.n	80073b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3714      	adds	r7, #20
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	00030d40 	.word	0x00030d40

080073e4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073e4:	b084      	sub	sp, #16
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b084      	sub	sp, #16
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	f107 001c 	add.w	r0, r7, #28
 80073f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007400:	461a      	mov	r2, r3
 8007402:	2300      	movs	r3, #0
 8007404:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007416:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007422:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800742e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007432:	2b00      	cmp	r3, #0
 8007434:	d018      	beq.n	8007468 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	2b01      	cmp	r3, #1
 800743a:	d10a      	bne.n	8007452 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800744a:	f043 0304 	orr.w	r3, r3, #4
 800744e:	6013      	str	r3, [r2, #0]
 8007450:	e014      	b.n	800747c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007460:	f023 0304 	bic.w	r3, r3, #4
 8007464:	6013      	str	r3, [r2, #0]
 8007466:	e009      	b.n	800747c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007476:	f023 0304 	bic.w	r3, r3, #4
 800747a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800747c:	2110      	movs	r1, #16
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7ff feb4 	bl	80071ec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f7ff fed7 	bl	8007238 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800748a:	2300      	movs	r3, #0
 800748c:	60fb      	str	r3, [r7, #12]
 800748e:	e015      	b.n	80074bc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	4413      	add	r3, r2
 8007498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800749c:	461a      	mov	r2, r3
 800749e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074a2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074b0:	461a      	mov	r2, r3
 80074b2:	2300      	movs	r3, #0
 80074b4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	3301      	adds	r3, #1
 80074ba:	60fb      	str	r3, [r7, #12]
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d3e5      	bcc.n	8007490 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80074c4:	2101      	movs	r1, #1
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f8ac 	bl	8007624 <USB_DriveVbus>

  HAL_Delay(200U);
 80074cc:	20c8      	movs	r0, #200	; 0xc8
 80074ce:	f7fb f941 	bl	8002754 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074de:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00b      	beq.n	8007504 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074f2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a14      	ldr	r2, [pc, #80]	; (8007548 <USB_HostInit+0x164>)
 80074f8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a13      	ldr	r2, [pc, #76]	; (800754c <USB_HostInit+0x168>)
 80074fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007502:	e009      	b.n	8007518 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2280      	movs	r2, #128	; 0x80
 8007508:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a10      	ldr	r2, [pc, #64]	; (8007550 <USB_HostInit+0x16c>)
 800750e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a10      	ldr	r2, [pc, #64]	; (8007554 <USB_HostInit+0x170>)
 8007514:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751a:	2b00      	cmp	r3, #0
 800751c:	d105      	bne.n	800752a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	f043 0210 	orr.w	r2, r3, #16
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	699a      	ldr	r2, [r3, #24]
 800752e:	4b0a      	ldr	r3, [pc, #40]	; (8007558 <USB_HostInit+0x174>)
 8007530:	4313      	orrs	r3, r2
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007542:	b004      	add	sp, #16
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	01000200 	.word	0x01000200
 800754c:	00e00300 	.word	0x00e00300
 8007550:	00600080 	.word	0x00600080
 8007554:	004000e0 	.word	0x004000e0
 8007558:	a3200008 	.word	0xa3200008

0800755c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	460b      	mov	r3, r1
 8007566:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800757a:	f023 0303 	bic.w	r3, r3, #3
 800757e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	78fb      	ldrb	r3, [r7, #3]
 800758a:	f003 0303 	and.w	r3, r3, #3
 800758e:	68f9      	ldr	r1, [r7, #12]
 8007590:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007594:	4313      	orrs	r3, r2
 8007596:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007598:	78fb      	ldrb	r3, [r7, #3]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d107      	bne.n	80075ae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075a4:	461a      	mov	r2, r3
 80075a6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80075aa:	6053      	str	r3, [r2, #4]
 80075ac:	e009      	b.n	80075c2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80075ae:	78fb      	ldrb	r3, [r7, #3]
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d106      	bne.n	80075c2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075ba:	461a      	mov	r2, r3
 80075bc:	f241 7370 	movw	r3, #6000	; 0x1770
 80075c0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3714      	adds	r7, #20
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80075dc:	2300      	movs	r3, #0
 80075de:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80075f0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80075fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075fe:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007600:	2064      	movs	r0, #100	; 0x64
 8007602:	f7fb f8a7 	bl	8002754 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800760e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007612:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007614:	200a      	movs	r0, #10
 8007616:	f7fb f89d 	bl	8002754 <HAL_Delay>

  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	460b      	mov	r3, r1
 800762e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007648:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d109      	bne.n	8007668 <USB_DriveVbus+0x44>
 8007654:	78fb      	ldrb	r3, [r7, #3]
 8007656:	2b01      	cmp	r3, #1
 8007658:	d106      	bne.n	8007668 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007662:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007666:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800766e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007672:	d109      	bne.n	8007688 <USB_DriveVbus+0x64>
 8007674:	78fb      	ldrb	r3, [r7, #3]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d106      	bne.n	8007688 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007682:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007686:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007696:	b480      	push	{r7}
 8007698:	b085      	sub	sp, #20
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80076a2:	2300      	movs	r3, #0
 80076a4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	0c5b      	lsrs	r3, r3, #17
 80076b4:	f003 0303 	and.w	r3, r3, #3
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	b29b      	uxth	r3, r3
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3714      	adds	r7, #20
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
	...

080076e8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b088      	sub	sp, #32
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	4608      	mov	r0, r1
 80076f2:	4611      	mov	r1, r2
 80076f4:	461a      	mov	r2, r3
 80076f6:	4603      	mov	r3, r0
 80076f8:	70fb      	strb	r3, [r7, #3]
 80076fa:	460b      	mov	r3, r1
 80076fc:	70bb      	strb	r3, [r7, #2]
 80076fe:	4613      	mov	r3, r2
 8007700:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800770a:	78fb      	ldrb	r3, [r7, #3]
 800770c:	015a      	lsls	r2, r3, #5
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	4413      	add	r3, r2
 8007712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007716:	461a      	mov	r2, r3
 8007718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800771c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800771e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007722:	2b03      	cmp	r3, #3
 8007724:	d87e      	bhi.n	8007824 <USB_HC_Init+0x13c>
 8007726:	a201      	add	r2, pc, #4	; (adr r2, 800772c <USB_HC_Init+0x44>)
 8007728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772c:	0800773d 	.word	0x0800773d
 8007730:	080077e7 	.word	0x080077e7
 8007734:	0800773d 	.word	0x0800773d
 8007738:	080077a9 	.word	0x080077a9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800773c:	78fb      	ldrb	r3, [r7, #3]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	4413      	add	r3, r2
 8007744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007748:	461a      	mov	r2, r3
 800774a:	f240 439d 	movw	r3, #1181	; 0x49d
 800774e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007750:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007754:	2b00      	cmp	r3, #0
 8007756:	da10      	bge.n	800777a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007758:	78fb      	ldrb	r3, [r7, #3]
 800775a:	015a      	lsls	r2, r3, #5
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	4413      	add	r3, r2
 8007760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	78fa      	ldrb	r2, [r7, #3]
 8007768:	0151      	lsls	r1, r2, #5
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	440a      	add	r2, r1
 800776e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007776:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007778:	e057      	b.n	800782a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800777e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007782:	2b00      	cmp	r3, #0
 8007784:	d051      	beq.n	800782a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007786:	78fb      	ldrb	r3, [r7, #3]
 8007788:	015a      	lsls	r2, r3, #5
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	4413      	add	r3, r2
 800778e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	78fa      	ldrb	r2, [r7, #3]
 8007796:	0151      	lsls	r1, r2, #5
 8007798:	693a      	ldr	r2, [r7, #16]
 800779a:	440a      	add	r2, r1
 800779c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077a0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80077a4:	60d3      	str	r3, [r2, #12]
      break;
 80077a6:	e040      	b.n	800782a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80077a8:	78fb      	ldrb	r3, [r7, #3]
 80077aa:	015a      	lsls	r2, r3, #5
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	4413      	add	r3, r2
 80077b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077b4:	461a      	mov	r2, r3
 80077b6:	f240 639d 	movw	r3, #1693	; 0x69d
 80077ba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80077bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	da34      	bge.n	800782e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80077c4:	78fb      	ldrb	r3, [r7, #3]
 80077c6:	015a      	lsls	r2, r3, #5
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	4413      	add	r3, r2
 80077cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	78fa      	ldrb	r2, [r7, #3]
 80077d4:	0151      	lsls	r1, r2, #5
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	440a      	add	r2, r1
 80077da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077e2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80077e4:	e023      	b.n	800782e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80077e6:	78fb      	ldrb	r3, [r7, #3]
 80077e8:	015a      	lsls	r2, r3, #5
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	4413      	add	r3, r2
 80077ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077f2:	461a      	mov	r2, r3
 80077f4:	f240 2325 	movw	r3, #549	; 0x225
 80077f8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80077fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	da17      	bge.n	8007832 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007802:	78fb      	ldrb	r3, [r7, #3]
 8007804:	015a      	lsls	r2, r3, #5
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	4413      	add	r3, r2
 800780a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	78fa      	ldrb	r2, [r7, #3]
 8007812:	0151      	lsls	r1, r2, #5
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	440a      	add	r2, r1
 8007818:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800781c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007820:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007822:	e006      	b.n	8007832 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	77fb      	strb	r3, [r7, #31]
      break;
 8007828:	e004      	b.n	8007834 <USB_HC_Init+0x14c>
      break;
 800782a:	bf00      	nop
 800782c:	e002      	b.n	8007834 <USB_HC_Init+0x14c>
      break;
 800782e:	bf00      	nop
 8007830:	e000      	b.n	8007834 <USB_HC_Init+0x14c>
      break;
 8007832:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800783a:	699a      	ldr	r2, [r3, #24]
 800783c:	78fb      	ldrb	r3, [r7, #3]
 800783e:	f003 030f 	and.w	r3, r3, #15
 8007842:	2101      	movs	r1, #1
 8007844:	fa01 f303 	lsl.w	r3, r1, r3
 8007848:	6939      	ldr	r1, [r7, #16]
 800784a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800784e:	4313      	orrs	r3, r2
 8007850:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800785e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007862:	2b00      	cmp	r3, #0
 8007864:	da03      	bge.n	800786e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800786a:	61bb      	str	r3, [r7, #24]
 800786c:	e001      	b.n	8007872 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800786e:	2300      	movs	r3, #0
 8007870:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7ff ff0f 	bl	8007696 <USB_GetHostSpeed>
 8007878:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800787a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800787e:	2b02      	cmp	r3, #2
 8007880:	d106      	bne.n	8007890 <USB_HC_Init+0x1a8>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2b02      	cmp	r3, #2
 8007886:	d003      	beq.n	8007890 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007888:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800788c:	617b      	str	r3, [r7, #20]
 800788e:	e001      	b.n	8007894 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007890:	2300      	movs	r3, #0
 8007892:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007894:	787b      	ldrb	r3, [r7, #1]
 8007896:	059b      	lsls	r3, r3, #22
 8007898:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800789c:	78bb      	ldrb	r3, [r7, #2]
 800789e:	02db      	lsls	r3, r3, #11
 80078a0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80078a4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80078a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80078aa:	049b      	lsls	r3, r3, #18
 80078ac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80078b0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80078b2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80078b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80078b8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80078be:	78fb      	ldrb	r3, [r7, #3]
 80078c0:	0159      	lsls	r1, r3, #5
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	440b      	add	r3, r1
 80078c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ca:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80078d0:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80078d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80078d6:	2b03      	cmp	r3, #3
 80078d8:	d10f      	bne.n	80078fa <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80078da:	78fb      	ldrb	r3, [r7, #3]
 80078dc:	015a      	lsls	r2, r3, #5
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	4413      	add	r3, r2
 80078e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	78fa      	ldrb	r2, [r7, #3]
 80078ea:	0151      	lsls	r1, r2, #5
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	440a      	add	r2, r1
 80078f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80078f8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80078fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3720      	adds	r7, #32
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b08c      	sub	sp, #48	; 0x30
 8007908:	af02      	add	r7, sp, #8
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	4613      	mov	r3, r2
 8007910:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	785b      	ldrb	r3, [r3, #1]
 800791a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800791c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007920:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800792a:	2b00      	cmp	r3, #0
 800792c:	d02d      	beq.n	800798a <USB_HC_StartXfer+0x86>
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	791b      	ldrb	r3, [r3, #4]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d129      	bne.n	800798a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007936:	79fb      	ldrb	r3, [r7, #7]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d117      	bne.n	800796c <USB_HC_StartXfer+0x68>
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	79db      	ldrb	r3, [r3, #7]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d003      	beq.n	800794c <USB_HC_StartXfer+0x48>
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	79db      	ldrb	r3, [r3, #7]
 8007948:	2b02      	cmp	r3, #2
 800794a:	d10f      	bne.n	800796c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	015a      	lsls	r2, r3, #5
 8007950:	6a3b      	ldr	r3, [r7, #32]
 8007952:	4413      	add	r3, r2
 8007954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	69fa      	ldr	r2, [r7, #28]
 800795c:	0151      	lsls	r1, r2, #5
 800795e:	6a3a      	ldr	r2, [r7, #32]
 8007960:	440a      	add	r2, r1
 8007962:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800796a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800796c:	79fb      	ldrb	r3, [r7, #7]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10b      	bne.n	800798a <USB_HC_StartXfer+0x86>
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	795b      	ldrb	r3, [r3, #5]
 8007976:	2b01      	cmp	r3, #1
 8007978:	d107      	bne.n	800798a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	785b      	ldrb	r3, [r3, #1]
 800797e:	4619      	mov	r1, r3
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 fa2f 	bl	8007de4 <USB_DoPing>
      return HAL_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	e0f8      	b.n	8007b7c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d018      	beq.n	80079c4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	8912      	ldrh	r2, [r2, #8]
 800799a:	4413      	add	r3, r2
 800799c:	3b01      	subs	r3, #1
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	8912      	ldrh	r2, [r2, #8]
 80079a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80079a6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80079a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80079aa:	8b7b      	ldrh	r3, [r7, #26]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d90b      	bls.n	80079c8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80079b0:	8b7b      	ldrh	r3, [r7, #26]
 80079b2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80079b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	8912      	ldrh	r2, [r2, #8]
 80079ba:	fb02 f203 	mul.w	r2, r2, r3
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	611a      	str	r2, [r3, #16]
 80079c2:	e001      	b.n	80079c8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80079c4:	2301      	movs	r3, #1
 80079c6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	78db      	ldrb	r3, [r3, #3]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d007      	beq.n	80079e0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80079d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	8912      	ldrh	r2, [r2, #8]
 80079d6:	fb02 f203 	mul.w	r2, r2, r3
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	611a      	str	r2, [r3, #16]
 80079de:	e003      	b.n	80079e8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	695a      	ldr	r2, [r3, #20]
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80079f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80079f2:	04d9      	lsls	r1, r3, #19
 80079f4:	4b63      	ldr	r3, [pc, #396]	; (8007b84 <USB_HC_StartXfer+0x280>)
 80079f6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80079f8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	7a9b      	ldrb	r3, [r3, #10]
 80079fe:	075b      	lsls	r3, r3, #29
 8007a00:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007a04:	69f9      	ldr	r1, [r7, #28]
 8007a06:	0148      	lsls	r0, r1, #5
 8007a08:	6a39      	ldr	r1, [r7, #32]
 8007a0a:	4401      	add	r1, r0
 8007a0c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007a10:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007a12:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007a14:	79fb      	ldrb	r3, [r7, #7]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d009      	beq.n	8007a2e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	68d9      	ldr	r1, [r3, #12]
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	015a      	lsls	r2, r3, #5
 8007a22:	6a3b      	ldr	r3, [r7, #32]
 8007a24:	4413      	add	r3, r2
 8007a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a2a:	460a      	mov	r2, r1
 8007a2c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007a2e:	6a3b      	ldr	r3, [r7, #32]
 8007a30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f003 0301 	and.w	r3, r3, #1
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	bf0c      	ite	eq
 8007a3e:	2301      	moveq	r3, #1
 8007a40:	2300      	movne	r3, #0
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	015a      	lsls	r2, r3, #5
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	69fa      	ldr	r2, [r7, #28]
 8007a56:	0151      	lsls	r1, r2, #5
 8007a58:	6a3a      	ldr	r2, [r7, #32]
 8007a5a:	440a      	add	r2, r1
 8007a5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a60:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a64:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	015a      	lsls	r2, r3, #5
 8007a6a:	6a3b      	ldr	r3, [r7, #32]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	7e7b      	ldrb	r3, [r7, #25]
 8007a76:	075b      	lsls	r3, r3, #29
 8007a78:	69f9      	ldr	r1, [r7, #28]
 8007a7a:	0148      	lsls	r0, r1, #5
 8007a7c:	6a39      	ldr	r1, [r7, #32]
 8007a7e:	4401      	add	r1, r0
 8007a80:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007a84:	4313      	orrs	r3, r2
 8007a86:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	015a      	lsls	r2, r3, #5
 8007a8c:	6a3b      	ldr	r3, [r7, #32]
 8007a8e:	4413      	add	r3, r2
 8007a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a9e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	78db      	ldrb	r3, [r3, #3]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d004      	beq.n	8007ab2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aae:	613b      	str	r3, [r7, #16]
 8007ab0:	e003      	b.n	8007aba <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ab8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ac0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	015a      	lsls	r2, r3, #5
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	4413      	add	r3, r2
 8007aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ace:	461a      	mov	r2, r3
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007ad4:	79fb      	ldrb	r3, [r7, #7]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d001      	beq.n	8007ade <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007ada:	2300      	movs	r3, #0
 8007adc:	e04e      	b.n	8007b7c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	78db      	ldrb	r3, [r3, #3]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d149      	bne.n	8007b7a <USB_HC_StartXfer+0x276>
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d045      	beq.n	8007b7a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	79db      	ldrb	r3, [r3, #7]
 8007af2:	2b03      	cmp	r3, #3
 8007af4:	d830      	bhi.n	8007b58 <USB_HC_StartXfer+0x254>
 8007af6:	a201      	add	r2, pc, #4	; (adr r2, 8007afc <USB_HC_StartXfer+0x1f8>)
 8007af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afc:	08007b0d 	.word	0x08007b0d
 8007b00:	08007b31 	.word	0x08007b31
 8007b04:	08007b0d 	.word	0x08007b0d
 8007b08:	08007b31 	.word	0x08007b31
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	695b      	ldr	r3, [r3, #20]
 8007b10:	3303      	adds	r3, #3
 8007b12:	089b      	lsrs	r3, r3, #2
 8007b14:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007b16:	8afa      	ldrh	r2, [r7, #22]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d91c      	bls.n	8007b5c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	f043 0220 	orr.w	r2, r3, #32
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	619a      	str	r2, [r3, #24]
        }
        break;
 8007b2e:	e015      	b.n	8007b5c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	3303      	adds	r3, #3
 8007b36:	089b      	lsrs	r3, r3, #2
 8007b38:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007b3a:	8afa      	ldrh	r2, [r7, #22]
 8007b3c:	6a3b      	ldr	r3, [r7, #32]
 8007b3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d90a      	bls.n	8007b60 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	619a      	str	r2, [r3, #24]
        }
        break;
 8007b56:	e003      	b.n	8007b60 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007b58:	bf00      	nop
 8007b5a:	e002      	b.n	8007b62 <USB_HC_StartXfer+0x25e>
        break;
 8007b5c:	bf00      	nop
 8007b5e:	e000      	b.n	8007b62 <USB_HC_StartXfer+0x25e>
        break;
 8007b60:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	68d9      	ldr	r1, [r3, #12]
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	785a      	ldrb	r2, [r3, #1]
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	2000      	movs	r0, #0
 8007b72:	9000      	str	r0, [sp, #0]
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f7ff fb81 	bl	800727c <USB_WritePacket>
  }

  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3728      	adds	r7, #40	; 0x28
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	1ff80000 	.word	0x1ff80000

08007b88 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b9a:	695b      	ldr	r3, [r3, #20]
 8007b9c:	b29b      	uxth	r3, r3
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b089      	sub	sp, #36	; 0x24
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8007bba:	78fb      	ldrb	r3, [r7, #3]
 8007bbc:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	015a      	lsls	r2, r3, #5
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	4413      	add	r3, r2
 8007bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	0c9b      	lsrs	r3, r3, #18
 8007bd2:	f003 0303 	and.w	r3, r3, #3
 8007bd6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	015a      	lsls	r2, r3, #5
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	4413      	add	r3, r2
 8007be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	0fdb      	lsrs	r3, r3, #31
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f003 0320 	and.w	r3, r3, #32
 8007bf6:	2b20      	cmp	r3, #32
 8007bf8:	d104      	bne.n	8007c04 <USB_HC_Halt+0x5a>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d101      	bne.n	8007c04 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007c00:	2300      	movs	r3, #0
 8007c02:	e0e8      	b.n	8007dd6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d002      	beq.n	8007c10 <USB_HC_Halt+0x66>
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d173      	bne.n	8007cf8 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	015a      	lsls	r2, r3, #5
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	4413      	add	r3, r2
 8007c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	697a      	ldr	r2, [r7, #20]
 8007c20:	0151      	lsls	r1, r2, #5
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	440a      	add	r2, r1
 8007c26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c2e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	f003 0320 	and.w	r3, r3, #32
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f040 80cb 	bne.w	8007dd4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d143      	bne.n	8007cd2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	0151      	lsls	r1, r2, #5
 8007c5c:	69ba      	ldr	r2, [r7, #24]
 8007c5e:	440a      	add	r2, r1
 8007c60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c68:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	015a      	lsls	r2, r3, #5
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	4413      	add	r3, r2
 8007c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	0151      	lsls	r1, r2, #5
 8007c7c:	69ba      	ldr	r2, [r7, #24]
 8007c7e:	440a      	add	r2, r1
 8007c80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c88:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	015a      	lsls	r2, r3, #5
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	4413      	add	r3, r2
 8007c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	697a      	ldr	r2, [r7, #20]
 8007c9a:	0151      	lsls	r1, r2, #5
 8007c9c:	69ba      	ldr	r2, [r7, #24]
 8007c9e:	440a      	add	r2, r1
 8007ca0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ca4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ca8:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	3301      	adds	r3, #1
 8007cae:	61fb      	str	r3, [r7, #28]
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cb6:	d81d      	bhi.n	8007cf4 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	015a      	lsls	r2, r3, #5
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cce:	d0ec      	beq.n	8007caa <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007cd0:	e080      	b.n	8007dd4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	015a      	lsls	r2, r3, #5
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	4413      	add	r3, r2
 8007cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	0151      	lsls	r1, r2, #5
 8007ce4:	69ba      	ldr	r2, [r7, #24]
 8007ce6:	440a      	add	r2, r1
 8007ce8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007cf0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007cf2:	e06f      	b.n	8007dd4 <USB_HC_Halt+0x22a>
            break;
 8007cf4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007cf6:	e06d      	b.n	8007dd4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	015a      	lsls	r2, r3, #5
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	4413      	add	r3, r2
 8007d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	0151      	lsls	r1, r2, #5
 8007d0a:	69ba      	ldr	r2, [r7, #24]
 8007d0c:	440a      	add	r2, r1
 8007d0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d16:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d143      	bne.n	8007db0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	015a      	lsls	r2, r3, #5
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	4413      	add	r3, r2
 8007d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	0151      	lsls	r1, r2, #5
 8007d3a:	69ba      	ldr	r2, [r7, #24]
 8007d3c:	440a      	add	r2, r1
 8007d3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d46:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	697a      	ldr	r2, [r7, #20]
 8007d58:	0151      	lsls	r1, r2, #5
 8007d5a:	69ba      	ldr	r2, [r7, #24]
 8007d5c:	440a      	add	r2, r1
 8007d5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d66:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	015a      	lsls	r2, r3, #5
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	4413      	add	r3, r2
 8007d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	0151      	lsls	r1, r2, #5
 8007d7a:	69ba      	ldr	r2, [r7, #24]
 8007d7c:	440a      	add	r2, r1
 8007d7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d86:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	61fb      	str	r3, [r7, #28]
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d94:	d81d      	bhi.n	8007dd2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	015a      	lsls	r2, r3, #5
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007da8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dac:	d0ec      	beq.n	8007d88 <USB_HC_Halt+0x1de>
 8007dae:	e011      	b.n	8007dd4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	0151      	lsls	r1, r2, #5
 8007dc2:	69ba      	ldr	r2, [r7, #24]
 8007dc4:	440a      	add	r2, r1
 8007dc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007dce:	6013      	str	r3, [r2, #0]
 8007dd0:	e000      	b.n	8007dd4 <USB_HC_Halt+0x22a>
          break;
 8007dd2:	bf00      	nop
    }
  }

  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3724      	adds	r7, #36	; 0x24
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
	...

08007de4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b087      	sub	sp, #28
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	460b      	mov	r3, r1
 8007dee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007df4:	78fb      	ldrb	r3, [r7, #3]
 8007df6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	04da      	lsls	r2, r3, #19
 8007e00:	4b15      	ldr	r3, [pc, #84]	; (8007e58 <USB_DoPing+0x74>)
 8007e02:	4013      	ands	r3, r2
 8007e04:	693a      	ldr	r2, [r7, #16]
 8007e06:	0151      	lsls	r1, r2, #5
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	440a      	add	r2, r1
 8007e0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e14:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	015a      	lsls	r2, r3, #5
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e2c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e34:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	015a      	lsls	r2, r3, #5
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e42:	461a      	mov	r2, r3
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	371c      	adds	r7, #28
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	1ff80000 	.word	0x1ff80000

08007e5c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b086      	sub	sp, #24
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f7ff f981 	bl	8007174 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007e72:	2110      	movs	r1, #16
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f7ff f9b9 	bl	80071ec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7ff f9dc 	bl	8007238 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007e80:	2300      	movs	r3, #0
 8007e82:	613b      	str	r3, [r7, #16]
 8007e84:	e01f      	b.n	8007ec6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	015a      	lsls	r2, r3, #5
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e9c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ea4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007eac:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	015a      	lsls	r2, r3, #5
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eba:	461a      	mov	r2, r3
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	613b      	str	r3, [r7, #16]
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	2b0f      	cmp	r3, #15
 8007eca:	d9dc      	bls.n	8007e86 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007ecc:	2300      	movs	r3, #0
 8007ece:	613b      	str	r3, [r7, #16]
 8007ed0:	e034      	b.n	8007f3c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	015a      	lsls	r2, r3, #5
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	4413      	add	r3, r2
 8007eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ee8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ef0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ef8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	015a      	lsls	r2, r3, #5
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f06:	461a      	mov	r2, r3
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	617b      	str	r3, [r7, #20]
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f18:	d80c      	bhi.n	8007f34 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	015a      	lsls	r2, r3, #5
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	4413      	add	r3, r2
 8007f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f30:	d0ec      	beq.n	8007f0c <USB_StopHost+0xb0>
 8007f32:	e000      	b.n	8007f36 <USB_StopHost+0xda>
        break;
 8007f34:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	613b      	str	r3, [r7, #16]
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	2b0f      	cmp	r3, #15
 8007f40:	d9c7      	bls.n	8007ed2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f48:	461a      	mov	r2, r3
 8007f4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f4e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f56:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f7ff f8fa 	bl	8007152 <USB_EnableGlobalInt>

  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3718      	adds	r7, #24
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007f68:	b590      	push	{r4, r7, lr}
 8007f6a:	b089      	sub	sp, #36	; 0x24
 8007f6c:	af04      	add	r7, sp, #16
 8007f6e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007f70:	2301      	movs	r3, #1
 8007f72:	2202      	movs	r2, #2
 8007f74:	2102      	movs	r1, #2
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fc66 	bl	8008848 <USBH_FindInterface>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
 8007f82:	2bff      	cmp	r3, #255	; 0xff
 8007f84:	d002      	beq.n	8007f8c <USBH_CDC_InterfaceInit+0x24>
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d901      	bls.n	8007f90 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	e13d      	b.n	800820c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
 8007f92:	4619      	mov	r1, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 fc3b 	bl	8008810 <USBH_SelectInterface>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007f9e:	7bbb      	ldrb	r3, [r7, #14]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d001      	beq.n	8007fa8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007fa4:	2302      	movs	r3, #2
 8007fa6:	e131      	b.n	800820c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007fae:	2050      	movs	r0, #80	; 0x50
 8007fb0:	f002 fa00 	bl	800a3b4 <malloc>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fbe:	69db      	ldr	r3, [r3, #28]
 8007fc0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d101      	bne.n	8007fcc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007fc8:	2302      	movs	r3, #2
 8007fca:	e11f      	b.n	800820c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007fcc:	2250      	movs	r2, #80	; 0x50
 8007fce:	2100      	movs	r1, #0
 8007fd0:	68b8      	ldr	r0, [r7, #8]
 8007fd2:	f002 f9ff 	bl	800a3d4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007fd6:	7bfb      	ldrb	r3, [r7, #15]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	211a      	movs	r1, #26
 8007fdc:	fb01 f303 	mul.w	r3, r1, r3
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	b25b      	sxtb	r3, r3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	da15      	bge.n	800801a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	211a      	movs	r1, #26
 8007ff4:	fb01 f303 	mul.w	r3, r1, r3
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007ffe:	781a      	ldrb	r2, [r3, #0]
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008004:	7bfb      	ldrb	r3, [r7, #15]
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	211a      	movs	r1, #26
 800800a:	fb01 f303 	mul.w	r3, r1, r3
 800800e:	4413      	add	r3, r2
 8008010:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008014:	881a      	ldrh	r2, [r3, #0]
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	785b      	ldrb	r3, [r3, #1]
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f001 fe32 	bl	8009c8a <USBH_AllocPipe>
 8008026:	4603      	mov	r3, r0
 8008028:	461a      	mov	r2, r3
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	7819      	ldrb	r1, [r3, #0]
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	7858      	ldrb	r0, [r3, #1]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008042:	68ba      	ldr	r2, [r7, #8]
 8008044:	8952      	ldrh	r2, [r2, #10]
 8008046:	9202      	str	r2, [sp, #8]
 8008048:	2203      	movs	r2, #3
 800804a:	9201      	str	r2, [sp, #4]
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	4623      	mov	r3, r4
 8008050:	4602      	mov	r2, r0
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f001 fdea 	bl	8009c2c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	2200      	movs	r2, #0
 800805e:	4619      	mov	r1, r3
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f002 f8f9 	bl	800a258 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008066:	2300      	movs	r3, #0
 8008068:	2200      	movs	r2, #0
 800806a:	210a      	movs	r1, #10
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fbeb 	bl	8008848 <USBH_FindInterface>
 8008072:	4603      	mov	r3, r0
 8008074:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008076:	7bfb      	ldrb	r3, [r7, #15]
 8008078:	2bff      	cmp	r3, #255	; 0xff
 800807a:	d002      	beq.n	8008082 <USBH_CDC_InterfaceInit+0x11a>
 800807c:	7bfb      	ldrb	r3, [r7, #15]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d901      	bls.n	8008086 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008082:	2302      	movs	r3, #2
 8008084:	e0c2      	b.n	800820c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008086:	7bfb      	ldrb	r3, [r7, #15]
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	211a      	movs	r1, #26
 800808c:	fb01 f303 	mul.w	r3, r1, r3
 8008090:	4413      	add	r3, r2
 8008092:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	b25b      	sxtb	r3, r3
 800809a:	2b00      	cmp	r3, #0
 800809c:	da16      	bge.n	80080cc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800809e:	7bfb      	ldrb	r3, [r7, #15]
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	211a      	movs	r1, #26
 80080a4:	fb01 f303 	mul.w	r3, r1, r3
 80080a8:	4413      	add	r3, r2
 80080aa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80080ae:	781a      	ldrb	r2, [r3, #0]
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	211a      	movs	r1, #26
 80080ba:	fb01 f303 	mul.w	r3, r1, r3
 80080be:	4413      	add	r3, r2
 80080c0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80080c4:	881a      	ldrh	r2, [r3, #0]
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	835a      	strh	r2, [r3, #26]
 80080ca:	e015      	b.n	80080f8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	211a      	movs	r1, #26
 80080d2:	fb01 f303 	mul.w	r3, r1, r3
 80080d6:	4413      	add	r3, r2
 80080d8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80080dc:	781a      	ldrb	r2, [r3, #0]
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	211a      	movs	r1, #26
 80080e8:	fb01 f303 	mul.w	r3, r1, r3
 80080ec:	4413      	add	r3, r2
 80080ee:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80080f2:	881a      	ldrh	r2, [r3, #0]
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80080f8:	7bfb      	ldrb	r3, [r7, #15]
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	211a      	movs	r1, #26
 80080fe:	fb01 f303 	mul.w	r3, r1, r3
 8008102:	4413      	add	r3, r2
 8008104:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	b25b      	sxtb	r3, r3
 800810c:	2b00      	cmp	r3, #0
 800810e:	da16      	bge.n	800813e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008110:	7bfb      	ldrb	r3, [r7, #15]
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	211a      	movs	r1, #26
 8008116:	fb01 f303 	mul.w	r3, r1, r3
 800811a:	4413      	add	r3, r2
 800811c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008120:	781a      	ldrb	r2, [r3, #0]
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008126:	7bfb      	ldrb	r3, [r7, #15]
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	211a      	movs	r1, #26
 800812c:	fb01 f303 	mul.w	r3, r1, r3
 8008130:	4413      	add	r3, r2
 8008132:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008136:	881a      	ldrh	r2, [r3, #0]
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	835a      	strh	r2, [r3, #26]
 800813c:	e015      	b.n	800816a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800813e:	7bfb      	ldrb	r3, [r7, #15]
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	211a      	movs	r1, #26
 8008144:	fb01 f303 	mul.w	r3, r1, r3
 8008148:	4413      	add	r3, r2
 800814a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800814e:	781a      	ldrb	r2, [r3, #0]
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008154:	7bfb      	ldrb	r3, [r7, #15]
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	211a      	movs	r1, #26
 800815a:	fb01 f303 	mul.w	r3, r1, r3
 800815e:	4413      	add	r3, r2
 8008160:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008164:	881a      	ldrh	r2, [r3, #0]
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	7b9b      	ldrb	r3, [r3, #14]
 800816e:	4619      	mov	r1, r3
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f001 fd8a 	bl	8009c8a <USBH_AllocPipe>
 8008176:	4603      	mov	r3, r0
 8008178:	461a      	mov	r2, r3
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	7bdb      	ldrb	r3, [r3, #15]
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f001 fd80 	bl	8009c8a <USBH_AllocPipe>
 800818a:	4603      	mov	r3, r0
 800818c:	461a      	mov	r2, r3
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	7b59      	ldrb	r1, [r3, #13]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	7b98      	ldrb	r0, [r3, #14]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	8b12      	ldrh	r2, [r2, #24]
 80081aa:	9202      	str	r2, [sp, #8]
 80081ac:	2202      	movs	r2, #2
 80081ae:	9201      	str	r2, [sp, #4]
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	4623      	mov	r3, r4
 80081b4:	4602      	mov	r2, r0
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f001 fd38 	bl	8009c2c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	7b19      	ldrb	r1, [r3, #12]
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	7bd8      	ldrb	r0, [r3, #15]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	8b52      	ldrh	r2, [r2, #26]
 80081d4:	9202      	str	r2, [sp, #8]
 80081d6:	2202      	movs	r2, #2
 80081d8:	9201      	str	r2, [sp, #4]
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	4623      	mov	r3, r4
 80081de:	4602      	mov	r2, r0
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f001 fd23 	bl	8009c2c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	7b5b      	ldrb	r3, [r3, #13]
 80081f2:	2200      	movs	r2, #0
 80081f4:	4619      	mov	r1, r3
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f002 f82e 	bl	800a258 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	7b1b      	ldrb	r3, [r3, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	4619      	mov	r1, r3
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f002 f827 	bl	800a258 <USBH_LL_SetToggle>

  return USBH_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3714      	adds	r7, #20
 8008210:	46bd      	mov	sp, r7
 8008212:	bd90      	pop	{r4, r7, pc}

08008214 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008222:	69db      	ldr	r3, [r3, #28]
 8008224:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00e      	beq.n	800824c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	4619      	mov	r1, r3
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f001 fd18 	bl	8009c6a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	4619      	mov	r1, r3
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f001 fd43 	bl	8009ccc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2200      	movs	r2, #0
 800824a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	7b1b      	ldrb	r3, [r3, #12]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00e      	beq.n	8008272 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	7b1b      	ldrb	r3, [r3, #12]
 8008258:	4619      	mov	r1, r3
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f001 fd05 	bl	8009c6a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	7b1b      	ldrb	r3, [r3, #12]
 8008264:	4619      	mov	r1, r3
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f001 fd30 	bl	8009ccc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	7b5b      	ldrb	r3, [r3, #13]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00e      	beq.n	8008298 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	7b5b      	ldrb	r3, [r3, #13]
 800827e:	4619      	mov	r1, r3
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f001 fcf2 	bl	8009c6a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	7b5b      	ldrb	r3, [r3, #13]
 800828a:	4619      	mov	r1, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f001 fd1d 	bl	8009ccc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800829e:	69db      	ldr	r3, [r3, #28]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00b      	beq.n	80082bc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082aa:	69db      	ldr	r3, [r3, #28]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f002 f889 	bl	800a3c4 <free>
    phost->pActiveClass->pData = 0U;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082b8:	2200      	movs	r2, #0
 80082ba:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b084      	sub	sp, #16
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082d4:	69db      	ldr	r3, [r3, #28]
 80082d6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	3340      	adds	r3, #64	; 0x40
 80082dc:	4619      	mov	r1, r3
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f8b1 	bl	8008446 <GetLineCoding>
 80082e4:	4603      	mov	r3, r0
 80082e6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80082e8:	7afb      	ldrb	r3, [r7, #11]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d105      	bne.n	80082fa <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082f4:	2102      	movs	r1, #2
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80082fa:	7afb      	ldrb	r3, [r7, #11]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800830c:	2301      	movs	r3, #1
 800830e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008310:	2300      	movs	r3, #0
 8008312:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800831a:	69db      	ldr	r3, [r3, #28]
 800831c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008324:	2b04      	cmp	r3, #4
 8008326:	d877      	bhi.n	8008418 <USBH_CDC_Process+0x114>
 8008328:	a201      	add	r2, pc, #4	; (adr r2, 8008330 <USBH_CDC_Process+0x2c>)
 800832a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832e:	bf00      	nop
 8008330:	08008345 	.word	0x08008345
 8008334:	0800834b 	.word	0x0800834b
 8008338:	0800837b 	.word	0x0800837b
 800833c:	080083ef 	.word	0x080083ef
 8008340:	080083fd 	.word	0x080083fd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008344:	2300      	movs	r3, #0
 8008346:	73fb      	strb	r3, [r7, #15]
      break;
 8008348:	e06d      	b.n	8008426 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800834e:	4619      	mov	r1, r3
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f897 	bl	8008484 <SetLineCoding>
 8008356:	4603      	mov	r3, r0
 8008358:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800835a:	7bbb      	ldrb	r3, [r7, #14]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d104      	bne.n	800836a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	2202      	movs	r2, #2
 8008364:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008368:	e058      	b.n	800841c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800836a:	7bbb      	ldrb	r3, [r7, #14]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d055      	beq.n	800841c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	2204      	movs	r2, #4
 8008374:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008378:	e050      	b.n	800841c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	3340      	adds	r3, #64	; 0x40
 800837e:	4619      	mov	r1, r3
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f860 	bl	8008446 <GetLineCoding>
 8008386:	4603      	mov	r3, r0
 8008388:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800838a:	7bbb      	ldrb	r3, [r7, #14]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d126      	bne.n	80083de <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083a2:	791b      	ldrb	r3, [r3, #4]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d13b      	bne.n	8008420 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083b2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d133      	bne.n	8008420 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083c2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d12b      	bne.n	8008420 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083d0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d124      	bne.n	8008420 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f958 	bl	800868c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80083dc:	e020      	b.n	8008420 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80083de:	7bbb      	ldrb	r3, [r7, #14]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d01d      	beq.n	8008420 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	2204      	movs	r2, #4
 80083e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80083ec:	e018      	b.n	8008420 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f867 	bl	80084c2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f8da 	bl	80085ae <CDC_ProcessReception>
      break;
 80083fa:	e014      	b.n	8008426 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80083fc:	2100      	movs	r1, #0
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 ffe3 	bl	80093ca <USBH_ClrFeature>
 8008404:	4603      	mov	r3, r0
 8008406:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008408:	7bbb      	ldrb	r3, [r7, #14]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d10a      	bne.n	8008424 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	2200      	movs	r2, #0
 8008412:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008416:	e005      	b.n	8008424 <USBH_CDC_Process+0x120>

    default:
      break;
 8008418:	bf00      	nop
 800841a:	e004      	b.n	8008426 <USBH_CDC_Process+0x122>
      break;
 800841c:	bf00      	nop
 800841e:	e002      	b.n	8008426 <USBH_CDC_Process+0x122>
      break;
 8008420:	bf00      	nop
 8008422:	e000      	b.n	8008426 <USBH_CDC_Process+0x122>
      break;
 8008424:	bf00      	nop

  }

  return status;
 8008426:	7bfb      	ldrb	r3, [r7, #15]
}
 8008428:	4618      	mov	r0, r3
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	370c      	adds	r7, #12
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b082      	sub	sp, #8
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
 800844e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	22a1      	movs	r2, #161	; 0xa1
 8008454:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2221      	movs	r2, #33	; 0x21
 800845a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2207      	movs	r2, #7
 800846c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	2207      	movs	r2, #7
 8008472:	4619      	mov	r1, r3
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f001 f988 	bl	800978a <USBH_CtlReq>
 800847a:	4603      	mov	r3, r0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2221      	movs	r2, #33	; 0x21
 8008492:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2220      	movs	r2, #32
 8008498:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2207      	movs	r2, #7
 80084aa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	2207      	movs	r2, #7
 80084b0:	4619      	mov	r1, r3
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f001 f969 	bl	800978a <USBH_CtlReq>
 80084b8:	4603      	mov	r3, r0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3708      	adds	r7, #8
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b086      	sub	sp, #24
 80084c6:	af02      	add	r7, sp, #8
 80084c8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084d0:	69db      	ldr	r3, [r3, #28]
 80084d2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80084d4:	2300      	movs	r3, #0
 80084d6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d002      	beq.n	80084e8 <CDC_ProcessTransmission+0x26>
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d023      	beq.n	800852e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80084e6:	e05e      	b.n	80085a6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	8b12      	ldrh	r2, [r2, #24]
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d90b      	bls.n	800850c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	69d9      	ldr	r1, [r3, #28]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	8b1a      	ldrh	r2, [r3, #24]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	7b5b      	ldrb	r3, [r3, #13]
 8008500:	2001      	movs	r0, #1
 8008502:	9000      	str	r0, [sp, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f001 fb4e 	bl	8009ba6 <USBH_BulkSendData>
 800850a:	e00b      	b.n	8008524 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8008514:	b29a      	uxth	r2, r3
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	7b5b      	ldrb	r3, [r3, #13]
 800851a:	2001      	movs	r0, #1
 800851c:	9000      	str	r0, [sp, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f001 fb41 	bl	8009ba6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2202      	movs	r2, #2
 8008528:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800852c:	e03b      	b.n	80085a6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	7b5b      	ldrb	r3, [r3, #13]
 8008532:	4619      	mov	r1, r3
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f001 fe65 	bl	800a204 <USBH_LL_GetURBState>
 800853a:	4603      	mov	r3, r0
 800853c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800853e:	7afb      	ldrb	r3, [r7, #11]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d128      	bne.n	8008596 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	8b12      	ldrh	r2, [r2, #24]
 800854c:	4293      	cmp	r3, r2
 800854e:	d90e      	bls.n	800856e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	8b12      	ldrh	r2, [r2, #24]
 8008558:	1a9a      	subs	r2, r3, r2
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	69db      	ldr	r3, [r3, #28]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	8b12      	ldrh	r2, [r2, #24]
 8008566:	441a      	add	r2, r3
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	61da      	str	r2, [r3, #28]
 800856c:	e002      	b.n	8008574 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008578:	2b00      	cmp	r3, #0
 800857a:	d004      	beq.n	8008586 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008584:	e00e      	b.n	80085a4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f868 	bl	8008664 <USBH_CDC_TransmitCallback>
      break;
 8008594:	e006      	b.n	80085a4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008596:	7afb      	ldrb	r3, [r7, #11]
 8008598:	2b02      	cmp	r3, #2
 800859a:	d103      	bne.n	80085a4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80085a4:	bf00      	nop
  }
}
 80085a6:	bf00      	nop
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b086      	sub	sp, #24
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085bc:	69db      	ldr	r3, [r3, #28]
 80085be:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80085c0:	2300      	movs	r3, #0
 80085c2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80085ca:	2b03      	cmp	r3, #3
 80085cc:	d002      	beq.n	80085d4 <CDC_ProcessReception+0x26>
 80085ce:	2b04      	cmp	r3, #4
 80085d0:	d00e      	beq.n	80085f0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80085d2:	e043      	b.n	800865c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	6a19      	ldr	r1, [r3, #32]
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	8b5a      	ldrh	r2, [r3, #26]
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	7b1b      	ldrb	r3, [r3, #12]
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f001 fb05 	bl	8009bf0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	2204      	movs	r2, #4
 80085ea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80085ee:	e035      	b.n	800865c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	7b1b      	ldrb	r3, [r3, #12]
 80085f4:	4619      	mov	r1, r3
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f001 fe04 	bl	800a204 <USBH_LL_GetURBState>
 80085fc:	4603      	mov	r3, r0
 80085fe:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008600:	7cfb      	ldrb	r3, [r7, #19]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d129      	bne.n	800865a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	7b1b      	ldrb	r3, [r3, #12]
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f001 fd67 	bl	800a0e0 <USBH_LL_GetLastXferSize>
 8008612:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	429a      	cmp	r2, r3
 800861c:	d016      	beq.n	800864c <CDC_ProcessReception+0x9e>
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	8b5b      	ldrh	r3, [r3, #26]
 8008622:	461a      	mov	r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	4293      	cmp	r3, r2
 8008628:	d910      	bls.n	800864c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	1ad2      	subs	r2, r2, r3
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	6a1a      	ldr	r2, [r3, #32]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	441a      	add	r2, r3
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	2203      	movs	r2, #3
 8008646:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800864a:	e006      	b.n	800865a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f80f 	bl	8008678 <USBH_CDC_ReceiveCallback>
      break;
 800865a:	bf00      	nop
  }
}
 800865c:	bf00      	nop
 800865e:	3718      	adds	r7, #24
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800866c:	bf00      	nop
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	4613      	mov	r3, r2
 80086ac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d101      	bne.n	80086b8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80086b4:	2302      	movs	r3, #2
 80086b6:	e029      	b.n	800870c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	79fa      	ldrb	r2, [r7, #7]
 80086bc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 f81f 	bl	8008714 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d003      	beq.n	8008704 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	f001 fc37 	bl	8009f78 <USBH_LL_Init>

  return USBH_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800871c:	2300      	movs	r3, #0
 800871e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008720:	2300      	movs	r3, #0
 8008722:	60fb      	str	r3, [r7, #12]
 8008724:	e009      	b.n	800873a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	33e0      	adds	r3, #224	; 0xe0
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4413      	add	r3, r2
 8008730:	2200      	movs	r2, #0
 8008732:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	3301      	adds	r3, #1
 8008738:	60fb      	str	r3, [r7, #12]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2b0e      	cmp	r3, #14
 800873e:	d9f2      	bls.n	8008726 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008740:	2300      	movs	r3, #0
 8008742:	60fb      	str	r3, [r7, #12]
 8008744:	e009      	b.n	800875a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	4413      	add	r3, r2
 800874c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008750:	2200      	movs	r2, #0
 8008752:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	3301      	adds	r3, #1
 8008758:	60fb      	str	r3, [r7, #12]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008760:	d3f1      	bcc.n	8008746 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2240      	movs	r2, #64	; 0x40
 8008786:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3714      	adds	r7, #20
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80087c6:	2300      	movs	r3, #0
 80087c8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d016      	beq.n	80087fe <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10e      	bne.n	80087f8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80087e0:	1c59      	adds	r1, r3, #1
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	33de      	adds	r3, #222	; 0xde
 80087ec:	6839      	ldr	r1, [r7, #0]
 80087ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80087f2:	2300      	movs	r3, #0
 80087f4:	73fb      	strb	r3, [r7, #15]
 80087f6:	e004      	b.n	8008802 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80087f8:	2302      	movs	r3, #2
 80087fa:	73fb      	strb	r3, [r7, #15]
 80087fc:	e001      	b.n	8008802 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80087fe:	2302      	movs	r3, #2
 8008800:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008802:	7bfb      	ldrb	r3, [r7, #15]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3714      	adds	r7, #20
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	460b      	mov	r3, r1
 800881a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800881c:	2300      	movs	r3, #0
 800881e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008826:	78fa      	ldrb	r2, [r7, #3]
 8008828:	429a      	cmp	r2, r3
 800882a:	d204      	bcs.n	8008836 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	78fa      	ldrb	r2, [r7, #3]
 8008830:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008834:	e001      	b.n	800883a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008836:	2302      	movs	r3, #2
 8008838:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800883a:	7bfb      	ldrb	r3, [r7, #15]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3714      	adds	r7, #20
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008848:	b480      	push	{r7}
 800884a:	b087      	sub	sp, #28
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	4608      	mov	r0, r1
 8008852:	4611      	mov	r1, r2
 8008854:	461a      	mov	r2, r3
 8008856:	4603      	mov	r3, r0
 8008858:	70fb      	strb	r3, [r7, #3]
 800885a:	460b      	mov	r3, r1
 800885c:	70bb      	strb	r3, [r7, #2]
 800885e:	4613      	mov	r3, r2
 8008860:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008862:	2300      	movs	r3, #0
 8008864:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008866:	2300      	movs	r3, #0
 8008868:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008870:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008872:	e025      	b.n	80088c0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008874:	7dfb      	ldrb	r3, [r7, #23]
 8008876:	221a      	movs	r2, #26
 8008878:	fb02 f303 	mul.w	r3, r2, r3
 800887c:	3308      	adds	r3, #8
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	4413      	add	r3, r2
 8008882:	3302      	adds	r3, #2
 8008884:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	795b      	ldrb	r3, [r3, #5]
 800888a:	78fa      	ldrb	r2, [r7, #3]
 800888c:	429a      	cmp	r2, r3
 800888e:	d002      	beq.n	8008896 <USBH_FindInterface+0x4e>
 8008890:	78fb      	ldrb	r3, [r7, #3]
 8008892:	2bff      	cmp	r3, #255	; 0xff
 8008894:	d111      	bne.n	80088ba <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800889a:	78ba      	ldrb	r2, [r7, #2]
 800889c:	429a      	cmp	r2, r3
 800889e:	d002      	beq.n	80088a6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80088a0:	78bb      	ldrb	r3, [r7, #2]
 80088a2:	2bff      	cmp	r3, #255	; 0xff
 80088a4:	d109      	bne.n	80088ba <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80088aa:	787a      	ldrb	r2, [r7, #1]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d002      	beq.n	80088b6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80088b0:	787b      	ldrb	r3, [r7, #1]
 80088b2:	2bff      	cmp	r3, #255	; 0xff
 80088b4:	d101      	bne.n	80088ba <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80088b6:	7dfb      	ldrb	r3, [r7, #23]
 80088b8:	e006      	b.n	80088c8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80088ba:	7dfb      	ldrb	r3, [r7, #23]
 80088bc:	3301      	adds	r3, #1
 80088be:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80088c0:	7dfb      	ldrb	r3, [r7, #23]
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d9d6      	bls.n	8008874 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80088c6:	23ff      	movs	r3, #255	; 0xff
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	371c      	adds	r7, #28
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f001 fb87 	bl	8009ff0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80088e2:	2101      	movs	r1, #1
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f001 fca0 	bl	800a22a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b088      	sub	sp, #32
 80088f8:	af04      	add	r7, sp, #16
 80088fa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80088fc:	2302      	movs	r3, #2
 80088fe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008900:	2300      	movs	r3, #0
 8008902:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800890a:	b2db      	uxtb	r3, r3
 800890c:	2b01      	cmp	r3, #1
 800890e:	d102      	bne.n	8008916 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2203      	movs	r2, #3
 8008914:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	b2db      	uxtb	r3, r3
 800891c:	2b0b      	cmp	r3, #11
 800891e:	f200 81b3 	bhi.w	8008c88 <USBH_Process+0x394>
 8008922:	a201      	add	r2, pc, #4	; (adr r2, 8008928 <USBH_Process+0x34>)
 8008924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008928:	08008959 	.word	0x08008959
 800892c:	0800898b 	.word	0x0800898b
 8008930:	080089f3 	.word	0x080089f3
 8008934:	08008c23 	.word	0x08008c23
 8008938:	08008c89 	.word	0x08008c89
 800893c:	08008a97 	.word	0x08008a97
 8008940:	08008bc9 	.word	0x08008bc9
 8008944:	08008acd 	.word	0x08008acd
 8008948:	08008aed 	.word	0x08008aed
 800894c:	08008b0d 	.word	0x08008b0d
 8008950:	08008b3b 	.word	0x08008b3b
 8008954:	08008c0b 	.word	0x08008c0b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b00      	cmp	r3, #0
 8008962:	f000 8193 	beq.w	8008c8c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800896c:	20c8      	movs	r0, #200	; 0xc8
 800896e:	f001 fca3 	bl	800a2b8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f001 fb99 	bl	800a0aa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008988:	e180      	b.n	8008c8c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008990:	2b01      	cmp	r3, #1
 8008992:	d107      	bne.n	80089a4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2202      	movs	r2, #2
 80089a0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80089a2:	e182      	b.n	8008caa <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80089aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089ae:	d914      	bls.n	80089da <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80089b6:	3301      	adds	r3, #1
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80089c6:	2b03      	cmp	r3, #3
 80089c8:	d903      	bls.n	80089d2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	220d      	movs	r2, #13
 80089ce:	701a      	strb	r2, [r3, #0]
      break;
 80089d0:	e16b      	b.n	8008caa <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	701a      	strb	r2, [r3, #0]
      break;
 80089d8:	e167      	b.n	8008caa <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80089e0:	f103 020a 	add.w	r2, r3, #10
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80089ea:	200a      	movs	r0, #10
 80089ec:	f001 fc64 	bl	800a2b8 <USBH_Delay>
      break;
 80089f0:	e15b      	b.n	8008caa <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d005      	beq.n	8008a08 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a02:	2104      	movs	r1, #4
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008a08:	2064      	movs	r0, #100	; 0x64
 8008a0a:	f001 fc55 	bl	800a2b8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f001 fb24 	bl	800a05c <USBH_LL_GetSpeed>
 8008a14:	4603      	mov	r3, r0
 8008a16:	461a      	mov	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2205      	movs	r2, #5
 8008a22:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008a24:	2100      	movs	r1, #0
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f001 f92f 	bl	8009c8a <USBH_AllocPipe>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	461a      	mov	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008a34:	2180      	movs	r1, #128	; 0x80
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f001 f927 	bl	8009c8a <USBH_AllocPipe>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	461a      	mov	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	7919      	ldrb	r1, [r3, #4]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008a58:	b292      	uxth	r2, r2
 8008a5a:	9202      	str	r2, [sp, #8]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	9201      	str	r2, [sp, #4]
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	4603      	mov	r3, r0
 8008a64:	2280      	movs	r2, #128	; 0x80
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f001 f8e0 	bl	8009c2c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	7959      	ldrb	r1, [r3, #5]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008a80:	b292      	uxth	r2, r2
 8008a82:	9202      	str	r2, [sp, #8]
 8008a84:	2200      	movs	r2, #0
 8008a86:	9201      	str	r2, [sp, #4]
 8008a88:	9300      	str	r3, [sp, #0]
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f001 f8cc 	bl	8009c2c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008a94:	e109      	b.n	8008caa <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f90c 	bl	8008cb4 <USBH_HandleEnum>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008aa0:	7bbb      	ldrb	r3, [r7, #14]
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f040 80f3 	bne.w	8008c90 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d103      	bne.n	8008ac4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2208      	movs	r2, #8
 8008ac0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008ac2:	e0e5      	b.n	8008c90 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2207      	movs	r2, #7
 8008ac8:	701a      	strb	r2, [r3, #0]
      break;
 8008aca:	e0e1      	b.n	8008c90 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f000 80de 	beq.w	8008c94 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ade:	2101      	movs	r1, #1
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2208      	movs	r2, #8
 8008ae8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008aea:	e0d3      	b.n	8008c94 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	4619      	mov	r1, r3
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fc20 	bl	800933c <USBH_SetCfg>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f040 80ca 	bne.w	8008c98 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2209      	movs	r2, #9
 8008b08:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008b0a:	e0c5      	b.n	8008c98 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008b12:	f003 0320 	and.w	r3, r3, #32
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00b      	beq.n	8008b32 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fc30 	bl	8009382 <USBH_SetFeature>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f040 80b9 	bne.w	8008c9c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	220a      	movs	r2, #10
 8008b2e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008b30:	e0b4      	b.n	8008c9c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	220a      	movs	r2, #10
 8008b36:	701a      	strb	r2, [r3, #0]
      break;
 8008b38:	e0b0      	b.n	8008c9c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f000 80ad 	beq.w	8008ca0 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008b4e:	2300      	movs	r3, #0
 8008b50:	73fb      	strb	r3, [r7, #15]
 8008b52:	e016      	b.n	8008b82 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008b54:	7bfa      	ldrb	r2, [r7, #15]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	32de      	adds	r2, #222	; 0xde
 8008b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b5e:	791a      	ldrb	r2, [r3, #4]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d108      	bne.n	8008b7c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008b6a:	7bfa      	ldrb	r2, [r7, #15]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	32de      	adds	r2, #222	; 0xde
 8008b70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008b7a:	e005      	b.n	8008b88 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	73fb      	strb	r3, [r7, #15]
 8008b82:	7bfb      	ldrb	r3, [r7, #15]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d0e5      	beq.n	8008b54 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d016      	beq.n	8008bc0 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	4798      	blx	r3
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d109      	bne.n	8008bb8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2206      	movs	r2, #6
 8008ba8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008bb0:	2103      	movs	r1, #3
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008bb6:	e073      	b.n	8008ca0 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	220d      	movs	r2, #13
 8008bbc:	701a      	strb	r2, [r3, #0]
      break;
 8008bbe:	e06f      	b.n	8008ca0 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	220d      	movs	r2, #13
 8008bc4:	701a      	strb	r2, [r3, #0]
      break;
 8008bc6:	e06b      	b.n	8008ca0 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d017      	beq.n	8008c02 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	4798      	blx	r3
 8008bde:	4603      	mov	r3, r0
 8008be0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008be2:	7bbb      	ldrb	r3, [r7, #14]
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d103      	bne.n	8008bf2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	220b      	movs	r2, #11
 8008bee:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008bf0:	e058      	b.n	8008ca4 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8008bf2:	7bbb      	ldrb	r3, [r7, #14]
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d154      	bne.n	8008ca4 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	220d      	movs	r2, #13
 8008bfe:	701a      	strb	r2, [r3, #0]
      break;
 8008c00:	e050      	b.n	8008ca4 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	220d      	movs	r2, #13
 8008c06:	701a      	strb	r2, [r3, #0]
      break;
 8008c08:	e04c      	b.n	8008ca4 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d049      	beq.n	8008ca8 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c1a:	695b      	ldr	r3, [r3, #20]
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	4798      	blx	r3
      }
      break;
 8008c20:	e042      	b.n	8008ca8 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f7ff fd72 	bl	8008714 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d009      	beq.n	8008c4e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d005      	beq.n	8008c64 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c5e:	2105      	movs	r1, #5
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d107      	bne.n	8008c80 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f7ff fe2b 	bl	80088d4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008c7e:	e014      	b.n	8008caa <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f001 f9b5 	bl	8009ff0 <USBH_LL_Start>
      break;
 8008c86:	e010      	b.n	8008caa <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008c88:	bf00      	nop
 8008c8a:	e00e      	b.n	8008caa <USBH_Process+0x3b6>
      break;
 8008c8c:	bf00      	nop
 8008c8e:	e00c      	b.n	8008caa <USBH_Process+0x3b6>
      break;
 8008c90:	bf00      	nop
 8008c92:	e00a      	b.n	8008caa <USBH_Process+0x3b6>
    break;
 8008c94:	bf00      	nop
 8008c96:	e008      	b.n	8008caa <USBH_Process+0x3b6>
      break;
 8008c98:	bf00      	nop
 8008c9a:	e006      	b.n	8008caa <USBH_Process+0x3b6>
      break;
 8008c9c:	bf00      	nop
 8008c9e:	e004      	b.n	8008caa <USBH_Process+0x3b6>
      break;
 8008ca0:	bf00      	nop
 8008ca2:	e002      	b.n	8008caa <USBH_Process+0x3b6>
      break;
 8008ca4:	bf00      	nop
 8008ca6:	e000      	b.n	8008caa <USBH_Process+0x3b6>
      break;
 8008ca8:	bf00      	nop
  }
  return USBH_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b088      	sub	sp, #32
 8008cb8:	af04      	add	r7, sp, #16
 8008cba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	785b      	ldrb	r3, [r3, #1]
 8008cc8:	2b07      	cmp	r3, #7
 8008cca:	f200 81c1 	bhi.w	8009050 <USBH_HandleEnum+0x39c>
 8008cce:	a201      	add	r2, pc, #4	; (adr r2, 8008cd4 <USBH_HandleEnum+0x20>)
 8008cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd4:	08008cf5 	.word	0x08008cf5
 8008cd8:	08008db3 	.word	0x08008db3
 8008cdc:	08008e1d 	.word	0x08008e1d
 8008ce0:	08008eab 	.word	0x08008eab
 8008ce4:	08008f15 	.word	0x08008f15
 8008ce8:	08008f85 	.word	0x08008f85
 8008cec:	08008fcb 	.word	0x08008fcb
 8008cf0:	08009011 	.word	0x08009011
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008cf4:	2108      	movs	r1, #8
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fa50 	bl	800919c <USBH_Get_DevDesc>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008d00:	7bbb      	ldrb	r3, [r7, #14]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d130      	bne.n	8008d68 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	7919      	ldrb	r1, [r3, #4]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008d2a:	b292      	uxth	r2, r2
 8008d2c:	9202      	str	r2, [sp, #8]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	9201      	str	r2, [sp, #4]
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	4603      	mov	r3, r0
 8008d36:	2280      	movs	r2, #128	; 0x80
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 ff77 	bl	8009c2c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	7959      	ldrb	r1, [r3, #5]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008d52:	b292      	uxth	r2, r2
 8008d54:	9202      	str	r2, [sp, #8]
 8008d56:	2200      	movs	r2, #0
 8008d58:	9201      	str	r2, [sp, #4]
 8008d5a:	9300      	str	r3, [sp, #0]
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2200      	movs	r2, #0
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 ff63 	bl	8009c2c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008d66:	e175      	b.n	8009054 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d68:	7bbb      	ldrb	r3, [r7, #14]
 8008d6a:	2b03      	cmp	r3, #3
 8008d6c:	f040 8172 	bne.w	8009054 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008d76:	3301      	adds	r3, #1
 8008d78:	b2da      	uxtb	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008d86:	2b03      	cmp	r3, #3
 8008d88:	d903      	bls.n	8008d92 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	220d      	movs	r2, #13
 8008d8e:	701a      	strb	r2, [r3, #0]
      break;
 8008d90:	e160      	b.n	8009054 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	795b      	ldrb	r3, [r3, #5]
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 ff97 	bl	8009ccc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	791b      	ldrb	r3, [r3, #4]
 8008da2:	4619      	mov	r1, r3
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 ff91 	bl	8009ccc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	701a      	strb	r2, [r3, #0]
      break;
 8008db0:	e150      	b.n	8009054 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008db2:	2112      	movs	r1, #18
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f9f1 	bl	800919c <USBH_Get_DevDesc>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008dbe:	7bbb      	ldrb	r3, [r7, #14]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d103      	bne.n	8008dcc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008dca:	e145      	b.n	8009058 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008dcc:	7bbb      	ldrb	r3, [r7, #14]
 8008dce:	2b03      	cmp	r3, #3
 8008dd0:	f040 8142 	bne.w	8009058 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008dda:	3301      	adds	r3, #1
 8008ddc:	b2da      	uxtb	r2, r3
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	d903      	bls.n	8008df6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	220d      	movs	r2, #13
 8008df2:	701a      	strb	r2, [r3, #0]
      break;
 8008df4:	e130      	b.n	8009058 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	795b      	ldrb	r3, [r3, #5]
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 ff65 	bl	8009ccc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	791b      	ldrb	r3, [r3, #4]
 8008e06:	4619      	mov	r1, r3
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 ff5f 	bl	8009ccc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	701a      	strb	r2, [r3, #0]
      break;
 8008e1a:	e11d      	b.n	8009058 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008e1c:	2101      	movs	r1, #1
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fa68 	bl	80092f4 <USBH_SetAddress>
 8008e24:	4603      	mov	r3, r0
 8008e26:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008e28:	7bbb      	ldrb	r3, [r7, #14]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d132      	bne.n	8008e94 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008e2e:	2002      	movs	r0, #2
 8008e30:	f001 fa42 	bl	800a2b8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2203      	movs	r2, #3
 8008e40:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	7919      	ldrb	r1, [r3, #4]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008e56:	b292      	uxth	r2, r2
 8008e58:	9202      	str	r2, [sp, #8]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	9201      	str	r2, [sp, #4]
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	4603      	mov	r3, r0
 8008e62:	2280      	movs	r2, #128	; 0x80
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fee1 	bl	8009c2c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	7959      	ldrb	r1, [r3, #5]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008e7e:	b292      	uxth	r2, r2
 8008e80:	9202      	str	r2, [sp, #8]
 8008e82:	2200      	movs	r2, #0
 8008e84:	9201      	str	r2, [sp, #4]
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 fecd 	bl	8009c2c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008e92:	e0e3      	b.n	800905c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e94:	7bbb      	ldrb	r3, [r7, #14]
 8008e96:	2b03      	cmp	r3, #3
 8008e98:	f040 80e0 	bne.w	800905c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	220d      	movs	r2, #13
 8008ea0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	705a      	strb	r2, [r3, #1]
      break;
 8008ea8:	e0d8      	b.n	800905c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008eaa:	2109      	movs	r1, #9
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f99d 	bl	80091ec <USBH_Get_CfgDesc>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008eb6:	7bbb      	ldrb	r3, [r7, #14]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d103      	bne.n	8008ec4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2204      	movs	r2, #4
 8008ec0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008ec2:	e0cd      	b.n	8009060 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ec4:	7bbb      	ldrb	r3, [r7, #14]
 8008ec6:	2b03      	cmp	r3, #3
 8008ec8:	f040 80ca 	bne.w	8009060 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	b2da      	uxtb	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ee2:	2b03      	cmp	r3, #3
 8008ee4:	d903      	bls.n	8008eee <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	220d      	movs	r2, #13
 8008eea:	701a      	strb	r2, [r3, #0]
      break;
 8008eec:	e0b8      	b.n	8009060 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	795b      	ldrb	r3, [r3, #5]
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fee9 	bl	8009ccc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	791b      	ldrb	r3, [r3, #4]
 8008efe:	4619      	mov	r1, r3
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fee3 	bl	8009ccc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	701a      	strb	r2, [r3, #0]
      break;
 8008f12:	e0a5      	b.n	8009060 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 f965 	bl	80091ec <USBH_Get_CfgDesc>
 8008f22:	4603      	mov	r3, r0
 8008f24:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f26:	7bbb      	ldrb	r3, [r7, #14]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d103      	bne.n	8008f34 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2205      	movs	r2, #5
 8008f30:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008f32:	e097      	b.n	8009064 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f34:	7bbb      	ldrb	r3, [r7, #14]
 8008f36:	2b03      	cmp	r3, #3
 8008f38:	f040 8094 	bne.w	8009064 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f42:	3301      	adds	r3, #1
 8008f44:	b2da      	uxtb	r2, r3
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f52:	2b03      	cmp	r3, #3
 8008f54:	d903      	bls.n	8008f5e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	220d      	movs	r2, #13
 8008f5a:	701a      	strb	r2, [r3, #0]
      break;
 8008f5c:	e082      	b.n	8009064 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	795b      	ldrb	r3, [r3, #5]
 8008f62:	4619      	mov	r1, r3
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 feb1 	bl	8009ccc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	791b      	ldrb	r3, [r3, #4]
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 feab 	bl	8009ccc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	701a      	strb	r2, [r3, #0]
      break;
 8008f82:	e06f      	b.n	8009064 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d019      	beq.n	8008fc2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008f9a:	23ff      	movs	r3, #255	; 0xff
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f949 	bl	8009234 <USBH_Get_StringDesc>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008fa6:	7bbb      	ldrb	r3, [r7, #14]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d103      	bne.n	8008fb4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2206      	movs	r2, #6
 8008fb0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008fb2:	e059      	b.n	8009068 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008fb4:	7bbb      	ldrb	r3, [r7, #14]
 8008fb6:	2b03      	cmp	r3, #3
 8008fb8:	d156      	bne.n	8009068 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2206      	movs	r2, #6
 8008fbe:	705a      	strb	r2, [r3, #1]
      break;
 8008fc0:	e052      	b.n	8009068 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2206      	movs	r2, #6
 8008fc6:	705a      	strb	r2, [r3, #1]
      break;
 8008fc8:	e04e      	b.n	8009068 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d019      	beq.n	8009008 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008fe0:	23ff      	movs	r3, #255	; 0xff
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f926 	bl	8009234 <USBH_Get_StringDesc>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008fec:	7bbb      	ldrb	r3, [r7, #14]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d103      	bne.n	8008ffa <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2207      	movs	r2, #7
 8008ff6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008ff8:	e038      	b.n	800906c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ffa:	7bbb      	ldrb	r3, [r7, #14]
 8008ffc:	2b03      	cmp	r3, #3
 8008ffe:	d135      	bne.n	800906c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2207      	movs	r2, #7
 8009004:	705a      	strb	r2, [r3, #1]
      break;
 8009006:	e031      	b.n	800906c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2207      	movs	r2, #7
 800900c:	705a      	strb	r2, [r3, #1]
      break;
 800900e:	e02d      	b.n	800906c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009016:	2b00      	cmp	r3, #0
 8009018:	d017      	beq.n	800904a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009026:	23ff      	movs	r3, #255	; 0xff
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 f903 	bl	8009234 <USBH_Get_StringDesc>
 800902e:	4603      	mov	r3, r0
 8009030:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009032:	7bbb      	ldrb	r3, [r7, #14]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d102      	bne.n	800903e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009038:	2300      	movs	r3, #0
 800903a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800903c:	e018      	b.n	8009070 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800903e:	7bbb      	ldrb	r3, [r7, #14]
 8009040:	2b03      	cmp	r3, #3
 8009042:	d115      	bne.n	8009070 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009044:	2300      	movs	r3, #0
 8009046:	73fb      	strb	r3, [r7, #15]
      break;
 8009048:	e012      	b.n	8009070 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800904a:	2300      	movs	r3, #0
 800904c:	73fb      	strb	r3, [r7, #15]
      break;
 800904e:	e00f      	b.n	8009070 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009050:	bf00      	nop
 8009052:	e00e      	b.n	8009072 <USBH_HandleEnum+0x3be>
      break;
 8009054:	bf00      	nop
 8009056:	e00c      	b.n	8009072 <USBH_HandleEnum+0x3be>
      break;
 8009058:	bf00      	nop
 800905a:	e00a      	b.n	8009072 <USBH_HandleEnum+0x3be>
      break;
 800905c:	bf00      	nop
 800905e:	e008      	b.n	8009072 <USBH_HandleEnum+0x3be>
      break;
 8009060:	bf00      	nop
 8009062:	e006      	b.n	8009072 <USBH_HandleEnum+0x3be>
      break;
 8009064:	bf00      	nop
 8009066:	e004      	b.n	8009072 <USBH_HandleEnum+0x3be>
      break;
 8009068:	bf00      	nop
 800906a:	e002      	b.n	8009072 <USBH_HandleEnum+0x3be>
      break;
 800906c:	bf00      	nop
 800906e:	e000      	b.n	8009072 <USBH_HandleEnum+0x3be>
      break;
 8009070:	bf00      	nop
  }
  return Status;
 8009072:	7bfb      	ldrb	r3, [r7, #15]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800908e:	bf00      	nop
 8009090:	370c      	adds	r7, #12
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b082      	sub	sp, #8
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80090a8:	1c5a      	adds	r2, r3, #1
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f804 	bl	80090be <USBH_HandleSof>
}
 80090b6:	bf00      	nop
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b082      	sub	sp, #8
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	2b0b      	cmp	r3, #11
 80090ce:	d10a      	bne.n	80090e6 <USBH_HandleSof+0x28>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d005      	beq.n	80090e6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090e0:	699b      	ldr	r3, [r3, #24]
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	4798      	blx	r3
  }
}
 80090e6:	bf00      	nop
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80090ee:	b480      	push	{r7}
 80090f0:	b083      	sub	sp, #12
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2201      	movs	r2, #1
 80090fa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80090fe:	bf00      	nop
}
 8009100:	370c      	adds	r7, #12
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr

0800910a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800910a:	b480      	push	{r7}
 800910c:	b083      	sub	sp, #12
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800911a:	bf00      	nop
}
 800911c:	370c      	adds	r7, #12
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009126:	b480      	push	{r7}
 8009128:	b083      	sub	sp, #12
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2201      	movs	r2, #1
 8009132:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 ff56 	bl	800a026 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	791b      	ldrb	r3, [r3, #4]
 800917e:	4619      	mov	r1, r3
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 fda3 	bl	8009ccc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	795b      	ldrb	r3, [r3, #5]
 800918a:	4619      	mov	r1, r3
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 fd9d 	bl	8009ccc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009192:	2300      	movs	r3, #0
}
 8009194:	4618      	mov	r0, r3
 8009196:	3708      	adds	r7, #8
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b086      	sub	sp, #24
 80091a0:	af02      	add	r7, sp, #8
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	460b      	mov	r3, r1
 80091a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80091ae:	78fb      	ldrb	r3, [r7, #3]
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	9300      	str	r3, [sp, #0]
 80091b4:	4613      	mov	r3, r2
 80091b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80091ba:	2100      	movs	r1, #0
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f864 	bl	800928a <USBH_GetDescriptor>
 80091c2:	4603      	mov	r3, r0
 80091c4:	73fb      	strb	r3, [r7, #15]
 80091c6:	7bfb      	ldrb	r3, [r7, #15]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d10a      	bne.n	80091e2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f203 3026 	addw	r0, r3, #806	; 0x326
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80091d8:	78fa      	ldrb	r2, [r7, #3]
 80091da:	b292      	uxth	r2, r2
 80091dc:	4619      	mov	r1, r3
 80091de:	f000 f918 	bl	8009412 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80091e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b086      	sub	sp, #24
 80091f0:	af02      	add	r7, sp, #8
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	460b      	mov	r3, r1
 80091f6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	331c      	adds	r3, #28
 80091fc:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80091fe:	887b      	ldrh	r3, [r7, #2]
 8009200:	9300      	str	r3, [sp, #0]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009208:	2100      	movs	r1, #0
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f83d 	bl	800928a <USBH_GetDescriptor>
 8009210:	4603      	mov	r3, r0
 8009212:	72fb      	strb	r3, [r7, #11]
 8009214:	7afb      	ldrb	r3, [r7, #11]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d107      	bne.n	800922a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009220:	887a      	ldrh	r2, [r7, #2]
 8009222:	68f9      	ldr	r1, [r7, #12]
 8009224:	4618      	mov	r0, r3
 8009226:	f000 f964 	bl	80094f2 <USBH_ParseCfgDesc>
  }

  return status;
 800922a:	7afb      	ldrb	r3, [r7, #11]
}
 800922c:	4618      	mov	r0, r3
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b088      	sub	sp, #32
 8009238:	af02      	add	r7, sp, #8
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	607a      	str	r2, [r7, #4]
 800923e:	461a      	mov	r2, r3
 8009240:	460b      	mov	r3, r1
 8009242:	72fb      	strb	r3, [r7, #11]
 8009244:	4613      	mov	r3, r2
 8009246:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009248:	7afb      	ldrb	r3, [r7, #11]
 800924a:	b29b      	uxth	r3, r3
 800924c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009250:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009258:	893b      	ldrh	r3, [r7, #8]
 800925a:	9300      	str	r3, [sp, #0]
 800925c:	460b      	mov	r3, r1
 800925e:	2100      	movs	r1, #0
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f000 f812 	bl	800928a <USBH_GetDescriptor>
 8009266:	4603      	mov	r3, r0
 8009268:	75fb      	strb	r3, [r7, #23]
 800926a:	7dfb      	ldrb	r3, [r7, #23]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d107      	bne.n	8009280 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009276:	893a      	ldrh	r2, [r7, #8]
 8009278:	6879      	ldr	r1, [r7, #4]
 800927a:	4618      	mov	r0, r3
 800927c:	f000 fa37 	bl	80096ee <USBH_ParseStringDesc>
  }

  return status;
 8009280:	7dfb      	ldrb	r3, [r7, #23]
}
 8009282:	4618      	mov	r0, r3
 8009284:	3718      	adds	r7, #24
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b084      	sub	sp, #16
 800928e:	af00      	add	r7, sp, #0
 8009290:	60f8      	str	r0, [r7, #12]
 8009292:	607b      	str	r3, [r7, #4]
 8009294:	460b      	mov	r3, r1
 8009296:	72fb      	strb	r3, [r7, #11]
 8009298:	4613      	mov	r3, r2
 800929a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	789b      	ldrb	r3, [r3, #2]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d11c      	bne.n	80092de <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80092a4:	7afb      	ldrb	r3, [r7, #11]
 80092a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80092aa:	b2da      	uxtb	r2, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2206      	movs	r2, #6
 80092b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	893a      	ldrh	r2, [r7, #8]
 80092ba:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80092bc:	893b      	ldrh	r3, [r7, #8]
 80092be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80092c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092c6:	d104      	bne.n	80092d2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f240 4209 	movw	r2, #1033	; 0x409
 80092ce:	829a      	strh	r2, [r3, #20]
 80092d0:	e002      	b.n	80092d8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2200      	movs	r2, #0
 80092d6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	8b3a      	ldrh	r2, [r7, #24]
 80092dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80092de:	8b3b      	ldrh	r3, [r7, #24]
 80092e0:	461a      	mov	r2, r3
 80092e2:	6879      	ldr	r1, [r7, #4]
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f000 fa50 	bl	800978a <USBH_CtlReq>
 80092ea:	4603      	mov	r3, r0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3710      	adds	r7, #16
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	460b      	mov	r3, r1
 80092fe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	789b      	ldrb	r3, [r3, #2]
 8009304:	2b01      	cmp	r3, #1
 8009306:	d10f      	bne.n	8009328 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2205      	movs	r2, #5
 8009312:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009314:	78fb      	ldrb	r3, [r7, #3]
 8009316:	b29a      	uxth	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009328:	2200      	movs	r2, #0
 800932a:	2100      	movs	r1, #0
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 fa2c 	bl	800978a <USBH_CtlReq>
 8009332:	4603      	mov	r3, r0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	460b      	mov	r3, r1
 8009346:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	789b      	ldrb	r3, [r3, #2]
 800934c:	2b01      	cmp	r3, #1
 800934e:	d10e      	bne.n	800936e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2209      	movs	r2, #9
 800935a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	887a      	ldrh	r2, [r7, #2]
 8009360:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800936e:	2200      	movs	r2, #0
 8009370:	2100      	movs	r1, #0
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 fa09 	bl	800978a <USBH_CtlReq>
 8009378:	4603      	mov	r3, r0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3708      	adds	r7, #8
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b082      	sub	sp, #8
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	460b      	mov	r3, r1
 800938c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	789b      	ldrb	r3, [r3, #2]
 8009392:	2b01      	cmp	r3, #1
 8009394:	d10f      	bne.n	80093b6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2203      	movs	r2, #3
 80093a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80093a2:	78fb      	ldrb	r3, [r7, #3]
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80093b6:	2200      	movs	r2, #0
 80093b8:	2100      	movs	r1, #0
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 f9e5 	bl	800978a <USBH_CtlReq>
 80093c0:	4603      	mov	r3, r0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3708      	adds	r7, #8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b082      	sub	sp, #8
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
 80093d2:	460b      	mov	r3, r1
 80093d4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	789b      	ldrb	r3, [r3, #2]
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d10f      	bne.n	80093fe <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2202      	movs	r2, #2
 80093e2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80093f0:	78fb      	ldrb	r3, [r7, #3]
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80093fe:	2200      	movs	r2, #0
 8009400:	2100      	movs	r1, #0
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f9c1 	bl	800978a <USBH_CtlReq>
 8009408:	4603      	mov	r3, r0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009412:	b480      	push	{r7}
 8009414:	b085      	sub	sp, #20
 8009416:	af00      	add	r7, sp, #0
 8009418:	60f8      	str	r0, [r7, #12]
 800941a:	60b9      	str	r1, [r7, #8]
 800941c:	4613      	mov	r3, r2
 800941e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	781a      	ldrb	r2, [r3, #0]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	785a      	ldrb	r2, [r3, #1]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	3302      	adds	r3, #2
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	b29a      	uxth	r2, r3
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	3303      	adds	r3, #3
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	b29b      	uxth	r3, r3
 8009440:	021b      	lsls	r3, r3, #8
 8009442:	b29b      	uxth	r3, r3
 8009444:	4313      	orrs	r3, r2
 8009446:	b29a      	uxth	r2, r3
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	791a      	ldrb	r2, [r3, #4]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	795a      	ldrb	r2, [r3, #5]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	799a      	ldrb	r2, [r3, #6]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	79da      	ldrb	r2, [r3, #7]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800946c:	88fb      	ldrh	r3, [r7, #6]
 800946e:	2b08      	cmp	r3, #8
 8009470:	d939      	bls.n	80094e6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	3308      	adds	r3, #8
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	b29a      	uxth	r2, r3
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	3309      	adds	r3, #9
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	b29b      	uxth	r3, r3
 8009482:	021b      	lsls	r3, r3, #8
 8009484:	b29b      	uxth	r3, r3
 8009486:	4313      	orrs	r3, r2
 8009488:	b29a      	uxth	r2, r3
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	330a      	adds	r3, #10
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	b29a      	uxth	r2, r3
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	330b      	adds	r3, #11
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	b29b      	uxth	r3, r3
 800949e:	021b      	lsls	r3, r3, #8
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	4313      	orrs	r3, r2
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	330c      	adds	r3, #12
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	b29a      	uxth	r2, r3
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	330d      	adds	r3, #13
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	021b      	lsls	r3, r3, #8
 80094bc:	b29b      	uxth	r3, r3
 80094be:	4313      	orrs	r3, r2
 80094c0:	b29a      	uxth	r2, r3
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	7b9a      	ldrb	r2, [r3, #14]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	7bda      	ldrb	r2, [r3, #15]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	7c1a      	ldrb	r2, [r3, #16]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	7c5a      	ldrb	r2, [r3, #17]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	745a      	strb	r2, [r3, #17]
  }
}
 80094e6:	bf00      	nop
 80094e8:	3714      	adds	r7, #20
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr

080094f2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b08a      	sub	sp, #40	; 0x28
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	60f8      	str	r0, [r7, #12]
 80094fa:	60b9      	str	r1, [r7, #8]
 80094fc:	4613      	mov	r3, r2
 80094fe:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009504:	2300      	movs	r3, #0
 8009506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800950a:	2300      	movs	r3, #0
 800950c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	781a      	ldrb	r2, [r3, #0]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	785a      	ldrb	r2, [r3, #1]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	3302      	adds	r3, #2
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	b29a      	uxth	r2, r3
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	3303      	adds	r3, #3
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	b29b      	uxth	r3, r3
 8009534:	021b      	lsls	r3, r3, #8
 8009536:	b29b      	uxth	r3, r3
 8009538:	4313      	orrs	r3, r2
 800953a:	b29a      	uxth	r2, r3
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	791a      	ldrb	r2, [r3, #4]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	795a      	ldrb	r2, [r3, #5]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	799a      	ldrb	r2, [r3, #6]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	79da      	ldrb	r2, [r3, #7]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	7a1a      	ldrb	r2, [r3, #8]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009568:	88fb      	ldrh	r3, [r7, #6]
 800956a:	2b09      	cmp	r3, #9
 800956c:	d95f      	bls.n	800962e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800956e:	2309      	movs	r3, #9
 8009570:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009572:	2300      	movs	r3, #0
 8009574:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009576:	e051      	b.n	800961c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009578:	f107 0316 	add.w	r3, r7, #22
 800957c:	4619      	mov	r1, r3
 800957e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009580:	f000 f8e8 	bl	8009754 <USBH_GetNextDesc>
 8009584:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009588:	785b      	ldrb	r3, [r3, #1]
 800958a:	2b04      	cmp	r3, #4
 800958c:	d146      	bne.n	800961c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800958e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009592:	221a      	movs	r2, #26
 8009594:	fb02 f303 	mul.w	r3, r2, r3
 8009598:	3308      	adds	r3, #8
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	4413      	add	r3, r2
 800959e:	3302      	adds	r3, #2
 80095a0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80095a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80095a4:	69f8      	ldr	r0, [r7, #28]
 80095a6:	f000 f846 	bl	8009636 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80095aa:	2300      	movs	r3, #0
 80095ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80095b0:	2300      	movs	r3, #0
 80095b2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80095b4:	e022      	b.n	80095fc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80095b6:	f107 0316 	add.w	r3, r7, #22
 80095ba:	4619      	mov	r1, r3
 80095bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095be:	f000 f8c9 	bl	8009754 <USBH_GetNextDesc>
 80095c2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80095c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c6:	785b      	ldrb	r3, [r3, #1]
 80095c8:	2b05      	cmp	r3, #5
 80095ca:	d117      	bne.n	80095fc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80095cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095d0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80095d4:	3201      	adds	r2, #1
 80095d6:	00d2      	lsls	r2, r2, #3
 80095d8:	211a      	movs	r1, #26
 80095da:	fb01 f303 	mul.w	r3, r1, r3
 80095de:	4413      	add	r3, r2
 80095e0:	3308      	adds	r3, #8
 80095e2:	68fa      	ldr	r2, [r7, #12]
 80095e4:	4413      	add	r3, r2
 80095e6:	3304      	adds	r3, #4
 80095e8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80095ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80095ec:	69b8      	ldr	r0, [r7, #24]
 80095ee:	f000 f851 	bl	8009694 <USBH_ParseEPDesc>
            ep_ix++;
 80095f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80095f6:	3301      	adds	r3, #1
 80095f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80095fc:	69fb      	ldr	r3, [r7, #28]
 80095fe:	791b      	ldrb	r3, [r3, #4]
 8009600:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009604:	429a      	cmp	r2, r3
 8009606:	d204      	bcs.n	8009612 <USBH_ParseCfgDesc+0x120>
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	885a      	ldrh	r2, [r3, #2]
 800960c:	8afb      	ldrh	r3, [r7, #22]
 800960e:	429a      	cmp	r2, r3
 8009610:	d8d1      	bhi.n	80095b6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009612:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009616:	3301      	adds	r3, #1
 8009618:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800961c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009620:	2b01      	cmp	r3, #1
 8009622:	d804      	bhi.n	800962e <USBH_ParseCfgDesc+0x13c>
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	885a      	ldrh	r2, [r3, #2]
 8009628:	8afb      	ldrh	r3, [r7, #22]
 800962a:	429a      	cmp	r2, r3
 800962c:	d8a4      	bhi.n	8009578 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800962e:	bf00      	nop
 8009630:	3728      	adds	r7, #40	; 0x28
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009636:	b480      	push	{r7}
 8009638:	b083      	sub	sp, #12
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
 800963e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	781a      	ldrb	r2, [r3, #0]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	785a      	ldrb	r2, [r3, #1]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	789a      	ldrb	r2, [r3, #2]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	78da      	ldrb	r2, [r3, #3]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	791a      	ldrb	r2, [r3, #4]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	795a      	ldrb	r2, [r3, #5]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	799a      	ldrb	r2, [r3, #6]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	79da      	ldrb	r2, [r3, #7]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	7a1a      	ldrb	r2, [r3, #8]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	721a      	strb	r2, [r3, #8]
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	781a      	ldrb	r2, [r3, #0]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	785a      	ldrb	r2, [r3, #1]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	789a      	ldrb	r2, [r3, #2]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	78da      	ldrb	r2, [r3, #3]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	3304      	adds	r3, #4
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	b29a      	uxth	r2, r3
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	3305      	adds	r3, #5
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	021b      	lsls	r3, r3, #8
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	4313      	orrs	r3, r2
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	799a      	ldrb	r2, [r3, #6]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	719a      	strb	r2, [r3, #6]
}
 80096e2:	bf00      	nop
 80096e4:	370c      	adds	r7, #12
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr

080096ee <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80096ee:	b480      	push	{r7}
 80096f0:	b087      	sub	sp, #28
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	60f8      	str	r0, [r7, #12]
 80096f6:	60b9      	str	r1, [r7, #8]
 80096f8:	4613      	mov	r3, r2
 80096fa:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	3301      	adds	r3, #1
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	2b03      	cmp	r3, #3
 8009704:	d120      	bne.n	8009748 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	1e9a      	subs	r2, r3, #2
 800970c:	88fb      	ldrh	r3, [r7, #6]
 800970e:	4293      	cmp	r3, r2
 8009710:	bf28      	it	cs
 8009712:	4613      	movcs	r3, r2
 8009714:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	3302      	adds	r3, #2
 800971a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800971c:	2300      	movs	r3, #0
 800971e:	82fb      	strh	r3, [r7, #22]
 8009720:	e00b      	b.n	800973a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009722:	8afb      	ldrh	r3, [r7, #22]
 8009724:	68fa      	ldr	r2, [r7, #12]
 8009726:	4413      	add	r3, r2
 8009728:	781a      	ldrb	r2, [r3, #0]
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	3301      	adds	r3, #1
 8009732:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009734:	8afb      	ldrh	r3, [r7, #22]
 8009736:	3302      	adds	r3, #2
 8009738:	82fb      	strh	r3, [r7, #22]
 800973a:	8afa      	ldrh	r2, [r7, #22]
 800973c:	8abb      	ldrh	r3, [r7, #20]
 800973e:	429a      	cmp	r2, r3
 8009740:	d3ef      	bcc.n	8009722 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	2200      	movs	r2, #0
 8009746:	701a      	strb	r2, [r3, #0]
  }
}
 8009748:	bf00      	nop
 800974a:	371c      	adds	r7, #28
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009754:	b480      	push	{r7}
 8009756:	b085      	sub	sp, #20
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	881a      	ldrh	r2, [r3, #0]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	b29b      	uxth	r3, r3
 8009768:	4413      	add	r3, r2
 800976a:	b29a      	uxth	r2, r3
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4413      	add	r3, r2
 800977a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800977c:	68fb      	ldr	r3, [r7, #12]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3714      	adds	r7, #20
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr

0800978a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b086      	sub	sp, #24
 800978e:	af00      	add	r7, sp, #0
 8009790:	60f8      	str	r0, [r7, #12]
 8009792:	60b9      	str	r1, [r7, #8]
 8009794:	4613      	mov	r3, r2
 8009796:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009798:	2301      	movs	r3, #1
 800979a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	789b      	ldrb	r3, [r3, #2]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d002      	beq.n	80097aa <USBH_CtlReq+0x20>
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	d00f      	beq.n	80097c8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80097a8:	e027      	b.n	80097fa <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	88fa      	ldrh	r2, [r7, #6]
 80097b4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2201      	movs	r2, #1
 80097ba:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2202      	movs	r2, #2
 80097c0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80097c2:	2301      	movs	r3, #1
 80097c4:	75fb      	strb	r3, [r7, #23]
      break;
 80097c6:	e018      	b.n	80097fa <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	f000 f81b 	bl	8009804 <USBH_HandleControl>
 80097ce:	4603      	mov	r3, r0
 80097d0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80097d2:	7dfb      	ldrb	r3, [r7, #23]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d002      	beq.n	80097de <USBH_CtlReq+0x54>
 80097d8:	7dfb      	ldrb	r3, [r7, #23]
 80097da:	2b03      	cmp	r3, #3
 80097dc:	d106      	bne.n	80097ec <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2201      	movs	r2, #1
 80097e2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2200      	movs	r2, #0
 80097e8:	761a      	strb	r2, [r3, #24]
      break;
 80097ea:	e005      	b.n	80097f8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80097ec:	7dfb      	ldrb	r3, [r7, #23]
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	d102      	bne.n	80097f8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2201      	movs	r2, #1
 80097f6:	709a      	strb	r2, [r3, #2]
      break;
 80097f8:	bf00      	nop
  }
  return status;
 80097fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3718      	adds	r7, #24
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af02      	add	r7, sp, #8
 800980a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800980c:	2301      	movs	r3, #1
 800980e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009810:	2300      	movs	r3, #0
 8009812:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	7e1b      	ldrb	r3, [r3, #24]
 8009818:	3b01      	subs	r3, #1
 800981a:	2b0a      	cmp	r3, #10
 800981c:	f200 8156 	bhi.w	8009acc <USBH_HandleControl+0x2c8>
 8009820:	a201      	add	r2, pc, #4	; (adr r2, 8009828 <USBH_HandleControl+0x24>)
 8009822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009826:	bf00      	nop
 8009828:	08009855 	.word	0x08009855
 800982c:	0800986f 	.word	0x0800986f
 8009830:	080098d9 	.word	0x080098d9
 8009834:	080098ff 	.word	0x080098ff
 8009838:	08009937 	.word	0x08009937
 800983c:	08009961 	.word	0x08009961
 8009840:	080099b3 	.word	0x080099b3
 8009844:	080099d5 	.word	0x080099d5
 8009848:	08009a11 	.word	0x08009a11
 800984c:	08009a37 	.word	0x08009a37
 8009850:	08009a75 	.word	0x08009a75
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f103 0110 	add.w	r1, r3, #16
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	795b      	ldrb	r3, [r3, #5]
 800985e:	461a      	mov	r2, r3
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 f943 	bl	8009aec <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2202      	movs	r2, #2
 800986a:	761a      	strb	r2, [r3, #24]
      break;
 800986c:	e139      	b.n	8009ae2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	795b      	ldrb	r3, [r3, #5]
 8009872:	4619      	mov	r1, r3
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fcc5 	bl	800a204 <USBH_LL_GetURBState>
 800987a:	4603      	mov	r3, r0
 800987c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800987e:	7bbb      	ldrb	r3, [r7, #14]
 8009880:	2b01      	cmp	r3, #1
 8009882:	d11e      	bne.n	80098c2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	7c1b      	ldrb	r3, [r3, #16]
 8009888:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800988c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	8adb      	ldrh	r3, [r3, #22]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00a      	beq.n	80098ac <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009896:	7b7b      	ldrb	r3, [r7, #13]
 8009898:	2b80      	cmp	r3, #128	; 0x80
 800989a:	d103      	bne.n	80098a4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2203      	movs	r2, #3
 80098a0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80098a2:	e115      	b.n	8009ad0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2205      	movs	r2, #5
 80098a8:	761a      	strb	r2, [r3, #24]
      break;
 80098aa:	e111      	b.n	8009ad0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80098ac:	7b7b      	ldrb	r3, [r7, #13]
 80098ae:	2b80      	cmp	r3, #128	; 0x80
 80098b0:	d103      	bne.n	80098ba <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2209      	movs	r2, #9
 80098b6:	761a      	strb	r2, [r3, #24]
      break;
 80098b8:	e10a      	b.n	8009ad0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2207      	movs	r2, #7
 80098be:	761a      	strb	r2, [r3, #24]
      break;
 80098c0:	e106      	b.n	8009ad0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80098c2:	7bbb      	ldrb	r3, [r7, #14]
 80098c4:	2b04      	cmp	r3, #4
 80098c6:	d003      	beq.n	80098d0 <USBH_HandleControl+0xcc>
 80098c8:	7bbb      	ldrb	r3, [r7, #14]
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	f040 8100 	bne.w	8009ad0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	220b      	movs	r2, #11
 80098d4:	761a      	strb	r2, [r3, #24]
      break;
 80098d6:	e0fb      	b.n	8009ad0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80098de:	b29a      	uxth	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6899      	ldr	r1, [r3, #8]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	899a      	ldrh	r2, [r3, #12]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	791b      	ldrb	r3, [r3, #4]
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 f93a 	bl	8009b6a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2204      	movs	r2, #4
 80098fa:	761a      	strb	r2, [r3, #24]
      break;
 80098fc:	e0f1      	b.n	8009ae2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	791b      	ldrb	r3, [r3, #4]
 8009902:	4619      	mov	r1, r3
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 fc7d 	bl	800a204 <USBH_LL_GetURBState>
 800990a:	4603      	mov	r3, r0
 800990c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800990e:	7bbb      	ldrb	r3, [r7, #14]
 8009910:	2b01      	cmp	r3, #1
 8009912:	d102      	bne.n	800991a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2209      	movs	r2, #9
 8009918:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800991a:	7bbb      	ldrb	r3, [r7, #14]
 800991c:	2b05      	cmp	r3, #5
 800991e:	d102      	bne.n	8009926 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009920:	2303      	movs	r3, #3
 8009922:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009924:	e0d6      	b.n	8009ad4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009926:	7bbb      	ldrb	r3, [r7, #14]
 8009928:	2b04      	cmp	r3, #4
 800992a:	f040 80d3 	bne.w	8009ad4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	220b      	movs	r2, #11
 8009932:	761a      	strb	r2, [r3, #24]
      break;
 8009934:	e0ce      	b.n	8009ad4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6899      	ldr	r1, [r3, #8]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	899a      	ldrh	r2, [r3, #12]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	795b      	ldrb	r3, [r3, #5]
 8009942:	2001      	movs	r0, #1
 8009944:	9000      	str	r0, [sp, #0]
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 f8ea 	bl	8009b20 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009952:	b29a      	uxth	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2206      	movs	r2, #6
 800995c:	761a      	strb	r2, [r3, #24]
      break;
 800995e:	e0c0      	b.n	8009ae2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	795b      	ldrb	r3, [r3, #5]
 8009964:	4619      	mov	r1, r3
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fc4c 	bl	800a204 <USBH_LL_GetURBState>
 800996c:	4603      	mov	r3, r0
 800996e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009970:	7bbb      	ldrb	r3, [r7, #14]
 8009972:	2b01      	cmp	r3, #1
 8009974:	d103      	bne.n	800997e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2207      	movs	r2, #7
 800997a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800997c:	e0ac      	b.n	8009ad8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800997e:	7bbb      	ldrb	r3, [r7, #14]
 8009980:	2b05      	cmp	r3, #5
 8009982:	d105      	bne.n	8009990 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	220c      	movs	r2, #12
 8009988:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800998a:	2303      	movs	r3, #3
 800998c:	73fb      	strb	r3, [r7, #15]
      break;
 800998e:	e0a3      	b.n	8009ad8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009990:	7bbb      	ldrb	r3, [r7, #14]
 8009992:	2b02      	cmp	r3, #2
 8009994:	d103      	bne.n	800999e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2205      	movs	r2, #5
 800999a:	761a      	strb	r2, [r3, #24]
      break;
 800999c:	e09c      	b.n	8009ad8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800999e:	7bbb      	ldrb	r3, [r7, #14]
 80099a0:	2b04      	cmp	r3, #4
 80099a2:	f040 8099 	bne.w	8009ad8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	220b      	movs	r2, #11
 80099aa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80099ac:	2302      	movs	r3, #2
 80099ae:	73fb      	strb	r3, [r7, #15]
      break;
 80099b0:	e092      	b.n	8009ad8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	791b      	ldrb	r3, [r3, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	2100      	movs	r1, #0
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 f8d5 	bl	8009b6a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80099c6:	b29a      	uxth	r2, r3
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2208      	movs	r2, #8
 80099d0:	761a      	strb	r2, [r3, #24]

      break;
 80099d2:	e086      	b.n	8009ae2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	791b      	ldrb	r3, [r3, #4]
 80099d8:	4619      	mov	r1, r3
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 fc12 	bl	800a204 <USBH_LL_GetURBState>
 80099e0:	4603      	mov	r3, r0
 80099e2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80099e4:	7bbb      	ldrb	r3, [r7, #14]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d105      	bne.n	80099f6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	220d      	movs	r2, #13
 80099ee:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80099f0:	2300      	movs	r3, #0
 80099f2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80099f4:	e072      	b.n	8009adc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80099f6:	7bbb      	ldrb	r3, [r7, #14]
 80099f8:	2b04      	cmp	r3, #4
 80099fa:	d103      	bne.n	8009a04 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	220b      	movs	r2, #11
 8009a00:	761a      	strb	r2, [r3, #24]
      break;
 8009a02:	e06b      	b.n	8009adc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009a04:	7bbb      	ldrb	r3, [r7, #14]
 8009a06:	2b05      	cmp	r3, #5
 8009a08:	d168      	bne.n	8009adc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	73fb      	strb	r3, [r7, #15]
      break;
 8009a0e:	e065      	b.n	8009adc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	795b      	ldrb	r3, [r3, #5]
 8009a14:	2201      	movs	r2, #1
 8009a16:	9200      	str	r2, [sp, #0]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 f87f 	bl	8009b20 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009a28:	b29a      	uxth	r2, r3
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	220a      	movs	r2, #10
 8009a32:	761a      	strb	r2, [r3, #24]
      break;
 8009a34:	e055      	b.n	8009ae2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	795b      	ldrb	r3, [r3, #5]
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fbe1 	bl	800a204 <USBH_LL_GetURBState>
 8009a42:	4603      	mov	r3, r0
 8009a44:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009a46:	7bbb      	ldrb	r3, [r7, #14]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d105      	bne.n	8009a58 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	220d      	movs	r2, #13
 8009a54:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009a56:	e043      	b.n	8009ae0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009a58:	7bbb      	ldrb	r3, [r7, #14]
 8009a5a:	2b02      	cmp	r3, #2
 8009a5c:	d103      	bne.n	8009a66 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2209      	movs	r2, #9
 8009a62:	761a      	strb	r2, [r3, #24]
      break;
 8009a64:	e03c      	b.n	8009ae0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009a66:	7bbb      	ldrb	r3, [r7, #14]
 8009a68:	2b04      	cmp	r3, #4
 8009a6a:	d139      	bne.n	8009ae0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	220b      	movs	r2, #11
 8009a70:	761a      	strb	r2, [r3, #24]
      break;
 8009a72:	e035      	b.n	8009ae0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	7e5b      	ldrb	r3, [r3, #25]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	b2da      	uxtb	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	765a      	strb	r2, [r3, #25]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	7e5b      	ldrb	r3, [r3, #25]
 8009a84:	2b02      	cmp	r3, #2
 8009a86:	d806      	bhi.n	8009a96 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2201      	movs	r2, #1
 8009a92:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009a94:	e025      	b.n	8009ae2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a9c:	2106      	movs	r1, #6
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	795b      	ldrb	r3, [r3, #5]
 8009aac:	4619      	mov	r1, r3
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 f90c 	bl	8009ccc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	791b      	ldrb	r3, [r3, #4]
 8009ab8:	4619      	mov	r1, r3
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 f906 	bl	8009ccc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009ac6:	2302      	movs	r3, #2
 8009ac8:	73fb      	strb	r3, [r7, #15]
      break;
 8009aca:	e00a      	b.n	8009ae2 <USBH_HandleControl+0x2de>

    default:
      break;
 8009acc:	bf00      	nop
 8009ace:	e008      	b.n	8009ae2 <USBH_HandleControl+0x2de>
      break;
 8009ad0:	bf00      	nop
 8009ad2:	e006      	b.n	8009ae2 <USBH_HandleControl+0x2de>
      break;
 8009ad4:	bf00      	nop
 8009ad6:	e004      	b.n	8009ae2 <USBH_HandleControl+0x2de>
      break;
 8009ad8:	bf00      	nop
 8009ada:	e002      	b.n	8009ae2 <USBH_HandleControl+0x2de>
      break;
 8009adc:	bf00      	nop
 8009ade:	e000      	b.n	8009ae2 <USBH_HandleControl+0x2de>
      break;
 8009ae0:	bf00      	nop
  }

  return status;
 8009ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b088      	sub	sp, #32
 8009af0:	af04      	add	r7, sp, #16
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	4613      	mov	r3, r2
 8009af8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009afa:	79f9      	ldrb	r1, [r7, #7]
 8009afc:	2300      	movs	r3, #0
 8009afe:	9303      	str	r3, [sp, #12]
 8009b00:	2308      	movs	r3, #8
 8009b02:	9302      	str	r3, [sp, #8]
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	9301      	str	r3, [sp, #4]
 8009b08:	2300      	movs	r3, #0
 8009b0a:	9300      	str	r3, [sp, #0]
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	2200      	movs	r2, #0
 8009b10:	68f8      	ldr	r0, [r7, #12]
 8009b12:	f000 fb46 	bl	800a1a2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009b16:	2300      	movs	r3, #0
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3710      	adds	r7, #16
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b088      	sub	sp, #32
 8009b24:	af04      	add	r7, sp, #16
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	60b9      	str	r1, [r7, #8]
 8009b2a:	4611      	mov	r1, r2
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	460b      	mov	r3, r1
 8009b30:	80fb      	strh	r3, [r7, #6]
 8009b32:	4613      	mov	r3, r2
 8009b34:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d001      	beq.n	8009b44 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009b40:	2300      	movs	r3, #0
 8009b42:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009b44:	7979      	ldrb	r1, [r7, #5]
 8009b46:	7e3b      	ldrb	r3, [r7, #24]
 8009b48:	9303      	str	r3, [sp, #12]
 8009b4a:	88fb      	ldrh	r3, [r7, #6]
 8009b4c:	9302      	str	r3, [sp, #8]
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	9301      	str	r3, [sp, #4]
 8009b52:	2301      	movs	r3, #1
 8009b54:	9300      	str	r3, [sp, #0]
 8009b56:	2300      	movs	r3, #0
 8009b58:	2200      	movs	r2, #0
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f000 fb21 	bl	800a1a2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b088      	sub	sp, #32
 8009b6e:	af04      	add	r7, sp, #16
 8009b70:	60f8      	str	r0, [r7, #12]
 8009b72:	60b9      	str	r1, [r7, #8]
 8009b74:	4611      	mov	r1, r2
 8009b76:	461a      	mov	r2, r3
 8009b78:	460b      	mov	r3, r1
 8009b7a:	80fb      	strh	r3, [r7, #6]
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009b80:	7979      	ldrb	r1, [r7, #5]
 8009b82:	2300      	movs	r3, #0
 8009b84:	9303      	str	r3, [sp, #12]
 8009b86:	88fb      	ldrh	r3, [r7, #6]
 8009b88:	9302      	str	r3, [sp, #8]
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	9301      	str	r3, [sp, #4]
 8009b8e:	2301      	movs	r3, #1
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	2300      	movs	r3, #0
 8009b94:	2201      	movs	r2, #1
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f000 fb03 	bl	800a1a2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009b9c:	2300      	movs	r3, #0

}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b088      	sub	sp, #32
 8009baa:	af04      	add	r7, sp, #16
 8009bac:	60f8      	str	r0, [r7, #12]
 8009bae:	60b9      	str	r1, [r7, #8]
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	80fb      	strh	r3, [r7, #6]
 8009bb8:	4613      	mov	r3, r2
 8009bba:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d001      	beq.n	8009bca <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009bca:	7979      	ldrb	r1, [r7, #5]
 8009bcc:	7e3b      	ldrb	r3, [r7, #24]
 8009bce:	9303      	str	r3, [sp, #12]
 8009bd0:	88fb      	ldrh	r3, [r7, #6]
 8009bd2:	9302      	str	r3, [sp, #8]
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	9301      	str	r3, [sp, #4]
 8009bd8:	2301      	movs	r3, #1
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	2302      	movs	r3, #2
 8009bde:	2200      	movs	r2, #0
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f000 fade 	bl	800a1a2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3710      	adds	r7, #16
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b088      	sub	sp, #32
 8009bf4:	af04      	add	r7, sp, #16
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	4611      	mov	r1, r2
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	460b      	mov	r3, r1
 8009c00:	80fb      	strh	r3, [r7, #6]
 8009c02:	4613      	mov	r3, r2
 8009c04:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009c06:	7979      	ldrb	r1, [r7, #5]
 8009c08:	2300      	movs	r3, #0
 8009c0a:	9303      	str	r3, [sp, #12]
 8009c0c:	88fb      	ldrh	r3, [r7, #6]
 8009c0e:	9302      	str	r3, [sp, #8]
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	9301      	str	r3, [sp, #4]
 8009c14:	2301      	movs	r3, #1
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	2302      	movs	r3, #2
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f000 fac0 	bl	800a1a2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009c22:	2300      	movs	r3, #0
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3710      	adds	r7, #16
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b086      	sub	sp, #24
 8009c30:	af04      	add	r7, sp, #16
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	4608      	mov	r0, r1
 8009c36:	4611      	mov	r1, r2
 8009c38:	461a      	mov	r2, r3
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	70fb      	strb	r3, [r7, #3]
 8009c3e:	460b      	mov	r3, r1
 8009c40:	70bb      	strb	r3, [r7, #2]
 8009c42:	4613      	mov	r3, r2
 8009c44:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009c46:	7878      	ldrb	r0, [r7, #1]
 8009c48:	78ba      	ldrb	r2, [r7, #2]
 8009c4a:	78f9      	ldrb	r1, [r7, #3]
 8009c4c:	8b3b      	ldrh	r3, [r7, #24]
 8009c4e:	9302      	str	r3, [sp, #8]
 8009c50:	7d3b      	ldrb	r3, [r7, #20]
 8009c52:	9301      	str	r3, [sp, #4]
 8009c54:	7c3b      	ldrb	r3, [r7, #16]
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	4603      	mov	r3, r0
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 fa53 	bl	800a106 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3708      	adds	r7, #8
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b082      	sub	sp, #8
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
 8009c72:	460b      	mov	r3, r1
 8009c74:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009c76:	78fb      	ldrb	r3, [r7, #3]
 8009c78:	4619      	mov	r1, r3
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fa72 	bl	800a164 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3708      	adds	r7, #8
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b084      	sub	sp, #16
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
 8009c92:	460b      	mov	r3, r1
 8009c94:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 f836 	bl	8009d08 <USBH_GetFreePipe>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009ca0:	89fb      	ldrh	r3, [r7, #14]
 8009ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d00a      	beq.n	8009cc0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009caa:	78fa      	ldrb	r2, [r7, #3]
 8009cac:	89fb      	ldrh	r3, [r7, #14]
 8009cae:	f003 030f 	and.w	r3, r3, #15
 8009cb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009cb6:	6879      	ldr	r1, [r7, #4]
 8009cb8:	33e0      	adds	r3, #224	; 0xe0
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	440b      	add	r3, r1
 8009cbe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009cc0:	89fb      	ldrh	r3, [r7, #14]
 8009cc2:	b2db      	uxtb	r3, r3
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009cd8:	78fb      	ldrb	r3, [r7, #3]
 8009cda:	2b0a      	cmp	r3, #10
 8009cdc:	d80d      	bhi.n	8009cfa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009cde:	78fb      	ldrb	r3, [r7, #3]
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	33e0      	adds	r3, #224	; 0xe0
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	4413      	add	r3, r2
 8009ce8:	685a      	ldr	r2, [r3, #4]
 8009cea:	78fb      	ldrb	r3, [r7, #3]
 8009cec:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009cf0:	6879      	ldr	r1, [r7, #4]
 8009cf2:	33e0      	adds	r3, #224	; 0xe0
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	440b      	add	r3, r1
 8009cf8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	370c      	adds	r7, #12
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009d10:	2300      	movs	r3, #0
 8009d12:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009d14:	2300      	movs	r3, #0
 8009d16:	73fb      	strb	r3, [r7, #15]
 8009d18:	e00f      	b.n	8009d3a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009d1a:	7bfb      	ldrb	r3, [r7, #15]
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	33e0      	adds	r3, #224	; 0xe0
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	4413      	add	r3, r2
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d102      	bne.n	8009d34 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009d2e:	7bfb      	ldrb	r3, [r7, #15]
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	e007      	b.n	8009d44 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009d34:	7bfb      	ldrb	r3, [r7, #15]
 8009d36:	3301      	adds	r3, #1
 8009d38:	73fb      	strb	r3, [r7, #15]
 8009d3a:	7bfb      	ldrb	r3, [r7, #15]
 8009d3c:	2b0a      	cmp	r3, #10
 8009d3e:	d9ec      	bls.n	8009d1a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009d40:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3714      	adds	r7, #20
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009d54:	2201      	movs	r2, #1
 8009d56:	490e      	ldr	r1, [pc, #56]	; (8009d90 <MX_USB_HOST_Init+0x40>)
 8009d58:	480e      	ldr	r0, [pc, #56]	; (8009d94 <MX_USB_HOST_Init+0x44>)
 8009d5a:	f7fe fca1 	bl	80086a0 <USBH_Init>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d001      	beq.n	8009d68 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009d64:	f7f8 f9dc 	bl	8002120 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009d68:	490b      	ldr	r1, [pc, #44]	; (8009d98 <MX_USB_HOST_Init+0x48>)
 8009d6a:	480a      	ldr	r0, [pc, #40]	; (8009d94 <MX_USB_HOST_Init+0x44>)
 8009d6c:	f7fe fd26 	bl	80087bc <USBH_RegisterClass>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d001      	beq.n	8009d7a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009d76:	f7f8 f9d3 	bl	8002120 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009d7a:	4806      	ldr	r0, [pc, #24]	; (8009d94 <MX_USB_HOST_Init+0x44>)
 8009d7c:	f7fe fdaa 	bl	80088d4 <USBH_Start>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d001      	beq.n	8009d8a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009d86:	f7f8 f9cb 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009d8a:	bf00      	nop
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	08009db1 	.word	0x08009db1
 8009d94:	2000021c 	.word	0x2000021c
 8009d98:	20000014 	.word	0x20000014

08009d9c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009da0:	4802      	ldr	r0, [pc, #8]	; (8009dac <MX_USB_HOST_Process+0x10>)
 8009da2:	f7fe fda7 	bl	80088f4 <USBH_Process>
}
 8009da6:	bf00      	nop
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	2000021c 	.word	0x2000021c

08009db0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	460b      	mov	r3, r1
 8009dba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009dbc:	78fb      	ldrb	r3, [r7, #3]
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	2b04      	cmp	r3, #4
 8009dc2:	d819      	bhi.n	8009df8 <USBH_UserProcess+0x48>
 8009dc4:	a201      	add	r2, pc, #4	; (adr r2, 8009dcc <USBH_UserProcess+0x1c>)
 8009dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dca:	bf00      	nop
 8009dcc:	08009df9 	.word	0x08009df9
 8009dd0:	08009de9 	.word	0x08009de9
 8009dd4:	08009df9 	.word	0x08009df9
 8009dd8:	08009df1 	.word	0x08009df1
 8009ddc:	08009de1 	.word	0x08009de1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009de0:	4b09      	ldr	r3, [pc, #36]	; (8009e08 <USBH_UserProcess+0x58>)
 8009de2:	2203      	movs	r2, #3
 8009de4:	701a      	strb	r2, [r3, #0]
  break;
 8009de6:	e008      	b.n	8009dfa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009de8:	4b07      	ldr	r3, [pc, #28]	; (8009e08 <USBH_UserProcess+0x58>)
 8009dea:	2202      	movs	r2, #2
 8009dec:	701a      	strb	r2, [r3, #0]
  break;
 8009dee:	e004      	b.n	8009dfa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009df0:	4b05      	ldr	r3, [pc, #20]	; (8009e08 <USBH_UserProcess+0x58>)
 8009df2:	2201      	movs	r2, #1
 8009df4:	701a      	strb	r2, [r3, #0]
  break;
 8009df6:	e000      	b.n	8009dfa <USBH_UserProcess+0x4a>

  default:
  break;
 8009df8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009dfa:	bf00      	nop
 8009dfc:	370c      	adds	r7, #12
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	200000bc 	.word	0x200000bc

08009e0c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b08a      	sub	sp, #40	; 0x28
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e14:	f107 0314 	add.w	r3, r7, #20
 8009e18:	2200      	movs	r2, #0
 8009e1a:	601a      	str	r2, [r3, #0]
 8009e1c:	605a      	str	r2, [r3, #4]
 8009e1e:	609a      	str	r2, [r3, #8]
 8009e20:	60da      	str	r2, [r3, #12]
 8009e22:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e2c:	d147      	bne.n	8009ebe <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e2e:	2300      	movs	r3, #0
 8009e30:	613b      	str	r3, [r7, #16]
 8009e32:	4b25      	ldr	r3, [pc, #148]	; (8009ec8 <HAL_HCD_MspInit+0xbc>)
 8009e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e36:	4a24      	ldr	r2, [pc, #144]	; (8009ec8 <HAL_HCD_MspInit+0xbc>)
 8009e38:	f043 0301 	orr.w	r3, r3, #1
 8009e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8009e3e:	4b22      	ldr	r3, [pc, #136]	; (8009ec8 <HAL_HCD_MspInit+0xbc>)
 8009e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e42:	f003 0301 	and.w	r3, r3, #1
 8009e46:	613b      	str	r3, [r7, #16]
 8009e48:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009e4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009e50:	2300      	movs	r3, #0
 8009e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e54:	2300      	movs	r3, #0
 8009e56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009e58:	f107 0314 	add.w	r3, r7, #20
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	481b      	ldr	r0, [pc, #108]	; (8009ecc <HAL_HCD_MspInit+0xc0>)
 8009e60:	f7f8 fdae 	bl	80029c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009e64:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e6a:	2302      	movs	r3, #2
 8009e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e72:	2300      	movs	r3, #0
 8009e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009e76:	230a      	movs	r3, #10
 8009e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e7a:	f107 0314 	add.w	r3, r7, #20
 8009e7e:	4619      	mov	r1, r3
 8009e80:	4812      	ldr	r0, [pc, #72]	; (8009ecc <HAL_HCD_MspInit+0xc0>)
 8009e82:	f7f8 fd9d 	bl	80029c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009e86:	4b10      	ldr	r3, [pc, #64]	; (8009ec8 <HAL_HCD_MspInit+0xbc>)
 8009e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e8a:	4a0f      	ldr	r2, [pc, #60]	; (8009ec8 <HAL_HCD_MspInit+0xbc>)
 8009e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e90:	6353      	str	r3, [r2, #52]	; 0x34
 8009e92:	2300      	movs	r3, #0
 8009e94:	60fb      	str	r3, [r7, #12]
 8009e96:	4b0c      	ldr	r3, [pc, #48]	; (8009ec8 <HAL_HCD_MspInit+0xbc>)
 8009e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e9a:	4a0b      	ldr	r2, [pc, #44]	; (8009ec8 <HAL_HCD_MspInit+0xbc>)
 8009e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8009ea2:	4b09      	ldr	r3, [pc, #36]	; (8009ec8 <HAL_HCD_MspInit+0xbc>)
 8009ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009eaa:	60fb      	str	r3, [r7, #12]
 8009eac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009eae:	2200      	movs	r2, #0
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	2043      	movs	r0, #67	; 0x43
 8009eb4:	f7f8 fd4d 	bl	8002952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009eb8:	2043      	movs	r0, #67	; 0x43
 8009eba:	f7f8 fd66 	bl	800298a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009ebe:	bf00      	nop
 8009ec0:	3728      	adds	r7, #40	; 0x28
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	40023800 	.word	0x40023800
 8009ecc:	40020000 	.word	0x40020000

08009ed0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7ff f8db 	bl	800909a <USBH_LL_IncTimer>
}
 8009ee4:	bf00      	nop
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7ff f913 	bl	8009126 <USBH_LL_Connect>
}
 8009f00:	bf00      	nop
 8009f02:	3708      	adds	r7, #8
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7ff f91c 	bl	8009154 <USBH_LL_Disconnect>
}
 8009f1c:	bf00      	nop
 8009f1e:	3708      	adds	r7, #8
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	70fb      	strb	r3, [r7, #3]
 8009f30:	4613      	mov	r3, r2
 8009f32:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009f34:	bf00      	nop
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7ff f8cd 	bl	80090ee <USBH_LL_PortEnabled>
}
 8009f54:	bf00      	nop
 8009f56:	3708      	adds	r7, #8
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7ff f8cd 	bl	800910a <USBH_LL_PortDisabled>
}
 8009f70:	bf00      	nop
 8009f72:	3708      	adds	r7, #8
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d12a      	bne.n	8009fe0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009f8a:	4a18      	ldr	r2, [pc, #96]	; (8009fec <USBH_LL_Init+0x74>)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4a15      	ldr	r2, [pc, #84]	; (8009fec <USBH_LL_Init+0x74>)
 8009f96:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009f9a:	4b14      	ldr	r3, [pc, #80]	; (8009fec <USBH_LL_Init+0x74>)
 8009f9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009fa0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009fa2:	4b12      	ldr	r3, [pc, #72]	; (8009fec <USBH_LL_Init+0x74>)
 8009fa4:	2208      	movs	r2, #8
 8009fa6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009fa8:	4b10      	ldr	r3, [pc, #64]	; (8009fec <USBH_LL_Init+0x74>)
 8009faa:	2201      	movs	r2, #1
 8009fac:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009fae:	4b0f      	ldr	r3, [pc, #60]	; (8009fec <USBH_LL_Init+0x74>)
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009fb4:	4b0d      	ldr	r3, [pc, #52]	; (8009fec <USBH_LL_Init+0x74>)
 8009fb6:	2202      	movs	r2, #2
 8009fb8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009fba:	4b0c      	ldr	r3, [pc, #48]	; (8009fec <USBH_LL_Init+0x74>)
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009fc0:	480a      	ldr	r0, [pc, #40]	; (8009fec <USBH_LL_Init+0x74>)
 8009fc2:	f7f8 fee4 	bl	8002d8e <HAL_HCD_Init>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d001      	beq.n	8009fd0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009fcc:	f7f8 f8a8 	bl	8002120 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009fd0:	4806      	ldr	r0, [pc, #24]	; (8009fec <USBH_LL_Init+0x74>)
 8009fd2:	f7f9 fac1 	bl	8003558 <HAL_HCD_GetCurrentFrame>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	4619      	mov	r1, r3
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f7ff f84e 	bl	800907c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3708      	adds	r7, #8
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop
 8009fec:	200005f4 	.word	0x200005f4

08009ff0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a006:	4618      	mov	r0, r3
 800a008:	f7f9 fa30 	bl	800346c <HAL_HCD_Start>
 800a00c:	4603      	mov	r3, r0
 800a00e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a010:	7bfb      	ldrb	r3, [r7, #15]
 800a012:	4618      	mov	r0, r3
 800a014:	f000 f95c 	bl	800a2d0 <USBH_Get_USB_Status>
 800a018:	4603      	mov	r3, r0
 800a01a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a01c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b084      	sub	sp, #16
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a032:	2300      	movs	r3, #0
 800a034:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7f9 fa38 	bl	80034b2 <HAL_HCD_Stop>
 800a042:	4603      	mov	r3, r0
 800a044:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a046:	7bfb      	ldrb	r3, [r7, #15]
 800a048:	4618      	mov	r0, r3
 800a04a:	f000 f941 	bl	800a2d0 <USBH_Get_USB_Status>
 800a04e:	4603      	mov	r3, r0
 800a050:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a052:	7bbb      	ldrb	r3, [r7, #14]
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a064:	2301      	movs	r3, #1
 800a066:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a06e:	4618      	mov	r0, r3
 800a070:	f7f9 fa80 	bl	8003574 <HAL_HCD_GetCurrentSpeed>
 800a074:	4603      	mov	r3, r0
 800a076:	2b02      	cmp	r3, #2
 800a078:	d00c      	beq.n	800a094 <USBH_LL_GetSpeed+0x38>
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	d80d      	bhi.n	800a09a <USBH_LL_GetSpeed+0x3e>
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d002      	beq.n	800a088 <USBH_LL_GetSpeed+0x2c>
 800a082:	2b01      	cmp	r3, #1
 800a084:	d003      	beq.n	800a08e <USBH_LL_GetSpeed+0x32>
 800a086:	e008      	b.n	800a09a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a088:	2300      	movs	r3, #0
 800a08a:	73fb      	strb	r3, [r7, #15]
    break;
 800a08c:	e008      	b.n	800a0a0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a08e:	2301      	movs	r3, #1
 800a090:	73fb      	strb	r3, [r7, #15]
    break;
 800a092:	e005      	b.n	800a0a0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a094:	2302      	movs	r3, #2
 800a096:	73fb      	strb	r3, [r7, #15]
    break;
 800a098:	e002      	b.n	800a0a0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a09a:	2301      	movs	r3, #1
 800a09c:	73fb      	strb	r3, [r7, #15]
    break;
 800a09e:	bf00      	nop
  }
  return  speed;
 800a0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b084      	sub	sp, #16
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7f9 fa13 	bl	80034ec <HAL_HCD_ResetPort>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a0ca:	7bfb      	ldrb	r3, [r7, #15]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f000 f8ff 	bl	800a2d0 <USBH_Get_USB_Status>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3710      	adds	r7, #16
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a0f2:	78fa      	ldrb	r2, [r7, #3]
 800a0f4:	4611      	mov	r1, r2
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7f9 fa1a 	bl	8003530 <HAL_HCD_HC_GetXferCount>
 800a0fc:	4603      	mov	r3, r0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3708      	adds	r7, #8
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a106:	b590      	push	{r4, r7, lr}
 800a108:	b089      	sub	sp, #36	; 0x24
 800a10a:	af04      	add	r7, sp, #16
 800a10c:	6078      	str	r0, [r7, #4]
 800a10e:	4608      	mov	r0, r1
 800a110:	4611      	mov	r1, r2
 800a112:	461a      	mov	r2, r3
 800a114:	4603      	mov	r3, r0
 800a116:	70fb      	strb	r3, [r7, #3]
 800a118:	460b      	mov	r3, r1
 800a11a:	70bb      	strb	r3, [r7, #2]
 800a11c:	4613      	mov	r3, r2
 800a11e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a120:	2300      	movs	r3, #0
 800a122:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a124:	2300      	movs	r3, #0
 800a126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a12e:	787c      	ldrb	r4, [r7, #1]
 800a130:	78ba      	ldrb	r2, [r7, #2]
 800a132:	78f9      	ldrb	r1, [r7, #3]
 800a134:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a136:	9302      	str	r3, [sp, #8]
 800a138:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a13c:	9301      	str	r3, [sp, #4]
 800a13e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a142:	9300      	str	r3, [sp, #0]
 800a144:	4623      	mov	r3, r4
 800a146:	f7f8 fe84 	bl	8002e52 <HAL_HCD_HC_Init>
 800a14a:	4603      	mov	r3, r0
 800a14c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a14e:	7bfb      	ldrb	r3, [r7, #15]
 800a150:	4618      	mov	r0, r3
 800a152:	f000 f8bd 	bl	800a2d0 <USBH_Get_USB_Status>
 800a156:	4603      	mov	r3, r0
 800a158:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a15a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3714      	adds	r7, #20
 800a160:	46bd      	mov	sp, r7
 800a162:	bd90      	pop	{r4, r7, pc}

0800a164 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	460b      	mov	r3, r1
 800a16e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a170:	2300      	movs	r3, #0
 800a172:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a174:	2300      	movs	r3, #0
 800a176:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a17e:	78fa      	ldrb	r2, [r7, #3]
 800a180:	4611      	mov	r1, r2
 800a182:	4618      	mov	r0, r3
 800a184:	f7f8 fef4 	bl	8002f70 <HAL_HCD_HC_Halt>
 800a188:	4603      	mov	r3, r0
 800a18a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
 800a18e:	4618      	mov	r0, r3
 800a190:	f000 f89e 	bl	800a2d0 <USBH_Get_USB_Status>
 800a194:	4603      	mov	r3, r0
 800a196:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a198:	7bbb      	ldrb	r3, [r7, #14]
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3710      	adds	r7, #16
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a1a2:	b590      	push	{r4, r7, lr}
 800a1a4:	b089      	sub	sp, #36	; 0x24
 800a1a6:	af04      	add	r7, sp, #16
 800a1a8:	6078      	str	r0, [r7, #4]
 800a1aa:	4608      	mov	r0, r1
 800a1ac:	4611      	mov	r1, r2
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	70fb      	strb	r3, [r7, #3]
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	70bb      	strb	r3, [r7, #2]
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a1ca:	787c      	ldrb	r4, [r7, #1]
 800a1cc:	78ba      	ldrb	r2, [r7, #2]
 800a1ce:	78f9      	ldrb	r1, [r7, #3]
 800a1d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a1d4:	9303      	str	r3, [sp, #12]
 800a1d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a1d8:	9302      	str	r3, [sp, #8]
 800a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1dc:	9301      	str	r3, [sp, #4]
 800a1de:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a1e2:	9300      	str	r3, [sp, #0]
 800a1e4:	4623      	mov	r3, r4
 800a1e6:	f7f8 fee7 	bl	8002fb8 <HAL_HCD_HC_SubmitRequest>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a1ee:	7bfb      	ldrb	r3, [r7, #15]
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f000 f86d 	bl	800a2d0 <USBH_Get_USB_Status>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3714      	adds	r7, #20
 800a200:	46bd      	mov	sp, r7
 800a202:	bd90      	pop	{r4, r7, pc}

0800a204 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	460b      	mov	r3, r1
 800a20e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a216:	78fa      	ldrb	r2, [r7, #3]
 800a218:	4611      	mov	r1, r2
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7f9 f974 	bl	8003508 <HAL_HCD_HC_GetURBState>
 800a220:	4603      	mov	r3, r0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3708      	adds	r7, #8
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b082      	sub	sp, #8
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	460b      	mov	r3, r1
 800a234:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d103      	bne.n	800a248 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a240:	78fb      	ldrb	r3, [r7, #3]
 800a242:	4618      	mov	r0, r3
 800a244:	f000 f870 	bl	800a328 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a248:	20c8      	movs	r0, #200	; 0xc8
 800a24a:	f7f8 fa83 	bl	8002754 <HAL_Delay>
  return USBH_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	3708      	adds	r7, #8
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	460b      	mov	r3, r1
 800a262:	70fb      	strb	r3, [r7, #3]
 800a264:	4613      	mov	r3, r2
 800a266:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a26e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a270:	78fb      	ldrb	r3, [r7, #3]
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	212c      	movs	r1, #44	; 0x2c
 800a276:	fb01 f303 	mul.w	r3, r1, r3
 800a27a:	4413      	add	r3, r2
 800a27c:	333b      	adds	r3, #59	; 0x3b
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d009      	beq.n	800a298 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a284:	78fb      	ldrb	r3, [r7, #3]
 800a286:	68fa      	ldr	r2, [r7, #12]
 800a288:	212c      	movs	r1, #44	; 0x2c
 800a28a:	fb01 f303 	mul.w	r3, r1, r3
 800a28e:	4413      	add	r3, r2
 800a290:	3354      	adds	r3, #84	; 0x54
 800a292:	78ba      	ldrb	r2, [r7, #2]
 800a294:	701a      	strb	r2, [r3, #0]
 800a296:	e008      	b.n	800a2aa <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a298:	78fb      	ldrb	r3, [r7, #3]
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	212c      	movs	r1, #44	; 0x2c
 800a29e:	fb01 f303 	mul.w	r3, r1, r3
 800a2a2:	4413      	add	r3, r2
 800a2a4:	3355      	adds	r3, #85	; 0x55
 800a2a6:	78ba      	ldrb	r2, [r7, #2]
 800a2a8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3714      	adds	r7, #20
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f7f8 fa47 	bl	8002754 <HAL_Delay>
}
 800a2c6:	bf00      	nop
 800a2c8:	3708      	adds	r7, #8
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
	...

0800a2d0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a2de:	79fb      	ldrb	r3, [r7, #7]
 800a2e0:	2b03      	cmp	r3, #3
 800a2e2:	d817      	bhi.n	800a314 <USBH_Get_USB_Status+0x44>
 800a2e4:	a201      	add	r2, pc, #4	; (adr r2, 800a2ec <USBH_Get_USB_Status+0x1c>)
 800a2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ea:	bf00      	nop
 800a2ec:	0800a2fd 	.word	0x0800a2fd
 800a2f0:	0800a303 	.word	0x0800a303
 800a2f4:	0800a309 	.word	0x0800a309
 800a2f8:	0800a30f 	.word	0x0800a30f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a300:	e00b      	b.n	800a31a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a302:	2302      	movs	r3, #2
 800a304:	73fb      	strb	r3, [r7, #15]
    break;
 800a306:	e008      	b.n	800a31a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a308:	2301      	movs	r3, #1
 800a30a:	73fb      	strb	r3, [r7, #15]
    break;
 800a30c:	e005      	b.n	800a31a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a30e:	2302      	movs	r3, #2
 800a310:	73fb      	strb	r3, [r7, #15]
    break;
 800a312:	e002      	b.n	800a31a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a314:	2302      	movs	r3, #2
 800a316:	73fb      	strb	r3, [r7, #15]
    break;
 800a318:	bf00      	nop
  }
  return usb_status;
 800a31a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3714      	adds	r7, #20
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	4603      	mov	r3, r0
 800a330:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a332:	79fb      	ldrb	r3, [r7, #7]
 800a334:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a336:	79fb      	ldrb	r3, [r7, #7]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d102      	bne.n	800a342 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800a33c:	2301      	movs	r3, #1
 800a33e:	73fb      	strb	r3, [r7, #15]
 800a340:	e001      	b.n	800a346 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800a342:	2300      	movs	r3, #0
 800a344:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a346:	7bfb      	ldrb	r3, [r7, #15]
 800a348:	461a      	mov	r2, r3
 800a34a:	2101      	movs	r1, #1
 800a34c:	4803      	ldr	r0, [pc, #12]	; (800a35c <MX_DriverVbusFS+0x34>)
 800a34e:	f7f8 fceb 	bl	8002d28 <HAL_GPIO_WritePin>
}
 800a352:	bf00      	nop
 800a354:	3710      	adds	r7, #16
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	40020800 	.word	0x40020800

0800a360 <__errno>:
 800a360:	4b01      	ldr	r3, [pc, #4]	; (800a368 <__errno+0x8>)
 800a362:	6818      	ldr	r0, [r3, #0]
 800a364:	4770      	bx	lr
 800a366:	bf00      	nop
 800a368:	20000034 	.word	0x20000034

0800a36c <__libc_init_array>:
 800a36c:	b570      	push	{r4, r5, r6, lr}
 800a36e:	4d0d      	ldr	r5, [pc, #52]	; (800a3a4 <__libc_init_array+0x38>)
 800a370:	4c0d      	ldr	r4, [pc, #52]	; (800a3a8 <__libc_init_array+0x3c>)
 800a372:	1b64      	subs	r4, r4, r5
 800a374:	10a4      	asrs	r4, r4, #2
 800a376:	2600      	movs	r6, #0
 800a378:	42a6      	cmp	r6, r4
 800a37a:	d109      	bne.n	800a390 <__libc_init_array+0x24>
 800a37c:	4d0b      	ldr	r5, [pc, #44]	; (800a3ac <__libc_init_array+0x40>)
 800a37e:	4c0c      	ldr	r4, [pc, #48]	; (800a3b0 <__libc_init_array+0x44>)
 800a380:	f000 fc5e 	bl	800ac40 <_init>
 800a384:	1b64      	subs	r4, r4, r5
 800a386:	10a4      	asrs	r4, r4, #2
 800a388:	2600      	movs	r6, #0
 800a38a:	42a6      	cmp	r6, r4
 800a38c:	d105      	bne.n	800a39a <__libc_init_array+0x2e>
 800a38e:	bd70      	pop	{r4, r5, r6, pc}
 800a390:	f855 3b04 	ldr.w	r3, [r5], #4
 800a394:	4798      	blx	r3
 800a396:	3601      	adds	r6, #1
 800a398:	e7ee      	b.n	800a378 <__libc_init_array+0xc>
 800a39a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a39e:	4798      	blx	r3
 800a3a0:	3601      	adds	r6, #1
 800a3a2:	e7f2      	b.n	800a38a <__libc_init_array+0x1e>
 800a3a4:	0800af10 	.word	0x0800af10
 800a3a8:	0800af10 	.word	0x0800af10
 800a3ac:	0800af10 	.word	0x0800af10
 800a3b0:	0800af14 	.word	0x0800af14

0800a3b4 <malloc>:
 800a3b4:	4b02      	ldr	r3, [pc, #8]	; (800a3c0 <malloc+0xc>)
 800a3b6:	4601      	mov	r1, r0
 800a3b8:	6818      	ldr	r0, [r3, #0]
 800a3ba:	f000 b863 	b.w	800a484 <_malloc_r>
 800a3be:	bf00      	nop
 800a3c0:	20000034 	.word	0x20000034

0800a3c4 <free>:
 800a3c4:	4b02      	ldr	r3, [pc, #8]	; (800a3d0 <free+0xc>)
 800a3c6:	4601      	mov	r1, r0
 800a3c8:	6818      	ldr	r0, [r3, #0]
 800a3ca:	f000 b80b 	b.w	800a3e4 <_free_r>
 800a3ce:	bf00      	nop
 800a3d0:	20000034 	.word	0x20000034

0800a3d4 <memset>:
 800a3d4:	4402      	add	r2, r0
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d100      	bne.n	800a3de <memset+0xa>
 800a3dc:	4770      	bx	lr
 800a3de:	f803 1b01 	strb.w	r1, [r3], #1
 800a3e2:	e7f9      	b.n	800a3d8 <memset+0x4>

0800a3e4 <_free_r>:
 800a3e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3e6:	2900      	cmp	r1, #0
 800a3e8:	d048      	beq.n	800a47c <_free_r+0x98>
 800a3ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3ee:	9001      	str	r0, [sp, #4]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f1a1 0404 	sub.w	r4, r1, #4
 800a3f6:	bfb8      	it	lt
 800a3f8:	18e4      	addlt	r4, r4, r3
 800a3fa:	f000 f8cd 	bl	800a598 <__malloc_lock>
 800a3fe:	4a20      	ldr	r2, [pc, #128]	; (800a480 <_free_r+0x9c>)
 800a400:	9801      	ldr	r0, [sp, #4]
 800a402:	6813      	ldr	r3, [r2, #0]
 800a404:	4615      	mov	r5, r2
 800a406:	b933      	cbnz	r3, 800a416 <_free_r+0x32>
 800a408:	6063      	str	r3, [r4, #4]
 800a40a:	6014      	str	r4, [r2, #0]
 800a40c:	b003      	add	sp, #12
 800a40e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a412:	f000 b8c7 	b.w	800a5a4 <__malloc_unlock>
 800a416:	42a3      	cmp	r3, r4
 800a418:	d90b      	bls.n	800a432 <_free_r+0x4e>
 800a41a:	6821      	ldr	r1, [r4, #0]
 800a41c:	1862      	adds	r2, r4, r1
 800a41e:	4293      	cmp	r3, r2
 800a420:	bf04      	itt	eq
 800a422:	681a      	ldreq	r2, [r3, #0]
 800a424:	685b      	ldreq	r3, [r3, #4]
 800a426:	6063      	str	r3, [r4, #4]
 800a428:	bf04      	itt	eq
 800a42a:	1852      	addeq	r2, r2, r1
 800a42c:	6022      	streq	r2, [r4, #0]
 800a42e:	602c      	str	r4, [r5, #0]
 800a430:	e7ec      	b.n	800a40c <_free_r+0x28>
 800a432:	461a      	mov	r2, r3
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	b10b      	cbz	r3, 800a43c <_free_r+0x58>
 800a438:	42a3      	cmp	r3, r4
 800a43a:	d9fa      	bls.n	800a432 <_free_r+0x4e>
 800a43c:	6811      	ldr	r1, [r2, #0]
 800a43e:	1855      	adds	r5, r2, r1
 800a440:	42a5      	cmp	r5, r4
 800a442:	d10b      	bne.n	800a45c <_free_r+0x78>
 800a444:	6824      	ldr	r4, [r4, #0]
 800a446:	4421      	add	r1, r4
 800a448:	1854      	adds	r4, r2, r1
 800a44a:	42a3      	cmp	r3, r4
 800a44c:	6011      	str	r1, [r2, #0]
 800a44e:	d1dd      	bne.n	800a40c <_free_r+0x28>
 800a450:	681c      	ldr	r4, [r3, #0]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	6053      	str	r3, [r2, #4]
 800a456:	4421      	add	r1, r4
 800a458:	6011      	str	r1, [r2, #0]
 800a45a:	e7d7      	b.n	800a40c <_free_r+0x28>
 800a45c:	d902      	bls.n	800a464 <_free_r+0x80>
 800a45e:	230c      	movs	r3, #12
 800a460:	6003      	str	r3, [r0, #0]
 800a462:	e7d3      	b.n	800a40c <_free_r+0x28>
 800a464:	6825      	ldr	r5, [r4, #0]
 800a466:	1961      	adds	r1, r4, r5
 800a468:	428b      	cmp	r3, r1
 800a46a:	bf04      	itt	eq
 800a46c:	6819      	ldreq	r1, [r3, #0]
 800a46e:	685b      	ldreq	r3, [r3, #4]
 800a470:	6063      	str	r3, [r4, #4]
 800a472:	bf04      	itt	eq
 800a474:	1949      	addeq	r1, r1, r5
 800a476:	6021      	streq	r1, [r4, #0]
 800a478:	6054      	str	r4, [r2, #4]
 800a47a:	e7c7      	b.n	800a40c <_free_r+0x28>
 800a47c:	b003      	add	sp, #12
 800a47e:	bd30      	pop	{r4, r5, pc}
 800a480:	200000c0 	.word	0x200000c0

0800a484 <_malloc_r>:
 800a484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a486:	1ccd      	adds	r5, r1, #3
 800a488:	f025 0503 	bic.w	r5, r5, #3
 800a48c:	3508      	adds	r5, #8
 800a48e:	2d0c      	cmp	r5, #12
 800a490:	bf38      	it	cc
 800a492:	250c      	movcc	r5, #12
 800a494:	2d00      	cmp	r5, #0
 800a496:	4606      	mov	r6, r0
 800a498:	db01      	blt.n	800a49e <_malloc_r+0x1a>
 800a49a:	42a9      	cmp	r1, r5
 800a49c:	d903      	bls.n	800a4a6 <_malloc_r+0x22>
 800a49e:	230c      	movs	r3, #12
 800a4a0:	6033      	str	r3, [r6, #0]
 800a4a2:	2000      	movs	r0, #0
 800a4a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4a6:	f000 f877 	bl	800a598 <__malloc_lock>
 800a4aa:	4921      	ldr	r1, [pc, #132]	; (800a530 <_malloc_r+0xac>)
 800a4ac:	680a      	ldr	r2, [r1, #0]
 800a4ae:	4614      	mov	r4, r2
 800a4b0:	b99c      	cbnz	r4, 800a4da <_malloc_r+0x56>
 800a4b2:	4f20      	ldr	r7, [pc, #128]	; (800a534 <_malloc_r+0xb0>)
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	b923      	cbnz	r3, 800a4c2 <_malloc_r+0x3e>
 800a4b8:	4621      	mov	r1, r4
 800a4ba:	4630      	mov	r0, r6
 800a4bc:	f000 f83c 	bl	800a538 <_sbrk_r>
 800a4c0:	6038      	str	r0, [r7, #0]
 800a4c2:	4629      	mov	r1, r5
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	f000 f837 	bl	800a538 <_sbrk_r>
 800a4ca:	1c43      	adds	r3, r0, #1
 800a4cc:	d123      	bne.n	800a516 <_malloc_r+0x92>
 800a4ce:	230c      	movs	r3, #12
 800a4d0:	6033      	str	r3, [r6, #0]
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	f000 f866 	bl	800a5a4 <__malloc_unlock>
 800a4d8:	e7e3      	b.n	800a4a2 <_malloc_r+0x1e>
 800a4da:	6823      	ldr	r3, [r4, #0]
 800a4dc:	1b5b      	subs	r3, r3, r5
 800a4de:	d417      	bmi.n	800a510 <_malloc_r+0x8c>
 800a4e0:	2b0b      	cmp	r3, #11
 800a4e2:	d903      	bls.n	800a4ec <_malloc_r+0x68>
 800a4e4:	6023      	str	r3, [r4, #0]
 800a4e6:	441c      	add	r4, r3
 800a4e8:	6025      	str	r5, [r4, #0]
 800a4ea:	e004      	b.n	800a4f6 <_malloc_r+0x72>
 800a4ec:	6863      	ldr	r3, [r4, #4]
 800a4ee:	42a2      	cmp	r2, r4
 800a4f0:	bf0c      	ite	eq
 800a4f2:	600b      	streq	r3, [r1, #0]
 800a4f4:	6053      	strne	r3, [r2, #4]
 800a4f6:	4630      	mov	r0, r6
 800a4f8:	f000 f854 	bl	800a5a4 <__malloc_unlock>
 800a4fc:	f104 000b 	add.w	r0, r4, #11
 800a500:	1d23      	adds	r3, r4, #4
 800a502:	f020 0007 	bic.w	r0, r0, #7
 800a506:	1ac2      	subs	r2, r0, r3
 800a508:	d0cc      	beq.n	800a4a4 <_malloc_r+0x20>
 800a50a:	1a1b      	subs	r3, r3, r0
 800a50c:	50a3      	str	r3, [r4, r2]
 800a50e:	e7c9      	b.n	800a4a4 <_malloc_r+0x20>
 800a510:	4622      	mov	r2, r4
 800a512:	6864      	ldr	r4, [r4, #4]
 800a514:	e7cc      	b.n	800a4b0 <_malloc_r+0x2c>
 800a516:	1cc4      	adds	r4, r0, #3
 800a518:	f024 0403 	bic.w	r4, r4, #3
 800a51c:	42a0      	cmp	r0, r4
 800a51e:	d0e3      	beq.n	800a4e8 <_malloc_r+0x64>
 800a520:	1a21      	subs	r1, r4, r0
 800a522:	4630      	mov	r0, r6
 800a524:	f000 f808 	bl	800a538 <_sbrk_r>
 800a528:	3001      	adds	r0, #1
 800a52a:	d1dd      	bne.n	800a4e8 <_malloc_r+0x64>
 800a52c:	e7cf      	b.n	800a4ce <_malloc_r+0x4a>
 800a52e:	bf00      	nop
 800a530:	200000c0 	.word	0x200000c0
 800a534:	200000c4 	.word	0x200000c4

0800a538 <_sbrk_r>:
 800a538:	b538      	push	{r3, r4, r5, lr}
 800a53a:	4d06      	ldr	r5, [pc, #24]	; (800a554 <_sbrk_r+0x1c>)
 800a53c:	2300      	movs	r3, #0
 800a53e:	4604      	mov	r4, r0
 800a540:	4608      	mov	r0, r1
 800a542:	602b      	str	r3, [r5, #0]
 800a544:	f7f8 f822 	bl	800258c <_sbrk>
 800a548:	1c43      	adds	r3, r0, #1
 800a54a:	d102      	bne.n	800a552 <_sbrk_r+0x1a>
 800a54c:	682b      	ldr	r3, [r5, #0]
 800a54e:	b103      	cbz	r3, 800a552 <_sbrk_r+0x1a>
 800a550:	6023      	str	r3, [r4, #0]
 800a552:	bd38      	pop	{r3, r4, r5, pc}
 800a554:	200008f8 	.word	0x200008f8

0800a558 <siprintf>:
 800a558:	b40e      	push	{r1, r2, r3}
 800a55a:	b500      	push	{lr}
 800a55c:	b09c      	sub	sp, #112	; 0x70
 800a55e:	ab1d      	add	r3, sp, #116	; 0x74
 800a560:	9002      	str	r0, [sp, #8]
 800a562:	9006      	str	r0, [sp, #24]
 800a564:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a568:	4809      	ldr	r0, [pc, #36]	; (800a590 <siprintf+0x38>)
 800a56a:	9107      	str	r1, [sp, #28]
 800a56c:	9104      	str	r1, [sp, #16]
 800a56e:	4909      	ldr	r1, [pc, #36]	; (800a594 <siprintf+0x3c>)
 800a570:	f853 2b04 	ldr.w	r2, [r3], #4
 800a574:	9105      	str	r1, [sp, #20]
 800a576:	6800      	ldr	r0, [r0, #0]
 800a578:	9301      	str	r3, [sp, #4]
 800a57a:	a902      	add	r1, sp, #8
 800a57c:	f000 f874 	bl	800a668 <_svfiprintf_r>
 800a580:	9b02      	ldr	r3, [sp, #8]
 800a582:	2200      	movs	r2, #0
 800a584:	701a      	strb	r2, [r3, #0]
 800a586:	b01c      	add	sp, #112	; 0x70
 800a588:	f85d eb04 	ldr.w	lr, [sp], #4
 800a58c:	b003      	add	sp, #12
 800a58e:	4770      	bx	lr
 800a590:	20000034 	.word	0x20000034
 800a594:	ffff0208 	.word	0xffff0208

0800a598 <__malloc_lock>:
 800a598:	4801      	ldr	r0, [pc, #4]	; (800a5a0 <__malloc_lock+0x8>)
 800a59a:	f000 baf9 	b.w	800ab90 <__retarget_lock_acquire_recursive>
 800a59e:	bf00      	nop
 800a5a0:	20000900 	.word	0x20000900

0800a5a4 <__malloc_unlock>:
 800a5a4:	4801      	ldr	r0, [pc, #4]	; (800a5ac <__malloc_unlock+0x8>)
 800a5a6:	f000 baf4 	b.w	800ab92 <__retarget_lock_release_recursive>
 800a5aa:	bf00      	nop
 800a5ac:	20000900 	.word	0x20000900

0800a5b0 <__ssputs_r>:
 800a5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5b4:	688e      	ldr	r6, [r1, #8]
 800a5b6:	429e      	cmp	r6, r3
 800a5b8:	4682      	mov	sl, r0
 800a5ba:	460c      	mov	r4, r1
 800a5bc:	4690      	mov	r8, r2
 800a5be:	461f      	mov	r7, r3
 800a5c0:	d838      	bhi.n	800a634 <__ssputs_r+0x84>
 800a5c2:	898a      	ldrh	r2, [r1, #12]
 800a5c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5c8:	d032      	beq.n	800a630 <__ssputs_r+0x80>
 800a5ca:	6825      	ldr	r5, [r4, #0]
 800a5cc:	6909      	ldr	r1, [r1, #16]
 800a5ce:	eba5 0901 	sub.w	r9, r5, r1
 800a5d2:	6965      	ldr	r5, [r4, #20]
 800a5d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5dc:	3301      	adds	r3, #1
 800a5de:	444b      	add	r3, r9
 800a5e0:	106d      	asrs	r5, r5, #1
 800a5e2:	429d      	cmp	r5, r3
 800a5e4:	bf38      	it	cc
 800a5e6:	461d      	movcc	r5, r3
 800a5e8:	0553      	lsls	r3, r2, #21
 800a5ea:	d531      	bpl.n	800a650 <__ssputs_r+0xa0>
 800a5ec:	4629      	mov	r1, r5
 800a5ee:	f7ff ff49 	bl	800a484 <_malloc_r>
 800a5f2:	4606      	mov	r6, r0
 800a5f4:	b950      	cbnz	r0, 800a60c <__ssputs_r+0x5c>
 800a5f6:	230c      	movs	r3, #12
 800a5f8:	f8ca 3000 	str.w	r3, [sl]
 800a5fc:	89a3      	ldrh	r3, [r4, #12]
 800a5fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a602:	81a3      	strh	r3, [r4, #12]
 800a604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a60c:	6921      	ldr	r1, [r4, #16]
 800a60e:	464a      	mov	r2, r9
 800a610:	f000 fac0 	bl	800ab94 <memcpy>
 800a614:	89a3      	ldrh	r3, [r4, #12]
 800a616:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a61a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a61e:	81a3      	strh	r3, [r4, #12]
 800a620:	6126      	str	r6, [r4, #16]
 800a622:	6165      	str	r5, [r4, #20]
 800a624:	444e      	add	r6, r9
 800a626:	eba5 0509 	sub.w	r5, r5, r9
 800a62a:	6026      	str	r6, [r4, #0]
 800a62c:	60a5      	str	r5, [r4, #8]
 800a62e:	463e      	mov	r6, r7
 800a630:	42be      	cmp	r6, r7
 800a632:	d900      	bls.n	800a636 <__ssputs_r+0x86>
 800a634:	463e      	mov	r6, r7
 800a636:	4632      	mov	r2, r6
 800a638:	6820      	ldr	r0, [r4, #0]
 800a63a:	4641      	mov	r1, r8
 800a63c:	f000 fab8 	bl	800abb0 <memmove>
 800a640:	68a3      	ldr	r3, [r4, #8]
 800a642:	6822      	ldr	r2, [r4, #0]
 800a644:	1b9b      	subs	r3, r3, r6
 800a646:	4432      	add	r2, r6
 800a648:	60a3      	str	r3, [r4, #8]
 800a64a:	6022      	str	r2, [r4, #0]
 800a64c:	2000      	movs	r0, #0
 800a64e:	e7db      	b.n	800a608 <__ssputs_r+0x58>
 800a650:	462a      	mov	r2, r5
 800a652:	f000 fac7 	bl	800abe4 <_realloc_r>
 800a656:	4606      	mov	r6, r0
 800a658:	2800      	cmp	r0, #0
 800a65a:	d1e1      	bne.n	800a620 <__ssputs_r+0x70>
 800a65c:	6921      	ldr	r1, [r4, #16]
 800a65e:	4650      	mov	r0, sl
 800a660:	f7ff fec0 	bl	800a3e4 <_free_r>
 800a664:	e7c7      	b.n	800a5f6 <__ssputs_r+0x46>
	...

0800a668 <_svfiprintf_r>:
 800a668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66c:	4698      	mov	r8, r3
 800a66e:	898b      	ldrh	r3, [r1, #12]
 800a670:	061b      	lsls	r3, r3, #24
 800a672:	b09d      	sub	sp, #116	; 0x74
 800a674:	4607      	mov	r7, r0
 800a676:	460d      	mov	r5, r1
 800a678:	4614      	mov	r4, r2
 800a67a:	d50e      	bpl.n	800a69a <_svfiprintf_r+0x32>
 800a67c:	690b      	ldr	r3, [r1, #16]
 800a67e:	b963      	cbnz	r3, 800a69a <_svfiprintf_r+0x32>
 800a680:	2140      	movs	r1, #64	; 0x40
 800a682:	f7ff feff 	bl	800a484 <_malloc_r>
 800a686:	6028      	str	r0, [r5, #0]
 800a688:	6128      	str	r0, [r5, #16]
 800a68a:	b920      	cbnz	r0, 800a696 <_svfiprintf_r+0x2e>
 800a68c:	230c      	movs	r3, #12
 800a68e:	603b      	str	r3, [r7, #0]
 800a690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a694:	e0d1      	b.n	800a83a <_svfiprintf_r+0x1d2>
 800a696:	2340      	movs	r3, #64	; 0x40
 800a698:	616b      	str	r3, [r5, #20]
 800a69a:	2300      	movs	r3, #0
 800a69c:	9309      	str	r3, [sp, #36]	; 0x24
 800a69e:	2320      	movs	r3, #32
 800a6a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6a8:	2330      	movs	r3, #48	; 0x30
 800a6aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a854 <_svfiprintf_r+0x1ec>
 800a6ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6b2:	f04f 0901 	mov.w	r9, #1
 800a6b6:	4623      	mov	r3, r4
 800a6b8:	469a      	mov	sl, r3
 800a6ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6be:	b10a      	cbz	r2, 800a6c4 <_svfiprintf_r+0x5c>
 800a6c0:	2a25      	cmp	r2, #37	; 0x25
 800a6c2:	d1f9      	bne.n	800a6b8 <_svfiprintf_r+0x50>
 800a6c4:	ebba 0b04 	subs.w	fp, sl, r4
 800a6c8:	d00b      	beq.n	800a6e2 <_svfiprintf_r+0x7a>
 800a6ca:	465b      	mov	r3, fp
 800a6cc:	4622      	mov	r2, r4
 800a6ce:	4629      	mov	r1, r5
 800a6d0:	4638      	mov	r0, r7
 800a6d2:	f7ff ff6d 	bl	800a5b0 <__ssputs_r>
 800a6d6:	3001      	adds	r0, #1
 800a6d8:	f000 80aa 	beq.w	800a830 <_svfiprintf_r+0x1c8>
 800a6dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6de:	445a      	add	r2, fp
 800a6e0:	9209      	str	r2, [sp, #36]	; 0x24
 800a6e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	f000 80a2 	beq.w	800a830 <_svfiprintf_r+0x1c8>
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6f6:	f10a 0a01 	add.w	sl, sl, #1
 800a6fa:	9304      	str	r3, [sp, #16]
 800a6fc:	9307      	str	r3, [sp, #28]
 800a6fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a702:	931a      	str	r3, [sp, #104]	; 0x68
 800a704:	4654      	mov	r4, sl
 800a706:	2205      	movs	r2, #5
 800a708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a70c:	4851      	ldr	r0, [pc, #324]	; (800a854 <_svfiprintf_r+0x1ec>)
 800a70e:	f7f5 fd5f 	bl	80001d0 <memchr>
 800a712:	9a04      	ldr	r2, [sp, #16]
 800a714:	b9d8      	cbnz	r0, 800a74e <_svfiprintf_r+0xe6>
 800a716:	06d0      	lsls	r0, r2, #27
 800a718:	bf44      	itt	mi
 800a71a:	2320      	movmi	r3, #32
 800a71c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a720:	0711      	lsls	r1, r2, #28
 800a722:	bf44      	itt	mi
 800a724:	232b      	movmi	r3, #43	; 0x2b
 800a726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a72a:	f89a 3000 	ldrb.w	r3, [sl]
 800a72e:	2b2a      	cmp	r3, #42	; 0x2a
 800a730:	d015      	beq.n	800a75e <_svfiprintf_r+0xf6>
 800a732:	9a07      	ldr	r2, [sp, #28]
 800a734:	4654      	mov	r4, sl
 800a736:	2000      	movs	r0, #0
 800a738:	f04f 0c0a 	mov.w	ip, #10
 800a73c:	4621      	mov	r1, r4
 800a73e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a742:	3b30      	subs	r3, #48	; 0x30
 800a744:	2b09      	cmp	r3, #9
 800a746:	d94e      	bls.n	800a7e6 <_svfiprintf_r+0x17e>
 800a748:	b1b0      	cbz	r0, 800a778 <_svfiprintf_r+0x110>
 800a74a:	9207      	str	r2, [sp, #28]
 800a74c:	e014      	b.n	800a778 <_svfiprintf_r+0x110>
 800a74e:	eba0 0308 	sub.w	r3, r0, r8
 800a752:	fa09 f303 	lsl.w	r3, r9, r3
 800a756:	4313      	orrs	r3, r2
 800a758:	9304      	str	r3, [sp, #16]
 800a75a:	46a2      	mov	sl, r4
 800a75c:	e7d2      	b.n	800a704 <_svfiprintf_r+0x9c>
 800a75e:	9b03      	ldr	r3, [sp, #12]
 800a760:	1d19      	adds	r1, r3, #4
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	9103      	str	r1, [sp, #12]
 800a766:	2b00      	cmp	r3, #0
 800a768:	bfbb      	ittet	lt
 800a76a:	425b      	neglt	r3, r3
 800a76c:	f042 0202 	orrlt.w	r2, r2, #2
 800a770:	9307      	strge	r3, [sp, #28]
 800a772:	9307      	strlt	r3, [sp, #28]
 800a774:	bfb8      	it	lt
 800a776:	9204      	strlt	r2, [sp, #16]
 800a778:	7823      	ldrb	r3, [r4, #0]
 800a77a:	2b2e      	cmp	r3, #46	; 0x2e
 800a77c:	d10c      	bne.n	800a798 <_svfiprintf_r+0x130>
 800a77e:	7863      	ldrb	r3, [r4, #1]
 800a780:	2b2a      	cmp	r3, #42	; 0x2a
 800a782:	d135      	bne.n	800a7f0 <_svfiprintf_r+0x188>
 800a784:	9b03      	ldr	r3, [sp, #12]
 800a786:	1d1a      	adds	r2, r3, #4
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	9203      	str	r2, [sp, #12]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	bfb8      	it	lt
 800a790:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a794:	3402      	adds	r4, #2
 800a796:	9305      	str	r3, [sp, #20]
 800a798:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a864 <_svfiprintf_r+0x1fc>
 800a79c:	7821      	ldrb	r1, [r4, #0]
 800a79e:	2203      	movs	r2, #3
 800a7a0:	4650      	mov	r0, sl
 800a7a2:	f7f5 fd15 	bl	80001d0 <memchr>
 800a7a6:	b140      	cbz	r0, 800a7ba <_svfiprintf_r+0x152>
 800a7a8:	2340      	movs	r3, #64	; 0x40
 800a7aa:	eba0 000a 	sub.w	r0, r0, sl
 800a7ae:	fa03 f000 	lsl.w	r0, r3, r0
 800a7b2:	9b04      	ldr	r3, [sp, #16]
 800a7b4:	4303      	orrs	r3, r0
 800a7b6:	3401      	adds	r4, #1
 800a7b8:	9304      	str	r3, [sp, #16]
 800a7ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7be:	4826      	ldr	r0, [pc, #152]	; (800a858 <_svfiprintf_r+0x1f0>)
 800a7c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7c4:	2206      	movs	r2, #6
 800a7c6:	f7f5 fd03 	bl	80001d0 <memchr>
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	d038      	beq.n	800a840 <_svfiprintf_r+0x1d8>
 800a7ce:	4b23      	ldr	r3, [pc, #140]	; (800a85c <_svfiprintf_r+0x1f4>)
 800a7d0:	bb1b      	cbnz	r3, 800a81a <_svfiprintf_r+0x1b2>
 800a7d2:	9b03      	ldr	r3, [sp, #12]
 800a7d4:	3307      	adds	r3, #7
 800a7d6:	f023 0307 	bic.w	r3, r3, #7
 800a7da:	3308      	adds	r3, #8
 800a7dc:	9303      	str	r3, [sp, #12]
 800a7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7e0:	4433      	add	r3, r6
 800a7e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a7e4:	e767      	b.n	800a6b6 <_svfiprintf_r+0x4e>
 800a7e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7ea:	460c      	mov	r4, r1
 800a7ec:	2001      	movs	r0, #1
 800a7ee:	e7a5      	b.n	800a73c <_svfiprintf_r+0xd4>
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	3401      	adds	r4, #1
 800a7f4:	9305      	str	r3, [sp, #20]
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	f04f 0c0a 	mov.w	ip, #10
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a802:	3a30      	subs	r2, #48	; 0x30
 800a804:	2a09      	cmp	r2, #9
 800a806:	d903      	bls.n	800a810 <_svfiprintf_r+0x1a8>
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d0c5      	beq.n	800a798 <_svfiprintf_r+0x130>
 800a80c:	9105      	str	r1, [sp, #20]
 800a80e:	e7c3      	b.n	800a798 <_svfiprintf_r+0x130>
 800a810:	fb0c 2101 	mla	r1, ip, r1, r2
 800a814:	4604      	mov	r4, r0
 800a816:	2301      	movs	r3, #1
 800a818:	e7f0      	b.n	800a7fc <_svfiprintf_r+0x194>
 800a81a:	ab03      	add	r3, sp, #12
 800a81c:	9300      	str	r3, [sp, #0]
 800a81e:	462a      	mov	r2, r5
 800a820:	4b0f      	ldr	r3, [pc, #60]	; (800a860 <_svfiprintf_r+0x1f8>)
 800a822:	a904      	add	r1, sp, #16
 800a824:	4638      	mov	r0, r7
 800a826:	f3af 8000 	nop.w
 800a82a:	1c42      	adds	r2, r0, #1
 800a82c:	4606      	mov	r6, r0
 800a82e:	d1d6      	bne.n	800a7de <_svfiprintf_r+0x176>
 800a830:	89ab      	ldrh	r3, [r5, #12]
 800a832:	065b      	lsls	r3, r3, #25
 800a834:	f53f af2c 	bmi.w	800a690 <_svfiprintf_r+0x28>
 800a838:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a83a:	b01d      	add	sp, #116	; 0x74
 800a83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a840:	ab03      	add	r3, sp, #12
 800a842:	9300      	str	r3, [sp, #0]
 800a844:	462a      	mov	r2, r5
 800a846:	4b06      	ldr	r3, [pc, #24]	; (800a860 <_svfiprintf_r+0x1f8>)
 800a848:	a904      	add	r1, sp, #16
 800a84a:	4638      	mov	r0, r7
 800a84c:	f000 f87a 	bl	800a944 <_printf_i>
 800a850:	e7eb      	b.n	800a82a <_svfiprintf_r+0x1c2>
 800a852:	bf00      	nop
 800a854:	0800aed4 	.word	0x0800aed4
 800a858:	0800aede 	.word	0x0800aede
 800a85c:	00000000 	.word	0x00000000
 800a860:	0800a5b1 	.word	0x0800a5b1
 800a864:	0800aeda 	.word	0x0800aeda

0800a868 <_printf_common>:
 800a868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a86c:	4616      	mov	r6, r2
 800a86e:	4699      	mov	r9, r3
 800a870:	688a      	ldr	r2, [r1, #8]
 800a872:	690b      	ldr	r3, [r1, #16]
 800a874:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a878:	4293      	cmp	r3, r2
 800a87a:	bfb8      	it	lt
 800a87c:	4613      	movlt	r3, r2
 800a87e:	6033      	str	r3, [r6, #0]
 800a880:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a884:	4607      	mov	r7, r0
 800a886:	460c      	mov	r4, r1
 800a888:	b10a      	cbz	r2, 800a88e <_printf_common+0x26>
 800a88a:	3301      	adds	r3, #1
 800a88c:	6033      	str	r3, [r6, #0]
 800a88e:	6823      	ldr	r3, [r4, #0]
 800a890:	0699      	lsls	r1, r3, #26
 800a892:	bf42      	ittt	mi
 800a894:	6833      	ldrmi	r3, [r6, #0]
 800a896:	3302      	addmi	r3, #2
 800a898:	6033      	strmi	r3, [r6, #0]
 800a89a:	6825      	ldr	r5, [r4, #0]
 800a89c:	f015 0506 	ands.w	r5, r5, #6
 800a8a0:	d106      	bne.n	800a8b0 <_printf_common+0x48>
 800a8a2:	f104 0a19 	add.w	sl, r4, #25
 800a8a6:	68e3      	ldr	r3, [r4, #12]
 800a8a8:	6832      	ldr	r2, [r6, #0]
 800a8aa:	1a9b      	subs	r3, r3, r2
 800a8ac:	42ab      	cmp	r3, r5
 800a8ae:	dc26      	bgt.n	800a8fe <_printf_common+0x96>
 800a8b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a8b4:	1e13      	subs	r3, r2, #0
 800a8b6:	6822      	ldr	r2, [r4, #0]
 800a8b8:	bf18      	it	ne
 800a8ba:	2301      	movne	r3, #1
 800a8bc:	0692      	lsls	r2, r2, #26
 800a8be:	d42b      	bmi.n	800a918 <_printf_common+0xb0>
 800a8c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a8c4:	4649      	mov	r1, r9
 800a8c6:	4638      	mov	r0, r7
 800a8c8:	47c0      	blx	r8
 800a8ca:	3001      	adds	r0, #1
 800a8cc:	d01e      	beq.n	800a90c <_printf_common+0xa4>
 800a8ce:	6823      	ldr	r3, [r4, #0]
 800a8d0:	68e5      	ldr	r5, [r4, #12]
 800a8d2:	6832      	ldr	r2, [r6, #0]
 800a8d4:	f003 0306 	and.w	r3, r3, #6
 800a8d8:	2b04      	cmp	r3, #4
 800a8da:	bf08      	it	eq
 800a8dc:	1aad      	subeq	r5, r5, r2
 800a8de:	68a3      	ldr	r3, [r4, #8]
 800a8e0:	6922      	ldr	r2, [r4, #16]
 800a8e2:	bf0c      	ite	eq
 800a8e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8e8:	2500      	movne	r5, #0
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	bfc4      	itt	gt
 800a8ee:	1a9b      	subgt	r3, r3, r2
 800a8f0:	18ed      	addgt	r5, r5, r3
 800a8f2:	2600      	movs	r6, #0
 800a8f4:	341a      	adds	r4, #26
 800a8f6:	42b5      	cmp	r5, r6
 800a8f8:	d11a      	bne.n	800a930 <_printf_common+0xc8>
 800a8fa:	2000      	movs	r0, #0
 800a8fc:	e008      	b.n	800a910 <_printf_common+0xa8>
 800a8fe:	2301      	movs	r3, #1
 800a900:	4652      	mov	r2, sl
 800a902:	4649      	mov	r1, r9
 800a904:	4638      	mov	r0, r7
 800a906:	47c0      	blx	r8
 800a908:	3001      	adds	r0, #1
 800a90a:	d103      	bne.n	800a914 <_printf_common+0xac>
 800a90c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a914:	3501      	adds	r5, #1
 800a916:	e7c6      	b.n	800a8a6 <_printf_common+0x3e>
 800a918:	18e1      	adds	r1, r4, r3
 800a91a:	1c5a      	adds	r2, r3, #1
 800a91c:	2030      	movs	r0, #48	; 0x30
 800a91e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a922:	4422      	add	r2, r4
 800a924:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a928:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a92c:	3302      	adds	r3, #2
 800a92e:	e7c7      	b.n	800a8c0 <_printf_common+0x58>
 800a930:	2301      	movs	r3, #1
 800a932:	4622      	mov	r2, r4
 800a934:	4649      	mov	r1, r9
 800a936:	4638      	mov	r0, r7
 800a938:	47c0      	blx	r8
 800a93a:	3001      	adds	r0, #1
 800a93c:	d0e6      	beq.n	800a90c <_printf_common+0xa4>
 800a93e:	3601      	adds	r6, #1
 800a940:	e7d9      	b.n	800a8f6 <_printf_common+0x8e>
	...

0800a944 <_printf_i>:
 800a944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a948:	460c      	mov	r4, r1
 800a94a:	4691      	mov	r9, r2
 800a94c:	7e27      	ldrb	r7, [r4, #24]
 800a94e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a950:	2f78      	cmp	r7, #120	; 0x78
 800a952:	4680      	mov	r8, r0
 800a954:	469a      	mov	sl, r3
 800a956:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a95a:	d807      	bhi.n	800a96c <_printf_i+0x28>
 800a95c:	2f62      	cmp	r7, #98	; 0x62
 800a95e:	d80a      	bhi.n	800a976 <_printf_i+0x32>
 800a960:	2f00      	cmp	r7, #0
 800a962:	f000 80d8 	beq.w	800ab16 <_printf_i+0x1d2>
 800a966:	2f58      	cmp	r7, #88	; 0x58
 800a968:	f000 80a3 	beq.w	800aab2 <_printf_i+0x16e>
 800a96c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a970:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a974:	e03a      	b.n	800a9ec <_printf_i+0xa8>
 800a976:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a97a:	2b15      	cmp	r3, #21
 800a97c:	d8f6      	bhi.n	800a96c <_printf_i+0x28>
 800a97e:	a001      	add	r0, pc, #4	; (adr r0, 800a984 <_printf_i+0x40>)
 800a980:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a984:	0800a9dd 	.word	0x0800a9dd
 800a988:	0800a9f1 	.word	0x0800a9f1
 800a98c:	0800a96d 	.word	0x0800a96d
 800a990:	0800a96d 	.word	0x0800a96d
 800a994:	0800a96d 	.word	0x0800a96d
 800a998:	0800a96d 	.word	0x0800a96d
 800a99c:	0800a9f1 	.word	0x0800a9f1
 800a9a0:	0800a96d 	.word	0x0800a96d
 800a9a4:	0800a96d 	.word	0x0800a96d
 800a9a8:	0800a96d 	.word	0x0800a96d
 800a9ac:	0800a96d 	.word	0x0800a96d
 800a9b0:	0800aafd 	.word	0x0800aafd
 800a9b4:	0800aa21 	.word	0x0800aa21
 800a9b8:	0800aadf 	.word	0x0800aadf
 800a9bc:	0800a96d 	.word	0x0800a96d
 800a9c0:	0800a96d 	.word	0x0800a96d
 800a9c4:	0800ab1f 	.word	0x0800ab1f
 800a9c8:	0800a96d 	.word	0x0800a96d
 800a9cc:	0800aa21 	.word	0x0800aa21
 800a9d0:	0800a96d 	.word	0x0800a96d
 800a9d4:	0800a96d 	.word	0x0800a96d
 800a9d8:	0800aae7 	.word	0x0800aae7
 800a9dc:	680b      	ldr	r3, [r1, #0]
 800a9de:	1d1a      	adds	r2, r3, #4
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	600a      	str	r2, [r1, #0]
 800a9e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a9e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e0a3      	b.n	800ab38 <_printf_i+0x1f4>
 800a9f0:	6825      	ldr	r5, [r4, #0]
 800a9f2:	6808      	ldr	r0, [r1, #0]
 800a9f4:	062e      	lsls	r6, r5, #24
 800a9f6:	f100 0304 	add.w	r3, r0, #4
 800a9fa:	d50a      	bpl.n	800aa12 <_printf_i+0xce>
 800a9fc:	6805      	ldr	r5, [r0, #0]
 800a9fe:	600b      	str	r3, [r1, #0]
 800aa00:	2d00      	cmp	r5, #0
 800aa02:	da03      	bge.n	800aa0c <_printf_i+0xc8>
 800aa04:	232d      	movs	r3, #45	; 0x2d
 800aa06:	426d      	negs	r5, r5
 800aa08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa0c:	485e      	ldr	r0, [pc, #376]	; (800ab88 <_printf_i+0x244>)
 800aa0e:	230a      	movs	r3, #10
 800aa10:	e019      	b.n	800aa46 <_printf_i+0x102>
 800aa12:	f015 0f40 	tst.w	r5, #64	; 0x40
 800aa16:	6805      	ldr	r5, [r0, #0]
 800aa18:	600b      	str	r3, [r1, #0]
 800aa1a:	bf18      	it	ne
 800aa1c:	b22d      	sxthne	r5, r5
 800aa1e:	e7ef      	b.n	800aa00 <_printf_i+0xbc>
 800aa20:	680b      	ldr	r3, [r1, #0]
 800aa22:	6825      	ldr	r5, [r4, #0]
 800aa24:	1d18      	adds	r0, r3, #4
 800aa26:	6008      	str	r0, [r1, #0]
 800aa28:	0628      	lsls	r0, r5, #24
 800aa2a:	d501      	bpl.n	800aa30 <_printf_i+0xec>
 800aa2c:	681d      	ldr	r5, [r3, #0]
 800aa2e:	e002      	b.n	800aa36 <_printf_i+0xf2>
 800aa30:	0669      	lsls	r1, r5, #25
 800aa32:	d5fb      	bpl.n	800aa2c <_printf_i+0xe8>
 800aa34:	881d      	ldrh	r5, [r3, #0]
 800aa36:	4854      	ldr	r0, [pc, #336]	; (800ab88 <_printf_i+0x244>)
 800aa38:	2f6f      	cmp	r7, #111	; 0x6f
 800aa3a:	bf0c      	ite	eq
 800aa3c:	2308      	moveq	r3, #8
 800aa3e:	230a      	movne	r3, #10
 800aa40:	2100      	movs	r1, #0
 800aa42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa46:	6866      	ldr	r6, [r4, #4]
 800aa48:	60a6      	str	r6, [r4, #8]
 800aa4a:	2e00      	cmp	r6, #0
 800aa4c:	bfa2      	ittt	ge
 800aa4e:	6821      	ldrge	r1, [r4, #0]
 800aa50:	f021 0104 	bicge.w	r1, r1, #4
 800aa54:	6021      	strge	r1, [r4, #0]
 800aa56:	b90d      	cbnz	r5, 800aa5c <_printf_i+0x118>
 800aa58:	2e00      	cmp	r6, #0
 800aa5a:	d04d      	beq.n	800aaf8 <_printf_i+0x1b4>
 800aa5c:	4616      	mov	r6, r2
 800aa5e:	fbb5 f1f3 	udiv	r1, r5, r3
 800aa62:	fb03 5711 	mls	r7, r3, r1, r5
 800aa66:	5dc7      	ldrb	r7, [r0, r7]
 800aa68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aa6c:	462f      	mov	r7, r5
 800aa6e:	42bb      	cmp	r3, r7
 800aa70:	460d      	mov	r5, r1
 800aa72:	d9f4      	bls.n	800aa5e <_printf_i+0x11a>
 800aa74:	2b08      	cmp	r3, #8
 800aa76:	d10b      	bne.n	800aa90 <_printf_i+0x14c>
 800aa78:	6823      	ldr	r3, [r4, #0]
 800aa7a:	07df      	lsls	r7, r3, #31
 800aa7c:	d508      	bpl.n	800aa90 <_printf_i+0x14c>
 800aa7e:	6923      	ldr	r3, [r4, #16]
 800aa80:	6861      	ldr	r1, [r4, #4]
 800aa82:	4299      	cmp	r1, r3
 800aa84:	bfde      	ittt	le
 800aa86:	2330      	movle	r3, #48	; 0x30
 800aa88:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aa8c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800aa90:	1b92      	subs	r2, r2, r6
 800aa92:	6122      	str	r2, [r4, #16]
 800aa94:	f8cd a000 	str.w	sl, [sp]
 800aa98:	464b      	mov	r3, r9
 800aa9a:	aa03      	add	r2, sp, #12
 800aa9c:	4621      	mov	r1, r4
 800aa9e:	4640      	mov	r0, r8
 800aaa0:	f7ff fee2 	bl	800a868 <_printf_common>
 800aaa4:	3001      	adds	r0, #1
 800aaa6:	d14c      	bne.n	800ab42 <_printf_i+0x1fe>
 800aaa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aaac:	b004      	add	sp, #16
 800aaae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aab2:	4835      	ldr	r0, [pc, #212]	; (800ab88 <_printf_i+0x244>)
 800aab4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aab8:	6823      	ldr	r3, [r4, #0]
 800aaba:	680e      	ldr	r6, [r1, #0]
 800aabc:	061f      	lsls	r7, r3, #24
 800aabe:	f856 5b04 	ldr.w	r5, [r6], #4
 800aac2:	600e      	str	r6, [r1, #0]
 800aac4:	d514      	bpl.n	800aaf0 <_printf_i+0x1ac>
 800aac6:	07d9      	lsls	r1, r3, #31
 800aac8:	bf44      	itt	mi
 800aaca:	f043 0320 	orrmi.w	r3, r3, #32
 800aace:	6023      	strmi	r3, [r4, #0]
 800aad0:	b91d      	cbnz	r5, 800aada <_printf_i+0x196>
 800aad2:	6823      	ldr	r3, [r4, #0]
 800aad4:	f023 0320 	bic.w	r3, r3, #32
 800aad8:	6023      	str	r3, [r4, #0]
 800aada:	2310      	movs	r3, #16
 800aadc:	e7b0      	b.n	800aa40 <_printf_i+0xfc>
 800aade:	6823      	ldr	r3, [r4, #0]
 800aae0:	f043 0320 	orr.w	r3, r3, #32
 800aae4:	6023      	str	r3, [r4, #0]
 800aae6:	2378      	movs	r3, #120	; 0x78
 800aae8:	4828      	ldr	r0, [pc, #160]	; (800ab8c <_printf_i+0x248>)
 800aaea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aaee:	e7e3      	b.n	800aab8 <_printf_i+0x174>
 800aaf0:	065e      	lsls	r6, r3, #25
 800aaf2:	bf48      	it	mi
 800aaf4:	b2ad      	uxthmi	r5, r5
 800aaf6:	e7e6      	b.n	800aac6 <_printf_i+0x182>
 800aaf8:	4616      	mov	r6, r2
 800aafa:	e7bb      	b.n	800aa74 <_printf_i+0x130>
 800aafc:	680b      	ldr	r3, [r1, #0]
 800aafe:	6826      	ldr	r6, [r4, #0]
 800ab00:	6960      	ldr	r0, [r4, #20]
 800ab02:	1d1d      	adds	r5, r3, #4
 800ab04:	600d      	str	r5, [r1, #0]
 800ab06:	0635      	lsls	r5, r6, #24
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	d501      	bpl.n	800ab10 <_printf_i+0x1cc>
 800ab0c:	6018      	str	r0, [r3, #0]
 800ab0e:	e002      	b.n	800ab16 <_printf_i+0x1d2>
 800ab10:	0671      	lsls	r1, r6, #25
 800ab12:	d5fb      	bpl.n	800ab0c <_printf_i+0x1c8>
 800ab14:	8018      	strh	r0, [r3, #0]
 800ab16:	2300      	movs	r3, #0
 800ab18:	6123      	str	r3, [r4, #16]
 800ab1a:	4616      	mov	r6, r2
 800ab1c:	e7ba      	b.n	800aa94 <_printf_i+0x150>
 800ab1e:	680b      	ldr	r3, [r1, #0]
 800ab20:	1d1a      	adds	r2, r3, #4
 800ab22:	600a      	str	r2, [r1, #0]
 800ab24:	681e      	ldr	r6, [r3, #0]
 800ab26:	6862      	ldr	r2, [r4, #4]
 800ab28:	2100      	movs	r1, #0
 800ab2a:	4630      	mov	r0, r6
 800ab2c:	f7f5 fb50 	bl	80001d0 <memchr>
 800ab30:	b108      	cbz	r0, 800ab36 <_printf_i+0x1f2>
 800ab32:	1b80      	subs	r0, r0, r6
 800ab34:	6060      	str	r0, [r4, #4]
 800ab36:	6863      	ldr	r3, [r4, #4]
 800ab38:	6123      	str	r3, [r4, #16]
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab40:	e7a8      	b.n	800aa94 <_printf_i+0x150>
 800ab42:	6923      	ldr	r3, [r4, #16]
 800ab44:	4632      	mov	r2, r6
 800ab46:	4649      	mov	r1, r9
 800ab48:	4640      	mov	r0, r8
 800ab4a:	47d0      	blx	sl
 800ab4c:	3001      	adds	r0, #1
 800ab4e:	d0ab      	beq.n	800aaa8 <_printf_i+0x164>
 800ab50:	6823      	ldr	r3, [r4, #0]
 800ab52:	079b      	lsls	r3, r3, #30
 800ab54:	d413      	bmi.n	800ab7e <_printf_i+0x23a>
 800ab56:	68e0      	ldr	r0, [r4, #12]
 800ab58:	9b03      	ldr	r3, [sp, #12]
 800ab5a:	4298      	cmp	r0, r3
 800ab5c:	bfb8      	it	lt
 800ab5e:	4618      	movlt	r0, r3
 800ab60:	e7a4      	b.n	800aaac <_printf_i+0x168>
 800ab62:	2301      	movs	r3, #1
 800ab64:	4632      	mov	r2, r6
 800ab66:	4649      	mov	r1, r9
 800ab68:	4640      	mov	r0, r8
 800ab6a:	47d0      	blx	sl
 800ab6c:	3001      	adds	r0, #1
 800ab6e:	d09b      	beq.n	800aaa8 <_printf_i+0x164>
 800ab70:	3501      	adds	r5, #1
 800ab72:	68e3      	ldr	r3, [r4, #12]
 800ab74:	9903      	ldr	r1, [sp, #12]
 800ab76:	1a5b      	subs	r3, r3, r1
 800ab78:	42ab      	cmp	r3, r5
 800ab7a:	dcf2      	bgt.n	800ab62 <_printf_i+0x21e>
 800ab7c:	e7eb      	b.n	800ab56 <_printf_i+0x212>
 800ab7e:	2500      	movs	r5, #0
 800ab80:	f104 0619 	add.w	r6, r4, #25
 800ab84:	e7f5      	b.n	800ab72 <_printf_i+0x22e>
 800ab86:	bf00      	nop
 800ab88:	0800aee5 	.word	0x0800aee5
 800ab8c:	0800aef6 	.word	0x0800aef6

0800ab90 <__retarget_lock_acquire_recursive>:
 800ab90:	4770      	bx	lr

0800ab92 <__retarget_lock_release_recursive>:
 800ab92:	4770      	bx	lr

0800ab94 <memcpy>:
 800ab94:	440a      	add	r2, r1
 800ab96:	4291      	cmp	r1, r2
 800ab98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ab9c:	d100      	bne.n	800aba0 <memcpy+0xc>
 800ab9e:	4770      	bx	lr
 800aba0:	b510      	push	{r4, lr}
 800aba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abaa:	4291      	cmp	r1, r2
 800abac:	d1f9      	bne.n	800aba2 <memcpy+0xe>
 800abae:	bd10      	pop	{r4, pc}

0800abb0 <memmove>:
 800abb0:	4288      	cmp	r0, r1
 800abb2:	b510      	push	{r4, lr}
 800abb4:	eb01 0402 	add.w	r4, r1, r2
 800abb8:	d902      	bls.n	800abc0 <memmove+0x10>
 800abba:	4284      	cmp	r4, r0
 800abbc:	4623      	mov	r3, r4
 800abbe:	d807      	bhi.n	800abd0 <memmove+0x20>
 800abc0:	1e43      	subs	r3, r0, #1
 800abc2:	42a1      	cmp	r1, r4
 800abc4:	d008      	beq.n	800abd8 <memmove+0x28>
 800abc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abce:	e7f8      	b.n	800abc2 <memmove+0x12>
 800abd0:	4402      	add	r2, r0
 800abd2:	4601      	mov	r1, r0
 800abd4:	428a      	cmp	r2, r1
 800abd6:	d100      	bne.n	800abda <memmove+0x2a>
 800abd8:	bd10      	pop	{r4, pc}
 800abda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800abde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800abe2:	e7f7      	b.n	800abd4 <memmove+0x24>

0800abe4 <_realloc_r>:
 800abe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abe6:	4607      	mov	r7, r0
 800abe8:	4614      	mov	r4, r2
 800abea:	460e      	mov	r6, r1
 800abec:	b921      	cbnz	r1, 800abf8 <_realloc_r+0x14>
 800abee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800abf2:	4611      	mov	r1, r2
 800abf4:	f7ff bc46 	b.w	800a484 <_malloc_r>
 800abf8:	b922      	cbnz	r2, 800ac04 <_realloc_r+0x20>
 800abfa:	f7ff fbf3 	bl	800a3e4 <_free_r>
 800abfe:	4625      	mov	r5, r4
 800ac00:	4628      	mov	r0, r5
 800ac02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac04:	f000 f814 	bl	800ac30 <_malloc_usable_size_r>
 800ac08:	42a0      	cmp	r0, r4
 800ac0a:	d20f      	bcs.n	800ac2c <_realloc_r+0x48>
 800ac0c:	4621      	mov	r1, r4
 800ac0e:	4638      	mov	r0, r7
 800ac10:	f7ff fc38 	bl	800a484 <_malloc_r>
 800ac14:	4605      	mov	r5, r0
 800ac16:	2800      	cmp	r0, #0
 800ac18:	d0f2      	beq.n	800ac00 <_realloc_r+0x1c>
 800ac1a:	4631      	mov	r1, r6
 800ac1c:	4622      	mov	r2, r4
 800ac1e:	f7ff ffb9 	bl	800ab94 <memcpy>
 800ac22:	4631      	mov	r1, r6
 800ac24:	4638      	mov	r0, r7
 800ac26:	f7ff fbdd 	bl	800a3e4 <_free_r>
 800ac2a:	e7e9      	b.n	800ac00 <_realloc_r+0x1c>
 800ac2c:	4635      	mov	r5, r6
 800ac2e:	e7e7      	b.n	800ac00 <_realloc_r+0x1c>

0800ac30 <_malloc_usable_size_r>:
 800ac30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac34:	1f18      	subs	r0, r3, #4
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	bfbc      	itt	lt
 800ac3a:	580b      	ldrlt	r3, [r1, r0]
 800ac3c:	18c0      	addlt	r0, r0, r3
 800ac3e:	4770      	bx	lr

0800ac40 <_init>:
 800ac40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac42:	bf00      	nop
 800ac44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac46:	bc08      	pop	{r3}
 800ac48:	469e      	mov	lr, r3
 800ac4a:	4770      	bx	lr

0800ac4c <_fini>:
 800ac4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac4e:	bf00      	nop
 800ac50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac52:	bc08      	pop	{r3}
 800ac54:	469e      	mov	lr, r3
 800ac56:	4770      	bx	lr
