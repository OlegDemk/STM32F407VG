
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800b274  0800b274  0001b274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7d8  0800b7d8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7d8  0800b7d8  0001b7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7e0  0800b7e0  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7e0  0800b7e0  0001b7e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b7e4  0800b7e4  0001b7e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800b7e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000984  200001d8  0800b9c0  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b5c  0800b9c0  00020b5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023d4f  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004be7  00000000  00000000  00043f57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f8  00000000  00000000  00048b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001728  00000000  00000000  0004a438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025cd2  00000000  00000000  0004bb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022d04  00000000  00000000  00071832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4f8c  00000000  00000000  00094536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001694c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b10  00000000  00000000  00169518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001d8 	.word	0x200001d8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b25c 	.word	0x0800b25c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001dc 	.word	0x200001dc
 80001c4:	0800b25c 	.word	0x0800b25c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b089      	sub	sp, #36	; 0x24
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	4604      	mov	r4, r0
 80004c8:	4608      	mov	r0, r1
 80004ca:	4611      	mov	r1, r2
 80004cc:	461a      	mov	r2, r3
 80004ce:	4623      	mov	r3, r4
 80004d0:	71fb      	strb	r3, [r7, #7]
 80004d2:	4603      	mov	r3, r0
 80004d4:	80bb      	strh	r3, [r7, #4]
 80004d6:	460b      	mov	r3, r1
 80004d8:	71bb      	strb	r3, [r7, #6]
 80004da:	4613      	mov	r3, r2
 80004dc:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80004e2:	7dfb      	ldrb	r3, [r7, #23]
 80004e4:	2b1f      	cmp	r3, #31
 80004e6:	d902      	bls.n	80004ee <ILI9341_Draw_Char+0x2e>
        //Character = 0;
    	//break;
    } else {
        function_char -= 32;
 80004e8:	7dfb      	ldrb	r3, [r7, #23]
 80004ea:	3b20      	subs	r3, #32
 80004ec:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80004ee:	2300      	movs	r3, #0
 80004f0:	753b      	strb	r3, [r7, #20]
 80004f2:	e012      	b.n	800051a <ILI9341_Draw_Char+0x5a>
		{
		temp[k] = font[function_char][k];
 80004f4:	7dfa      	ldrb	r2, [r7, #23]
 80004f6:	7d38      	ldrb	r0, [r7, #20]
 80004f8:	7d39      	ldrb	r1, [r7, #20]
 80004fa:	4c3b      	ldr	r4, [pc, #236]	; (80005e8 <ILI9341_Draw_Char+0x128>)
 80004fc:	4613      	mov	r3, r2
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	4413      	add	r3, r2
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	4423      	add	r3, r4
 8000506:	4403      	add	r3, r0
 8000508:	781a      	ldrb	r2, [r3, #0]
 800050a:	f107 0318 	add.w	r3, r7, #24
 800050e:	440b      	add	r3, r1
 8000510:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000514:	7d3b      	ldrb	r3, [r7, #20]
 8000516:	3301      	adds	r3, #1
 8000518:	753b      	strb	r3, [r7, #20]
 800051a:	7d3b      	ldrb	r3, [r7, #20]
 800051c:	2b05      	cmp	r3, #5
 800051e:	d9e9      	bls.n	80004f4 <ILI9341_Draw_Char+0x34>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8000520:	79bb      	ldrb	r3, [r7, #6]
 8000522:	b299      	uxth	r1, r3
 8000524:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000526:	461a      	mov	r2, r3
 8000528:	0052      	lsls	r2, r2, #1
 800052a:	4413      	add	r3, r2
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	b29a      	uxth	r2, r3
 8000530:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000532:	00db      	lsls	r3, r3, #3
 8000534:	b29c      	uxth	r4, r3
 8000536:	88b8      	ldrh	r0, [r7, #4]
 8000538:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	4623      	mov	r3, r4
 800053e:	f000 fc37 	bl	8000db0 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000542:	2300      	movs	r3, #0
 8000544:	757b      	strb	r3, [r7, #21]
 8000546:	e046      	b.n	80005d6 <ILI9341_Draw_Char+0x116>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000548:	2300      	movs	r3, #0
 800054a:	75bb      	strb	r3, [r7, #22]
 800054c:	e03d      	b.n	80005ca <ILI9341_Draw_Char+0x10a>
            if (temp[j] & (1<<i)) {			
 800054e:	7d7b      	ldrb	r3, [r7, #21]
 8000550:	f107 0218 	add.w	r2, r7, #24
 8000554:	4413      	add	r3, r2
 8000556:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800055a:	461a      	mov	r2, r3
 800055c:	7dbb      	ldrb	r3, [r7, #22]
 800055e:	fa42 f303 	asr.w	r3, r2, r3
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	2b00      	cmp	r3, #0
 8000568:	d02c      	beq.n	80005c4 <ILI9341_Draw_Char+0x104>
							if(Size == 1)
 800056a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800056c:	2b01      	cmp	r3, #1
 800056e:	d10f      	bne.n	8000590 <ILI9341_Draw_Char+0xd0>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8000570:	7d7b      	ldrb	r3, [r7, #21]
 8000572:	b29a      	uxth	r2, r3
 8000574:	88bb      	ldrh	r3, [r7, #4]
 8000576:	4413      	add	r3, r2
 8000578:	b298      	uxth	r0, r3
 800057a:	79bb      	ldrb	r3, [r7, #6]
 800057c:	b29a      	uxth	r2, r3
 800057e:	7dbb      	ldrb	r3, [r7, #22]
 8000580:	b29b      	uxth	r3, r3
 8000582:	4413      	add	r3, r2
 8000584:	b29b      	uxth	r3, r3
 8000586:	887a      	ldrh	r2, [r7, #2]
 8000588:	4619      	mov	r1, r3
 800058a:	f000 fb49 	bl	8000c20 <ILI9341_Draw_Pixel>
 800058e:	e019      	b.n	80005c4 <ILI9341_Draw_Char+0x104>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8000590:	7d7b      	ldrb	r3, [r7, #21]
 8000592:	b29b      	uxth	r3, r3
 8000594:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000596:	fb12 f303 	smulbb	r3, r2, r3
 800059a:	b29a      	uxth	r2, r3
 800059c:	88bb      	ldrh	r3, [r7, #4]
 800059e:	4413      	add	r3, r2
 80005a0:	b298      	uxth	r0, r3
 80005a2:	79bb      	ldrb	r3, [r7, #6]
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	7dbb      	ldrb	r3, [r7, #22]
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80005ac:	fb11 f303 	smulbb	r3, r1, r3
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	4413      	add	r3, r2
 80005b4:	b299      	uxth	r1, r3
 80005b6:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80005b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80005ba:	887b      	ldrh	r3, [r7, #2]
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	4623      	mov	r3, r4
 80005c0:	f000 fbf6 	bl	8000db0 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80005c4:	7dbb      	ldrb	r3, [r7, #22]
 80005c6:	3301      	adds	r3, #1
 80005c8:	75bb      	strb	r3, [r7, #22]
 80005ca:	7dbb      	ldrb	r3, [r7, #22]
 80005cc:	2b07      	cmp	r3, #7
 80005ce:	d9be      	bls.n	800054e <ILI9341_Draw_Char+0x8e>
    for (j=0; j<CHAR_WIDTH; j++) {
 80005d0:	7d7b      	ldrb	r3, [r7, #21]
 80005d2:	3301      	adds	r3, #1
 80005d4:	757b      	strb	r3, [r7, #21]
 80005d6:	7d7b      	ldrb	r3, [r7, #21]
 80005d8:	2b05      	cmp	r3, #5
 80005da:	d9b5      	bls.n	8000548 <ILI9341_Draw_Char+0x88>
							}
            }						
        }
    }
}
 80005dc:	bf00      	nop
 80005de:	bf00      	nop
 80005e0:	371c      	adds	r7, #28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd90      	pop	{r4, r7, pc}
 80005e6:	bf00      	nop
 80005e8:	0800b38c 	.word	0x0800b38c

080005ec <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b087      	sub	sp, #28
 80005f0:	af02      	add	r7, sp, #8
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	4608      	mov	r0, r1
 80005f6:	4611      	mov	r1, r2
 80005f8:	461a      	mov	r2, r3
 80005fa:	4603      	mov	r3, r0
 80005fc:	817b      	strh	r3, [r7, #10]
 80005fe:	460b      	mov	r3, r1
 8000600:	727b      	strb	r3, [r7, #9]
 8000602:	4613      	mov	r3, r2
 8000604:	80fb      	strh	r3, [r7, #6]
    while (*Text) {
 8000606:	e016      	b.n	8000636 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	1c5a      	adds	r2, r3, #1
 800060c:	60fa      	str	r2, [r7, #12]
 800060e:	7818      	ldrb	r0, [r3, #0]
 8000610:	88fc      	ldrh	r4, [r7, #6]
 8000612:	7a7a      	ldrb	r2, [r7, #9]
 8000614:	8979      	ldrh	r1, [r7, #10]
 8000616:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	8c3b      	ldrh	r3, [r7, #32]
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	4623      	mov	r3, r4
 8000620:	f7ff ff4e 	bl	80004c0 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8000624:	8c3b      	ldrh	r3, [r7, #32]
 8000626:	461a      	mov	r2, r3
 8000628:	0052      	lsls	r2, r2, #1
 800062a:	4413      	add	r3, r2
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	b29a      	uxth	r2, r3
 8000630:	897b      	ldrh	r3, [r7, #10]
 8000632:	4413      	add	r3, r2
 8000634:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1e4      	bne.n	8000608 <ILI9341_Draw_Text+0x1c>
    }
}
 800063e:	bf00      	nop
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	bd90      	pop	{r4, r7, pc}

08000648 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 800064c:	2200      	movs	r2, #0
 800064e:	2110      	movs	r1, #16
 8000650:	4802      	ldr	r0, [pc, #8]	; (800065c <ILI9341_SPI_Init+0x14>)
 8000652:	f002 fe7d 	bl	8003350 <HAL_GPIO_WritePin>
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000

08000660 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800066a:	1df9      	adds	r1, r7, #7
 800066c:	2301      	movs	r3, #1
 800066e:	2201      	movs	r2, #1
 8000670:	4803      	ldr	r0, [pc, #12]	; (8000680 <ILI9341_SPI_Send+0x20>)
 8000672:	f006 f83c 	bl	80066ee <HAL_SPI_Transmit>
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2000028c 	.word	0x2000028c

08000684 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2110      	movs	r1, #16
 8000692:	480a      	ldr	r0, [pc, #40]	; (80006bc <ILI9341_Write_Command+0x38>)
 8000694:	f002 fe5c 	bl	8003350 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000698:	2200      	movs	r2, #0
 800069a:	2140      	movs	r1, #64	; 0x40
 800069c:	4807      	ldr	r0, [pc, #28]	; (80006bc <ILI9341_Write_Command+0x38>)
 800069e:	f002 fe57 	bl	8003350 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ffdb 	bl	8000660 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80006aa:	2201      	movs	r2, #1
 80006ac:	2110      	movs	r1, #16
 80006ae:	4803      	ldr	r0, [pc, #12]	; (80006bc <ILI9341_Write_Command+0x38>)
 80006b0:	f002 fe4e 	bl	8003350 <HAL_GPIO_WritePin>
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40021000 	.word	0x40021000

080006c0 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80006ca:	2201      	movs	r2, #1
 80006cc:	2140      	movs	r1, #64	; 0x40
 80006ce:	480a      	ldr	r0, [pc, #40]	; (80006f8 <ILI9341_Write_Data+0x38>)
 80006d0:	f002 fe3e 	bl	8003350 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2110      	movs	r1, #16
 80006d8:	4807      	ldr	r0, [pc, #28]	; (80006f8 <ILI9341_Write_Data+0x38>)
 80006da:	f002 fe39 	bl	8003350 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ffbd 	bl	8000660 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	2110      	movs	r1, #16
 80006ea:	4803      	ldr	r0, [pc, #12]	; (80006f8 <ILI9341_Write_Data+0x38>)
 80006ec:	f002 fe30 	bl	8003350 <HAL_GPIO_WritePin>
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40021000 	.word	0x40021000

080006fc <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4604      	mov	r4, r0
 8000704:	4608      	mov	r0, r1
 8000706:	4611      	mov	r1, r2
 8000708:	461a      	mov	r2, r3
 800070a:	4623      	mov	r3, r4
 800070c:	80fb      	strh	r3, [r7, #6]
 800070e:	4603      	mov	r3, r0
 8000710:	80bb      	strh	r3, [r7, #4]
 8000712:	460b      	mov	r3, r1
 8000714:	807b      	strh	r3, [r7, #2]
 8000716:	4613      	mov	r3, r2
 8000718:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800071a:	202a      	movs	r0, #42	; 0x2a
 800071c:	f7ff ffb2 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000720:	88fb      	ldrh	r3, [r7, #6]
 8000722:	0a1b      	lsrs	r3, r3, #8
 8000724:	b29b      	uxth	r3, r3
 8000726:	b2db      	uxtb	r3, r3
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ffc9 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ffc4 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000738:	887b      	ldrh	r3, [r7, #2]
 800073a:	0a1b      	lsrs	r3, r3, #8
 800073c:	b29b      	uxth	r3, r3
 800073e:	b2db      	uxtb	r3, r3
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ffbd 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000746:	887b      	ldrh	r3, [r7, #2]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ffb8 	bl	80006c0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000750:	202b      	movs	r0, #43	; 0x2b
 8000752:	f7ff ff97 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000756:	88bb      	ldrh	r3, [r7, #4]
 8000758:	0a1b      	lsrs	r3, r3, #8
 800075a:	b29b      	uxth	r3, r3
 800075c:	b2db      	uxtb	r3, r3
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ffae 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000764:	88bb      	ldrh	r3, [r7, #4]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ffa9 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800076e:	883b      	ldrh	r3, [r7, #0]
 8000770:	0a1b      	lsrs	r3, r3, #8
 8000772:	b29b      	uxth	r3, r3
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ffa2 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 800077c:	883b      	ldrh	r3, [r7, #0]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff9d 	bl	80006c0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000786:	202c      	movs	r0, #44	; 0x2c
 8000788:	f7ff ff7c 	bl	8000684 <ILI9341_Write_Command>
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bd90      	pop	{r4, r7, pc}

08000794 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2120      	movs	r1, #32
 800079c:	480a      	ldr	r0, [pc, #40]	; (80007c8 <ILI9341_Reset+0x34>)
 800079e:	f002 fdd7 	bl	8003350 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80007a2:	20c8      	movs	r0, #200	; 0xc8
 80007a4:	f002 faea 	bl	8002d7c <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2110      	movs	r1, #16
 80007ac:	4806      	ldr	r0, [pc, #24]	; (80007c8 <ILI9341_Reset+0x34>)
 80007ae:	f002 fdcf 	bl	8003350 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80007b2:	20c8      	movs	r0, #200	; 0xc8
 80007b4:	f002 fae2 	bl	8002d7c <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80007b8:	2201      	movs	r2, #1
 80007ba:	2120      	movs	r1, #32
 80007bc:	4802      	ldr	r0, [pc, #8]	; (80007c8 <ILI9341_Reset+0x34>)
 80007be:	f002 fdc7 	bl	8003350 <HAL_GPIO_WritePin>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40021000 	.word	0x40021000

080007cc <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80007da:	2036      	movs	r0, #54	; 0x36
 80007dc:	f7ff ff52 	bl	8000684 <ILI9341_Write_Command>
HAL_Delay(1);
 80007e0:	2001      	movs	r0, #1
 80007e2:	f002 facb 	bl	8002d7c <HAL_Delay>
	
switch(screen_rotation) 
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	2b03      	cmp	r3, #3
 80007ea:	d837      	bhi.n	800085c <ILI9341_Set_Rotation+0x90>
 80007ec:	a201      	add	r2, pc, #4	; (adr r2, 80007f4 <ILI9341_Set_Rotation+0x28>)
 80007ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007f2:	bf00      	nop
 80007f4:	08000805 	.word	0x08000805
 80007f8:	0800081b 	.word	0x0800081b
 80007fc:	08000831 	.word	0x08000831
 8000800:	08000847 	.word	0x08000847
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000804:	2048      	movs	r0, #72	; 0x48
 8000806:	f7ff ff5b 	bl	80006c0 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <ILI9341_Set_Rotation+0x9c>)
 800080c:	22f0      	movs	r2, #240	; 0xf0
 800080e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000810:	4b16      	ldr	r3, [pc, #88]	; (800086c <ILI9341_Set_Rotation+0xa0>)
 8000812:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000816:	801a      	strh	r2, [r3, #0]
			break;
 8000818:	e021      	b.n	800085e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800081a:	2028      	movs	r0, #40	; 0x28
 800081c:	f7ff ff50 	bl	80006c0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <ILI9341_Set_Rotation+0x9c>)
 8000822:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000826:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000828:	4b10      	ldr	r3, [pc, #64]	; (800086c <ILI9341_Set_Rotation+0xa0>)
 800082a:	22f0      	movs	r2, #240	; 0xf0
 800082c:	801a      	strh	r2, [r3, #0]
			break;
 800082e:	e016      	b.n	800085e <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000830:	2088      	movs	r0, #136	; 0x88
 8000832:	f7ff ff45 	bl	80006c0 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <ILI9341_Set_Rotation+0x9c>)
 8000838:	22f0      	movs	r2, #240	; 0xf0
 800083a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800083c:	4b0b      	ldr	r3, [pc, #44]	; (800086c <ILI9341_Set_Rotation+0xa0>)
 800083e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000842:	801a      	strh	r2, [r3, #0]
			break;
 8000844:	e00b      	b.n	800085e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000846:	20e8      	movs	r0, #232	; 0xe8
 8000848:	f7ff ff3a 	bl	80006c0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <ILI9341_Set_Rotation+0x9c>)
 800084e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000852:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <ILI9341_Set_Rotation+0xa0>)
 8000856:	22f0      	movs	r2, #240	; 0xf0
 8000858:	801a      	strh	r2, [r3, #0]
			break;
 800085a:	e000      	b.n	800085e <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800085c:	bf00      	nop
	}
}
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000002 	.word	0x20000002
 800086c:	20000000 	.word	0x20000000

08000870 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	2120      	movs	r1, #32
 8000878:	4802      	ldr	r0, [pc, #8]	; (8000884 <ILI9341_Enable+0x14>)
 800087a:	f002 fd69 	bl	8003350 <HAL_GPIO_WritePin>
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40021000 	.word	0x40021000

08000888 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0

ILI9341_Enable();
 800088c:	f7ff fff0 	bl	8000870 <ILI9341_Enable>
ILI9341_SPI_Init();
 8000890:	f7ff feda 	bl	8000648 <ILI9341_SPI_Init>
ILI9341_Reset();
 8000894:	f7ff ff7e 	bl	8000794 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000898:	2001      	movs	r0, #1
 800089a:	f7ff fef3 	bl	8000684 <ILI9341_Write_Command>
HAL_Delay(1000);
 800089e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a2:	f002 fa6b 	bl	8002d7c <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80008a6:	20cb      	movs	r0, #203	; 0xcb
 80008a8:	f7ff feec 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80008ac:	2039      	movs	r0, #57	; 0x39
 80008ae:	f7ff ff07 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80008b2:	202c      	movs	r0, #44	; 0x2c
 80008b4:	f7ff ff04 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80008b8:	2000      	movs	r0, #0
 80008ba:	f7ff ff01 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80008be:	2034      	movs	r0, #52	; 0x34
 80008c0:	f7ff fefe 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80008c4:	2002      	movs	r0, #2
 80008c6:	f7ff fefb 	bl	80006c0 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80008ca:	20cf      	movs	r0, #207	; 0xcf
 80008cc:	f7ff feda 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80008d0:	2000      	movs	r0, #0
 80008d2:	f7ff fef5 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80008d6:	20c1      	movs	r0, #193	; 0xc1
 80008d8:	f7ff fef2 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80008dc:	2030      	movs	r0, #48	; 0x30
 80008de:	f7ff feef 	bl	80006c0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80008e2:	20e8      	movs	r0, #232	; 0xe8
 80008e4:	f7ff fece 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80008e8:	2085      	movs	r0, #133	; 0x85
 80008ea:	f7ff fee9 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f7ff fee6 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80008f4:	2078      	movs	r0, #120	; 0x78
 80008f6:	f7ff fee3 	bl	80006c0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80008fa:	20ea      	movs	r0, #234	; 0xea
 80008fc:	f7ff fec2 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000900:	2000      	movs	r0, #0
 8000902:	f7ff fedd 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff feda 	bl	80006c0 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 800090c:	20ed      	movs	r0, #237	; 0xed
 800090e:	f7ff feb9 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000912:	2064      	movs	r0, #100	; 0x64
 8000914:	f7ff fed4 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000918:	2003      	movs	r0, #3
 800091a:	f7ff fed1 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800091e:	2012      	movs	r0, #18
 8000920:	f7ff fece 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000924:	2081      	movs	r0, #129	; 0x81
 8000926:	f7ff fecb 	bl	80006c0 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800092a:	20f7      	movs	r0, #247	; 0xf7
 800092c:	f7ff feaa 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000930:	2020      	movs	r0, #32
 8000932:	f7ff fec5 	bl	80006c0 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000936:	20c0      	movs	r0, #192	; 0xc0
 8000938:	f7ff fea4 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 800093c:	2023      	movs	r0, #35	; 0x23
 800093e:	f7ff febf 	bl	80006c0 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000942:	20c1      	movs	r0, #193	; 0xc1
 8000944:	f7ff fe9e 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000948:	2010      	movs	r0, #16
 800094a:	f7ff feb9 	bl	80006c0 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800094e:	20c5      	movs	r0, #197	; 0xc5
 8000950:	f7ff fe98 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000954:	203e      	movs	r0, #62	; 0x3e
 8000956:	f7ff feb3 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800095a:	2028      	movs	r0, #40	; 0x28
 800095c:	f7ff feb0 	bl	80006c0 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000960:	20c7      	movs	r0, #199	; 0xc7
 8000962:	f7ff fe8f 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000966:	2086      	movs	r0, #134	; 0x86
 8000968:	f7ff feaa 	bl	80006c0 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 800096c:	2036      	movs	r0, #54	; 0x36
 800096e:	f7ff fe89 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000972:	2048      	movs	r0, #72	; 0x48
 8000974:	f7ff fea4 	bl	80006c0 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000978:	203a      	movs	r0, #58	; 0x3a
 800097a:	f7ff fe83 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 800097e:	2055      	movs	r0, #85	; 0x55
 8000980:	f7ff fe9e 	bl	80006c0 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000984:	20b1      	movs	r0, #177	; 0xb1
 8000986:	f7ff fe7d 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff fe98 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000990:	2018      	movs	r0, #24
 8000992:	f7ff fe95 	bl	80006c0 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8000996:	20b6      	movs	r0, #182	; 0xb6
 8000998:	f7ff fe74 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 800099c:	2008      	movs	r0, #8
 800099e:	f7ff fe8f 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80009a2:	2082      	movs	r0, #130	; 0x82
 80009a4:	f7ff fe8c 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80009a8:	2027      	movs	r0, #39	; 0x27
 80009aa:	f7ff fe89 	bl	80006c0 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80009ae:	20f2      	movs	r0, #242	; 0xf2
 80009b0:	f7ff fe68 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f7ff fe83 	bl	80006c0 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80009ba:	2026      	movs	r0, #38	; 0x26
 80009bc:	f7ff fe62 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80009c0:	2001      	movs	r0, #1
 80009c2:	f7ff fe7d 	bl	80006c0 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80009c6:	20e0      	movs	r0, #224	; 0xe0
 80009c8:	f7ff fe5c 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80009cc:	200f      	movs	r0, #15
 80009ce:	f7ff fe77 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80009d2:	2031      	movs	r0, #49	; 0x31
 80009d4:	f7ff fe74 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80009d8:	202b      	movs	r0, #43	; 0x2b
 80009da:	f7ff fe71 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80009de:	200c      	movs	r0, #12
 80009e0:	f7ff fe6e 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80009e4:	200e      	movs	r0, #14
 80009e6:	f7ff fe6b 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80009ea:	2008      	movs	r0, #8
 80009ec:	f7ff fe68 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80009f0:	204e      	movs	r0, #78	; 0x4e
 80009f2:	f7ff fe65 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80009f6:	20f1      	movs	r0, #241	; 0xf1
 80009f8:	f7ff fe62 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80009fc:	2037      	movs	r0, #55	; 0x37
 80009fe:	f7ff fe5f 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000a02:	2007      	movs	r0, #7
 8000a04:	f7ff fe5c 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000a08:	2010      	movs	r0, #16
 8000a0a:	f7ff fe59 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000a0e:	2003      	movs	r0, #3
 8000a10:	f7ff fe56 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000a14:	200e      	movs	r0, #14
 8000a16:	f7ff fe53 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000a1a:	2009      	movs	r0, #9
 8000a1c:	f7ff fe50 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff fe4d 	bl	80006c0 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000a26:	20e1      	movs	r0, #225	; 0xe1
 8000a28:	f7ff fe2c 	bl	8000684 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f7ff fe47 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000a32:	200e      	movs	r0, #14
 8000a34:	f7ff fe44 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000a38:	2014      	movs	r0, #20
 8000a3a:	f7ff fe41 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000a3e:	2003      	movs	r0, #3
 8000a40:	f7ff fe3e 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000a44:	2011      	movs	r0, #17
 8000a46:	f7ff fe3b 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000a4a:	2007      	movs	r0, #7
 8000a4c:	f7ff fe38 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000a50:	2031      	movs	r0, #49	; 0x31
 8000a52:	f7ff fe35 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000a56:	20c1      	movs	r0, #193	; 0xc1
 8000a58:	f7ff fe32 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000a5c:	2048      	movs	r0, #72	; 0x48
 8000a5e:	f7ff fe2f 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000a62:	2008      	movs	r0, #8
 8000a64:	f7ff fe2c 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000a68:	200f      	movs	r0, #15
 8000a6a:	f7ff fe29 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000a6e:	200c      	movs	r0, #12
 8000a70:	f7ff fe26 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000a74:	2031      	movs	r0, #49	; 0x31
 8000a76:	f7ff fe23 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000a7a:	2036      	movs	r0, #54	; 0x36
 8000a7c:	f7ff fe20 	bl	80006c0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000a80:	200f      	movs	r0, #15
 8000a82:	f7ff fe1d 	bl	80006c0 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000a86:	2011      	movs	r0, #17
 8000a88:	f7ff fdfc 	bl	8000684 <ILI9341_Write_Command>
HAL_Delay(120);
 8000a8c:	2078      	movs	r0, #120	; 0x78
 8000a8e:	f002 f975 	bl	8002d7c <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000a92:	2029      	movs	r0, #41	; 0x29
 8000a94:	f7ff fdf6 	bl	8000684 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f7ff fe97 	bl	80007cc <ILI9341_Set_Rotation>

HAL_Delay(10);
 8000a9e:	200a      	movs	r0, #10
 8000aa0:	f002 f96c 	bl	8002d7c <HAL_Delay>
//
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000aa8:	b5b0      	push	{r4, r5, r7, lr}
 8000aaa:	b08c      	sub	sp, #48	; 0x30
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	6039      	str	r1, [r7, #0]
 8000ab2:	80fb      	strh	r3, [r7, #6]
 8000ab4:	466b      	mov	r3, sp
 8000ab6:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ac4:	d202      	bcs.n	8000acc <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8000aca:	e002      	b.n	8000ad2 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000acc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2140      	movs	r1, #64	; 0x40
 8000ad6:	483d      	ldr	r0, [pc, #244]	; (8000bcc <ILI9341_Draw_Colour_Burst+0x124>)
 8000ad8:	f002 fc3a 	bl	8003350 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2110      	movs	r1, #16
 8000ae0:	483a      	ldr	r0, [pc, #232]	; (8000bcc <ILI9341_Draw_Colour_Burst+0x124>)
 8000ae2:	f002 fc35 	bl	8003350 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8000af0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000af2:	4623      	mov	r3, r4
 8000af4:	3b01      	subs	r3, #1
 8000af6:	61fb      	str	r3, [r7, #28]
 8000af8:	4620      	mov	r0, r4
 8000afa:	f04f 0100 	mov.w	r1, #0
 8000afe:	f04f 0200 	mov.w	r2, #0
 8000b02:	f04f 0300 	mov.w	r3, #0
 8000b06:	00cb      	lsls	r3, r1, #3
 8000b08:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b0c:	00c2      	lsls	r2, r0, #3
 8000b0e:	4620      	mov	r0, r4
 8000b10:	f04f 0100 	mov.w	r1, #0
 8000b14:	f04f 0200 	mov.w	r2, #0
 8000b18:	f04f 0300 	mov.w	r3, #0
 8000b1c:	00cb      	lsls	r3, r1, #3
 8000b1e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b22:	00c2      	lsls	r2, r0, #3
 8000b24:	1de3      	adds	r3, r4, #7
 8000b26:	08db      	lsrs	r3, r3, #3
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	ebad 0d03 	sub.w	sp, sp, r3
 8000b2e:	466b      	mov	r3, sp
 8000b30:	3300      	adds	r3, #0
 8000b32:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000b34:	2300      	movs	r3, #0
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b38:	e00e      	b.n	8000b58 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8000b3a:	69ba      	ldr	r2, [r7, #24]
 8000b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b3e:	4413      	add	r3, r2
 8000b40:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000b44:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b48:	3301      	adds	r3, #1
 8000b4a:	88fa      	ldrh	r2, [r7, #6]
 8000b4c:	b2d1      	uxtb	r1, r2
 8000b4e:	69ba      	ldr	r2, [r7, #24]
 8000b50:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b54:	3302      	adds	r3, #2
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d3ec      	bcc.n	8000b3a <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000b66:	697a      	ldr	r2, [r7, #20]
 8000b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6e:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b74:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000b7a:	fb01 f202 	mul.w	r2, r1, r2
 8000b7e:	1a9b      	subs	r3, r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d010      	beq.n	8000baa <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b8c:	e009      	b.n	8000ba2 <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8000b8e:	69b9      	ldr	r1, [r7, #24]
 8000b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	230a      	movs	r3, #10
 8000b96:	480e      	ldr	r0, [pc, #56]	; (8000bd0 <ILI9341_Draw_Colour_Burst+0x128>)
 8000b98:	f005 fda9 	bl	80066ee <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d3f1      	bcc.n	8000b8e <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8000baa:	69b9      	ldr	r1, [r7, #24]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	230a      	movs	r3, #10
 8000bb2:	4807      	ldr	r0, [pc, #28]	; (8000bd0 <ILI9341_Draw_Colour_Burst+0x128>)
 8000bb4:	f005 fd9b 	bl	80066ee <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2110      	movs	r1, #16
 8000bbc:	4803      	ldr	r0, [pc, #12]	; (8000bcc <ILI9341_Draw_Colour_Burst+0x124>)
 8000bbe:	f002 fbc7 	bl	8003350 <HAL_GPIO_WritePin>
 8000bc2:	46ad      	mov	sp, r5
}
 8000bc4:	bf00      	nop
 8000bc6:	3730      	adds	r7, #48	; 0x30
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bdb0      	pop	{r4, r5, r7, pc}
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	2000028c 	.word	0x2000028c

08000bd4 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <ILI9341_Fill_Screen+0x44>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <ILI9341_Fill_Screen+0x48>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	2100      	movs	r1, #0
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fd85 	bl	80006fc <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <ILI9341_Fill_Screen+0x44>)
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <ILI9341_Fill_Screen+0x48>)
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	fb03 f302 	mul.w	r3, r3, r2
 8000c04:	461a      	mov	r2, r3
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ff4c 	bl	8000aa8 <ILI9341_Draw_Colour_Burst>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000002 	.word	0x20000002
 8000c1c:	20000000 	.word	0x20000000

08000c20 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	80fb      	strh	r3, [r7, #6]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	80bb      	strh	r3, [r7, #4]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000c32:	4b5b      	ldr	r3, [pc, #364]	; (8000da0 <ILI9341_Draw_Pixel+0x180>)
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	88fa      	ldrh	r2, [r7, #6]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	f080 80ac 	bcs.w	8000d98 <ILI9341_Draw_Pixel+0x178>
 8000c40:	4b58      	ldr	r3, [pc, #352]	; (8000da4 <ILI9341_Draw_Pixel+0x184>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	88ba      	ldrh	r2, [r7, #4]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	f080 80a5 	bcs.w	8000d98 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2140      	movs	r1, #64	; 0x40
 8000c52:	4855      	ldr	r0, [pc, #340]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000c54:	f002 fb7c 	bl	8003350 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2110      	movs	r1, #16
 8000c5c:	4852      	ldr	r0, [pc, #328]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000c5e:	f002 fb77 	bl	8003350 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8000c62:	202a      	movs	r0, #42	; 0x2a
 8000c64:	f7ff fcfc 	bl	8000660 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2140      	movs	r1, #64	; 0x40
 8000c6c:	484e      	ldr	r0, [pc, #312]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000c6e:	f002 fb6f 	bl	8003350 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000c72:	2201      	movs	r2, #1
 8000c74:	2110      	movs	r1, #16
 8000c76:	484c      	ldr	r0, [pc, #304]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000c78:	f002 fb6a 	bl	8003350 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2110      	movs	r1, #16
 8000c80:	4849      	ldr	r0, [pc, #292]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000c82:	f002 fb65 	bl	8003350 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	753b      	strb	r3, [r7, #20]
 8000c90:	88fb      	ldrh	r3, [r7, #6]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	757b      	strb	r3, [r7, #21]
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	121b      	asrs	r3, r3, #8
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	75bb      	strb	r3, [r7, #22]
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8000caa:	f107 0114 	add.w	r1, r7, #20
 8000cae:	2301      	movs	r3, #1
 8000cb0:	2204      	movs	r2, #4
 8000cb2:	483e      	ldr	r0, [pc, #248]	; (8000dac <ILI9341_Draw_Pixel+0x18c>)
 8000cb4:	f005 fd1b 	bl	80066ee <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	2110      	movs	r1, #16
 8000cbc:	483a      	ldr	r0, [pc, #232]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000cbe:	f002 fb47 	bl	8003350 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2140      	movs	r1, #64	; 0x40
 8000cc6:	4838      	ldr	r0, [pc, #224]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000cc8:	f002 fb42 	bl	8003350 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2110      	movs	r1, #16
 8000cd0:	4835      	ldr	r0, [pc, #212]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000cd2:	f002 fb3d 	bl	8003350 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8000cd6:	202b      	movs	r0, #43	; 0x2b
 8000cd8:	f7ff fcc2 	bl	8000660 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2140      	movs	r1, #64	; 0x40
 8000ce0:	4831      	ldr	r0, [pc, #196]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000ce2:	f002 fb35 	bl	8003350 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	2110      	movs	r1, #16
 8000cea:	482f      	ldr	r0, [pc, #188]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000cec:	f002 fb30 	bl	8003350 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2110      	movs	r1, #16
 8000cf4:	482c      	ldr	r0, [pc, #176]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000cf6:	f002 fb2b 	bl	8003350 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8000cfa:	88bb      	ldrh	r3, [r7, #4]
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	743b      	strb	r3, [r7, #16]
 8000d04:	88bb      	ldrh	r3, [r7, #4]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	747b      	strb	r3, [r7, #17]
 8000d0a:	88bb      	ldrh	r3, [r7, #4]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	121b      	asrs	r3, r3, #8
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	74bb      	strb	r3, [r7, #18]
 8000d14:	88bb      	ldrh	r3, [r7, #4]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	3301      	adds	r3, #1
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8000d1e:	f107 0110 	add.w	r1, r7, #16
 8000d22:	2301      	movs	r3, #1
 8000d24:	2204      	movs	r2, #4
 8000d26:	4821      	ldr	r0, [pc, #132]	; (8000dac <ILI9341_Draw_Pixel+0x18c>)
 8000d28:	f005 fce1 	bl	80066ee <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2110      	movs	r1, #16
 8000d30:	481d      	ldr	r0, [pc, #116]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000d32:	f002 fb0d 	bl	8003350 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000d36:	2200      	movs	r2, #0
 8000d38:	2140      	movs	r1, #64	; 0x40
 8000d3a:	481b      	ldr	r0, [pc, #108]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000d3c:	f002 fb08 	bl	8003350 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000d40:	2200      	movs	r2, #0
 8000d42:	2110      	movs	r1, #16
 8000d44:	4818      	ldr	r0, [pc, #96]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000d46:	f002 fb03 	bl	8003350 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8000d4a:	202c      	movs	r0, #44	; 0x2c
 8000d4c:	f7ff fc88 	bl	8000660 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000d50:	2201      	movs	r2, #1
 8000d52:	2140      	movs	r1, #64	; 0x40
 8000d54:	4814      	ldr	r0, [pc, #80]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000d56:	f002 fafb 	bl	8003350 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2110      	movs	r1, #16
 8000d5e:	4812      	ldr	r0, [pc, #72]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000d60:	f002 faf6 	bl	8003350 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2110      	movs	r1, #16
 8000d68:	480f      	ldr	r0, [pc, #60]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000d6a:	f002 faf1 	bl	8003350 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8000d6e:	887b      	ldrh	r3, [r7, #2]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	733b      	strb	r3, [r7, #12]
 8000d78:	887b      	ldrh	r3, [r7, #2]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8000d7e:	f107 010c 	add.w	r1, r7, #12
 8000d82:	2301      	movs	r3, #1
 8000d84:	2202      	movs	r2, #2
 8000d86:	4809      	ldr	r0, [pc, #36]	; (8000dac <ILI9341_Draw_Pixel+0x18c>)
 8000d88:	f005 fcb1 	bl	80066ee <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2110      	movs	r1, #16
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <ILI9341_Draw_Pixel+0x188>)
 8000d92:	f002 fadd 	bl	8003350 <HAL_GPIO_WritePin>
 8000d96:	e000      	b.n	8000d9a <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000d98:	bf00      	nop
	
}
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000002 	.word	0x20000002
 8000da4:	20000000 	.word	0x20000000
 8000da8:	40021000 	.word	0x40021000
 8000dac:	2000028c 	.word	0x2000028c

08000db0 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4604      	mov	r4, r0
 8000db8:	4608      	mov	r0, r1
 8000dba:	4611      	mov	r1, r2
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4623      	mov	r3, r4
 8000dc0:	80fb      	strh	r3, [r7, #6]
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	80bb      	strh	r3, [r7, #4]
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	807b      	strh	r3, [r7, #2]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000dce:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <ILI9341_Draw_Rectangle+0xb0>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	88fa      	ldrh	r2, [r7, #6]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d23d      	bcs.n	8000e56 <ILI9341_Draw_Rectangle+0xa6>
 8000dda:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <ILI9341_Draw_Rectangle+0xb4>)
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	88ba      	ldrh	r2, [r7, #4]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d237      	bcs.n	8000e56 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8000de6:	88fa      	ldrh	r2, [r7, #6]
 8000de8:	887b      	ldrh	r3, [r7, #2]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a1c      	ldr	r2, [pc, #112]	; (8000e60 <ILI9341_Draw_Rectangle+0xb0>)
 8000dee:	8812      	ldrh	r2, [r2, #0]
 8000df0:	b292      	uxth	r2, r2
 8000df2:	4293      	cmp	r3, r2
 8000df4:	dd05      	ble.n	8000e02 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <ILI9341_Draw_Rectangle+0xb0>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8000e02:	88ba      	ldrh	r2, [r7, #4]
 8000e04:	883b      	ldrh	r3, [r7, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	4a16      	ldr	r2, [pc, #88]	; (8000e64 <ILI9341_Draw_Rectangle+0xb4>)
 8000e0a:	8812      	ldrh	r2, [r2, #0]
 8000e0c:	b292      	uxth	r2, r2
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	dd05      	ble.n	8000e1e <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <ILI9341_Draw_Rectangle+0xb4>)
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	88bb      	ldrh	r3, [r7, #4]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8000e1e:	88fa      	ldrh	r2, [r7, #6]
 8000e20:	887b      	ldrh	r3, [r7, #2]
 8000e22:	4413      	add	r3, r2
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	3b01      	subs	r3, #1
 8000e28:	b29c      	uxth	r4, r3
 8000e2a:	88ba      	ldrh	r2, [r7, #4]
 8000e2c:	883b      	ldrh	r3, [r7, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	3b01      	subs	r3, #1
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	88b9      	ldrh	r1, [r7, #4]
 8000e38:	88f8      	ldrh	r0, [r7, #6]
 8000e3a:	4622      	mov	r2, r4
 8000e3c:	f7ff fc5e 	bl	80006fc <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8000e40:	883b      	ldrh	r3, [r7, #0]
 8000e42:	887a      	ldrh	r2, [r7, #2]
 8000e44:	fb02 f303 	mul.w	r3, r2, r3
 8000e48:	461a      	mov	r2, r3
 8000e4a:	8b3b      	ldrh	r3, [r7, #24]
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fe2a 	bl	8000aa8 <ILI9341_Draw_Colour_Burst>
 8000e54:	e000      	b.n	8000e58 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000e56:	bf00      	nop
}
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd90      	pop	{r4, r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000002 	.word	0x20000002
 8000e64:	20000000 	.word	0x20000000

08000e68 <menu>:
uint8_t pointer_on_selected_menu =1;
//uint8_t p =0;
//void print_sign(p);

void menu()
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
	Menu_SetGenericWriteCallback(Generic_Write);  //передача показника на Generic_Write функцію  point in Menu_SetGenericWriteCallback
 8000e6e:	4832      	ldr	r0, [pc, #200]	; (8000f38 <menu+0xd0>)
 8000e70:	f000 fd4a 	bl	8001908 <Menu_SetGenericWriteCallback>

	//print_all_top_menu();
	Menu_Navigate(&Menu_1);
 8000e74:	4831      	ldr	r0, [pc, #196]	; (8000f3c <menu+0xd4>)
 8000e76:	f000 fd19 	bl	80018ac <Menu_Navigate>
//	print_sign(p);
//	Menu_Navigate(&Menu_2);
//	Menu_Navigate(&Menu_3);
	while (1)
	  {
	   uint8_t pressed_key = getPressKey();
 8000e7a:	f000 fc4f 	bl	800171c <getPressKey>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]

	   if (pressed_key != BUTTON_NOTHING && !flagPressed)
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	2bff      	cmp	r3, #255	; 0xff
 8000e86:	d04a      	beq.n	8000f1e <menu+0xb6>
 8000e88:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <menu+0xd8>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	f083 0301 	eor.w	r3, r3, #1
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d043      	beq.n	8000f1e <menu+0xb6>
	   {
			flagPressed = true;
 8000e96:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <menu+0xd8>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	701a      	strb	r2, [r3, #0]
			switch(pressed_key)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	d83b      	bhi.n	8000f1a <menu+0xb2>
 8000ea2:	a201      	add	r2, pc, #4	; (adr r2, 8000ea8 <menu+0x40>)
 8000ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea8:	08000ebd 	.word	0x08000ebd
 8000eac:	08000ecd 	.word	0x08000ecd
 8000eb0:	08000ee9 	.word	0x08000ee9
 8000eb4:	08000f05 	.word	0x08000f05
 8000eb8:	08000f15 	.word	0x08000f15
			{
				case BUTTON_LEFT:
					Menu_Navigate(MENU_PARENT);
 8000ebc:	f000 fcea 	bl	8001894 <Menu_GetCurrentMenu>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 fcf1 	bl	80018ac <Menu_Navigate>
					break;
 8000eca:	e027      	b.n	8000f1c <menu+0xb4>

				case BUTTON_UP:
					pointer_on_selected_menu--;			// <<<<<<<<<<<<<<<<
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <menu+0xdc>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <menu+0xdc>)
 8000ed6:	701a      	strb	r2, [r3, #0]
					Menu_Navigate(MENU_PREVIOUS);
 8000ed8:	f000 fcdc 	bl	8001894 <Menu_GetCurrentMenu>
 8000edc:	4603      	mov	r3, r0
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 fce3 	bl	80018ac <Menu_Navigate>
					break;
 8000ee6:	e019      	b.n	8000f1c <menu+0xb4>

				case BUTTON_DOWN:
					pointer_on_selected_menu++;			// <<<<<<<<<<<<<<<<
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <menu+0xdc>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	3301      	adds	r3, #1
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <menu+0xdc>)
 8000ef2:	701a      	strb	r2, [r3, #0]
					Menu_Navigate(MENU_NEXT);
 8000ef4:	f000 fcce 	bl	8001894 <Menu_GetCurrentMenu>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 fcd5 	bl	80018ac <Menu_Navigate>
					break;
 8000f02:	e00b      	b.n	8000f1c <menu+0xb4>

				case BUTTON_RIGHT:
					Menu_Navigate(MENU_CHILD);
 8000f04:	f000 fcc6 	bl	8001894 <Menu_GetCurrentMenu>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 fccd 	bl	80018ac <Menu_Navigate>
					break;
 8000f12:	e003      	b.n	8000f1c <menu+0xb4>

				case BUTTON_SELECT:
					Menu_EnterCurrentItem();
 8000f14:	f000 fd0c 	bl	8001930 <Menu_EnterCurrentItem>
					break;
 8000f18:	e000      	b.n	8000f1c <menu+0xb4>

			 default:
			  break;
 8000f1a:	bf00      	nop
			switch(pressed_key)
 8000f1c:	e00b      	b.n	8000f36 <menu+0xce>
			}
	   }
	   else if (getPressKey() == BUTTON_NOTHING && flagPressed)
 8000f1e:	f000 fbfd 	bl	800171c <getPressKey>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2bff      	cmp	r3, #255	; 0xff
 8000f26:	d1a8      	bne.n	8000e7a <menu+0x12>
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <menu+0xd8>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d0a4      	beq.n	8000e7a <menu+0x12>
	   {
		   flagPressed = false;
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <menu+0xd8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
	  {
 8000f36:	e7a0      	b.n	8000e7a <menu+0x12>
 8000f38:	0800184d 	.word	0x0800184d
 8000f3c:	0800b5e4 	.word	0x0800b5e4
 8000f40:	200001f8 	.word	0x200001f8
 8000f44:	20000140 	.word	0x20000140

08000f48 <print_all_top_menu>:
	  }
}
// -----------------------------------------------------------------------
//// TEST PRINT FUNCTION <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
void print_all_top_menu(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 8000f4e:	2300      	movs	r3, #0
 8000f50:	9301      	str	r3, [sp, #4]
 8000f52:	2302      	movs	r3, #2
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f5a:	226e      	movs	r2, #110	; 0x6e
 8000f5c:	211e      	movs	r1, #30
 8000f5e:	4884      	ldr	r0, [pc, #528]	; (8001170 <print_all_top_menu+0x228>)
 8000f60:	f7ff fb44 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 8000f64:	2300      	movs	r3, #0
 8000f66:	9301      	str	r3, [sp, #4]
 8000f68:	2302      	movs	r3, #2
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f70:	2282      	movs	r2, #130	; 0x82
 8000f72:	211e      	movs	r1, #30
 8000f74:	487e      	ldr	r0, [pc, #504]	; (8001170 <print_all_top_menu+0x228>)
 8000f76:	f7ff fb39 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	9301      	str	r3, [sp, #4]
 8000f7e:	2302      	movs	r3, #2
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f86:	2296      	movs	r2, #150	; 0x96
 8000f88:	211e      	movs	r1, #30
 8000f8a:	4879      	ldr	r0, [pc, #484]	; (8001170 <print_all_top_menu+0x228>)
 8000f8c:	f7ff fb2e 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 8000f90:	2300      	movs	r3, #0
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	2302      	movs	r3, #2
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f9c:	22aa      	movs	r2, #170	; 0xaa
 8000f9e:	211e      	movs	r1, #30
 8000fa0:	4873      	ldr	r0, [pc, #460]	; (8001170 <print_all_top_menu+0x228>)
 8000fa2:	f7ff fb23 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	9301      	str	r3, [sp, #4]
 8000faa:	2302      	movs	r3, #2
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000fb2:	22be      	movs	r2, #190	; 0xbe
 8000fb4:	211e      	movs	r1, #30
 8000fb6:	486e      	ldr	r0, [pc, #440]	; (8001170 <print_all_top_menu+0x228>)
 8000fb8:	f7ff fb18 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000fc8:	22d2      	movs	r2, #210	; 0xd2
 8000fca:	211e      	movs	r1, #30
 8000fcc:	4868      	ldr	r0, [pc, #416]	; (8001170 <print_all_top_menu+0x228>)
 8000fce:	f7ff fb0d 	bl	80005ec <ILI9341_Draw_Text>

	// Print all main menus
	ILI9341_Draw_Text(main_menus[0], 30, 110, WHITE, 2, BLACK);
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fde:	226e      	movs	r2, #110	; 0x6e
 8000fe0:	211e      	movs	r1, #30
 8000fe2:	4864      	ldr	r0, [pc, #400]	; (8001174 <print_all_top_menu+0x22c>)
 8000fe4:	f7ff fb02 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[1], 30, 130, WHITE, 2, BLACK);
 8000fe8:	2300      	movs	r3, #0
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	2302      	movs	r3, #2
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ff4:	2282      	movs	r2, #130	; 0x82
 8000ff6:	211e      	movs	r1, #30
 8000ff8:	485f      	ldr	r0, [pc, #380]	; (8001178 <print_all_top_menu+0x230>)
 8000ffa:	f7ff faf7 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[2], 30, 150, WHITE, 2, BLACK);
 8000ffe:	2300      	movs	r3, #0
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	2302      	movs	r3, #2
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800100a:	2296      	movs	r2, #150	; 0x96
 800100c:	211e      	movs	r1, #30
 800100e:	485b      	ldr	r0, [pc, #364]	; (800117c <print_all_top_menu+0x234>)
 8001010:	f7ff faec 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[3], 30, 170, WHITE, 2, BLACK);
 8001014:	2300      	movs	r3, #0
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	2302      	movs	r3, #2
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001020:	22aa      	movs	r2, #170	; 0xaa
 8001022:	211e      	movs	r1, #30
 8001024:	4856      	ldr	r0, [pc, #344]	; (8001180 <print_all_top_menu+0x238>)
 8001026:	f7ff fae1 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[4], 30, 190, WHITE, 2, BLACK);
 800102a:	2300      	movs	r3, #0
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	2302      	movs	r3, #2
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001036:	22be      	movs	r2, #190	; 0xbe
 8001038:	211e      	movs	r1, #30
 800103a:	4852      	ldr	r0, [pc, #328]	; (8001184 <print_all_top_menu+0x23c>)
 800103c:	f7ff fad6 	bl	80005ec <ILI9341_Draw_Text>

	//
	if(pointer_on_selected_menu <= 0)
 8001040:	4b51      	ldr	r3, [pc, #324]	; (8001188 <print_all_top_menu+0x240>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d102      	bne.n	800104e <print_all_top_menu+0x106>
	{
		pointer_on_selected_menu = 5;
 8001048:	4b4f      	ldr	r3, [pc, #316]	; (8001188 <print_all_top_menu+0x240>)
 800104a:	2205      	movs	r2, #5
 800104c:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 6)
 800104e:	4b4e      	ldr	r3, [pc, #312]	; (8001188 <print_all_top_menu+0x240>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b05      	cmp	r3, #5
 8001054:	d902      	bls.n	800105c <print_all_top_menu+0x114>
	{
		pointer_on_selected_menu = 1;
 8001056:	4b4c      	ldr	r3, [pc, #304]	; (8001188 <print_all_top_menu+0x240>)
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
	}
	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 800105c:	2300      	movs	r3, #0
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	2302      	movs	r3, #2
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001068:	226e      	movs	r2, #110	; 0x6e
 800106a:	2105      	movs	r1, #5
 800106c:	4847      	ldr	r0, [pc, #284]	; (800118c <print_all_top_menu+0x244>)
 800106e:	f7ff fabd 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 8001072:	2300      	movs	r3, #0
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	2302      	movs	r3, #2
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800107e:	2282      	movs	r2, #130	; 0x82
 8001080:	2105      	movs	r1, #5
 8001082:	4842      	ldr	r0, [pc, #264]	; (800118c <print_all_top_menu+0x244>)
 8001084:	f7ff fab2 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 8001088:	2300      	movs	r3, #0
 800108a:	9301      	str	r3, [sp, #4]
 800108c:	2302      	movs	r3, #2
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001094:	2296      	movs	r2, #150	; 0x96
 8001096:	2105      	movs	r1, #5
 8001098:	483c      	ldr	r0, [pc, #240]	; (800118c <print_all_top_menu+0x244>)
 800109a:	f7ff faa7 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 800109e:	2300      	movs	r3, #0
 80010a0:	9301      	str	r3, [sp, #4]
 80010a2:	2302      	movs	r3, #2
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010aa:	22aa      	movs	r2, #170	; 0xaa
 80010ac:	2105      	movs	r1, #5
 80010ae:	4837      	ldr	r0, [pc, #220]	; (800118c <print_all_top_menu+0x244>)
 80010b0:	f7ff fa9c 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 80010b4:	2300      	movs	r3, #0
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	2302      	movs	r3, #2
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010c0:	22be      	movs	r2, #190	; 0xbe
 80010c2:	2105      	movs	r1, #5
 80010c4:	4831      	ldr	r0, [pc, #196]	; (800118c <print_all_top_menu+0x244>)
 80010c6:	f7ff fa91 	bl	80005ec <ILI9341_Draw_Text>

	// Point pointer on menu
	switch (pointer_on_selected_menu)
 80010ca:	4b2f      	ldr	r3, [pc, #188]	; (8001188 <print_all_top_menu+0x240>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	d849      	bhi.n	8001168 <print_all_top_menu+0x220>
 80010d4:	a201      	add	r2, pc, #4	; (adr r2, 80010dc <print_all_top_menu+0x194>)
 80010d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010da:	bf00      	nop
 80010dc:	080010f1 	.word	0x080010f1
 80010e0:	08001109 	.word	0x08001109
 80010e4:	08001121 	.word	0x08001121
 80010e8:	08001139 	.word	0x08001139
 80010ec:	08001151 	.word	0x08001151
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 80010f0:	2300      	movs	r3, #0
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	2302      	movs	r3, #2
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80010fc:	226e      	movs	r2, #110	; 0x6e
 80010fe:	2105      	movs	r1, #5
 8001100:	4823      	ldr	r0, [pc, #140]	; (8001190 <print_all_top_menu+0x248>)
 8001102:	f7ff fa73 	bl	80005ec <ILI9341_Draw_Text>
			break;
 8001106:	e02f      	b.n	8001168 <print_all_top_menu+0x220>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 8001108:	2300      	movs	r3, #0
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	2302      	movs	r3, #2
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001114:	2282      	movs	r2, #130	; 0x82
 8001116:	2105      	movs	r1, #5
 8001118:	481d      	ldr	r0, [pc, #116]	; (8001190 <print_all_top_menu+0x248>)
 800111a:	f7ff fa67 	bl	80005ec <ILI9341_Draw_Text>
			break;
 800111e:	e023      	b.n	8001168 <print_all_top_menu+0x220>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 8001120:	2300      	movs	r3, #0
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	2302      	movs	r3, #2
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800112c:	2296      	movs	r2, #150	; 0x96
 800112e:	2105      	movs	r1, #5
 8001130:	4817      	ldr	r0, [pc, #92]	; (8001190 <print_all_top_menu+0x248>)
 8001132:	f7ff fa5b 	bl	80005ec <ILI9341_Draw_Text>
			break;
 8001136:	e017      	b.n	8001168 <print_all_top_menu+0x220>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 8001138:	2300      	movs	r3, #0
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	2302      	movs	r3, #2
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001144:	22aa      	movs	r2, #170	; 0xaa
 8001146:	2105      	movs	r1, #5
 8001148:	4811      	ldr	r0, [pc, #68]	; (8001190 <print_all_top_menu+0x248>)
 800114a:	f7ff fa4f 	bl	80005ec <ILI9341_Draw_Text>
			break;
 800114e:	e00b      	b.n	8001168 <print_all_top_menu+0x220>
		case 5:
			ILI9341_Draw_Text( "->", 5, 190, RED, 2, BLACK);
 8001150:	2300      	movs	r3, #0
 8001152:	9301      	str	r3, [sp, #4]
 8001154:	2302      	movs	r3, #2
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800115c:	22be      	movs	r2, #190	; 0xbe
 800115e:	2105      	movs	r1, #5
 8001160:	480b      	ldr	r0, [pc, #44]	; (8001190 <print_all_top_menu+0x248>)
 8001162:	f7ff fa43 	bl	80005ec <ILI9341_Draw_Text>
			break;
 8001166:	bf00      	nop
	}

}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	0800b274 	.word	0x0800b274
 8001174:	20000008 	.word	0x20000008
 8001178:	20000026 	.word	0x20000026
 800117c:	20000044 	.word	0x20000044
 8001180:	20000062 	.word	0x20000062
 8001184:	20000080 	.word	0x20000080
 8001188:	20000140 	.word	0x20000140
 800118c:	0800b298 	.word	0x0800b298
 8001190:	0800b29c 	.word	0x0800b29c

08001194 <print_all_menu_1_menus>:
// -----------------------------------------------------------------------
void print_all_menu_1_menus(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 800119a:	2300      	movs	r3, #0
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	2302      	movs	r3, #2
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011a6:	226e      	movs	r2, #110	; 0x6e
 80011a8:	211e      	movs	r1, #30
 80011aa:	4877      	ldr	r0, [pc, #476]	; (8001388 <print_all_menu_1_menus+0x1f4>)
 80011ac:	f7ff fa1e 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 80011b0:	2300      	movs	r3, #0
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	2302      	movs	r3, #2
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011bc:	2282      	movs	r2, #130	; 0x82
 80011be:	211e      	movs	r1, #30
 80011c0:	4871      	ldr	r0, [pc, #452]	; (8001388 <print_all_menu_1_menus+0x1f4>)
 80011c2:	f7ff fa13 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 80011c6:	2300      	movs	r3, #0
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	2302      	movs	r3, #2
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011d2:	2296      	movs	r2, #150	; 0x96
 80011d4:	211e      	movs	r1, #30
 80011d6:	486c      	ldr	r0, [pc, #432]	; (8001388 <print_all_menu_1_menus+0x1f4>)
 80011d8:	f7ff fa08 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 80011dc:	2300      	movs	r3, #0
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	2302      	movs	r3, #2
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011e8:	22aa      	movs	r2, #170	; 0xaa
 80011ea:	211e      	movs	r1, #30
 80011ec:	4866      	ldr	r0, [pc, #408]	; (8001388 <print_all_menu_1_menus+0x1f4>)
 80011ee:	f7ff f9fd 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 80011f2:	2300      	movs	r3, #0
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	2302      	movs	r3, #2
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011fe:	22be      	movs	r2, #190	; 0xbe
 8001200:	211e      	movs	r1, #30
 8001202:	4861      	ldr	r0, [pc, #388]	; (8001388 <print_all_menu_1_menus+0x1f4>)
 8001204:	f7ff f9f2 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 8001208:	2300      	movs	r3, #0
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	2302      	movs	r3, #2
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001214:	22d2      	movs	r2, #210	; 0xd2
 8001216:	211e      	movs	r1, #30
 8001218:	485b      	ldr	r0, [pc, #364]	; (8001388 <print_all_menu_1_menus+0x1f4>)
 800121a:	f7ff f9e7 	bl	80005ec <ILI9341_Draw_Text>

	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 800121e:	2300      	movs	r3, #0
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	2302      	movs	r3, #2
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800122a:	226e      	movs	r2, #110	; 0x6e
 800122c:	2105      	movs	r1, #5
 800122e:	4857      	ldr	r0, [pc, #348]	; (800138c <print_all_menu_1_menus+0x1f8>)
 8001230:	f7ff f9dc 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 8001234:	2300      	movs	r3, #0
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	2302      	movs	r3, #2
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001240:	2282      	movs	r2, #130	; 0x82
 8001242:	2105      	movs	r1, #5
 8001244:	4851      	ldr	r0, [pc, #324]	; (800138c <print_all_menu_1_menus+0x1f8>)
 8001246:	f7ff f9d1 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 800124a:	2300      	movs	r3, #0
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	2302      	movs	r3, #2
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001256:	2296      	movs	r2, #150	; 0x96
 8001258:	2105      	movs	r1, #5
 800125a:	484c      	ldr	r0, [pc, #304]	; (800138c <print_all_menu_1_menus+0x1f8>)
 800125c:	f7ff f9c6 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 8001260:	2300      	movs	r3, #0
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	2302      	movs	r3, #2
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800126c:	22aa      	movs	r2, #170	; 0xaa
 800126e:	2105      	movs	r1, #5
 8001270:	4846      	ldr	r0, [pc, #280]	; (800138c <print_all_menu_1_menus+0x1f8>)
 8001272:	f7ff f9bb 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 8001276:	2300      	movs	r3, #0
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	2302      	movs	r3, #2
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001282:	22be      	movs	r2, #190	; 0xbe
 8001284:	2105      	movs	r1, #5
 8001286:	4841      	ldr	r0, [pc, #260]	; (800138c <print_all_menu_1_menus+0x1f8>)
 8001288:	f7ff f9b0 	bl	80005ec <ILI9341_Draw_Text>

	ILI9341_Draw_Text(menu_1[0], 30, 110, WHITE, 2, BLACK);
 800128c:	2300      	movs	r3, #0
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	2302      	movs	r3, #2
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001298:	226e      	movs	r2, #110	; 0x6e
 800129a:	211e      	movs	r1, #30
 800129c:	483c      	ldr	r0, [pc, #240]	; (8001390 <print_all_menu_1_menus+0x1fc>)
 800129e:	f7ff f9a5 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[1], 30, 130, WHITE, 2, BLACK);
 80012a2:	2300      	movs	r3, #0
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	2302      	movs	r3, #2
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ae:	2282      	movs	r2, #130	; 0x82
 80012b0:	211e      	movs	r1, #30
 80012b2:	4838      	ldr	r0, [pc, #224]	; (8001394 <print_all_menu_1_menus+0x200>)
 80012b4:	f7ff f99a 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[2], 30, 150, WHITE, 2, BLACK);
 80012b8:	2300      	movs	r3, #0
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	2302      	movs	r3, #2
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012c4:	2296      	movs	r2, #150	; 0x96
 80012c6:	211e      	movs	r1, #30
 80012c8:	4833      	ldr	r0, [pc, #204]	; (8001398 <print_all_menu_1_menus+0x204>)
 80012ca:	f7ff f98f 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[3], 30, 170, WHITE, 2, BLACK);
 80012ce:	2300      	movs	r3, #0
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	2302      	movs	r3, #2
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012da:	22aa      	movs	r2, #170	; 0xaa
 80012dc:	211e      	movs	r1, #30
 80012de:	482f      	ldr	r0, [pc, #188]	; (800139c <print_all_menu_1_menus+0x208>)
 80012e0:	f7ff f984 	bl	80005ec <ILI9341_Draw_Text>

	if(pointer_on_selected_menu <= 0)
 80012e4:	4b2e      	ldr	r3, [pc, #184]	; (80013a0 <print_all_menu_1_menus+0x20c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d102      	bne.n	80012f2 <print_all_menu_1_menus+0x15e>
	{
		pointer_on_selected_menu = 4;
 80012ec:	4b2c      	ldr	r3, [pc, #176]	; (80013a0 <print_all_menu_1_menus+0x20c>)
 80012ee:	2204      	movs	r2, #4
 80012f0:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 5)
 80012f2:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <print_all_menu_1_menus+0x20c>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d902      	bls.n	8001300 <print_all_menu_1_menus+0x16c>
	{
		pointer_on_selected_menu = 1;
 80012fa:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <print_all_menu_1_menus+0x20c>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	701a      	strb	r2, [r3, #0]
	}

	switch (pointer_on_selected_menu)
 8001300:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <print_all_menu_1_menus+0x20c>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	3b01      	subs	r3, #1
 8001306:	2b03      	cmp	r3, #3
 8001308:	d83a      	bhi.n	8001380 <print_all_menu_1_menus+0x1ec>
 800130a:	a201      	add	r2, pc, #4	; (adr r2, 8001310 <print_all_menu_1_menus+0x17c>)
 800130c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001310:	08001321 	.word	0x08001321
 8001314:	08001339 	.word	0x08001339
 8001318:	08001351 	.word	0x08001351
 800131c:	08001369 	.word	0x08001369
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 8001320:	2300      	movs	r3, #0
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	2302      	movs	r3, #2
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800132c:	226e      	movs	r2, #110	; 0x6e
 800132e:	2105      	movs	r1, #5
 8001330:	481c      	ldr	r0, [pc, #112]	; (80013a4 <print_all_menu_1_menus+0x210>)
 8001332:	f7ff f95b 	bl	80005ec <ILI9341_Draw_Text>
			break;
 8001336:	e023      	b.n	8001380 <print_all_menu_1_menus+0x1ec>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 8001338:	2300      	movs	r3, #0
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	2302      	movs	r3, #2
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001344:	2282      	movs	r2, #130	; 0x82
 8001346:	2105      	movs	r1, #5
 8001348:	4816      	ldr	r0, [pc, #88]	; (80013a4 <print_all_menu_1_menus+0x210>)
 800134a:	f7ff f94f 	bl	80005ec <ILI9341_Draw_Text>
			break;
 800134e:	e017      	b.n	8001380 <print_all_menu_1_menus+0x1ec>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 8001350:	2300      	movs	r3, #0
 8001352:	9301      	str	r3, [sp, #4]
 8001354:	2302      	movs	r3, #2
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800135c:	2296      	movs	r2, #150	; 0x96
 800135e:	2105      	movs	r1, #5
 8001360:	4810      	ldr	r0, [pc, #64]	; (80013a4 <print_all_menu_1_menus+0x210>)
 8001362:	f7ff f943 	bl	80005ec <ILI9341_Draw_Text>
			break;
 8001366:	e00b      	b.n	8001380 <print_all_menu_1_menus+0x1ec>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 8001368:	2300      	movs	r3, #0
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	2302      	movs	r3, #2
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001374:	22aa      	movs	r2, #170	; 0xaa
 8001376:	2105      	movs	r1, #5
 8001378:	480a      	ldr	r0, [pc, #40]	; (80013a4 <print_all_menu_1_menus+0x210>)
 800137a:	f7ff f937 	bl	80005ec <ILI9341_Draw_Text>
			break;
 800137e:	bf00      	nop
	}
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	0800b274 	.word	0x0800b274
 800138c:	0800b298 	.word	0x0800b298
 8001390:	200000a0 	.word	0x200000a0
 8001394:	200000b4 	.word	0x200000b4
 8001398:	200000c8 	.word	0x200000c8
 800139c:	200000dc 	.word	0x200000dc
 80013a0:	20000140 	.word	0x20000140
 80013a4:	0800b29c 	.word	0x0800b29c

080013a8 <print_all_menu_1_1_menus>:
// -----------------------------------------------------------------------
void print_all_menu_1_1_menus(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 80013ae:	2300      	movs	r3, #0
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	2302      	movs	r3, #2
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80013ba:	226e      	movs	r2, #110	; 0x6e
 80013bc:	211e      	movs	r1, #30
 80013be:	4877      	ldr	r0, [pc, #476]	; (800159c <print_all_menu_1_1_menus+0x1f4>)
 80013c0:	f7ff f914 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 80013c4:	2300      	movs	r3, #0
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	2302      	movs	r3, #2
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80013d0:	2282      	movs	r2, #130	; 0x82
 80013d2:	211e      	movs	r1, #30
 80013d4:	4871      	ldr	r0, [pc, #452]	; (800159c <print_all_menu_1_1_menus+0x1f4>)
 80013d6:	f7ff f909 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 80013da:	2300      	movs	r3, #0
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	2302      	movs	r3, #2
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80013e6:	2296      	movs	r2, #150	; 0x96
 80013e8:	211e      	movs	r1, #30
 80013ea:	486c      	ldr	r0, [pc, #432]	; (800159c <print_all_menu_1_1_menus+0x1f4>)
 80013ec:	f7ff f8fe 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 80013f0:	2300      	movs	r3, #0
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	2302      	movs	r3, #2
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80013fc:	22aa      	movs	r2, #170	; 0xaa
 80013fe:	211e      	movs	r1, #30
 8001400:	4866      	ldr	r0, [pc, #408]	; (800159c <print_all_menu_1_1_menus+0x1f4>)
 8001402:	f7ff f8f3 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 8001406:	2300      	movs	r3, #0
 8001408:	9301      	str	r3, [sp, #4]
 800140a:	2302      	movs	r3, #2
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001412:	22be      	movs	r2, #190	; 0xbe
 8001414:	211e      	movs	r1, #30
 8001416:	4861      	ldr	r0, [pc, #388]	; (800159c <print_all_menu_1_1_menus+0x1f4>)
 8001418:	f7ff f8e8 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 800141c:	2300      	movs	r3, #0
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	2302      	movs	r3, #2
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001428:	22d2      	movs	r2, #210	; 0xd2
 800142a:	211e      	movs	r1, #30
 800142c:	485b      	ldr	r0, [pc, #364]	; (800159c <print_all_menu_1_1_menus+0x1f4>)
 800142e:	f7ff f8dd 	bl	80005ec <ILI9341_Draw_Text>

	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 8001432:	2300      	movs	r3, #0
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	2302      	movs	r3, #2
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800143e:	226e      	movs	r2, #110	; 0x6e
 8001440:	2105      	movs	r1, #5
 8001442:	4857      	ldr	r0, [pc, #348]	; (80015a0 <print_all_menu_1_1_menus+0x1f8>)
 8001444:	f7ff f8d2 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 8001448:	2300      	movs	r3, #0
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	2302      	movs	r3, #2
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001454:	2282      	movs	r2, #130	; 0x82
 8001456:	2105      	movs	r1, #5
 8001458:	4851      	ldr	r0, [pc, #324]	; (80015a0 <print_all_menu_1_1_menus+0x1f8>)
 800145a:	f7ff f8c7 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 800145e:	2300      	movs	r3, #0
 8001460:	9301      	str	r3, [sp, #4]
 8001462:	2302      	movs	r3, #2
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800146a:	2296      	movs	r2, #150	; 0x96
 800146c:	2105      	movs	r1, #5
 800146e:	484c      	ldr	r0, [pc, #304]	; (80015a0 <print_all_menu_1_1_menus+0x1f8>)
 8001470:	f7ff f8bc 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 8001474:	2300      	movs	r3, #0
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	2302      	movs	r3, #2
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001480:	22aa      	movs	r2, #170	; 0xaa
 8001482:	2105      	movs	r1, #5
 8001484:	4846      	ldr	r0, [pc, #280]	; (80015a0 <print_all_menu_1_1_menus+0x1f8>)
 8001486:	f7ff f8b1 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 800148a:	2300      	movs	r3, #0
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	2302      	movs	r3, #2
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001496:	22be      	movs	r2, #190	; 0xbe
 8001498:	2105      	movs	r1, #5
 800149a:	4841      	ldr	r0, [pc, #260]	; (80015a0 <print_all_menu_1_1_menus+0x1f8>)
 800149c:	f7ff f8a6 	bl	80005ec <ILI9341_Draw_Text>

	ILI9341_Draw_Text(menu_1_1[0], 30, 110, WHITE, 2, BLACK);
 80014a0:	2300      	movs	r3, #0
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	2302      	movs	r3, #2
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014ac:	226e      	movs	r2, #110	; 0x6e
 80014ae:	211e      	movs	r1, #30
 80014b0:	483c      	ldr	r0, [pc, #240]	; (80015a4 <print_all_menu_1_1_menus+0x1fc>)
 80014b2:	f7ff f89b 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[1], 30, 130, WHITE, 2, BLACK);
 80014b6:	2300      	movs	r3, #0
 80014b8:	9301      	str	r3, [sp, #4]
 80014ba:	2302      	movs	r3, #2
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014c2:	2282      	movs	r2, #130	; 0x82
 80014c4:	211e      	movs	r1, #30
 80014c6:	4838      	ldr	r0, [pc, #224]	; (80015a8 <print_all_menu_1_1_menus+0x200>)
 80014c8:	f7ff f890 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[2], 30, 150, WHITE, 2, BLACK);
 80014cc:	2300      	movs	r3, #0
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	2302      	movs	r3, #2
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014d8:	2296      	movs	r2, #150	; 0x96
 80014da:	211e      	movs	r1, #30
 80014dc:	4833      	ldr	r0, [pc, #204]	; (80015ac <print_all_menu_1_1_menus+0x204>)
 80014de:	f7ff f885 	bl	80005ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[3], 30, 170, WHITE, 2, BLACK);
 80014e2:	2300      	movs	r3, #0
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	2302      	movs	r3, #2
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014ee:	22aa      	movs	r2, #170	; 0xaa
 80014f0:	211e      	movs	r1, #30
 80014f2:	482f      	ldr	r0, [pc, #188]	; (80015b0 <print_all_menu_1_1_menus+0x208>)
 80014f4:	f7ff f87a 	bl	80005ec <ILI9341_Draw_Text>

	if(pointer_on_selected_menu <= 0)
 80014f8:	4b2e      	ldr	r3, [pc, #184]	; (80015b4 <print_all_menu_1_1_menus+0x20c>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d102      	bne.n	8001506 <print_all_menu_1_1_menus+0x15e>
	{
		pointer_on_selected_menu = 4;
 8001500:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <print_all_menu_1_1_menus+0x20c>)
 8001502:	2204      	movs	r2, #4
 8001504:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 5)
 8001506:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <print_all_menu_1_1_menus+0x20c>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b04      	cmp	r3, #4
 800150c:	d902      	bls.n	8001514 <print_all_menu_1_1_menus+0x16c>
	{
		pointer_on_selected_menu = 1;
 800150e:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <print_all_menu_1_1_menus+0x20c>)
 8001510:	2201      	movs	r2, #1
 8001512:	701a      	strb	r2, [r3, #0]
	}

	switch (pointer_on_selected_menu)
 8001514:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <print_all_menu_1_1_menus+0x20c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	3b01      	subs	r3, #1
 800151a:	2b03      	cmp	r3, #3
 800151c:	d83a      	bhi.n	8001594 <print_all_menu_1_1_menus+0x1ec>
 800151e:	a201      	add	r2, pc, #4	; (adr r2, 8001524 <print_all_menu_1_1_menus+0x17c>)
 8001520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001524:	08001535 	.word	0x08001535
 8001528:	0800154d 	.word	0x0800154d
 800152c:	08001565 	.word	0x08001565
 8001530:	0800157d 	.word	0x0800157d
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 8001534:	2300      	movs	r3, #0
 8001536:	9301      	str	r3, [sp, #4]
 8001538:	2302      	movs	r3, #2
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001540:	226e      	movs	r2, #110	; 0x6e
 8001542:	2105      	movs	r1, #5
 8001544:	481c      	ldr	r0, [pc, #112]	; (80015b8 <print_all_menu_1_1_menus+0x210>)
 8001546:	f7ff f851 	bl	80005ec <ILI9341_Draw_Text>
			break;
 800154a:	e023      	b.n	8001594 <print_all_menu_1_1_menus+0x1ec>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 800154c:	2300      	movs	r3, #0
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	2302      	movs	r3, #2
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001558:	2282      	movs	r2, #130	; 0x82
 800155a:	2105      	movs	r1, #5
 800155c:	4816      	ldr	r0, [pc, #88]	; (80015b8 <print_all_menu_1_1_menus+0x210>)
 800155e:	f7ff f845 	bl	80005ec <ILI9341_Draw_Text>
			break;
 8001562:	e017      	b.n	8001594 <print_all_menu_1_1_menus+0x1ec>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 8001564:	2300      	movs	r3, #0
 8001566:	9301      	str	r3, [sp, #4]
 8001568:	2302      	movs	r3, #2
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001570:	2296      	movs	r2, #150	; 0x96
 8001572:	2105      	movs	r1, #5
 8001574:	4810      	ldr	r0, [pc, #64]	; (80015b8 <print_all_menu_1_1_menus+0x210>)
 8001576:	f7ff f839 	bl	80005ec <ILI9341_Draw_Text>
			break;
 800157a:	e00b      	b.n	8001594 <print_all_menu_1_1_menus+0x1ec>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 800157c:	2300      	movs	r3, #0
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	2302      	movs	r3, #2
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001588:	22aa      	movs	r2, #170	; 0xaa
 800158a:	2105      	movs	r1, #5
 800158c:	480a      	ldr	r0, [pc, #40]	; (80015b8 <print_all_menu_1_1_menus+0x210>)
 800158e:	f7ff f82d 	bl	80005ec <ILI9341_Draw_Text>
			break;
 8001592:	bf00      	nop
	}
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	0800b274 	.word	0x0800b274
 80015a0:	0800b298 	.word	0x0800b298
 80015a4:	200000f0 	.word	0x200000f0
 80015a8:	20000104 	.word	0x20000104
 80015ac:	20000118 	.word	0x20000118
 80015b0:	2000012c 	.word	0x2000012c
 80015b4:	20000140 	.word	0x20000140
 80015b8:	0800b29c 	.word	0x0800b29c

080015bc <tongle_green_led>:
// -----------------------------------------------------------------------
void tongle_green_led(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin( GPIOD, GPIO_PIN_12);
 80015c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <tongle_green_led+0x14>)
 80015c6:	f001 fedc 	bl	8003382 <HAL_GPIO_TogglePin>
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40020c00 	.word	0x40020c00

080015d4 <RED_LED_ON>:
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// -----------------------------------------------------------------------
void RED_LED_ON(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015de:	4802      	ldr	r0, [pc, #8]	; (80015e8 <RED_LED_ON+0x14>)
 80015e0:	f001 feb6 	bl	8003350 <HAL_GPIO_WritePin>
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40020c00 	.word	0x40020c00

080015ec <RED_LED_OFF>:
// -----------------------------------------------------------------------
void RED_LED_OFF(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015f6:	4802      	ldr	r0, [pc, #8]	; (8001600 <RED_LED_OFF+0x14>)
 80015f8:	f001 feaa 	bl	8003350 <HAL_GPIO_WritePin>
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40020c00 	.word	0x40020c00

08001604 <Level1Item3_Enter>:
// -----------------------------------------------------------------------
static void Level1Item3_Enter(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af02      	add	r7, sp, #8
 bool flagPressed = false;
 800160a:	2300      	movs	r3, #0
 800160c:	71fb      	strb	r3, [r7, #7]

 ILI9341_Draw_Text( "                          ", 10, 60, WHITE, 2, BLACK);   // Clearn lcd
 800160e:	2300      	movs	r3, #0
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	2302      	movs	r3, #2
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800161a:	223c      	movs	r2, #60	; 0x3c
 800161c:	210a      	movs	r1, #10
 800161e:	4838      	ldr	r0, [pc, #224]	; (8001700 <Level1Item3_Enter+0xfc>)
 8001620:	f7fe ffe4 	bl	80005ec <ILI9341_Draw_Text>

 ILI9341_Draw_Text( "Red LED is:", 10, 60, WHITE, 2, BLACK);
 8001624:	2300      	movs	r3, #0
 8001626:	9301      	str	r3, [sp, #4]
 8001628:	2302      	movs	r3, #2
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001630:	223c      	movs	r2, #60	; 0x3c
 8001632:	210a      	movs	r1, #10
 8001634:	4833      	ldr	r0, [pc, #204]	; (8001704 <Level1Item3_Enter+0x100>)
 8001636:	f7fe ffd9 	bl	80005ec <ILI9341_Draw_Text>

 while(getPressKey() != BUTTON_LEFT)
 800163a:	e049      	b.n	80016d0 <Level1Item3_Enter+0xcc>
 {
	 // Read PIN
	 int led_status =  HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_14);
 800163c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001640:	4831      	ldr	r0, [pc, #196]	; (8001708 <Level1Item3_Enter+0x104>)
 8001642:	f001 fe6d 	bl	8003320 <HAL_GPIO_ReadPin>
 8001646:	4603      	mov	r3, r0
 8001648:	603b      	str	r3, [r7, #0]

	 if(flagPressed == true)
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d019      	beq.n	8001684 <Level1Item3_Enter+0x80>
	 {
		 if(led_status == GPIO_PIN_SET)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d10b      	bne.n	800166e <Level1Item3_Enter+0x6a>
		 {
			 ILI9341_Draw_Text( "ON ", 150, 60, WHITE, 2, BLACK);
 8001656:	2300      	movs	r3, #0
 8001658:	9301      	str	r3, [sp, #4]
 800165a:	2302      	movs	r3, #2
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001662:	223c      	movs	r2, #60	; 0x3c
 8001664:	2196      	movs	r1, #150	; 0x96
 8001666:	4829      	ldr	r0, [pc, #164]	; (800170c <Level1Item3_Enter+0x108>)
 8001668:	f7fe ffc0 	bl	80005ec <ILI9341_Draw_Text>
 800166c:	e00a      	b.n	8001684 <Level1Item3_Enter+0x80>
		 }
		 else
		 {
		 	 ILI9341_Draw_Text( "OFF", 150, 60, WHITE, 2, BLACK);
 800166e:	2300      	movs	r3, #0
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	2302      	movs	r3, #2
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800167a:	223c      	movs	r2, #60	; 0x3c
 800167c:	2196      	movs	r1, #150	; 0x96
 800167e:	4824      	ldr	r0, [pc, #144]	; (8001710 <Level1Item3_Enter+0x10c>)
 8001680:	f7fe ffb4 	bl	80005ec <ILI9341_Draw_Text>
		 }
	 }


	 if(getPressKey() != BUTTON_NOTHING && !flagPressed)
 8001684:	f000 f84a 	bl	800171c <getPressKey>
 8001688:	4603      	mov	r3, r0
 800168a:	2bff      	cmp	r3, #255	; 0xff
 800168c:	d016      	beq.n	80016bc <Level1Item3_Enter+0xb8>
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	f083 0301 	eor.w	r3, r3, #1
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d010      	beq.n	80016bc <Level1Item3_Enter+0xb8>
	 {
		 flagPressed = true;
 800169a:	2301      	movs	r3, #1
 800169c:	71fb      	strb	r3, [r7, #7]

		 switch(getPressKey())  // If press any key
 800169e:	f000 f83d 	bl	800171c <getPressKey>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d002      	beq.n	80016ae <Level1Item3_Enter+0xaa>
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d003      	beq.n	80016b4 <Level1Item3_Enter+0xb0>
	  	  		  break;
	  	  	  case BUTTON_DOWN:
	  	  		  RED_LED_OFF();
	  	  		  break;
	  	  	  default:
	  	  		  break;
 80016ac:	e005      	b.n	80016ba <Level1Item3_Enter+0xb6>
	  	  		  RED_LED_ON();
 80016ae:	f7ff ff91 	bl	80015d4 <RED_LED_ON>
	  	  		  break;
 80016b2:	e002      	b.n	80016ba <Level1Item3_Enter+0xb6>
	  	  		  RED_LED_OFF();
 80016b4:	f7ff ff9a 	bl	80015ec <RED_LED_OFF>
	  	  		  break;
 80016b8:	bf00      	nop
		 switch(getPressKey())  // If press any key
 80016ba:	e009      	b.n	80016d0 <Level1Item3_Enter+0xcc>
		 }
	 }
	 else if(getPressKey() == BUTTON_NOTHING && flagPressed)
 80016bc:	f000 f82e 	bl	800171c <getPressKey>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2bff      	cmp	r3, #255	; 0xff
 80016c4:	d104      	bne.n	80016d0 <Level1Item3_Enter+0xcc>
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <Level1Item3_Enter+0xcc>
	 {
		 flagPressed = false; 	// if button was release
 80016cc:	2300      	movs	r3, #0
 80016ce:	71fb      	strb	r3, [r7, #7]
 while(getPressKey() != BUTTON_LEFT)
 80016d0:	f000 f824 	bl	800171c <getPressKey>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1b0      	bne.n	800163c <Level1Item3_Enter+0x38>
	 }
 }

 ILI9341_Draw_Text( "                           ", 10, 60, WHITE, 2, BLACK); // Cleaning one row LCD
 80016da:	2300      	movs	r3, #0
 80016dc:	9301      	str	r3, [sp, #4]
 80016de:	2302      	movs	r3, #2
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016e6:	223c      	movs	r2, #60	; 0x3c
 80016e8:	210a      	movs	r1, #10
 80016ea:	480a      	ldr	r0, [pc, #40]	; (8001714 <Level1Item3_Enter+0x110>)
 80016ec:	f7fe ff7e 	bl	80005ec <ILI9341_Draw_Text>
 Menu_Navigate(&Menu_3);  // Back to menu 3
 80016f0:	4809      	ldr	r0, [pc, #36]	; (8001718 <Level1Item3_Enter+0x114>)
 80016f2:	f000 f8db 	bl	80018ac <Menu_Navigate>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	0800b2a0 	.word	0x0800b2a0
 8001704:	0800b2bc 	.word	0x0800b2bc
 8001708:	40020c00 	.word	0x40020c00
 800170c:	0800b2c8 	.word	0x0800b2c8
 8001710:	0800b2cc 	.word	0x0800b2cc
 8001714:	0800b2d0 	.word	0x0800b2d0
 8001718:	0800b63c 	.word	0x0800b63c

0800171c <getPressKey>:
// -----------------------------------------------------------------------
static uint8_t getPressKey()		// 3x4 keyboard
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af02      	add	r7, sp, #8
	char digit = '\0';
 8001722:	2300      	movs	r3, #0
 8001724:	75fb      	strb	r3, [r7, #23]
	char buff_lcd[20] = "KEY: ";
 8001726:	4a48      	ldr	r2, [pc, #288]	; (8001848 <getPressKey+0x12c>)
 8001728:	463b      	mov	r3, r7
 800172a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800172e:	6018      	str	r0, [r3, #0]
 8001730:	3304      	adds	r3, #4
 8001732:	8019      	strh	r1, [r3, #0]
 8001734:	1dbb      	adds	r3, r7, #6
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	819a      	strh	r2, [r3, #12]
	digit = read_one_digit_from_keyboard();
 8001740:	f000 f96e 	bl	8001a20 <read_one_digit_from_keyboard>
 8001744:	4603      	mov	r3, r0
 8001746:	75fb      	strb	r3, [r7, #23]
	switch(digit)
 8001748:	7dfb      	ldrb	r3, [r7, #23]
 800174a:	3b32      	subs	r3, #50	; 0x32
 800174c:	2b06      	cmp	r3, #6
 800174e:	d875      	bhi.n	800183c <getPressKey+0x120>
 8001750:	a201      	add	r2, pc, #4	; (adr r2, 8001758 <getPressKey+0x3c>)
 8001752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001756:	bf00      	nop
 8001758:	0800179d 	.word	0x0800179d
 800175c:	0800183d 	.word	0x0800183d
 8001760:	08001775 	.word	0x08001775
 8001764:	08001815 	.word	0x08001815
 8001768:	080017ed 	.word	0x080017ed
 800176c:	0800183d 	.word	0x0800183d
 8001770:	080017c5 	.word	0x080017c5
	{
		case '4':
		{
			strncat(buff_lcd, &digit, 1);
 8001774:	f107 0117 	add.w	r1, r7, #23
 8001778:	463b      	mov	r3, r7
 800177a:	2201      	movs	r2, #1
 800177c:	4618      	mov	r0, r3
 800177e:	f009 fd4b 	bl	800b218 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8001782:	4638      	mov	r0, r7
 8001784:	2300      	movs	r3, #0
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	2302      	movs	r3, #2
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001790:	2200      	movs	r2, #0
 8001792:	2100      	movs	r1, #0
 8001794:	f7fe ff2a 	bl	80005ec <ILI9341_Draw_Text>
			return BUTTON_LEFT;
 8001798:	2300      	movs	r3, #0
 800179a:	e050      	b.n	800183e <getPressKey+0x122>
		}
		case '2':
		{
			strncat(buff_lcd, &digit, 1);
 800179c:	f107 0117 	add.w	r1, r7, #23
 80017a0:	463b      	mov	r3, r7
 80017a2:	2201      	movs	r2, #1
 80017a4:	4618      	mov	r0, r3
 80017a6:	f009 fd37 	bl	800b218 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 80017aa:	4638      	mov	r0, r7
 80017ac:	2300      	movs	r3, #0
 80017ae:	9301      	str	r3, [sp, #4]
 80017b0:	2302      	movs	r3, #2
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017b8:	2200      	movs	r2, #0
 80017ba:	2100      	movs	r1, #0
 80017bc:	f7fe ff16 	bl	80005ec <ILI9341_Draw_Text>
			return BUTTON_UP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e03c      	b.n	800183e <getPressKey+0x122>
		}
		case '8':
		{
			strncat(buff_lcd, &digit, 1);
 80017c4:	f107 0117 	add.w	r1, r7, #23
 80017c8:	463b      	mov	r3, r7
 80017ca:	2201      	movs	r2, #1
 80017cc:	4618      	mov	r0, r3
 80017ce:	f009 fd23 	bl	800b218 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 80017d2:	4638      	mov	r0, r7
 80017d4:	2300      	movs	r3, #0
 80017d6:	9301      	str	r3, [sp, #4]
 80017d8:	2302      	movs	r3, #2
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017e0:	2200      	movs	r2, #0
 80017e2:	2100      	movs	r1, #0
 80017e4:	f7fe ff02 	bl	80005ec <ILI9341_Draw_Text>
			return BUTTON_DOWN;
 80017e8:	2302      	movs	r3, #2
 80017ea:	e028      	b.n	800183e <getPressKey+0x122>
		}
		case '6':
		{
			strncat(buff_lcd, &digit, 1);
 80017ec:	f107 0117 	add.w	r1, r7, #23
 80017f0:	463b      	mov	r3, r7
 80017f2:	2201      	movs	r2, #1
 80017f4:	4618      	mov	r0, r3
 80017f6:	f009 fd0f 	bl	800b218 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 80017fa:	4638      	mov	r0, r7
 80017fc:	2300      	movs	r3, #0
 80017fe:	9301      	str	r3, [sp, #4]
 8001800:	2302      	movs	r3, #2
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001808:	2200      	movs	r2, #0
 800180a:	2100      	movs	r1, #0
 800180c:	f7fe feee 	bl	80005ec <ILI9341_Draw_Text>
			return BUTTON_RIGHT;
 8001810:	2303      	movs	r3, #3
 8001812:	e014      	b.n	800183e <getPressKey+0x122>
		}
		case '5':
		{
			strncat(buff_lcd, &digit, 1);
 8001814:	f107 0117 	add.w	r1, r7, #23
 8001818:	463b      	mov	r3, r7
 800181a:	2201      	movs	r2, #1
 800181c:	4618      	mov	r0, r3
 800181e:	f009 fcfb 	bl	800b218 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8001822:	4638      	mov	r0, r7
 8001824:	2300      	movs	r3, #0
 8001826:	9301      	str	r3, [sp, #4]
 8001828:	2302      	movs	r3, #2
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001830:	2200      	movs	r2, #0
 8001832:	2100      	movs	r1, #0
 8001834:	f7fe feda 	bl	80005ec <ILI9341_Draw_Text>
			return BUTTON_SELECT;
 8001838:	2304      	movs	r3, #4
 800183a:	e000      	b.n	800183e <getPressKey+0x122>
		}
		default:
			return BUTTON_NOTHING;
 800183c:	23ff      	movs	r3, #255	; 0xff
			break;


	}
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	0800b2ec 	.word	0x0800b2ec

0800184c <Generic_Write>:
// -----------------------------------------------------------------------
void Generic_Write(const char* Text)		// Print "Text" data on LCD
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af02      	add	r7, sp, #8
 8001852:	6078      	str	r0, [r7, #4]
	if (Text)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d015      	beq.n	8001886 <Generic_Write+0x3a>
	{
		ILI9341_Draw_Text( "                                 ", 10, 100, WHITE, 1, BLACK);
 800185a:	2300      	movs	r3, #0
 800185c:	9301      	str	r3, [sp, #4]
 800185e:	2301      	movs	r3, #1
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001866:	2264      	movs	r2, #100	; 0x64
 8001868:	210a      	movs	r1, #10
 800186a:	4809      	ldr	r0, [pc, #36]	; (8001890 <Generic_Write+0x44>)
 800186c:	f7fe febe 	bl	80005ec <ILI9341_Draw_Text>
		ILI9341_Draw_Text( Text, 10, 100, WHITE, 1, BLACK);
 8001870:	2300      	movs	r3, #0
 8001872:	9301      	str	r3, [sp, #4]
 8001874:	2301      	movs	r3, #1
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800187c:	2264      	movs	r2, #100	; 0x64
 800187e:	210a      	movs	r1, #10
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7fe feb3 	bl	80005ec <ILI9341_Draw_Text>
	}
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	0800b300 	.word	0x0800b300

08001894 <Menu_GetCurrentMenu>:
// -----------------------------------------------------------------------
Menu_Item_t* Menu_GetCurrentMenu(void)		// Повертає поточни вибраний пункт меню
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
	return CurrentMenuItem;
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <Menu_GetCurrentMenu+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20000004 	.word	0x20000004

080018ac <Menu_Navigate>:
// -----------------------------------------------------------------------
// Переходи по меню
// in: ПОказник на апсолютний пункт меню, для вибору
// MENU_PARENT, MENU_CHILD, MENU_NEXT або  MENU_PREVIOUS
void Menu_Navigate(Menu_Item_t* const NewMenu)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))  // What it mean???
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a11      	ldr	r2, [pc, #68]	; (80018fc <Menu_Navigate+0x50>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d01a      	beq.n	80018f2 <Menu_Navigate+0x46>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d017      	beq.n	80018f2 <Menu_Navigate+0x46>
	{
		return;		// Exit
	}

	CurrentMenuItem = NewMenu;    // Передане маню стає вибране
 80018c2:	4a0f      	ldr	r2, [pc, #60]	; (8001900 <Menu_Navigate+0x54>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6013      	str	r3, [r2, #0]

	if (MenuWriteFunc)    // If   MenuWriteFunc  != NULL  ???????
 80018c8:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <Menu_Navigate+0x58>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d006      	beq.n	80018de <Menu_Navigate+0x32>
	{
		MenuWriteFunc(CurrentMenuItem->Text);			// Print Text string on LCD
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <Menu_Navigate+0x58>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <Menu_Navigate+0x54>)
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	3218      	adds	r2, #24
 80018da:	4610      	mov	r0, r2
 80018dc:	4798      	blx	r3
	}

	//   void (*SelectCallback)(void) - Creating pointer on function
	// Write  CurrentMenuItem->SelectCallback in  void (*SelectCallback)(void) pinter
	void (*SelectCallback)(void) = CurrentMenuItem->SelectCallback;
 80018de:	4b08      	ldr	r3, [pc, #32]	; (8001900 <Menu_Navigate+0x54>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	60fb      	str	r3, [r7, #12]

	if (SelectCallback)		// If SelectCallback != NULL
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <Menu_Navigate+0x48>
	{
		SelectCallback();   // It does - CurrentMenuItem->SelectCallback;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4798      	blx	r3
 80018f0:	e000      	b.n	80018f4 <Menu_Navigate+0x48>
		return;		// Exit
 80018f2:	bf00      	nop
	}
}
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	0800b5cc 	.word	0x0800b5cc
 8001900:	20000004 	.word	0x20000004
 8001904:	200001f4 	.word	0x200001f4

08001908 <Menu_SetGenericWriteCallback>:
 пунктів меню. В рамках цієї функції зворотного виклику користувач повинен
 реалізувати код для відображення поточного тексту меню, що зберігається
 в  ref MENU_ITEM_STORAGE пам'яті.. */
// In: вказівник на функцію зворотного виклику для виконання кожного вибраного пункту меню.
void Menu_SetGenericWriteCallback(void (*WriteFunc)(const char* Text))    //  What doing this function??????? <<<<<<<<<<<
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	MenuWriteFunc = WriteFunc;  		// Запис показника функції WriteFunc в
 8001910:	4a05      	ldr	r2, [pc, #20]	; (8001928 <Menu_SetGenericWriteCallback+0x20>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6013      	str	r3, [r2, #0]
	//  показник на функцію під назвою MenuWriteFunc
	Menu_Navigate(CurrentMenuItem);      // Передача цього показника в функцію Menu_Navigate
 8001916:	4b05      	ldr	r3, [pc, #20]	; (800192c <Menu_SetGenericWriteCallback+0x24>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff ffc6 	bl	80018ac <Menu_Navigate>
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200001f4 	.word	0x200001f4
 800192c:	20000004 	.word	0x20000004

08001930 <Menu_EnterCurrentItem>:
// -----------------------------------------------------------------------
/* Функція входить у вибраний на даний момент пункт меню, виконуючи налаштовану
   функцію зворотного дзвінка (якщо така є) */
void Menu_EnterCurrentItem(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
	if ((CurrentMenuItem == &NULL_MENU) || (CurrentMenuItem == NULL))
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <Menu_EnterCurrentItem+0x34>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <Menu_EnterCurrentItem+0x38>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d00d      	beq.n	800195c <Menu_EnterCurrentItem+0x2c>
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <Menu_EnterCurrentItem+0x34>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d009      	beq.n	800195c <Menu_EnterCurrentItem+0x2c>
	{
		return;
	}

	void (*EnterCallback)(void) = CurrentMenuItem->EnterCallback;
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <Menu_EnterCurrentItem+0x34>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	607b      	str	r3, [r7, #4]
	if (EnterCallback)		// If EnterCallback != NULL
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <Menu_EnterCurrentItem+0x2e>
	{
		EnterCallback();
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4798      	blx	r3
 800195a:	e000      	b.n	800195e <Menu_EnterCurrentItem+0x2e>
		return;
 800195c:	bf00      	nop
	}

}// -----------------------------------------------------------------------
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000004 	.word	0x20000004
 8001968:	0800b5cc 	.word	0x0800b5cc

0800196c <read_digits>:
#include <stdbool.h>


//----------------------------------------------------------------------------------------
void read_digits(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
	char digith = 0;;
 8001972:	2300      	movs	r3, #0
 8001974:	71fb      	strb	r3, [r7, #7]

	digith = read_one_digit_from_keyboard();
 8001976:	f000 f853 	bl	8001a20 <read_one_digit_from_keyboard>
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
	if(digith == '#')						// Clean buffer
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	2b23      	cmp	r3, #35	; 0x23
 8001982:	d10a      	bne.n	800199a <read_digits+0x2e>
	{
		memset(keyboard.keyboard_digits_buffer, '\0', sizeof(keyboard.keyboard_digits_buffer));
 8001984:	221e      	movs	r2, #30
 8001986:	2100      	movs	r1, #0
 8001988:	4824      	ldr	r0, [pc, #144]	; (8001a1c <read_digits+0xb0>)
 800198a:	f009 fb83 	bl	800b094 <memset>
		keyboard.read_digits_position = 0;
 800198e:	4b23      	ldr	r3, [pc, #140]	; (8001a1c <read_digits+0xb0>)
 8001990:	2200      	movs	r2, #0
 8001992:	625a      	str	r2, [r3, #36]	; 0x24
		keyboard.read_one_digit_status = false;
 8001994:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <read_digits+0xb0>)
 8001996:	2200      	movs	r2, #0
 8001998:	77da      	strb	r2, [r3, #31]
	}
	if(digith == '*')						// If pressed enter
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	2b2a      	cmp	r3, #42	; 0x2a
 800199e:	d109      	bne.n	80019b4 <read_digits+0x48>
	{
		keyboard.all_digits_was_read = true;
 80019a0:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <read_digits+0xb0>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2020 	strb.w	r2, [r3, #32]
		keyboard.read_one_digit_status = false;
 80019a8:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <read_digits+0xb0>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	77da      	strb	r2, [r3, #31]
		keyboard.read_digits_position = 0;
 80019ae:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <read_digits+0xb0>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if((digith != '\0') && (digith != '#')&& (digith != '*'))
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d028      	beq.n	8001a0c <read_digits+0xa0>
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	2b23      	cmp	r3, #35	; 0x23
 80019be:	d025      	beq.n	8001a0c <read_digits+0xa0>
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	2b2a      	cmp	r3, #42	; 0x2a
 80019c4:	d022      	beq.n	8001a0c <read_digits+0xa0>
	{
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <read_digits+0xb0>)
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	4a14      	ldr	r2, [pc, #80]	; (8001a1c <read_digits+0xb0>)
 80019cc:	7f92      	ldrb	r2, [r2, #30]
 80019ce:	4293      	cmp	r3, r2
 80019d0:	dc11      	bgt.n	80019f6 <read_digits+0x8a>
		{
			keyboard.keyboard_digits_buffer[keyboard.read_digits_position] = digith;
 80019d2:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <read_digits+0xb0>)
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	4911      	ldr	r1, [pc, #68]	; (8001a1c <read_digits+0xb0>)
 80019d8:	79fa      	ldrb	r2, [r7, #7]
 80019da:	54ca      	strb	r2, [r1, r3]
			keyboard.read_digits_position++;
 80019dc:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <read_digits+0xb0>)
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	3301      	adds	r3, #1
 80019e2:	4a0e      	ldr	r2, [pc, #56]	; (8001a1c <read_digits+0xb0>)
 80019e4:	6253      	str	r3, [r2, #36]	; 0x24
			keyboard.all_digits_was_read = false;
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <read_digits+0xb0>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = true;
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <read_digits+0xb0>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	77da      	strb	r2, [r3, #31]
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 80019f4:	e00e      	b.n	8001a14 <read_digits+0xa8>
		}
		else								// If entered all digits
		{
			keyboard.all_digits_was_read = true;
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <read_digits+0xb0>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = false;
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <read_digits+0xb0>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	77da      	strb	r2, [r3, #31]
			keyboard.read_digits_position = 0;
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <read_digits+0xb0>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	625a      	str	r2, [r3, #36]	; 0x24
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8001a0a:	e003      	b.n	8001a14 <read_digits+0xa8>
		}
	}
	else									// If didn't enter any key
	{
		keyboard.read_one_digit_status = false;
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <read_digits+0xb0>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	77da      	strb	r2, [r3, #31]
	}
}
 8001a12:	bf00      	nop
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000210 	.word	0x20000210

08001a20 <read_one_digit_from_keyboard>:

//----------------------------------------------------------------------------------------
char read_one_digit_from_keyboard(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
	char digit = '\0';
 8001a26:	2300      	movs	r3, #0
 8001a28:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a30:	48cf      	ldr	r0, [pc, #828]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001a32:	f001 fc8d 	bl	8003350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a3c:	48cc      	ldr	r0, [pc, #816]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001a3e:	f001 fc87 	bl	8003350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001a42:	2200      	movs	r2, #0
 8001a44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a48:	48c9      	ldr	r0, [pc, #804]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001a4a:	f001 fc81 	bl	8003350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a54:	48c6      	ldr	r0, [pc, #792]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001a56:	f001 fc7b 	bl	8003350 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8001a5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a5e:	48c5      	ldr	r0, [pc, #788]	; (8001d74 <read_one_digit_from_keyboard+0x354>)
 8001a60:	f001 fc5e 	bl	8003320 <HAL_GPIO_ReadPin>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d169      	bne.n	8001b3e <read_one_digit_from_keyboard+0x11e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a70:	48bf      	ldr	r0, [pc, #764]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001a72:	f001 fc6d 	bl	8003350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8001a76:	2201      	movs	r2, #1
 8001a78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a7c:	48bc      	ldr	r0, [pc, #752]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001a7e:	f001 fc67 	bl	8003350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001a82:	2201      	movs	r2, #1
 8001a84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a88:	48b9      	ldr	r0, [pc, #740]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001a8a:	f001 fc61 	bl	8003350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a94:	48b6      	ldr	r0, [pc, #728]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001a96:	f001 fc5b 	bl	8003350 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8001a9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a9e:	48b5      	ldr	r0, [pc, #724]	; (8001d74 <read_one_digit_from_keyboard+0x354>)
 8001aa0:	f001 fc3e 	bl	8003320 <HAL_GPIO_ReadPin>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <read_one_digit_from_keyboard+0x8e>
		{
			digit = '1';
 8001aaa:	2331      	movs	r3, #49	; 0x31
 8001aac:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ab4:	48ae      	ldr	r0, [pc, #696]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001ab6:	f001 fc4b 	bl	8003350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001aba:	2200      	movs	r2, #0
 8001abc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ac0:	48ab      	ldr	r0, [pc, #684]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001ac2:	f001 fc45 	bl	8003350 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8001ac6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aca:	48aa      	ldr	r0, [pc, #680]	; (8001d74 <read_one_digit_from_keyboard+0x354>)
 8001acc:	f001 fc28 	bl	8003320 <HAL_GPIO_ReadPin>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <read_one_digit_from_keyboard+0xba>
		{
			digit = '4';
 8001ad6:	2334      	movs	r3, #52	; 0x34
 8001ad8:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8001ada:	2201      	movs	r2, #1
 8001adc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ae0:	48a3      	ldr	r0, [pc, #652]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001ae2:	f001 fc35 	bl	8003350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aec:	48a0      	ldr	r0, [pc, #640]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001aee:	f001 fc2f 	bl	8003350 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8001af2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001af6:	489f      	ldr	r0, [pc, #636]	; (8001d74 <read_one_digit_from_keyboard+0x354>)
 8001af8:	f001 fc12 	bl	8003320 <HAL_GPIO_ReadPin>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <read_one_digit_from_keyboard+0xe6>
		{
			digit =  '7';
 8001b02:	2337      	movs	r3, #55	; 0x37
 8001b04:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001b06:	2201      	movs	r2, #1
 8001b08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b0c:	4898      	ldr	r0, [pc, #608]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001b0e:	f001 fc1f 	bl	8003350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001b12:	2200      	movs	r2, #0
 8001b14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b18:	4895      	ldr	r0, [pc, #596]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001b1a:	f001 fc19 	bl	8003350 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8001b1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b22:	4894      	ldr	r0, [pc, #592]	; (8001d74 <read_one_digit_from_keyboard+0x354>)
 8001b24:	f001 fbfc 	bl	8003320 <HAL_GPIO_ReadPin>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <read_one_digit_from_keyboard+0x112>
		{
			digit =  '*';
 8001b2e:	232a      	movs	r3, #42	; 0x2a
 8001b30:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001b32:	2201      	movs	r2, #1
 8001b34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b38:	488d      	ldr	r0, [pc, #564]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001b3a:	f001 fc09 	bl	8003350 <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b44:	488a      	ldr	r0, [pc, #552]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001b46:	f001 fc03 	bl	8003350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b50:	4887      	ldr	r0, [pc, #540]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001b52:	f001 fbfd 	bl	8003350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001b56:	2200      	movs	r2, #0
 8001b58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b5c:	4884      	ldr	r0, [pc, #528]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001b5e:	f001 fbf7 	bl	8003350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001b62:	2200      	movs	r2, #0
 8001b64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b68:	4881      	ldr	r0, [pc, #516]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001b6a:	f001 fbf1 	bl	8003350 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 8001b6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b72:	4880      	ldr	r0, [pc, #512]	; (8001d74 <read_one_digit_from_keyboard+0x354>)
 8001b74:	f001 fbd4 	bl	8003320 <HAL_GPIO_ReadPin>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d169      	bne.n	8001c52 <read_one_digit_from_keyboard+0x232>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b84:	487a      	ldr	r0, [pc, #488]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001b86:	f001 fbe3 	bl	8003350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b90:	4877      	ldr	r0, [pc, #476]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001b92:	f001 fbdd 	bl	8003350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001b96:	2201      	movs	r2, #1
 8001b98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b9c:	4874      	ldr	r0, [pc, #464]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001b9e:	f001 fbd7 	bl	8003350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ba8:	4871      	ldr	r0, [pc, #452]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001baa:	f001 fbd1 	bl	8003350 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001bae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bb2:	4870      	ldr	r0, [pc, #448]	; (8001d74 <read_one_digit_from_keyboard+0x354>)
 8001bb4:	f001 fbb4 	bl	8003320 <HAL_GPIO_ReadPin>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <read_one_digit_from_keyboard+0x1a2>
		{
			digit =  '2';
 8001bbe:	2332      	movs	r3, #50	; 0x32
 8001bc0:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bc8:	4869      	ldr	r0, [pc, #420]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001bca:	f001 fbc1 	bl	8003350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bd4:	4866      	ldr	r0, [pc, #408]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001bd6:	f001 fbbb 	bl	8003350 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001bda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bde:	4865      	ldr	r0, [pc, #404]	; (8001d74 <read_one_digit_from_keyboard+0x354>)
 8001be0:	f001 fb9e 	bl	8003320 <HAL_GPIO_ReadPin>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <read_one_digit_from_keyboard+0x1ce>
		{
			digit =  '5';
 8001bea:	2335      	movs	r3, #53	; 0x35
 8001bec:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bf4:	485e      	ldr	r0, [pc, #376]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001bf6:	f001 fbab 	bl	8003350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c00:	485b      	ldr	r0, [pc, #364]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001c02:	f001 fba5 	bl	8003350 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001c06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c0a:	485a      	ldr	r0, [pc, #360]	; (8001d74 <read_one_digit_from_keyboard+0x354>)
 8001c0c:	f001 fb88 	bl	8003320 <HAL_GPIO_ReadPin>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <read_one_digit_from_keyboard+0x1fa>
		{
			digit = '8';
 8001c16:	2338      	movs	r3, #56	; 0x38
 8001c18:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c20:	4853      	ldr	r0, [pc, #332]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001c22:	f001 fb95 	bl	8003350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001c26:	2200      	movs	r2, #0
 8001c28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c2c:	4850      	ldr	r0, [pc, #320]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001c2e:	f001 fb8f 	bl	8003350 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001c32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c36:	484f      	ldr	r0, [pc, #316]	; (8001d74 <read_one_digit_from_keyboard+0x354>)
 8001c38:	f001 fb72 	bl	8003320 <HAL_GPIO_ReadPin>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <read_one_digit_from_keyboard+0x226>
		{
			digit = '0';
 8001c42:	2330      	movs	r3, #48	; 0x30
 8001c44:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001c46:	2201      	movs	r2, #1
 8001c48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c4c:	4848      	ldr	r0, [pc, #288]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001c4e:	f001 fb7f 	bl	8003350 <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001c52:	2200      	movs	r2, #0
 8001c54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c58:	4845      	ldr	r0, [pc, #276]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001c5a:	f001 fb79 	bl	8003350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c64:	4842      	ldr	r0, [pc, #264]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001c66:	f001 fb73 	bl	8003350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c70:	483f      	ldr	r0, [pc, #252]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001c72:	f001 fb6d 	bl	8003350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001c76:	2200      	movs	r2, #0
 8001c78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c7c:	483c      	ldr	r0, [pc, #240]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001c7e:	f001 fb67 	bl	8003350 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №
 8001c82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c86:	483b      	ldr	r0, [pc, #236]	; (8001d74 <read_one_digit_from_keyboard+0x354>)
 8001c88:	f001 fb4a 	bl	8003320 <HAL_GPIO_ReadPin>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d169      	bne.n	8001d66 <read_one_digit_from_keyboard+0x346>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001c92:	2200      	movs	r2, #0
 8001c94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c98:	4835      	ldr	r0, [pc, #212]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001c9a:	f001 fb59 	bl	8003350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ca4:	4832      	ldr	r0, [pc, #200]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001ca6:	f001 fb53 	bl	8003350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001caa:	2201      	movs	r2, #1
 8001cac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cb0:	482f      	ldr	r0, [pc, #188]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001cb2:	f001 fb4d 	bl	8003350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cbc:	482c      	ldr	r0, [pc, #176]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001cbe:	f001 fb47 	bl	8003350 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001cc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cc6:	482b      	ldr	r0, [pc, #172]	; (8001d74 <read_one_digit_from_keyboard+0x354>)
 8001cc8:	f001 fb2a 	bl	8003320 <HAL_GPIO_ReadPin>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <read_one_digit_from_keyboard+0x2b6>
		{
			digit = '3';
 8001cd2:	2333      	movs	r3, #51	; 0x33
 8001cd4:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cdc:	4824      	ldr	r0, [pc, #144]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001cde:	f001 fb37 	bl	8003350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ce8:	4821      	ldr	r0, [pc, #132]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001cea:	f001 fb31 	bl	8003350 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001cee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cf2:	4820      	ldr	r0, [pc, #128]	; (8001d74 <read_one_digit_from_keyboard+0x354>)
 8001cf4:	f001 fb14 	bl	8003320 <HAL_GPIO_ReadPin>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <read_one_digit_from_keyboard+0x2e2>
		{
			digit = '6';
 8001cfe:	2336      	movs	r3, #54	; 0x36
 8001d00:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8001d02:	2201      	movs	r2, #1
 8001d04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d08:	4819      	ldr	r0, [pc, #100]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001d0a:	f001 fb21 	bl	8003350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d14:	4816      	ldr	r0, [pc, #88]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001d16:	f001 fb1b 	bl	8003350 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001d1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d1e:	4815      	ldr	r0, [pc, #84]	; (8001d74 <read_one_digit_from_keyboard+0x354>)
 8001d20:	f001 fafe 	bl	8003320 <HAL_GPIO_ReadPin>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <read_one_digit_from_keyboard+0x30e>
		{
			digit = '9';
 8001d2a:	2339      	movs	r3, #57	; 0x39
 8001d2c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d34:	480e      	ldr	r0, [pc, #56]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001d36:	f001 fb0b 	bl	8003350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d40:	480b      	ldr	r0, [pc, #44]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001d42:	f001 fb05 	bl	8003350 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001d46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d4a:	480a      	ldr	r0, [pc, #40]	; (8001d74 <read_one_digit_from_keyboard+0x354>)
 8001d4c:	f001 fae8 	bl	8003320 <HAL_GPIO_ReadPin>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <read_one_digit_from_keyboard+0x33a>
		{
			digit = '#';
 8001d56:	2323      	movs	r3, #35	; 0x23
 8001d58:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d60:	4803      	ldr	r0, [pc, #12]	; (8001d70 <read_one_digit_from_keyboard+0x350>)
 8001d62:	f001 faf5 	bl	8003350 <HAL_GPIO_WritePin>
	}
	return digit;
 8001d66:	79fb      	ldrb	r3, [r7, #7]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40020c00 	.word	0x40020c00
 8001d74:	40020400 	.word	0x40020400

08001d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d7e:	f000 ff8b 	bl	8002c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d82:	f000 f839 	bl	8001df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d86:	f000 fabd 	bl	8002304 <MX_GPIO_Init>
  MX_I2S3_Init();
 8001d8a:	f000 f8f1 	bl	8001f70 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001d8e:	f000 f933 	bl	8001ff8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001d92:	f008 fe3d 	bl	800aa10 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8001d96:	f000 f9f3 	bl	8002180 <MX_TIM2_Init>
  MX_SPI2_Init();
 8001d9a:	f000 f963 	bl	8002064 <MX_SPI2_Init>
  MX_RNG_Init();
 8001d9e:	f000 f917 	bl	8001fd0 <MX_RNG_Init>
  MX_TIM3_Init();
 8001da2:	f000 fa3b 	bl	800221c <MX_TIM3_Init>
  MX_TIM1_Init();
 8001da6:	f000 f993 	bl	80020d0 <MX_TIM1_Init>
  MX_I2C3_Init();
 8001daa:	f000 f8b3 	bl	8001f14 <MX_I2C3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001dae:	f000 f8a5 	bl	8001efc <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 8001db2:	f7fe fd69 	bl	8000888 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 8001db6:	2000      	movs	r0, #0
 8001db8:	f7fe ff0c 	bl	8000bd4 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 8001dbc:	2003      	movs	r0, #3
 8001dbe:	f7fe fd05 	bl	80007cc <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f7fe ff06 	bl	8000bd4 <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 8001dc8:	2364      	movs	r3, #100	; 0x64
 8001dca:	607b      	str	r3, [r7, #4]
  //speed_test_LCD(number_of_tests);

  ILI9341_Fill_Screen(BLACK);
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f7fe ff01 	bl	8000bd4 <ILI9341_Fill_Screen>

  // Start scan digits ///////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);			// Start read digits
 8001dd2:	4807      	ldr	r0, [pc, #28]	; (8001df0 <main+0x78>)
 8001dd4:	f004 fee2 	bl	8006b9c <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4805      	ldr	r0, [pc, #20]	; (8001df0 <main+0x78>)
 8001ddc:	f004 ff4e 	bl	8006c7c <HAL_TIM_OC_Start_IT>
  keyboard.how_meny_digits_must_be_written = 10;
 8001de0:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <main+0x7c>)
 8001de2:	220a      	movs	r2, #10
 8001de4:	779a      	strb	r2, [r3, #30]
  ////////////////////////////////////////////////////
  while (1)
  {
	  /////////////////////////////////////////////////////////////////

	 menu();
 8001de6:	f7ff f83f 	bl	8000e68 <menu>
//	  HAL_TIM_Base_Stop_IT(&htim3);				// Stop timer measure
//	  ARR_REG = TIM3-> CNT;


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001dea:	f008 fe37 	bl	800aa5c <MX_USB_HOST_Process>
	 menu();
 8001dee:	e7fa      	b.n	8001de6 <main+0x6e>
 8001df0:	200002e4 	.word	0x200002e4
 8001df4:	20000210 	.word	0x20000210

08001df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b098      	sub	sp, #96	; 0x60
 8001dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e02:	2230      	movs	r2, #48	; 0x30
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f009 f944 	bl	800b094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e0c:	f107 031c 	add.w	r3, r7, #28
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e1c:	f107 030c 	add.w	r3, r7, #12
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	4b31      	ldr	r3, [pc, #196]	; (8001ef4 <SystemClock_Config+0xfc>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	4a30      	ldr	r2, [pc, #192]	; (8001ef4 <SystemClock_Config+0xfc>)
 8001e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e38:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3a:	4b2e      	ldr	r3, [pc, #184]	; (8001ef4 <SystemClock_Config+0xfc>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]
 8001e4a:	4b2b      	ldr	r3, [pc, #172]	; (8001ef8 <SystemClock_Config+0x100>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a2a      	ldr	r2, [pc, #168]	; (8001ef8 <SystemClock_Config+0x100>)
 8001e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	4b28      	ldr	r3, [pc, #160]	; (8001ef8 <SystemClock_Config+0x100>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e62:	2301      	movs	r3, #1
 8001e64:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e76:	2308      	movs	r3, #8
 8001e78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e7a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001e7e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e80:	2302      	movs	r3, #2
 8001e82:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e84:	2307      	movs	r3, #7
 8001e86:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f003 fddb 	bl	8005a48 <HAL_RCC_OscConfig>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001e98:	f000 fbae 	bl	80025f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e9c:	230f      	movs	r3, #15
 8001e9e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ea8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001eac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001eae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001eb4:	f107 031c 	add.w	r3, r7, #28
 8001eb8:	2105      	movs	r1, #5
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f004 f83c 	bl	8005f38 <HAL_RCC_ClockConfig>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001ec6:	f000 fb97 	bl	80025f8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001ece:	23c0      	movs	r3, #192	; 0xc0
 8001ed0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ed6:	f107 030c 	add.w	r3, r7, #12
 8001eda:	4618      	mov	r0, r3
 8001edc:	f004 fa14 	bl	8006308 <HAL_RCCEx_PeriphCLKConfig>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001ee6:	f000 fb87 	bl	80025f8 <Error_Handler>
  }
}
 8001eea:	bf00      	nop
 8001eec:	3760      	adds	r7, #96	; 0x60
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40007000 	.word	0x40007000

08001efc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2100      	movs	r1, #0
 8001f04:	201c      	movs	r0, #28
 8001f06:	f001 f838 	bl	8002f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f0a:	201c      	movs	r0, #28
 8001f0c:	f001 f851 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <MX_I2C3_Init+0x50>)
 8001f1a:	4a13      	ldr	r2, [pc, #76]	; (8001f68 <MX_I2C3_Init+0x54>)
 8001f1c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <MX_I2C3_Init+0x50>)
 8001f20:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <MX_I2C3_Init+0x58>)
 8001f22:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f24:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <MX_I2C3_Init+0x50>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <MX_I2C3_Init+0x50>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <MX_I2C3_Init+0x50>)
 8001f32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f36:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f38:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <MX_I2C3_Init+0x50>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001f3e:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <MX_I2C3_Init+0x50>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f44:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <MX_I2C3_Init+0x50>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <MX_I2C3_Init+0x50>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f50:	4804      	ldr	r0, [pc, #16]	; (8001f64 <MX_I2C3_Init+0x50>)
 8001f52:	f002 ff95 	bl	8004e80 <HAL_I2C_Init>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001f5c:	f000 fb4c 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20000238 	.word	0x20000238
 8001f68:	40005c00 	.word	0x40005c00
 8001f6c:	000186a0 	.word	0x000186a0

08001f70 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001f74:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <MX_I2S3_Init+0x54>)
 8001f76:	4a14      	ldr	r2, [pc, #80]	; (8001fc8 <MX_I2S3_Init+0x58>)
 8001f78:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001f7a:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <MX_I2S3_Init+0x54>)
 8001f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f80:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <MX_I2S3_Init+0x54>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001f88:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <MX_I2S3_Init+0x54>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001f8e:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <MX_I2S3_Init+0x54>)
 8001f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f94:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <MX_I2S3_Init+0x54>)
 8001f98:	4a0c      	ldr	r2, [pc, #48]	; (8001fcc <MX_I2S3_Init+0x5c>)
 8001f9a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001f9c:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <MX_I2S3_Init+0x54>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <MX_I2S3_Init+0x54>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <MX_I2S3_Init+0x54>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001fae:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <MX_I2S3_Init+0x54>)
 8001fb0:	f003 f8aa 	bl	8005108 <HAL_I2S_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001fba:	f000 fb1d 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000424 	.word	0x20000424
 8001fc8:	40003c00 	.word	0x40003c00
 8001fcc:	00017700 	.word	0x00017700

08001fd0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <MX_RNG_Init+0x20>)
 8001fd6:	4a07      	ldr	r2, [pc, #28]	; (8001ff4 <MX_RNG_Init+0x24>)
 8001fd8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001fda:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <MX_RNG_Init+0x20>)
 8001fdc:	f004 fad4 	bl	8006588 <HAL_RNG_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001fe6:	f000 fb07 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000374 	.word	0x20000374
 8001ff4:	50060800 	.word	0x50060800

08001ff8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ffc:	4b17      	ldr	r3, [pc, #92]	; (800205c <MX_SPI1_Init+0x64>)
 8001ffe:	4a18      	ldr	r2, [pc, #96]	; (8002060 <MX_SPI1_Init+0x68>)
 8002000:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002002:	4b16      	ldr	r3, [pc, #88]	; (800205c <MX_SPI1_Init+0x64>)
 8002004:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002008:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800200a:	4b14      	ldr	r3, [pc, #80]	; (800205c <MX_SPI1_Init+0x64>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002010:	4b12      	ldr	r3, [pc, #72]	; (800205c <MX_SPI1_Init+0x64>)
 8002012:	2200      	movs	r2, #0
 8002014:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002016:	4b11      	ldr	r3, [pc, #68]	; (800205c <MX_SPI1_Init+0x64>)
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800201c:	4b0f      	ldr	r3, [pc, #60]	; (800205c <MX_SPI1_Init+0x64>)
 800201e:	2200      	movs	r2, #0
 8002020:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <MX_SPI1_Init+0x64>)
 8002024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002028:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800202a:	4b0c      	ldr	r3, [pc, #48]	; (800205c <MX_SPI1_Init+0x64>)
 800202c:	2200      	movs	r2, #0
 800202e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002030:	4b0a      	ldr	r3, [pc, #40]	; (800205c <MX_SPI1_Init+0x64>)
 8002032:	2200      	movs	r2, #0
 8002034:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002036:	4b09      	ldr	r3, [pc, #36]	; (800205c <MX_SPI1_Init+0x64>)
 8002038:	2200      	movs	r2, #0
 800203a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800203c:	4b07      	ldr	r3, [pc, #28]	; (800205c <MX_SPI1_Init+0x64>)
 800203e:	2200      	movs	r2, #0
 8002040:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002042:	4b06      	ldr	r3, [pc, #24]	; (800205c <MX_SPI1_Init+0x64>)
 8002044:	220a      	movs	r2, #10
 8002046:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002048:	4804      	ldr	r0, [pc, #16]	; (800205c <MX_SPI1_Init+0x64>)
 800204a:	f004 fac7 	bl	80065dc <HAL_SPI_Init>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002054:	f000 fad0 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20000384 	.word	0x20000384
 8002060:	40013000 	.word	0x40013000

08002064 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002068:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <MX_SPI2_Init+0x64>)
 800206a:	4a18      	ldr	r2, [pc, #96]	; (80020cc <MX_SPI2_Init+0x68>)
 800206c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800206e:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <MX_SPI2_Init+0x64>)
 8002070:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002074:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002076:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <MX_SPI2_Init+0x64>)
 8002078:	2200      	movs	r2, #0
 800207a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800207c:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <MX_SPI2_Init+0x64>)
 800207e:	2200      	movs	r2, #0
 8002080:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <MX_SPI2_Init+0x64>)
 8002084:	2200      	movs	r2, #0
 8002086:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <MX_SPI2_Init+0x64>)
 800208a:	2200      	movs	r2, #0
 800208c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <MX_SPI2_Init+0x64>)
 8002090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002094:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002096:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <MX_SPI2_Init+0x64>)
 8002098:	2200      	movs	r2, #0
 800209a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800209c:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <MX_SPI2_Init+0x64>)
 800209e:	2200      	movs	r2, #0
 80020a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <MX_SPI2_Init+0x64>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020a8:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <MX_SPI2_Init+0x64>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <MX_SPI2_Init+0x64>)
 80020b0:	220a      	movs	r2, #10
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80020b4:	4804      	ldr	r0, [pc, #16]	; (80020c8 <MX_SPI2_Init+0x64>)
 80020b6:	f004 fa91 	bl	80065dc <HAL_SPI_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80020c0:	f000 fa9a 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	2000028c 	.word	0x2000028c
 80020cc:	40003800 	.word	0x40003800

080020d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08c      	sub	sp, #48	; 0x30
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020d6:	f107 030c 	add.w	r3, r7, #12
 80020da:	2224      	movs	r2, #36	; 0x24
 80020dc:	2100      	movs	r1, #0
 80020de:	4618      	mov	r0, r3
 80020e0:	f008 ffd8 	bl	800b094 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020ec:	4b22      	ldr	r3, [pc, #136]	; (8002178 <MX_TIM1_Init+0xa8>)
 80020ee:	4a23      	ldr	r2, [pc, #140]	; (800217c <MX_TIM1_Init+0xac>)
 80020f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80020f2:	4b21      	ldr	r3, [pc, #132]	; (8002178 <MX_TIM1_Init+0xa8>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f8:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <MX_TIM1_Init+0xa8>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80020fe:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <MX_TIM1_Init+0xa8>)
 8002100:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002104:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002106:	4b1c      	ldr	r3, [pc, #112]	; (8002178 <MX_TIM1_Init+0xa8>)
 8002108:	2200      	movs	r2, #0
 800210a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800210c:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <MX_TIM1_Init+0xa8>)
 800210e:	2200      	movs	r2, #0
 8002110:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002112:	4b19      	ldr	r3, [pc, #100]	; (8002178 <MX_TIM1_Init+0xa8>)
 8002114:	2200      	movs	r2, #0
 8002116:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002118:	2301      	movs	r3, #1
 800211a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800211c:	2300      	movs	r3, #0
 800211e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002120:	2301      	movs	r3, #1
 8002122:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002124:	2300      	movs	r3, #0
 8002126:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800212c:	2300      	movs	r3, #0
 800212e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002130:	2301      	movs	r3, #1
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002134:	2300      	movs	r3, #0
 8002136:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800213c:	f107 030c 	add.w	r3, r7, #12
 8002140:	4619      	mov	r1, r3
 8002142:	480d      	ldr	r0, [pc, #52]	; (8002178 <MX_TIM1_Init+0xa8>)
 8002144:	f004 ff01 	bl	8006f4a <HAL_TIM_Encoder_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800214e:	f000 fa53 	bl	80025f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002152:	2300      	movs	r3, #0
 8002154:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002156:	2300      	movs	r3, #0
 8002158:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	4619      	mov	r1, r3
 800215e:	4806      	ldr	r0, [pc, #24]	; (8002178 <MX_TIM1_Init+0xa8>)
 8002160:	f005 fd66 	bl	8007c30 <HAL_TIMEx_MasterConfigSynchronization>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800216a:	f000 fa45 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800216e:	bf00      	nop
 8002170:	3730      	adds	r7, #48	; 0x30
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	2000032c 	.word	0x2000032c
 800217c:	40010000 	.word	0x40010000

08002180 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002186:	f107 0308 	add.w	r3, r7, #8
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002194:	463b      	mov	r3, r7
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800219c:	4b1e      	ldr	r3, [pc, #120]	; (8002218 <MX_TIM2_Init+0x98>)
 800219e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 80021a4:	4b1c      	ldr	r3, [pc, #112]	; (8002218 <MX_TIM2_Init+0x98>)
 80021a6:	f240 3247 	movw	r2, #839	; 0x347
 80021aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ac:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <MX_TIM2_Init+0x98>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80021b2:	4b19      	ldr	r3, [pc, #100]	; (8002218 <MX_TIM2_Init+0x98>)
 80021b4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80021b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ba:	4b17      	ldr	r3, [pc, #92]	; (8002218 <MX_TIM2_Init+0x98>)
 80021bc:	2200      	movs	r2, #0
 80021be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021c0:	4b15      	ldr	r3, [pc, #84]	; (8002218 <MX_TIM2_Init+0x98>)
 80021c2:	2280      	movs	r2, #128	; 0x80
 80021c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021c6:	4814      	ldr	r0, [pc, #80]	; (8002218 <MX_TIM2_Init+0x98>)
 80021c8:	f004 fc98 	bl	8006afc <HAL_TIM_Base_Init>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80021d2:	f000 fa11 	bl	80025f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021dc:	f107 0308 	add.w	r3, r7, #8
 80021e0:	4619      	mov	r1, r3
 80021e2:	480d      	ldr	r0, [pc, #52]	; (8002218 <MX_TIM2_Init+0x98>)
 80021e4:	f005 f91e 	bl	8007424 <HAL_TIM_ConfigClockSource>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80021ee:	f000 fa03 	bl	80025f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80021f2:	2310      	movs	r3, #16
 80021f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021fa:	463b      	mov	r3, r7
 80021fc:	4619      	mov	r1, r3
 80021fe:	4806      	ldr	r0, [pc, #24]	; (8002218 <MX_TIM2_Init+0x98>)
 8002200:	f005 fd16 	bl	8007c30 <HAL_TIMEx_MasterConfigSynchronization>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800220a:	f000 f9f5 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800220e:	bf00      	nop
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	200003dc 	.word	0x200003dc

0800221c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08e      	sub	sp, #56	; 0x38
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002222:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]
 800222c:	609a      	str	r2, [r3, #8]
 800222e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002230:	f107 0320 	add.w	r3, r7, #32
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800223a:	1d3b      	adds	r3, r7, #4
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
 8002248:	615a      	str	r2, [r3, #20]
 800224a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800224c:	4b2b      	ldr	r3, [pc, #172]	; (80022fc <MX_TIM3_Init+0xe0>)
 800224e:	4a2c      	ldr	r2, [pc, #176]	; (8002300 <MX_TIM3_Init+0xe4>)
 8002250:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 8002252:	4b2a      	ldr	r3, [pc, #168]	; (80022fc <MX_TIM3_Init+0xe0>)
 8002254:	f640 0233 	movw	r2, #2099	; 0x833
 8002258:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800225a:	4b28      	ldr	r3, [pc, #160]	; (80022fc <MX_TIM3_Init+0xe0>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8002260:	4b26      	ldr	r3, [pc, #152]	; (80022fc <MX_TIM3_Init+0xe0>)
 8002262:	f242 7210 	movw	r2, #10000	; 0x2710
 8002266:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002268:	4b24      	ldr	r3, [pc, #144]	; (80022fc <MX_TIM3_Init+0xe0>)
 800226a:	2200      	movs	r2, #0
 800226c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800226e:	4b23      	ldr	r3, [pc, #140]	; (80022fc <MX_TIM3_Init+0xe0>)
 8002270:	2280      	movs	r2, #128	; 0x80
 8002272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002274:	4821      	ldr	r0, [pc, #132]	; (80022fc <MX_TIM3_Init+0xe0>)
 8002276:	f004 fc41 	bl	8006afc <HAL_TIM_Base_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002280:	f000 f9ba 	bl	80025f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800228a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800228e:	4619      	mov	r1, r3
 8002290:	481a      	ldr	r0, [pc, #104]	; (80022fc <MX_TIM3_Init+0xe0>)
 8002292:	f005 f8c7 	bl	8007424 <HAL_TIM_ConfigClockSource>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800229c:	f000 f9ac 	bl	80025f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022a0:	4816      	ldr	r0, [pc, #88]	; (80022fc <MX_TIM3_Init+0xe0>)
 80022a2:	f004 fdf9 	bl	8006e98 <HAL_TIM_PWM_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80022ac:	f000 f9a4 	bl	80025f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b0:	2300      	movs	r3, #0
 80022b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022b8:	f107 0320 	add.w	r3, r7, #32
 80022bc:	4619      	mov	r1, r3
 80022be:	480f      	ldr	r0, [pc, #60]	; (80022fc <MX_TIM3_Init+0xe0>)
 80022c0:	f005 fcb6 	bl	8007c30 <HAL_TIMEx_MasterConfigSynchronization>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80022ca:	f000 f995 	bl	80025f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022ce:	2360      	movs	r3, #96	; 0x60
 80022d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022de:	1d3b      	adds	r3, r7, #4
 80022e0:	2200      	movs	r2, #0
 80022e2:	4619      	mov	r1, r3
 80022e4:	4805      	ldr	r0, [pc, #20]	; (80022fc <MX_TIM3_Init+0xe0>)
 80022e6:	f004 ffdf 	bl	80072a8 <HAL_TIM_PWM_ConfigChannel>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80022f0:	f000 f982 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80022f4:	bf00      	nop
 80022f6:	3738      	adds	r7, #56	; 0x38
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	200002e4 	.word	0x200002e4
 8002300:	40000400 	.word	0x40000400

08002304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08c      	sub	sp, #48	; 0x30
 8002308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230a:	f107 031c 	add.w	r3, r7, #28
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	605a      	str	r2, [r3, #4]
 8002314:	609a      	str	r2, [r3, #8]
 8002316:	60da      	str	r2, [r3, #12]
 8002318:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	61bb      	str	r3, [r7, #24]
 800231e:	4baf      	ldr	r3, [pc, #700]	; (80025dc <MX_GPIO_Init+0x2d8>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	4aae      	ldr	r2, [pc, #696]	; (80025dc <MX_GPIO_Init+0x2d8>)
 8002324:	f043 0310 	orr.w	r3, r3, #16
 8002328:	6313      	str	r3, [r2, #48]	; 0x30
 800232a:	4bac      	ldr	r3, [pc, #688]	; (80025dc <MX_GPIO_Init+0x2d8>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	61bb      	str	r3, [r7, #24]
 8002334:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	4ba8      	ldr	r3, [pc, #672]	; (80025dc <MX_GPIO_Init+0x2d8>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4aa7      	ldr	r2, [pc, #668]	; (80025dc <MX_GPIO_Init+0x2d8>)
 8002340:	f043 0304 	orr.w	r3, r3, #4
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4ba5      	ldr	r3, [pc, #660]	; (80025dc <MX_GPIO_Init+0x2d8>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	4ba1      	ldr	r3, [pc, #644]	; (80025dc <MX_GPIO_Init+0x2d8>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	4aa0      	ldr	r2, [pc, #640]	; (80025dc <MX_GPIO_Init+0x2d8>)
 800235c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002360:	6313      	str	r3, [r2, #48]	; 0x30
 8002362:	4b9e      	ldr	r3, [pc, #632]	; (80025dc <MX_GPIO_Init+0x2d8>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	4b9a      	ldr	r3, [pc, #616]	; (80025dc <MX_GPIO_Init+0x2d8>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a99      	ldr	r2, [pc, #612]	; (80025dc <MX_GPIO_Init+0x2d8>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b97      	ldr	r3, [pc, #604]	; (80025dc <MX_GPIO_Init+0x2d8>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	4b93      	ldr	r3, [pc, #588]	; (80025dc <MX_GPIO_Init+0x2d8>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a92      	ldr	r2, [pc, #584]	; (80025dc <MX_GPIO_Init+0x2d8>)
 8002394:	f043 0302 	orr.w	r3, r3, #2
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b90      	ldr	r3, [pc, #576]	; (80025dc <MX_GPIO_Init+0x2d8>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	607b      	str	r3, [r7, #4]
 80023aa:	4b8c      	ldr	r3, [pc, #560]	; (80025dc <MX_GPIO_Init+0x2d8>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a8b      	ldr	r2, [pc, #556]	; (80025dc <MX_GPIO_Init+0x2d8>)
 80023b0:	f043 0308 	orr.w	r3, r3, #8
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b89      	ldr	r3, [pc, #548]	; (80025dc <MX_GPIO_Init+0x2d8>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	607b      	str	r3, [r7, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 80023c2:	2200      	movs	r2, #0
 80023c4:	217c      	movs	r1, #124	; 0x7c
 80023c6:	4886      	ldr	r0, [pc, #536]	; (80025e0 <MX_GPIO_Init+0x2dc>)
 80023c8:	f000 ffc2 	bl	8003350 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80023cc:	2201      	movs	r2, #1
 80023ce:	2101      	movs	r1, #1
 80023d0:	4884      	ldr	r0, [pc, #528]	; (80025e4 <MX_GPIO_Init+0x2e0>)
 80023d2:	f000 ffbd 	bl	8003350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 80023d6:	2200      	movs	r2, #0
 80023d8:	f64f 7110 	movw	r1, #65296	; 0xff10
 80023dc:	4882      	ldr	r0, [pc, #520]	; (80025e8 <MX_GPIO_Init+0x2e4>)
 80023de:	f000 ffb7 	bl	8003350 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_mcroSD_Pin|CS_M25Q_Pin, GPIO_PIN_RESET);
 80023e2:	2200      	movs	r2, #0
 80023e4:	f44f 6104 	mov.w	r1, #2112	; 0x840
 80023e8:	487e      	ldr	r0, [pc, #504]	; (80025e4 <MX_GPIO_Init+0x2e0>)
 80023ea:	f000 ffb1 	bl	8003350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80023ee:	2200      	movs	r2, #0
 80023f0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80023f4:	487d      	ldr	r0, [pc, #500]	; (80025ec <MX_GPIO_Init+0x2e8>)
 80023f6:	f000 ffab 	bl	8003350 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 80023fa:	2374      	movs	r3, #116	; 0x74
 80023fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023fe:	2301      	movs	r3, #1
 8002400:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	2300      	movs	r3, #0
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002406:	2303      	movs	r3, #3
 8002408:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800240a:	f107 031c 	add.w	r3, r7, #28
 800240e:	4619      	mov	r1, r3
 8002410:	4873      	ldr	r0, [pc, #460]	; (80025e0 <MX_GPIO_Init+0x2dc>)
 8002412:	f000 fde9 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002416:	2308      	movs	r3, #8
 8002418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241a:	2301      	movs	r3, #1
 800241c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002422:	2300      	movs	r3, #0
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002426:	f107 031c 	add.w	r3, r7, #28
 800242a:	4619      	mov	r1, r3
 800242c:	486c      	ldr	r0, [pc, #432]	; (80025e0 <MX_GPIO_Init+0x2dc>)
 800242e:	f000 fddb 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8002432:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002438:	2300      	movs	r3, #0
 800243a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002440:	f107 031c 	add.w	r3, r7, #28
 8002444:	4619      	mov	r1, r3
 8002446:	4867      	ldr	r0, [pc, #412]	; (80025e4 <MX_GPIO_Init+0x2e0>)
 8002448:	f000 fdce 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_mcroSD_Pin CS_M25Q_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_mcroSD_Pin|CS_M25Q_Pin;
 800244c:	f640 0341 	movw	r3, #2113	; 0x841
 8002450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002452:	2301      	movs	r3, #1
 8002454:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245a:	2300      	movs	r3, #0
 800245c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800245e:	f107 031c 	add.w	r3, r7, #28
 8002462:	4619      	mov	r1, r3
 8002464:	485f      	ldr	r0, [pc, #380]	; (80025e4 <MX_GPIO_Init+0x2e0>)
 8002466:	f000 fdbf 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800246a:	2308      	movs	r3, #8
 800246c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246e:	2302      	movs	r3, #2
 8002470:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002476:	2300      	movs	r3, #0
 8002478:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800247a:	2305      	movs	r3, #5
 800247c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800247e:	f107 031c 	add.w	r3, r7, #28
 8002482:	4619      	mov	r1, r3
 8002484:	4857      	ldr	r0, [pc, #348]	; (80025e4 <MX_GPIO_Init+0x2e0>)
 8002486:	f000 fdaf 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800248a:	2301      	movs	r3, #1
 800248c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800248e:	4b58      	ldr	r3, [pc, #352]	; (80025f0 <MX_GPIO_Init+0x2ec>)
 8002490:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	2300      	movs	r3, #0
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002496:	f107 031c 	add.w	r3, r7, #28
 800249a:	4619      	mov	r1, r3
 800249c:	4855      	ldr	r0, [pc, #340]	; (80025f4 <MX_GPIO_Init+0x2f0>)
 800249e:	f000 fda3 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80024a2:	2304      	movs	r3, #4
 80024a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a6:	2300      	movs	r3, #0
 80024a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80024ae:	f107 031c 	add.w	r3, r7, #28
 80024b2:	4619      	mov	r1, r3
 80024b4:	484d      	ldr	r0, [pc, #308]	; (80025ec <MX_GPIO_Init+0x2e8>)
 80024b6:	f000 fd97 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : encoder_button_Pin */
  GPIO_InitStruct.Pin = encoder_button_Pin;
 80024ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c0:	2300      	movs	r3, #0
 80024c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024c4:	2301      	movs	r3, #1
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(encoder_button_GPIO_Port, &GPIO_InitStruct);
 80024c8:	f107 031c 	add.w	r3, r7, #28
 80024cc:	4619      	mov	r1, r3
 80024ce:	4844      	ldr	r0, [pc, #272]	; (80025e0 <MX_GPIO_Init+0x2dc>)
 80024d0:	f000 fd8a 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80024d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024da:	2302      	movs	r3, #2
 80024dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e2:	2300      	movs	r3, #0
 80024e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024e6:	2305      	movs	r3, #5
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80024ea:	f107 031c 	add.w	r3, r7, #28
 80024ee:	4619      	mov	r1, r3
 80024f0:	483e      	ldr	r0, [pc, #248]	; (80025ec <MX_GPIO_Init+0x2e8>)
 80024f2:	f000 fd79 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_3_Pin KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_3_Pin|KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 80024f6:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 80024fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024fc:	2300      	movs	r3, #0
 80024fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002500:	2301      	movs	r3, #1
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002504:	f107 031c 	add.w	r3, r7, #28
 8002508:	4619      	mov	r1, r3
 800250a:	4838      	ldr	r0, [pc, #224]	; (80025ec <MX_GPIO_Init+0x2e8>)
 800250c:	f000 fd6c 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8002510:	f64f 7310 	movw	r3, #65296	; 0xff10
 8002514:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002516:	2301      	movs	r3, #1
 8002518:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251e:	2300      	movs	r3, #0
 8002520:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002522:	f107 031c 	add.w	r3, r7, #28
 8002526:	4619      	mov	r1, r3
 8002528:	482f      	ldr	r0, [pc, #188]	; (80025e8 <MX_GPIO_Init+0x2e4>)
 800252a:	f000 fd5d 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800252e:	2320      	movs	r3, #32
 8002530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002532:	2300      	movs	r3, #0
 8002534:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800253a:	f107 031c 	add.w	r3, r7, #28
 800253e:	4619      	mov	r1, r3
 8002540:	4829      	ldr	r0, [pc, #164]	; (80025e8 <MX_GPIO_Init+0x2e4>)
 8002542:	f000 fd51 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002546:	2340      	movs	r3, #64	; 0x40
 8002548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800254a:	2301      	movs	r3, #1
 800254c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002552:	2300      	movs	r3, #0
 8002554:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002556:	f107 031c 	add.w	r3, r7, #28
 800255a:	4619      	mov	r1, r3
 800255c:	4823      	ldr	r0, [pc, #140]	; (80025ec <MX_GPIO_Init+0x2e8>)
 800255e:	f000 fd43 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8002562:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002568:	2301      	movs	r3, #1
 800256a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002570:	2303      	movs	r3, #3
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002574:	f107 031c 	add.w	r3, r7, #28
 8002578:	4619      	mov	r1, r3
 800257a:	481c      	ldr	r0, [pc, #112]	; (80025ec <MX_GPIO_Init+0x2e8>)
 800257c:	f000 fd34 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8002580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002586:	2312      	movs	r3, #18
 8002588:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800258a:	2301      	movs	r3, #1
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258e:	2300      	movs	r3, #0
 8002590:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002592:	2304      	movs	r3, #4
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8002596:	f107 031c 	add.w	r3, r7, #28
 800259a:	4619      	mov	r1, r3
 800259c:	4813      	ldr	r0, [pc, #76]	; (80025ec <MX_GPIO_Init+0x2e8>)
 800259e:	f000 fd23 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 80025a2:	2301      	movs	r3, #1
 80025a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025a6:	2300      	movs	r3, #0
 80025a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 80025ae:	f107 031c 	add.w	r3, r7, #28
 80025b2:	4619      	mov	r1, r3
 80025b4:	480a      	ldr	r0, [pc, #40]	; (80025e0 <MX_GPIO_Init+0x2dc>)
 80025b6:	f000 fd17 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80025ba:	2302      	movs	r3, #2
 80025bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80025be:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <MX_GPIO_Init+0x2ec>)
 80025c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80025c6:	f107 031c 	add.w	r3, r7, #28
 80025ca:	4619      	mov	r1, r3
 80025cc:	4804      	ldr	r0, [pc, #16]	; (80025e0 <MX_GPIO_Init+0x2dc>)
 80025ce:	f000 fd0b 	bl	8002fe8 <HAL_GPIO_Init>

}
 80025d2:	bf00      	nop
 80025d4:	3730      	adds	r7, #48	; 0x30
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40023800 	.word	0x40023800
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40020800 	.word	0x40020800
 80025e8:	40020c00 	.word	0x40020c00
 80025ec:	40020400 	.word	0x40020400
 80025f0:	10120000 	.word	0x10120000
 80025f4:	40020000 	.word	0x40020000

080025f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025fc:	b672      	cpsid	i
}
 80025fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002600:	e7fe      	b.n	8002600 <Error_Handler+0x8>
	...

08002604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	4b14      	ldr	r3, [pc, #80]	; (8002660 <HAL_MspInit+0x5c>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	4a13      	ldr	r2, [pc, #76]	; (8002660 <HAL_MspInit+0x5c>)
 8002614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002618:	6453      	str	r3, [r2, #68]	; 0x44
 800261a:	4b11      	ldr	r3, [pc, #68]	; (8002660 <HAL_MspInit+0x5c>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002622:	607b      	str	r3, [r7, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	603b      	str	r3, [r7, #0]
 800262a:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <HAL_MspInit+0x5c>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	4a0c      	ldr	r2, [pc, #48]	; (8002660 <HAL_MspInit+0x5c>)
 8002630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002634:	6413      	str	r3, [r2, #64]	; 0x40
 8002636:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <HAL_MspInit+0x5c>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002642:	2007      	movs	r0, #7
 8002644:	f000 fc8e 	bl	8002f64 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002648:	2200      	movs	r2, #0
 800264a:	2100      	movs	r1, #0
 800264c:	2005      	movs	r0, #5
 800264e:	f000 fc94 	bl	8002f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002652:	2005      	movs	r0, #5
 8002654:	f000 fcad 	bl	8002fb2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40023800 	.word	0x40023800

08002664 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08a      	sub	sp, #40	; 0x28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266c:	f107 0314 	add.w	r3, r7, #20
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a29      	ldr	r2, [pc, #164]	; (8002728 <HAL_I2C_MspInit+0xc4>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d14b      	bne.n	800271e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	4b28      	ldr	r3, [pc, #160]	; (800272c <HAL_I2C_MspInit+0xc8>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a27      	ldr	r2, [pc, #156]	; (800272c <HAL_I2C_MspInit+0xc8>)
 8002690:	f043 0304 	orr.w	r3, r3, #4
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
 8002696:	4b25      	ldr	r3, [pc, #148]	; (800272c <HAL_I2C_MspInit+0xc8>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	4b21      	ldr	r3, [pc, #132]	; (800272c <HAL_I2C_MspInit+0xc8>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	4a20      	ldr	r2, [pc, #128]	; (800272c <HAL_I2C_MspInit+0xc8>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	6313      	str	r3, [r2, #48]	; 0x30
 80026b2:	4b1e      	ldr	r3, [pc, #120]	; (800272c <HAL_I2C_MspInit+0xc8>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026c4:	2312      	movs	r3, #18
 80026c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026c8:	2301      	movs	r3, #1
 80026ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026cc:	2303      	movs	r3, #3
 80026ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026d0:	2304      	movs	r3, #4
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026d4:	f107 0314 	add.w	r3, r7, #20
 80026d8:	4619      	mov	r1, r3
 80026da:	4815      	ldr	r0, [pc, #84]	; (8002730 <HAL_I2C_MspInit+0xcc>)
 80026dc:	f000 fc84 	bl	8002fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026e6:	2312      	movs	r3, #18
 80026e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026ea:	2301      	movs	r3, #1
 80026ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ee:	2303      	movs	r3, #3
 80026f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026f2:	2304      	movs	r3, #4
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f6:	f107 0314 	add.w	r3, r7, #20
 80026fa:	4619      	mov	r1, r3
 80026fc:	480d      	ldr	r0, [pc, #52]	; (8002734 <HAL_I2C_MspInit+0xd0>)
 80026fe:	f000 fc73 	bl	8002fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <HAL_I2C_MspInit+0xc8>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	4a08      	ldr	r2, [pc, #32]	; (800272c <HAL_I2C_MspInit+0xc8>)
 800270c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002710:	6413      	str	r3, [r2, #64]	; 0x40
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_I2C_MspInit+0xc8>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800271e:	bf00      	nop
 8002720:	3728      	adds	r7, #40	; 0x28
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40005c00 	.word	0x40005c00
 800272c:	40023800 	.word	0x40023800
 8002730:	40020800 	.word	0x40020800
 8002734:	40020000 	.word	0x40020000

08002738 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
 800274e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a28      	ldr	r2, [pc, #160]	; (80027f8 <HAL_I2S_MspInit+0xc0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d14a      	bne.n	80027f0 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	4b27      	ldr	r3, [pc, #156]	; (80027fc <HAL_I2S_MspInit+0xc4>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	4a26      	ldr	r2, [pc, #152]	; (80027fc <HAL_I2S_MspInit+0xc4>)
 8002764:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002768:	6413      	str	r3, [r2, #64]	; 0x40
 800276a:	4b24      	ldr	r3, [pc, #144]	; (80027fc <HAL_I2S_MspInit+0xc4>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	4b20      	ldr	r3, [pc, #128]	; (80027fc <HAL_I2S_MspInit+0xc4>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4a1f      	ldr	r2, [pc, #124]	; (80027fc <HAL_I2S_MspInit+0xc4>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6313      	str	r3, [r2, #48]	; 0x30
 8002786:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <HAL_I2S_MspInit+0xc4>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	4b19      	ldr	r3, [pc, #100]	; (80027fc <HAL_I2S_MspInit+0xc4>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a18      	ldr	r2, [pc, #96]	; (80027fc <HAL_I2S_MspInit+0xc4>)
 800279c:	f043 0304 	orr.w	r3, r3, #4
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b16      	ldr	r3, [pc, #88]	; (80027fc <HAL_I2S_MspInit+0xc4>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80027ae:	2310      	movs	r3, #16
 80027b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b2:	2302      	movs	r3, #2
 80027b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ba:	2300      	movs	r3, #0
 80027bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027be:	2306      	movs	r3, #6
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80027c2:	f107 0314 	add.w	r3, r7, #20
 80027c6:	4619      	mov	r1, r3
 80027c8:	480d      	ldr	r0, [pc, #52]	; (8002800 <HAL_I2S_MspInit+0xc8>)
 80027ca:	f000 fc0d 	bl	8002fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80027ce:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80027d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d4:	2302      	movs	r3, #2
 80027d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027dc:	2300      	movs	r3, #0
 80027de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027e0:	2306      	movs	r3, #6
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	4619      	mov	r1, r3
 80027ea:	4806      	ldr	r0, [pc, #24]	; (8002804 <HAL_I2S_MspInit+0xcc>)
 80027ec:	f000 fbfc 	bl	8002fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80027f0:	bf00      	nop
 80027f2:	3728      	adds	r7, #40	; 0x28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40003c00 	.word	0x40003c00
 80027fc:	40023800 	.word	0x40023800
 8002800:	40020000 	.word	0x40020000
 8002804:	40020800 	.word	0x40020800

08002808 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0b      	ldr	r2, [pc, #44]	; (8002844 <HAL_RNG_MspInit+0x3c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d10d      	bne.n	8002836 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <HAL_RNG_MspInit+0x40>)
 8002820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002822:	4a09      	ldr	r2, [pc, #36]	; (8002848 <HAL_RNG_MspInit+0x40>)
 8002824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002828:	6353      	str	r3, [r2, #52]	; 0x34
 800282a:	4b07      	ldr	r3, [pc, #28]	; (8002848 <HAL_RNG_MspInit+0x40>)
 800282c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002836:	bf00      	nop
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	50060800 	.word	0x50060800
 8002848:	40023800 	.word	0x40023800

0800284c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08c      	sub	sp, #48	; 0x30
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	f107 031c 	add.w	r3, r7, #28
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a41      	ldr	r2, [pc, #260]	; (8002970 <HAL_SPI_MspInit+0x124>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d12c      	bne.n	80028c8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	4b40      	ldr	r3, [pc, #256]	; (8002974 <HAL_SPI_MspInit+0x128>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002876:	4a3f      	ldr	r2, [pc, #252]	; (8002974 <HAL_SPI_MspInit+0x128>)
 8002878:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800287c:	6453      	str	r3, [r2, #68]	; 0x44
 800287e:	4b3d      	ldr	r3, [pc, #244]	; (8002974 <HAL_SPI_MspInit+0x128>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002886:	61bb      	str	r3, [r7, #24]
 8002888:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	4b39      	ldr	r3, [pc, #228]	; (8002974 <HAL_SPI_MspInit+0x128>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	4a38      	ldr	r2, [pc, #224]	; (8002974 <HAL_SPI_MspInit+0x128>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6313      	str	r3, [r2, #48]	; 0x30
 800289a:	4b36      	ldr	r3, [pc, #216]	; (8002974 <HAL_SPI_MspInit+0x128>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80028a6:	23e0      	movs	r3, #224	; 0xe0
 80028a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028aa:	2302      	movs	r3, #2
 80028ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b2:	2303      	movs	r3, #3
 80028b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028b6:	2305      	movs	r3, #5
 80028b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ba:	f107 031c 	add.w	r3, r7, #28
 80028be:	4619      	mov	r1, r3
 80028c0:	482d      	ldr	r0, [pc, #180]	; (8002978 <HAL_SPI_MspInit+0x12c>)
 80028c2:	f000 fb91 	bl	8002fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80028c6:	e04f      	b.n	8002968 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a2b      	ldr	r2, [pc, #172]	; (800297c <HAL_SPI_MspInit+0x130>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d14a      	bne.n	8002968 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	4b27      	ldr	r3, [pc, #156]	; (8002974 <HAL_SPI_MspInit+0x128>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	4a26      	ldr	r2, [pc, #152]	; (8002974 <HAL_SPI_MspInit+0x128>)
 80028dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e0:	6413      	str	r3, [r2, #64]	; 0x40
 80028e2:	4b24      	ldr	r3, [pc, #144]	; (8002974 <HAL_SPI_MspInit+0x128>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	4b20      	ldr	r3, [pc, #128]	; (8002974 <HAL_SPI_MspInit+0x128>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	4a1f      	ldr	r2, [pc, #124]	; (8002974 <HAL_SPI_MspInit+0x128>)
 80028f8:	f043 0304 	orr.w	r3, r3, #4
 80028fc:	6313      	str	r3, [r2, #48]	; 0x30
 80028fe:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <HAL_SPI_MspInit+0x128>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_SPI_MspInit+0x128>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	4a18      	ldr	r2, [pc, #96]	; (8002974 <HAL_SPI_MspInit+0x128>)
 8002914:	f043 0302 	orr.w	r3, r3, #2
 8002918:	6313      	str	r3, [r2, #48]	; 0x30
 800291a:	4b16      	ldr	r3, [pc, #88]	; (8002974 <HAL_SPI_MspInit+0x128>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002926:	2304      	movs	r3, #4
 8002928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292a:	2302      	movs	r3, #2
 800292c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002932:	2303      	movs	r3, #3
 8002934:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002936:	2305      	movs	r3, #5
 8002938:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800293a:	f107 031c 	add.w	r3, r7, #28
 800293e:	4619      	mov	r1, r3
 8002940:	480f      	ldr	r0, [pc, #60]	; (8002980 <HAL_SPI_MspInit+0x134>)
 8002942:	f000 fb51 	bl	8002fe8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002946:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800294a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294c:	2302      	movs	r3, #2
 800294e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002954:	2303      	movs	r3, #3
 8002956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002958:	2305      	movs	r3, #5
 800295a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800295c:	f107 031c 	add.w	r3, r7, #28
 8002960:	4619      	mov	r1, r3
 8002962:	4808      	ldr	r0, [pc, #32]	; (8002984 <HAL_SPI_MspInit+0x138>)
 8002964:	f000 fb40 	bl	8002fe8 <HAL_GPIO_Init>
}
 8002968:	bf00      	nop
 800296a:	3730      	adds	r7, #48	; 0x30
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40013000 	.word	0x40013000
 8002974:	40023800 	.word	0x40023800
 8002978:	40020000 	.word	0x40020000
 800297c:	40003800 	.word	0x40003800
 8002980:	40020800 	.word	0x40020800
 8002984:	40020400 	.word	0x40020400

08002988 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08a      	sub	sp, #40	; 0x28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	60da      	str	r2, [r3, #12]
 800299e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a19      	ldr	r2, [pc, #100]	; (8002a0c <HAL_TIM_Encoder_MspInit+0x84>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d12c      	bne.n	8002a04 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	4b18      	ldr	r3, [pc, #96]	; (8002a10 <HAL_TIM_Encoder_MspInit+0x88>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	4a17      	ldr	r2, [pc, #92]	; (8002a10 <HAL_TIM_Encoder_MspInit+0x88>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ba:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <HAL_TIM_Encoder_MspInit+0x88>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <HAL_TIM_Encoder_MspInit+0x88>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	4a10      	ldr	r2, [pc, #64]	; (8002a10 <HAL_TIM_Encoder_MspInit+0x88>)
 80029d0:	f043 0310 	orr.w	r3, r3, #16
 80029d4:	6313      	str	r3, [r2, #48]	; 0x30
 80029d6:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <HAL_TIM_Encoder_MspInit+0x88>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80029e2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80029e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e8:	2302      	movs	r3, #2
 80029ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029ec:	2301      	movs	r3, #1
 80029ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f0:	2300      	movs	r3, #0
 80029f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029f4:	2301      	movs	r3, #1
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029f8:	f107 0314 	add.w	r3, r7, #20
 80029fc:	4619      	mov	r1, r3
 80029fe:	4805      	ldr	r0, [pc, #20]	; (8002a14 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002a00:	f000 faf2 	bl	8002fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002a04:	bf00      	nop
 8002a06:	3728      	adds	r7, #40	; 0x28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40010000 	.word	0x40010000
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40021000 	.word	0x40021000

08002a18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a28:	d10e      	bne.n	8002a48 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	4b16      	ldr	r3, [pc, #88]	; (8002a88 <HAL_TIM_Base_MspInit+0x70>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	4a15      	ldr	r2, [pc, #84]	; (8002a88 <HAL_TIM_Base_MspInit+0x70>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3a:	4b13      	ldr	r3, [pc, #76]	; (8002a88 <HAL_TIM_Base_MspInit+0x70>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a46:	e01a      	b.n	8002a7e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a0f      	ldr	r2, [pc, #60]	; (8002a8c <HAL_TIM_Base_MspInit+0x74>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d115      	bne.n	8002a7e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	4b0c      	ldr	r3, [pc, #48]	; (8002a88 <HAL_TIM_Base_MspInit+0x70>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	4a0b      	ldr	r2, [pc, #44]	; (8002a88 <HAL_TIM_Base_MspInit+0x70>)
 8002a5c:	f043 0302 	orr.w	r3, r3, #2
 8002a60:	6413      	str	r3, [r2, #64]	; 0x40
 8002a62:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <HAL_TIM_Base_MspInit+0x70>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	60bb      	str	r3, [r7, #8]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2100      	movs	r1, #0
 8002a72:	201d      	movs	r0, #29
 8002a74:	f000 fa81 	bl	8002f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a78:	201d      	movs	r0, #29
 8002a7a:	f000 fa9a 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
}
 8002a7e:	bf00      	nop
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40000400 	.word	0x40000400

08002a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a94:	e7fe      	b.n	8002a94 <NMI_Handler+0x4>

08002a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a96:	b480      	push	{r7}
 8002a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a9a:	e7fe      	b.n	8002a9a <HardFault_Handler+0x4>

08002a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aa0:	e7fe      	b.n	8002aa0 <MemManage_Handler+0x4>

08002aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aa6:	e7fe      	b.n	8002aa6 <BusFault_Handler+0x4>

08002aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aac:	e7fe      	b.n	8002aac <UsageFault_Handler+0x4>

08002aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ac0:	bf00      	nop
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aca:	b480      	push	{r7}
 8002acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002adc:	f000 f92e 	bl	8002d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ae0:	bf00      	nop
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002ae8:	bf00      	nop
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 8002af8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002afc:	481b      	ldr	r0, [pc, #108]	; (8002b6c <TIM2_IRQHandler+0x78>)
 8002afe:	f000 fc40 	bl	8003382 <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 8002b02:	4b1b      	ldr	r3, [pc, #108]	; (8002b70 <TIM2_IRQHandler+0x7c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d111      	bne.n	8002b2e <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 8002b0a:	4b1a      	ldr	r3, [pc, #104]	; (8002b74 <TIM2_IRQHandler+0x80>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2bc8      	cmp	r3, #200	; 0xc8
 8002b10:	dc0a      	bgt.n	8002b28 <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 8002b12:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <TIM2_IRQHandler+0x80>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <TIM2_IRQHandler+0x84>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 8002b1c:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <TIM2_IRQHandler+0x80>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	3301      	adds	r3, #1
 8002b22:	4a14      	ldr	r2, [pc, #80]	; (8002b74 <TIM2_IRQHandler+0x80>)
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	e002      	b.n	8002b2e <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 8002b28:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <TIM2_IRQHandler+0x7c>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 8002b2e:	4b10      	ldr	r3, [pc, #64]	; (8002b70 <TIM2_IRQHandler+0x7c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d114      	bne.n	8002b60 <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 8002b36:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <TIM2_IRQHandler+0x80>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b63      	cmp	r3, #99	; 0x63
 8002b3c:	dd0a      	ble.n	8002b54 <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 8002b3e:	4b0d      	ldr	r3, [pc, #52]	; (8002b74 <TIM2_IRQHandler+0x80>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <TIM2_IRQHandler+0x84>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 8002b48:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <TIM2_IRQHandler+0x80>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	4a09      	ldr	r2, [pc, #36]	; (8002b74 <TIM2_IRQHandler+0x80>)
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	e005      	b.n	8002b60 <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 8002b54:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <TIM2_IRQHandler+0x7c>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
		  i = 100;
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <TIM2_IRQHandler+0x80>)
 8002b5c:	2264      	movs	r2, #100	; 0x64
 8002b5e:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b60:	4805      	ldr	r0, [pc, #20]	; (8002b78 <TIM2_IRQHandler+0x84>)
 8002b62:	f004 fa98 	bl	8007096 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40020c00 	.word	0x40020c00
 8002b70:	200001fc 	.word	0x200001fc
 8002b74:	20000144 	.word	0x20000144
 8002b78:	200003dc 	.word	0x200003dc

08002b7c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8002b80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b84:	4804      	ldr	r0, [pc, #16]	; (8002b98 <TIM3_IRQHandler+0x1c>)
 8002b86:	f000 fbfc 	bl	8003382 <HAL_GPIO_TogglePin>
  read_digits();
 8002b8a:	f7fe feef 	bl	800196c <read_digits>

	//keyboard_test();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b8e:	4803      	ldr	r0, [pc, #12]	; (8002b9c <TIM3_IRQHandler+0x20>)
 8002b90:	f004 fa81 	bl	8007096 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b94:	bf00      	nop
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40020c00 	.word	0x40020c00
 8002b9c:	200002e4 	.word	0x200002e4

08002ba0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002ba4:	4802      	ldr	r0, [pc, #8]	; (8002bb0 <OTG_FS_IRQHandler+0x10>)
 8002ba6:	f000 fe71 	bl	800388c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000848 	.word	0x20000848

08002bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bbc:	4a14      	ldr	r2, [pc, #80]	; (8002c10 <_sbrk+0x5c>)
 8002bbe:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <_sbrk+0x60>)
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bc8:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <_sbrk+0x64>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d102      	bne.n	8002bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bd0:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <_sbrk+0x64>)
 8002bd2:	4a12      	ldr	r2, [pc, #72]	; (8002c1c <_sbrk+0x68>)
 8002bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bd6:	4b10      	ldr	r3, [pc, #64]	; (8002c18 <_sbrk+0x64>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4413      	add	r3, r2
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d207      	bcs.n	8002bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002be4:	f008 fa1c 	bl	800b020 <__errno>
 8002be8:	4603      	mov	r3, r0
 8002bea:	220c      	movs	r2, #12
 8002bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bf2:	e009      	b.n	8002c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bf4:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <_sbrk+0x64>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bfa:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <_sbrk+0x64>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4413      	add	r3, r2
 8002c02:	4a05      	ldr	r2, [pc, #20]	; (8002c18 <_sbrk+0x64>)
 8002c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c06:	68fb      	ldr	r3, [r7, #12]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20020000 	.word	0x20020000
 8002c14:	00000400 	.word	0x00000400
 8002c18:	20000200 	.word	0x20000200
 8002c1c:	20000b60 	.word	0x20000b60

08002c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <SystemInit+0x20>)
 8002c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2a:	4a05      	ldr	r2, [pc, #20]	; (8002c40 <SystemInit+0x20>)
 8002c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c48:	480d      	ldr	r0, [pc, #52]	; (8002c80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c4a:	490e      	ldr	r1, [pc, #56]	; (8002c84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c4c:	4a0e      	ldr	r2, [pc, #56]	; (8002c88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c50:	e002      	b.n	8002c58 <LoopCopyDataInit>

08002c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c56:	3304      	adds	r3, #4

08002c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c5c:	d3f9      	bcc.n	8002c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c5e:	4a0b      	ldr	r2, [pc, #44]	; (8002c8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c60:	4c0b      	ldr	r4, [pc, #44]	; (8002c90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c64:	e001      	b.n	8002c6a <LoopFillZerobss>

08002c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c68:	3204      	adds	r2, #4

08002c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c6c:	d3fb      	bcc.n	8002c66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c6e:	f7ff ffd7 	bl	8002c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c72:	f008 f9db 	bl	800b02c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c76:	f7ff f87f 	bl	8001d78 <main>
  bx  lr    
 8002c7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c84:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002c88:	0800b7e8 	.word	0x0800b7e8
  ldr r2, =_sbss
 8002c8c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002c90:	20000b5c 	.word	0x20000b5c

08002c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c94:	e7fe      	b.n	8002c94 <ADC_IRQHandler>
	...

08002c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c9c:	4b0e      	ldr	r3, [pc, #56]	; (8002cd8 <HAL_Init+0x40>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a0d      	ldr	r2, [pc, #52]	; (8002cd8 <HAL_Init+0x40>)
 8002ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_Init+0x40>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a0a      	ldr	r2, [pc, #40]	; (8002cd8 <HAL_Init+0x40>)
 8002cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cb4:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <HAL_Init+0x40>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a07      	ldr	r2, [pc, #28]	; (8002cd8 <HAL_Init+0x40>)
 8002cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cc0:	2003      	movs	r0, #3
 8002cc2:	f000 f94f 	bl	8002f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	f000 f808 	bl	8002cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ccc:	f7ff fc9a 	bl	8002604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40023c00 	.word	0x40023c00

08002cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ce4:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <HAL_InitTick+0x54>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <HAL_InitTick+0x58>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	4619      	mov	r1, r3
 8002cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 f967 	bl	8002fce <HAL_SYSTICK_Config>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e00e      	b.n	8002d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b0f      	cmp	r3, #15
 8002d0e:	d80a      	bhi.n	8002d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d10:	2200      	movs	r2, #0
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d18:	f000 f92f 	bl	8002f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d1c:	4a06      	ldr	r2, [pc, #24]	; (8002d38 <HAL_InitTick+0x5c>)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	e000      	b.n	8002d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	20000148 	.word	0x20000148
 8002d34:	20000150 	.word	0x20000150
 8002d38:	2000014c 	.word	0x2000014c

08002d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d40:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <HAL_IncTick+0x20>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	461a      	mov	r2, r3
 8002d46:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <HAL_IncTick+0x24>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	4a04      	ldr	r2, [pc, #16]	; (8002d60 <HAL_IncTick+0x24>)
 8002d4e:	6013      	str	r3, [r2, #0]
}
 8002d50:	bf00      	nop
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	20000150 	.word	0x20000150
 8002d60:	2000046c 	.word	0x2000046c

08002d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  return uwTick;
 8002d68:	4b03      	ldr	r3, [pc, #12]	; (8002d78 <HAL_GetTick+0x14>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	2000046c 	.word	0x2000046c

08002d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d84:	f7ff ffee 	bl	8002d64 <HAL_GetTick>
 8002d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d94:	d005      	beq.n	8002da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d96:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <HAL_Delay+0x44>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4413      	add	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002da2:	bf00      	nop
 8002da4:	f7ff ffde 	bl	8002d64 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d8f7      	bhi.n	8002da4 <HAL_Delay+0x28>
  {
  }
}
 8002db4:	bf00      	nop
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000150 	.word	0x20000150

08002dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002de0:	4013      	ands	r3, r2
 8002de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002df6:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <__NVIC_SetPriorityGrouping+0x44>)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	60d3      	str	r3, [r2, #12]
}
 8002dfc:	bf00      	nop
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e10:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <__NVIC_GetPriorityGrouping+0x18>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	0a1b      	lsrs	r3, r3, #8
 8002e16:	f003 0307 	and.w	r3, r3, #7
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	e000ed00 	.word	0xe000ed00

08002e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	db0b      	blt.n	8002e52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	f003 021f 	and.w	r2, r3, #31
 8002e40:	4907      	ldr	r1, [pc, #28]	; (8002e60 <__NVIC_EnableIRQ+0x38>)
 8002e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	2001      	movs	r0, #1
 8002e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	e000e100 	.word	0xe000e100

08002e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	6039      	str	r1, [r7, #0]
 8002e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	db0a      	blt.n	8002e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	490c      	ldr	r1, [pc, #48]	; (8002eb0 <__NVIC_SetPriority+0x4c>)
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	0112      	lsls	r2, r2, #4
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	440b      	add	r3, r1
 8002e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e8c:	e00a      	b.n	8002ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	4908      	ldr	r1, [pc, #32]	; (8002eb4 <__NVIC_SetPriority+0x50>)
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	3b04      	subs	r3, #4
 8002e9c:	0112      	lsls	r2, r2, #4
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	761a      	strb	r2, [r3, #24]
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000e100 	.word	0xe000e100
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b089      	sub	sp, #36	; 0x24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f1c3 0307 	rsb	r3, r3, #7
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	bf28      	it	cs
 8002ed6:	2304      	movcs	r3, #4
 8002ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	3304      	adds	r3, #4
 8002ede:	2b06      	cmp	r3, #6
 8002ee0:	d902      	bls.n	8002ee8 <NVIC_EncodePriority+0x30>
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	3b03      	subs	r3, #3
 8002ee6:	e000      	b.n	8002eea <NVIC_EncodePriority+0x32>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43da      	mvns	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	401a      	ands	r2, r3
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0a:	43d9      	mvns	r1, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f10:	4313      	orrs	r3, r2
         );
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3724      	adds	r7, #36	; 0x24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
	...

08002f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f30:	d301      	bcc.n	8002f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f32:	2301      	movs	r3, #1
 8002f34:	e00f      	b.n	8002f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f36:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <SysTick_Config+0x40>)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f3e:	210f      	movs	r1, #15
 8002f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f44:	f7ff ff8e 	bl	8002e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f48:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <SysTick_Config+0x40>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f4e:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <SysTick_Config+0x40>)
 8002f50:	2207      	movs	r2, #7
 8002f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	e000e010 	.word	0xe000e010

08002f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff ff29 	bl	8002dc4 <__NVIC_SetPriorityGrouping>
}
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b086      	sub	sp, #24
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	4603      	mov	r3, r0
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
 8002f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f8c:	f7ff ff3e 	bl	8002e0c <__NVIC_GetPriorityGrouping>
 8002f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68b9      	ldr	r1, [r7, #8]
 8002f96:	6978      	ldr	r0, [r7, #20]
 8002f98:	f7ff ff8e 	bl	8002eb8 <NVIC_EncodePriority>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff ff5d 	bl	8002e64 <__NVIC_SetPriority>
}
 8002faa:	bf00      	nop
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	4603      	mov	r3, r0
 8002fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff ff31 	bl	8002e28 <__NVIC_EnableIRQ>
}
 8002fc6:	bf00      	nop
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff ffa2 	bl	8002f20 <SysTick_Config>
 8002fdc:	4603      	mov	r3, r0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b089      	sub	sp, #36	; 0x24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
 8003002:	e16b      	b.n	80032dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003004:	2201      	movs	r2, #1
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4013      	ands	r3, r2
 8003016:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	429a      	cmp	r2, r3
 800301e:	f040 815a 	bne.w	80032d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	2b01      	cmp	r3, #1
 800302c:	d005      	beq.n	800303a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003036:	2b02      	cmp	r3, #2
 8003038:	d130      	bne.n	800309c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	2203      	movs	r2, #3
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43db      	mvns	r3, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4013      	ands	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003070:	2201      	movs	r2, #1
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4013      	ands	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	091b      	lsrs	r3, r3, #4
 8003086:	f003 0201 	and.w	r2, r3, #1
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	2b03      	cmp	r3, #3
 80030a6:	d017      	beq.n	80030d8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	2203      	movs	r2, #3
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d123      	bne.n	800312c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	08da      	lsrs	r2, r3, #3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3208      	adds	r2, #8
 80030ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	220f      	movs	r2, #15
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43db      	mvns	r3, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4013      	ands	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4313      	orrs	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	08da      	lsrs	r2, r3, #3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3208      	adds	r2, #8
 8003126:	69b9      	ldr	r1, [r7, #24]
 8003128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	2203      	movs	r2, #3
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 0203 	and.w	r2, r3, #3
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80b4 	beq.w	80032d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	4b60      	ldr	r3, [pc, #384]	; (80032f4 <HAL_GPIO_Init+0x30c>)
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	4a5f      	ldr	r2, [pc, #380]	; (80032f4 <HAL_GPIO_Init+0x30c>)
 8003178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800317c:	6453      	str	r3, [r2, #68]	; 0x44
 800317e:	4b5d      	ldr	r3, [pc, #372]	; (80032f4 <HAL_GPIO_Init+0x30c>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800318a:	4a5b      	ldr	r2, [pc, #364]	; (80032f8 <HAL_GPIO_Init+0x310>)
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	089b      	lsrs	r3, r3, #2
 8003190:	3302      	adds	r3, #2
 8003192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003196:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	220f      	movs	r2, #15
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43db      	mvns	r3, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4013      	ands	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a52      	ldr	r2, [pc, #328]	; (80032fc <HAL_GPIO_Init+0x314>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d02b      	beq.n	800320e <HAL_GPIO_Init+0x226>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a51      	ldr	r2, [pc, #324]	; (8003300 <HAL_GPIO_Init+0x318>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d025      	beq.n	800320a <HAL_GPIO_Init+0x222>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a50      	ldr	r2, [pc, #320]	; (8003304 <HAL_GPIO_Init+0x31c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d01f      	beq.n	8003206 <HAL_GPIO_Init+0x21e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a4f      	ldr	r2, [pc, #316]	; (8003308 <HAL_GPIO_Init+0x320>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d019      	beq.n	8003202 <HAL_GPIO_Init+0x21a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a4e      	ldr	r2, [pc, #312]	; (800330c <HAL_GPIO_Init+0x324>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d013      	beq.n	80031fe <HAL_GPIO_Init+0x216>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a4d      	ldr	r2, [pc, #308]	; (8003310 <HAL_GPIO_Init+0x328>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00d      	beq.n	80031fa <HAL_GPIO_Init+0x212>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a4c      	ldr	r2, [pc, #304]	; (8003314 <HAL_GPIO_Init+0x32c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d007      	beq.n	80031f6 <HAL_GPIO_Init+0x20e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a4b      	ldr	r2, [pc, #300]	; (8003318 <HAL_GPIO_Init+0x330>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d101      	bne.n	80031f2 <HAL_GPIO_Init+0x20a>
 80031ee:	2307      	movs	r3, #7
 80031f0:	e00e      	b.n	8003210 <HAL_GPIO_Init+0x228>
 80031f2:	2308      	movs	r3, #8
 80031f4:	e00c      	b.n	8003210 <HAL_GPIO_Init+0x228>
 80031f6:	2306      	movs	r3, #6
 80031f8:	e00a      	b.n	8003210 <HAL_GPIO_Init+0x228>
 80031fa:	2305      	movs	r3, #5
 80031fc:	e008      	b.n	8003210 <HAL_GPIO_Init+0x228>
 80031fe:	2304      	movs	r3, #4
 8003200:	e006      	b.n	8003210 <HAL_GPIO_Init+0x228>
 8003202:	2303      	movs	r3, #3
 8003204:	e004      	b.n	8003210 <HAL_GPIO_Init+0x228>
 8003206:	2302      	movs	r3, #2
 8003208:	e002      	b.n	8003210 <HAL_GPIO_Init+0x228>
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <HAL_GPIO_Init+0x228>
 800320e:	2300      	movs	r3, #0
 8003210:	69fa      	ldr	r2, [r7, #28]
 8003212:	f002 0203 	and.w	r2, r2, #3
 8003216:	0092      	lsls	r2, r2, #2
 8003218:	4093      	lsls	r3, r2
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4313      	orrs	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003220:	4935      	ldr	r1, [pc, #212]	; (80032f8 <HAL_GPIO_Init+0x310>)
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	089b      	lsrs	r3, r3, #2
 8003226:	3302      	adds	r3, #2
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800322e:	4b3b      	ldr	r3, [pc, #236]	; (800331c <HAL_GPIO_Init+0x334>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	43db      	mvns	r3, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4013      	ands	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003252:	4a32      	ldr	r2, [pc, #200]	; (800331c <HAL_GPIO_Init+0x334>)
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003258:	4b30      	ldr	r3, [pc, #192]	; (800331c <HAL_GPIO_Init+0x334>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	43db      	mvns	r3, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4013      	ands	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800327c:	4a27      	ldr	r2, [pc, #156]	; (800331c <HAL_GPIO_Init+0x334>)
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003282:	4b26      	ldr	r3, [pc, #152]	; (800331c <HAL_GPIO_Init+0x334>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	43db      	mvns	r3, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4013      	ands	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032a6:	4a1d      	ldr	r2, [pc, #116]	; (800331c <HAL_GPIO_Init+0x334>)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032ac:	4b1b      	ldr	r3, [pc, #108]	; (800331c <HAL_GPIO_Init+0x334>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032d0:	4a12      	ldr	r2, [pc, #72]	; (800331c <HAL_GPIO_Init+0x334>)
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	3301      	adds	r3, #1
 80032da:	61fb      	str	r3, [r7, #28]
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	f67f ae90 	bls.w	8003004 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop
 80032e8:	3724      	adds	r7, #36	; 0x24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40023800 	.word	0x40023800
 80032f8:	40013800 	.word	0x40013800
 80032fc:	40020000 	.word	0x40020000
 8003300:	40020400 	.word	0x40020400
 8003304:	40020800 	.word	0x40020800
 8003308:	40020c00 	.word	0x40020c00
 800330c:	40021000 	.word	0x40021000
 8003310:	40021400 	.word	0x40021400
 8003314:	40021800 	.word	0x40021800
 8003318:	40021c00 	.word	0x40021c00
 800331c:	40013c00 	.word	0x40013c00

08003320 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	887b      	ldrh	r3, [r7, #2]
 8003332:	4013      	ands	r3, r2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003338:	2301      	movs	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
 800333c:	e001      	b.n	8003342 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800333e:	2300      	movs	r3, #0
 8003340:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003342:	7bfb      	ldrb	r3, [r7, #15]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	807b      	strh	r3, [r7, #2]
 800335c:	4613      	mov	r3, r2
 800335e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003360:	787b      	ldrb	r3, [r7, #1]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003366:	887a      	ldrh	r2, [r7, #2]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800336c:	e003      	b.n	8003376 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800336e:	887b      	ldrh	r3, [r7, #2]
 8003370:	041a      	lsls	r2, r3, #16
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	619a      	str	r2, [r3, #24]
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003382:	b480      	push	{r7}
 8003384:	b085      	sub	sp, #20
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	460b      	mov	r3, r1
 800338c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003394:	887a      	ldrh	r2, [r7, #2]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4013      	ands	r3, r2
 800339a:	041a      	lsls	r2, r3, #16
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	43d9      	mvns	r1, r3
 80033a0:	887b      	ldrh	r3, [r7, #2]
 80033a2:	400b      	ands	r3, r1
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	619a      	str	r2, [r3, #24]
}
 80033aa:	bf00      	nop
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80033b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033b8:	b08f      	sub	sp, #60	; 0x3c
 80033ba:	af0a      	add	r7, sp, #40	; 0x28
 80033bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e054      	b.n	8003472 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f007 fb72 	bl	800aacc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2203      	movs	r2, #3
 80033ec:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d102      	bne.n	8003402 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f004 fd14 	bl	8007e34 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	603b      	str	r3, [r7, #0]
 8003412:	687e      	ldr	r6, [r7, #4]
 8003414:	466d      	mov	r5, sp
 8003416:	f106 0410 	add.w	r4, r6, #16
 800341a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800341c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800341e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003422:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003426:	e885 0003 	stmia.w	r5, {r0, r1}
 800342a:	1d33      	adds	r3, r6, #4
 800342c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800342e:	6838      	ldr	r0, [r7, #0]
 8003430:	f004 fc8e 	bl	8007d50 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2101      	movs	r1, #1
 800343a:	4618      	mov	r0, r3
 800343c:	f004 fd0b 	bl	8007e56 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	603b      	str	r3, [r7, #0]
 8003446:	687e      	ldr	r6, [r7, #4]
 8003448:	466d      	mov	r5, sp
 800344a:	f106 0410 	add.w	r4, r6, #16
 800344e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003456:	e894 0003 	ldmia.w	r4, {r0, r1}
 800345a:	e885 0003 	stmia.w	r5, {r0, r1}
 800345e:	1d33      	adds	r3, r6, #4
 8003460:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003462:	6838      	ldr	r0, [r7, #0]
 8003464:	f004 fe1e 	bl	80080a4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800347a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800347a:	b590      	push	{r4, r7, lr}
 800347c:	b089      	sub	sp, #36	; 0x24
 800347e:	af04      	add	r7, sp, #16
 8003480:	6078      	str	r0, [r7, #4]
 8003482:	4608      	mov	r0, r1
 8003484:	4611      	mov	r1, r2
 8003486:	461a      	mov	r2, r3
 8003488:	4603      	mov	r3, r0
 800348a:	70fb      	strb	r3, [r7, #3]
 800348c:	460b      	mov	r3, r1
 800348e:	70bb      	strb	r3, [r7, #2]
 8003490:	4613      	mov	r3, r2
 8003492:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <HAL_HCD_HC_Init+0x28>
 800349e:	2302      	movs	r3, #2
 80034a0:	e076      	b.n	8003590 <HAL_HCD_HC_Init+0x116>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80034aa:	78fb      	ldrb	r3, [r7, #3]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	212c      	movs	r1, #44	; 0x2c
 80034b0:	fb01 f303 	mul.w	r3, r1, r3
 80034b4:	4413      	add	r3, r2
 80034b6:	333d      	adds	r3, #61	; 0x3d
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80034bc:	78fb      	ldrb	r3, [r7, #3]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	212c      	movs	r1, #44	; 0x2c
 80034c2:	fb01 f303 	mul.w	r3, r1, r3
 80034c6:	4413      	add	r3, r2
 80034c8:	3338      	adds	r3, #56	; 0x38
 80034ca:	787a      	ldrb	r2, [r7, #1]
 80034cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80034ce:	78fb      	ldrb	r3, [r7, #3]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	212c      	movs	r1, #44	; 0x2c
 80034d4:	fb01 f303 	mul.w	r3, r1, r3
 80034d8:	4413      	add	r3, r2
 80034da:	3340      	adds	r3, #64	; 0x40
 80034dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80034de:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	212c      	movs	r1, #44	; 0x2c
 80034e6:	fb01 f303 	mul.w	r3, r1, r3
 80034ea:	4413      	add	r3, r2
 80034ec:	3339      	adds	r3, #57	; 0x39
 80034ee:	78fa      	ldrb	r2, [r7, #3]
 80034f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	212c      	movs	r1, #44	; 0x2c
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	4413      	add	r3, r2
 80034fe:	333f      	adds	r3, #63	; 0x3f
 8003500:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003504:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003506:	78fb      	ldrb	r3, [r7, #3]
 8003508:	78ba      	ldrb	r2, [r7, #2]
 800350a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800350e:	b2d0      	uxtb	r0, r2
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	212c      	movs	r1, #44	; 0x2c
 8003514:	fb01 f303 	mul.w	r3, r1, r3
 8003518:	4413      	add	r3, r2
 800351a:	333a      	adds	r3, #58	; 0x3a
 800351c:	4602      	mov	r2, r0
 800351e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003520:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003524:	2b00      	cmp	r3, #0
 8003526:	da09      	bge.n	800353c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	212c      	movs	r1, #44	; 0x2c
 800352e:	fb01 f303 	mul.w	r3, r1, r3
 8003532:	4413      	add	r3, r2
 8003534:	333b      	adds	r3, #59	; 0x3b
 8003536:	2201      	movs	r2, #1
 8003538:	701a      	strb	r2, [r3, #0]
 800353a:	e008      	b.n	800354e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	212c      	movs	r1, #44	; 0x2c
 8003542:	fb01 f303 	mul.w	r3, r1, r3
 8003546:	4413      	add	r3, r2
 8003548:	333b      	adds	r3, #59	; 0x3b
 800354a:	2200      	movs	r2, #0
 800354c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800354e:	78fb      	ldrb	r3, [r7, #3]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	212c      	movs	r1, #44	; 0x2c
 8003554:	fb01 f303 	mul.w	r3, r1, r3
 8003558:	4413      	add	r3, r2
 800355a:	333c      	adds	r3, #60	; 0x3c
 800355c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003560:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	787c      	ldrb	r4, [r7, #1]
 8003568:	78ba      	ldrb	r2, [r7, #2]
 800356a:	78f9      	ldrb	r1, [r7, #3]
 800356c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800356e:	9302      	str	r3, [sp, #8]
 8003570:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003574:	9301      	str	r3, [sp, #4]
 8003576:	f897 3020 	ldrb.w	r3, [r7, #32]
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	4623      	mov	r3, r4
 800357e:	f004 ff13 	bl	80083a8 <USB_HC_Init>
 8003582:	4603      	mov	r3, r0
 8003584:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800358e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	bd90      	pop	{r4, r7, pc}

08003598 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80035a4:	2300      	movs	r3, #0
 80035a6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_HCD_HC_Halt+0x1e>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e00f      	b.n	80035d6 <HAL_HCD_HC_Halt+0x3e>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	78fa      	ldrb	r2, [r7, #3]
 80035c4:	4611      	mov	r1, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f005 f94f 	bl	800886a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	4608      	mov	r0, r1
 80035ea:	4611      	mov	r1, r2
 80035ec:	461a      	mov	r2, r3
 80035ee:	4603      	mov	r3, r0
 80035f0:	70fb      	strb	r3, [r7, #3]
 80035f2:	460b      	mov	r3, r1
 80035f4:	70bb      	strb	r3, [r7, #2]
 80035f6:	4613      	mov	r3, r2
 80035f8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80035fa:	78fb      	ldrb	r3, [r7, #3]
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	212c      	movs	r1, #44	; 0x2c
 8003600:	fb01 f303 	mul.w	r3, r1, r3
 8003604:	4413      	add	r3, r2
 8003606:	333b      	adds	r3, #59	; 0x3b
 8003608:	78ba      	ldrb	r2, [r7, #2]
 800360a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	212c      	movs	r1, #44	; 0x2c
 8003612:	fb01 f303 	mul.w	r3, r1, r3
 8003616:	4413      	add	r3, r2
 8003618:	333f      	adds	r3, #63	; 0x3f
 800361a:	787a      	ldrb	r2, [r7, #1]
 800361c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800361e:	7c3b      	ldrb	r3, [r7, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d112      	bne.n	800364a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	212c      	movs	r1, #44	; 0x2c
 800362a:	fb01 f303 	mul.w	r3, r1, r3
 800362e:	4413      	add	r3, r2
 8003630:	3342      	adds	r3, #66	; 0x42
 8003632:	2203      	movs	r2, #3
 8003634:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003636:	78fb      	ldrb	r3, [r7, #3]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	212c      	movs	r1, #44	; 0x2c
 800363c:	fb01 f303 	mul.w	r3, r1, r3
 8003640:	4413      	add	r3, r2
 8003642:	333d      	adds	r3, #61	; 0x3d
 8003644:	7f3a      	ldrb	r2, [r7, #28]
 8003646:	701a      	strb	r2, [r3, #0]
 8003648:	e008      	b.n	800365c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800364a:	78fb      	ldrb	r3, [r7, #3]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	212c      	movs	r1, #44	; 0x2c
 8003650:	fb01 f303 	mul.w	r3, r1, r3
 8003654:	4413      	add	r3, r2
 8003656:	3342      	adds	r3, #66	; 0x42
 8003658:	2202      	movs	r2, #2
 800365a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800365c:	787b      	ldrb	r3, [r7, #1]
 800365e:	2b03      	cmp	r3, #3
 8003660:	f200 80c6 	bhi.w	80037f0 <HAL_HCD_HC_SubmitRequest+0x210>
 8003664:	a201      	add	r2, pc, #4	; (adr r2, 800366c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366a:	bf00      	nop
 800366c:	0800367d 	.word	0x0800367d
 8003670:	080037dd 	.word	0x080037dd
 8003674:	080036e1 	.word	0x080036e1
 8003678:	0800375f 	.word	0x0800375f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800367c:	7c3b      	ldrb	r3, [r7, #16]
 800367e:	2b01      	cmp	r3, #1
 8003680:	f040 80b8 	bne.w	80037f4 <HAL_HCD_HC_SubmitRequest+0x214>
 8003684:	78bb      	ldrb	r3, [r7, #2]
 8003686:	2b00      	cmp	r3, #0
 8003688:	f040 80b4 	bne.w	80037f4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800368c:	8b3b      	ldrh	r3, [r7, #24]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d108      	bne.n	80036a4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	212c      	movs	r1, #44	; 0x2c
 8003698:	fb01 f303 	mul.w	r3, r1, r3
 800369c:	4413      	add	r3, r2
 800369e:	3355      	adds	r3, #85	; 0x55
 80036a0:	2201      	movs	r2, #1
 80036a2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	212c      	movs	r1, #44	; 0x2c
 80036aa:	fb01 f303 	mul.w	r3, r1, r3
 80036ae:	4413      	add	r3, r2
 80036b0:	3355      	adds	r3, #85	; 0x55
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d109      	bne.n	80036cc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036b8:	78fb      	ldrb	r3, [r7, #3]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	212c      	movs	r1, #44	; 0x2c
 80036be:	fb01 f303 	mul.w	r3, r1, r3
 80036c2:	4413      	add	r3, r2
 80036c4:	3342      	adds	r3, #66	; 0x42
 80036c6:	2200      	movs	r2, #0
 80036c8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80036ca:	e093      	b.n	80037f4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	212c      	movs	r1, #44	; 0x2c
 80036d2:	fb01 f303 	mul.w	r3, r1, r3
 80036d6:	4413      	add	r3, r2
 80036d8:	3342      	adds	r3, #66	; 0x42
 80036da:	2202      	movs	r2, #2
 80036dc:	701a      	strb	r2, [r3, #0]
      break;
 80036de:	e089      	b.n	80037f4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80036e0:	78bb      	ldrb	r3, [r7, #2]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d11d      	bne.n	8003722 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80036e6:	78fb      	ldrb	r3, [r7, #3]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	212c      	movs	r1, #44	; 0x2c
 80036ec:	fb01 f303 	mul.w	r3, r1, r3
 80036f0:	4413      	add	r3, r2
 80036f2:	3355      	adds	r3, #85	; 0x55
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036fa:	78fb      	ldrb	r3, [r7, #3]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	212c      	movs	r1, #44	; 0x2c
 8003700:	fb01 f303 	mul.w	r3, r1, r3
 8003704:	4413      	add	r3, r2
 8003706:	3342      	adds	r3, #66	; 0x42
 8003708:	2200      	movs	r2, #0
 800370a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800370c:	e073      	b.n	80037f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800370e:	78fb      	ldrb	r3, [r7, #3]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	212c      	movs	r1, #44	; 0x2c
 8003714:	fb01 f303 	mul.w	r3, r1, r3
 8003718:	4413      	add	r3, r2
 800371a:	3342      	adds	r3, #66	; 0x42
 800371c:	2202      	movs	r2, #2
 800371e:	701a      	strb	r2, [r3, #0]
      break;
 8003720:	e069      	b.n	80037f6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003722:	78fb      	ldrb	r3, [r7, #3]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	212c      	movs	r1, #44	; 0x2c
 8003728:	fb01 f303 	mul.w	r3, r1, r3
 800372c:	4413      	add	r3, r2
 800372e:	3354      	adds	r3, #84	; 0x54
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d109      	bne.n	800374a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003736:	78fb      	ldrb	r3, [r7, #3]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	212c      	movs	r1, #44	; 0x2c
 800373c:	fb01 f303 	mul.w	r3, r1, r3
 8003740:	4413      	add	r3, r2
 8003742:	3342      	adds	r3, #66	; 0x42
 8003744:	2200      	movs	r2, #0
 8003746:	701a      	strb	r2, [r3, #0]
      break;
 8003748:	e055      	b.n	80037f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800374a:	78fb      	ldrb	r3, [r7, #3]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	212c      	movs	r1, #44	; 0x2c
 8003750:	fb01 f303 	mul.w	r3, r1, r3
 8003754:	4413      	add	r3, r2
 8003756:	3342      	adds	r3, #66	; 0x42
 8003758:	2202      	movs	r2, #2
 800375a:	701a      	strb	r2, [r3, #0]
      break;
 800375c:	e04b      	b.n	80037f6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800375e:	78bb      	ldrb	r3, [r7, #2]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d11d      	bne.n	80037a0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003764:	78fb      	ldrb	r3, [r7, #3]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	212c      	movs	r1, #44	; 0x2c
 800376a:	fb01 f303 	mul.w	r3, r1, r3
 800376e:	4413      	add	r3, r2
 8003770:	3355      	adds	r3, #85	; 0x55
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d109      	bne.n	800378c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003778:	78fb      	ldrb	r3, [r7, #3]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	212c      	movs	r1, #44	; 0x2c
 800377e:	fb01 f303 	mul.w	r3, r1, r3
 8003782:	4413      	add	r3, r2
 8003784:	3342      	adds	r3, #66	; 0x42
 8003786:	2200      	movs	r2, #0
 8003788:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800378a:	e034      	b.n	80037f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	212c      	movs	r1, #44	; 0x2c
 8003792:	fb01 f303 	mul.w	r3, r1, r3
 8003796:	4413      	add	r3, r2
 8003798:	3342      	adds	r3, #66	; 0x42
 800379a:	2202      	movs	r2, #2
 800379c:	701a      	strb	r2, [r3, #0]
      break;
 800379e:	e02a      	b.n	80037f6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80037a0:	78fb      	ldrb	r3, [r7, #3]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	212c      	movs	r1, #44	; 0x2c
 80037a6:	fb01 f303 	mul.w	r3, r1, r3
 80037aa:	4413      	add	r3, r2
 80037ac:	3354      	adds	r3, #84	; 0x54
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d109      	bne.n	80037c8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	212c      	movs	r1, #44	; 0x2c
 80037ba:	fb01 f303 	mul.w	r3, r1, r3
 80037be:	4413      	add	r3, r2
 80037c0:	3342      	adds	r3, #66	; 0x42
 80037c2:	2200      	movs	r2, #0
 80037c4:	701a      	strb	r2, [r3, #0]
      break;
 80037c6:	e016      	b.n	80037f6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	212c      	movs	r1, #44	; 0x2c
 80037ce:	fb01 f303 	mul.w	r3, r1, r3
 80037d2:	4413      	add	r3, r2
 80037d4:	3342      	adds	r3, #66	; 0x42
 80037d6:	2202      	movs	r2, #2
 80037d8:	701a      	strb	r2, [r3, #0]
      break;
 80037da:	e00c      	b.n	80037f6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	212c      	movs	r1, #44	; 0x2c
 80037e2:	fb01 f303 	mul.w	r3, r1, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	3342      	adds	r3, #66	; 0x42
 80037ea:	2200      	movs	r2, #0
 80037ec:	701a      	strb	r2, [r3, #0]
      break;
 80037ee:	e002      	b.n	80037f6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80037f0:	bf00      	nop
 80037f2:	e000      	b.n	80037f6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80037f4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80037f6:	78fb      	ldrb	r3, [r7, #3]
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	212c      	movs	r1, #44	; 0x2c
 80037fc:	fb01 f303 	mul.w	r3, r1, r3
 8003800:	4413      	add	r3, r2
 8003802:	3344      	adds	r3, #68	; 0x44
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003808:	78fb      	ldrb	r3, [r7, #3]
 800380a:	8b3a      	ldrh	r2, [r7, #24]
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	202c      	movs	r0, #44	; 0x2c
 8003810:	fb00 f303 	mul.w	r3, r0, r3
 8003814:	440b      	add	r3, r1
 8003816:	334c      	adds	r3, #76	; 0x4c
 8003818:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	212c      	movs	r1, #44	; 0x2c
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	4413      	add	r3, r2
 8003826:	3360      	adds	r3, #96	; 0x60
 8003828:	2200      	movs	r2, #0
 800382a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800382c:	78fb      	ldrb	r3, [r7, #3]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	212c      	movs	r1, #44	; 0x2c
 8003832:	fb01 f303 	mul.w	r3, r1, r3
 8003836:	4413      	add	r3, r2
 8003838:	3350      	adds	r3, #80	; 0x50
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800383e:	78fb      	ldrb	r3, [r7, #3]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	212c      	movs	r1, #44	; 0x2c
 8003844:	fb01 f303 	mul.w	r3, r1, r3
 8003848:	4413      	add	r3, r2
 800384a:	3339      	adds	r3, #57	; 0x39
 800384c:	78fa      	ldrb	r2, [r7, #3]
 800384e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	212c      	movs	r1, #44	; 0x2c
 8003856:	fb01 f303 	mul.w	r3, r1, r3
 800385a:	4413      	add	r3, r2
 800385c:	3361      	adds	r3, #97	; 0x61
 800385e:	2200      	movs	r2, #0
 8003860:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6818      	ldr	r0, [r3, #0]
 8003866:	78fb      	ldrb	r3, [r7, #3]
 8003868:	222c      	movs	r2, #44	; 0x2c
 800386a:	fb02 f303 	mul.w	r3, r2, r3
 800386e:	3338      	adds	r3, #56	; 0x38
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	18d1      	adds	r1, r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	461a      	mov	r2, r3
 800387c:	f004 fea2 	bl	80085c4 <USB_HC_StartXfer>
 8003880:	4603      	mov	r3, r0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop

0800388c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f004 fbbb 	bl	800801e <USB_GetMode>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	f040 80ef 	bne.w	8003a8e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f004 fb9f 	bl	8007ff8 <USB_ReadInterrupts>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 80e5 	beq.w	8003a8c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f004 fb96 	bl	8007ff8 <USB_ReadInterrupts>
 80038cc:	4603      	mov	r3, r0
 80038ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038d6:	d104      	bne.n	80038e2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80038e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f004 fb86 	bl	8007ff8 <USB_ReadInterrupts>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038f6:	d104      	bne.n	8003902 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003900:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f004 fb76 	bl	8007ff8 <USB_ReadInterrupts>
 800390c:	4603      	mov	r3, r0
 800390e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003912:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003916:	d104      	bne.n	8003922 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003920:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f004 fb66 	bl	8007ff8 <USB_ReadInterrupts>
 800392c:	4603      	mov	r3, r0
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b02      	cmp	r3, #2
 8003934:	d103      	bne.n	800393e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2202      	movs	r2, #2
 800393c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f004 fb58 	bl	8007ff8 <USB_ReadInterrupts>
 8003948:	4603      	mov	r3, r0
 800394a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800394e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003952:	d115      	bne.n	8003980 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800395c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d108      	bne.n	8003980 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f007 f92a 	bl	800abc8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2101      	movs	r1, #1
 800397a:	4618      	mov	r0, r3
 800397c:	f004 fc4e 	bl	800821c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f004 fb37 	bl	8007ff8 <USB_ReadInterrupts>
 800398a:	4603      	mov	r3, r0
 800398c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003990:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003994:	d102      	bne.n	800399c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f001 f9ff 	bl	8004d9a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f004 fb29 	bl	8007ff8 <USB_ReadInterrupts>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d106      	bne.n	80039be <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f007 f8ed 	bl	800ab90 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2208      	movs	r2, #8
 80039bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f004 fb18 	bl	8007ff8 <USB_ReadInterrupts>
 80039c8:	4603      	mov	r3, r0
 80039ca:	f003 0310 	and.w	r3, r3, #16
 80039ce:	2b10      	cmp	r3, #16
 80039d0:	d101      	bne.n	80039d6 <HAL_HCD_IRQHandler+0x14a>
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <HAL_HCD_IRQHandler+0x14c>
 80039d6:	2300      	movs	r3, #0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d012      	beq.n	8003a02 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699a      	ldr	r2, [r3, #24]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0210 	bic.w	r2, r2, #16
 80039ea:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f001 f902 	bl	8004bf6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699a      	ldr	r2, [r3, #24]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f042 0210 	orr.w	r2, r2, #16
 8003a00:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f004 faf6 	bl	8007ff8 <USB_ReadInterrupts>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a16:	d13a      	bne.n	8003a8e <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f004 ff13 	bl	8008848 <USB_HC_ReadInterrupt>
 8003a22:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	e025      	b.n	8003a76 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	fa22 f303 	lsr.w	r3, r2, r3
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d018      	beq.n	8003a70 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a54:	d106      	bne.n	8003a64 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f8ab 	bl	8003bb8 <HCD_HC_IN_IRQHandler>
 8003a62:	e005      	b.n	8003a70 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	4619      	mov	r1, r3
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fcc6 	bl	80043fc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	3301      	adds	r3, #1
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d3d4      	bcc.n	8003a2a <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a88:	615a      	str	r2, [r3, #20]
 8003a8a:	e000      	b.n	8003a8e <HAL_HCD_IRQHandler+0x202>
      return;
 8003a8c:	bf00      	nop
    }
  }
}
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <HAL_HCD_Start+0x16>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e013      	b.n	8003ad2 <HAL_HCD_Start+0x3e>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f004 f9ab 	bl	8007e12 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f004 fc0e 	bl	80082e4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_HCD_Stop+0x16>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e00d      	b.n	8003b0c <HAL_HCD_Stop+0x32>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f005 f80d 	bl	8008b1c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f004 fbb5 	bl	8008290 <USB_ResetPort>
 8003b26:	4603      	mov	r3, r0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3708      	adds	r7, #8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003b3c:	78fb      	ldrb	r3, [r7, #3]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	212c      	movs	r1, #44	; 0x2c
 8003b42:	fb01 f303 	mul.w	r3, r1, r3
 8003b46:	4413      	add	r3, r2
 8003b48:	3360      	adds	r3, #96	; 0x60
 8003b4a:	781b      	ldrb	r3, [r3, #0]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	460b      	mov	r3, r1
 8003b62:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003b64:	78fb      	ldrb	r3, [r7, #3]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	212c      	movs	r1, #44	; 0x2c
 8003b6a:	fb01 f303 	mul.w	r3, r1, r3
 8003b6e:	4413      	add	r3, r2
 8003b70:	3350      	adds	r3, #80	; 0x50
 8003b72:	681b      	ldr	r3, [r3, #0]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f004 fbf9 	bl	8008384 <USB_GetCurrentFrame>
 8003b92:	4603      	mov	r3, r0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f004 fbd4 	bl	8008356 <USB_GetHostSpeed>
 8003bae:	4603      	mov	r3, r0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003bce:	78fb      	ldrb	r3, [r7, #3]
 8003bd0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d119      	bne.n	8003c1c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	2304      	movs	r3, #4
 8003bf8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	0151      	lsls	r1, r2, #5
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	440a      	add	r2, r1
 8003c10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c14:	f043 0302 	orr.w	r3, r3, #2
 8003c18:	60d3      	str	r3, [r2, #12]
 8003c1a:	e101      	b.n	8003e20 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c32:	d12b      	bne.n	8003c8c <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c40:	461a      	mov	r2, r3
 8003c42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c46:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	212c      	movs	r1, #44	; 0x2c
 8003c4e:	fb01 f303 	mul.w	r3, r1, r3
 8003c52:	4413      	add	r3, r2
 8003c54:	3361      	adds	r3, #97	; 0x61
 8003c56:	2207      	movs	r2, #7
 8003c58:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	015a      	lsls	r2, r3, #5
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	0151      	lsls	r1, r2, #5
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	440a      	add	r2, r1
 8003c70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c74:	f043 0302 	orr.w	r3, r3, #2
 8003c78:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	4611      	mov	r1, r2
 8003c84:	4618      	mov	r0, r3
 8003c86:	f004 fdf0 	bl	800886a <USB_HC_Halt>
 8003c8a:	e0c9      	b.n	8003e20 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b20      	cmp	r3, #32
 8003ca0:	d109      	bne.n	8003cb6 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cae:	461a      	mov	r2, r3
 8003cb0:	2320      	movs	r3, #32
 8003cb2:	6093      	str	r3, [r2, #8]
 8003cb4:	e0b4      	b.n	8003e20 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	015a      	lsls	r2, r3, #5
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d133      	bne.n	8003d34 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	015a      	lsls	r2, r3, #5
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	0151      	lsls	r1, r2, #5
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	440a      	add	r2, r1
 8003ce2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ce6:	f043 0302 	orr.w	r3, r3, #2
 8003cea:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	212c      	movs	r1, #44	; 0x2c
 8003cf2:	fb01 f303 	mul.w	r3, r1, r3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	3361      	adds	r3, #97	; 0x61
 8003cfa:	2205      	movs	r2, #5
 8003cfc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	2310      	movs	r3, #16
 8003d0e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	2308      	movs	r3, #8
 8003d20:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f004 fd9c 	bl	800886a <USB_HC_Halt>
 8003d32:	e075      	b.n	8003e20 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	015a      	lsls	r2, r3, #5
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4a:	d134      	bne.n	8003db6 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	0151      	lsls	r1, r2, #5
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	440a      	add	r2, r1
 8003d62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d66:	f043 0302 	orr.w	r3, r3, #2
 8003d6a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	212c      	movs	r1, #44	; 0x2c
 8003d72:	fb01 f303 	mul.w	r3, r1, r3
 8003d76:	4413      	add	r3, r2
 8003d78:	3361      	adds	r3, #97	; 0x61
 8003d7a:	2208      	movs	r2, #8
 8003d7c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	2310      	movs	r3, #16
 8003d8e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003da2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	4611      	mov	r1, r2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f004 fd5b 	bl	800886a <USB_HC_Halt>
 8003db4:	e034      	b.n	8003e20 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc8:	2b80      	cmp	r3, #128	; 0x80
 8003dca:	d129      	bne.n	8003e20 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	0151      	lsls	r1, r2, #5
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	440a      	add	r2, r1
 8003de2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003de6:	f043 0302 	orr.w	r3, r3, #2
 8003dea:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	212c      	movs	r1, #44	; 0x2c
 8003df2:	fb01 f303 	mul.w	r3, r1, r3
 8003df6:	4413      	add	r3, r2
 8003df8:	3361      	adds	r3, #97	; 0x61
 8003dfa:	2206      	movs	r2, #6
 8003dfc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	4611      	mov	r1, r2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f004 fd2e 	bl	800886a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	2380      	movs	r3, #128	; 0x80
 8003e1e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e36:	d122      	bne.n	8003e7e <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	0151      	lsls	r1, r2, #5
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	440a      	add	r2, r1
 8003e4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e52:	f043 0302 	orr.w	r3, r3, #2
 8003e56:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	4611      	mov	r1, r2
 8003e62:	4618      	mov	r0, r3
 8003e64:	f004 fd01 	bl	800886a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e74:	461a      	mov	r2, r3
 8003e76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e7a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003e7c:	e2ba      	b.n	80043f4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	f040 811b 	bne.w	80040cc <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d019      	beq.n	8003ed2 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	212c      	movs	r1, #44	; 0x2c
 8003ea4:	fb01 f303 	mul.w	r3, r1, r3
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3348      	adds	r3, #72	; 0x48
 8003eac:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	0159      	lsls	r1, r3, #5
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	440b      	add	r3, r1
 8003eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003ec0:	1ad2      	subs	r2, r2, r3
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	202c      	movs	r0, #44	; 0x2c
 8003ec8:	fb00 f303 	mul.w	r3, r0, r3
 8003ecc:	440b      	add	r3, r1
 8003ece:	3350      	adds	r3, #80	; 0x50
 8003ed0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	212c      	movs	r1, #44	; 0x2c
 8003ed8:	fb01 f303 	mul.w	r3, r1, r3
 8003edc:	4413      	add	r3, r2
 8003ede:	3361      	adds	r3, #97	; 0x61
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	212c      	movs	r1, #44	; 0x2c
 8003eea:	fb01 f303 	mul.w	r3, r1, r3
 8003eee:	4413      	add	r3, r2
 8003ef0:	335c      	adds	r3, #92	; 0x5c
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f02:	461a      	mov	r2, r3
 8003f04:	2301      	movs	r3, #1
 8003f06:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	212c      	movs	r1, #44	; 0x2c
 8003f0e:	fb01 f303 	mul.w	r3, r1, r3
 8003f12:	4413      	add	r3, r2
 8003f14:	333f      	adds	r3, #63	; 0x3f
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d009      	beq.n	8003f30 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	212c      	movs	r1, #44	; 0x2c
 8003f22:	fb01 f303 	mul.w	r3, r1, r3
 8003f26:	4413      	add	r3, r2
 8003f28:	333f      	adds	r3, #63	; 0x3f
 8003f2a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d121      	bne.n	8003f74 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	0151      	lsls	r1, r2, #5
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	440a      	add	r2, r1
 8003f46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f4a:	f043 0302 	orr.w	r3, r3, #2
 8003f4e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	4611      	mov	r1, r2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f004 fc85 	bl	800886a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	2310      	movs	r3, #16
 8003f70:	6093      	str	r3, [r2, #8]
 8003f72:	e066      	b.n	8004042 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	212c      	movs	r1, #44	; 0x2c
 8003f7a:	fb01 f303 	mul.w	r3, r1, r3
 8003f7e:	4413      	add	r3, r2
 8003f80:	333f      	adds	r3, #63	; 0x3f
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b03      	cmp	r3, #3
 8003f86:	d127      	bne.n	8003fd8 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	0151      	lsls	r1, r2, #5
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	440a      	add	r2, r1
 8003f9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fa2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fa6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	212c      	movs	r1, #44	; 0x2c
 8003fae:	fb01 f303 	mul.w	r3, r1, r3
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3360      	adds	r3, #96	; 0x60
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	b2d9      	uxtb	r1, r3
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	202c      	movs	r0, #44	; 0x2c
 8003fc4:	fb00 f303 	mul.w	r3, r0, r3
 8003fc8:	4413      	add	r3, r2
 8003fca:	3360      	adds	r3, #96	; 0x60
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f006 fe07 	bl	800abe4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003fd6:	e034      	b.n	8004042 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	212c      	movs	r1, #44	; 0x2c
 8003fde:	fb01 f303 	mul.w	r3, r1, r3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	333f      	adds	r3, #63	; 0x3f
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d12a      	bne.n	8004042 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	212c      	movs	r1, #44	; 0x2c
 8003ff2:	fb01 f303 	mul.w	r3, r1, r3
 8003ff6:	4413      	add	r3, r2
 8003ff8:	3360      	adds	r3, #96	; 0x60
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	212c      	movs	r1, #44	; 0x2c
 8004004:	fb01 f303 	mul.w	r3, r1, r3
 8004008:	4413      	add	r3, r2
 800400a:	3354      	adds	r3, #84	; 0x54
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	f083 0301 	eor.w	r3, r3, #1
 8004012:	b2d8      	uxtb	r0, r3
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	212c      	movs	r1, #44	; 0x2c
 800401a:	fb01 f303 	mul.w	r3, r1, r3
 800401e:	4413      	add	r3, r2
 8004020:	3354      	adds	r3, #84	; 0x54
 8004022:	4602      	mov	r2, r0
 8004024:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	b2d9      	uxtb	r1, r3
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	202c      	movs	r0, #44	; 0x2c
 8004030:	fb00 f303 	mul.w	r3, r0, r3
 8004034:	4413      	add	r3, r2
 8004036:	3360      	adds	r3, #96	; 0x60
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f006 fdd1 	bl	800abe4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d12b      	bne.n	80040a2 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	212c      	movs	r1, #44	; 0x2c
 8004050:	fb01 f303 	mul.w	r3, r1, r3
 8004054:	4413      	add	r3, r2
 8004056:	3348      	adds	r3, #72	; 0x48
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	202c      	movs	r0, #44	; 0x2c
 8004060:	fb00 f202 	mul.w	r2, r0, r2
 8004064:	440a      	add	r2, r1
 8004066:	3240      	adds	r2, #64	; 0x40
 8004068:	8812      	ldrh	r2, [r2, #0]
 800406a:	fbb3 f3f2 	udiv	r3, r3, r2
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 81be 	beq.w	80043f4 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	212c      	movs	r1, #44	; 0x2c
 800407e:	fb01 f303 	mul.w	r3, r1, r3
 8004082:	4413      	add	r3, r2
 8004084:	3354      	adds	r3, #84	; 0x54
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	f083 0301 	eor.w	r3, r3, #1
 800408c:	b2d8      	uxtb	r0, r3
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	212c      	movs	r1, #44	; 0x2c
 8004094:	fb01 f303 	mul.w	r3, r1, r3
 8004098:	4413      	add	r3, r2
 800409a:	3354      	adds	r3, #84	; 0x54
 800409c:	4602      	mov	r2, r0
 800409e:	701a      	strb	r2, [r3, #0]
}
 80040a0:	e1a8      	b.n	80043f4 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	212c      	movs	r1, #44	; 0x2c
 80040a8:	fb01 f303 	mul.w	r3, r1, r3
 80040ac:	4413      	add	r3, r2
 80040ae:	3354      	adds	r3, #84	; 0x54
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	f083 0301 	eor.w	r3, r3, #1
 80040b6:	b2d8      	uxtb	r0, r3
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	212c      	movs	r1, #44	; 0x2c
 80040be:	fb01 f303 	mul.w	r3, r1, r3
 80040c2:	4413      	add	r3, r2
 80040c4:	3354      	adds	r3, #84	; 0x54
 80040c6:	4602      	mov	r2, r0
 80040c8:	701a      	strb	r2, [r3, #0]
}
 80040ca:	e193      	b.n	80043f4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b02      	cmp	r3, #2
 80040e0:	f040 8106 	bne.w	80042f0 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	0151      	lsls	r1, r2, #5
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	440a      	add	r2, r1
 80040fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040fe:	f023 0302 	bic.w	r3, r3, #2
 8004102:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	212c      	movs	r1, #44	; 0x2c
 800410a:	fb01 f303 	mul.w	r3, r1, r3
 800410e:	4413      	add	r3, r2
 8004110:	3361      	adds	r3, #97	; 0x61
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d109      	bne.n	800412c <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	212c      	movs	r1, #44	; 0x2c
 800411e:	fb01 f303 	mul.w	r3, r1, r3
 8004122:	4413      	add	r3, r2
 8004124:	3360      	adds	r3, #96	; 0x60
 8004126:	2201      	movs	r2, #1
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	e0c9      	b.n	80042c0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	212c      	movs	r1, #44	; 0x2c
 8004132:	fb01 f303 	mul.w	r3, r1, r3
 8004136:	4413      	add	r3, r2
 8004138:	3361      	adds	r3, #97	; 0x61
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	2b05      	cmp	r3, #5
 800413e:	d109      	bne.n	8004154 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	212c      	movs	r1, #44	; 0x2c
 8004146:	fb01 f303 	mul.w	r3, r1, r3
 800414a:	4413      	add	r3, r2
 800414c:	3360      	adds	r3, #96	; 0x60
 800414e:	2205      	movs	r2, #5
 8004150:	701a      	strb	r2, [r3, #0]
 8004152:	e0b5      	b.n	80042c0 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	212c      	movs	r1, #44	; 0x2c
 800415a:	fb01 f303 	mul.w	r3, r1, r3
 800415e:	4413      	add	r3, r2
 8004160:	3361      	adds	r3, #97	; 0x61
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b06      	cmp	r3, #6
 8004166:	d009      	beq.n	800417c <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	212c      	movs	r1, #44	; 0x2c
 800416e:	fb01 f303 	mul.w	r3, r1, r3
 8004172:	4413      	add	r3, r2
 8004174:	3361      	adds	r3, #97	; 0x61
 8004176:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004178:	2b08      	cmp	r3, #8
 800417a:	d150      	bne.n	800421e <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	212c      	movs	r1, #44	; 0x2c
 8004182:	fb01 f303 	mul.w	r3, r1, r3
 8004186:	4413      	add	r3, r2
 8004188:	335c      	adds	r3, #92	; 0x5c
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	6879      	ldr	r1, [r7, #4]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	202c      	movs	r0, #44	; 0x2c
 8004194:	fb00 f303 	mul.w	r3, r0, r3
 8004198:	440b      	add	r3, r1
 800419a:	335c      	adds	r3, #92	; 0x5c
 800419c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	212c      	movs	r1, #44	; 0x2c
 80041a4:	fb01 f303 	mul.w	r3, r1, r3
 80041a8:	4413      	add	r3, r2
 80041aa:	335c      	adds	r3, #92	; 0x5c
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d912      	bls.n	80041d8 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	212c      	movs	r1, #44	; 0x2c
 80041b8:	fb01 f303 	mul.w	r3, r1, r3
 80041bc:	4413      	add	r3, r2
 80041be:	335c      	adds	r3, #92	; 0x5c
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	212c      	movs	r1, #44	; 0x2c
 80041ca:	fb01 f303 	mul.w	r3, r1, r3
 80041ce:	4413      	add	r3, r2
 80041d0:	3360      	adds	r3, #96	; 0x60
 80041d2:	2204      	movs	r2, #4
 80041d4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80041d6:	e073      	b.n	80042c0 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	212c      	movs	r1, #44	; 0x2c
 80041de:	fb01 f303 	mul.w	r3, r1, r3
 80041e2:	4413      	add	r3, r2
 80041e4:	3360      	adds	r3, #96	; 0x60
 80041e6:	2202      	movs	r2, #2
 80041e8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004200:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004208:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	4413      	add	r3, r2
 8004212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004216:	461a      	mov	r2, r3
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800421c:	e050      	b.n	80042c0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	212c      	movs	r1, #44	; 0x2c
 8004224:	fb01 f303 	mul.w	r3, r1, r3
 8004228:	4413      	add	r3, r2
 800422a:	3361      	adds	r3, #97	; 0x61
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	2b03      	cmp	r3, #3
 8004230:	d122      	bne.n	8004278 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	212c      	movs	r1, #44	; 0x2c
 8004238:	fb01 f303 	mul.w	r3, r1, r3
 800423c:	4413      	add	r3, r2
 800423e:	3360      	adds	r3, #96	; 0x60
 8004240:	2202      	movs	r2, #2
 8004242:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	4413      	add	r3, r2
 800424c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800425a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004262:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	4413      	add	r3, r2
 800426c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004270:	461a      	mov	r2, r3
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	e023      	b.n	80042c0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	212c      	movs	r1, #44	; 0x2c
 800427e:	fb01 f303 	mul.w	r3, r1, r3
 8004282:	4413      	add	r3, r2
 8004284:	3361      	adds	r3, #97	; 0x61
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b07      	cmp	r3, #7
 800428a:	d119      	bne.n	80042c0 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	212c      	movs	r1, #44	; 0x2c
 8004292:	fb01 f303 	mul.w	r3, r1, r3
 8004296:	4413      	add	r3, r2
 8004298:	335c      	adds	r3, #92	; 0x5c
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	202c      	movs	r0, #44	; 0x2c
 80042a4:	fb00 f303 	mul.w	r3, r0, r3
 80042a8:	440b      	add	r3, r1
 80042aa:	335c      	adds	r3, #92	; 0x5c
 80042ac:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	212c      	movs	r1, #44	; 0x2c
 80042b4:	fb01 f303 	mul.w	r3, r1, r3
 80042b8:	4413      	add	r3, r2
 80042ba:	3360      	adds	r3, #96	; 0x60
 80042bc:	2204      	movs	r2, #4
 80042be:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042cc:	461a      	mov	r2, r3
 80042ce:	2302      	movs	r3, #2
 80042d0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	b2d9      	uxtb	r1, r3
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	202c      	movs	r0, #44	; 0x2c
 80042dc:	fb00 f303 	mul.w	r3, r0, r3
 80042e0:	4413      	add	r3, r2
 80042e2:	3360      	adds	r3, #96	; 0x60
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	461a      	mov	r2, r3
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f006 fc7b 	bl	800abe4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80042ee:	e081      	b.n	80043f4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 0310 	and.w	r3, r3, #16
 8004302:	2b10      	cmp	r3, #16
 8004304:	d176      	bne.n	80043f4 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	212c      	movs	r1, #44	; 0x2c
 800430c:	fb01 f303 	mul.w	r3, r1, r3
 8004310:	4413      	add	r3, r2
 8004312:	333f      	adds	r3, #63	; 0x3f
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b03      	cmp	r3, #3
 8004318:	d121      	bne.n	800435e <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	212c      	movs	r1, #44	; 0x2c
 8004320:	fb01 f303 	mul.w	r3, r1, r3
 8004324:	4413      	add	r3, r2
 8004326:	335c      	adds	r3, #92	; 0x5c
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	4413      	add	r3, r2
 8004334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	0151      	lsls	r1, r2, #5
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	440a      	add	r2, r1
 8004342:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004346:	f043 0302 	orr.w	r3, r3, #2
 800434a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	4611      	mov	r1, r2
 8004356:	4618      	mov	r0, r3
 8004358:	f004 fa87 	bl	800886a <USB_HC_Halt>
 800435c:	e041      	b.n	80043e2 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	212c      	movs	r1, #44	; 0x2c
 8004364:	fb01 f303 	mul.w	r3, r1, r3
 8004368:	4413      	add	r3, r2
 800436a:	333f      	adds	r3, #63	; 0x3f
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d009      	beq.n	8004386 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	212c      	movs	r1, #44	; 0x2c
 8004378:	fb01 f303 	mul.w	r3, r1, r3
 800437c:	4413      	add	r3, r2
 800437e:	333f      	adds	r3, #63	; 0x3f
 8004380:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004382:	2b02      	cmp	r3, #2
 8004384:	d12d      	bne.n	80043e2 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	212c      	movs	r1, #44	; 0x2c
 800438c:	fb01 f303 	mul.w	r3, r1, r3
 8004390:	4413      	add	r3, r2
 8004392:	335c      	adds	r3, #92	; 0x5c
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d120      	bne.n	80043e2 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	212c      	movs	r1, #44	; 0x2c
 80043a6:	fb01 f303 	mul.w	r3, r1, r3
 80043aa:	4413      	add	r3, r2
 80043ac:	3361      	adds	r3, #97	; 0x61
 80043ae:	2203      	movs	r2, #3
 80043b0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	015a      	lsls	r2, r3, #5
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	4413      	add	r3, r2
 80043ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	0151      	lsls	r1, r2, #5
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	440a      	add	r2, r1
 80043c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043cc:	f043 0302 	orr.w	r3, r3, #2
 80043d0:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	4611      	mov	r1, r2
 80043dc:	4618      	mov	r0, r3
 80043de:	f004 fa44 	bl	800886a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ee:	461a      	mov	r2, r3
 80043f0:	2310      	movs	r3, #16
 80043f2:	6093      	str	r3, [r2, #8]
}
 80043f4:	bf00      	nop
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004412:	78fb      	ldrb	r3, [r7, #3]
 8004414:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	4413      	add	r3, r2
 800441e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b04      	cmp	r3, #4
 800442a:	d119      	bne.n	8004460 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	4413      	add	r3, r2
 8004434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004438:	461a      	mov	r2, r3
 800443a:	2304      	movs	r3, #4
 800443c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	4413      	add	r3, r2
 8004446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	0151      	lsls	r1, r2, #5
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	440a      	add	r2, r1
 8004454:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004458:	f043 0302 	orr.w	r3, r3, #2
 800445c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800445e:	e3c6      	b.n	8004bee <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	4413      	add	r3, r2
 8004468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 0320 	and.w	r3, r3, #32
 8004472:	2b20      	cmp	r3, #32
 8004474:	d13e      	bne.n	80044f4 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	015a      	lsls	r2, r3, #5
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	4413      	add	r3, r2
 800447e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004482:	461a      	mov	r2, r3
 8004484:	2320      	movs	r3, #32
 8004486:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	212c      	movs	r1, #44	; 0x2c
 800448e:	fb01 f303 	mul.w	r3, r1, r3
 8004492:	4413      	add	r3, r2
 8004494:	333d      	adds	r3, #61	; 0x3d
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b01      	cmp	r3, #1
 800449a:	f040 83a8 	bne.w	8004bee <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	212c      	movs	r1, #44	; 0x2c
 80044a4:	fb01 f303 	mul.w	r3, r1, r3
 80044a8:	4413      	add	r3, r2
 80044aa:	333d      	adds	r3, #61	; 0x3d
 80044ac:	2200      	movs	r2, #0
 80044ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	212c      	movs	r1, #44	; 0x2c
 80044b6:	fb01 f303 	mul.w	r3, r1, r3
 80044ba:	4413      	add	r3, r2
 80044bc:	3360      	adds	r3, #96	; 0x60
 80044be:	2202      	movs	r2, #2
 80044c0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	0151      	lsls	r1, r2, #5
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	440a      	add	r2, r1
 80044d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044dc:	f043 0302 	orr.w	r3, r3, #2
 80044e0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	b2d2      	uxtb	r2, r2
 80044ea:	4611      	mov	r1, r2
 80044ec:	4618      	mov	r0, r3
 80044ee:	f004 f9bc 	bl	800886a <USB_HC_Halt>
}
 80044f2:	e37c      	b.n	8004bee <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004506:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800450a:	d122      	bne.n	8004552 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	4413      	add	r3, r2
 8004514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	0151      	lsls	r1, r2, #5
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	440a      	add	r2, r1
 8004522:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004526:	f043 0302 	orr.w	r3, r3, #2
 800452a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	4611      	mov	r1, r2
 8004536:	4618      	mov	r0, r3
 8004538:	f004 f997 	bl	800886a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	4413      	add	r3, r2
 8004544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004548:	461a      	mov	r2, r3
 800454a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800454e:	6093      	str	r3, [r2, #8]
}
 8004550:	e34d      	b.n	8004bee <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	4413      	add	r3, r2
 800455a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b01      	cmp	r3, #1
 8004566:	d150      	bne.n	800460a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	212c      	movs	r1, #44	; 0x2c
 800456e:	fb01 f303 	mul.w	r3, r1, r3
 8004572:	4413      	add	r3, r2
 8004574:	335c      	adds	r3, #92	; 0x5c
 8004576:	2200      	movs	r2, #0
 8004578:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	4413      	add	r3, r2
 8004582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458c:	2b40      	cmp	r3, #64	; 0x40
 800458e:	d111      	bne.n	80045b4 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	212c      	movs	r1, #44	; 0x2c
 8004596:	fb01 f303 	mul.w	r3, r1, r3
 800459a:	4413      	add	r3, r2
 800459c:	333d      	adds	r3, #61	; 0x3d
 800459e:	2201      	movs	r2, #1
 80045a0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ae:	461a      	mov	r2, r3
 80045b0:	2340      	movs	r3, #64	; 0x40
 80045b2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	0151      	lsls	r1, r2, #5
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	440a      	add	r2, r1
 80045ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045ce:	f043 0302 	orr.w	r3, r3, #2
 80045d2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	4611      	mov	r1, r2
 80045de:	4618      	mov	r0, r3
 80045e0:	f004 f943 	bl	800886a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f0:	461a      	mov	r2, r3
 80045f2:	2301      	movs	r3, #1
 80045f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	212c      	movs	r1, #44	; 0x2c
 80045fc:	fb01 f303 	mul.w	r3, r1, r3
 8004600:	4413      	add	r3, r2
 8004602:	3361      	adds	r3, #97	; 0x61
 8004604:	2201      	movs	r2, #1
 8004606:	701a      	strb	r2, [r3, #0]
}
 8004608:	e2f1      	b.n	8004bee <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	4413      	add	r3, r2
 8004612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461c:	2b40      	cmp	r3, #64	; 0x40
 800461e:	d13c      	bne.n	800469a <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	212c      	movs	r1, #44	; 0x2c
 8004626:	fb01 f303 	mul.w	r3, r1, r3
 800462a:	4413      	add	r3, r2
 800462c:	3361      	adds	r3, #97	; 0x61
 800462e:	2204      	movs	r2, #4
 8004630:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	212c      	movs	r1, #44	; 0x2c
 8004638:	fb01 f303 	mul.w	r3, r1, r3
 800463c:	4413      	add	r3, r2
 800463e:	333d      	adds	r3, #61	; 0x3d
 8004640:	2201      	movs	r2, #1
 8004642:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	212c      	movs	r1, #44	; 0x2c
 800464a:	fb01 f303 	mul.w	r3, r1, r3
 800464e:	4413      	add	r3, r2
 8004650:	335c      	adds	r3, #92	; 0x5c
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	4413      	add	r3, r2
 800465e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	0151      	lsls	r1, r2, #5
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	440a      	add	r2, r1
 800466c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004670:	f043 0302 	orr.w	r3, r3, #2
 8004674:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	4611      	mov	r1, r2
 8004680:	4618      	mov	r0, r3
 8004682:	f004 f8f2 	bl	800886a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	4413      	add	r3, r2
 800468e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004692:	461a      	mov	r2, r3
 8004694:	2340      	movs	r3, #64	; 0x40
 8004696:	6093      	str	r3, [r2, #8]
}
 8004698:	e2a9      	b.n	8004bee <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d12a      	bne.n	8004706 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046bc:	461a      	mov	r2, r3
 80046be:	2308      	movs	r3, #8
 80046c0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	0151      	lsls	r1, r2, #5
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	440a      	add	r2, r1
 80046d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046dc:	f043 0302 	orr.w	r3, r3, #2
 80046e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	4611      	mov	r1, r2
 80046ec:	4618      	mov	r0, r3
 80046ee:	f004 f8bc 	bl	800886a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	212c      	movs	r1, #44	; 0x2c
 80046f8:	fb01 f303 	mul.w	r3, r1, r3
 80046fc:	4413      	add	r3, r2
 80046fe:	3361      	adds	r3, #97	; 0x61
 8004700:	2205      	movs	r2, #5
 8004702:	701a      	strb	r2, [r3, #0]
}
 8004704:	e273      	b.n	8004bee <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	4413      	add	r3, r2
 800470e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f003 0310 	and.w	r3, r3, #16
 8004718:	2b10      	cmp	r3, #16
 800471a:	d150      	bne.n	80047be <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	212c      	movs	r1, #44	; 0x2c
 8004722:	fb01 f303 	mul.w	r3, r1, r3
 8004726:	4413      	add	r3, r2
 8004728:	335c      	adds	r3, #92	; 0x5c
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	212c      	movs	r1, #44	; 0x2c
 8004734:	fb01 f303 	mul.w	r3, r1, r3
 8004738:	4413      	add	r3, r2
 800473a:	3361      	adds	r3, #97	; 0x61
 800473c:	2203      	movs	r2, #3
 800473e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	212c      	movs	r1, #44	; 0x2c
 8004746:	fb01 f303 	mul.w	r3, r1, r3
 800474a:	4413      	add	r3, r2
 800474c:	333d      	adds	r3, #61	; 0x3d
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d112      	bne.n	800477a <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	212c      	movs	r1, #44	; 0x2c
 800475a:	fb01 f303 	mul.w	r3, r1, r3
 800475e:	4413      	add	r3, r2
 8004760:	333c      	adds	r3, #60	; 0x3c
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d108      	bne.n	800477a <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	212c      	movs	r1, #44	; 0x2c
 800476e:	fb01 f303 	mul.w	r3, r1, r3
 8004772:	4413      	add	r3, r2
 8004774:	333d      	adds	r3, #61	; 0x3d
 8004776:	2201      	movs	r2, #1
 8004778:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	4413      	add	r3, r2
 8004782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	0151      	lsls	r1, r2, #5
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	440a      	add	r2, r1
 8004790:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004794:	f043 0302 	orr.w	r3, r3, #2
 8004798:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	b2d2      	uxtb	r2, r2
 80047a2:	4611      	mov	r1, r2
 80047a4:	4618      	mov	r0, r3
 80047a6:	f004 f860 	bl	800886a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b6:	461a      	mov	r2, r3
 80047b8:	2310      	movs	r3, #16
 80047ba:	6093      	str	r3, [r2, #8]
}
 80047bc:	e217      	b.n	8004bee <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d0:	2b80      	cmp	r3, #128	; 0x80
 80047d2:	d174      	bne.n	80048be <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d121      	bne.n	8004820 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	212c      	movs	r1, #44	; 0x2c
 80047e2:	fb01 f303 	mul.w	r3, r1, r3
 80047e6:	4413      	add	r3, r2
 80047e8:	3361      	adds	r3, #97	; 0x61
 80047ea:	2206      	movs	r2, #6
 80047ec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	0151      	lsls	r1, r2, #5
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	440a      	add	r2, r1
 8004804:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004808:	f043 0302 	orr.w	r3, r3, #2
 800480c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	b2d2      	uxtb	r2, r2
 8004816:	4611      	mov	r1, r2
 8004818:	4618      	mov	r0, r3
 800481a:	f004 f826 	bl	800886a <USB_HC_Halt>
 800481e:	e044      	b.n	80048aa <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	212c      	movs	r1, #44	; 0x2c
 8004826:	fb01 f303 	mul.w	r3, r1, r3
 800482a:	4413      	add	r3, r2
 800482c:	335c      	adds	r3, #92	; 0x5c
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	6879      	ldr	r1, [r7, #4]
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	202c      	movs	r0, #44	; 0x2c
 8004838:	fb00 f303 	mul.w	r3, r0, r3
 800483c:	440b      	add	r3, r1
 800483e:	335c      	adds	r3, #92	; 0x5c
 8004840:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	212c      	movs	r1, #44	; 0x2c
 8004848:	fb01 f303 	mul.w	r3, r1, r3
 800484c:	4413      	add	r3, r2
 800484e:	335c      	adds	r3, #92	; 0x5c
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b02      	cmp	r3, #2
 8004854:	d920      	bls.n	8004898 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	212c      	movs	r1, #44	; 0x2c
 800485c:	fb01 f303 	mul.w	r3, r1, r3
 8004860:	4413      	add	r3, r2
 8004862:	335c      	adds	r3, #92	; 0x5c
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	212c      	movs	r1, #44	; 0x2c
 800486e:	fb01 f303 	mul.w	r3, r1, r3
 8004872:	4413      	add	r3, r2
 8004874:	3360      	adds	r3, #96	; 0x60
 8004876:	2204      	movs	r2, #4
 8004878:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	b2d9      	uxtb	r1, r3
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	202c      	movs	r0, #44	; 0x2c
 8004884:	fb00 f303 	mul.w	r3, r0, r3
 8004888:	4413      	add	r3, r2
 800488a:	3360      	adds	r3, #96	; 0x60
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	461a      	mov	r2, r3
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f006 f9a7 	bl	800abe4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004896:	e008      	b.n	80048aa <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	212c      	movs	r1, #44	; 0x2c
 800489e:	fb01 f303 	mul.w	r3, r1, r3
 80048a2:	4413      	add	r3, r2
 80048a4:	3360      	adds	r3, #96	; 0x60
 80048a6:	2202      	movs	r2, #2
 80048a8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b6:	461a      	mov	r2, r3
 80048b8:	2380      	movs	r3, #128	; 0x80
 80048ba:	6093      	str	r3, [r2, #8]
}
 80048bc:	e197      	b.n	8004bee <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d4:	d134      	bne.n	8004940 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	0151      	lsls	r1, r2, #5
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	440a      	add	r2, r1
 80048ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048f0:	f043 0302 	orr.w	r3, r3, #2
 80048f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	4611      	mov	r1, r2
 8004900:	4618      	mov	r0, r3
 8004902:	f003 ffb2 	bl	800886a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	4413      	add	r3, r2
 800490e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004912:	461a      	mov	r2, r3
 8004914:	2310      	movs	r3, #16
 8004916:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	4413      	add	r3, r2
 8004920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004924:	461a      	mov	r2, r3
 8004926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800492a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	212c      	movs	r1, #44	; 0x2c
 8004932:	fb01 f303 	mul.w	r3, r1, r3
 8004936:	4413      	add	r3, r2
 8004938:	3361      	adds	r3, #97	; 0x61
 800493a:	2208      	movs	r2, #8
 800493c:	701a      	strb	r2, [r3, #0]
}
 800493e:	e156      	b.n	8004bee <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	4413      	add	r3, r2
 8004948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b02      	cmp	r3, #2
 8004954:	f040 814b 	bne.w	8004bee <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	4413      	add	r3, r2
 8004960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	0151      	lsls	r1, r2, #5
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	440a      	add	r2, r1
 800496e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004972:	f023 0302 	bic.w	r3, r3, #2
 8004976:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	212c      	movs	r1, #44	; 0x2c
 800497e:	fb01 f303 	mul.w	r3, r1, r3
 8004982:	4413      	add	r3, r2
 8004984:	3361      	adds	r3, #97	; 0x61
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d179      	bne.n	8004a80 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	212c      	movs	r1, #44	; 0x2c
 8004992:	fb01 f303 	mul.w	r3, r1, r3
 8004996:	4413      	add	r3, r2
 8004998:	3360      	adds	r3, #96	; 0x60
 800499a:	2201      	movs	r2, #1
 800499c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	212c      	movs	r1, #44	; 0x2c
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	4413      	add	r3, r2
 80049aa:	333f      	adds	r3, #63	; 0x3f
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d00a      	beq.n	80049c8 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	212c      	movs	r1, #44	; 0x2c
 80049b8:	fb01 f303 	mul.w	r3, r1, r3
 80049bc:	4413      	add	r3, r2
 80049be:	333f      	adds	r3, #63	; 0x3f
 80049c0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	f040 80fc 	bne.w	8004bc0 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d142      	bne.n	8004a56 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	212c      	movs	r1, #44	; 0x2c
 80049d6:	fb01 f303 	mul.w	r3, r1, r3
 80049da:	4413      	add	r3, r2
 80049dc:	334c      	adds	r3, #76	; 0x4c
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 80ed 	beq.w	8004bc0 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	212c      	movs	r1, #44	; 0x2c
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	4413      	add	r3, r2
 80049f2:	334c      	adds	r3, #76	; 0x4c
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6879      	ldr	r1, [r7, #4]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	202c      	movs	r0, #44	; 0x2c
 80049fc:	fb00 f202 	mul.w	r2, r0, r2
 8004a00:	440a      	add	r2, r1
 8004a02:	3240      	adds	r2, #64	; 0x40
 8004a04:	8812      	ldrh	r2, [r2, #0]
 8004a06:	4413      	add	r3, r2
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	6879      	ldr	r1, [r7, #4]
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	202c      	movs	r0, #44	; 0x2c
 8004a10:	fb00 f202 	mul.w	r2, r0, r2
 8004a14:	440a      	add	r2, r1
 8004a16:	3240      	adds	r2, #64	; 0x40
 8004a18:	8812      	ldrh	r2, [r2, #0]
 8004a1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 80ca 	beq.w	8004bc0 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	212c      	movs	r1, #44	; 0x2c
 8004a32:	fb01 f303 	mul.w	r3, r1, r3
 8004a36:	4413      	add	r3, r2
 8004a38:	3355      	adds	r3, #85	; 0x55
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	f083 0301 	eor.w	r3, r3, #1
 8004a40:	b2d8      	uxtb	r0, r3
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	212c      	movs	r1, #44	; 0x2c
 8004a48:	fb01 f303 	mul.w	r3, r1, r3
 8004a4c:	4413      	add	r3, r2
 8004a4e:	3355      	adds	r3, #85	; 0x55
 8004a50:	4602      	mov	r2, r0
 8004a52:	701a      	strb	r2, [r3, #0]
 8004a54:	e0b4      	b.n	8004bc0 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	212c      	movs	r1, #44	; 0x2c
 8004a5c:	fb01 f303 	mul.w	r3, r1, r3
 8004a60:	4413      	add	r3, r2
 8004a62:	3355      	adds	r3, #85	; 0x55
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	f083 0301 	eor.w	r3, r3, #1
 8004a6a:	b2d8      	uxtb	r0, r3
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	212c      	movs	r1, #44	; 0x2c
 8004a72:	fb01 f303 	mul.w	r3, r1, r3
 8004a76:	4413      	add	r3, r2
 8004a78:	3355      	adds	r3, #85	; 0x55
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	701a      	strb	r2, [r3, #0]
 8004a7e:	e09f      	b.n	8004bc0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	212c      	movs	r1, #44	; 0x2c
 8004a86:	fb01 f303 	mul.w	r3, r1, r3
 8004a8a:	4413      	add	r3, r2
 8004a8c:	3361      	adds	r3, #97	; 0x61
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	2b03      	cmp	r3, #3
 8004a92:	d109      	bne.n	8004aa8 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	212c      	movs	r1, #44	; 0x2c
 8004a9a:	fb01 f303 	mul.w	r3, r1, r3
 8004a9e:	4413      	add	r3, r2
 8004aa0:	3360      	adds	r3, #96	; 0x60
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	701a      	strb	r2, [r3, #0]
 8004aa6:	e08b      	b.n	8004bc0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	212c      	movs	r1, #44	; 0x2c
 8004aae:	fb01 f303 	mul.w	r3, r1, r3
 8004ab2:	4413      	add	r3, r2
 8004ab4:	3361      	adds	r3, #97	; 0x61
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	d109      	bne.n	8004ad0 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	212c      	movs	r1, #44	; 0x2c
 8004ac2:	fb01 f303 	mul.w	r3, r1, r3
 8004ac6:	4413      	add	r3, r2
 8004ac8:	3360      	adds	r3, #96	; 0x60
 8004aca:	2202      	movs	r2, #2
 8004acc:	701a      	strb	r2, [r3, #0]
 8004ace:	e077      	b.n	8004bc0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	212c      	movs	r1, #44	; 0x2c
 8004ad6:	fb01 f303 	mul.w	r3, r1, r3
 8004ada:	4413      	add	r3, r2
 8004adc:	3361      	adds	r3, #97	; 0x61
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	2b05      	cmp	r3, #5
 8004ae2:	d109      	bne.n	8004af8 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	212c      	movs	r1, #44	; 0x2c
 8004aea:	fb01 f303 	mul.w	r3, r1, r3
 8004aee:	4413      	add	r3, r2
 8004af0:	3360      	adds	r3, #96	; 0x60
 8004af2:	2205      	movs	r2, #5
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	e063      	b.n	8004bc0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	212c      	movs	r1, #44	; 0x2c
 8004afe:	fb01 f303 	mul.w	r3, r1, r3
 8004b02:	4413      	add	r3, r2
 8004b04:	3361      	adds	r3, #97	; 0x61
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	2b06      	cmp	r3, #6
 8004b0a:	d009      	beq.n	8004b20 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	212c      	movs	r1, #44	; 0x2c
 8004b12:	fb01 f303 	mul.w	r3, r1, r3
 8004b16:	4413      	add	r3, r2
 8004b18:	3361      	adds	r3, #97	; 0x61
 8004b1a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d14f      	bne.n	8004bc0 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	212c      	movs	r1, #44	; 0x2c
 8004b26:	fb01 f303 	mul.w	r3, r1, r3
 8004b2a:	4413      	add	r3, r2
 8004b2c:	335c      	adds	r3, #92	; 0x5c
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	202c      	movs	r0, #44	; 0x2c
 8004b38:	fb00 f303 	mul.w	r3, r0, r3
 8004b3c:	440b      	add	r3, r1
 8004b3e:	335c      	adds	r3, #92	; 0x5c
 8004b40:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	212c      	movs	r1, #44	; 0x2c
 8004b48:	fb01 f303 	mul.w	r3, r1, r3
 8004b4c:	4413      	add	r3, r2
 8004b4e:	335c      	adds	r3, #92	; 0x5c
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d912      	bls.n	8004b7c <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	212c      	movs	r1, #44	; 0x2c
 8004b5c:	fb01 f303 	mul.w	r3, r1, r3
 8004b60:	4413      	add	r3, r2
 8004b62:	335c      	adds	r3, #92	; 0x5c
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	212c      	movs	r1, #44	; 0x2c
 8004b6e:	fb01 f303 	mul.w	r3, r1, r3
 8004b72:	4413      	add	r3, r2
 8004b74:	3360      	adds	r3, #96	; 0x60
 8004b76:	2204      	movs	r2, #4
 8004b78:	701a      	strb	r2, [r3, #0]
 8004b7a:	e021      	b.n	8004bc0 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	212c      	movs	r1, #44	; 0x2c
 8004b82:	fb01 f303 	mul.w	r3, r1, r3
 8004b86:	4413      	add	r3, r2
 8004b88:	3360      	adds	r3, #96	; 0x60
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ba4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004bac:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bba:	461a      	mov	r2, r3
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bcc:	461a      	mov	r2, r3
 8004bce:	2302      	movs	r3, #2
 8004bd0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	b2d9      	uxtb	r1, r3
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	202c      	movs	r0, #44	; 0x2c
 8004bdc:	fb00 f303 	mul.w	r3, r0, r3
 8004be0:	4413      	add	r3, r2
 8004be2:	3360      	adds	r3, #96	; 0x60
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	461a      	mov	r2, r3
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f005 fffb 	bl	800abe4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004bee:	bf00      	nop
 8004bf0:	3720      	adds	r7, #32
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b08a      	sub	sp, #40	; 0x28
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	0c5b      	lsrs	r3, r3, #17
 8004c1c:	f003 030f 	and.w	r3, r3, #15
 8004c20:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	091b      	lsrs	r3, r3, #4
 8004c26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c2a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d004      	beq.n	8004c3c <HCD_RXQLVL_IRQHandler+0x46>
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2b05      	cmp	r3, #5
 8004c36:	f000 80a9 	beq.w	8004d8c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004c3a:	e0aa      	b.n	8004d92 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 80a6 	beq.w	8004d90 <HCD_RXQLVL_IRQHandler+0x19a>
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	212c      	movs	r1, #44	; 0x2c
 8004c4a:	fb01 f303 	mul.w	r3, r1, r3
 8004c4e:	4413      	add	r3, r2
 8004c50:	3344      	adds	r3, #68	; 0x44
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 809b 	beq.w	8004d90 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	212c      	movs	r1, #44	; 0x2c
 8004c60:	fb01 f303 	mul.w	r3, r1, r3
 8004c64:	4413      	add	r3, r2
 8004c66:	3350      	adds	r3, #80	; 0x50
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	441a      	add	r2, r3
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	202c      	movs	r0, #44	; 0x2c
 8004c74:	fb00 f303 	mul.w	r3, r0, r3
 8004c78:	440b      	add	r3, r1
 8004c7a:	334c      	adds	r3, #76	; 0x4c
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d87a      	bhi.n	8004d78 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6818      	ldr	r0, [r3, #0]
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	212c      	movs	r1, #44	; 0x2c
 8004c8c:	fb01 f303 	mul.w	r3, r1, r3
 8004c90:	4413      	add	r3, r2
 8004c92:	3344      	adds	r3, #68	; 0x44
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	b292      	uxth	r2, r2
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	f003 f983 	bl	8007fa6 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	212c      	movs	r1, #44	; 0x2c
 8004ca6:	fb01 f303 	mul.w	r3, r1, r3
 8004caa:	4413      	add	r3, r2
 8004cac:	3344      	adds	r3, #68	; 0x44
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	441a      	add	r2, r3
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	202c      	movs	r0, #44	; 0x2c
 8004cba:	fb00 f303 	mul.w	r3, r0, r3
 8004cbe:	440b      	add	r3, r1
 8004cc0:	3344      	adds	r3, #68	; 0x44
 8004cc2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	212c      	movs	r1, #44	; 0x2c
 8004cca:	fb01 f303 	mul.w	r3, r1, r3
 8004cce:	4413      	add	r3, r2
 8004cd0:	3350      	adds	r3, #80	; 0x50
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	441a      	add	r2, r3
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	202c      	movs	r0, #44	; 0x2c
 8004cde:	fb00 f303 	mul.w	r3, r0, r3
 8004ce2:	440b      	add	r3, r1
 8004ce4:	3350      	adds	r3, #80	; 0x50
 8004ce6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	0cdb      	lsrs	r3, r3, #19
 8004cf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cfc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	212c      	movs	r1, #44	; 0x2c
 8004d04:	fb01 f303 	mul.w	r3, r1, r3
 8004d08:	4413      	add	r3, r2
 8004d0a:	3340      	adds	r3, #64	; 0x40
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d13c      	bne.n	8004d90 <HCD_RXQLVL_IRQHandler+0x19a>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d039      	beq.n	8004d90 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d32:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d3a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d48:	461a      	mov	r2, r3
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	212c      	movs	r1, #44	; 0x2c
 8004d54:	fb01 f303 	mul.w	r3, r1, r3
 8004d58:	4413      	add	r3, r2
 8004d5a:	3354      	adds	r3, #84	; 0x54
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	f083 0301 	eor.w	r3, r3, #1
 8004d62:	b2d8      	uxtb	r0, r3
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	212c      	movs	r1, #44	; 0x2c
 8004d6a:	fb01 f303 	mul.w	r3, r1, r3
 8004d6e:	4413      	add	r3, r2
 8004d70:	3354      	adds	r3, #84	; 0x54
 8004d72:	4602      	mov	r2, r0
 8004d74:	701a      	strb	r2, [r3, #0]
      break;
 8004d76:	e00b      	b.n	8004d90 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	212c      	movs	r1, #44	; 0x2c
 8004d7e:	fb01 f303 	mul.w	r3, r1, r3
 8004d82:	4413      	add	r3, r2
 8004d84:	3360      	adds	r3, #96	; 0x60
 8004d86:	2204      	movs	r2, #4
 8004d88:	701a      	strb	r2, [r3, #0]
      break;
 8004d8a:	e001      	b.n	8004d90 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004d8c:	bf00      	nop
 8004d8e:	e000      	b.n	8004d92 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004d90:	bf00      	nop
  }
}
 8004d92:	bf00      	nop
 8004d94:	3728      	adds	r7, #40	; 0x28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b086      	sub	sp, #24
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004dc6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d10b      	bne.n	8004dea <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d102      	bne.n	8004de2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f005 fee5 	bl	800abac <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	f043 0302 	orr.w	r3, r3, #2
 8004de8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f003 0308 	and.w	r3, r3, #8
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d132      	bne.n	8004e5a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f043 0308 	orr.w	r3, r3, #8
 8004dfa:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b04      	cmp	r3, #4
 8004e04:	d126      	bne.n	8004e54 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d113      	bne.n	8004e36 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004e14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e18:	d106      	bne.n	8004e28 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2102      	movs	r1, #2
 8004e20:	4618      	mov	r0, r3
 8004e22:	f003 f9fb 	bl	800821c <USB_InitFSLSPClkSel>
 8004e26:	e011      	b.n	8004e4c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f003 f9f4 	bl	800821c <USB_InitFSLSPClkSel>
 8004e34:	e00a      	b.n	8004e4c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d106      	bne.n	8004e4c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e44:	461a      	mov	r2, r3
 8004e46:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004e4a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f005 fed7 	bl	800ac00 <HAL_HCD_PortEnabled_Callback>
 8004e52:	e002      	b.n	8004e5a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f005 fee1 	bl	800ac1c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f003 0320 	and.w	r3, r3, #32
 8004e60:	2b20      	cmp	r3, #32
 8004e62:	d103      	bne.n	8004e6c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f043 0320 	orr.w	r3, r3, #32
 8004e6a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e72:	461a      	mov	r2, r3
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	6013      	str	r3, [r2, #0]
}
 8004e78:	bf00      	nop
 8004e7a:	3718      	adds	r7, #24
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e12b      	b.n	80050ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d106      	bne.n	8004eac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7fd fbdc 	bl	8002664 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2224      	movs	r2, #36	; 0x24
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0201 	bic.w	r2, r2, #1
 8004ec2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ed2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ee2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ee4:	f001 f9fc 	bl	80062e0 <HAL_RCC_GetPCLK1Freq>
 8004ee8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	4a81      	ldr	r2, [pc, #516]	; (80050f4 <HAL_I2C_Init+0x274>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d807      	bhi.n	8004f04 <HAL_I2C_Init+0x84>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4a80      	ldr	r2, [pc, #512]	; (80050f8 <HAL_I2C_Init+0x278>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	bf94      	ite	ls
 8004efc:	2301      	movls	r3, #1
 8004efe:	2300      	movhi	r3, #0
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	e006      	b.n	8004f12 <HAL_I2C_Init+0x92>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4a7d      	ldr	r2, [pc, #500]	; (80050fc <HAL_I2C_Init+0x27c>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	bf94      	ite	ls
 8004f0c:	2301      	movls	r3, #1
 8004f0e:	2300      	movhi	r3, #0
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e0e7      	b.n	80050ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	4a78      	ldr	r2, [pc, #480]	; (8005100 <HAL_I2C_Init+0x280>)
 8004f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f22:	0c9b      	lsrs	r3, r3, #18
 8004f24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	4a6a      	ldr	r2, [pc, #424]	; (80050f4 <HAL_I2C_Init+0x274>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d802      	bhi.n	8004f54 <HAL_I2C_Init+0xd4>
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	3301      	adds	r3, #1
 8004f52:	e009      	b.n	8004f68 <HAL_I2C_Init+0xe8>
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f5a:	fb02 f303 	mul.w	r3, r2, r3
 8004f5e:	4a69      	ldr	r2, [pc, #420]	; (8005104 <HAL_I2C_Init+0x284>)
 8004f60:	fba2 2303 	umull	r2, r3, r2, r3
 8004f64:	099b      	lsrs	r3, r3, #6
 8004f66:	3301      	adds	r3, #1
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6812      	ldr	r2, [r2, #0]
 8004f6c:	430b      	orrs	r3, r1
 8004f6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	495c      	ldr	r1, [pc, #368]	; (80050f4 <HAL_I2C_Init+0x274>)
 8004f84:	428b      	cmp	r3, r1
 8004f86:	d819      	bhi.n	8004fbc <HAL_I2C_Init+0x13c>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	1e59      	subs	r1, r3, #1
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f96:	1c59      	adds	r1, r3, #1
 8004f98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f9c:	400b      	ands	r3, r1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <HAL_I2C_Init+0x138>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	1e59      	subs	r1, r3, #1
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fb6:	e051      	b.n	800505c <HAL_I2C_Init+0x1dc>
 8004fb8:	2304      	movs	r3, #4
 8004fba:	e04f      	b.n	800505c <HAL_I2C_Init+0x1dc>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d111      	bne.n	8004fe8 <HAL_I2C_Init+0x168>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	1e58      	subs	r0, r3, #1
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6859      	ldr	r1, [r3, #4]
 8004fcc:	460b      	mov	r3, r1
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	440b      	add	r3, r1
 8004fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	bf0c      	ite	eq
 8004fe0:	2301      	moveq	r3, #1
 8004fe2:	2300      	movne	r3, #0
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	e012      	b.n	800500e <HAL_I2C_Init+0x18e>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	1e58      	subs	r0, r3, #1
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6859      	ldr	r1, [r3, #4]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	440b      	add	r3, r1
 8004ff6:	0099      	lsls	r1, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ffe:	3301      	adds	r3, #1
 8005000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005004:	2b00      	cmp	r3, #0
 8005006:	bf0c      	ite	eq
 8005008:	2301      	moveq	r3, #1
 800500a:	2300      	movne	r3, #0
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <HAL_I2C_Init+0x196>
 8005012:	2301      	movs	r3, #1
 8005014:	e022      	b.n	800505c <HAL_I2C_Init+0x1dc>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10e      	bne.n	800503c <HAL_I2C_Init+0x1bc>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	1e58      	subs	r0, r3, #1
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6859      	ldr	r1, [r3, #4]
 8005026:	460b      	mov	r3, r1
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	440b      	add	r3, r1
 800502c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005030:	3301      	adds	r3, #1
 8005032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800503a:	e00f      	b.n	800505c <HAL_I2C_Init+0x1dc>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	1e58      	subs	r0, r3, #1
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6859      	ldr	r1, [r3, #4]
 8005044:	460b      	mov	r3, r1
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	0099      	lsls	r1, r3, #2
 800504c:	440b      	add	r3, r1
 800504e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005052:	3301      	adds	r3, #1
 8005054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005058:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800505c:	6879      	ldr	r1, [r7, #4]
 800505e:	6809      	ldr	r1, [r1, #0]
 8005060:	4313      	orrs	r3, r2
 8005062:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	69da      	ldr	r2, [r3, #28]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	430a      	orrs	r2, r1
 800507e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800508a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	6911      	ldr	r1, [r2, #16]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	68d2      	ldr	r2, [r2, #12]
 8005096:	4311      	orrs	r1, r2
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6812      	ldr	r2, [r2, #0]
 800509c:	430b      	orrs	r3, r1
 800509e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	695a      	ldr	r2, [r3, #20]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f042 0201 	orr.w	r2, r2, #1
 80050ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2220      	movs	r2, #32
 80050d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	000186a0 	.word	0x000186a0
 80050f8:	001e847f 	.word	0x001e847f
 80050fc:	003d08ff 	.word	0x003d08ff
 8005100:	431bde83 	.word	0x431bde83
 8005104:	10624dd3 	.word	0x10624dd3

08005108 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e128      	b.n	800536c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d109      	bne.n	800513a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a90      	ldr	r2, [pc, #576]	; (8005374 <HAL_I2S_Init+0x26c>)
 8005132:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7fd faff 	bl	8002738 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2202      	movs	r2, #2
 800513e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	6812      	ldr	r2, [r2, #0]
 800514c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005150:	f023 030f 	bic.w	r3, r3, #15
 8005154:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2202      	movs	r2, #2
 800515c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	2b02      	cmp	r3, #2
 8005164:	d060      	beq.n	8005228 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d102      	bne.n	8005174 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800516e:	2310      	movs	r3, #16
 8005170:	617b      	str	r3, [r7, #20]
 8005172:	e001      	b.n	8005178 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005174:	2320      	movs	r3, #32
 8005176:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	2b20      	cmp	r3, #32
 800517e:	d802      	bhi.n	8005186 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005186:	2001      	movs	r0, #1
 8005188:	f001 f9a0 	bl	80064cc <HAL_RCCEx_GetPeriphCLKFreq>
 800518c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005196:	d125      	bne.n	80051e4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d010      	beq.n	80051c2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80051aa:	4613      	mov	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	461a      	mov	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051bc:	3305      	adds	r3, #5
 80051be:	613b      	str	r3, [r7, #16]
 80051c0:	e01f      	b.n	8005202 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80051cc:	4613      	mov	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	461a      	mov	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	fbb2 f3f3 	udiv	r3, r2, r3
 80051de:	3305      	adds	r3, #5
 80051e0:	613b      	str	r3, [r7, #16]
 80051e2:	e00e      	b.n	8005202 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80051ec:	4613      	mov	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	461a      	mov	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fe:	3305      	adds	r3, #5
 8005200:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	4a5c      	ldr	r2, [pc, #368]	; (8005378 <HAL_I2S_Init+0x270>)
 8005206:	fba2 2303 	umull	r2, r3, r2, r3
 800520a:	08db      	lsrs	r3, r3, #3
 800520c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	085b      	lsrs	r3, r3, #1
 800521e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	021b      	lsls	r3, r3, #8
 8005224:	61bb      	str	r3, [r7, #24]
 8005226:	e003      	b.n	8005230 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005228:	2302      	movs	r3, #2
 800522a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d902      	bls.n	800523c <HAL_I2S_Init+0x134>
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	2bff      	cmp	r3, #255	; 0xff
 800523a:	d907      	bls.n	800524c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005240:	f043 0210 	orr.w	r2, r3, #16
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e08f      	b.n	800536c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691a      	ldr	r2, [r3, #16]
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	ea42 0103 	orr.w	r1, r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	430a      	orrs	r2, r1
 800525e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800526a:	f023 030f 	bic.w	r3, r3, #15
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6851      	ldr	r1, [r2, #4]
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	6892      	ldr	r2, [r2, #8]
 8005276:	4311      	orrs	r1, r2
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	68d2      	ldr	r2, [r2, #12]
 800527c:	4311      	orrs	r1, r2
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	6992      	ldr	r2, [r2, #24]
 8005282:	430a      	orrs	r2, r1
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800528e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d161      	bne.n	800535c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a38      	ldr	r2, [pc, #224]	; (800537c <HAL_I2S_Init+0x274>)
 800529c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a37      	ldr	r2, [pc, #220]	; (8005380 <HAL_I2S_Init+0x278>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d101      	bne.n	80052ac <HAL_I2S_Init+0x1a4>
 80052a8:	4b36      	ldr	r3, [pc, #216]	; (8005384 <HAL_I2S_Init+0x27c>)
 80052aa:	e001      	b.n	80052b0 <HAL_I2S_Init+0x1a8>
 80052ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6812      	ldr	r2, [r2, #0]
 80052b6:	4932      	ldr	r1, [pc, #200]	; (8005380 <HAL_I2S_Init+0x278>)
 80052b8:	428a      	cmp	r2, r1
 80052ba:	d101      	bne.n	80052c0 <HAL_I2S_Init+0x1b8>
 80052bc:	4a31      	ldr	r2, [pc, #196]	; (8005384 <HAL_I2S_Init+0x27c>)
 80052be:	e001      	b.n	80052c4 <HAL_I2S_Init+0x1bc>
 80052c0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80052c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80052c8:	f023 030f 	bic.w	r3, r3, #15
 80052cc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a2b      	ldr	r2, [pc, #172]	; (8005380 <HAL_I2S_Init+0x278>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d101      	bne.n	80052dc <HAL_I2S_Init+0x1d4>
 80052d8:	4b2a      	ldr	r3, [pc, #168]	; (8005384 <HAL_I2S_Init+0x27c>)
 80052da:	e001      	b.n	80052e0 <HAL_I2S_Init+0x1d8>
 80052dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052e0:	2202      	movs	r2, #2
 80052e2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a25      	ldr	r2, [pc, #148]	; (8005380 <HAL_I2S_Init+0x278>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d101      	bne.n	80052f2 <HAL_I2S_Init+0x1ea>
 80052ee:	4b25      	ldr	r3, [pc, #148]	; (8005384 <HAL_I2S_Init+0x27c>)
 80052f0:	e001      	b.n	80052f6 <HAL_I2S_Init+0x1ee>
 80052f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052f6:	69db      	ldr	r3, [r3, #28]
 80052f8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005302:	d003      	beq.n	800530c <HAL_I2S_Init+0x204>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d103      	bne.n	8005314 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800530c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005310:	613b      	str	r3, [r7, #16]
 8005312:	e001      	b.n	8005318 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005314:	2300      	movs	r3, #0
 8005316:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005322:	4313      	orrs	r3, r2
 8005324:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800532c:	4313      	orrs	r3, r2
 800532e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005336:	4313      	orrs	r3, r2
 8005338:	b29a      	uxth	r2, r3
 800533a:	897b      	ldrh	r3, [r7, #10]
 800533c:	4313      	orrs	r3, r2
 800533e:	b29b      	uxth	r3, r3
 8005340:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005344:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a0d      	ldr	r2, [pc, #52]	; (8005380 <HAL_I2S_Init+0x278>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d101      	bne.n	8005354 <HAL_I2S_Init+0x24c>
 8005350:	4b0c      	ldr	r3, [pc, #48]	; (8005384 <HAL_I2S_Init+0x27c>)
 8005352:	e001      	b.n	8005358 <HAL_I2S_Init+0x250>
 8005354:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005358:	897a      	ldrh	r2, [r7, #10]
 800535a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3720      	adds	r7, #32
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	0800547f 	.word	0x0800547f
 8005378:	cccccccd 	.word	0xcccccccd
 800537c:	08005595 	.word	0x08005595
 8005380:	40003800 	.word	0x40003800
 8005384:	40003400 	.word	0x40003400

08005388 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	881a      	ldrh	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	1c9a      	adds	r2, r3, #2
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	3b01      	subs	r3, #1
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10e      	bne.n	8005418 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005408:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f7ff ffb8 	bl	8005388 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005418:	bf00      	nop
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68da      	ldr	r2, [r3, #12]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005432:	b292      	uxth	r2, r2
 8005434:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543a:	1c9a      	adds	r2, r3, #2
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005444:	b29b      	uxth	r3, r3
 8005446:	3b01      	subs	r3, #1
 8005448:	b29a      	uxth	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005452:	b29b      	uxth	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10e      	bne.n	8005476 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005466:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7ff ff93 	bl	800539c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005476:	bf00      	nop
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b086      	sub	sp, #24
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b04      	cmp	r3, #4
 8005498:	d13a      	bne.n	8005510 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d109      	bne.n	80054b8 <I2S_IRQHandler+0x3a>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ae:	2b40      	cmp	r3, #64	; 0x40
 80054b0:	d102      	bne.n	80054b8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7ff ffb4 	bl	8005420 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054be:	2b40      	cmp	r3, #64	; 0x40
 80054c0:	d126      	bne.n	8005510 <I2S_IRQHandler+0x92>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f003 0320 	and.w	r3, r3, #32
 80054cc:	2b20      	cmp	r3, #32
 80054ce:	d11f      	bne.n	8005510 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80054de:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80054e0:	2300      	movs	r3, #0
 80054e2:	613b      	str	r3, [r7, #16]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	613b      	str	r3, [r7, #16]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	613b      	str	r3, [r7, #16]
 80054f4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005502:	f043 0202 	orr.w	r2, r3, #2
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7ff ff50 	bl	80053b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b03      	cmp	r3, #3
 800551a:	d136      	bne.n	800558a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b02      	cmp	r3, #2
 8005524:	d109      	bne.n	800553a <I2S_IRQHandler+0xbc>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005530:	2b80      	cmp	r3, #128	; 0x80
 8005532:	d102      	bne.n	800553a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f7ff ff45 	bl	80053c4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b08      	cmp	r3, #8
 8005542:	d122      	bne.n	800558a <I2S_IRQHandler+0x10c>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b20      	cmp	r3, #32
 8005550:	d11b      	bne.n	800558a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005560:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005562:	2300      	movs	r3, #0
 8005564:	60fb      	str	r3, [r7, #12]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	60fb      	str	r3, [r7, #12]
 800556e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557c:	f043 0204 	orr.w	r2, r3, #4
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff ff13 	bl	80053b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800558a:	bf00      	nop
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
	...

08005594 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b088      	sub	sp, #32
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4aa2      	ldr	r2, [pc, #648]	; (8005834 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d101      	bne.n	80055b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80055ae:	4ba2      	ldr	r3, [pc, #648]	; (8005838 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80055b0:	e001      	b.n	80055b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80055b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a9b      	ldr	r2, [pc, #620]	; (8005834 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d101      	bne.n	80055d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80055cc:	4b9a      	ldr	r3, [pc, #616]	; (8005838 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80055ce:	e001      	b.n	80055d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80055d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e0:	d004      	beq.n	80055ec <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f040 8099 	bne.w	800571e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d107      	bne.n	8005606 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f925 	bl	8005850 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b01      	cmp	r3, #1
 800560e:	d107      	bne.n	8005620 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005616:	2b00      	cmp	r3, #0
 8005618:	d002      	beq.n	8005620 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f9c8 	bl	80059b0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005626:	2b40      	cmp	r3, #64	; 0x40
 8005628:	d13a      	bne.n	80056a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f003 0320 	and.w	r3, r3, #32
 8005630:	2b00      	cmp	r3, #0
 8005632:	d035      	beq.n	80056a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a7e      	ldr	r2, [pc, #504]	; (8005834 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d101      	bne.n	8005642 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800563e:	4b7e      	ldr	r3, [pc, #504]	; (8005838 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005640:	e001      	b.n	8005646 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005642:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4979      	ldr	r1, [pc, #484]	; (8005834 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800564e:	428b      	cmp	r3, r1
 8005650:	d101      	bne.n	8005656 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005652:	4b79      	ldr	r3, [pc, #484]	; (8005838 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005654:	e001      	b.n	800565a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005656:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800565a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800565e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800566e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005670:	2300      	movs	r3, #0
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005692:	f043 0202 	orr.w	r2, r3, #2
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7ff fe88 	bl	80053b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	2b08      	cmp	r3, #8
 80056a8:	f040 80be 	bne.w	8005828 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f003 0320 	and.w	r3, r3, #32
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 80b8 	beq.w	8005828 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056c6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a59      	ldr	r2, [pc, #356]	; (8005834 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d101      	bne.n	80056d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80056d2:	4b59      	ldr	r3, [pc, #356]	; (8005838 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80056d4:	e001      	b.n	80056da <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80056d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4954      	ldr	r1, [pc, #336]	; (8005834 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80056e2:	428b      	cmp	r3, r1
 80056e4:	d101      	bne.n	80056ea <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80056e6:	4b54      	ldr	r3, [pc, #336]	; (8005838 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80056e8:	e001      	b.n	80056ee <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80056ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80056f2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80056f4:	2300      	movs	r3, #0
 80056f6:	60bb      	str	r3, [r7, #8]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	60bb      	str	r3, [r7, #8]
 8005700:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800570e:	f043 0204 	orr.w	r2, r3, #4
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7ff fe4a 	bl	80053b0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800571c:	e084      	b.n	8005828 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b02      	cmp	r3, #2
 8005726:	d107      	bne.n	8005738 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f8be 	bl	80058b4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b01      	cmp	r3, #1
 8005740:	d107      	bne.n	8005752 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f8fd 	bl	800594c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005758:	2b40      	cmp	r3, #64	; 0x40
 800575a:	d12f      	bne.n	80057bc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f003 0320 	and.w	r3, r3, #32
 8005762:	2b00      	cmp	r3, #0
 8005764:	d02a      	beq.n	80057bc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005774:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a2e      	ldr	r2, [pc, #184]	; (8005834 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d101      	bne.n	8005784 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005780:	4b2d      	ldr	r3, [pc, #180]	; (8005838 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005782:	e001      	b.n	8005788 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005784:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4929      	ldr	r1, [pc, #164]	; (8005834 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005790:	428b      	cmp	r3, r1
 8005792:	d101      	bne.n	8005798 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005794:	4b28      	ldr	r3, [pc, #160]	; (8005838 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005796:	e001      	b.n	800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005798:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800579c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80057a0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ae:	f043 0202 	orr.w	r2, r3, #2
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7ff fdfa 	bl	80053b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	f003 0308 	and.w	r3, r3, #8
 80057c2:	2b08      	cmp	r3, #8
 80057c4:	d131      	bne.n	800582a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f003 0320 	and.w	r3, r3, #32
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d02c      	beq.n	800582a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a17      	ldr	r2, [pc, #92]	; (8005834 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d101      	bne.n	80057de <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80057da:	4b17      	ldr	r3, [pc, #92]	; (8005838 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80057dc:	e001      	b.n	80057e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80057de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4912      	ldr	r1, [pc, #72]	; (8005834 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80057ea:	428b      	cmp	r3, r1
 80057ec:	d101      	bne.n	80057f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80057ee:	4b12      	ldr	r3, [pc, #72]	; (8005838 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80057f0:	e001      	b.n	80057f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80057f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80057fa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800580a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005818:	f043 0204 	orr.w	r2, r3, #4
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7ff fdc5 	bl	80053b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005826:	e000      	b.n	800582a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005828:	bf00      	nop
}
 800582a:	bf00      	nop
 800582c:	3720      	adds	r7, #32
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	40003800 	.word	0x40003800
 8005838:	40003400 	.word	0x40003400

0800583c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	1c99      	adds	r1, r3, #2
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	6251      	str	r1, [r2, #36]	; 0x24
 8005862:	881a      	ldrh	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586e:	b29b      	uxth	r3, r3
 8005870:	3b01      	subs	r3, #1
 8005872:	b29a      	uxth	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587c:	b29b      	uxth	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d113      	bne.n	80058aa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005890:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005896:	b29b      	uxth	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d106      	bne.n	80058aa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7ff ffc9 	bl	800583c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80058aa:	bf00      	nop
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
	...

080058b4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	1c99      	adds	r1, r3, #2
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	6251      	str	r1, [r2, #36]	; 0x24
 80058c6:	8819      	ldrh	r1, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a1d      	ldr	r2, [pc, #116]	; (8005944 <I2SEx_TxISR_I2SExt+0x90>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d101      	bne.n	80058d6 <I2SEx_TxISR_I2SExt+0x22>
 80058d2:	4b1d      	ldr	r3, [pc, #116]	; (8005948 <I2SEx_TxISR_I2SExt+0x94>)
 80058d4:	e001      	b.n	80058da <I2SEx_TxISR_I2SExt+0x26>
 80058d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058da:	460a      	mov	r2, r1
 80058dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d121      	bne.n	800593a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a12      	ldr	r2, [pc, #72]	; (8005944 <I2SEx_TxISR_I2SExt+0x90>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d101      	bne.n	8005904 <I2SEx_TxISR_I2SExt+0x50>
 8005900:	4b11      	ldr	r3, [pc, #68]	; (8005948 <I2SEx_TxISR_I2SExt+0x94>)
 8005902:	e001      	b.n	8005908 <I2SEx_TxISR_I2SExt+0x54>
 8005904:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	490d      	ldr	r1, [pc, #52]	; (8005944 <I2SEx_TxISR_I2SExt+0x90>)
 8005910:	428b      	cmp	r3, r1
 8005912:	d101      	bne.n	8005918 <I2SEx_TxISR_I2SExt+0x64>
 8005914:	4b0c      	ldr	r3, [pc, #48]	; (8005948 <I2SEx_TxISR_I2SExt+0x94>)
 8005916:	e001      	b.n	800591c <I2SEx_TxISR_I2SExt+0x68>
 8005918:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800591c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005920:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005926:	b29b      	uxth	r3, r3
 8005928:	2b00      	cmp	r3, #0
 800592a:	d106      	bne.n	800593a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f7ff ff81 	bl	800583c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800593a:	bf00      	nop
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	40003800 	.word	0x40003800
 8005948:	40003400 	.word	0x40003400

0800594c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68d8      	ldr	r0, [r3, #12]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595e:	1c99      	adds	r1, r3, #2
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005964:	b282      	uxth	r2, r0
 8005966:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800596c:	b29b      	uxth	r3, r3
 800596e:	3b01      	subs	r3, #1
 8005970:	b29a      	uxth	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800597a:	b29b      	uxth	r3, r3
 800597c:	2b00      	cmp	r3, #0
 800597e:	d113      	bne.n	80059a8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800598e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d106      	bne.n	80059a8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7ff ff4a 	bl	800583c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80059a8:	bf00      	nop
 80059aa:	3708      	adds	r7, #8
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a20      	ldr	r2, [pc, #128]	; (8005a40 <I2SEx_RxISR_I2SExt+0x90>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d101      	bne.n	80059c6 <I2SEx_RxISR_I2SExt+0x16>
 80059c2:	4b20      	ldr	r3, [pc, #128]	; (8005a44 <I2SEx_RxISR_I2SExt+0x94>)
 80059c4:	e001      	b.n	80059ca <I2SEx_RxISR_I2SExt+0x1a>
 80059c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059ca:	68d8      	ldr	r0, [r3, #12]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d0:	1c99      	adds	r1, r3, #2
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80059d6:	b282      	uxth	r2, r0
 80059d8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d121      	bne.n	8005a36 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a12      	ldr	r2, [pc, #72]	; (8005a40 <I2SEx_RxISR_I2SExt+0x90>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d101      	bne.n	8005a00 <I2SEx_RxISR_I2SExt+0x50>
 80059fc:	4b11      	ldr	r3, [pc, #68]	; (8005a44 <I2SEx_RxISR_I2SExt+0x94>)
 80059fe:	e001      	b.n	8005a04 <I2SEx_RxISR_I2SExt+0x54>
 8005a00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	490d      	ldr	r1, [pc, #52]	; (8005a40 <I2SEx_RxISR_I2SExt+0x90>)
 8005a0c:	428b      	cmp	r3, r1
 8005a0e:	d101      	bne.n	8005a14 <I2SEx_RxISR_I2SExt+0x64>
 8005a10:	4b0c      	ldr	r3, [pc, #48]	; (8005a44 <I2SEx_RxISR_I2SExt+0x94>)
 8005a12:	e001      	b.n	8005a18 <I2SEx_RxISR_I2SExt+0x68>
 8005a14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a18:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a1c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d106      	bne.n	8005a36 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7ff ff03 	bl	800583c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a36:	bf00      	nop
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	40003800 	.word	0x40003800
 8005a44:	40003400 	.word	0x40003400

08005a48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e264      	b.n	8005f24 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d075      	beq.n	8005b52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a66:	4ba3      	ldr	r3, [pc, #652]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 030c 	and.w	r3, r3, #12
 8005a6e:	2b04      	cmp	r3, #4
 8005a70:	d00c      	beq.n	8005a8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a72:	4ba0      	ldr	r3, [pc, #640]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a7a:	2b08      	cmp	r3, #8
 8005a7c:	d112      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a7e:	4b9d      	ldr	r3, [pc, #628]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a8a:	d10b      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a8c:	4b99      	ldr	r3, [pc, #612]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d05b      	beq.n	8005b50 <HAL_RCC_OscConfig+0x108>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d157      	bne.n	8005b50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e23f      	b.n	8005f24 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aac:	d106      	bne.n	8005abc <HAL_RCC_OscConfig+0x74>
 8005aae:	4b91      	ldr	r3, [pc, #580]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a90      	ldr	r2, [pc, #576]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ab8:	6013      	str	r3, [r2, #0]
 8005aba:	e01d      	b.n	8005af8 <HAL_RCC_OscConfig+0xb0>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ac4:	d10c      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x98>
 8005ac6:	4b8b      	ldr	r3, [pc, #556]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a8a      	ldr	r2, [pc, #552]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	4b88      	ldr	r3, [pc, #544]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a87      	ldr	r2, [pc, #540]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005adc:	6013      	str	r3, [r2, #0]
 8005ade:	e00b      	b.n	8005af8 <HAL_RCC_OscConfig+0xb0>
 8005ae0:	4b84      	ldr	r3, [pc, #528]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a83      	ldr	r2, [pc, #524]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	4b81      	ldr	r3, [pc, #516]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a80      	ldr	r2, [pc, #512]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d013      	beq.n	8005b28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b00:	f7fd f930 	bl	8002d64 <HAL_GetTick>
 8005b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b08:	f7fd f92c 	bl	8002d64 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b64      	cmp	r3, #100	; 0x64
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e204      	b.n	8005f24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b1a:	4b76      	ldr	r3, [pc, #472]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0f0      	beq.n	8005b08 <HAL_RCC_OscConfig+0xc0>
 8005b26:	e014      	b.n	8005b52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b28:	f7fd f91c 	bl	8002d64 <HAL_GetTick>
 8005b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b30:	f7fd f918 	bl	8002d64 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b64      	cmp	r3, #100	; 0x64
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e1f0      	b.n	8005f24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b42:	4b6c      	ldr	r3, [pc, #432]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1f0      	bne.n	8005b30 <HAL_RCC_OscConfig+0xe8>
 8005b4e:	e000      	b.n	8005b52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d063      	beq.n	8005c26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b5e:	4b65      	ldr	r3, [pc, #404]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f003 030c 	and.w	r3, r3, #12
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00b      	beq.n	8005b82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b6a:	4b62      	ldr	r3, [pc, #392]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b72:	2b08      	cmp	r3, #8
 8005b74:	d11c      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b76:	4b5f      	ldr	r3, [pc, #380]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d116      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b82:	4b5c      	ldr	r3, [pc, #368]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d005      	beq.n	8005b9a <HAL_RCC_OscConfig+0x152>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d001      	beq.n	8005b9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e1c4      	b.n	8005f24 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b9a:	4b56      	ldr	r3, [pc, #344]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	4952      	ldr	r1, [pc, #328]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bae:	e03a      	b.n	8005c26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d020      	beq.n	8005bfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bb8:	4b4f      	ldr	r3, [pc, #316]	; (8005cf8 <HAL_RCC_OscConfig+0x2b0>)
 8005bba:	2201      	movs	r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bbe:	f7fd f8d1 	bl	8002d64 <HAL_GetTick>
 8005bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bc4:	e008      	b.n	8005bd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bc6:	f7fd f8cd 	bl	8002d64 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e1a5      	b.n	8005f24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bd8:	4b46      	ldr	r3, [pc, #280]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d0f0      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005be4:	4b43      	ldr	r3, [pc, #268]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	00db      	lsls	r3, r3, #3
 8005bf2:	4940      	ldr	r1, [pc, #256]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	600b      	str	r3, [r1, #0]
 8005bf8:	e015      	b.n	8005c26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bfa:	4b3f      	ldr	r3, [pc, #252]	; (8005cf8 <HAL_RCC_OscConfig+0x2b0>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c00:	f7fd f8b0 	bl	8002d64 <HAL_GetTick>
 8005c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c06:	e008      	b.n	8005c1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c08:	f7fd f8ac 	bl	8002d64 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e184      	b.n	8005f24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c1a:	4b36      	ldr	r3, [pc, #216]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1f0      	bne.n	8005c08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0308 	and.w	r3, r3, #8
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d030      	beq.n	8005c94 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d016      	beq.n	8005c68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c3a:	4b30      	ldr	r3, [pc, #192]	; (8005cfc <HAL_RCC_OscConfig+0x2b4>)
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c40:	f7fd f890 	bl	8002d64 <HAL_GetTick>
 8005c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c46:	e008      	b.n	8005c5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c48:	f7fd f88c 	bl	8002d64 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d901      	bls.n	8005c5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e164      	b.n	8005f24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c5a:	4b26      	ldr	r3, [pc, #152]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d0f0      	beq.n	8005c48 <HAL_RCC_OscConfig+0x200>
 8005c66:	e015      	b.n	8005c94 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c68:	4b24      	ldr	r3, [pc, #144]	; (8005cfc <HAL_RCC_OscConfig+0x2b4>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c6e:	f7fd f879 	bl	8002d64 <HAL_GetTick>
 8005c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c74:	e008      	b.n	8005c88 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c76:	f7fd f875 	bl	8002d64 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d901      	bls.n	8005c88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e14d      	b.n	8005f24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c88:	4b1a      	ldr	r3, [pc, #104]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1f0      	bne.n	8005c76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0304 	and.w	r3, r3, #4
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 80a0 	beq.w	8005de2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ca6:	4b13      	ldr	r3, [pc, #76]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10f      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60bb      	str	r3, [r7, #8]
 8005cb6:	4b0f      	ldr	r3, [pc, #60]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	4a0e      	ldr	r2, [pc, #56]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8005cc2:	4b0c      	ldr	r3, [pc, #48]	; (8005cf4 <HAL_RCC_OscConfig+0x2ac>)
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cca:	60bb      	str	r3, [r7, #8]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <HAL_RCC_OscConfig+0x2b8>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d121      	bne.n	8005d22 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cde:	4b08      	ldr	r3, [pc, #32]	; (8005d00 <HAL_RCC_OscConfig+0x2b8>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a07      	ldr	r2, [pc, #28]	; (8005d00 <HAL_RCC_OscConfig+0x2b8>)
 8005ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cea:	f7fd f83b 	bl	8002d64 <HAL_GetTick>
 8005cee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf0:	e011      	b.n	8005d16 <HAL_RCC_OscConfig+0x2ce>
 8005cf2:	bf00      	nop
 8005cf4:	40023800 	.word	0x40023800
 8005cf8:	42470000 	.word	0x42470000
 8005cfc:	42470e80 	.word	0x42470e80
 8005d00:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d04:	f7fd f82e 	bl	8002d64 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e106      	b.n	8005f24 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d16:	4b85      	ldr	r3, [pc, #532]	; (8005f2c <HAL_RCC_OscConfig+0x4e4>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d0f0      	beq.n	8005d04 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d106      	bne.n	8005d38 <HAL_RCC_OscConfig+0x2f0>
 8005d2a:	4b81      	ldr	r3, [pc, #516]	; (8005f30 <HAL_RCC_OscConfig+0x4e8>)
 8005d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2e:	4a80      	ldr	r2, [pc, #512]	; (8005f30 <HAL_RCC_OscConfig+0x4e8>)
 8005d30:	f043 0301 	orr.w	r3, r3, #1
 8005d34:	6713      	str	r3, [r2, #112]	; 0x70
 8005d36:	e01c      	b.n	8005d72 <HAL_RCC_OscConfig+0x32a>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	2b05      	cmp	r3, #5
 8005d3e:	d10c      	bne.n	8005d5a <HAL_RCC_OscConfig+0x312>
 8005d40:	4b7b      	ldr	r3, [pc, #492]	; (8005f30 <HAL_RCC_OscConfig+0x4e8>)
 8005d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d44:	4a7a      	ldr	r2, [pc, #488]	; (8005f30 <HAL_RCC_OscConfig+0x4e8>)
 8005d46:	f043 0304 	orr.w	r3, r3, #4
 8005d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d4c:	4b78      	ldr	r3, [pc, #480]	; (8005f30 <HAL_RCC_OscConfig+0x4e8>)
 8005d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d50:	4a77      	ldr	r2, [pc, #476]	; (8005f30 <HAL_RCC_OscConfig+0x4e8>)
 8005d52:	f043 0301 	orr.w	r3, r3, #1
 8005d56:	6713      	str	r3, [r2, #112]	; 0x70
 8005d58:	e00b      	b.n	8005d72 <HAL_RCC_OscConfig+0x32a>
 8005d5a:	4b75      	ldr	r3, [pc, #468]	; (8005f30 <HAL_RCC_OscConfig+0x4e8>)
 8005d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5e:	4a74      	ldr	r2, [pc, #464]	; (8005f30 <HAL_RCC_OscConfig+0x4e8>)
 8005d60:	f023 0301 	bic.w	r3, r3, #1
 8005d64:	6713      	str	r3, [r2, #112]	; 0x70
 8005d66:	4b72      	ldr	r3, [pc, #456]	; (8005f30 <HAL_RCC_OscConfig+0x4e8>)
 8005d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6a:	4a71      	ldr	r2, [pc, #452]	; (8005f30 <HAL_RCC_OscConfig+0x4e8>)
 8005d6c:	f023 0304 	bic.w	r3, r3, #4
 8005d70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d015      	beq.n	8005da6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d7a:	f7fc fff3 	bl	8002d64 <HAL_GetTick>
 8005d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d80:	e00a      	b.n	8005d98 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d82:	f7fc ffef 	bl	8002d64 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d901      	bls.n	8005d98 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e0c5      	b.n	8005f24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d98:	4b65      	ldr	r3, [pc, #404]	; (8005f30 <HAL_RCC_OscConfig+0x4e8>)
 8005d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0ee      	beq.n	8005d82 <HAL_RCC_OscConfig+0x33a>
 8005da4:	e014      	b.n	8005dd0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005da6:	f7fc ffdd 	bl	8002d64 <HAL_GetTick>
 8005daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dac:	e00a      	b.n	8005dc4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dae:	f7fc ffd9 	bl	8002d64 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d901      	bls.n	8005dc4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e0af      	b.n	8005f24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dc4:	4b5a      	ldr	r3, [pc, #360]	; (8005f30 <HAL_RCC_OscConfig+0x4e8>)
 8005dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1ee      	bne.n	8005dae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dd0:	7dfb      	ldrb	r3, [r7, #23]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d105      	bne.n	8005de2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dd6:	4b56      	ldr	r3, [pc, #344]	; (8005f30 <HAL_RCC_OscConfig+0x4e8>)
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	4a55      	ldr	r2, [pc, #340]	; (8005f30 <HAL_RCC_OscConfig+0x4e8>)
 8005ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005de0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 809b 	beq.w	8005f22 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005dec:	4b50      	ldr	r3, [pc, #320]	; (8005f30 <HAL_RCC_OscConfig+0x4e8>)
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f003 030c 	and.w	r3, r3, #12
 8005df4:	2b08      	cmp	r3, #8
 8005df6:	d05c      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d141      	bne.n	8005e84 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e00:	4b4c      	ldr	r3, [pc, #304]	; (8005f34 <HAL_RCC_OscConfig+0x4ec>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e06:	f7fc ffad 	bl	8002d64 <HAL_GetTick>
 8005e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e0c:	e008      	b.n	8005e20 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e0e:	f7fc ffa9 	bl	8002d64 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d901      	bls.n	8005e20 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e081      	b.n	8005f24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e20:	4b43      	ldr	r3, [pc, #268]	; (8005f30 <HAL_RCC_OscConfig+0x4e8>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1f0      	bne.n	8005e0e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	69da      	ldr	r2, [r3, #28]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	431a      	orrs	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	019b      	lsls	r3, r3, #6
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e42:	085b      	lsrs	r3, r3, #1
 8005e44:	3b01      	subs	r3, #1
 8005e46:	041b      	lsls	r3, r3, #16
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4e:	061b      	lsls	r3, r3, #24
 8005e50:	4937      	ldr	r1, [pc, #220]	; (8005f30 <HAL_RCC_OscConfig+0x4e8>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e56:	4b37      	ldr	r3, [pc, #220]	; (8005f34 <HAL_RCC_OscConfig+0x4ec>)
 8005e58:	2201      	movs	r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e5c:	f7fc ff82 	bl	8002d64 <HAL_GetTick>
 8005e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e62:	e008      	b.n	8005e76 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e64:	f7fc ff7e 	bl	8002d64 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e056      	b.n	8005f24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e76:	4b2e      	ldr	r3, [pc, #184]	; (8005f30 <HAL_RCC_OscConfig+0x4e8>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0f0      	beq.n	8005e64 <HAL_RCC_OscConfig+0x41c>
 8005e82:	e04e      	b.n	8005f22 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e84:	4b2b      	ldr	r3, [pc, #172]	; (8005f34 <HAL_RCC_OscConfig+0x4ec>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e8a:	f7fc ff6b 	bl	8002d64 <HAL_GetTick>
 8005e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e90:	e008      	b.n	8005ea4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e92:	f7fc ff67 	bl	8002d64 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e03f      	b.n	8005f24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ea4:	4b22      	ldr	r3, [pc, #136]	; (8005f30 <HAL_RCC_OscConfig+0x4e8>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1f0      	bne.n	8005e92 <HAL_RCC_OscConfig+0x44a>
 8005eb0:	e037      	b.n	8005f22 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d101      	bne.n	8005ebe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e032      	b.n	8005f24 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ebe:	4b1c      	ldr	r3, [pc, #112]	; (8005f30 <HAL_RCC_OscConfig+0x4e8>)
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d028      	beq.n	8005f1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d121      	bne.n	8005f1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d11a      	bne.n	8005f1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005eee:	4013      	ands	r3, r2
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ef4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d111      	bne.n	8005f1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f04:	085b      	lsrs	r3, r3, #1
 8005f06:	3b01      	subs	r3, #1
 8005f08:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d107      	bne.n	8005f1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f18:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d001      	beq.n	8005f22 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e000      	b.n	8005f24 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3718      	adds	r7, #24
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	40007000 	.word	0x40007000
 8005f30:	40023800 	.word	0x40023800
 8005f34:	42470060 	.word	0x42470060

08005f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e0cc      	b.n	80060e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f4c:	4b68      	ldr	r3, [pc, #416]	; (80060f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0307 	and.w	r3, r3, #7
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d90c      	bls.n	8005f74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f5a:	4b65      	ldr	r3, [pc, #404]	; (80060f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	b2d2      	uxtb	r2, r2
 8005f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f62:	4b63      	ldr	r3, [pc, #396]	; (80060f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0307 	and.w	r3, r3, #7
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d001      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e0b8      	b.n	80060e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0302 	and.w	r3, r3, #2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d020      	beq.n	8005fc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0304 	and.w	r3, r3, #4
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d005      	beq.n	8005f98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f8c:	4b59      	ldr	r3, [pc, #356]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	4a58      	ldr	r2, [pc, #352]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0308 	and.w	r3, r3, #8
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d005      	beq.n	8005fb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fa4:	4b53      	ldr	r3, [pc, #332]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	4a52      	ldr	r2, [pc, #328]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005faa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005fae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fb0:	4b50      	ldr	r3, [pc, #320]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	494d      	ldr	r1, [pc, #308]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d044      	beq.n	8006058 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d107      	bne.n	8005fe6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fd6:	4b47      	ldr	r3, [pc, #284]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d119      	bne.n	8006016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e07f      	b.n	80060e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d003      	beq.n	8005ff6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ff2:	2b03      	cmp	r3, #3
 8005ff4:	d107      	bne.n	8006006 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ff6:	4b3f      	ldr	r3, [pc, #252]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d109      	bne.n	8006016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e06f      	b.n	80060e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006006:	4b3b      	ldr	r3, [pc, #236]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e067      	b.n	80060e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006016:	4b37      	ldr	r3, [pc, #220]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f023 0203 	bic.w	r2, r3, #3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	4934      	ldr	r1, [pc, #208]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006024:	4313      	orrs	r3, r2
 8006026:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006028:	f7fc fe9c 	bl	8002d64 <HAL_GetTick>
 800602c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800602e:	e00a      	b.n	8006046 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006030:	f7fc fe98 	bl	8002d64 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	f241 3288 	movw	r2, #5000	; 0x1388
 800603e:	4293      	cmp	r3, r2
 8006040:	d901      	bls.n	8006046 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e04f      	b.n	80060e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006046:	4b2b      	ldr	r3, [pc, #172]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f003 020c 	and.w	r2, r3, #12
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	429a      	cmp	r2, r3
 8006056:	d1eb      	bne.n	8006030 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006058:	4b25      	ldr	r3, [pc, #148]	; (80060f0 <HAL_RCC_ClockConfig+0x1b8>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0307 	and.w	r3, r3, #7
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	429a      	cmp	r2, r3
 8006064:	d20c      	bcs.n	8006080 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006066:	4b22      	ldr	r3, [pc, #136]	; (80060f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800606e:	4b20      	ldr	r3, [pc, #128]	; (80060f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0307 	and.w	r3, r3, #7
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	429a      	cmp	r2, r3
 800607a:	d001      	beq.n	8006080 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e032      	b.n	80060e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0304 	and.w	r3, r3, #4
 8006088:	2b00      	cmp	r3, #0
 800608a:	d008      	beq.n	800609e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800608c:	4b19      	ldr	r3, [pc, #100]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	4916      	ldr	r1, [pc, #88]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 800609a:	4313      	orrs	r3, r2
 800609c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0308 	and.w	r3, r3, #8
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d009      	beq.n	80060be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060aa:	4b12      	ldr	r3, [pc, #72]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	490e      	ldr	r1, [pc, #56]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80060be:	f000 f821 	bl	8006104 <HAL_RCC_GetSysClockFreq>
 80060c2:	4602      	mov	r2, r0
 80060c4:	4b0b      	ldr	r3, [pc, #44]	; (80060f4 <HAL_RCC_ClockConfig+0x1bc>)
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	091b      	lsrs	r3, r3, #4
 80060ca:	f003 030f 	and.w	r3, r3, #15
 80060ce:	490a      	ldr	r1, [pc, #40]	; (80060f8 <HAL_RCC_ClockConfig+0x1c0>)
 80060d0:	5ccb      	ldrb	r3, [r1, r3]
 80060d2:	fa22 f303 	lsr.w	r3, r2, r3
 80060d6:	4a09      	ldr	r2, [pc, #36]	; (80060fc <HAL_RCC_ClockConfig+0x1c4>)
 80060d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80060da:	4b09      	ldr	r3, [pc, #36]	; (8006100 <HAL_RCC_ClockConfig+0x1c8>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fc fdfc 	bl	8002cdc <HAL_InitTick>

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	40023c00 	.word	0x40023c00
 80060f4:	40023800 	.word	0x40023800
 80060f8:	0800b7c0 	.word	0x0800b7c0
 80060fc:	20000148 	.word	0x20000148
 8006100:	2000014c 	.word	0x2000014c

08006104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006104:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006108:	b084      	sub	sp, #16
 800610a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	607b      	str	r3, [r7, #4]
 8006110:	2300      	movs	r3, #0
 8006112:	60fb      	str	r3, [r7, #12]
 8006114:	2300      	movs	r3, #0
 8006116:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006118:	2300      	movs	r3, #0
 800611a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800611c:	4b67      	ldr	r3, [pc, #412]	; (80062bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f003 030c 	and.w	r3, r3, #12
 8006124:	2b08      	cmp	r3, #8
 8006126:	d00d      	beq.n	8006144 <HAL_RCC_GetSysClockFreq+0x40>
 8006128:	2b08      	cmp	r3, #8
 800612a:	f200 80bd 	bhi.w	80062a8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800612e:	2b00      	cmp	r3, #0
 8006130:	d002      	beq.n	8006138 <HAL_RCC_GetSysClockFreq+0x34>
 8006132:	2b04      	cmp	r3, #4
 8006134:	d003      	beq.n	800613e <HAL_RCC_GetSysClockFreq+0x3a>
 8006136:	e0b7      	b.n	80062a8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006138:	4b61      	ldr	r3, [pc, #388]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800613a:	60bb      	str	r3, [r7, #8]
       break;
 800613c:	e0b7      	b.n	80062ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800613e:	4b61      	ldr	r3, [pc, #388]	; (80062c4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006140:	60bb      	str	r3, [r7, #8]
      break;
 8006142:	e0b4      	b.n	80062ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006144:	4b5d      	ldr	r3, [pc, #372]	; (80062bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800614c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800614e:	4b5b      	ldr	r3, [pc, #364]	; (80062bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d04d      	beq.n	80061f6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800615a:	4b58      	ldr	r3, [pc, #352]	; (80062bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	099b      	lsrs	r3, r3, #6
 8006160:	461a      	mov	r2, r3
 8006162:	f04f 0300 	mov.w	r3, #0
 8006166:	f240 10ff 	movw	r0, #511	; 0x1ff
 800616a:	f04f 0100 	mov.w	r1, #0
 800616e:	ea02 0800 	and.w	r8, r2, r0
 8006172:	ea03 0901 	and.w	r9, r3, r1
 8006176:	4640      	mov	r0, r8
 8006178:	4649      	mov	r1, r9
 800617a:	f04f 0200 	mov.w	r2, #0
 800617e:	f04f 0300 	mov.w	r3, #0
 8006182:	014b      	lsls	r3, r1, #5
 8006184:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006188:	0142      	lsls	r2, r0, #5
 800618a:	4610      	mov	r0, r2
 800618c:	4619      	mov	r1, r3
 800618e:	ebb0 0008 	subs.w	r0, r0, r8
 8006192:	eb61 0109 	sbc.w	r1, r1, r9
 8006196:	f04f 0200 	mov.w	r2, #0
 800619a:	f04f 0300 	mov.w	r3, #0
 800619e:	018b      	lsls	r3, r1, #6
 80061a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80061a4:	0182      	lsls	r2, r0, #6
 80061a6:	1a12      	subs	r2, r2, r0
 80061a8:	eb63 0301 	sbc.w	r3, r3, r1
 80061ac:	f04f 0000 	mov.w	r0, #0
 80061b0:	f04f 0100 	mov.w	r1, #0
 80061b4:	00d9      	lsls	r1, r3, #3
 80061b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061ba:	00d0      	lsls	r0, r2, #3
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	eb12 0208 	adds.w	r2, r2, r8
 80061c4:	eb43 0309 	adc.w	r3, r3, r9
 80061c8:	f04f 0000 	mov.w	r0, #0
 80061cc:	f04f 0100 	mov.w	r1, #0
 80061d0:	0259      	lsls	r1, r3, #9
 80061d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80061d6:	0250      	lsls	r0, r2, #9
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	4610      	mov	r0, r2
 80061de:	4619      	mov	r1, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	461a      	mov	r2, r3
 80061e4:	f04f 0300 	mov.w	r3, #0
 80061e8:	f7f9 ffee 	bl	80001c8 <__aeabi_uldivmod>
 80061ec:	4602      	mov	r2, r0
 80061ee:	460b      	mov	r3, r1
 80061f0:	4613      	mov	r3, r2
 80061f2:	60fb      	str	r3, [r7, #12]
 80061f4:	e04a      	b.n	800628c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061f6:	4b31      	ldr	r3, [pc, #196]	; (80062bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	099b      	lsrs	r3, r3, #6
 80061fc:	461a      	mov	r2, r3
 80061fe:	f04f 0300 	mov.w	r3, #0
 8006202:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006206:	f04f 0100 	mov.w	r1, #0
 800620a:	ea02 0400 	and.w	r4, r2, r0
 800620e:	ea03 0501 	and.w	r5, r3, r1
 8006212:	4620      	mov	r0, r4
 8006214:	4629      	mov	r1, r5
 8006216:	f04f 0200 	mov.w	r2, #0
 800621a:	f04f 0300 	mov.w	r3, #0
 800621e:	014b      	lsls	r3, r1, #5
 8006220:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006224:	0142      	lsls	r2, r0, #5
 8006226:	4610      	mov	r0, r2
 8006228:	4619      	mov	r1, r3
 800622a:	1b00      	subs	r0, r0, r4
 800622c:	eb61 0105 	sbc.w	r1, r1, r5
 8006230:	f04f 0200 	mov.w	r2, #0
 8006234:	f04f 0300 	mov.w	r3, #0
 8006238:	018b      	lsls	r3, r1, #6
 800623a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800623e:	0182      	lsls	r2, r0, #6
 8006240:	1a12      	subs	r2, r2, r0
 8006242:	eb63 0301 	sbc.w	r3, r3, r1
 8006246:	f04f 0000 	mov.w	r0, #0
 800624a:	f04f 0100 	mov.w	r1, #0
 800624e:	00d9      	lsls	r1, r3, #3
 8006250:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006254:	00d0      	lsls	r0, r2, #3
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	1912      	adds	r2, r2, r4
 800625c:	eb45 0303 	adc.w	r3, r5, r3
 8006260:	f04f 0000 	mov.w	r0, #0
 8006264:	f04f 0100 	mov.w	r1, #0
 8006268:	0299      	lsls	r1, r3, #10
 800626a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800626e:	0290      	lsls	r0, r2, #10
 8006270:	4602      	mov	r2, r0
 8006272:	460b      	mov	r3, r1
 8006274:	4610      	mov	r0, r2
 8006276:	4619      	mov	r1, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	461a      	mov	r2, r3
 800627c:	f04f 0300 	mov.w	r3, #0
 8006280:	f7f9 ffa2 	bl	80001c8 <__aeabi_uldivmod>
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	4613      	mov	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800628c:	4b0b      	ldr	r3, [pc, #44]	; (80062bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	0c1b      	lsrs	r3, r3, #16
 8006292:	f003 0303 	and.w	r3, r3, #3
 8006296:	3301      	adds	r3, #1
 8006298:	005b      	lsls	r3, r3, #1
 800629a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a4:	60bb      	str	r3, [r7, #8]
      break;
 80062a6:	e002      	b.n	80062ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062a8:	4b05      	ldr	r3, [pc, #20]	; (80062c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80062aa:	60bb      	str	r3, [r7, #8]
      break;
 80062ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062ae:	68bb      	ldr	r3, [r7, #8]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80062ba:	bf00      	nop
 80062bc:	40023800 	.word	0x40023800
 80062c0:	00f42400 	.word	0x00f42400
 80062c4:	007a1200 	.word	0x007a1200

080062c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062c8:	b480      	push	{r7}
 80062ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062cc:	4b03      	ldr	r3, [pc, #12]	; (80062dc <HAL_RCC_GetHCLKFreq+0x14>)
 80062ce:	681b      	ldr	r3, [r3, #0]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	20000148 	.word	0x20000148

080062e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80062e4:	f7ff fff0 	bl	80062c8 <HAL_RCC_GetHCLKFreq>
 80062e8:	4602      	mov	r2, r0
 80062ea:	4b05      	ldr	r3, [pc, #20]	; (8006300 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	0a9b      	lsrs	r3, r3, #10
 80062f0:	f003 0307 	and.w	r3, r3, #7
 80062f4:	4903      	ldr	r1, [pc, #12]	; (8006304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062f6:	5ccb      	ldrb	r3, [r1, r3]
 80062f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	40023800 	.word	0x40023800
 8006304:	0800b7d0 	.word	0x0800b7d0

08006308 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	d105      	bne.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800632c:	2b00      	cmp	r3, #0
 800632e:	d035      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006330:	4b62      	ldr	r3, [pc, #392]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006336:	f7fc fd15 	bl	8002d64 <HAL_GetTick>
 800633a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800633c:	e008      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800633e:	f7fc fd11 	bl	8002d64 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	2b02      	cmp	r3, #2
 800634a:	d901      	bls.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e0b0      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006350:	4b5b      	ldr	r3, [pc, #364]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1f0      	bne.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	019a      	lsls	r2, r3, #6
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	071b      	lsls	r3, r3, #28
 8006368:	4955      	ldr	r1, [pc, #340]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800636a:	4313      	orrs	r3, r2
 800636c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006370:	4b52      	ldr	r3, [pc, #328]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006372:	2201      	movs	r2, #1
 8006374:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006376:	f7fc fcf5 	bl	8002d64 <HAL_GetTick>
 800637a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800637c:	e008      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800637e:	f7fc fcf1 	bl	8002d64 <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b02      	cmp	r3, #2
 800638a:	d901      	bls.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e090      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006390:	4b4b      	ldr	r3, [pc, #300]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d0f0      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0302 	and.w	r3, r3, #2
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 8083 	beq.w	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80063aa:	2300      	movs	r3, #0
 80063ac:	60fb      	str	r3, [r7, #12]
 80063ae:	4b44      	ldr	r3, [pc, #272]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	4a43      	ldr	r2, [pc, #268]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063b8:	6413      	str	r3, [r2, #64]	; 0x40
 80063ba:	4b41      	ldr	r3, [pc, #260]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80063c6:	4b3f      	ldr	r3, [pc, #252]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a3e      	ldr	r2, [pc, #248]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80063cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80063d2:	f7fc fcc7 	bl	8002d64 <HAL_GetTick>
 80063d6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80063d8:	e008      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80063da:	f7fc fcc3 	bl	8002d64 <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d901      	bls.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e062      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80063ec:	4b35      	ldr	r3, [pc, #212]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d0f0      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80063f8:	4b31      	ldr	r3, [pc, #196]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006400:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d02f      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	429a      	cmp	r2, r3
 8006414:	d028      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006416:	4b2a      	ldr	r3, [pc, #168]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800641a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800641e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006420:	4b29      	ldr	r3, [pc, #164]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006422:	2201      	movs	r2, #1
 8006424:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006426:	4b28      	ldr	r3, [pc, #160]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800642c:	4a24      	ldr	r2, [pc, #144]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006432:	4b23      	ldr	r3, [pc, #140]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b01      	cmp	r3, #1
 800643c:	d114      	bne.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800643e:	f7fc fc91 	bl	8002d64 <HAL_GetTick>
 8006442:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006444:	e00a      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006446:	f7fc fc8d 	bl	8002d64 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	f241 3288 	movw	r2, #5000	; 0x1388
 8006454:	4293      	cmp	r3, r2
 8006456:	d901      	bls.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e02a      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800645c:	4b18      	ldr	r3, [pc, #96]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800645e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0ee      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006470:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006474:	d10d      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006476:	4b12      	ldr	r3, [pc, #72]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800648a:	490d      	ldr	r1, [pc, #52]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800648c:	4313      	orrs	r3, r2
 800648e:	608b      	str	r3, [r1, #8]
 8006490:	e005      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006492:	4b0b      	ldr	r3, [pc, #44]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	4a0a      	ldr	r2, [pc, #40]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006498:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800649c:	6093      	str	r3, [r2, #8]
 800649e:	4b08      	ldr	r3, [pc, #32]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064aa:	4905      	ldr	r1, [pc, #20]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3718      	adds	r7, #24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	42470068 	.word	0x42470068
 80064c0:	40023800 	.word	0x40023800
 80064c4:	40007000 	.word	0x40007000
 80064c8:	42470e40 	.word	0x42470e40

080064cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80064dc:	2300      	movs	r3, #0
 80064de:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80064e0:	2300      	movs	r3, #0
 80064e2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d13e      	bne.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80064ea:	4b23      	ldr	r3, [pc, #140]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d005      	beq.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d12f      	bne.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006500:	4b1e      	ldr	r3, [pc, #120]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006502:	617b      	str	r3, [r7, #20]
          break;
 8006504:	e02f      	b.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006506:	4b1c      	ldr	r3, [pc, #112]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800650e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006512:	d108      	bne.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006514:	4b18      	ldr	r3, [pc, #96]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800651c:	4a18      	ldr	r2, [pc, #96]	; (8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800651e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006522:	613b      	str	r3, [r7, #16]
 8006524:	e007      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006526:	4b14      	ldr	r3, [pc, #80]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800652e:	4a15      	ldr	r2, [pc, #84]	; (8006584 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006530:	fbb2 f3f3 	udiv	r3, r2, r3
 8006534:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006536:	4b10      	ldr	r3, [pc, #64]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800653c:	099b      	lsrs	r3, r3, #6
 800653e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	fb02 f303 	mul.w	r3, r2, r3
 8006548:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800654a:	4b0b      	ldr	r3, [pc, #44]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800654c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006550:	0f1b      	lsrs	r3, r3, #28
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	fbb2 f3f3 	udiv	r3, r2, r3
 800655c:	617b      	str	r3, [r7, #20]
          break;
 800655e:	e002      	b.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	617b      	str	r3, [r7, #20]
          break;
 8006564:	bf00      	nop
        }
      }
      break;
 8006566:	bf00      	nop
    }
  }
  return frequency;
 8006568:	697b      	ldr	r3, [r7, #20]
}
 800656a:	4618      	mov	r0, r3
 800656c:	371c      	adds	r7, #28
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	40023800 	.word	0x40023800
 800657c:	00bb8000 	.word	0x00bb8000
 8006580:	007a1200 	.word	0x007a1200
 8006584:	00f42400 	.word	0x00f42400

08006588 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e01c      	b.n	80065d4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	795b      	ldrb	r3, [r3, #5]
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d105      	bne.n	80065b0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7fc f92c 	bl	8002808 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2202      	movs	r2, #2
 80065b4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f042 0204 	orr.w	r2, r2, #4
 80065c4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e07b      	b.n	80066e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d108      	bne.n	8006608 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065fe:	d009      	beq.n	8006614 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	61da      	str	r2, [r3, #28]
 8006606:	e005      	b.n	8006614 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d106      	bne.n	8006634 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7fc f90c 	bl	800284c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2202      	movs	r2, #2
 8006638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800664a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800665c:	431a      	orrs	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006666:	431a      	orrs	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	f003 0302 	and.w	r3, r3, #2
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006684:	431a      	orrs	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800668e:	431a      	orrs	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006698:	ea42 0103 	orr.w	r1, r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	430a      	orrs	r2, r1
 80066aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	0c1b      	lsrs	r3, r3, #16
 80066b2:	f003 0104 	and.w	r1, r3, #4
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ba:	f003 0210 	and.w	r2, r3, #16
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	69da      	ldr	r2, [r3, #28]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b088      	sub	sp, #32
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	60f8      	str	r0, [r7, #12]
 80066f6:	60b9      	str	r1, [r7, #8]
 80066f8:	603b      	str	r3, [r7, #0]
 80066fa:	4613      	mov	r3, r2
 80066fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066fe:	2300      	movs	r3, #0
 8006700:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006708:	2b01      	cmp	r3, #1
 800670a:	d101      	bne.n	8006710 <HAL_SPI_Transmit+0x22>
 800670c:	2302      	movs	r3, #2
 800670e:	e126      	b.n	800695e <HAL_SPI_Transmit+0x270>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006718:	f7fc fb24 	bl	8002d64 <HAL_GetTick>
 800671c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800671e:	88fb      	ldrh	r3, [r7, #6]
 8006720:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b01      	cmp	r3, #1
 800672c:	d002      	beq.n	8006734 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800672e:	2302      	movs	r3, #2
 8006730:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006732:	e10b      	b.n	800694c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d002      	beq.n	8006740 <HAL_SPI_Transmit+0x52>
 800673a:	88fb      	ldrh	r3, [r7, #6]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d102      	bne.n	8006746 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006744:	e102      	b.n	800694c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2203      	movs	r2, #3
 800674a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	88fa      	ldrh	r2, [r7, #6]
 800675e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	88fa      	ldrh	r2, [r7, #6]
 8006764:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800678c:	d10f      	bne.n	80067ae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800679c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b8:	2b40      	cmp	r3, #64	; 0x40
 80067ba:	d007      	beq.n	80067cc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067d4:	d14b      	bne.n	800686e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d002      	beq.n	80067e4 <HAL_SPI_Transmit+0xf6>
 80067de:	8afb      	ldrh	r3, [r7, #22]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d13e      	bne.n	8006862 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e8:	881a      	ldrh	r2, [r3, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f4:	1c9a      	adds	r2, r3, #2
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067fe:	b29b      	uxth	r3, r3
 8006800:	3b01      	subs	r3, #1
 8006802:	b29a      	uxth	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006808:	e02b      	b.n	8006862 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f003 0302 	and.w	r3, r3, #2
 8006814:	2b02      	cmp	r3, #2
 8006816:	d112      	bne.n	800683e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681c:	881a      	ldrh	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006828:	1c9a      	adds	r2, r3, #2
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006832:	b29b      	uxth	r3, r3
 8006834:	3b01      	subs	r3, #1
 8006836:	b29a      	uxth	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	86da      	strh	r2, [r3, #54]	; 0x36
 800683c:	e011      	b.n	8006862 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800683e:	f7fc fa91 	bl	8002d64 <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	429a      	cmp	r2, r3
 800684c:	d803      	bhi.n	8006856 <HAL_SPI_Transmit+0x168>
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006854:	d102      	bne.n	800685c <HAL_SPI_Transmit+0x16e>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d102      	bne.n	8006862 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006860:	e074      	b.n	800694c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006866:	b29b      	uxth	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1ce      	bne.n	800680a <HAL_SPI_Transmit+0x11c>
 800686c:	e04c      	b.n	8006908 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d002      	beq.n	800687c <HAL_SPI_Transmit+0x18e>
 8006876:	8afb      	ldrh	r3, [r7, #22]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d140      	bne.n	80068fe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	330c      	adds	r3, #12
 8006886:	7812      	ldrb	r2, [r2, #0]
 8006888:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006898:	b29b      	uxth	r3, r3
 800689a:	3b01      	subs	r3, #1
 800689c:	b29a      	uxth	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80068a2:	e02c      	b.n	80068fe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d113      	bne.n	80068da <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	330c      	adds	r3, #12
 80068bc:	7812      	ldrb	r2, [r2, #0]
 80068be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c4:	1c5a      	adds	r2, r3, #1
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	3b01      	subs	r3, #1
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80068d8:	e011      	b.n	80068fe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068da:	f7fc fa43 	bl	8002d64 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d803      	bhi.n	80068f2 <HAL_SPI_Transmit+0x204>
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068f0:	d102      	bne.n	80068f8 <HAL_SPI_Transmit+0x20a>
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d102      	bne.n	80068fe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80068fc:	e026      	b.n	800694c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006902:	b29b      	uxth	r3, r3
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1cd      	bne.n	80068a4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006908:	69ba      	ldr	r2, [r7, #24]
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 f8b3 	bl	8006a78 <SPI_EndRxTxTransaction>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2220      	movs	r2, #32
 800691c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10a      	bne.n	800693c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006926:	2300      	movs	r3, #0
 8006928:	613b      	str	r3, [r7, #16]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	613b      	str	r3, [r7, #16]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	613b      	str	r3, [r7, #16]
 800693a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	77fb      	strb	r3, [r7, #31]
 8006948:	e000      	b.n	800694c <HAL_SPI_Transmit+0x25e>
  }

error:
 800694a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800695c:	7ffb      	ldrb	r3, [r7, #31]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3720      	adds	r7, #32
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
	...

08006968 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b088      	sub	sp, #32
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	603b      	str	r3, [r7, #0]
 8006974:	4613      	mov	r3, r2
 8006976:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006978:	f7fc f9f4 	bl	8002d64 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006980:	1a9b      	subs	r3, r3, r2
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	4413      	add	r3, r2
 8006986:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006988:	f7fc f9ec 	bl	8002d64 <HAL_GetTick>
 800698c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800698e:	4b39      	ldr	r3, [pc, #228]	; (8006a74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	015b      	lsls	r3, r3, #5
 8006994:	0d1b      	lsrs	r3, r3, #20
 8006996:	69fa      	ldr	r2, [r7, #28]
 8006998:	fb02 f303 	mul.w	r3, r2, r3
 800699c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800699e:	e054      	b.n	8006a4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069a6:	d050      	beq.n	8006a4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069a8:	f7fc f9dc 	bl	8002d64 <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	69fa      	ldr	r2, [r7, #28]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d902      	bls.n	80069be <SPI_WaitFlagStateUntilTimeout+0x56>
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d13d      	bne.n	8006a3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80069cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069d6:	d111      	bne.n	80069fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069e0:	d004      	beq.n	80069ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ea:	d107      	bne.n	80069fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a04:	d10f      	bne.n	8006a26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a14:	601a      	str	r2, [r3, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e017      	b.n	8006a6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a40:	2300      	movs	r3, #0
 8006a42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	3b01      	subs	r3, #1
 8006a48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	689a      	ldr	r2, [r3, #8]
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	4013      	ands	r3, r2
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	bf0c      	ite	eq
 8006a5a:	2301      	moveq	r3, #1
 8006a5c:	2300      	movne	r3, #0
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	461a      	mov	r2, r3
 8006a62:	79fb      	ldrb	r3, [r7, #7]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d19b      	bne.n	80069a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3720      	adds	r7, #32
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	20000148 	.word	0x20000148

08006a78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af02      	add	r7, sp, #8
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a84:	4b1b      	ldr	r3, [pc, #108]	; (8006af4 <SPI_EndRxTxTransaction+0x7c>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a1b      	ldr	r2, [pc, #108]	; (8006af8 <SPI_EndRxTxTransaction+0x80>)
 8006a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a8e:	0d5b      	lsrs	r3, r3, #21
 8006a90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a94:	fb02 f303 	mul.w	r3, r2, r3
 8006a98:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006aa2:	d112      	bne.n	8006aca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	2180      	movs	r1, #128	; 0x80
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f7ff ff5a 	bl	8006968 <SPI_WaitFlagStateUntilTimeout>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d016      	beq.n	8006ae8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006abe:	f043 0220 	orr.w	r2, r3, #32
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e00f      	b.n	8006aea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00a      	beq.n	8006ae6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae0:	2b80      	cmp	r3, #128	; 0x80
 8006ae2:	d0f2      	beq.n	8006aca <SPI_EndRxTxTransaction+0x52>
 8006ae4:	e000      	b.n	8006ae8 <SPI_EndRxTxTransaction+0x70>
        break;
 8006ae6:	bf00      	nop
  }

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3718      	adds	r7, #24
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	20000148 	.word	0x20000148
 8006af8:	165e9f81 	.word	0x165e9f81

08006afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e041      	b.n	8006b92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d106      	bne.n	8006b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7fb ff78 	bl	8002a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	3304      	adds	r3, #4
 8006b38:	4619      	mov	r1, r3
 8006b3a:	4610      	mov	r0, r2
 8006b3c:	f000 fd68 	bl	8007610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
	...

08006b9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d001      	beq.n	8006bb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e04e      	b.n	8006c52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f042 0201 	orr.w	r2, r2, #1
 8006bca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a23      	ldr	r2, [pc, #140]	; (8006c60 <HAL_TIM_Base_Start_IT+0xc4>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d022      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x80>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bde:	d01d      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x80>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a1f      	ldr	r2, [pc, #124]	; (8006c64 <HAL_TIM_Base_Start_IT+0xc8>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d018      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x80>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a1e      	ldr	r2, [pc, #120]	; (8006c68 <HAL_TIM_Base_Start_IT+0xcc>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d013      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x80>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a1c      	ldr	r2, [pc, #112]	; (8006c6c <HAL_TIM_Base_Start_IT+0xd0>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d00e      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x80>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a1b      	ldr	r2, [pc, #108]	; (8006c70 <HAL_TIM_Base_Start_IT+0xd4>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d009      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x80>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a19      	ldr	r2, [pc, #100]	; (8006c74 <HAL_TIM_Base_Start_IT+0xd8>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d004      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x80>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a18      	ldr	r2, [pc, #96]	; (8006c78 <HAL_TIM_Base_Start_IT+0xdc>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d111      	bne.n	8006c40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f003 0307 	and.w	r3, r3, #7
 8006c26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2b06      	cmp	r3, #6
 8006c2c:	d010      	beq.n	8006c50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f042 0201 	orr.w	r2, r2, #1
 8006c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c3e:	e007      	b.n	8006c50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f042 0201 	orr.w	r2, r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	40010000 	.word	0x40010000
 8006c64:	40000400 	.word	0x40000400
 8006c68:	40000800 	.word	0x40000800
 8006c6c:	40000c00 	.word	0x40000c00
 8006c70:	40010400 	.word	0x40010400
 8006c74:	40014000 	.word	0x40014000
 8006c78:	40001800 	.word	0x40001800

08006c7c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d109      	bne.n	8006ca0 <HAL_TIM_OC_Start_IT+0x24>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	bf14      	ite	ne
 8006c98:	2301      	movne	r3, #1
 8006c9a:	2300      	moveq	r3, #0
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	e022      	b.n	8006ce6 <HAL_TIM_OC_Start_IT+0x6a>
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d109      	bne.n	8006cba <HAL_TIM_OC_Start_IT+0x3e>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	bf14      	ite	ne
 8006cb2:	2301      	movne	r3, #1
 8006cb4:	2300      	moveq	r3, #0
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	e015      	b.n	8006ce6 <HAL_TIM_OC_Start_IT+0x6a>
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	2b08      	cmp	r3, #8
 8006cbe:	d109      	bne.n	8006cd4 <HAL_TIM_OC_Start_IT+0x58>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	bf14      	ite	ne
 8006ccc:	2301      	movne	r3, #1
 8006cce:	2300      	moveq	r3, #0
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	e008      	b.n	8006ce6 <HAL_TIM_OC_Start_IT+0x6a>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	bf14      	ite	ne
 8006ce0:	2301      	movne	r3, #1
 8006ce2:	2300      	moveq	r3, #0
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e0c2      	b.n	8006e74 <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d104      	bne.n	8006cfe <HAL_TIM_OC_Start_IT+0x82>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cfc:	e013      	b.n	8006d26 <HAL_TIM_OC_Start_IT+0xaa>
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b04      	cmp	r3, #4
 8006d02:	d104      	bne.n	8006d0e <HAL_TIM_OC_Start_IT+0x92>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d0c:	e00b      	b.n	8006d26 <HAL_TIM_OC_Start_IT+0xaa>
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2b08      	cmp	r3, #8
 8006d12:	d104      	bne.n	8006d1e <HAL_TIM_OC_Start_IT+0xa2>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2202      	movs	r2, #2
 8006d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d1c:	e003      	b.n	8006d26 <HAL_TIM_OC_Start_IT+0xaa>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2202      	movs	r2, #2
 8006d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	2b0c      	cmp	r3, #12
 8006d2a:	d841      	bhi.n	8006db0 <HAL_TIM_OC_Start_IT+0x134>
 8006d2c:	a201      	add	r2, pc, #4	; (adr r2, 8006d34 <HAL_TIM_OC_Start_IT+0xb8>)
 8006d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d32:	bf00      	nop
 8006d34:	08006d69 	.word	0x08006d69
 8006d38:	08006db1 	.word	0x08006db1
 8006d3c:	08006db1 	.word	0x08006db1
 8006d40:	08006db1 	.word	0x08006db1
 8006d44:	08006d7b 	.word	0x08006d7b
 8006d48:	08006db1 	.word	0x08006db1
 8006d4c:	08006db1 	.word	0x08006db1
 8006d50:	08006db1 	.word	0x08006db1
 8006d54:	08006d8d 	.word	0x08006d8d
 8006d58:	08006db1 	.word	0x08006db1
 8006d5c:	08006db1 	.word	0x08006db1
 8006d60:	08006db1 	.word	0x08006db1
 8006d64:	08006d9f 	.word	0x08006d9f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f042 0202 	orr.w	r2, r2, #2
 8006d76:	60da      	str	r2, [r3, #12]
      break;
 8006d78:	e01b      	b.n	8006db2 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68da      	ldr	r2, [r3, #12]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f042 0204 	orr.w	r2, r2, #4
 8006d88:	60da      	str	r2, [r3, #12]
      break;
 8006d8a:	e012      	b.n	8006db2 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68da      	ldr	r2, [r3, #12]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f042 0208 	orr.w	r2, r2, #8
 8006d9a:	60da      	str	r2, [r3, #12]
      break;
 8006d9c:	e009      	b.n	8006db2 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68da      	ldr	r2, [r3, #12]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f042 0210 	orr.w	r2, r2, #16
 8006dac:	60da      	str	r2, [r3, #12]
      break;
 8006dae:	e000      	b.n	8006db2 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8006db0:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2201      	movs	r2, #1
 8006db8:	6839      	ldr	r1, [r7, #0]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 ff12 	bl	8007be4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a2d      	ldr	r2, [pc, #180]	; (8006e7c <HAL_TIM_OC_Start_IT+0x200>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d004      	beq.n	8006dd4 <HAL_TIM_OC_Start_IT+0x158>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a2c      	ldr	r2, [pc, #176]	; (8006e80 <HAL_TIM_OC_Start_IT+0x204>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d101      	bne.n	8006dd8 <HAL_TIM_OC_Start_IT+0x15c>
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e000      	b.n	8006dda <HAL_TIM_OC_Start_IT+0x15e>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d007      	beq.n	8006dee <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a22      	ldr	r2, [pc, #136]	; (8006e7c <HAL_TIM_OC_Start_IT+0x200>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d022      	beq.n	8006e3e <HAL_TIM_OC_Start_IT+0x1c2>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e00:	d01d      	beq.n	8006e3e <HAL_TIM_OC_Start_IT+0x1c2>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a1f      	ldr	r2, [pc, #124]	; (8006e84 <HAL_TIM_OC_Start_IT+0x208>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d018      	beq.n	8006e3e <HAL_TIM_OC_Start_IT+0x1c2>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a1d      	ldr	r2, [pc, #116]	; (8006e88 <HAL_TIM_OC_Start_IT+0x20c>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d013      	beq.n	8006e3e <HAL_TIM_OC_Start_IT+0x1c2>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a1c      	ldr	r2, [pc, #112]	; (8006e8c <HAL_TIM_OC_Start_IT+0x210>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d00e      	beq.n	8006e3e <HAL_TIM_OC_Start_IT+0x1c2>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a16      	ldr	r2, [pc, #88]	; (8006e80 <HAL_TIM_OC_Start_IT+0x204>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d009      	beq.n	8006e3e <HAL_TIM_OC_Start_IT+0x1c2>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a18      	ldr	r2, [pc, #96]	; (8006e90 <HAL_TIM_OC_Start_IT+0x214>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d004      	beq.n	8006e3e <HAL_TIM_OC_Start_IT+0x1c2>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a16      	ldr	r2, [pc, #88]	; (8006e94 <HAL_TIM_OC_Start_IT+0x218>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d111      	bne.n	8006e62 <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f003 0307 	and.w	r3, r3, #7
 8006e48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2b06      	cmp	r3, #6
 8006e4e:	d010      	beq.n	8006e72 <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0201 	orr.w	r2, r2, #1
 8006e5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e60:	e007      	b.n	8006e72 <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f042 0201 	orr.w	r2, r2, #1
 8006e70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	40010000 	.word	0x40010000
 8006e80:	40010400 	.word	0x40010400
 8006e84:	40000400 	.word	0x40000400
 8006e88:	40000800 	.word	0x40000800
 8006e8c:	40000c00 	.word	0x40000c00
 8006e90:	40014000 	.word	0x40014000
 8006e94:	40001800 	.word	0x40001800

08006e98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e041      	b.n	8006f2e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d106      	bne.n	8006ec4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f839 	bl	8006f36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	3304      	adds	r3, #4
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	4610      	mov	r0, r2
 8006ed8:	f000 fb9a 	bl	8007610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f36:	b480      	push	{r7}
 8006f38:	b083      	sub	sp, #12
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f3e:	bf00      	nop
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr

08006f4a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b086      	sub	sp, #24
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e097      	b.n	800708e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d106      	bne.n	8006f78 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7fb fd08 	bl	8002988 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	6812      	ldr	r2, [r2, #0]
 8006f8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f8e:	f023 0307 	bic.w	r3, r3, #7
 8006f92:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	3304      	adds	r3, #4
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	4610      	mov	r0, r2
 8006fa0:	f000 fb36 	bl	8007610 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fcc:	f023 0303 	bic.w	r3, r3, #3
 8006fd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	689a      	ldr	r2, [r3, #8]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	021b      	lsls	r3, r3, #8
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006fea:	f023 030c 	bic.w	r3, r3, #12
 8006fee:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ff6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ffa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	68da      	ldr	r2, [r3, #12]
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	69db      	ldr	r3, [r3, #28]
 8007004:	021b      	lsls	r3, r3, #8
 8007006:	4313      	orrs	r3, r2
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	4313      	orrs	r3, r2
 800700c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	011a      	lsls	r2, r3, #4
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	6a1b      	ldr	r3, [r3, #32]
 8007018:	031b      	lsls	r3, r3, #12
 800701a:	4313      	orrs	r3, r2
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	4313      	orrs	r3, r2
 8007020:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007028:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007030:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	011b      	lsls	r3, r3, #4
 800703c:	4313      	orrs	r3, r2
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	4313      	orrs	r3, r2
 8007042:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3718      	adds	r7, #24
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b082      	sub	sp, #8
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d122      	bne.n	80070f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	f003 0302 	and.w	r3, r3, #2
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d11b      	bne.n	80070f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f06f 0202 	mvn.w	r2, #2
 80070c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	f003 0303 	and.w	r3, r3, #3
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fa7b 	bl	80075d4 <HAL_TIM_IC_CaptureCallback>
 80070de:	e005      	b.n	80070ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 fa6d 	bl	80075c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fa7e 	bl	80075e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	f003 0304 	and.w	r3, r3, #4
 80070fc:	2b04      	cmp	r3, #4
 80070fe:	d122      	bne.n	8007146 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	f003 0304 	and.w	r3, r3, #4
 800710a:	2b04      	cmp	r3, #4
 800710c:	d11b      	bne.n	8007146 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f06f 0204 	mvn.w	r2, #4
 8007116:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2202      	movs	r2, #2
 800711c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007128:	2b00      	cmp	r3, #0
 800712a:	d003      	beq.n	8007134 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fa51 	bl	80075d4 <HAL_TIM_IC_CaptureCallback>
 8007132:	e005      	b.n	8007140 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fa43 	bl	80075c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fa54 	bl	80075e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	f003 0308 	and.w	r3, r3, #8
 8007150:	2b08      	cmp	r3, #8
 8007152:	d122      	bne.n	800719a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	f003 0308 	and.w	r3, r3, #8
 800715e:	2b08      	cmp	r3, #8
 8007160:	d11b      	bne.n	800719a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f06f 0208 	mvn.w	r2, #8
 800716a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2204      	movs	r2, #4
 8007170:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	f003 0303 	and.w	r3, r3, #3
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fa27 	bl	80075d4 <HAL_TIM_IC_CaptureCallback>
 8007186:	e005      	b.n	8007194 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 fa19 	bl	80075c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fa2a 	bl	80075e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	f003 0310 	and.w	r3, r3, #16
 80071a4:	2b10      	cmp	r3, #16
 80071a6:	d122      	bne.n	80071ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f003 0310 	and.w	r3, r3, #16
 80071b2:	2b10      	cmp	r3, #16
 80071b4:	d11b      	bne.n	80071ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f06f 0210 	mvn.w	r2, #16
 80071be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2208      	movs	r2, #8
 80071c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	69db      	ldr	r3, [r3, #28]
 80071cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d003      	beq.n	80071dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f9fd 	bl	80075d4 <HAL_TIM_IC_CaptureCallback>
 80071da:	e005      	b.n	80071e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f9ef 	bl	80075c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fa00 	bl	80075e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	f003 0301 	and.w	r3, r3, #1
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d10e      	bne.n	800721a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b01      	cmp	r3, #1
 8007208:	d107      	bne.n	800721a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f06f 0201 	mvn.w	r2, #1
 8007212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f9c9 	bl	80075ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007224:	2b80      	cmp	r3, #128	; 0x80
 8007226:	d10e      	bne.n	8007246 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007232:	2b80      	cmp	r3, #128	; 0x80
 8007234:	d107      	bne.n	8007246 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800723e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fd7b 	bl	8007d3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007250:	2b40      	cmp	r3, #64	; 0x40
 8007252:	d10e      	bne.n	8007272 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800725e:	2b40      	cmp	r3, #64	; 0x40
 8007260:	d107      	bne.n	8007272 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800726a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f9c5 	bl	80075fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	f003 0320 	and.w	r3, r3, #32
 800727c:	2b20      	cmp	r3, #32
 800727e:	d10e      	bne.n	800729e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	f003 0320 	and.w	r3, r3, #32
 800728a:	2b20      	cmp	r3, #32
 800728c:	d107      	bne.n	800729e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f06f 0220 	mvn.w	r2, #32
 8007296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fd45 	bl	8007d28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800729e:	bf00      	nop
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
	...

080072a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d101      	bne.n	80072c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80072be:	2302      	movs	r3, #2
 80072c0:	e0ac      	b.n	800741c <HAL_TIM_PWM_ConfigChannel+0x174>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2b0c      	cmp	r3, #12
 80072ce:	f200 809f 	bhi.w	8007410 <HAL_TIM_PWM_ConfigChannel+0x168>
 80072d2:	a201      	add	r2, pc, #4	; (adr r2, 80072d8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80072d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d8:	0800730d 	.word	0x0800730d
 80072dc:	08007411 	.word	0x08007411
 80072e0:	08007411 	.word	0x08007411
 80072e4:	08007411 	.word	0x08007411
 80072e8:	0800734d 	.word	0x0800734d
 80072ec:	08007411 	.word	0x08007411
 80072f0:	08007411 	.word	0x08007411
 80072f4:	08007411 	.word	0x08007411
 80072f8:	0800738f 	.word	0x0800738f
 80072fc:	08007411 	.word	0x08007411
 8007300:	08007411 	.word	0x08007411
 8007304:	08007411 	.word	0x08007411
 8007308:	080073cf 	.word	0x080073cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68b9      	ldr	r1, [r7, #8]
 8007312:	4618      	mov	r0, r3
 8007314:	f000 fa1c 	bl	8007750 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	699a      	ldr	r2, [r3, #24]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f042 0208 	orr.w	r2, r2, #8
 8007326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	699a      	ldr	r2, [r3, #24]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 0204 	bic.w	r2, r2, #4
 8007336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6999      	ldr	r1, [r3, #24]
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	691a      	ldr	r2, [r3, #16]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	619a      	str	r2, [r3, #24]
      break;
 800734a:	e062      	b.n	8007412 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68b9      	ldr	r1, [r7, #8]
 8007352:	4618      	mov	r0, r3
 8007354:	f000 fa6c 	bl	8007830 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	699a      	ldr	r2, [r3, #24]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	699a      	ldr	r2, [r3, #24]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6999      	ldr	r1, [r3, #24]
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	021a      	lsls	r2, r3, #8
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	430a      	orrs	r2, r1
 800738a:	619a      	str	r2, [r3, #24]
      break;
 800738c:	e041      	b.n	8007412 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68b9      	ldr	r1, [r7, #8]
 8007394:	4618      	mov	r0, r3
 8007396:	f000 fac1 	bl	800791c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	69da      	ldr	r2, [r3, #28]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f042 0208 	orr.w	r2, r2, #8
 80073a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	69da      	ldr	r2, [r3, #28]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f022 0204 	bic.w	r2, r2, #4
 80073b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	69d9      	ldr	r1, [r3, #28]
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	691a      	ldr	r2, [r3, #16]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	430a      	orrs	r2, r1
 80073ca:	61da      	str	r2, [r3, #28]
      break;
 80073cc:	e021      	b.n	8007412 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68b9      	ldr	r1, [r7, #8]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f000 fb15 	bl	8007a04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	69da      	ldr	r2, [r3, #28]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	69da      	ldr	r2, [r3, #28]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	69d9      	ldr	r1, [r3, #28]
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	021a      	lsls	r2, r3, #8
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	430a      	orrs	r2, r1
 800740c:	61da      	str	r2, [r3, #28]
      break;
 800740e:	e000      	b.n	8007412 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007410:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007434:	2b01      	cmp	r3, #1
 8007436:	d101      	bne.n	800743c <HAL_TIM_ConfigClockSource+0x18>
 8007438:	2302      	movs	r3, #2
 800743a:	e0b3      	b.n	80075a4 <HAL_TIM_ConfigClockSource+0x180>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2202      	movs	r2, #2
 8007448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800745a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007462:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007474:	d03e      	beq.n	80074f4 <HAL_TIM_ConfigClockSource+0xd0>
 8007476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800747a:	f200 8087 	bhi.w	800758c <HAL_TIM_ConfigClockSource+0x168>
 800747e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007482:	f000 8085 	beq.w	8007590 <HAL_TIM_ConfigClockSource+0x16c>
 8007486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800748a:	d87f      	bhi.n	800758c <HAL_TIM_ConfigClockSource+0x168>
 800748c:	2b70      	cmp	r3, #112	; 0x70
 800748e:	d01a      	beq.n	80074c6 <HAL_TIM_ConfigClockSource+0xa2>
 8007490:	2b70      	cmp	r3, #112	; 0x70
 8007492:	d87b      	bhi.n	800758c <HAL_TIM_ConfigClockSource+0x168>
 8007494:	2b60      	cmp	r3, #96	; 0x60
 8007496:	d050      	beq.n	800753a <HAL_TIM_ConfigClockSource+0x116>
 8007498:	2b60      	cmp	r3, #96	; 0x60
 800749a:	d877      	bhi.n	800758c <HAL_TIM_ConfigClockSource+0x168>
 800749c:	2b50      	cmp	r3, #80	; 0x50
 800749e:	d03c      	beq.n	800751a <HAL_TIM_ConfigClockSource+0xf6>
 80074a0:	2b50      	cmp	r3, #80	; 0x50
 80074a2:	d873      	bhi.n	800758c <HAL_TIM_ConfigClockSource+0x168>
 80074a4:	2b40      	cmp	r3, #64	; 0x40
 80074a6:	d058      	beq.n	800755a <HAL_TIM_ConfigClockSource+0x136>
 80074a8:	2b40      	cmp	r3, #64	; 0x40
 80074aa:	d86f      	bhi.n	800758c <HAL_TIM_ConfigClockSource+0x168>
 80074ac:	2b30      	cmp	r3, #48	; 0x30
 80074ae:	d064      	beq.n	800757a <HAL_TIM_ConfigClockSource+0x156>
 80074b0:	2b30      	cmp	r3, #48	; 0x30
 80074b2:	d86b      	bhi.n	800758c <HAL_TIM_ConfigClockSource+0x168>
 80074b4:	2b20      	cmp	r3, #32
 80074b6:	d060      	beq.n	800757a <HAL_TIM_ConfigClockSource+0x156>
 80074b8:	2b20      	cmp	r3, #32
 80074ba:	d867      	bhi.n	800758c <HAL_TIM_ConfigClockSource+0x168>
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d05c      	beq.n	800757a <HAL_TIM_ConfigClockSource+0x156>
 80074c0:	2b10      	cmp	r3, #16
 80074c2:	d05a      	beq.n	800757a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80074c4:	e062      	b.n	800758c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6818      	ldr	r0, [r3, #0]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	6899      	ldr	r1, [r3, #8]
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	685a      	ldr	r2, [r3, #4]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	f000 fb65 	bl	8007ba4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80074e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	609a      	str	r2, [r3, #8]
      break;
 80074f2:	e04e      	b.n	8007592 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6818      	ldr	r0, [r3, #0]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	6899      	ldr	r1, [r3, #8]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	f000 fb4e 	bl	8007ba4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689a      	ldr	r2, [r3, #8]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007516:	609a      	str	r2, [r3, #8]
      break;
 8007518:	e03b      	b.n	8007592 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6818      	ldr	r0, [r3, #0]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	6859      	ldr	r1, [r3, #4]
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	461a      	mov	r2, r3
 8007528:	f000 fac2 	bl	8007ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2150      	movs	r1, #80	; 0x50
 8007532:	4618      	mov	r0, r3
 8007534:	f000 fb1b 	bl	8007b6e <TIM_ITRx_SetConfig>
      break;
 8007538:	e02b      	b.n	8007592 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6818      	ldr	r0, [r3, #0]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	6859      	ldr	r1, [r3, #4]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	461a      	mov	r2, r3
 8007548:	f000 fae1 	bl	8007b0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2160      	movs	r1, #96	; 0x60
 8007552:	4618      	mov	r0, r3
 8007554:	f000 fb0b 	bl	8007b6e <TIM_ITRx_SetConfig>
      break;
 8007558:	e01b      	b.n	8007592 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6818      	ldr	r0, [r3, #0]
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	6859      	ldr	r1, [r3, #4]
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	461a      	mov	r2, r3
 8007568:	f000 faa2 	bl	8007ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2140      	movs	r1, #64	; 0x40
 8007572:	4618      	mov	r0, r3
 8007574:	f000 fafb 	bl	8007b6e <TIM_ITRx_SetConfig>
      break;
 8007578:	e00b      	b.n	8007592 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4619      	mov	r1, r3
 8007584:	4610      	mov	r0, r2
 8007586:	f000 faf2 	bl	8007b6e <TIM_ITRx_SetConfig>
        break;
 800758a:	e002      	b.n	8007592 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800758c:	bf00      	nop
 800758e:	e000      	b.n	8007592 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007590:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a40      	ldr	r2, [pc, #256]	; (8007724 <TIM_Base_SetConfig+0x114>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d013      	beq.n	8007650 <TIM_Base_SetConfig+0x40>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800762e:	d00f      	beq.n	8007650 <TIM_Base_SetConfig+0x40>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a3d      	ldr	r2, [pc, #244]	; (8007728 <TIM_Base_SetConfig+0x118>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d00b      	beq.n	8007650 <TIM_Base_SetConfig+0x40>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a3c      	ldr	r2, [pc, #240]	; (800772c <TIM_Base_SetConfig+0x11c>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d007      	beq.n	8007650 <TIM_Base_SetConfig+0x40>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a3b      	ldr	r2, [pc, #236]	; (8007730 <TIM_Base_SetConfig+0x120>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d003      	beq.n	8007650 <TIM_Base_SetConfig+0x40>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a3a      	ldr	r2, [pc, #232]	; (8007734 <TIM_Base_SetConfig+0x124>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d108      	bne.n	8007662 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	4313      	orrs	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a2f      	ldr	r2, [pc, #188]	; (8007724 <TIM_Base_SetConfig+0x114>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d02b      	beq.n	80076c2 <TIM_Base_SetConfig+0xb2>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007670:	d027      	beq.n	80076c2 <TIM_Base_SetConfig+0xb2>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a2c      	ldr	r2, [pc, #176]	; (8007728 <TIM_Base_SetConfig+0x118>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d023      	beq.n	80076c2 <TIM_Base_SetConfig+0xb2>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a2b      	ldr	r2, [pc, #172]	; (800772c <TIM_Base_SetConfig+0x11c>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d01f      	beq.n	80076c2 <TIM_Base_SetConfig+0xb2>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a2a      	ldr	r2, [pc, #168]	; (8007730 <TIM_Base_SetConfig+0x120>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d01b      	beq.n	80076c2 <TIM_Base_SetConfig+0xb2>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a29      	ldr	r2, [pc, #164]	; (8007734 <TIM_Base_SetConfig+0x124>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d017      	beq.n	80076c2 <TIM_Base_SetConfig+0xb2>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a28      	ldr	r2, [pc, #160]	; (8007738 <TIM_Base_SetConfig+0x128>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d013      	beq.n	80076c2 <TIM_Base_SetConfig+0xb2>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a27      	ldr	r2, [pc, #156]	; (800773c <TIM_Base_SetConfig+0x12c>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d00f      	beq.n	80076c2 <TIM_Base_SetConfig+0xb2>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a26      	ldr	r2, [pc, #152]	; (8007740 <TIM_Base_SetConfig+0x130>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d00b      	beq.n	80076c2 <TIM_Base_SetConfig+0xb2>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a25      	ldr	r2, [pc, #148]	; (8007744 <TIM_Base_SetConfig+0x134>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d007      	beq.n	80076c2 <TIM_Base_SetConfig+0xb2>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a24      	ldr	r2, [pc, #144]	; (8007748 <TIM_Base_SetConfig+0x138>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d003      	beq.n	80076c2 <TIM_Base_SetConfig+0xb2>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a23      	ldr	r2, [pc, #140]	; (800774c <TIM_Base_SetConfig+0x13c>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d108      	bne.n	80076d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	4313      	orrs	r3, r2
 80076e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	689a      	ldr	r2, [r3, #8]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a0a      	ldr	r2, [pc, #40]	; (8007724 <TIM_Base_SetConfig+0x114>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d003      	beq.n	8007708 <TIM_Base_SetConfig+0xf8>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a0c      	ldr	r2, [pc, #48]	; (8007734 <TIM_Base_SetConfig+0x124>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d103      	bne.n	8007710 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	691a      	ldr	r2, [r3, #16]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	615a      	str	r2, [r3, #20]
}
 8007716:	bf00      	nop
 8007718:	3714      	adds	r7, #20
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	40010000 	.word	0x40010000
 8007728:	40000400 	.word	0x40000400
 800772c:	40000800 	.word	0x40000800
 8007730:	40000c00 	.word	0x40000c00
 8007734:	40010400 	.word	0x40010400
 8007738:	40014000 	.word	0x40014000
 800773c:	40014400 	.word	0x40014400
 8007740:	40014800 	.word	0x40014800
 8007744:	40001800 	.word	0x40001800
 8007748:	40001c00 	.word	0x40001c00
 800774c:	40002000 	.word	0x40002000

08007750 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007750:	b480      	push	{r7}
 8007752:	b087      	sub	sp, #28
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a1b      	ldr	r3, [r3, #32]
 800775e:	f023 0201 	bic.w	r2, r3, #1
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a1b      	ldr	r3, [r3, #32]
 800776a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800777e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f023 0303 	bic.w	r3, r3, #3
 8007786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	4313      	orrs	r3, r2
 8007790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	f023 0302 	bic.w	r3, r3, #2
 8007798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a20      	ldr	r2, [pc, #128]	; (8007828 <TIM_OC1_SetConfig+0xd8>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d003      	beq.n	80077b4 <TIM_OC1_SetConfig+0x64>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a1f      	ldr	r2, [pc, #124]	; (800782c <TIM_OC1_SetConfig+0xdc>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d10c      	bne.n	80077ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	f023 0308 	bic.w	r3, r3, #8
 80077ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	697a      	ldr	r2, [r7, #20]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	f023 0304 	bic.w	r3, r3, #4
 80077cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a15      	ldr	r2, [pc, #84]	; (8007828 <TIM_OC1_SetConfig+0xd8>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d003      	beq.n	80077de <TIM_OC1_SetConfig+0x8e>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a14      	ldr	r2, [pc, #80]	; (800782c <TIM_OC1_SetConfig+0xdc>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d111      	bne.n	8007802 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	4313      	orrs	r3, r2
 8007800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	685a      	ldr	r2, [r3, #4]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	697a      	ldr	r2, [r7, #20]
 800781a:	621a      	str	r2, [r3, #32]
}
 800781c:	bf00      	nop
 800781e:	371c      	adds	r7, #28
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr
 8007828:	40010000 	.word	0x40010000
 800782c:	40010400 	.word	0x40010400

08007830 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007830:	b480      	push	{r7}
 8007832:	b087      	sub	sp, #28
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	f023 0210 	bic.w	r2, r3, #16
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800785e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	021b      	lsls	r3, r3, #8
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	4313      	orrs	r3, r2
 8007872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	f023 0320 	bic.w	r3, r3, #32
 800787a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	011b      	lsls	r3, r3, #4
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	4313      	orrs	r3, r2
 8007886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a22      	ldr	r2, [pc, #136]	; (8007914 <TIM_OC2_SetConfig+0xe4>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d003      	beq.n	8007898 <TIM_OC2_SetConfig+0x68>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a21      	ldr	r2, [pc, #132]	; (8007918 <TIM_OC2_SetConfig+0xe8>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d10d      	bne.n	80078b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800789e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	011b      	lsls	r3, r3, #4
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a17      	ldr	r2, [pc, #92]	; (8007914 <TIM_OC2_SetConfig+0xe4>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d003      	beq.n	80078c4 <TIM_OC2_SetConfig+0x94>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a16      	ldr	r2, [pc, #88]	; (8007918 <TIM_OC2_SetConfig+0xe8>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d113      	bne.n	80078ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	4313      	orrs	r3, r2
 80078de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	697a      	ldr	r2, [r7, #20]
 8007904:	621a      	str	r2, [r3, #32]
}
 8007906:	bf00      	nop
 8007908:	371c      	adds	r7, #28
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	40010000 	.word	0x40010000
 8007918:	40010400 	.word	0x40010400

0800791c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800791c:	b480      	push	{r7}
 800791e:	b087      	sub	sp, #28
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	69db      	ldr	r3, [r3, #28]
 8007942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800794a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f023 0303 	bic.w	r3, r3, #3
 8007952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	4313      	orrs	r3, r2
 800795c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	021b      	lsls	r3, r3, #8
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	4313      	orrs	r3, r2
 8007970:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a21      	ldr	r2, [pc, #132]	; (80079fc <TIM_OC3_SetConfig+0xe0>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d003      	beq.n	8007982 <TIM_OC3_SetConfig+0x66>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a20      	ldr	r2, [pc, #128]	; (8007a00 <TIM_OC3_SetConfig+0xe4>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d10d      	bne.n	800799e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007988:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	021b      	lsls	r3, r3, #8
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	4313      	orrs	r3, r2
 8007994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800799c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a16      	ldr	r2, [pc, #88]	; (80079fc <TIM_OC3_SetConfig+0xe0>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d003      	beq.n	80079ae <TIM_OC3_SetConfig+0x92>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a15      	ldr	r2, [pc, #84]	; (8007a00 <TIM_OC3_SetConfig+0xe4>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d113      	bne.n	80079d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	011b      	lsls	r3, r3, #4
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	011b      	lsls	r3, r3, #4
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	685a      	ldr	r2, [r3, #4]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	697a      	ldr	r2, [r7, #20]
 80079ee:	621a      	str	r2, [r3, #32]
}
 80079f0:	bf00      	nop
 80079f2:	371c      	adds	r7, #28
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	40010000 	.word	0x40010000
 8007a00:	40010400 	.word	0x40010400

08007a04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b087      	sub	sp, #28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	69db      	ldr	r3, [r3, #28]
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	021b      	lsls	r3, r3, #8
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	031b      	lsls	r3, r3, #12
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a12      	ldr	r2, [pc, #72]	; (8007aa8 <TIM_OC4_SetConfig+0xa4>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d003      	beq.n	8007a6c <TIM_OC4_SetConfig+0x68>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a11      	ldr	r2, [pc, #68]	; (8007aac <TIM_OC4_SetConfig+0xa8>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d109      	bne.n	8007a80 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	695b      	ldr	r3, [r3, #20]
 8007a78:	019b      	lsls	r3, r3, #6
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	621a      	str	r2, [r3, #32]
}
 8007a9a:	bf00      	nop
 8007a9c:	371c      	adds	r7, #28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	40010000 	.word	0x40010000
 8007aac:	40010400 	.word	0x40010400

08007ab0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b087      	sub	sp, #28
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6a1b      	ldr	r3, [r3, #32]
 8007ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	f023 0201 	bic.w	r2, r3, #1
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	699b      	ldr	r3, [r3, #24]
 8007ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	011b      	lsls	r3, r3, #4
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f023 030a 	bic.w	r3, r3, #10
 8007aec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	621a      	str	r2, [r3, #32]
}
 8007b02:	bf00      	nop
 8007b04:	371c      	adds	r7, #28
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b087      	sub	sp, #28
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	60f8      	str	r0, [r7, #12]
 8007b16:	60b9      	str	r1, [r7, #8]
 8007b18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	f023 0210 	bic.w	r2, r3, #16
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6a1b      	ldr	r3, [r3, #32]
 8007b30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	031b      	lsls	r3, r3, #12
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	011b      	lsls	r3, r3, #4
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	697a      	ldr	r2, [r7, #20]
 8007b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	621a      	str	r2, [r3, #32]
}
 8007b62:	bf00      	nop
 8007b64:	371c      	adds	r7, #28
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr

08007b6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b6e:	b480      	push	{r7}
 8007b70:	b085      	sub	sp, #20
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
 8007b76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	f043 0307 	orr.w	r3, r3, #7
 8007b90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	609a      	str	r2, [r3, #8]
}
 8007b98:	bf00      	nop
 8007b9a:	3714      	adds	r7, #20
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b087      	sub	sp, #28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
 8007bb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	021a      	lsls	r2, r3, #8
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	431a      	orrs	r2, r3
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	697a      	ldr	r2, [r7, #20]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	609a      	str	r2, [r3, #8]
}
 8007bd8:	bf00      	nop
 8007bda:	371c      	adds	r7, #28
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b087      	sub	sp, #28
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	f003 031f 	and.w	r3, r3, #31
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6a1a      	ldr	r2, [r3, #32]
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	43db      	mvns	r3, r3
 8007c06:	401a      	ands	r2, r3
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6a1a      	ldr	r2, [r3, #32]
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f003 031f 	and.w	r3, r3, #31
 8007c16:	6879      	ldr	r1, [r7, #4]
 8007c18:	fa01 f303 	lsl.w	r3, r1, r3
 8007c1c:	431a      	orrs	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	621a      	str	r2, [r3, #32]
}
 8007c22:	bf00      	nop
 8007c24:	371c      	adds	r7, #28
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
	...

08007c30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d101      	bne.n	8007c48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c44:	2302      	movs	r3, #2
 8007c46:	e05a      	b.n	8007cfe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2202      	movs	r2, #2
 8007c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a21      	ldr	r2, [pc, #132]	; (8007d0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d022      	beq.n	8007cd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c94:	d01d      	beq.n	8007cd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a1d      	ldr	r2, [pc, #116]	; (8007d10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d018      	beq.n	8007cd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a1b      	ldr	r2, [pc, #108]	; (8007d14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d013      	beq.n	8007cd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a1a      	ldr	r2, [pc, #104]	; (8007d18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d00e      	beq.n	8007cd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a18      	ldr	r2, [pc, #96]	; (8007d1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d009      	beq.n	8007cd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a17      	ldr	r2, [pc, #92]	; (8007d20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d004      	beq.n	8007cd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a15      	ldr	r2, [pc, #84]	; (8007d24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d10c      	bne.n	8007cec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68ba      	ldr	r2, [r7, #8]
 8007cea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3714      	adds	r7, #20
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	40010000 	.word	0x40010000
 8007d10:	40000400 	.word	0x40000400
 8007d14:	40000800 	.word	0x40000800
 8007d18:	40000c00 	.word	0x40000c00
 8007d1c:	40010400 	.word	0x40010400
 8007d20:	40014000 	.word	0x40014000
 8007d24:	40001800 	.word	0x40001800

08007d28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d50:	b084      	sub	sp, #16
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b084      	sub	sp, #16
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	f107 001c 	add.w	r0, r7, #28
 8007d5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d122      	bne.n	8007dae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d105      	bne.n	8007da2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f94a 	bl	800803c <USB_CoreReset>
 8007da8:	4603      	mov	r3, r0
 8007daa:	73fb      	strb	r3, [r7, #15]
 8007dac:	e01a      	b.n	8007de4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 f93e 	bl	800803c <USB_CoreReset>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d106      	bne.n	8007dd8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	639a      	str	r2, [r3, #56]	; 0x38
 8007dd6:	e005      	b.n	8007de4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ddc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d10b      	bne.n	8007e02 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	f043 0206 	orr.w	r2, r3, #6
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	f043 0220 	orr.w	r2, r3, #32
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e0e:	b004      	add	sp, #16
 8007e10:	4770      	bx	lr

08007e12 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b083      	sub	sp, #12
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	f043 0201 	orr.w	r2, r3, #1
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f023 0201 	bic.w	r2, r3, #1
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b082      	sub	sp, #8
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
 8007e5e:	460b      	mov	r3, r1
 8007e60:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e6e:	78fb      	ldrb	r3, [r7, #3]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d106      	bne.n	8007e82 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	60da      	str	r2, [r3, #12]
 8007e80:	e00b      	b.n	8007e9a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007e82:	78fb      	ldrb	r3, [r7, #3]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d106      	bne.n	8007e96 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	60da      	str	r2, [r3, #12]
 8007e94:	e001      	b.n	8007e9a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e003      	b.n	8007ea2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007e9a:	2032      	movs	r0, #50	; 0x32
 8007e9c:	f7fa ff6e 	bl	8002d7c <HAL_Delay>

  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
	...

08007eac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	019b      	lsls	r3, r3, #6
 8007ebe:	f043 0220 	orr.w	r2, r3, #32
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	60fb      	str	r3, [r7, #12]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4a09      	ldr	r2, [pc, #36]	; (8007ef4 <USB_FlushTxFifo+0x48>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d901      	bls.n	8007ed8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	e006      	b.n	8007ee6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	f003 0320 	and.w	r3, r3, #32
 8007ee0:	2b20      	cmp	r3, #32
 8007ee2:	d0f0      	beq.n	8007ec6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3714      	adds	r7, #20
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	00030d40 	.word	0x00030d40

08007ef8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007f00:	2300      	movs	r3, #0
 8007f02:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2210      	movs	r2, #16
 8007f08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	60fb      	str	r3, [r7, #12]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	4a09      	ldr	r2, [pc, #36]	; (8007f38 <USB_FlushRxFifo+0x40>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d901      	bls.n	8007f1c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e006      	b.n	8007f2a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	f003 0310 	and.w	r3, r3, #16
 8007f24:	2b10      	cmp	r3, #16
 8007f26:	d0f0      	beq.n	8007f0a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	00030d40 	.word	0x00030d40

08007f3c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b089      	sub	sp, #36	; 0x24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	4611      	mov	r1, r2
 8007f48:	461a      	mov	r2, r3
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	71fb      	strb	r3, [r7, #7]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007f5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d11a      	bne.n	8007f98 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007f62:	88bb      	ldrh	r3, [r7, #4]
 8007f64:	3303      	adds	r3, #3
 8007f66:	089b      	lsrs	r3, r3, #2
 8007f68:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	61bb      	str	r3, [r7, #24]
 8007f6e:	e00f      	b.n	8007f90 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007f70:	79fb      	ldrb	r3, [r7, #7]
 8007f72:	031a      	lsls	r2, r3, #12
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	3304      	adds	r3, #4
 8007f88:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	61bb      	str	r3, [r7, #24]
 8007f90:	69ba      	ldr	r2, [r7, #24]
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d3eb      	bcc.n	8007f70 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3724      	adds	r7, #36	; 0x24
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b089      	sub	sp, #36	; 0x24
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	60f8      	str	r0, [r7, #12]
 8007fae:	60b9      	str	r1, [r7, #8]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007fbc:	88fb      	ldrh	r3, [r7, #6]
 8007fbe:	3303      	adds	r3, #3
 8007fc0:	089b      	lsrs	r3, r3, #2
 8007fc2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	61bb      	str	r3, [r7, #24]
 8007fc8:	e00b      	b.n	8007fe2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	601a      	str	r2, [r3, #0]
    pDest++;
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	3304      	adds	r3, #4
 8007fda:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	61bb      	str	r3, [r7, #24]
 8007fe2:	69ba      	ldr	r2, [r7, #24]
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d3ef      	bcc.n	8007fca <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007fea:	69fb      	ldr	r3, [r7, #28]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3724      	adds	r7, #36	; 0x24
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	695b      	ldr	r3, [r3, #20]
 8008004:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	4013      	ands	r3, r2
 800800e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008010:	68fb      	ldr	r3, [r7, #12]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3714      	adds	r7, #20
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr

0800801e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800801e:	b480      	push	{r7}
 8008020:	b083      	sub	sp, #12
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	f003 0301 	and.w	r3, r3, #1
}
 800802e:	4618      	mov	r0, r3
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
	...

0800803c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008044:	2300      	movs	r3, #0
 8008046:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	3301      	adds	r3, #1
 800804c:	60fb      	str	r3, [r7, #12]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	4a13      	ldr	r2, [pc, #76]	; (80080a0 <USB_CoreReset+0x64>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d901      	bls.n	800805a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	e01b      	b.n	8008092 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	2b00      	cmp	r3, #0
 8008060:	daf2      	bge.n	8008048 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008062:	2300      	movs	r3, #0
 8008064:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	f043 0201 	orr.w	r2, r3, #1
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	3301      	adds	r3, #1
 8008076:	60fb      	str	r3, [r7, #12]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	4a09      	ldr	r2, [pc, #36]	; (80080a0 <USB_CoreReset+0x64>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d901      	bls.n	8008084 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008080:	2303      	movs	r3, #3
 8008082:	e006      	b.n	8008092 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	f003 0301 	and.w	r3, r3, #1
 800808c:	2b01      	cmp	r3, #1
 800808e:	d0f0      	beq.n	8008072 <USB_CoreReset+0x36>

  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3714      	adds	r7, #20
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	00030d40 	.word	0x00030d40

080080a4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080a4:	b084      	sub	sp, #16
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	f107 001c 	add.w	r0, r7, #28
 80080b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080c0:	461a      	mov	r2, r3
 80080c2:	2300      	movs	r3, #0
 80080c4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d018      	beq.n	8008128 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d10a      	bne.n	8008112 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800810a:	f043 0304 	orr.w	r3, r3, #4
 800810e:	6013      	str	r3, [r2, #0]
 8008110:	e014      	b.n	800813c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008120:	f023 0304 	bic.w	r3, r3, #4
 8008124:	6013      	str	r3, [r2, #0]
 8008126:	e009      	b.n	800813c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008136:	f023 0304 	bic.w	r3, r3, #4
 800813a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800813c:	2110      	movs	r1, #16
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7ff feb4 	bl	8007eac <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7ff fed7 	bl	8007ef8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800814a:	2300      	movs	r3, #0
 800814c:	60fb      	str	r3, [r7, #12]
 800814e:	e015      	b.n	800817c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	015a      	lsls	r2, r3, #5
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	4413      	add	r3, r2
 8008158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800815c:	461a      	mov	r2, r3
 800815e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008162:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	015a      	lsls	r2, r3, #5
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	4413      	add	r3, r2
 800816c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008170:	461a      	mov	r2, r3
 8008172:	2300      	movs	r3, #0
 8008174:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	3301      	adds	r3, #1
 800817a:	60fb      	str	r3, [r7, #12]
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	429a      	cmp	r2, r3
 8008182:	d3e5      	bcc.n	8008150 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8008184:	2101      	movs	r1, #1
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f8ac 	bl	80082e4 <USB_DriveVbus>

  HAL_Delay(200U);
 800818c:	20c8      	movs	r0, #200	; 0xc8
 800818e:	f7fa fdf5 	bl	8002d7c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800819e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00b      	beq.n	80081c4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081b2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a14      	ldr	r2, [pc, #80]	; (8008208 <USB_HostInit+0x164>)
 80081b8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a13      	ldr	r2, [pc, #76]	; (800820c <USB_HostInit+0x168>)
 80081be:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80081c2:	e009      	b.n	80081d8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2280      	movs	r2, #128	; 0x80
 80081c8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a10      	ldr	r2, [pc, #64]	; (8008210 <USB_HostInit+0x16c>)
 80081ce:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a10      	ldr	r2, [pc, #64]	; (8008214 <USB_HostInit+0x170>)
 80081d4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80081d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d105      	bne.n	80081ea <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	f043 0210 	orr.w	r2, r3, #16
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	699a      	ldr	r2, [r3, #24]
 80081ee:	4b0a      	ldr	r3, [pc, #40]	; (8008218 <USB_HostInit+0x174>)
 80081f0:	4313      	orrs	r3, r2
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008202:	b004      	add	sp, #16
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	01000200 	.word	0x01000200
 800820c:	00e00300 	.word	0x00e00300
 8008210:	00600080 	.word	0x00600080
 8008214:	004000e0 	.word	0x004000e0
 8008218:	a3200008 	.word	0xa3200008

0800821c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	460b      	mov	r3, r1
 8008226:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800823a:	f023 0303 	bic.w	r3, r3, #3
 800823e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	78fb      	ldrb	r3, [r7, #3]
 800824a:	f003 0303 	and.w	r3, r3, #3
 800824e:	68f9      	ldr	r1, [r7, #12]
 8008250:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008254:	4313      	orrs	r3, r2
 8008256:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008258:	78fb      	ldrb	r3, [r7, #3]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d107      	bne.n	800826e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008264:	461a      	mov	r2, r3
 8008266:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800826a:	6053      	str	r3, [r2, #4]
 800826c:	e009      	b.n	8008282 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800826e:	78fb      	ldrb	r3, [r7, #3]
 8008270:	2b02      	cmp	r3, #2
 8008272:	d106      	bne.n	8008282 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800827a:	461a      	mov	r2, r3
 800827c:	f241 7370 	movw	r3, #6000	; 0x1770
 8008280:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3714      	adds	r7, #20
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800829c:	2300      	movs	r3, #0
 800829e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80082b0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80082ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082be:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80082c0:	2064      	movs	r0, #100	; 0x64
 80082c2:	f7fa fd5b 	bl	8002d7c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80082ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082d2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80082d4:	200a      	movs	r0, #10
 80082d6:	f7fa fd51 	bl	8002d7c <HAL_Delay>

  return HAL_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3710      	adds	r7, #16
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	460b      	mov	r3, r1
 80082ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80082f4:	2300      	movs	r3, #0
 80082f6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008308:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d109      	bne.n	8008328 <USB_DriveVbus+0x44>
 8008314:	78fb      	ldrb	r3, [r7, #3]
 8008316:	2b01      	cmp	r3, #1
 8008318:	d106      	bne.n	8008328 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008322:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008326:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800832e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008332:	d109      	bne.n	8008348 <USB_DriveVbus+0x64>
 8008334:	78fb      	ldrb	r3, [r7, #3]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d106      	bne.n	8008348 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008342:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008346:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008356:	b480      	push	{r7}
 8008358:	b085      	sub	sp, #20
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008362:	2300      	movs	r3, #0
 8008364:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	0c5b      	lsrs	r3, r3, #17
 8008374:	f003 0303 	and.w	r3, r3, #3
}
 8008378:	4618      	mov	r0, r3
 800837a:	3714      	adds	r7, #20
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	b29b      	uxth	r3, r3
}
 800839a:	4618      	mov	r0, r3
 800839c:	3714      	adds	r7, #20
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
	...

080083a8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b088      	sub	sp, #32
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	4608      	mov	r0, r1
 80083b2:	4611      	mov	r1, r2
 80083b4:	461a      	mov	r2, r3
 80083b6:	4603      	mov	r3, r0
 80083b8:	70fb      	strb	r3, [r7, #3]
 80083ba:	460b      	mov	r3, r1
 80083bc:	70bb      	strb	r3, [r7, #2]
 80083be:	4613      	mov	r3, r2
 80083c0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80083c2:	2300      	movs	r3, #0
 80083c4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80083ca:	78fb      	ldrb	r3, [r7, #3]
 80083cc:	015a      	lsls	r2, r3, #5
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	4413      	add	r3, r2
 80083d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083d6:	461a      	mov	r2, r3
 80083d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083dc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80083de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083e2:	2b03      	cmp	r3, #3
 80083e4:	d87e      	bhi.n	80084e4 <USB_HC_Init+0x13c>
 80083e6:	a201      	add	r2, pc, #4	; (adr r2, 80083ec <USB_HC_Init+0x44>)
 80083e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ec:	080083fd 	.word	0x080083fd
 80083f0:	080084a7 	.word	0x080084a7
 80083f4:	080083fd 	.word	0x080083fd
 80083f8:	08008469 	.word	0x08008469
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80083fc:	78fb      	ldrb	r3, [r7, #3]
 80083fe:	015a      	lsls	r2, r3, #5
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	4413      	add	r3, r2
 8008404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008408:	461a      	mov	r2, r3
 800840a:	f240 439d 	movw	r3, #1181	; 0x49d
 800840e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008410:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008414:	2b00      	cmp	r3, #0
 8008416:	da10      	bge.n	800843a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008418:	78fb      	ldrb	r3, [r7, #3]
 800841a:	015a      	lsls	r2, r3, #5
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	4413      	add	r3, r2
 8008420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	78fa      	ldrb	r2, [r7, #3]
 8008428:	0151      	lsls	r1, r2, #5
 800842a:	693a      	ldr	r2, [r7, #16]
 800842c:	440a      	add	r2, r1
 800842e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008436:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008438:	e057      	b.n	80084ea <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800843e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008442:	2b00      	cmp	r3, #0
 8008444:	d051      	beq.n	80084ea <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008446:	78fb      	ldrb	r3, [r7, #3]
 8008448:	015a      	lsls	r2, r3, #5
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	4413      	add	r3, r2
 800844e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	78fa      	ldrb	r2, [r7, #3]
 8008456:	0151      	lsls	r1, r2, #5
 8008458:	693a      	ldr	r2, [r7, #16]
 800845a:	440a      	add	r2, r1
 800845c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008460:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008464:	60d3      	str	r3, [r2, #12]
      break;
 8008466:	e040      	b.n	80084ea <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008468:	78fb      	ldrb	r3, [r7, #3]
 800846a:	015a      	lsls	r2, r3, #5
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	4413      	add	r3, r2
 8008470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008474:	461a      	mov	r2, r3
 8008476:	f240 639d 	movw	r3, #1693	; 0x69d
 800847a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800847c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008480:	2b00      	cmp	r3, #0
 8008482:	da34      	bge.n	80084ee <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008484:	78fb      	ldrb	r3, [r7, #3]
 8008486:	015a      	lsls	r2, r3, #5
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	4413      	add	r3, r2
 800848c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	78fa      	ldrb	r2, [r7, #3]
 8008494:	0151      	lsls	r1, r2, #5
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	440a      	add	r2, r1
 800849a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800849e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084a2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80084a4:	e023      	b.n	80084ee <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80084a6:	78fb      	ldrb	r3, [r7, #3]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084b2:	461a      	mov	r2, r3
 80084b4:	f240 2325 	movw	r3, #549	; 0x225
 80084b8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80084ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	da17      	bge.n	80084f2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80084c2:	78fb      	ldrb	r3, [r7, #3]
 80084c4:	015a      	lsls	r2, r3, #5
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	4413      	add	r3, r2
 80084ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	78fa      	ldrb	r2, [r7, #3]
 80084d2:	0151      	lsls	r1, r2, #5
 80084d4:	693a      	ldr	r2, [r7, #16]
 80084d6:	440a      	add	r2, r1
 80084d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084dc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80084e0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80084e2:	e006      	b.n	80084f2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	77fb      	strb	r3, [r7, #31]
      break;
 80084e8:	e004      	b.n	80084f4 <USB_HC_Init+0x14c>
      break;
 80084ea:	bf00      	nop
 80084ec:	e002      	b.n	80084f4 <USB_HC_Init+0x14c>
      break;
 80084ee:	bf00      	nop
 80084f0:	e000      	b.n	80084f4 <USB_HC_Init+0x14c>
      break;
 80084f2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084fa:	699a      	ldr	r2, [r3, #24]
 80084fc:	78fb      	ldrb	r3, [r7, #3]
 80084fe:	f003 030f 	and.w	r3, r3, #15
 8008502:	2101      	movs	r1, #1
 8008504:	fa01 f303 	lsl.w	r3, r1, r3
 8008508:	6939      	ldr	r1, [r7, #16]
 800850a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800850e:	4313      	orrs	r3, r2
 8008510:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800851e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008522:	2b00      	cmp	r3, #0
 8008524:	da03      	bge.n	800852e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800852a:	61bb      	str	r3, [r7, #24]
 800852c:	e001      	b.n	8008532 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800852e:	2300      	movs	r3, #0
 8008530:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7ff ff0f 	bl	8008356 <USB_GetHostSpeed>
 8008538:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800853a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800853e:	2b02      	cmp	r3, #2
 8008540:	d106      	bne.n	8008550 <USB_HC_Init+0x1a8>
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2b02      	cmp	r3, #2
 8008546:	d003      	beq.n	8008550 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008548:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800854c:	617b      	str	r3, [r7, #20]
 800854e:	e001      	b.n	8008554 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008550:	2300      	movs	r3, #0
 8008552:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008554:	787b      	ldrb	r3, [r7, #1]
 8008556:	059b      	lsls	r3, r3, #22
 8008558:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800855c:	78bb      	ldrb	r3, [r7, #2]
 800855e:	02db      	lsls	r3, r3, #11
 8008560:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008564:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008566:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800856a:	049b      	lsls	r3, r3, #18
 800856c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008570:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008572:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008574:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008578:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800857e:	78fb      	ldrb	r3, [r7, #3]
 8008580:	0159      	lsls	r1, r3, #5
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	440b      	add	r3, r1
 8008586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800858a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008590:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008592:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008596:	2b03      	cmp	r3, #3
 8008598:	d10f      	bne.n	80085ba <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800859a:	78fb      	ldrb	r3, [r7, #3]
 800859c:	015a      	lsls	r2, r3, #5
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	4413      	add	r3, r2
 80085a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	78fa      	ldrb	r2, [r7, #3]
 80085aa:	0151      	lsls	r1, r2, #5
 80085ac:	693a      	ldr	r2, [r7, #16]
 80085ae:	440a      	add	r2, r1
 80085b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80085b8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80085ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3720      	adds	r7, #32
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b08c      	sub	sp, #48	; 0x30
 80085c8:	af02      	add	r7, sp, #8
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	4613      	mov	r3, r2
 80085d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	785b      	ldrb	r3, [r3, #1]
 80085da:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80085dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085e0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d02d      	beq.n	800864a <USB_HC_StartXfer+0x86>
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	791b      	ldrb	r3, [r3, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d129      	bne.n	800864a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80085f6:	79fb      	ldrb	r3, [r7, #7]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d117      	bne.n	800862c <USB_HC_StartXfer+0x68>
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	79db      	ldrb	r3, [r3, #7]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d003      	beq.n	800860c <USB_HC_StartXfer+0x48>
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	79db      	ldrb	r3, [r3, #7]
 8008608:	2b02      	cmp	r3, #2
 800860a:	d10f      	bne.n	800862c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	015a      	lsls	r2, r3, #5
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	4413      	add	r3, r2
 8008614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	69fa      	ldr	r2, [r7, #28]
 800861c:	0151      	lsls	r1, r2, #5
 800861e:	6a3a      	ldr	r2, [r7, #32]
 8008620:	440a      	add	r2, r1
 8008622:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800862a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800862c:	79fb      	ldrb	r3, [r7, #7]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d10b      	bne.n	800864a <USB_HC_StartXfer+0x86>
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	795b      	ldrb	r3, [r3, #5]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d107      	bne.n	800864a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	785b      	ldrb	r3, [r3, #1]
 800863e:	4619      	mov	r1, r3
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f000 fa2f 	bl	8008aa4 <USB_DoPing>
      return HAL_OK;
 8008646:	2300      	movs	r3, #0
 8008648:	e0f8      	b.n	800883c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d018      	beq.n	8008684 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	695b      	ldr	r3, [r3, #20]
 8008656:	68ba      	ldr	r2, [r7, #8]
 8008658:	8912      	ldrh	r2, [r2, #8]
 800865a:	4413      	add	r3, r2
 800865c:	3b01      	subs	r3, #1
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	8912      	ldrh	r2, [r2, #8]
 8008662:	fbb3 f3f2 	udiv	r3, r3, r2
 8008666:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008668:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800866a:	8b7b      	ldrh	r3, [r7, #26]
 800866c:	429a      	cmp	r2, r3
 800866e:	d90b      	bls.n	8008688 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008670:	8b7b      	ldrh	r3, [r7, #26]
 8008672:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008674:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	8912      	ldrh	r2, [r2, #8]
 800867a:	fb02 f203 	mul.w	r2, r2, r3
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	611a      	str	r2, [r3, #16]
 8008682:	e001      	b.n	8008688 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008684:	2301      	movs	r3, #1
 8008686:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	78db      	ldrb	r3, [r3, #3]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d007      	beq.n	80086a0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008690:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008692:	68ba      	ldr	r2, [r7, #8]
 8008694:	8912      	ldrh	r2, [r2, #8]
 8008696:	fb02 f203 	mul.w	r2, r2, r3
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	611a      	str	r2, [r3, #16]
 800869e:	e003      	b.n	80086a8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	695a      	ldr	r2, [r3, #20]
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80086b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80086b2:	04d9      	lsls	r1, r3, #19
 80086b4:	4b63      	ldr	r3, [pc, #396]	; (8008844 <USB_HC_StartXfer+0x280>)
 80086b6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80086b8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	7a9b      	ldrb	r3, [r3, #10]
 80086be:	075b      	lsls	r3, r3, #29
 80086c0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80086c4:	69f9      	ldr	r1, [r7, #28]
 80086c6:	0148      	lsls	r0, r1, #5
 80086c8:	6a39      	ldr	r1, [r7, #32]
 80086ca:	4401      	add	r1, r0
 80086cc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80086d0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80086d2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80086d4:	79fb      	ldrb	r3, [r7, #7]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d009      	beq.n	80086ee <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	68d9      	ldr	r1, [r3, #12]
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	015a      	lsls	r2, r3, #5
 80086e2:	6a3b      	ldr	r3, [r7, #32]
 80086e4:	4413      	add	r3, r2
 80086e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ea:	460a      	mov	r2, r1
 80086ec:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80086ee:	6a3b      	ldr	r3, [r7, #32]
 80086f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	bf0c      	ite	eq
 80086fe:	2301      	moveq	r3, #1
 8008700:	2300      	movne	r3, #0
 8008702:	b2db      	uxtb	r3, r3
 8008704:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	015a      	lsls	r2, r3, #5
 800870a:	6a3b      	ldr	r3, [r7, #32]
 800870c:	4413      	add	r3, r2
 800870e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	69fa      	ldr	r2, [r7, #28]
 8008716:	0151      	lsls	r1, r2, #5
 8008718:	6a3a      	ldr	r2, [r7, #32]
 800871a:	440a      	add	r2, r1
 800871c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008720:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008724:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	015a      	lsls	r2, r3, #5
 800872a:	6a3b      	ldr	r3, [r7, #32]
 800872c:	4413      	add	r3, r2
 800872e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	7e7b      	ldrb	r3, [r7, #25]
 8008736:	075b      	lsls	r3, r3, #29
 8008738:	69f9      	ldr	r1, [r7, #28]
 800873a:	0148      	lsls	r0, r1, #5
 800873c:	6a39      	ldr	r1, [r7, #32]
 800873e:	4401      	add	r1, r0
 8008740:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008744:	4313      	orrs	r3, r2
 8008746:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	015a      	lsls	r2, r3, #5
 800874c:	6a3b      	ldr	r3, [r7, #32]
 800874e:	4413      	add	r3, r2
 8008750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800875e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	78db      	ldrb	r3, [r3, #3]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d004      	beq.n	8008772 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800876e:	613b      	str	r3, [r7, #16]
 8008770:	e003      	b.n	800877a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008778:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008780:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	015a      	lsls	r2, r3, #5
 8008786:	6a3b      	ldr	r3, [r7, #32]
 8008788:	4413      	add	r3, r2
 800878a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800878e:	461a      	mov	r2, r3
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008794:	79fb      	ldrb	r3, [r7, #7]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d001      	beq.n	800879e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	e04e      	b.n	800883c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	78db      	ldrb	r3, [r3, #3]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d149      	bne.n	800883a <USB_HC_StartXfer+0x276>
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d045      	beq.n	800883a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	79db      	ldrb	r3, [r3, #7]
 80087b2:	2b03      	cmp	r3, #3
 80087b4:	d830      	bhi.n	8008818 <USB_HC_StartXfer+0x254>
 80087b6:	a201      	add	r2, pc, #4	; (adr r2, 80087bc <USB_HC_StartXfer+0x1f8>)
 80087b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087bc:	080087cd 	.word	0x080087cd
 80087c0:	080087f1 	.word	0x080087f1
 80087c4:	080087cd 	.word	0x080087cd
 80087c8:	080087f1 	.word	0x080087f1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	695b      	ldr	r3, [r3, #20]
 80087d0:	3303      	adds	r3, #3
 80087d2:	089b      	lsrs	r3, r3, #2
 80087d4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80087d6:	8afa      	ldrh	r2, [r7, #22]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087dc:	b29b      	uxth	r3, r3
 80087de:	429a      	cmp	r2, r3
 80087e0:	d91c      	bls.n	800881c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	f043 0220 	orr.w	r2, r3, #32
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	619a      	str	r2, [r3, #24]
        }
        break;
 80087ee:	e015      	b.n	800881c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	695b      	ldr	r3, [r3, #20]
 80087f4:	3303      	adds	r3, #3
 80087f6:	089b      	lsrs	r3, r3, #2
 80087f8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80087fa:	8afa      	ldrh	r2, [r7, #22]
 80087fc:	6a3b      	ldr	r3, [r7, #32]
 80087fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	b29b      	uxth	r3, r3
 8008806:	429a      	cmp	r2, r3
 8008808:	d90a      	bls.n	8008820 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	619a      	str	r2, [r3, #24]
        }
        break;
 8008816:	e003      	b.n	8008820 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008818:	bf00      	nop
 800881a:	e002      	b.n	8008822 <USB_HC_StartXfer+0x25e>
        break;
 800881c:	bf00      	nop
 800881e:	e000      	b.n	8008822 <USB_HC_StartXfer+0x25e>
        break;
 8008820:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	68d9      	ldr	r1, [r3, #12]
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	785a      	ldrb	r2, [r3, #1]
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	b29b      	uxth	r3, r3
 8008830:	2000      	movs	r0, #0
 8008832:	9000      	str	r0, [sp, #0]
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f7ff fb81 	bl	8007f3c <USB_WritePacket>
  }

  return HAL_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3728      	adds	r7, #40	; 0x28
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	1ff80000 	.word	0x1ff80000

08008848 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800885a:	695b      	ldr	r3, [r3, #20]
 800885c:	b29b      	uxth	r3, r3
}
 800885e:	4618      	mov	r0, r3
 8008860:	3714      	adds	r7, #20
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800886a:	b480      	push	{r7}
 800886c:	b089      	sub	sp, #36	; 0x24
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
 8008872:	460b      	mov	r3, r1
 8008874:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800887a:	78fb      	ldrb	r3, [r7, #3]
 800887c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800887e:	2300      	movs	r3, #0
 8008880:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	015a      	lsls	r2, r3, #5
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	4413      	add	r3, r2
 800888a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	0c9b      	lsrs	r3, r3, #18
 8008892:	f003 0303 	and.w	r3, r3, #3
 8008896:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	015a      	lsls	r2, r3, #5
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	4413      	add	r3, r2
 80088a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	0fdb      	lsrs	r3, r3, #31
 80088a8:	f003 0301 	and.w	r3, r3, #1
 80088ac:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	f003 0320 	and.w	r3, r3, #32
 80088b6:	2b20      	cmp	r3, #32
 80088b8:	d104      	bne.n	80088c4 <USB_HC_Halt+0x5a>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d101      	bne.n	80088c4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	e0e8      	b.n	8008a96 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d002      	beq.n	80088d0 <USB_HC_Halt+0x66>
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d173      	bne.n	80089b8 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	015a      	lsls	r2, r3, #5
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	4413      	add	r3, r2
 80088d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	697a      	ldr	r2, [r7, #20]
 80088e0:	0151      	lsls	r1, r2, #5
 80088e2:	69ba      	ldr	r2, [r7, #24]
 80088e4:	440a      	add	r2, r1
 80088e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088ee:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	f003 0320 	and.w	r3, r3, #32
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f040 80cb 	bne.w	8008a94 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008902:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008906:	2b00      	cmp	r3, #0
 8008908:	d143      	bne.n	8008992 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	015a      	lsls	r2, r3, #5
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	4413      	add	r3, r2
 8008912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	697a      	ldr	r2, [r7, #20]
 800891a:	0151      	lsls	r1, r2, #5
 800891c:	69ba      	ldr	r2, [r7, #24]
 800891e:	440a      	add	r2, r1
 8008920:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008928:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	015a      	lsls	r2, r3, #5
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	4413      	add	r3, r2
 8008932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	697a      	ldr	r2, [r7, #20]
 800893a:	0151      	lsls	r1, r2, #5
 800893c:	69ba      	ldr	r2, [r7, #24]
 800893e:	440a      	add	r2, r1
 8008940:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008944:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008948:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	4413      	add	r3, r2
 8008952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	697a      	ldr	r2, [r7, #20]
 800895a:	0151      	lsls	r1, r2, #5
 800895c:	69ba      	ldr	r2, [r7, #24]
 800895e:	440a      	add	r2, r1
 8008960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008964:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008968:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	3301      	adds	r3, #1
 800896e:	61fb      	str	r3, [r7, #28]
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008976:	d81d      	bhi.n	80089b4 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	015a      	lsls	r2, r3, #5
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	4413      	add	r3, r2
 8008980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800898a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800898e:	d0ec      	beq.n	800896a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008990:	e080      	b.n	8008a94 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	015a      	lsls	r2, r3, #5
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	4413      	add	r3, r2
 800899a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	697a      	ldr	r2, [r7, #20]
 80089a2:	0151      	lsls	r1, r2, #5
 80089a4:	69ba      	ldr	r2, [r7, #24]
 80089a6:	440a      	add	r2, r1
 80089a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089b0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80089b2:	e06f      	b.n	8008a94 <USB_HC_Halt+0x22a>
            break;
 80089b4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80089b6:	e06d      	b.n	8008a94 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	015a      	lsls	r2, r3, #5
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	4413      	add	r3, r2
 80089c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	0151      	lsls	r1, r2, #5
 80089ca:	69ba      	ldr	r2, [r7, #24]
 80089cc:	440a      	add	r2, r1
 80089ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089d6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d143      	bne.n	8008a70 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	015a      	lsls	r2, r3, #5
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	4413      	add	r3, r2
 80089f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	0151      	lsls	r1, r2, #5
 80089fa:	69ba      	ldr	r2, [r7, #24]
 80089fc:	440a      	add	r2, r1
 80089fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a06:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	015a      	lsls	r2, r3, #5
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	4413      	add	r3, r2
 8008a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	697a      	ldr	r2, [r7, #20]
 8008a18:	0151      	lsls	r1, r2, #5
 8008a1a:	69ba      	ldr	r2, [r7, #24]
 8008a1c:	440a      	add	r2, r1
 8008a1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a26:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	015a      	lsls	r2, r3, #5
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	4413      	add	r3, r2
 8008a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	0151      	lsls	r1, r2, #5
 8008a3a:	69ba      	ldr	r2, [r7, #24]
 8008a3c:	440a      	add	r2, r1
 8008a3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a46:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	61fb      	str	r3, [r7, #28]
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a54:	d81d      	bhi.n	8008a92 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	015a      	lsls	r2, r3, #5
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a6c:	d0ec      	beq.n	8008a48 <USB_HC_Halt+0x1de>
 8008a6e:	e011      	b.n	8008a94 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	015a      	lsls	r2, r3, #5
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	4413      	add	r3, r2
 8008a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	0151      	lsls	r1, r2, #5
 8008a82:	69ba      	ldr	r2, [r7, #24]
 8008a84:	440a      	add	r2, r1
 8008a86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a8e:	6013      	str	r3, [r2, #0]
 8008a90:	e000      	b.n	8008a94 <USB_HC_Halt+0x22a>
          break;
 8008a92:	bf00      	nop
    }
  }

  return HAL_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3724      	adds	r7, #36	; 0x24
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
	...

08008aa4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b087      	sub	sp, #28
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	460b      	mov	r3, r1
 8008aae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008ab4:	78fb      	ldrb	r3, [r7, #3]
 8008ab6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	04da      	lsls	r2, r3, #19
 8008ac0:	4b15      	ldr	r3, [pc, #84]	; (8008b18 <USB_DoPing+0x74>)
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	0151      	lsls	r1, r2, #5
 8008ac8:	697a      	ldr	r2, [r7, #20]
 8008aca:	440a      	add	r2, r1
 8008acc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ad0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ad4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	015a      	lsls	r2, r3, #5
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	4413      	add	r3, r2
 8008ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008aec:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008af4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	015a      	lsls	r2, r3, #5
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	4413      	add	r3, r2
 8008afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b02:	461a      	mov	r2, r3
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	371c      	adds	r7, #28
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	1ff80000 	.word	0x1ff80000

08008b1c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b086      	sub	sp, #24
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f7ff f981 	bl	8007e34 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008b32:	2110      	movs	r1, #16
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f7ff f9b9 	bl	8007eac <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f7ff f9dc 	bl	8007ef8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008b40:	2300      	movs	r3, #0
 8008b42:	613b      	str	r3, [r7, #16]
 8008b44:	e01f      	b.n	8008b86 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	015a      	lsls	r2, r3, #5
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b5c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b64:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b6c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	3301      	adds	r3, #1
 8008b84:	613b      	str	r3, [r7, #16]
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	2b0f      	cmp	r3, #15
 8008b8a:	d9dc      	bls.n	8008b46 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	613b      	str	r3, [r7, #16]
 8008b90:	e034      	b.n	8008bfc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	015a      	lsls	r2, r3, #5
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	4413      	add	r3, r2
 8008b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ba8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008bb0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008bb8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	015a      	lsls	r2, r3, #5
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	617b      	str	r3, [r7, #20]
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008bd8:	d80c      	bhi.n	8008bf4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	015a      	lsls	r2, r3, #5
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	4413      	add	r3, r2
 8008be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bf0:	d0ec      	beq.n	8008bcc <USB_StopHost+0xb0>
 8008bf2:	e000      	b.n	8008bf6 <USB_StopHost+0xda>
        break;
 8008bf4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	613b      	str	r3, [r7, #16]
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	2b0f      	cmp	r3, #15
 8008c00:	d9c7      	bls.n	8008b92 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c08:	461a      	mov	r2, r3
 8008c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c0e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c16:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f7ff f8fa 	bl	8007e12 <USB_EnableGlobalInt>

  return HAL_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3718      	adds	r7, #24
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008c28:	b590      	push	{r4, r7, lr}
 8008c2a:	b089      	sub	sp, #36	; 0x24
 8008c2c:	af04      	add	r7, sp, #16
 8008c2e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008c30:	2301      	movs	r3, #1
 8008c32:	2202      	movs	r2, #2
 8008c34:	2102      	movs	r1, #2
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fc66 	bl	8009508 <USBH_FindInterface>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
 8008c42:	2bff      	cmp	r3, #255	; 0xff
 8008c44:	d002      	beq.n	8008c4c <USBH_CDC_InterfaceInit+0x24>
 8008c46:	7bfb      	ldrb	r3, [r7, #15]
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d901      	bls.n	8008c50 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	e13d      	b.n	8008ecc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008c50:	7bfb      	ldrb	r3, [r7, #15]
 8008c52:	4619      	mov	r1, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fc3b 	bl	80094d0 <USBH_SelectInterface>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008c5e:	7bbb      	ldrb	r3, [r7, #14]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d001      	beq.n	8008c68 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008c64:	2302      	movs	r3, #2
 8008c66:	e131      	b.n	8008ecc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008c6e:	2050      	movs	r0, #80	; 0x50
 8008c70:	f002 fa00 	bl	800b074 <malloc>
 8008c74:	4603      	mov	r3, r0
 8008c76:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c7e:	69db      	ldr	r3, [r3, #28]
 8008c80:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d101      	bne.n	8008c8c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008c88:	2302      	movs	r3, #2
 8008c8a:	e11f      	b.n	8008ecc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008c8c:	2250      	movs	r2, #80	; 0x50
 8008c8e:	2100      	movs	r1, #0
 8008c90:	68b8      	ldr	r0, [r7, #8]
 8008c92:	f002 f9ff 	bl	800b094 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008c96:	7bfb      	ldrb	r3, [r7, #15]
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	211a      	movs	r1, #26
 8008c9c:	fb01 f303 	mul.w	r3, r1, r3
 8008ca0:	4413      	add	r3, r2
 8008ca2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	b25b      	sxtb	r3, r3
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	da15      	bge.n	8008cda <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	211a      	movs	r1, #26
 8008cb4:	fb01 f303 	mul.w	r3, r1, r3
 8008cb8:	4413      	add	r3, r2
 8008cba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008cbe:	781a      	ldrb	r2, [r3, #0]
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008cc4:	7bfb      	ldrb	r3, [r7, #15]
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	211a      	movs	r1, #26
 8008cca:	fb01 f303 	mul.w	r3, r1, r3
 8008cce:	4413      	add	r3, r2
 8008cd0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008cd4:	881a      	ldrh	r2, [r3, #0]
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	785b      	ldrb	r3, [r3, #1]
 8008cde:	4619      	mov	r1, r3
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f001 fe32 	bl	800a94a <USBH_AllocPipe>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	461a      	mov	r2, r3
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	7819      	ldrb	r1, [r3, #0]
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	7858      	ldrb	r0, [r3, #1]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008d02:	68ba      	ldr	r2, [r7, #8]
 8008d04:	8952      	ldrh	r2, [r2, #10]
 8008d06:	9202      	str	r2, [sp, #8]
 8008d08:	2203      	movs	r2, #3
 8008d0a:	9201      	str	r2, [sp, #4]
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	4623      	mov	r3, r4
 8008d10:	4602      	mov	r2, r0
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f001 fdea 	bl	800a8ec <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f002 f8f9 	bl	800af18 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008d26:	2300      	movs	r3, #0
 8008d28:	2200      	movs	r2, #0
 8008d2a:	210a      	movs	r1, #10
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 fbeb 	bl	8009508 <USBH_FindInterface>
 8008d32:	4603      	mov	r3, r0
 8008d34:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008d36:	7bfb      	ldrb	r3, [r7, #15]
 8008d38:	2bff      	cmp	r3, #255	; 0xff
 8008d3a:	d002      	beq.n	8008d42 <USBH_CDC_InterfaceInit+0x11a>
 8008d3c:	7bfb      	ldrb	r3, [r7, #15]
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d901      	bls.n	8008d46 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008d42:	2302      	movs	r3, #2
 8008d44:	e0c2      	b.n	8008ecc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008d46:	7bfb      	ldrb	r3, [r7, #15]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	211a      	movs	r1, #26
 8008d4c:	fb01 f303 	mul.w	r3, r1, r3
 8008d50:	4413      	add	r3, r2
 8008d52:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	b25b      	sxtb	r3, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	da16      	bge.n	8008d8c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	211a      	movs	r1, #26
 8008d64:	fb01 f303 	mul.w	r3, r1, r3
 8008d68:	4413      	add	r3, r2
 8008d6a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008d6e:	781a      	ldrb	r2, [r3, #0]
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	211a      	movs	r1, #26
 8008d7a:	fb01 f303 	mul.w	r3, r1, r3
 8008d7e:	4413      	add	r3, r2
 8008d80:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008d84:	881a      	ldrh	r2, [r3, #0]
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	835a      	strh	r2, [r3, #26]
 8008d8a:	e015      	b.n	8008db8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008d8c:	7bfb      	ldrb	r3, [r7, #15]
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	211a      	movs	r1, #26
 8008d92:	fb01 f303 	mul.w	r3, r1, r3
 8008d96:	4413      	add	r3, r2
 8008d98:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008d9c:	781a      	ldrb	r2, [r3, #0]
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008da2:	7bfb      	ldrb	r3, [r7, #15]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	211a      	movs	r1, #26
 8008da8:	fb01 f303 	mul.w	r3, r1, r3
 8008dac:	4413      	add	r3, r2
 8008dae:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008db2:	881a      	ldrh	r2, [r3, #0]
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	211a      	movs	r1, #26
 8008dbe:	fb01 f303 	mul.w	r3, r1, r3
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	b25b      	sxtb	r3, r3
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	da16      	bge.n	8008dfe <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008dd0:	7bfb      	ldrb	r3, [r7, #15]
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	211a      	movs	r1, #26
 8008dd6:	fb01 f303 	mul.w	r3, r1, r3
 8008dda:	4413      	add	r3, r2
 8008ddc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008de0:	781a      	ldrb	r2, [r3, #0]
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008de6:	7bfb      	ldrb	r3, [r7, #15]
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	211a      	movs	r1, #26
 8008dec:	fb01 f303 	mul.w	r3, r1, r3
 8008df0:	4413      	add	r3, r2
 8008df2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008df6:	881a      	ldrh	r2, [r3, #0]
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	835a      	strh	r2, [r3, #26]
 8008dfc:	e015      	b.n	8008e2a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	211a      	movs	r1, #26
 8008e04:	fb01 f303 	mul.w	r3, r1, r3
 8008e08:	4413      	add	r3, r2
 8008e0a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008e0e:	781a      	ldrb	r2, [r3, #0]
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008e14:	7bfb      	ldrb	r3, [r7, #15]
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	211a      	movs	r1, #26
 8008e1a:	fb01 f303 	mul.w	r3, r1, r3
 8008e1e:	4413      	add	r3, r2
 8008e20:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008e24:	881a      	ldrh	r2, [r3, #0]
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	7b9b      	ldrb	r3, [r3, #14]
 8008e2e:	4619      	mov	r1, r3
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f001 fd8a 	bl	800a94a <USBH_AllocPipe>
 8008e36:	4603      	mov	r3, r0
 8008e38:	461a      	mov	r2, r3
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	7bdb      	ldrb	r3, [r3, #15]
 8008e42:	4619      	mov	r1, r3
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f001 fd80 	bl	800a94a <USBH_AllocPipe>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	7b59      	ldrb	r1, [r3, #13]
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	7b98      	ldrb	r0, [r3, #14]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008e66:	68ba      	ldr	r2, [r7, #8]
 8008e68:	8b12      	ldrh	r2, [r2, #24]
 8008e6a:	9202      	str	r2, [sp, #8]
 8008e6c:	2202      	movs	r2, #2
 8008e6e:	9201      	str	r2, [sp, #4]
 8008e70:	9300      	str	r3, [sp, #0]
 8008e72:	4623      	mov	r3, r4
 8008e74:	4602      	mov	r2, r0
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f001 fd38 	bl	800a8ec <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	7b19      	ldrb	r1, [r3, #12]
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	7bd8      	ldrb	r0, [r3, #15]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008e90:	68ba      	ldr	r2, [r7, #8]
 8008e92:	8b52      	ldrh	r2, [r2, #26]
 8008e94:	9202      	str	r2, [sp, #8]
 8008e96:	2202      	movs	r2, #2
 8008e98:	9201      	str	r2, [sp, #4]
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	4623      	mov	r3, r4
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f001 fd23 	bl	800a8ec <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	7b5b      	ldrb	r3, [r3, #13]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f002 f82e 	bl	800af18 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	7b1b      	ldrb	r3, [r3, #12]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f002 f827 	bl	800af18 <USBH_LL_SetToggle>

  return USBH_OK;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3714      	adds	r7, #20
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd90      	pop	{r4, r7, pc}

08008ed4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ee2:	69db      	ldr	r3, [r3, #28]
 8008ee4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00e      	beq.n	8008f0c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f001 fd18 	bl	800a92a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	4619      	mov	r1, r3
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f001 fd43 	bl	800a98c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	7b1b      	ldrb	r3, [r3, #12]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00e      	beq.n	8008f32 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	7b1b      	ldrb	r3, [r3, #12]
 8008f18:	4619      	mov	r1, r3
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f001 fd05 	bl	800a92a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	7b1b      	ldrb	r3, [r3, #12]
 8008f24:	4619      	mov	r1, r3
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f001 fd30 	bl	800a98c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	7b5b      	ldrb	r3, [r3, #13]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00e      	beq.n	8008f58 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	7b5b      	ldrb	r3, [r3, #13]
 8008f3e:	4619      	mov	r1, r3
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f001 fcf2 	bl	800a92a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	7b5b      	ldrb	r3, [r3, #13]
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f001 fd1d 	bl	800a98c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2200      	movs	r2, #0
 8008f56:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f5e:	69db      	ldr	r3, [r3, #28]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00b      	beq.n	8008f7c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f6a:	69db      	ldr	r3, [r3, #28]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f002 f889 	bl	800b084 <free>
    phost->pActiveClass->pData = 0U;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f78:	2200      	movs	r2, #0
 8008f7a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b084      	sub	sp, #16
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f94:	69db      	ldr	r3, [r3, #28]
 8008f96:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	3340      	adds	r3, #64	; 0x40
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f8b1 	bl	8009106 <GetLineCoding>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008fa8:	7afb      	ldrb	r3, [r7, #11]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d105      	bne.n	8008fba <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008fb4:	2102      	movs	r1, #2
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008fba:	7afb      	ldrb	r3, [r7, #11]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3710      	adds	r7, #16
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fda:	69db      	ldr	r3, [r3, #28]
 8008fdc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008fe4:	2b04      	cmp	r3, #4
 8008fe6:	d877      	bhi.n	80090d8 <USBH_CDC_Process+0x114>
 8008fe8:	a201      	add	r2, pc, #4	; (adr r2, 8008ff0 <USBH_CDC_Process+0x2c>)
 8008fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fee:	bf00      	nop
 8008ff0:	08009005 	.word	0x08009005
 8008ff4:	0800900b 	.word	0x0800900b
 8008ff8:	0800903b 	.word	0x0800903b
 8008ffc:	080090af 	.word	0x080090af
 8009000:	080090bd 	.word	0x080090bd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009004:	2300      	movs	r3, #0
 8009006:	73fb      	strb	r3, [r7, #15]
      break;
 8009008:	e06d      	b.n	80090e6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800900e:	4619      	mov	r1, r3
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 f897 	bl	8009144 <SetLineCoding>
 8009016:	4603      	mov	r3, r0
 8009018:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800901a:	7bbb      	ldrb	r3, [r7, #14]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d104      	bne.n	800902a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	2202      	movs	r2, #2
 8009024:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009028:	e058      	b.n	80090dc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800902a:	7bbb      	ldrb	r3, [r7, #14]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d055      	beq.n	80090dc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	2204      	movs	r2, #4
 8009034:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009038:	e050      	b.n	80090dc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	3340      	adds	r3, #64	; 0x40
 800903e:	4619      	mov	r1, r3
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 f860 	bl	8009106 <GetLineCoding>
 8009046:	4603      	mov	r3, r0
 8009048:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800904a:	7bbb      	ldrb	r3, [r7, #14]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d126      	bne.n	800909e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	2200      	movs	r2, #0
 8009054:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009062:	791b      	ldrb	r3, [r3, #4]
 8009064:	429a      	cmp	r2, r3
 8009066:	d13b      	bne.n	80090e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009072:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009074:	429a      	cmp	r2, r3
 8009076:	d133      	bne.n	80090e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009082:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009084:	429a      	cmp	r2, r3
 8009086:	d12b      	bne.n	80090e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009090:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009092:	429a      	cmp	r2, r3
 8009094:	d124      	bne.n	80090e0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f958 	bl	800934c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800909c:	e020      	b.n	80090e0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800909e:	7bbb      	ldrb	r3, [r7, #14]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d01d      	beq.n	80090e0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	2204      	movs	r2, #4
 80090a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80090ac:	e018      	b.n	80090e0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f867 	bl	8009182 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 f8da 	bl	800926e <CDC_ProcessReception>
      break;
 80090ba:	e014      	b.n	80090e6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80090bc:	2100      	movs	r1, #0
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 ffe3 	bl	800a08a <USBH_ClrFeature>
 80090c4:	4603      	mov	r3, r0
 80090c6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80090c8:	7bbb      	ldrb	r3, [r7, #14]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d10a      	bne.n	80090e4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	2200      	movs	r2, #0
 80090d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80090d6:	e005      	b.n	80090e4 <USBH_CDC_Process+0x120>

    default:
      break;
 80090d8:	bf00      	nop
 80090da:	e004      	b.n	80090e6 <USBH_CDC_Process+0x122>
      break;
 80090dc:	bf00      	nop
 80090de:	e002      	b.n	80090e6 <USBH_CDC_Process+0x122>
      break;
 80090e0:	bf00      	nop
 80090e2:	e000      	b.n	80090e6 <USBH_CDC_Process+0x122>
      break;
 80090e4:	bf00      	nop

  }

  return status;
 80090e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3710      	adds	r7, #16
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	370c      	adds	r7, #12
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr

08009106 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b082      	sub	sp, #8
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
 800910e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	22a1      	movs	r2, #161	; 0xa1
 8009114:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2221      	movs	r2, #33	; 0x21
 800911a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2207      	movs	r2, #7
 800912c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	2207      	movs	r2, #7
 8009132:	4619      	mov	r1, r3
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f001 f988 	bl	800a44a <USBH_CtlReq>
 800913a:	4603      	mov	r3, r0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2221      	movs	r2, #33	; 0x21
 8009152:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2220      	movs	r2, #32
 8009158:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2207      	movs	r2, #7
 800916a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	2207      	movs	r2, #7
 8009170:	4619      	mov	r1, r3
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f001 f969 	bl	800a44a <USBH_CtlReq>
 8009178:	4603      	mov	r3, r0
}
 800917a:	4618      	mov	r0, r3
 800917c:	3708      	adds	r7, #8
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b086      	sub	sp, #24
 8009186:	af02      	add	r7, sp, #8
 8009188:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009190:	69db      	ldr	r3, [r3, #28]
 8009192:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009194:	2300      	movs	r3, #0
 8009196:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d002      	beq.n	80091a8 <CDC_ProcessTransmission+0x26>
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d023      	beq.n	80091ee <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80091a6:	e05e      	b.n	8009266 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ac:	68fa      	ldr	r2, [r7, #12]
 80091ae:	8b12      	ldrh	r2, [r2, #24]
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d90b      	bls.n	80091cc <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	69d9      	ldr	r1, [r3, #28]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	8b1a      	ldrh	r2, [r3, #24]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	7b5b      	ldrb	r3, [r3, #13]
 80091c0:	2001      	movs	r0, #1
 80091c2:	9000      	str	r0, [sp, #0]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f001 fb4e 	bl	800a866 <USBH_BulkSendData>
 80091ca:	e00b      	b.n	80091e4 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	7b5b      	ldrb	r3, [r3, #13]
 80091da:	2001      	movs	r0, #1
 80091dc:	9000      	str	r0, [sp, #0]
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f001 fb41 	bl	800a866 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2202      	movs	r2, #2
 80091e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80091ec:	e03b      	b.n	8009266 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	7b5b      	ldrb	r3, [r3, #13]
 80091f2:	4619      	mov	r1, r3
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f001 fe65 	bl	800aec4 <USBH_LL_GetURBState>
 80091fa:	4603      	mov	r3, r0
 80091fc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80091fe:	7afb      	ldrb	r3, [r7, #11]
 8009200:	2b01      	cmp	r3, #1
 8009202:	d128      	bne.n	8009256 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	8b12      	ldrh	r2, [r2, #24]
 800920c:	4293      	cmp	r3, r2
 800920e:	d90e      	bls.n	800922e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	8b12      	ldrh	r2, [r2, #24]
 8009218:	1a9a      	subs	r2, r3, r2
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	69db      	ldr	r3, [r3, #28]
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	8b12      	ldrh	r2, [r2, #24]
 8009226:	441a      	add	r2, r3
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	61da      	str	r2, [r3, #28]
 800922c:	e002      	b.n	8009234 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2200      	movs	r2, #0
 8009232:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009238:	2b00      	cmp	r3, #0
 800923a:	d004      	beq.n	8009246 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2201      	movs	r2, #1
 8009240:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009244:	e00e      	b.n	8009264 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 f868 	bl	8009324 <USBH_CDC_TransmitCallback>
      break;
 8009254:	e006      	b.n	8009264 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009256:	7afb      	ldrb	r3, [r7, #11]
 8009258:	2b02      	cmp	r3, #2
 800925a:	d103      	bne.n	8009264 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009264:	bf00      	nop
  }
}
 8009266:	bf00      	nop
 8009268:	3710      	adds	r7, #16
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b086      	sub	sp, #24
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800927c:	69db      	ldr	r3, [r3, #28]
 800927e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009280:	2300      	movs	r3, #0
 8009282:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800928a:	2b03      	cmp	r3, #3
 800928c:	d002      	beq.n	8009294 <CDC_ProcessReception+0x26>
 800928e:	2b04      	cmp	r3, #4
 8009290:	d00e      	beq.n	80092b0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009292:	e043      	b.n	800931c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	6a19      	ldr	r1, [r3, #32]
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	8b5a      	ldrh	r2, [r3, #26]
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	7b1b      	ldrb	r3, [r3, #12]
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f001 fb05 	bl	800a8b0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	2204      	movs	r2, #4
 80092aa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80092ae:	e035      	b.n	800931c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	7b1b      	ldrb	r3, [r3, #12]
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f001 fe04 	bl	800aec4 <USBH_LL_GetURBState>
 80092bc:	4603      	mov	r3, r0
 80092be:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80092c0:	7cfb      	ldrb	r3, [r7, #19]
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d129      	bne.n	800931a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	7b1b      	ldrb	r3, [r3, #12]
 80092ca:	4619      	mov	r1, r3
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f001 fd67 	bl	800ada0 <USBH_LL_GetLastXferSize>
 80092d2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d016      	beq.n	800930c <CDC_ProcessReception+0x9e>
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	8b5b      	ldrh	r3, [r3, #26]
 80092e2:	461a      	mov	r2, r3
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d910      	bls.n	800930c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	1ad2      	subs	r2, r2, r3
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	6a1a      	ldr	r2, [r3, #32]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	441a      	add	r2, r3
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	2203      	movs	r2, #3
 8009306:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800930a:	e006      	b.n	800931a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	2200      	movs	r2, #0
 8009310:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 f80f 	bl	8009338 <USBH_CDC_ReceiveCallback>
      break;
 800931a:	bf00      	nop
  }
}
 800931c:	bf00      	nop
 800931e:	3718      	adds	r7, #24
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800932c:	bf00      	nop
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009340:	bf00      	nop
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009354:	bf00      	nop
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	4613      	mov	r3, r2
 800936c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d101      	bne.n	8009378 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009374:	2302      	movs	r3, #2
 8009376:	e029      	b.n	80093cc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	79fa      	ldrb	r2, [r7, #7]
 800937c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f000 f81f 	bl	80093d4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2200      	movs	r2, #0
 800939a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d003      	beq.n	80093c4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	68ba      	ldr	r2, [r7, #8]
 80093c0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f001 fc37 	bl	800ac38 <USBH_LL_Init>

  return USBH_OK;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3710      	adds	r7, #16
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80093dc:	2300      	movs	r3, #0
 80093de:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80093e0:	2300      	movs	r3, #0
 80093e2:	60fb      	str	r3, [r7, #12]
 80093e4:	e009      	b.n	80093fa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	33e0      	adds	r3, #224	; 0xe0
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	4413      	add	r3, r2
 80093f0:	2200      	movs	r2, #0
 80093f2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	3301      	adds	r3, #1
 80093f8:	60fb      	str	r3, [r7, #12]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2b0e      	cmp	r3, #14
 80093fe:	d9f2      	bls.n	80093e6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009400:	2300      	movs	r3, #0
 8009402:	60fb      	str	r3, [r7, #12]
 8009404:	e009      	b.n	800941a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	4413      	add	r3, r2
 800940c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009410:	2200      	movs	r2, #0
 8009412:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	3301      	adds	r3, #1
 8009418:	60fb      	str	r3, [r7, #12]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009420:	d3f1      	bcc.n	8009406 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2201      	movs	r2, #1
 8009432:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2240      	movs	r2, #64	; 0x40
 8009446:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2201      	movs	r2, #1
 800945a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800946e:	2300      	movs	r3, #0
}
 8009470:	4618      	mov	r0, r3
 8009472:	3714      	adds	r7, #20
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009486:	2300      	movs	r3, #0
 8009488:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d016      	beq.n	80094be <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10e      	bne.n	80094b8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80094a0:	1c59      	adds	r1, r3, #1
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	33de      	adds	r3, #222	; 0xde
 80094ac:	6839      	ldr	r1, [r7, #0]
 80094ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80094b2:	2300      	movs	r3, #0
 80094b4:	73fb      	strb	r3, [r7, #15]
 80094b6:	e004      	b.n	80094c2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80094b8:	2302      	movs	r3, #2
 80094ba:	73fb      	strb	r3, [r7, #15]
 80094bc:	e001      	b.n	80094c2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80094be:	2302      	movs	r3, #2
 80094c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80094c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3714      	adds	r7, #20
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	460b      	mov	r3, r1
 80094da:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80094dc:	2300      	movs	r3, #0
 80094de:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80094e6:	78fa      	ldrb	r2, [r7, #3]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d204      	bcs.n	80094f6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	78fa      	ldrb	r2, [r7, #3]
 80094f0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80094f4:	e001      	b.n	80094fa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80094f6:	2302      	movs	r3, #2
 80094f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80094fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3714      	adds	r7, #20
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009508:	b480      	push	{r7}
 800950a:	b087      	sub	sp, #28
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	4608      	mov	r0, r1
 8009512:	4611      	mov	r1, r2
 8009514:	461a      	mov	r2, r3
 8009516:	4603      	mov	r3, r0
 8009518:	70fb      	strb	r3, [r7, #3]
 800951a:	460b      	mov	r3, r1
 800951c:	70bb      	strb	r3, [r7, #2]
 800951e:	4613      	mov	r3, r2
 8009520:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009522:	2300      	movs	r3, #0
 8009524:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009526:	2300      	movs	r3, #0
 8009528:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009530:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009532:	e025      	b.n	8009580 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009534:	7dfb      	ldrb	r3, [r7, #23]
 8009536:	221a      	movs	r2, #26
 8009538:	fb02 f303 	mul.w	r3, r2, r3
 800953c:	3308      	adds	r3, #8
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	4413      	add	r3, r2
 8009542:	3302      	adds	r3, #2
 8009544:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	795b      	ldrb	r3, [r3, #5]
 800954a:	78fa      	ldrb	r2, [r7, #3]
 800954c:	429a      	cmp	r2, r3
 800954e:	d002      	beq.n	8009556 <USBH_FindInterface+0x4e>
 8009550:	78fb      	ldrb	r3, [r7, #3]
 8009552:	2bff      	cmp	r3, #255	; 0xff
 8009554:	d111      	bne.n	800957a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800955a:	78ba      	ldrb	r2, [r7, #2]
 800955c:	429a      	cmp	r2, r3
 800955e:	d002      	beq.n	8009566 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009560:	78bb      	ldrb	r3, [r7, #2]
 8009562:	2bff      	cmp	r3, #255	; 0xff
 8009564:	d109      	bne.n	800957a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800956a:	787a      	ldrb	r2, [r7, #1]
 800956c:	429a      	cmp	r2, r3
 800956e:	d002      	beq.n	8009576 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009570:	787b      	ldrb	r3, [r7, #1]
 8009572:	2bff      	cmp	r3, #255	; 0xff
 8009574:	d101      	bne.n	800957a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009576:	7dfb      	ldrb	r3, [r7, #23]
 8009578:	e006      	b.n	8009588 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800957a:	7dfb      	ldrb	r3, [r7, #23]
 800957c:	3301      	adds	r3, #1
 800957e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009580:	7dfb      	ldrb	r3, [r7, #23]
 8009582:	2b01      	cmp	r3, #1
 8009584:	d9d6      	bls.n	8009534 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009586:	23ff      	movs	r3, #255	; 0xff
}
 8009588:	4618      	mov	r0, r3
 800958a:	371c      	adds	r7, #28
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f001 fb87 	bl	800acb0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80095a2:	2101      	movs	r1, #1
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f001 fca0 	bl	800aeea <USBH_LL_DriverVBUS>

  return USBH_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3708      	adds	r7, #8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b088      	sub	sp, #32
 80095b8:	af04      	add	r7, sp, #16
 80095ba:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80095bc:	2302      	movs	r3, #2
 80095be:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80095c0:	2300      	movs	r3, #0
 80095c2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d102      	bne.n	80095d6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2203      	movs	r2, #3
 80095d4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	2b0b      	cmp	r3, #11
 80095de:	f200 81b3 	bhi.w	8009948 <USBH_Process+0x394>
 80095e2:	a201      	add	r2, pc, #4	; (adr r2, 80095e8 <USBH_Process+0x34>)
 80095e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e8:	08009619 	.word	0x08009619
 80095ec:	0800964b 	.word	0x0800964b
 80095f0:	080096b3 	.word	0x080096b3
 80095f4:	080098e3 	.word	0x080098e3
 80095f8:	08009949 	.word	0x08009949
 80095fc:	08009757 	.word	0x08009757
 8009600:	08009889 	.word	0x08009889
 8009604:	0800978d 	.word	0x0800978d
 8009608:	080097ad 	.word	0x080097ad
 800960c:	080097cd 	.word	0x080097cd
 8009610:	080097fb 	.word	0x080097fb
 8009614:	080098cb 	.word	0x080098cb
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800961e:	b2db      	uxtb	r3, r3
 8009620:	2b00      	cmp	r3, #0
 8009622:	f000 8193 	beq.w	800994c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2201      	movs	r2, #1
 800962a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800962c:	20c8      	movs	r0, #200	; 0xc8
 800962e:	f001 fca3 	bl	800af78 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f001 fb99 	bl	800ad6a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009648:	e180      	b.n	800994c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009650:	2b01      	cmp	r3, #1
 8009652:	d107      	bne.n	8009664 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2202      	movs	r2, #2
 8009660:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009662:	e182      	b.n	800996a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800966a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800966e:	d914      	bls.n	800969a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009676:	3301      	adds	r3, #1
 8009678:	b2da      	uxtb	r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009686:	2b03      	cmp	r3, #3
 8009688:	d903      	bls.n	8009692 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	220d      	movs	r2, #13
 800968e:	701a      	strb	r2, [r3, #0]
      break;
 8009690:	e16b      	b.n	800996a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	701a      	strb	r2, [r3, #0]
      break;
 8009698:	e167      	b.n	800996a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80096a0:	f103 020a 	add.w	r2, r3, #10
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80096aa:	200a      	movs	r0, #10
 80096ac:	f001 fc64 	bl	800af78 <USBH_Delay>
      break;
 80096b0:	e15b      	b.n	800996a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d005      	beq.n	80096c8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096c2:	2104      	movs	r1, #4
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80096c8:	2064      	movs	r0, #100	; 0x64
 80096ca:	f001 fc55 	bl	800af78 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f001 fb24 	bl	800ad1c <USBH_LL_GetSpeed>
 80096d4:	4603      	mov	r3, r0
 80096d6:	461a      	mov	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2205      	movs	r2, #5
 80096e2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80096e4:	2100      	movs	r1, #0
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f001 f92f 	bl	800a94a <USBH_AllocPipe>
 80096ec:	4603      	mov	r3, r0
 80096ee:	461a      	mov	r2, r3
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80096f4:	2180      	movs	r1, #128	; 0x80
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f001 f927 	bl	800a94a <USBH_AllocPipe>
 80096fc:	4603      	mov	r3, r0
 80096fe:	461a      	mov	r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	7919      	ldrb	r1, [r3, #4]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009718:	b292      	uxth	r2, r2
 800971a:	9202      	str	r2, [sp, #8]
 800971c:	2200      	movs	r2, #0
 800971e:	9201      	str	r2, [sp, #4]
 8009720:	9300      	str	r3, [sp, #0]
 8009722:	4603      	mov	r3, r0
 8009724:	2280      	movs	r2, #128	; 0x80
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f001 f8e0 	bl	800a8ec <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	7959      	ldrb	r1, [r3, #5]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009740:	b292      	uxth	r2, r2
 8009742:	9202      	str	r2, [sp, #8]
 8009744:	2200      	movs	r2, #0
 8009746:	9201      	str	r2, [sp, #4]
 8009748:	9300      	str	r3, [sp, #0]
 800974a:	4603      	mov	r3, r0
 800974c:	2200      	movs	r2, #0
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f001 f8cc 	bl	800a8ec <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009754:	e109      	b.n	800996a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 f90c 	bl	8009974 <USBH_HandleEnum>
 800975c:	4603      	mov	r3, r0
 800975e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009760:	7bbb      	ldrb	r3, [r7, #14]
 8009762:	b2db      	uxtb	r3, r3
 8009764:	2b00      	cmp	r3, #0
 8009766:	f040 80f3 	bne.w	8009950 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009778:	2b01      	cmp	r3, #1
 800977a:	d103      	bne.n	8009784 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2208      	movs	r2, #8
 8009780:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009782:	e0e5      	b.n	8009950 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2207      	movs	r2, #7
 8009788:	701a      	strb	r2, [r3, #0]
      break;
 800978a:	e0e1      	b.n	8009950 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009792:	2b00      	cmp	r3, #0
 8009794:	f000 80de 	beq.w	8009954 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800979e:	2101      	movs	r1, #1
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2208      	movs	r2, #8
 80097a8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80097aa:	e0d3      	b.n	8009954 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	4619      	mov	r1, r3
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 fc20 	bl	8009ffc <USBH_SetCfg>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	f040 80ca 	bne.w	8009958 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2209      	movs	r2, #9
 80097c8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80097ca:	e0c5      	b.n	8009958 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80097d2:	f003 0320 	and.w	r3, r3, #32
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00b      	beq.n	80097f2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80097da:	2101      	movs	r1, #1
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 fc30 	bl	800a042 <USBH_SetFeature>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	f040 80b9 	bne.w	800995c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	220a      	movs	r2, #10
 80097ee:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80097f0:	e0b4      	b.n	800995c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	220a      	movs	r2, #10
 80097f6:	701a      	strb	r2, [r3, #0]
      break;
 80097f8:	e0b0      	b.n	800995c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009800:	2b00      	cmp	r3, #0
 8009802:	f000 80ad 	beq.w	8009960 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800980e:	2300      	movs	r3, #0
 8009810:	73fb      	strb	r3, [r7, #15]
 8009812:	e016      	b.n	8009842 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009814:	7bfa      	ldrb	r2, [r7, #15]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	32de      	adds	r2, #222	; 0xde
 800981a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800981e:	791a      	ldrb	r2, [r3, #4]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009826:	429a      	cmp	r2, r3
 8009828:	d108      	bne.n	800983c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800982a:	7bfa      	ldrb	r2, [r7, #15]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	32de      	adds	r2, #222	; 0xde
 8009830:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800983a:	e005      	b.n	8009848 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800983c:	7bfb      	ldrb	r3, [r7, #15]
 800983e:	3301      	adds	r3, #1
 8009840:	73fb      	strb	r3, [r7, #15]
 8009842:	7bfb      	ldrb	r3, [r7, #15]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d0e5      	beq.n	8009814 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800984e:	2b00      	cmp	r3, #0
 8009850:	d016      	beq.n	8009880 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	4798      	blx	r3
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d109      	bne.n	8009878 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2206      	movs	r2, #6
 8009868:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009870:	2103      	movs	r1, #3
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009876:	e073      	b.n	8009960 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	220d      	movs	r2, #13
 800987c:	701a      	strb	r2, [r3, #0]
      break;
 800987e:	e06f      	b.n	8009960 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	220d      	movs	r2, #13
 8009884:	701a      	strb	r2, [r3, #0]
      break;
 8009886:	e06b      	b.n	8009960 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800988e:	2b00      	cmp	r3, #0
 8009890:	d017      	beq.n	80098c2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	4798      	blx	r3
 800989e:	4603      	mov	r3, r0
 80098a0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80098a2:	7bbb      	ldrb	r3, [r7, #14]
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d103      	bne.n	80098b2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	220b      	movs	r2, #11
 80098ae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80098b0:	e058      	b.n	8009964 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80098b2:	7bbb      	ldrb	r3, [r7, #14]
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	d154      	bne.n	8009964 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	220d      	movs	r2, #13
 80098be:	701a      	strb	r2, [r3, #0]
      break;
 80098c0:	e050      	b.n	8009964 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	220d      	movs	r2, #13
 80098c6:	701a      	strb	r2, [r3, #0]
      break;
 80098c8:	e04c      	b.n	8009964 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d049      	beq.n	8009968 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098da:	695b      	ldr	r3, [r3, #20]
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	4798      	blx	r3
      }
      break;
 80098e0:	e042      	b.n	8009968 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7ff fd72 	bl	80093d4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d009      	beq.n	800990e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009914:	2b00      	cmp	r3, #0
 8009916:	d005      	beq.n	8009924 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800991e:	2105      	movs	r1, #5
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800992a:	b2db      	uxtb	r3, r3
 800992c:	2b01      	cmp	r3, #1
 800992e:	d107      	bne.n	8009940 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7ff fe2b 	bl	8009594 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800993e:	e014      	b.n	800996a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f001 f9b5 	bl	800acb0 <USBH_LL_Start>
      break;
 8009946:	e010      	b.n	800996a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009948:	bf00      	nop
 800994a:	e00e      	b.n	800996a <USBH_Process+0x3b6>
      break;
 800994c:	bf00      	nop
 800994e:	e00c      	b.n	800996a <USBH_Process+0x3b6>
      break;
 8009950:	bf00      	nop
 8009952:	e00a      	b.n	800996a <USBH_Process+0x3b6>
    break;
 8009954:	bf00      	nop
 8009956:	e008      	b.n	800996a <USBH_Process+0x3b6>
      break;
 8009958:	bf00      	nop
 800995a:	e006      	b.n	800996a <USBH_Process+0x3b6>
      break;
 800995c:	bf00      	nop
 800995e:	e004      	b.n	800996a <USBH_Process+0x3b6>
      break;
 8009960:	bf00      	nop
 8009962:	e002      	b.n	800996a <USBH_Process+0x3b6>
      break;
 8009964:	bf00      	nop
 8009966:	e000      	b.n	800996a <USBH_Process+0x3b6>
      break;
 8009968:	bf00      	nop
  }
  return USBH_OK;
 800996a:	2300      	movs	r3, #0
}
 800996c:	4618      	mov	r0, r3
 800996e:	3710      	adds	r7, #16
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b088      	sub	sp, #32
 8009978:	af04      	add	r7, sp, #16
 800997a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800997c:	2301      	movs	r3, #1
 800997e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009980:	2301      	movs	r3, #1
 8009982:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	785b      	ldrb	r3, [r3, #1]
 8009988:	2b07      	cmp	r3, #7
 800998a:	f200 81c1 	bhi.w	8009d10 <USBH_HandleEnum+0x39c>
 800998e:	a201      	add	r2, pc, #4	; (adr r2, 8009994 <USBH_HandleEnum+0x20>)
 8009990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009994:	080099b5 	.word	0x080099b5
 8009998:	08009a73 	.word	0x08009a73
 800999c:	08009add 	.word	0x08009add
 80099a0:	08009b6b 	.word	0x08009b6b
 80099a4:	08009bd5 	.word	0x08009bd5
 80099a8:	08009c45 	.word	0x08009c45
 80099ac:	08009c8b 	.word	0x08009c8b
 80099b0:	08009cd1 	.word	0x08009cd1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80099b4:	2108      	movs	r1, #8
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 fa50 	bl	8009e5c <USBH_Get_DevDesc>
 80099bc:	4603      	mov	r3, r0
 80099be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80099c0:	7bbb      	ldrb	r3, [r7, #14]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d130      	bne.n	8009a28 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2201      	movs	r2, #1
 80099d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	7919      	ldrb	r1, [r3, #4]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80099ea:	b292      	uxth	r2, r2
 80099ec:	9202      	str	r2, [sp, #8]
 80099ee:	2200      	movs	r2, #0
 80099f0:	9201      	str	r2, [sp, #4]
 80099f2:	9300      	str	r3, [sp, #0]
 80099f4:	4603      	mov	r3, r0
 80099f6:	2280      	movs	r2, #128	; 0x80
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 ff77 	bl	800a8ec <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	7959      	ldrb	r1, [r3, #5]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a12:	b292      	uxth	r2, r2
 8009a14:	9202      	str	r2, [sp, #8]
 8009a16:	2200      	movs	r2, #0
 8009a18:	9201      	str	r2, [sp, #4]
 8009a1a:	9300      	str	r3, [sp, #0]
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2200      	movs	r2, #0
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 ff63 	bl	800a8ec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009a26:	e175      	b.n	8009d14 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a28:	7bbb      	ldrb	r3, [r7, #14]
 8009a2a:	2b03      	cmp	r3, #3
 8009a2c:	f040 8172 	bne.w	8009d14 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a36:	3301      	adds	r3, #1
 8009a38:	b2da      	uxtb	r2, r3
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a46:	2b03      	cmp	r3, #3
 8009a48:	d903      	bls.n	8009a52 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	220d      	movs	r2, #13
 8009a4e:	701a      	strb	r2, [r3, #0]
      break;
 8009a50:	e160      	b.n	8009d14 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	795b      	ldrb	r3, [r3, #5]
 8009a56:	4619      	mov	r1, r3
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 ff97 	bl	800a98c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	791b      	ldrb	r3, [r3, #4]
 8009a62:	4619      	mov	r1, r3
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 ff91 	bl	800a98c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	701a      	strb	r2, [r3, #0]
      break;
 8009a70:	e150      	b.n	8009d14 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009a72:	2112      	movs	r1, #18
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 f9f1 	bl	8009e5c <USBH_Get_DevDesc>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a7e:	7bbb      	ldrb	r3, [r7, #14]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d103      	bne.n	8009a8c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2202      	movs	r2, #2
 8009a88:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009a8a:	e145      	b.n	8009d18 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a8c:	7bbb      	ldrb	r3, [r7, #14]
 8009a8e:	2b03      	cmp	r3, #3
 8009a90:	f040 8142 	bne.w	8009d18 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	b2da      	uxtb	r2, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009aaa:	2b03      	cmp	r3, #3
 8009aac:	d903      	bls.n	8009ab6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	220d      	movs	r2, #13
 8009ab2:	701a      	strb	r2, [r3, #0]
      break;
 8009ab4:	e130      	b.n	8009d18 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	795b      	ldrb	r3, [r3, #5]
 8009aba:	4619      	mov	r1, r3
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 ff65 	bl	800a98c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	791b      	ldrb	r3, [r3, #4]
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 ff5f 	bl	800a98c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	701a      	strb	r2, [r3, #0]
      break;
 8009ada:	e11d      	b.n	8009d18 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009adc:	2101      	movs	r1, #1
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fa68 	bl	8009fb4 <USBH_SetAddress>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ae8:	7bbb      	ldrb	r3, [r7, #14]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d132      	bne.n	8009b54 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009aee:	2002      	movs	r0, #2
 8009af0:	f001 fa42 	bl	800af78 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2203      	movs	r2, #3
 8009b00:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	7919      	ldrb	r1, [r3, #4]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009b16:	b292      	uxth	r2, r2
 8009b18:	9202      	str	r2, [sp, #8]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	9201      	str	r2, [sp, #4]
 8009b1e:	9300      	str	r3, [sp, #0]
 8009b20:	4603      	mov	r3, r0
 8009b22:	2280      	movs	r2, #128	; 0x80
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 fee1 	bl	800a8ec <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	7959      	ldrb	r1, [r3, #5]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009b3e:	b292      	uxth	r2, r2
 8009b40:	9202      	str	r2, [sp, #8]
 8009b42:	2200      	movs	r2, #0
 8009b44:	9201      	str	r2, [sp, #4]
 8009b46:	9300      	str	r3, [sp, #0]
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 fecd 	bl	800a8ec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009b52:	e0e3      	b.n	8009d1c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b54:	7bbb      	ldrb	r3, [r7, #14]
 8009b56:	2b03      	cmp	r3, #3
 8009b58:	f040 80e0 	bne.w	8009d1c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	220d      	movs	r2, #13
 8009b60:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	705a      	strb	r2, [r3, #1]
      break;
 8009b68:	e0d8      	b.n	8009d1c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009b6a:	2109      	movs	r1, #9
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 f99d 	bl	8009eac <USBH_Get_CfgDesc>
 8009b72:	4603      	mov	r3, r0
 8009b74:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b76:	7bbb      	ldrb	r3, [r7, #14]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d103      	bne.n	8009b84 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2204      	movs	r2, #4
 8009b80:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009b82:	e0cd      	b.n	8009d20 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b84:	7bbb      	ldrb	r3, [r7, #14]
 8009b86:	2b03      	cmp	r3, #3
 8009b88:	f040 80ca 	bne.w	8009d20 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b92:	3301      	adds	r3, #1
 8009b94:	b2da      	uxtb	r2, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009ba2:	2b03      	cmp	r3, #3
 8009ba4:	d903      	bls.n	8009bae <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	220d      	movs	r2, #13
 8009baa:	701a      	strb	r2, [r3, #0]
      break;
 8009bac:	e0b8      	b.n	8009d20 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	795b      	ldrb	r3, [r3, #5]
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fee9 	bl	800a98c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	791b      	ldrb	r3, [r3, #4]
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 fee3 	bl	800a98c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	701a      	strb	r2, [r3, #0]
      break;
 8009bd2:	e0a5      	b.n	8009d20 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009bda:	4619      	mov	r1, r3
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 f965 	bl	8009eac <USBH_Get_CfgDesc>
 8009be2:	4603      	mov	r3, r0
 8009be4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009be6:	7bbb      	ldrb	r3, [r7, #14]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d103      	bne.n	8009bf4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2205      	movs	r2, #5
 8009bf0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009bf2:	e097      	b.n	8009d24 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009bf4:	7bbb      	ldrb	r3, [r7, #14]
 8009bf6:	2b03      	cmp	r3, #3
 8009bf8:	f040 8094 	bne.w	8009d24 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009c02:	3301      	adds	r3, #1
 8009c04:	b2da      	uxtb	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009c12:	2b03      	cmp	r3, #3
 8009c14:	d903      	bls.n	8009c1e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	220d      	movs	r2, #13
 8009c1a:	701a      	strb	r2, [r3, #0]
      break;
 8009c1c:	e082      	b.n	8009d24 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	795b      	ldrb	r3, [r3, #5]
 8009c22:	4619      	mov	r1, r3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 feb1 	bl	800a98c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	791b      	ldrb	r3, [r3, #4]
 8009c2e:	4619      	mov	r1, r3
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 feab 	bl	800a98c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	701a      	strb	r2, [r3, #0]
      break;
 8009c42:	e06f      	b.n	8009d24 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d019      	beq.n	8009c82 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009c5a:	23ff      	movs	r3, #255	; 0xff
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f949 	bl	8009ef4 <USBH_Get_StringDesc>
 8009c62:	4603      	mov	r3, r0
 8009c64:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009c66:	7bbb      	ldrb	r3, [r7, #14]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d103      	bne.n	8009c74 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2206      	movs	r2, #6
 8009c70:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009c72:	e059      	b.n	8009d28 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c74:	7bbb      	ldrb	r3, [r7, #14]
 8009c76:	2b03      	cmp	r3, #3
 8009c78:	d156      	bne.n	8009d28 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2206      	movs	r2, #6
 8009c7e:	705a      	strb	r2, [r3, #1]
      break;
 8009c80:	e052      	b.n	8009d28 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2206      	movs	r2, #6
 8009c86:	705a      	strb	r2, [r3, #1]
      break;
 8009c88:	e04e      	b.n	8009d28 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d019      	beq.n	8009cc8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009ca0:	23ff      	movs	r3, #255	; 0xff
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 f926 	bl	8009ef4 <USBH_Get_StringDesc>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009cac:	7bbb      	ldrb	r3, [r7, #14]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d103      	bne.n	8009cba <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2207      	movs	r2, #7
 8009cb6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009cb8:	e038      	b.n	8009d2c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009cba:	7bbb      	ldrb	r3, [r7, #14]
 8009cbc:	2b03      	cmp	r3, #3
 8009cbe:	d135      	bne.n	8009d2c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2207      	movs	r2, #7
 8009cc4:	705a      	strb	r2, [r3, #1]
      break;
 8009cc6:	e031      	b.n	8009d2c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2207      	movs	r2, #7
 8009ccc:	705a      	strb	r2, [r3, #1]
      break;
 8009cce:	e02d      	b.n	8009d2c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d017      	beq.n	8009d0a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009ce6:	23ff      	movs	r3, #255	; 0xff
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 f903 	bl	8009ef4 <USBH_Get_StringDesc>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009cf2:	7bbb      	ldrb	r3, [r7, #14]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d102      	bne.n	8009cfe <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009cfc:	e018      	b.n	8009d30 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009cfe:	7bbb      	ldrb	r3, [r7, #14]
 8009d00:	2b03      	cmp	r3, #3
 8009d02:	d115      	bne.n	8009d30 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009d04:	2300      	movs	r3, #0
 8009d06:	73fb      	strb	r3, [r7, #15]
      break;
 8009d08:	e012      	b.n	8009d30 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8009d0e:	e00f      	b.n	8009d30 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009d10:	bf00      	nop
 8009d12:	e00e      	b.n	8009d32 <USBH_HandleEnum+0x3be>
      break;
 8009d14:	bf00      	nop
 8009d16:	e00c      	b.n	8009d32 <USBH_HandleEnum+0x3be>
      break;
 8009d18:	bf00      	nop
 8009d1a:	e00a      	b.n	8009d32 <USBH_HandleEnum+0x3be>
      break;
 8009d1c:	bf00      	nop
 8009d1e:	e008      	b.n	8009d32 <USBH_HandleEnum+0x3be>
      break;
 8009d20:	bf00      	nop
 8009d22:	e006      	b.n	8009d32 <USBH_HandleEnum+0x3be>
      break;
 8009d24:	bf00      	nop
 8009d26:	e004      	b.n	8009d32 <USBH_HandleEnum+0x3be>
      break;
 8009d28:	bf00      	nop
 8009d2a:	e002      	b.n	8009d32 <USBH_HandleEnum+0x3be>
      break;
 8009d2c:	bf00      	nop
 8009d2e:	e000      	b.n	8009d32 <USBH_HandleEnum+0x3be>
      break;
 8009d30:	bf00      	nop
  }
  return Status;
 8009d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3710      	adds	r7, #16
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	683a      	ldr	r2, [r7, #0]
 8009d4a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009d4e:	bf00      	nop
 8009d50:	370c      	adds	r7, #12
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr

08009d5a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b082      	sub	sp, #8
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009d68:	1c5a      	adds	r2, r3, #1
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 f804 	bl	8009d7e <USBH_HandleSof>
}
 8009d76:	bf00      	nop
 8009d78:	3708      	adds	r7, #8
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b082      	sub	sp, #8
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	2b0b      	cmp	r3, #11
 8009d8e:	d10a      	bne.n	8009da6 <USBH_HandleSof+0x28>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d005      	beq.n	8009da6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009da0:	699b      	ldr	r3, [r3, #24]
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	4798      	blx	r3
  }
}
 8009da6:	bf00      	nop
 8009da8:	3708      	adds	r7, #8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009dae:	b480      	push	{r7}
 8009db0:	b083      	sub	sp, #12
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2201      	movs	r2, #1
 8009dba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009dbe:	bf00      	nop
}
 8009dc0:	370c      	adds	r7, #12
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr

08009dca <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009dca:	b480      	push	{r7}
 8009dcc:	b083      	sub	sp, #12
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009dda:	bf00      	nop
}
 8009ddc:	370c      	adds	r7, #12
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr

08009de6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009de6:	b480      	push	{r7}
 8009de8:	b083      	sub	sp, #12
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2201      	movs	r2, #1
 8009df2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 ff56 	bl	800ace6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	791b      	ldrb	r3, [r3, #4]
 8009e3e:	4619      	mov	r1, r3
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 fda3 	bl	800a98c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	795b      	ldrb	r3, [r3, #5]
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 fd9d 	bl	800a98c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3708      	adds	r7, #8
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b086      	sub	sp, #24
 8009e60:	af02      	add	r7, sp, #8
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	460b      	mov	r3, r1
 8009e66:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009e6e:	78fb      	ldrb	r3, [r7, #3]
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	9300      	str	r3, [sp, #0]
 8009e74:	4613      	mov	r3, r2
 8009e76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 f864 	bl	8009f4a <USBH_GetDescriptor>
 8009e82:	4603      	mov	r3, r0
 8009e84:	73fb      	strb	r3, [r7, #15]
 8009e86:	7bfb      	ldrb	r3, [r7, #15]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10a      	bne.n	8009ea2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009e98:	78fa      	ldrb	r2, [r7, #3]
 8009e9a:	b292      	uxth	r2, r2
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	f000 f918 	bl	800a0d2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b086      	sub	sp, #24
 8009eb0:	af02      	add	r7, sp, #8
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	331c      	adds	r3, #28
 8009ebc:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009ebe:	887b      	ldrh	r3, [r7, #2]
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ec8:	2100      	movs	r1, #0
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 f83d 	bl	8009f4a <USBH_GetDescriptor>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	72fb      	strb	r3, [r7, #11]
 8009ed4:	7afb      	ldrb	r3, [r7, #11]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d107      	bne.n	8009eea <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009ee0:	887a      	ldrh	r2, [r7, #2]
 8009ee2:	68f9      	ldr	r1, [r7, #12]
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f000 f964 	bl	800a1b2 <USBH_ParseCfgDesc>
  }

  return status;
 8009eea:	7afb      	ldrb	r3, [r7, #11]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b088      	sub	sp, #32
 8009ef8:	af02      	add	r7, sp, #8
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	607a      	str	r2, [r7, #4]
 8009efe:	461a      	mov	r2, r3
 8009f00:	460b      	mov	r3, r1
 8009f02:	72fb      	strb	r3, [r7, #11]
 8009f04:	4613      	mov	r3, r2
 8009f06:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009f08:	7afb      	ldrb	r3, [r7, #11]
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009f10:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009f18:	893b      	ldrh	r3, [r7, #8]
 8009f1a:	9300      	str	r3, [sp, #0]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	2100      	movs	r1, #0
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	f000 f812 	bl	8009f4a <USBH_GetDescriptor>
 8009f26:	4603      	mov	r3, r0
 8009f28:	75fb      	strb	r3, [r7, #23]
 8009f2a:	7dfb      	ldrb	r3, [r7, #23]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d107      	bne.n	8009f40 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009f36:	893a      	ldrh	r2, [r7, #8]
 8009f38:	6879      	ldr	r1, [r7, #4]
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f000 fa37 	bl	800a3ae <USBH_ParseStringDesc>
  }

  return status;
 8009f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3718      	adds	r7, #24
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b084      	sub	sp, #16
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	60f8      	str	r0, [r7, #12]
 8009f52:	607b      	str	r3, [r7, #4]
 8009f54:	460b      	mov	r3, r1
 8009f56:	72fb      	strb	r3, [r7, #11]
 8009f58:	4613      	mov	r3, r2
 8009f5a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	789b      	ldrb	r3, [r3, #2]
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d11c      	bne.n	8009f9e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009f64:	7afb      	ldrb	r3, [r7, #11]
 8009f66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009f6a:	b2da      	uxtb	r2, r3
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2206      	movs	r2, #6
 8009f74:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	893a      	ldrh	r2, [r7, #8]
 8009f7a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009f7c:	893b      	ldrh	r3, [r7, #8]
 8009f7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009f82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f86:	d104      	bne.n	8009f92 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f240 4209 	movw	r2, #1033	; 0x409
 8009f8e:	829a      	strh	r2, [r3, #20]
 8009f90:	e002      	b.n	8009f98 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2200      	movs	r2, #0
 8009f96:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	8b3a      	ldrh	r2, [r7, #24]
 8009f9c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009f9e:	8b3b      	ldrh	r3, [r7, #24]
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	6879      	ldr	r1, [r7, #4]
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	f000 fa50 	bl	800a44a <USBH_CtlReq>
 8009faa:	4603      	mov	r3, r0
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3710      	adds	r7, #16
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	789b      	ldrb	r3, [r3, #2]
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d10f      	bne.n	8009fe8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2205      	movs	r2, #5
 8009fd2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009fd4:	78fb      	ldrb	r3, [r7, #3]
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009fe8:	2200      	movs	r2, #0
 8009fea:	2100      	movs	r1, #0
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 fa2c 	bl	800a44a <USBH_CtlReq>
 8009ff2:	4603      	mov	r3, r0
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3708      	adds	r7, #8
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	460b      	mov	r3, r1
 800a006:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	789b      	ldrb	r3, [r3, #2]
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d10e      	bne.n	800a02e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2209      	movs	r2, #9
 800a01a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	887a      	ldrh	r2, [r7, #2]
 800a020:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a02e:	2200      	movs	r2, #0
 800a030:	2100      	movs	r1, #0
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 fa09 	bl	800a44a <USBH_CtlReq>
 800a038:	4603      	mov	r3, r0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3708      	adds	r7, #8
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b082      	sub	sp, #8
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
 800a04a:	460b      	mov	r3, r1
 800a04c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	789b      	ldrb	r3, [r3, #2]
 800a052:	2b01      	cmp	r3, #1
 800a054:	d10f      	bne.n	800a076 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2203      	movs	r2, #3
 800a060:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a062:	78fb      	ldrb	r3, [r7, #3]
 800a064:	b29a      	uxth	r2, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a076:	2200      	movs	r2, #0
 800a078:	2100      	movs	r1, #0
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 f9e5 	bl	800a44a <USBH_CtlReq>
 800a080:	4603      	mov	r3, r0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3708      	adds	r7, #8
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b082      	sub	sp, #8
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
 800a092:	460b      	mov	r3, r1
 800a094:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	789b      	ldrb	r3, [r3, #2]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d10f      	bne.n	800a0be <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2202      	movs	r2, #2
 800a0a2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a0b0:	78fb      	ldrb	r3, [r7, #3]
 800a0b2:	b29a      	uxth	r2, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a0be:	2200      	movs	r2, #0
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f9c1 	bl	800a44a <USBH_CtlReq>
 800a0c8:	4603      	mov	r3, r0
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3708      	adds	r7, #8
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a0d2:	b480      	push	{r7}
 800a0d4:	b085      	sub	sp, #20
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	60f8      	str	r0, [r7, #12]
 800a0da:	60b9      	str	r1, [r7, #8]
 800a0dc:	4613      	mov	r3, r2
 800a0de:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	781a      	ldrb	r2, [r3, #0]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	785a      	ldrb	r2, [r3, #1]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	3302      	adds	r3, #2
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	b29a      	uxth	r2, r3
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	3303      	adds	r3, #3
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	021b      	lsls	r3, r3, #8
 800a102:	b29b      	uxth	r3, r3
 800a104:	4313      	orrs	r3, r2
 800a106:	b29a      	uxth	r2, r3
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	791a      	ldrb	r2, [r3, #4]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	795a      	ldrb	r2, [r3, #5]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	799a      	ldrb	r2, [r3, #6]
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	79da      	ldrb	r2, [r3, #7]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a12c:	88fb      	ldrh	r3, [r7, #6]
 800a12e:	2b08      	cmp	r3, #8
 800a130:	d939      	bls.n	800a1a6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	3308      	adds	r3, #8
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	b29a      	uxth	r2, r3
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	3309      	adds	r3, #9
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	b29b      	uxth	r3, r3
 800a142:	021b      	lsls	r3, r3, #8
 800a144:	b29b      	uxth	r3, r3
 800a146:	4313      	orrs	r3, r2
 800a148:	b29a      	uxth	r2, r3
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	330a      	adds	r3, #10
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	b29a      	uxth	r2, r3
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	330b      	adds	r3, #11
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	021b      	lsls	r3, r3, #8
 800a160:	b29b      	uxth	r3, r3
 800a162:	4313      	orrs	r3, r2
 800a164:	b29a      	uxth	r2, r3
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	330c      	adds	r3, #12
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	b29a      	uxth	r2, r3
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	330d      	adds	r3, #13
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	b29b      	uxth	r3, r3
 800a17a:	021b      	lsls	r3, r3, #8
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	4313      	orrs	r3, r2
 800a180:	b29a      	uxth	r2, r3
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	7b9a      	ldrb	r2, [r3, #14]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	7bda      	ldrb	r2, [r3, #15]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	7c1a      	ldrb	r2, [r3, #16]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	7c5a      	ldrb	r2, [r3, #17]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	745a      	strb	r2, [r3, #17]
  }
}
 800a1a6:	bf00      	nop
 800a1a8:	3714      	adds	r7, #20
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr

0800a1b2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b08a      	sub	sp, #40	; 0x28
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	60f8      	str	r0, [r7, #12]
 800a1ba:	60b9      	str	r1, [r7, #8]
 800a1bc:	4613      	mov	r3, r2
 800a1be:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	781a      	ldrb	r2, [r3, #0]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	785a      	ldrb	r2, [r3, #1]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	3302      	adds	r3, #2
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	b29a      	uxth	r2, r3
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	3303      	adds	r3, #3
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	021b      	lsls	r3, r3, #8
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	b29a      	uxth	r2, r3
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	791a      	ldrb	r2, [r3, #4]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	795a      	ldrb	r2, [r3, #5]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	799a      	ldrb	r2, [r3, #6]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	79da      	ldrb	r2, [r3, #7]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	7a1a      	ldrb	r2, [r3, #8]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a228:	88fb      	ldrh	r3, [r7, #6]
 800a22a:	2b09      	cmp	r3, #9
 800a22c:	d95f      	bls.n	800a2ee <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a22e:	2309      	movs	r3, #9
 800a230:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a232:	2300      	movs	r3, #0
 800a234:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a236:	e051      	b.n	800a2dc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a238:	f107 0316 	add.w	r3, r7, #22
 800a23c:	4619      	mov	r1, r3
 800a23e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a240:	f000 f8e8 	bl	800a414 <USBH_GetNextDesc>
 800a244:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a248:	785b      	ldrb	r3, [r3, #1]
 800a24a:	2b04      	cmp	r3, #4
 800a24c:	d146      	bne.n	800a2dc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a24e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a252:	221a      	movs	r2, #26
 800a254:	fb02 f303 	mul.w	r3, r2, r3
 800a258:	3308      	adds	r3, #8
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	4413      	add	r3, r2
 800a25e:	3302      	adds	r3, #2
 800a260:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a262:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a264:	69f8      	ldr	r0, [r7, #28]
 800a266:	f000 f846 	bl	800a2f6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a26a:	2300      	movs	r3, #0
 800a26c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a270:	2300      	movs	r3, #0
 800a272:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a274:	e022      	b.n	800a2bc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a276:	f107 0316 	add.w	r3, r7, #22
 800a27a:	4619      	mov	r1, r3
 800a27c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a27e:	f000 f8c9 	bl	800a414 <USBH_GetNextDesc>
 800a282:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a286:	785b      	ldrb	r3, [r3, #1]
 800a288:	2b05      	cmp	r3, #5
 800a28a:	d117      	bne.n	800a2bc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a28c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a290:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a294:	3201      	adds	r2, #1
 800a296:	00d2      	lsls	r2, r2, #3
 800a298:	211a      	movs	r1, #26
 800a29a:	fb01 f303 	mul.w	r3, r1, r3
 800a29e:	4413      	add	r3, r2
 800a2a0:	3308      	adds	r3, #8
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	3304      	adds	r3, #4
 800a2a8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a2aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a2ac:	69b8      	ldr	r0, [r7, #24]
 800a2ae:	f000 f851 	bl	800a354 <USBH_ParseEPDesc>
            ep_ix++;
 800a2b2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	791b      	ldrb	r3, [r3, #4]
 800a2c0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d204      	bcs.n	800a2d2 <USBH_ParseCfgDesc+0x120>
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	885a      	ldrh	r2, [r3, #2]
 800a2cc:	8afb      	ldrh	r3, [r7, #22]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d8d1      	bhi.n	800a276 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a2d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a2dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d804      	bhi.n	800a2ee <USBH_ParseCfgDesc+0x13c>
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	885a      	ldrh	r2, [r3, #2]
 800a2e8:	8afb      	ldrh	r3, [r7, #22]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d8a4      	bhi.n	800a238 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a2ee:	bf00      	nop
 800a2f0:	3728      	adds	r7, #40	; 0x28
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}

0800a2f6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a2f6:	b480      	push	{r7}
 800a2f8:	b083      	sub	sp, #12
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
 800a2fe:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	781a      	ldrb	r2, [r3, #0]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	785a      	ldrb	r2, [r3, #1]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	789a      	ldrb	r2, [r3, #2]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	78da      	ldrb	r2, [r3, #3]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	791a      	ldrb	r2, [r3, #4]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	795a      	ldrb	r2, [r3, #5]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	799a      	ldrb	r2, [r3, #6]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	79da      	ldrb	r2, [r3, #7]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	7a1a      	ldrb	r2, [r3, #8]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	721a      	strb	r2, [r3, #8]
}
 800a348:	bf00      	nop
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	781a      	ldrb	r2, [r3, #0]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	785a      	ldrb	r2, [r3, #1]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	789a      	ldrb	r2, [r3, #2]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	78da      	ldrb	r2, [r3, #3]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	3304      	adds	r3, #4
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	b29a      	uxth	r2, r3
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	3305      	adds	r3, #5
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	021b      	lsls	r3, r3, #8
 800a390:	b29b      	uxth	r3, r3
 800a392:	4313      	orrs	r3, r2
 800a394:	b29a      	uxth	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	799a      	ldrb	r2, [r3, #6]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	719a      	strb	r2, [r3, #6]
}
 800a3a2:	bf00      	nop
 800a3a4:	370c      	adds	r7, #12
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr

0800a3ae <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a3ae:	b480      	push	{r7}
 800a3b0:	b087      	sub	sp, #28
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	60f8      	str	r0, [r7, #12]
 800a3b6:	60b9      	str	r1, [r7, #8]
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	2b03      	cmp	r3, #3
 800a3c4:	d120      	bne.n	800a408 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	1e9a      	subs	r2, r3, #2
 800a3cc:	88fb      	ldrh	r3, [r7, #6]
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	bf28      	it	cs
 800a3d2:	4613      	movcs	r3, r2
 800a3d4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	3302      	adds	r3, #2
 800a3da:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a3dc:	2300      	movs	r3, #0
 800a3de:	82fb      	strh	r3, [r7, #22]
 800a3e0:	e00b      	b.n	800a3fa <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a3e2:	8afb      	ldrh	r3, [r7, #22]
 800a3e4:	68fa      	ldr	r2, [r7, #12]
 800a3e6:	4413      	add	r3, r2
 800a3e8:	781a      	ldrb	r2, [r3, #0]
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a3f4:	8afb      	ldrh	r3, [r7, #22]
 800a3f6:	3302      	adds	r3, #2
 800a3f8:	82fb      	strh	r3, [r7, #22]
 800a3fa:	8afa      	ldrh	r2, [r7, #22]
 800a3fc:	8abb      	ldrh	r3, [r7, #20]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d3ef      	bcc.n	800a3e2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	2200      	movs	r2, #0
 800a406:	701a      	strb	r2, [r3, #0]
  }
}
 800a408:	bf00      	nop
 800a40a:	371c      	adds	r7, #28
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a414:	b480      	push	{r7}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	881a      	ldrh	r2, [r3, #0]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	b29b      	uxth	r3, r3
 800a428:	4413      	add	r3, r2
 800a42a:	b29a      	uxth	r2, r3
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4413      	add	r3, r2
 800a43a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a43c:	68fb      	ldr	r3, [r7, #12]
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3714      	adds	r7, #20
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr

0800a44a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b086      	sub	sp, #24
 800a44e:	af00      	add	r7, sp, #0
 800a450:	60f8      	str	r0, [r7, #12]
 800a452:	60b9      	str	r1, [r7, #8]
 800a454:	4613      	mov	r3, r2
 800a456:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a458:	2301      	movs	r3, #1
 800a45a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	789b      	ldrb	r3, [r3, #2]
 800a460:	2b01      	cmp	r3, #1
 800a462:	d002      	beq.n	800a46a <USBH_CtlReq+0x20>
 800a464:	2b02      	cmp	r3, #2
 800a466:	d00f      	beq.n	800a488 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a468:	e027      	b.n	800a4ba <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	68ba      	ldr	r2, [r7, #8]
 800a46e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	88fa      	ldrh	r2, [r7, #6]
 800a474:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2201      	movs	r2, #1
 800a47a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2202      	movs	r2, #2
 800a480:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a482:	2301      	movs	r3, #1
 800a484:	75fb      	strb	r3, [r7, #23]
      break;
 800a486:	e018      	b.n	800a4ba <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a488:	68f8      	ldr	r0, [r7, #12]
 800a48a:	f000 f81b 	bl	800a4c4 <USBH_HandleControl>
 800a48e:	4603      	mov	r3, r0
 800a490:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a492:	7dfb      	ldrb	r3, [r7, #23]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d002      	beq.n	800a49e <USBH_CtlReq+0x54>
 800a498:	7dfb      	ldrb	r3, [r7, #23]
 800a49a:	2b03      	cmp	r3, #3
 800a49c:	d106      	bne.n	800a4ac <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	761a      	strb	r2, [r3, #24]
      break;
 800a4aa:	e005      	b.n	800a4b8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a4ac:	7dfb      	ldrb	r3, [r7, #23]
 800a4ae:	2b02      	cmp	r3, #2
 800a4b0:	d102      	bne.n	800a4b8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	709a      	strb	r2, [r3, #2]
      break;
 800a4b8:	bf00      	nop
  }
  return status;
 800a4ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3718      	adds	r7, #24
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b086      	sub	sp, #24
 800a4c8:	af02      	add	r7, sp, #8
 800a4ca:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	7e1b      	ldrb	r3, [r3, #24]
 800a4d8:	3b01      	subs	r3, #1
 800a4da:	2b0a      	cmp	r3, #10
 800a4dc:	f200 8156 	bhi.w	800a78c <USBH_HandleControl+0x2c8>
 800a4e0:	a201      	add	r2, pc, #4	; (adr r2, 800a4e8 <USBH_HandleControl+0x24>)
 800a4e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e6:	bf00      	nop
 800a4e8:	0800a515 	.word	0x0800a515
 800a4ec:	0800a52f 	.word	0x0800a52f
 800a4f0:	0800a599 	.word	0x0800a599
 800a4f4:	0800a5bf 	.word	0x0800a5bf
 800a4f8:	0800a5f7 	.word	0x0800a5f7
 800a4fc:	0800a621 	.word	0x0800a621
 800a500:	0800a673 	.word	0x0800a673
 800a504:	0800a695 	.word	0x0800a695
 800a508:	0800a6d1 	.word	0x0800a6d1
 800a50c:	0800a6f7 	.word	0x0800a6f7
 800a510:	0800a735 	.word	0x0800a735
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f103 0110 	add.w	r1, r3, #16
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	795b      	ldrb	r3, [r3, #5]
 800a51e:	461a      	mov	r2, r3
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 f943 	bl	800a7ac <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2202      	movs	r2, #2
 800a52a:	761a      	strb	r2, [r3, #24]
      break;
 800a52c:	e139      	b.n	800a7a2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	795b      	ldrb	r3, [r3, #5]
 800a532:	4619      	mov	r1, r3
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 fcc5 	bl	800aec4 <USBH_LL_GetURBState>
 800a53a:	4603      	mov	r3, r0
 800a53c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a53e:	7bbb      	ldrb	r3, [r7, #14]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d11e      	bne.n	800a582 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	7c1b      	ldrb	r3, [r3, #16]
 800a548:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a54c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	8adb      	ldrh	r3, [r3, #22]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00a      	beq.n	800a56c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a556:	7b7b      	ldrb	r3, [r7, #13]
 800a558:	2b80      	cmp	r3, #128	; 0x80
 800a55a:	d103      	bne.n	800a564 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2203      	movs	r2, #3
 800a560:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a562:	e115      	b.n	800a790 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2205      	movs	r2, #5
 800a568:	761a      	strb	r2, [r3, #24]
      break;
 800a56a:	e111      	b.n	800a790 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a56c:	7b7b      	ldrb	r3, [r7, #13]
 800a56e:	2b80      	cmp	r3, #128	; 0x80
 800a570:	d103      	bne.n	800a57a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2209      	movs	r2, #9
 800a576:	761a      	strb	r2, [r3, #24]
      break;
 800a578:	e10a      	b.n	800a790 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2207      	movs	r2, #7
 800a57e:	761a      	strb	r2, [r3, #24]
      break;
 800a580:	e106      	b.n	800a790 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a582:	7bbb      	ldrb	r3, [r7, #14]
 800a584:	2b04      	cmp	r3, #4
 800a586:	d003      	beq.n	800a590 <USBH_HandleControl+0xcc>
 800a588:	7bbb      	ldrb	r3, [r7, #14]
 800a58a:	2b02      	cmp	r3, #2
 800a58c:	f040 8100 	bne.w	800a790 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	220b      	movs	r2, #11
 800a594:	761a      	strb	r2, [r3, #24]
      break;
 800a596:	e0fb      	b.n	800a790 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6899      	ldr	r1, [r3, #8]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	899a      	ldrh	r2, [r3, #12]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	791b      	ldrb	r3, [r3, #4]
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 f93a 	bl	800a82a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2204      	movs	r2, #4
 800a5ba:	761a      	strb	r2, [r3, #24]
      break;
 800a5bc:	e0f1      	b.n	800a7a2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	791b      	ldrb	r3, [r3, #4]
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 fc7d 	bl	800aec4 <USBH_LL_GetURBState>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a5ce:	7bbb      	ldrb	r3, [r7, #14]
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d102      	bne.n	800a5da <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2209      	movs	r2, #9
 800a5d8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a5da:	7bbb      	ldrb	r3, [r7, #14]
 800a5dc:	2b05      	cmp	r3, #5
 800a5de:	d102      	bne.n	800a5e6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a5e0:	2303      	movs	r3, #3
 800a5e2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a5e4:	e0d6      	b.n	800a794 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a5e6:	7bbb      	ldrb	r3, [r7, #14]
 800a5e8:	2b04      	cmp	r3, #4
 800a5ea:	f040 80d3 	bne.w	800a794 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	220b      	movs	r2, #11
 800a5f2:	761a      	strb	r2, [r3, #24]
      break;
 800a5f4:	e0ce      	b.n	800a794 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6899      	ldr	r1, [r3, #8]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	899a      	ldrh	r2, [r3, #12]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	795b      	ldrb	r3, [r3, #5]
 800a602:	2001      	movs	r0, #1
 800a604:	9000      	str	r0, [sp, #0]
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 f8ea 	bl	800a7e0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a612:	b29a      	uxth	r2, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2206      	movs	r2, #6
 800a61c:	761a      	strb	r2, [r3, #24]
      break;
 800a61e:	e0c0      	b.n	800a7a2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	795b      	ldrb	r3, [r3, #5]
 800a624:	4619      	mov	r1, r3
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 fc4c 	bl	800aec4 <USBH_LL_GetURBState>
 800a62c:	4603      	mov	r3, r0
 800a62e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a630:	7bbb      	ldrb	r3, [r7, #14]
 800a632:	2b01      	cmp	r3, #1
 800a634:	d103      	bne.n	800a63e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2207      	movs	r2, #7
 800a63a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a63c:	e0ac      	b.n	800a798 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a63e:	7bbb      	ldrb	r3, [r7, #14]
 800a640:	2b05      	cmp	r3, #5
 800a642:	d105      	bne.n	800a650 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	220c      	movs	r2, #12
 800a648:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a64a:	2303      	movs	r3, #3
 800a64c:	73fb      	strb	r3, [r7, #15]
      break;
 800a64e:	e0a3      	b.n	800a798 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a650:	7bbb      	ldrb	r3, [r7, #14]
 800a652:	2b02      	cmp	r3, #2
 800a654:	d103      	bne.n	800a65e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2205      	movs	r2, #5
 800a65a:	761a      	strb	r2, [r3, #24]
      break;
 800a65c:	e09c      	b.n	800a798 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a65e:	7bbb      	ldrb	r3, [r7, #14]
 800a660:	2b04      	cmp	r3, #4
 800a662:	f040 8099 	bne.w	800a798 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	220b      	movs	r2, #11
 800a66a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a66c:	2302      	movs	r3, #2
 800a66e:	73fb      	strb	r3, [r7, #15]
      break;
 800a670:	e092      	b.n	800a798 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	791b      	ldrb	r3, [r3, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	2100      	movs	r1, #0
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 f8d5 	bl	800a82a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a686:	b29a      	uxth	r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2208      	movs	r2, #8
 800a690:	761a      	strb	r2, [r3, #24]

      break;
 800a692:	e086      	b.n	800a7a2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	791b      	ldrb	r3, [r3, #4]
 800a698:	4619      	mov	r1, r3
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 fc12 	bl	800aec4 <USBH_LL_GetURBState>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a6a4:	7bbb      	ldrb	r3, [r7, #14]
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d105      	bne.n	800a6b6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	220d      	movs	r2, #13
 800a6ae:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a6b4:	e072      	b.n	800a79c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a6b6:	7bbb      	ldrb	r3, [r7, #14]
 800a6b8:	2b04      	cmp	r3, #4
 800a6ba:	d103      	bne.n	800a6c4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	220b      	movs	r2, #11
 800a6c0:	761a      	strb	r2, [r3, #24]
      break;
 800a6c2:	e06b      	b.n	800a79c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a6c4:	7bbb      	ldrb	r3, [r7, #14]
 800a6c6:	2b05      	cmp	r3, #5
 800a6c8:	d168      	bne.n	800a79c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a6ca:	2303      	movs	r3, #3
 800a6cc:	73fb      	strb	r3, [r7, #15]
      break;
 800a6ce:	e065      	b.n	800a79c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	795b      	ldrb	r3, [r3, #5]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	9200      	str	r2, [sp, #0]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	2100      	movs	r1, #0
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 f87f 	bl	800a7e0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a6e8:	b29a      	uxth	r2, r3
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	220a      	movs	r2, #10
 800a6f2:	761a      	strb	r2, [r3, #24]
      break;
 800a6f4:	e055      	b.n	800a7a2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	795b      	ldrb	r3, [r3, #5]
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 fbe1 	bl	800aec4 <USBH_LL_GetURBState>
 800a702:	4603      	mov	r3, r0
 800a704:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a706:	7bbb      	ldrb	r3, [r7, #14]
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d105      	bne.n	800a718 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a70c:	2300      	movs	r3, #0
 800a70e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	220d      	movs	r2, #13
 800a714:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a716:	e043      	b.n	800a7a0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a718:	7bbb      	ldrb	r3, [r7, #14]
 800a71a:	2b02      	cmp	r3, #2
 800a71c:	d103      	bne.n	800a726 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2209      	movs	r2, #9
 800a722:	761a      	strb	r2, [r3, #24]
      break;
 800a724:	e03c      	b.n	800a7a0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a726:	7bbb      	ldrb	r3, [r7, #14]
 800a728:	2b04      	cmp	r3, #4
 800a72a:	d139      	bne.n	800a7a0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	220b      	movs	r2, #11
 800a730:	761a      	strb	r2, [r3, #24]
      break;
 800a732:	e035      	b.n	800a7a0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	7e5b      	ldrb	r3, [r3, #25]
 800a738:	3301      	adds	r3, #1
 800a73a:	b2da      	uxtb	r2, r3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	765a      	strb	r2, [r3, #25]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	7e5b      	ldrb	r3, [r3, #25]
 800a744:	2b02      	cmp	r3, #2
 800a746:	d806      	bhi.n	800a756 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2201      	movs	r2, #1
 800a74c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2201      	movs	r2, #1
 800a752:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a754:	e025      	b.n	800a7a2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a75c:	2106      	movs	r1, #6
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	795b      	ldrb	r3, [r3, #5]
 800a76c:	4619      	mov	r1, r3
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 f90c 	bl	800a98c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	791b      	ldrb	r3, [r3, #4]
 800a778:	4619      	mov	r1, r3
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 f906 	bl	800a98c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2200      	movs	r2, #0
 800a784:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a786:	2302      	movs	r3, #2
 800a788:	73fb      	strb	r3, [r7, #15]
      break;
 800a78a:	e00a      	b.n	800a7a2 <USBH_HandleControl+0x2de>

    default:
      break;
 800a78c:	bf00      	nop
 800a78e:	e008      	b.n	800a7a2 <USBH_HandleControl+0x2de>
      break;
 800a790:	bf00      	nop
 800a792:	e006      	b.n	800a7a2 <USBH_HandleControl+0x2de>
      break;
 800a794:	bf00      	nop
 800a796:	e004      	b.n	800a7a2 <USBH_HandleControl+0x2de>
      break;
 800a798:	bf00      	nop
 800a79a:	e002      	b.n	800a7a2 <USBH_HandleControl+0x2de>
      break;
 800a79c:	bf00      	nop
 800a79e:	e000      	b.n	800a7a2 <USBH_HandleControl+0x2de>
      break;
 800a7a0:	bf00      	nop
  }

  return status;
 800a7a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3710      	adds	r7, #16
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b088      	sub	sp, #32
 800a7b0:	af04      	add	r7, sp, #16
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a7ba:	79f9      	ldrb	r1, [r7, #7]
 800a7bc:	2300      	movs	r3, #0
 800a7be:	9303      	str	r3, [sp, #12]
 800a7c0:	2308      	movs	r3, #8
 800a7c2:	9302      	str	r3, [sp, #8]
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	9301      	str	r3, [sp, #4]
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	9300      	str	r3, [sp, #0]
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f000 fb46 	bl	800ae62 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a7d6:	2300      	movs	r3, #0
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3710      	adds	r7, #16
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b088      	sub	sp, #32
 800a7e4:	af04      	add	r7, sp, #16
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	60b9      	str	r1, [r7, #8]
 800a7ea:	4611      	mov	r1, r2
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	80fb      	strh	r3, [r7, #6]
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d001      	beq.n	800a804 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a800:	2300      	movs	r3, #0
 800a802:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a804:	7979      	ldrb	r1, [r7, #5]
 800a806:	7e3b      	ldrb	r3, [r7, #24]
 800a808:	9303      	str	r3, [sp, #12]
 800a80a:	88fb      	ldrh	r3, [r7, #6]
 800a80c:	9302      	str	r3, [sp, #8]
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	9301      	str	r3, [sp, #4]
 800a812:	2301      	movs	r3, #1
 800a814:	9300      	str	r3, [sp, #0]
 800a816:	2300      	movs	r3, #0
 800a818:	2200      	movs	r2, #0
 800a81a:	68f8      	ldr	r0, [r7, #12]
 800a81c:	f000 fb21 	bl	800ae62 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	3710      	adds	r7, #16
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b088      	sub	sp, #32
 800a82e:	af04      	add	r7, sp, #16
 800a830:	60f8      	str	r0, [r7, #12]
 800a832:	60b9      	str	r1, [r7, #8]
 800a834:	4611      	mov	r1, r2
 800a836:	461a      	mov	r2, r3
 800a838:	460b      	mov	r3, r1
 800a83a:	80fb      	strh	r3, [r7, #6]
 800a83c:	4613      	mov	r3, r2
 800a83e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a840:	7979      	ldrb	r1, [r7, #5]
 800a842:	2300      	movs	r3, #0
 800a844:	9303      	str	r3, [sp, #12]
 800a846:	88fb      	ldrh	r3, [r7, #6]
 800a848:	9302      	str	r3, [sp, #8]
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	9301      	str	r3, [sp, #4]
 800a84e:	2301      	movs	r3, #1
 800a850:	9300      	str	r3, [sp, #0]
 800a852:	2300      	movs	r3, #0
 800a854:	2201      	movs	r2, #1
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f000 fb03 	bl	800ae62 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a85c:	2300      	movs	r3, #0

}
 800a85e:	4618      	mov	r0, r3
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a866:	b580      	push	{r7, lr}
 800a868:	b088      	sub	sp, #32
 800a86a:	af04      	add	r7, sp, #16
 800a86c:	60f8      	str	r0, [r7, #12]
 800a86e:	60b9      	str	r1, [r7, #8]
 800a870:	4611      	mov	r1, r2
 800a872:	461a      	mov	r2, r3
 800a874:	460b      	mov	r3, r1
 800a876:	80fb      	strh	r3, [r7, #6]
 800a878:	4613      	mov	r3, r2
 800a87a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a882:	2b00      	cmp	r3, #0
 800a884:	d001      	beq.n	800a88a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a886:	2300      	movs	r3, #0
 800a888:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a88a:	7979      	ldrb	r1, [r7, #5]
 800a88c:	7e3b      	ldrb	r3, [r7, #24]
 800a88e:	9303      	str	r3, [sp, #12]
 800a890:	88fb      	ldrh	r3, [r7, #6]
 800a892:	9302      	str	r3, [sp, #8]
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	9301      	str	r3, [sp, #4]
 800a898:	2301      	movs	r3, #1
 800a89a:	9300      	str	r3, [sp, #0]
 800a89c:	2302      	movs	r3, #2
 800a89e:	2200      	movs	r2, #0
 800a8a0:	68f8      	ldr	r0, [r7, #12]
 800a8a2:	f000 fade 	bl	800ae62 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a8a6:	2300      	movs	r3, #0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3710      	adds	r7, #16
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b088      	sub	sp, #32
 800a8b4:	af04      	add	r7, sp, #16
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	4611      	mov	r1, r2
 800a8bc:	461a      	mov	r2, r3
 800a8be:	460b      	mov	r3, r1
 800a8c0:	80fb      	strh	r3, [r7, #6]
 800a8c2:	4613      	mov	r3, r2
 800a8c4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a8c6:	7979      	ldrb	r1, [r7, #5]
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	9303      	str	r3, [sp, #12]
 800a8cc:	88fb      	ldrh	r3, [r7, #6]
 800a8ce:	9302      	str	r3, [sp, #8]
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	9301      	str	r3, [sp, #4]
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	9300      	str	r3, [sp, #0]
 800a8d8:	2302      	movs	r3, #2
 800a8da:	2201      	movs	r2, #1
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f000 fac0 	bl	800ae62 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3710      	adds	r7, #16
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b086      	sub	sp, #24
 800a8f0:	af04      	add	r7, sp, #16
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	4608      	mov	r0, r1
 800a8f6:	4611      	mov	r1, r2
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	70fb      	strb	r3, [r7, #3]
 800a8fe:	460b      	mov	r3, r1
 800a900:	70bb      	strb	r3, [r7, #2]
 800a902:	4613      	mov	r3, r2
 800a904:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a906:	7878      	ldrb	r0, [r7, #1]
 800a908:	78ba      	ldrb	r2, [r7, #2]
 800a90a:	78f9      	ldrb	r1, [r7, #3]
 800a90c:	8b3b      	ldrh	r3, [r7, #24]
 800a90e:	9302      	str	r3, [sp, #8]
 800a910:	7d3b      	ldrb	r3, [r7, #20]
 800a912:	9301      	str	r3, [sp, #4]
 800a914:	7c3b      	ldrb	r3, [r7, #16]
 800a916:	9300      	str	r3, [sp, #0]
 800a918:	4603      	mov	r3, r0
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 fa53 	bl	800adc6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a920:	2300      	movs	r3, #0
}
 800a922:	4618      	mov	r0, r3
 800a924:	3708      	adds	r7, #8
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}

0800a92a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b082      	sub	sp, #8
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
 800a932:	460b      	mov	r3, r1
 800a934:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a936:	78fb      	ldrb	r3, [r7, #3]
 800a938:	4619      	mov	r1, r3
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 fa72 	bl	800ae24 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a940:	2300      	movs	r3, #0
}
 800a942:	4618      	mov	r0, r3
 800a944:	3708      	adds	r7, #8
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}

0800a94a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a94a:	b580      	push	{r7, lr}
 800a94c:	b084      	sub	sp, #16
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
 800a952:	460b      	mov	r3, r1
 800a954:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 f836 	bl	800a9c8 <USBH_GetFreePipe>
 800a95c:	4603      	mov	r3, r0
 800a95e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a960:	89fb      	ldrh	r3, [r7, #14]
 800a962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a966:	4293      	cmp	r3, r2
 800a968:	d00a      	beq.n	800a980 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a96a:	78fa      	ldrb	r2, [r7, #3]
 800a96c:	89fb      	ldrh	r3, [r7, #14]
 800a96e:	f003 030f 	and.w	r3, r3, #15
 800a972:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a976:	6879      	ldr	r1, [r7, #4]
 800a978:	33e0      	adds	r3, #224	; 0xe0
 800a97a:	009b      	lsls	r3, r3, #2
 800a97c:	440b      	add	r3, r1
 800a97e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a980:	89fb      	ldrh	r3, [r7, #14]
 800a982:	b2db      	uxtb	r3, r3
}
 800a984:	4618      	mov	r0, r3
 800a986:	3710      	adds	r7, #16
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	460b      	mov	r3, r1
 800a996:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a998:	78fb      	ldrb	r3, [r7, #3]
 800a99a:	2b0a      	cmp	r3, #10
 800a99c:	d80d      	bhi.n	800a9ba <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a99e:	78fb      	ldrb	r3, [r7, #3]
 800a9a0:	687a      	ldr	r2, [r7, #4]
 800a9a2:	33e0      	adds	r3, #224	; 0xe0
 800a9a4:	009b      	lsls	r3, r3, #2
 800a9a6:	4413      	add	r3, r2
 800a9a8:	685a      	ldr	r2, [r3, #4]
 800a9aa:	78fb      	ldrb	r3, [r7, #3]
 800a9ac:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a9b0:	6879      	ldr	r1, [r7, #4]
 800a9b2:	33e0      	adds	r3, #224	; 0xe0
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	440b      	add	r3, r1
 800a9b8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a9ba:	2300      	movs	r3, #0
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b085      	sub	sp, #20
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	73fb      	strb	r3, [r7, #15]
 800a9d8:	e00f      	b.n	800a9fa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a9da:	7bfb      	ldrb	r3, [r7, #15]
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	33e0      	adds	r3, #224	; 0xe0
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	4413      	add	r3, r2
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d102      	bne.n	800a9f4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a9ee:	7bfb      	ldrb	r3, [r7, #15]
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	e007      	b.n	800aa04 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800a9f4:	7bfb      	ldrb	r3, [r7, #15]
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	73fb      	strb	r3, [r7, #15]
 800a9fa:	7bfb      	ldrb	r3, [r7, #15]
 800a9fc:	2b0a      	cmp	r3, #10
 800a9fe:	d9ec      	bls.n	800a9da <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800aa00:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3714      	adds	r7, #20
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr

0800aa10 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800aa14:	2201      	movs	r2, #1
 800aa16:	490e      	ldr	r1, [pc, #56]	; (800aa50 <MX_USB_HOST_Init+0x40>)
 800aa18:	480e      	ldr	r0, [pc, #56]	; (800aa54 <MX_USB_HOST_Init+0x44>)
 800aa1a:	f7fe fca1 	bl	8009360 <USBH_Init>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d001      	beq.n	800aa28 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800aa24:	f7f7 fde8 	bl	80025f8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800aa28:	490b      	ldr	r1, [pc, #44]	; (800aa58 <MX_USB_HOST_Init+0x48>)
 800aa2a:	480a      	ldr	r0, [pc, #40]	; (800aa54 <MX_USB_HOST_Init+0x44>)
 800aa2c:	f7fe fd26 	bl	800947c <USBH_RegisterClass>
 800aa30:	4603      	mov	r3, r0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d001      	beq.n	800aa3a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800aa36:	f7f7 fddf 	bl	80025f8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800aa3a:	4806      	ldr	r0, [pc, #24]	; (800aa54 <MX_USB_HOST_Init+0x44>)
 800aa3c:	f7fe fdaa 	bl	8009594 <USBH_Start>
 800aa40:	4603      	mov	r3, r0
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d001      	beq.n	800aa4a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800aa46:	f7f7 fdd7 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800aa4a:	bf00      	nop
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	0800aa71 	.word	0x0800aa71
 800aa54:	20000470 	.word	0x20000470
 800aa58:	20000154 	.word	0x20000154

0800aa5c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800aa60:	4802      	ldr	r0, [pc, #8]	; (800aa6c <MX_USB_HOST_Process+0x10>)
 800aa62:	f7fe fda7 	bl	80095b4 <USBH_Process>
}
 800aa66:	bf00      	nop
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	20000470 	.word	0x20000470

0800aa70 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	460b      	mov	r3, r1
 800aa7a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800aa7c:	78fb      	ldrb	r3, [r7, #3]
 800aa7e:	3b01      	subs	r3, #1
 800aa80:	2b04      	cmp	r3, #4
 800aa82:	d819      	bhi.n	800aab8 <USBH_UserProcess+0x48>
 800aa84:	a201      	add	r2, pc, #4	; (adr r2, 800aa8c <USBH_UserProcess+0x1c>)
 800aa86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa8a:	bf00      	nop
 800aa8c:	0800aab9 	.word	0x0800aab9
 800aa90:	0800aaa9 	.word	0x0800aaa9
 800aa94:	0800aab9 	.word	0x0800aab9
 800aa98:	0800aab1 	.word	0x0800aab1
 800aa9c:	0800aaa1 	.word	0x0800aaa1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800aaa0:	4b09      	ldr	r3, [pc, #36]	; (800aac8 <USBH_UserProcess+0x58>)
 800aaa2:	2203      	movs	r2, #3
 800aaa4:	701a      	strb	r2, [r3, #0]
  break;
 800aaa6:	e008      	b.n	800aaba <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800aaa8:	4b07      	ldr	r3, [pc, #28]	; (800aac8 <USBH_UserProcess+0x58>)
 800aaaa:	2202      	movs	r2, #2
 800aaac:	701a      	strb	r2, [r3, #0]
  break;
 800aaae:	e004      	b.n	800aaba <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800aab0:	4b05      	ldr	r3, [pc, #20]	; (800aac8 <USBH_UserProcess+0x58>)
 800aab2:	2201      	movs	r2, #1
 800aab4:	701a      	strb	r2, [r3, #0]
  break;
 800aab6:	e000      	b.n	800aaba <USBH_UserProcess+0x4a>

  default:
  break;
 800aab8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800aaba:	bf00      	nop
 800aabc:	370c      	adds	r7, #12
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr
 800aac6:	bf00      	nop
 800aac8:	20000204 	.word	0x20000204

0800aacc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b08a      	sub	sp, #40	; 0x28
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aad4:	f107 0314 	add.w	r3, r7, #20
 800aad8:	2200      	movs	r2, #0
 800aada:	601a      	str	r2, [r3, #0]
 800aadc:	605a      	str	r2, [r3, #4]
 800aade:	609a      	str	r2, [r3, #8]
 800aae0:	60da      	str	r2, [r3, #12]
 800aae2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aaec:	d147      	bne.n	800ab7e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aaee:	2300      	movs	r3, #0
 800aaf0:	613b      	str	r3, [r7, #16]
 800aaf2:	4b25      	ldr	r3, [pc, #148]	; (800ab88 <HAL_HCD_MspInit+0xbc>)
 800aaf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaf6:	4a24      	ldr	r2, [pc, #144]	; (800ab88 <HAL_HCD_MspInit+0xbc>)
 800aaf8:	f043 0301 	orr.w	r3, r3, #1
 800aafc:	6313      	str	r3, [r2, #48]	; 0x30
 800aafe:	4b22      	ldr	r3, [pc, #136]	; (800ab88 <HAL_HCD_MspInit+0xbc>)
 800ab00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab02:	f003 0301 	and.w	r3, r3, #1
 800ab06:	613b      	str	r3, [r7, #16]
 800ab08:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ab0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ab10:	2300      	movs	r3, #0
 800ab12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab14:	2300      	movs	r3, #0
 800ab16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ab18:	f107 0314 	add.w	r3, r7, #20
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	481b      	ldr	r0, [pc, #108]	; (800ab8c <HAL_HCD_MspInit+0xc0>)
 800ab20:	f7f8 fa62 	bl	8002fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ab24:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ab28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab2a:	2302      	movs	r3, #2
 800ab2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab32:	2300      	movs	r3, #0
 800ab34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ab36:	230a      	movs	r3, #10
 800ab38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab3a:	f107 0314 	add.w	r3, r7, #20
 800ab3e:	4619      	mov	r1, r3
 800ab40:	4812      	ldr	r0, [pc, #72]	; (800ab8c <HAL_HCD_MspInit+0xc0>)
 800ab42:	f7f8 fa51 	bl	8002fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ab46:	4b10      	ldr	r3, [pc, #64]	; (800ab88 <HAL_HCD_MspInit+0xbc>)
 800ab48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab4a:	4a0f      	ldr	r2, [pc, #60]	; (800ab88 <HAL_HCD_MspInit+0xbc>)
 800ab4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab50:	6353      	str	r3, [r2, #52]	; 0x34
 800ab52:	2300      	movs	r3, #0
 800ab54:	60fb      	str	r3, [r7, #12]
 800ab56:	4b0c      	ldr	r3, [pc, #48]	; (800ab88 <HAL_HCD_MspInit+0xbc>)
 800ab58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab5a:	4a0b      	ldr	r2, [pc, #44]	; (800ab88 <HAL_HCD_MspInit+0xbc>)
 800ab5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab60:	6453      	str	r3, [r2, #68]	; 0x44
 800ab62:	4b09      	ldr	r3, [pc, #36]	; (800ab88 <HAL_HCD_MspInit+0xbc>)
 800ab64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab6a:	60fb      	str	r3, [r7, #12]
 800ab6c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ab6e:	2200      	movs	r2, #0
 800ab70:	2100      	movs	r1, #0
 800ab72:	2043      	movs	r0, #67	; 0x43
 800ab74:	f7f8 fa01 	bl	8002f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ab78:	2043      	movs	r0, #67	; 0x43
 800ab7a:	f7f8 fa1a 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ab7e:	bf00      	nop
 800ab80:	3728      	adds	r7, #40	; 0x28
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	40023800 	.word	0x40023800
 800ab8c:	40020000 	.word	0x40020000

0800ab90 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7ff f8db 	bl	8009d5a <USBH_LL_IncTimer>
}
 800aba4:	bf00      	nop
 800aba6:	3708      	adds	r7, #8
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800abba:	4618      	mov	r0, r3
 800abbc:	f7ff f913 	bl	8009de6 <USBH_LL_Connect>
}
 800abc0:	bf00      	nop
 800abc2:	3708      	adds	r7, #8
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7ff f91c 	bl	8009e14 <USBH_LL_Disconnect>
}
 800abdc:	bf00      	nop
 800abde:	3708      	adds	r7, #8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	460b      	mov	r3, r1
 800abee:	70fb      	strb	r3, [r7, #3]
 800abf0:	4613      	mov	r3, r2
 800abf2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800abf4:	bf00      	nop
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7ff f8cd 	bl	8009dae <USBH_LL_PortEnabled>
}
 800ac14:	bf00      	nop
 800ac16:	3708      	adds	r7, #8
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b082      	sub	sp, #8
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7ff f8cd 	bl	8009dca <USBH_LL_PortDisabled>
}
 800ac30:	bf00      	nop
 800ac32:	3708      	adds	r7, #8
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d12a      	bne.n	800aca0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ac4a:	4a18      	ldr	r2, [pc, #96]	; (800acac <USBH_LL_Init+0x74>)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	4a15      	ldr	r2, [pc, #84]	; (800acac <USBH_LL_Init+0x74>)
 800ac56:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ac5a:	4b14      	ldr	r3, [pc, #80]	; (800acac <USBH_LL_Init+0x74>)
 800ac5c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ac60:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ac62:	4b12      	ldr	r3, [pc, #72]	; (800acac <USBH_LL_Init+0x74>)
 800ac64:	2208      	movs	r2, #8
 800ac66:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ac68:	4b10      	ldr	r3, [pc, #64]	; (800acac <USBH_LL_Init+0x74>)
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ac6e:	4b0f      	ldr	r3, [pc, #60]	; (800acac <USBH_LL_Init+0x74>)
 800ac70:	2200      	movs	r2, #0
 800ac72:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ac74:	4b0d      	ldr	r3, [pc, #52]	; (800acac <USBH_LL_Init+0x74>)
 800ac76:	2202      	movs	r2, #2
 800ac78:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ac7a:	4b0c      	ldr	r3, [pc, #48]	; (800acac <USBH_LL_Init+0x74>)
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ac80:	480a      	ldr	r0, [pc, #40]	; (800acac <USBH_LL_Init+0x74>)
 800ac82:	f7f8 fb98 	bl	80033b6 <HAL_HCD_Init>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d001      	beq.n	800ac90 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ac8c:	f7f7 fcb4 	bl	80025f8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ac90:	4806      	ldr	r0, [pc, #24]	; (800acac <USBH_LL_Init+0x74>)
 800ac92:	f7f8 ff75 	bl	8003b80 <HAL_HCD_GetCurrentFrame>
 800ac96:	4603      	mov	r3, r0
 800ac98:	4619      	mov	r1, r3
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f7ff f84e 	bl	8009d3c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800aca0:	2300      	movs	r3, #0
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3708      	adds	r7, #8
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	20000848 	.word	0x20000848

0800acb0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acb8:	2300      	movs	r3, #0
 800acba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acbc:	2300      	movs	r3, #0
 800acbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7f8 fee4 	bl	8003a94 <HAL_HCD_Start>
 800accc:	4603      	mov	r3, r0
 800acce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800acd0:	7bfb      	ldrb	r3, [r7, #15]
 800acd2:	4618      	mov	r0, r3
 800acd4:	f000 f95c 	bl	800af90 <USBH_Get_USB_Status>
 800acd8:	4603      	mov	r3, r0
 800acda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3710      	adds	r7, #16
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b084      	sub	sp, #16
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acee:	2300      	movs	r3, #0
 800acf0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acf2:	2300      	movs	r3, #0
 800acf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7f8 feec 	bl	8003ada <HAL_HCD_Stop>
 800ad02:	4603      	mov	r3, r0
 800ad04:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad06:	7bfb      	ldrb	r3, [r7, #15]
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f000 f941 	bl	800af90 <USBH_Get_USB_Status>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad12:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3710      	adds	r7, #16
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ad24:	2301      	movs	r3, #1
 800ad26:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f7f8 ff34 	bl	8003b9c <HAL_HCD_GetCurrentSpeed>
 800ad34:	4603      	mov	r3, r0
 800ad36:	2b02      	cmp	r3, #2
 800ad38:	d00c      	beq.n	800ad54 <USBH_LL_GetSpeed+0x38>
 800ad3a:	2b02      	cmp	r3, #2
 800ad3c:	d80d      	bhi.n	800ad5a <USBH_LL_GetSpeed+0x3e>
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d002      	beq.n	800ad48 <USBH_LL_GetSpeed+0x2c>
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d003      	beq.n	800ad4e <USBH_LL_GetSpeed+0x32>
 800ad46:	e008      	b.n	800ad5a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ad4c:	e008      	b.n	800ad60 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	73fb      	strb	r3, [r7, #15]
    break;
 800ad52:	e005      	b.n	800ad60 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ad54:	2302      	movs	r3, #2
 800ad56:	73fb      	strb	r3, [r7, #15]
    break;
 800ad58:	e002      	b.n	800ad60 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	73fb      	strb	r3, [r7, #15]
    break;
 800ad5e:	bf00      	nop
  }
  return  speed;
 800ad60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b084      	sub	sp, #16
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad72:	2300      	movs	r3, #0
 800ad74:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad76:	2300      	movs	r3, #0
 800ad78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad80:	4618      	mov	r0, r3
 800ad82:	f7f8 fec7 	bl	8003b14 <HAL_HCD_ResetPort>
 800ad86:	4603      	mov	r3, r0
 800ad88:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad8a:	7bfb      	ldrb	r3, [r7, #15]
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f000 f8ff 	bl	800af90 <USBH_Get_USB_Status>
 800ad92:	4603      	mov	r3, r0
 800ad94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad96:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3710      	adds	r7, #16
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	460b      	mov	r3, r1
 800adaa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800adb2:	78fa      	ldrb	r2, [r7, #3]
 800adb4:	4611      	mov	r1, r2
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7f8 fece 	bl	8003b58 <HAL_HCD_HC_GetXferCount>
 800adbc:	4603      	mov	r3, r0
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3708      	adds	r7, #8
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800adc6:	b590      	push	{r4, r7, lr}
 800adc8:	b089      	sub	sp, #36	; 0x24
 800adca:	af04      	add	r7, sp, #16
 800adcc:	6078      	str	r0, [r7, #4]
 800adce:	4608      	mov	r0, r1
 800add0:	4611      	mov	r1, r2
 800add2:	461a      	mov	r2, r3
 800add4:	4603      	mov	r3, r0
 800add6:	70fb      	strb	r3, [r7, #3]
 800add8:	460b      	mov	r3, r1
 800adda:	70bb      	strb	r3, [r7, #2]
 800addc:	4613      	mov	r3, r2
 800adde:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ade0:	2300      	movs	r3, #0
 800ade2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ade4:	2300      	movs	r3, #0
 800ade6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800adee:	787c      	ldrb	r4, [r7, #1]
 800adf0:	78ba      	ldrb	r2, [r7, #2]
 800adf2:	78f9      	ldrb	r1, [r7, #3]
 800adf4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800adf6:	9302      	str	r3, [sp, #8]
 800adf8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800adfc:	9301      	str	r3, [sp, #4]
 800adfe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ae02:	9300      	str	r3, [sp, #0]
 800ae04:	4623      	mov	r3, r4
 800ae06:	f7f8 fb38 	bl	800347a <HAL_HCD_HC_Init>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae0e:	7bfb      	ldrb	r3, [r7, #15]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f000 f8bd 	bl	800af90 <USBH_Get_USB_Status>
 800ae16:	4603      	mov	r3, r0
 800ae18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3714      	adds	r7, #20
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd90      	pop	{r4, r7, pc}

0800ae24 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae30:	2300      	movs	r3, #0
 800ae32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae34:	2300      	movs	r3, #0
 800ae36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ae3e:	78fa      	ldrb	r2, [r7, #3]
 800ae40:	4611      	mov	r1, r2
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7f8 fba8 	bl	8003598 <HAL_HCD_HC_Halt>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae4c:	7bfb      	ldrb	r3, [r7, #15]
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f000 f89e 	bl	800af90 <USBH_Get_USB_Status>
 800ae54:	4603      	mov	r3, r0
 800ae56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae58:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ae62:	b590      	push	{r4, r7, lr}
 800ae64:	b089      	sub	sp, #36	; 0x24
 800ae66:	af04      	add	r7, sp, #16
 800ae68:	6078      	str	r0, [r7, #4]
 800ae6a:	4608      	mov	r0, r1
 800ae6c:	4611      	mov	r1, r2
 800ae6e:	461a      	mov	r2, r3
 800ae70:	4603      	mov	r3, r0
 800ae72:	70fb      	strb	r3, [r7, #3]
 800ae74:	460b      	mov	r3, r1
 800ae76:	70bb      	strb	r3, [r7, #2]
 800ae78:	4613      	mov	r3, r2
 800ae7a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae80:	2300      	movs	r3, #0
 800ae82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ae8a:	787c      	ldrb	r4, [r7, #1]
 800ae8c:	78ba      	ldrb	r2, [r7, #2]
 800ae8e:	78f9      	ldrb	r1, [r7, #3]
 800ae90:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ae94:	9303      	str	r3, [sp, #12]
 800ae96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae98:	9302      	str	r3, [sp, #8]
 800ae9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9c:	9301      	str	r3, [sp, #4]
 800ae9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aea2:	9300      	str	r3, [sp, #0]
 800aea4:	4623      	mov	r3, r4
 800aea6:	f7f8 fb9b 	bl	80035e0 <HAL_HCD_HC_SubmitRequest>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800aeae:	7bfb      	ldrb	r3, [r7, #15]
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f000 f86d 	bl	800af90 <USBH_Get_USB_Status>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aeba:	7bbb      	ldrb	r3, [r7, #14]
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3714      	adds	r7, #20
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd90      	pop	{r4, r7, pc}

0800aec4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	460b      	mov	r3, r1
 800aece:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aed6:	78fa      	ldrb	r2, [r7, #3]
 800aed8:	4611      	mov	r1, r2
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7f8 fe28 	bl	8003b30 <HAL_HCD_HC_GetURBState>
 800aee0:	4603      	mov	r3, r0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3708      	adds	r7, #8
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b082      	sub	sp, #8
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
 800aef2:	460b      	mov	r3, r1
 800aef4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d103      	bne.n	800af08 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800af00:	78fb      	ldrb	r3, [r7, #3]
 800af02:	4618      	mov	r0, r3
 800af04:	f000 f870 	bl	800afe8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800af08:	20c8      	movs	r0, #200	; 0xc8
 800af0a:	f7f7 ff37 	bl	8002d7c <HAL_Delay>
  return USBH_OK;
 800af0e:	2300      	movs	r3, #0
}
 800af10:	4618      	mov	r0, r3
 800af12:	3708      	adds	r7, #8
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800af18:	b480      	push	{r7}
 800af1a:	b085      	sub	sp, #20
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	460b      	mov	r3, r1
 800af22:	70fb      	strb	r3, [r7, #3]
 800af24:	4613      	mov	r3, r2
 800af26:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800af2e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800af30:	78fb      	ldrb	r3, [r7, #3]
 800af32:	68fa      	ldr	r2, [r7, #12]
 800af34:	212c      	movs	r1, #44	; 0x2c
 800af36:	fb01 f303 	mul.w	r3, r1, r3
 800af3a:	4413      	add	r3, r2
 800af3c:	333b      	adds	r3, #59	; 0x3b
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d009      	beq.n	800af58 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800af44:	78fb      	ldrb	r3, [r7, #3]
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	212c      	movs	r1, #44	; 0x2c
 800af4a:	fb01 f303 	mul.w	r3, r1, r3
 800af4e:	4413      	add	r3, r2
 800af50:	3354      	adds	r3, #84	; 0x54
 800af52:	78ba      	ldrb	r2, [r7, #2]
 800af54:	701a      	strb	r2, [r3, #0]
 800af56:	e008      	b.n	800af6a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800af58:	78fb      	ldrb	r3, [r7, #3]
 800af5a:	68fa      	ldr	r2, [r7, #12]
 800af5c:	212c      	movs	r1, #44	; 0x2c
 800af5e:	fb01 f303 	mul.w	r3, r1, r3
 800af62:	4413      	add	r3, r2
 800af64:	3355      	adds	r3, #85	; 0x55
 800af66:	78ba      	ldrb	r2, [r7, #2]
 800af68:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800af6a:	2300      	movs	r3, #0
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3714      	adds	r7, #20
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr

0800af78 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f7f7 fefb 	bl	8002d7c <HAL_Delay>
}
 800af86:	bf00      	nop
 800af88:	3708      	adds	r7, #8
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
	...

0800af90 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af90:	b480      	push	{r7}
 800af92:	b085      	sub	sp, #20
 800af94:	af00      	add	r7, sp, #0
 800af96:	4603      	mov	r3, r0
 800af98:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af9a:	2300      	movs	r3, #0
 800af9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af9e:	79fb      	ldrb	r3, [r7, #7]
 800afa0:	2b03      	cmp	r3, #3
 800afa2:	d817      	bhi.n	800afd4 <USBH_Get_USB_Status+0x44>
 800afa4:	a201      	add	r2, pc, #4	; (adr r2, 800afac <USBH_Get_USB_Status+0x1c>)
 800afa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afaa:	bf00      	nop
 800afac:	0800afbd 	.word	0x0800afbd
 800afb0:	0800afc3 	.word	0x0800afc3
 800afb4:	0800afc9 	.word	0x0800afc9
 800afb8:	0800afcf 	.word	0x0800afcf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800afbc:	2300      	movs	r3, #0
 800afbe:	73fb      	strb	r3, [r7, #15]
    break;
 800afc0:	e00b      	b.n	800afda <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800afc2:	2302      	movs	r3, #2
 800afc4:	73fb      	strb	r3, [r7, #15]
    break;
 800afc6:	e008      	b.n	800afda <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800afc8:	2301      	movs	r3, #1
 800afca:	73fb      	strb	r3, [r7, #15]
    break;
 800afcc:	e005      	b.n	800afda <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800afce:	2302      	movs	r3, #2
 800afd0:	73fb      	strb	r3, [r7, #15]
    break;
 800afd2:	e002      	b.n	800afda <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800afd4:	2302      	movs	r3, #2
 800afd6:	73fb      	strb	r3, [r7, #15]
    break;
 800afd8:	bf00      	nop
  }
  return usb_status;
 800afda:	7bfb      	ldrb	r3, [r7, #15]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3714      	adds	r7, #20
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr

0800afe8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
 800afee:	4603      	mov	r3, r0
 800aff0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800aff2:	79fb      	ldrb	r3, [r7, #7]
 800aff4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800aff6:	79fb      	ldrb	r3, [r7, #7]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d102      	bne.n	800b002 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800affc:	2301      	movs	r3, #1
 800affe:	73fb      	strb	r3, [r7, #15]
 800b000:	e001      	b.n	800b006 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800b002:	2300      	movs	r3, #0
 800b004:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b006:	7bfb      	ldrb	r3, [r7, #15]
 800b008:	461a      	mov	r2, r3
 800b00a:	2101      	movs	r1, #1
 800b00c:	4803      	ldr	r0, [pc, #12]	; (800b01c <MX_DriverVbusFS+0x34>)
 800b00e:	f7f8 f99f 	bl	8003350 <HAL_GPIO_WritePin>
}
 800b012:	bf00      	nop
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	40020800 	.word	0x40020800

0800b020 <__errno>:
 800b020:	4b01      	ldr	r3, [pc, #4]	; (800b028 <__errno+0x8>)
 800b022:	6818      	ldr	r0, [r3, #0]
 800b024:	4770      	bx	lr
 800b026:	bf00      	nop
 800b028:	20000174 	.word	0x20000174

0800b02c <__libc_init_array>:
 800b02c:	b570      	push	{r4, r5, r6, lr}
 800b02e:	4d0d      	ldr	r5, [pc, #52]	; (800b064 <__libc_init_array+0x38>)
 800b030:	4c0d      	ldr	r4, [pc, #52]	; (800b068 <__libc_init_array+0x3c>)
 800b032:	1b64      	subs	r4, r4, r5
 800b034:	10a4      	asrs	r4, r4, #2
 800b036:	2600      	movs	r6, #0
 800b038:	42a6      	cmp	r6, r4
 800b03a:	d109      	bne.n	800b050 <__libc_init_array+0x24>
 800b03c:	4d0b      	ldr	r5, [pc, #44]	; (800b06c <__libc_init_array+0x40>)
 800b03e:	4c0c      	ldr	r4, [pc, #48]	; (800b070 <__libc_init_array+0x44>)
 800b040:	f000 f90c 	bl	800b25c <_init>
 800b044:	1b64      	subs	r4, r4, r5
 800b046:	10a4      	asrs	r4, r4, #2
 800b048:	2600      	movs	r6, #0
 800b04a:	42a6      	cmp	r6, r4
 800b04c:	d105      	bne.n	800b05a <__libc_init_array+0x2e>
 800b04e:	bd70      	pop	{r4, r5, r6, pc}
 800b050:	f855 3b04 	ldr.w	r3, [r5], #4
 800b054:	4798      	blx	r3
 800b056:	3601      	adds	r6, #1
 800b058:	e7ee      	b.n	800b038 <__libc_init_array+0xc>
 800b05a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b05e:	4798      	blx	r3
 800b060:	3601      	adds	r6, #1
 800b062:	e7f2      	b.n	800b04a <__libc_init_array+0x1e>
 800b064:	0800b7e0 	.word	0x0800b7e0
 800b068:	0800b7e0 	.word	0x0800b7e0
 800b06c:	0800b7e0 	.word	0x0800b7e0
 800b070:	0800b7e4 	.word	0x0800b7e4

0800b074 <malloc>:
 800b074:	4b02      	ldr	r3, [pc, #8]	; (800b080 <malloc+0xc>)
 800b076:	4601      	mov	r1, r0
 800b078:	6818      	ldr	r0, [r3, #0]
 800b07a:	f000 b863 	b.w	800b144 <_malloc_r>
 800b07e:	bf00      	nop
 800b080:	20000174 	.word	0x20000174

0800b084 <free>:
 800b084:	4b02      	ldr	r3, [pc, #8]	; (800b090 <free+0xc>)
 800b086:	4601      	mov	r1, r0
 800b088:	6818      	ldr	r0, [r3, #0]
 800b08a:	f000 b80b 	b.w	800b0a4 <_free_r>
 800b08e:	bf00      	nop
 800b090:	20000174 	.word	0x20000174

0800b094 <memset>:
 800b094:	4402      	add	r2, r0
 800b096:	4603      	mov	r3, r0
 800b098:	4293      	cmp	r3, r2
 800b09a:	d100      	bne.n	800b09e <memset+0xa>
 800b09c:	4770      	bx	lr
 800b09e:	f803 1b01 	strb.w	r1, [r3], #1
 800b0a2:	e7f9      	b.n	800b098 <memset+0x4>

0800b0a4 <_free_r>:
 800b0a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0a6:	2900      	cmp	r1, #0
 800b0a8:	d048      	beq.n	800b13c <_free_r+0x98>
 800b0aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0ae:	9001      	str	r0, [sp, #4]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f1a1 0404 	sub.w	r4, r1, #4
 800b0b6:	bfb8      	it	lt
 800b0b8:	18e4      	addlt	r4, r4, r3
 800b0ba:	f000 f8c1 	bl	800b240 <__malloc_lock>
 800b0be:	4a20      	ldr	r2, [pc, #128]	; (800b140 <_free_r+0x9c>)
 800b0c0:	9801      	ldr	r0, [sp, #4]
 800b0c2:	6813      	ldr	r3, [r2, #0]
 800b0c4:	4615      	mov	r5, r2
 800b0c6:	b933      	cbnz	r3, 800b0d6 <_free_r+0x32>
 800b0c8:	6063      	str	r3, [r4, #4]
 800b0ca:	6014      	str	r4, [r2, #0]
 800b0cc:	b003      	add	sp, #12
 800b0ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0d2:	f000 b8bb 	b.w	800b24c <__malloc_unlock>
 800b0d6:	42a3      	cmp	r3, r4
 800b0d8:	d90b      	bls.n	800b0f2 <_free_r+0x4e>
 800b0da:	6821      	ldr	r1, [r4, #0]
 800b0dc:	1862      	adds	r2, r4, r1
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	bf04      	itt	eq
 800b0e2:	681a      	ldreq	r2, [r3, #0]
 800b0e4:	685b      	ldreq	r3, [r3, #4]
 800b0e6:	6063      	str	r3, [r4, #4]
 800b0e8:	bf04      	itt	eq
 800b0ea:	1852      	addeq	r2, r2, r1
 800b0ec:	6022      	streq	r2, [r4, #0]
 800b0ee:	602c      	str	r4, [r5, #0]
 800b0f0:	e7ec      	b.n	800b0cc <_free_r+0x28>
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	b10b      	cbz	r3, 800b0fc <_free_r+0x58>
 800b0f8:	42a3      	cmp	r3, r4
 800b0fa:	d9fa      	bls.n	800b0f2 <_free_r+0x4e>
 800b0fc:	6811      	ldr	r1, [r2, #0]
 800b0fe:	1855      	adds	r5, r2, r1
 800b100:	42a5      	cmp	r5, r4
 800b102:	d10b      	bne.n	800b11c <_free_r+0x78>
 800b104:	6824      	ldr	r4, [r4, #0]
 800b106:	4421      	add	r1, r4
 800b108:	1854      	adds	r4, r2, r1
 800b10a:	42a3      	cmp	r3, r4
 800b10c:	6011      	str	r1, [r2, #0]
 800b10e:	d1dd      	bne.n	800b0cc <_free_r+0x28>
 800b110:	681c      	ldr	r4, [r3, #0]
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	6053      	str	r3, [r2, #4]
 800b116:	4421      	add	r1, r4
 800b118:	6011      	str	r1, [r2, #0]
 800b11a:	e7d7      	b.n	800b0cc <_free_r+0x28>
 800b11c:	d902      	bls.n	800b124 <_free_r+0x80>
 800b11e:	230c      	movs	r3, #12
 800b120:	6003      	str	r3, [r0, #0]
 800b122:	e7d3      	b.n	800b0cc <_free_r+0x28>
 800b124:	6825      	ldr	r5, [r4, #0]
 800b126:	1961      	adds	r1, r4, r5
 800b128:	428b      	cmp	r3, r1
 800b12a:	bf04      	itt	eq
 800b12c:	6819      	ldreq	r1, [r3, #0]
 800b12e:	685b      	ldreq	r3, [r3, #4]
 800b130:	6063      	str	r3, [r4, #4]
 800b132:	bf04      	itt	eq
 800b134:	1949      	addeq	r1, r1, r5
 800b136:	6021      	streq	r1, [r4, #0]
 800b138:	6054      	str	r4, [r2, #4]
 800b13a:	e7c7      	b.n	800b0cc <_free_r+0x28>
 800b13c:	b003      	add	sp, #12
 800b13e:	bd30      	pop	{r4, r5, pc}
 800b140:	20000208 	.word	0x20000208

0800b144 <_malloc_r>:
 800b144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b146:	1ccd      	adds	r5, r1, #3
 800b148:	f025 0503 	bic.w	r5, r5, #3
 800b14c:	3508      	adds	r5, #8
 800b14e:	2d0c      	cmp	r5, #12
 800b150:	bf38      	it	cc
 800b152:	250c      	movcc	r5, #12
 800b154:	2d00      	cmp	r5, #0
 800b156:	4606      	mov	r6, r0
 800b158:	db01      	blt.n	800b15e <_malloc_r+0x1a>
 800b15a:	42a9      	cmp	r1, r5
 800b15c:	d903      	bls.n	800b166 <_malloc_r+0x22>
 800b15e:	230c      	movs	r3, #12
 800b160:	6033      	str	r3, [r6, #0]
 800b162:	2000      	movs	r0, #0
 800b164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b166:	f000 f86b 	bl	800b240 <__malloc_lock>
 800b16a:	4921      	ldr	r1, [pc, #132]	; (800b1f0 <_malloc_r+0xac>)
 800b16c:	680a      	ldr	r2, [r1, #0]
 800b16e:	4614      	mov	r4, r2
 800b170:	b99c      	cbnz	r4, 800b19a <_malloc_r+0x56>
 800b172:	4f20      	ldr	r7, [pc, #128]	; (800b1f4 <_malloc_r+0xb0>)
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	b923      	cbnz	r3, 800b182 <_malloc_r+0x3e>
 800b178:	4621      	mov	r1, r4
 800b17a:	4630      	mov	r0, r6
 800b17c:	f000 f83c 	bl	800b1f8 <_sbrk_r>
 800b180:	6038      	str	r0, [r7, #0]
 800b182:	4629      	mov	r1, r5
 800b184:	4630      	mov	r0, r6
 800b186:	f000 f837 	bl	800b1f8 <_sbrk_r>
 800b18a:	1c43      	adds	r3, r0, #1
 800b18c:	d123      	bne.n	800b1d6 <_malloc_r+0x92>
 800b18e:	230c      	movs	r3, #12
 800b190:	6033      	str	r3, [r6, #0]
 800b192:	4630      	mov	r0, r6
 800b194:	f000 f85a 	bl	800b24c <__malloc_unlock>
 800b198:	e7e3      	b.n	800b162 <_malloc_r+0x1e>
 800b19a:	6823      	ldr	r3, [r4, #0]
 800b19c:	1b5b      	subs	r3, r3, r5
 800b19e:	d417      	bmi.n	800b1d0 <_malloc_r+0x8c>
 800b1a0:	2b0b      	cmp	r3, #11
 800b1a2:	d903      	bls.n	800b1ac <_malloc_r+0x68>
 800b1a4:	6023      	str	r3, [r4, #0]
 800b1a6:	441c      	add	r4, r3
 800b1a8:	6025      	str	r5, [r4, #0]
 800b1aa:	e004      	b.n	800b1b6 <_malloc_r+0x72>
 800b1ac:	6863      	ldr	r3, [r4, #4]
 800b1ae:	42a2      	cmp	r2, r4
 800b1b0:	bf0c      	ite	eq
 800b1b2:	600b      	streq	r3, [r1, #0]
 800b1b4:	6053      	strne	r3, [r2, #4]
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	f000 f848 	bl	800b24c <__malloc_unlock>
 800b1bc:	f104 000b 	add.w	r0, r4, #11
 800b1c0:	1d23      	adds	r3, r4, #4
 800b1c2:	f020 0007 	bic.w	r0, r0, #7
 800b1c6:	1ac2      	subs	r2, r0, r3
 800b1c8:	d0cc      	beq.n	800b164 <_malloc_r+0x20>
 800b1ca:	1a1b      	subs	r3, r3, r0
 800b1cc:	50a3      	str	r3, [r4, r2]
 800b1ce:	e7c9      	b.n	800b164 <_malloc_r+0x20>
 800b1d0:	4622      	mov	r2, r4
 800b1d2:	6864      	ldr	r4, [r4, #4]
 800b1d4:	e7cc      	b.n	800b170 <_malloc_r+0x2c>
 800b1d6:	1cc4      	adds	r4, r0, #3
 800b1d8:	f024 0403 	bic.w	r4, r4, #3
 800b1dc:	42a0      	cmp	r0, r4
 800b1de:	d0e3      	beq.n	800b1a8 <_malloc_r+0x64>
 800b1e0:	1a21      	subs	r1, r4, r0
 800b1e2:	4630      	mov	r0, r6
 800b1e4:	f000 f808 	bl	800b1f8 <_sbrk_r>
 800b1e8:	3001      	adds	r0, #1
 800b1ea:	d1dd      	bne.n	800b1a8 <_malloc_r+0x64>
 800b1ec:	e7cf      	b.n	800b18e <_malloc_r+0x4a>
 800b1ee:	bf00      	nop
 800b1f0:	20000208 	.word	0x20000208
 800b1f4:	2000020c 	.word	0x2000020c

0800b1f8 <_sbrk_r>:
 800b1f8:	b538      	push	{r3, r4, r5, lr}
 800b1fa:	4d06      	ldr	r5, [pc, #24]	; (800b214 <_sbrk_r+0x1c>)
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	4604      	mov	r4, r0
 800b200:	4608      	mov	r0, r1
 800b202:	602b      	str	r3, [r5, #0]
 800b204:	f7f7 fcd6 	bl	8002bb4 <_sbrk>
 800b208:	1c43      	adds	r3, r0, #1
 800b20a:	d102      	bne.n	800b212 <_sbrk_r+0x1a>
 800b20c:	682b      	ldr	r3, [r5, #0]
 800b20e:	b103      	cbz	r3, 800b212 <_sbrk_r+0x1a>
 800b210:	6023      	str	r3, [r4, #0]
 800b212:	bd38      	pop	{r3, r4, r5, pc}
 800b214:	20000b4c 	.word	0x20000b4c

0800b218 <strncat>:
 800b218:	b530      	push	{r4, r5, lr}
 800b21a:	4604      	mov	r4, r0
 800b21c:	7825      	ldrb	r5, [r4, #0]
 800b21e:	4623      	mov	r3, r4
 800b220:	3401      	adds	r4, #1
 800b222:	2d00      	cmp	r5, #0
 800b224:	d1fa      	bne.n	800b21c <strncat+0x4>
 800b226:	3a01      	subs	r2, #1
 800b228:	d304      	bcc.n	800b234 <strncat+0x1c>
 800b22a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b22e:	f803 4b01 	strb.w	r4, [r3], #1
 800b232:	b904      	cbnz	r4, 800b236 <strncat+0x1e>
 800b234:	bd30      	pop	{r4, r5, pc}
 800b236:	2a00      	cmp	r2, #0
 800b238:	d1f5      	bne.n	800b226 <strncat+0xe>
 800b23a:	701a      	strb	r2, [r3, #0]
 800b23c:	e7f3      	b.n	800b226 <strncat+0xe>
	...

0800b240 <__malloc_lock>:
 800b240:	4801      	ldr	r0, [pc, #4]	; (800b248 <__malloc_lock+0x8>)
 800b242:	f000 b809 	b.w	800b258 <__retarget_lock_acquire_recursive>
 800b246:	bf00      	nop
 800b248:	20000b54 	.word	0x20000b54

0800b24c <__malloc_unlock>:
 800b24c:	4801      	ldr	r0, [pc, #4]	; (800b254 <__malloc_unlock+0x8>)
 800b24e:	f000 b804 	b.w	800b25a <__retarget_lock_release_recursive>
 800b252:	bf00      	nop
 800b254:	20000b54 	.word	0x20000b54

0800b258 <__retarget_lock_acquire_recursive>:
 800b258:	4770      	bx	lr

0800b25a <__retarget_lock_release_recursive>:
 800b25a:	4770      	bx	lr

0800b25c <_init>:
 800b25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b25e:	bf00      	nop
 800b260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b262:	bc08      	pop	{r3}
 800b264:	469e      	mov	lr, r3
 800b266:	4770      	bx	lr

0800b268 <_fini>:
 800b268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26a:	bf00      	nop
 800b26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b26e:	bc08      	pop	{r3}
 800b270:	469e      	mov	lr, r3
 800b272:	4770      	bx	lr
