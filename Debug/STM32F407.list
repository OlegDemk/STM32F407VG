
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  0800af10  0800af10  0001af10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1bc  0800b1bc  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1bc  0800b1bc  0001b1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1c4  0800b1c4  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1c4  0800b1c4  0001b1c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1c8  0800b1c8  0001b1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800b1cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000928  20000098  0800b264  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009c0  0800b264  000209c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000201c9  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004814  00000000  00000000  00040291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c0  00000000  00000000  00044aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d8  00000000  00000000  00046068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002502a  00000000  00000000  00047440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e6c6  00000000  00000000  0006c46a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d24e3  00000000  00000000  0008ab30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015d013  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e10  00000000  00000000  0015d068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aef8 	.word	0x0800aef8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800aef8 	.word	0x0800aef8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b08b      	sub	sp, #44	; 0x2c
 800056c:	af00      	add	r7, sp, #0
 800056e:	4604      	mov	r4, r0
 8000570:	4608      	mov	r0, r1
 8000572:	4611      	mov	r1, r2
 8000574:	461a      	mov	r2, r3
 8000576:	4623      	mov	r3, r4
 8000578:	80fb      	strh	r3, [r7, #6]
 800057a:	4603      	mov	r3, r0
 800057c:	80bb      	strh	r3, [r7, #4]
 800057e:	460b      	mov	r3, r1
 8000580:	807b      	strh	r3, [r7, #2]
 8000582:	4613      	mov	r3, r2
 8000584:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8000586:	887b      	ldrh	r3, [r7, #2]
 8000588:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 800058e:	887b      	ldrh	r3, [r7, #2]
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	f1c3 0301 	rsb	r3, r3, #1
 8000596:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80005a0:	e061      	b.n	8000666 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80005a2:	88fa      	ldrh	r2, [r7, #6]
 80005a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005a6:	1ad3      	subs	r3, r2, r3
 80005a8:	613b      	str	r3, [r7, #16]
 80005aa:	e018      	b.n	80005de <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 80005ac:	693b      	ldr	r3, [r7, #16]
 80005ae:	b298      	uxth	r0, r3
 80005b0:	6a3b      	ldr	r3, [r7, #32]
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	88bb      	ldrh	r3, [r7, #4]
 80005b6:	4413      	add	r3, r2
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	883a      	ldrh	r2, [r7, #0]
 80005bc:	4619      	mov	r1, r3
 80005be:	f000 fc0b 	bl	8000dd8 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 80005c2:	693b      	ldr	r3, [r7, #16]
 80005c4:	b298      	uxth	r0, r3
 80005c6:	6a3b      	ldr	r3, [r7, #32]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	88ba      	ldrh	r2, [r7, #4]
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	883a      	ldrh	r2, [r7, #0]
 80005d2:	4619      	mov	r1, r3
 80005d4:	f000 fc00 	bl	8000dd8 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 80005d8:	693b      	ldr	r3, [r7, #16]
 80005da:	3301      	adds	r3, #1
 80005dc:	613b      	str	r3, [r7, #16]
 80005de:	88fa      	ldrh	r2, [r7, #6]
 80005e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e2:	4413      	add	r3, r2
 80005e4:	693a      	ldr	r2, [r7, #16]
 80005e6:	429a      	cmp	r2, r3
 80005e8:	dde0      	ble.n	80005ac <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 80005ea:	88fa      	ldrh	r2, [r7, #6]
 80005ec:	6a3b      	ldr	r3, [r7, #32]
 80005ee:	1ad3      	subs	r3, r2, r3
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	e018      	b.n	8000626 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	b298      	uxth	r0, r3
 80005f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	88bb      	ldrh	r3, [r7, #4]
 80005fe:	4413      	add	r3, r2
 8000600:	b29b      	uxth	r3, r3
 8000602:	883a      	ldrh	r2, [r7, #0]
 8000604:	4619      	mov	r1, r3
 8000606:	f000 fbe7 	bl	8000dd8 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	b298      	uxth	r0, r3
 800060e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000610:	b29b      	uxth	r3, r3
 8000612:	88ba      	ldrh	r2, [r7, #4]
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	b29b      	uxth	r3, r3
 8000618:	883a      	ldrh	r2, [r7, #0]
 800061a:	4619      	mov	r1, r3
 800061c:	f000 fbdc 	bl	8000dd8 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	3301      	adds	r3, #1
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	88fa      	ldrh	r2, [r7, #6]
 8000628:	6a3b      	ldr	r3, [r7, #32]
 800062a:	4413      	add	r3, r2
 800062c:	68fa      	ldr	r2, [r7, #12]
 800062e:	429a      	cmp	r2, r3
 8000630:	dde0      	ble.n	80005f4 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8000632:	6a3b      	ldr	r3, [r7, #32]
 8000634:	3301      	adds	r3, #1
 8000636:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8000638:	697a      	ldr	r2, [r7, #20]
 800063a:	69bb      	ldr	r3, [r7, #24]
 800063c:	4413      	add	r3, r2
 800063e:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	3302      	adds	r3, #2
 8000644:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	005a      	lsls	r2, r3, #1
 800064a:	69fb      	ldr	r3, [r7, #28]
 800064c:	4413      	add	r3, r2
 800064e:	2b00      	cmp	r3, #0
 8000650:	dd09      	ble.n	8000666 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8000652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000654:	3b01      	subs	r3, #1
 8000656:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8000658:	697a      	ldr	r2, [r7, #20]
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	4413      	add	r3, r2
 800065e:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8000660:	69fb      	ldr	r3, [r7, #28]
 8000662:	3302      	adds	r3, #2
 8000664:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8000666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000668:	6a3b      	ldr	r3, [r7, #32]
 800066a:	429a      	cmp	r2, r3
 800066c:	da99      	bge.n	80005a2 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 800066e:	bf00      	nop
 8000670:	bf00      	nop
 8000672:	372c      	adds	r7, #44	; 0x2c
 8000674:	46bd      	mov	sp, r7
 8000676:	bd90      	pop	{r4, r7, pc}

08000678 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b089      	sub	sp, #36	; 0x24
 800067c:	af02      	add	r7, sp, #8
 800067e:	4604      	mov	r4, r0
 8000680:	4608      	mov	r0, r1
 8000682:	4611      	mov	r1, r2
 8000684:	461a      	mov	r2, r3
 8000686:	4623      	mov	r3, r4
 8000688:	71fb      	strb	r3, [r7, #7]
 800068a:	4603      	mov	r3, r0
 800068c:	80bb      	strh	r3, [r7, #4]
 800068e:	460b      	mov	r3, r1
 8000690:	71bb      	strb	r3, [r7, #6]
 8000692:	4613      	mov	r3, r2
 8000694:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 800069a:	7dfb      	ldrb	r3, [r7, #23]
 800069c:	2b1f      	cmp	r3, #31
 800069e:	d902      	bls.n	80006a6 <ILI9341_Draw_Char+0x2e>
        //Character = 0;
    	//break;
    } else {
        function_char -= 32;
 80006a0:	7dfb      	ldrb	r3, [r7, #23]
 80006a2:	3b20      	subs	r3, #32
 80006a4:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80006a6:	2300      	movs	r3, #0
 80006a8:	753b      	strb	r3, [r7, #20]
 80006aa:	e012      	b.n	80006d2 <ILI9341_Draw_Char+0x5a>
		{
		temp[k] = font[function_char][k];
 80006ac:	7dfa      	ldrb	r2, [r7, #23]
 80006ae:	7d38      	ldrb	r0, [r7, #20]
 80006b0:	7d39      	ldrb	r1, [r7, #20]
 80006b2:	4c3b      	ldr	r4, [pc, #236]	; (80007a0 <ILI9341_Draw_Char+0x128>)
 80006b4:	4613      	mov	r3, r2
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	4413      	add	r3, r2
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	4423      	add	r3, r4
 80006be:	4403      	add	r3, r0
 80006c0:	781a      	ldrb	r2, [r3, #0]
 80006c2:	f107 0318 	add.w	r3, r7, #24
 80006c6:	440b      	add	r3, r1
 80006c8:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80006cc:	7d3b      	ldrb	r3, [r7, #20]
 80006ce:	3301      	adds	r3, #1
 80006d0:	753b      	strb	r3, [r7, #20]
 80006d2:	7d3b      	ldrb	r3, [r7, #20]
 80006d4:	2b05      	cmp	r3, #5
 80006d6:	d9e9      	bls.n	80006ac <ILI9341_Draw_Char+0x34>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80006d8:	79bb      	ldrb	r3, [r7, #6]
 80006da:	b299      	uxth	r1, r3
 80006dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80006de:	461a      	mov	r2, r3
 80006e0:	0052      	lsls	r2, r2, #1
 80006e2:	4413      	add	r3, r2
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	b29c      	uxth	r4, r3
 80006ee:	88b8      	ldrh	r0, [r7, #4]
 80006f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	4623      	mov	r3, r4
 80006f6:	f000 fc37 	bl	8000f68 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 80006fa:	2300      	movs	r3, #0
 80006fc:	757b      	strb	r3, [r7, #21]
 80006fe:	e046      	b.n	800078e <ILI9341_Draw_Char+0x116>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000700:	2300      	movs	r3, #0
 8000702:	75bb      	strb	r3, [r7, #22]
 8000704:	e03d      	b.n	8000782 <ILI9341_Draw_Char+0x10a>
            if (temp[j] & (1<<i)) {			
 8000706:	7d7b      	ldrb	r3, [r7, #21]
 8000708:	f107 0218 	add.w	r2, r7, #24
 800070c:	4413      	add	r3, r2
 800070e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000712:	461a      	mov	r2, r3
 8000714:	7dbb      	ldrb	r3, [r7, #22]
 8000716:	fa42 f303 	asr.w	r3, r2, r3
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	2b00      	cmp	r3, #0
 8000720:	d02c      	beq.n	800077c <ILI9341_Draw_Char+0x104>
							if(Size == 1)
 8000722:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000724:	2b01      	cmp	r3, #1
 8000726:	d10f      	bne.n	8000748 <ILI9341_Draw_Char+0xd0>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8000728:	7d7b      	ldrb	r3, [r7, #21]
 800072a:	b29a      	uxth	r2, r3
 800072c:	88bb      	ldrh	r3, [r7, #4]
 800072e:	4413      	add	r3, r2
 8000730:	b298      	uxth	r0, r3
 8000732:	79bb      	ldrb	r3, [r7, #6]
 8000734:	b29a      	uxth	r2, r3
 8000736:	7dbb      	ldrb	r3, [r7, #22]
 8000738:	b29b      	uxth	r3, r3
 800073a:	4413      	add	r3, r2
 800073c:	b29b      	uxth	r3, r3
 800073e:	887a      	ldrh	r2, [r7, #2]
 8000740:	4619      	mov	r1, r3
 8000742:	f000 fb49 	bl	8000dd8 <ILI9341_Draw_Pixel>
 8000746:	e019      	b.n	800077c <ILI9341_Draw_Char+0x104>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8000748:	7d7b      	ldrb	r3, [r7, #21]
 800074a:	b29b      	uxth	r3, r3
 800074c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800074e:	fb12 f303 	smulbb	r3, r2, r3
 8000752:	b29a      	uxth	r2, r3
 8000754:	88bb      	ldrh	r3, [r7, #4]
 8000756:	4413      	add	r3, r2
 8000758:	b298      	uxth	r0, r3
 800075a:	79bb      	ldrb	r3, [r7, #6]
 800075c:	b29a      	uxth	r2, r3
 800075e:	7dbb      	ldrb	r3, [r7, #22]
 8000760:	b29b      	uxth	r3, r3
 8000762:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000764:	fb11 f303 	smulbb	r3, r1, r3
 8000768:	b29b      	uxth	r3, r3
 800076a:	4413      	add	r3, r2
 800076c:	b299      	uxth	r1, r3
 800076e:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8000770:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000772:	887b      	ldrh	r3, [r7, #2]
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	4623      	mov	r3, r4
 8000778:	f000 fbf6 	bl	8000f68 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800077c:	7dbb      	ldrb	r3, [r7, #22]
 800077e:	3301      	adds	r3, #1
 8000780:	75bb      	strb	r3, [r7, #22]
 8000782:	7dbb      	ldrb	r3, [r7, #22]
 8000784:	2b07      	cmp	r3, #7
 8000786:	d9be      	bls.n	8000706 <ILI9341_Draw_Char+0x8e>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000788:	7d7b      	ldrb	r3, [r7, #21]
 800078a:	3301      	adds	r3, #1
 800078c:	757b      	strb	r3, [r7, #21]
 800078e:	7d7b      	ldrb	r3, [r7, #21]
 8000790:	2b05      	cmp	r3, #5
 8000792:	d9b5      	bls.n	8000700 <ILI9341_Draw_Char+0x88>
							}
            }						
        }
    }
}
 8000794:	bf00      	nop
 8000796:	bf00      	nop
 8000798:	371c      	adds	r7, #28
 800079a:	46bd      	mov	sp, r7
 800079c:	bd90      	pop	{r4, r7, pc}
 800079e:	bf00      	nop
 80007a0:	0800af38 	.word	0x0800af38

080007a4 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b087      	sub	sp, #28
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	4608      	mov	r0, r1
 80007ae:	4611      	mov	r1, r2
 80007b0:	461a      	mov	r2, r3
 80007b2:	4603      	mov	r3, r0
 80007b4:	817b      	strh	r3, [r7, #10]
 80007b6:	460b      	mov	r3, r1
 80007b8:	727b      	strb	r3, [r7, #9]
 80007ba:	4613      	mov	r3, r2
 80007bc:	80fb      	strh	r3, [r7, #6]
    while (*Text) {
 80007be:	e016      	b.n	80007ee <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	1c5a      	adds	r2, r3, #1
 80007c4:	60fa      	str	r2, [r7, #12]
 80007c6:	7818      	ldrb	r0, [r3, #0]
 80007c8:	88fc      	ldrh	r4, [r7, #6]
 80007ca:	7a7a      	ldrb	r2, [r7, #9]
 80007cc:	8979      	ldrh	r1, [r7, #10]
 80007ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80007d0:	9301      	str	r3, [sp, #4]
 80007d2:	8c3b      	ldrh	r3, [r7, #32]
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	4623      	mov	r3, r4
 80007d8:	f7ff ff4e 	bl	8000678 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 80007dc:	8c3b      	ldrh	r3, [r7, #32]
 80007de:	461a      	mov	r2, r3
 80007e0:	0052      	lsls	r2, r2, #1
 80007e2:	4413      	add	r3, r2
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	897b      	ldrh	r3, [r7, #10]
 80007ea:	4413      	add	r3, r2
 80007ec:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d1e4      	bne.n	80007c0 <ILI9341_Draw_Text+0x1c>
    }
}
 80007f6:	bf00      	nop
 80007f8:	bf00      	nop
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd90      	pop	{r4, r7, pc}

08000800 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8000804:	2200      	movs	r2, #0
 8000806:	2110      	movs	r1, #16
 8000808:	4802      	ldr	r0, [pc, #8]	; (8000814 <ILI9341_SPI_Init+0x14>)
 800080a:	f002 f8fb 	bl	8002a04 <HAL_GPIO_WritePin>
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000

08000818 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8000822:	1df9      	adds	r1, r7, #7
 8000824:	2301      	movs	r3, #1
 8000826:	2201      	movs	r2, #1
 8000828:	4803      	ldr	r0, [pc, #12]	; (8000838 <ILI9341_SPI_Send+0x20>)
 800082a:	f005 f9ba 	bl	8005ba2 <HAL_SPI_Transmit>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200000f0 	.word	0x200000f0

0800083c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2110      	movs	r1, #16
 800084a:	480a      	ldr	r0, [pc, #40]	; (8000874 <ILI9341_Write_Command+0x38>)
 800084c:	f002 f8da 	bl	8002a04 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000850:	2200      	movs	r2, #0
 8000852:	2140      	movs	r1, #64	; 0x40
 8000854:	4807      	ldr	r0, [pc, #28]	; (8000874 <ILI9341_Write_Command+0x38>)
 8000856:	f002 f8d5 	bl	8002a04 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ffdb 	bl	8000818 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000862:	2201      	movs	r2, #1
 8000864:	2110      	movs	r1, #16
 8000866:	4803      	ldr	r0, [pc, #12]	; (8000874 <ILI9341_Write_Command+0x38>)
 8000868:	f002 f8cc 	bl	8002a04 <HAL_GPIO_WritePin>
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40021000 	.word	0x40021000

08000878 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000882:	2201      	movs	r2, #1
 8000884:	2140      	movs	r1, #64	; 0x40
 8000886:	480a      	ldr	r0, [pc, #40]	; (80008b0 <ILI9341_Write_Data+0x38>)
 8000888:	f002 f8bc 	bl	8002a04 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	2110      	movs	r1, #16
 8000890:	4807      	ldr	r0, [pc, #28]	; (80008b0 <ILI9341_Write_Data+0x38>)
 8000892:	f002 f8b7 	bl	8002a04 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ffbd 	bl	8000818 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	2110      	movs	r1, #16
 80008a2:	4803      	ldr	r0, [pc, #12]	; (80008b0 <ILI9341_Write_Data+0x38>)
 80008a4:	f002 f8ae 	bl	8002a04 <HAL_GPIO_WritePin>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40021000 	.word	0x40021000

080008b4 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80008b4:	b590      	push	{r4, r7, lr}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4604      	mov	r4, r0
 80008bc:	4608      	mov	r0, r1
 80008be:	4611      	mov	r1, r2
 80008c0:	461a      	mov	r2, r3
 80008c2:	4623      	mov	r3, r4
 80008c4:	80fb      	strh	r3, [r7, #6]
 80008c6:	4603      	mov	r3, r0
 80008c8:	80bb      	strh	r3, [r7, #4]
 80008ca:	460b      	mov	r3, r1
 80008cc:	807b      	strh	r3, [r7, #2]
 80008ce:	4613      	mov	r3, r2
 80008d0:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80008d2:	202a      	movs	r0, #42	; 0x2a
 80008d4:	f7ff ffb2 	bl	800083c <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80008d8:	88fb      	ldrh	r3, [r7, #6]
 80008da:	0a1b      	lsrs	r3, r3, #8
 80008dc:	b29b      	uxth	r3, r3
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ffc9 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 80008e6:	88fb      	ldrh	r3, [r7, #6]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff ffc4 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 80008f0:	887b      	ldrh	r3, [r7, #2]
 80008f2:	0a1b      	lsrs	r3, r3, #8
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ffbd 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 80008fe:	887b      	ldrh	r3, [r7, #2]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff ffb8 	bl	8000878 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000908:	202b      	movs	r0, #43	; 0x2b
 800090a:	f7ff ff97 	bl	800083c <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800090e:	88bb      	ldrh	r3, [r7, #4]
 8000910:	0a1b      	lsrs	r3, r3, #8
 8000912:	b29b      	uxth	r3, r3
 8000914:	b2db      	uxtb	r3, r3
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ffae 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 800091c:	88bb      	ldrh	r3, [r7, #4]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ffa9 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000926:	883b      	ldrh	r3, [r7, #0]
 8000928:	0a1b      	lsrs	r3, r3, #8
 800092a:	b29b      	uxth	r3, r3
 800092c:	b2db      	uxtb	r3, r3
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff ffa2 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000934:	883b      	ldrh	r3, [r7, #0]
 8000936:	b2db      	uxtb	r3, r3
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff ff9d 	bl	8000878 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800093e:	202c      	movs	r0, #44	; 0x2c
 8000940:	f7ff ff7c 	bl	800083c <ILI9341_Write_Command>
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	bd90      	pop	{r4, r7, pc}

0800094c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	2120      	movs	r1, #32
 8000954:	480a      	ldr	r0, [pc, #40]	; (8000980 <ILI9341_Reset+0x34>)
 8000956:	f002 f855 	bl	8002a04 <HAL_GPIO_WritePin>
HAL_Delay(200);
 800095a:	20c8      	movs	r0, #200	; 0xc8
 800095c:	f001 fd68 	bl	8002430 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2110      	movs	r1, #16
 8000964:	4806      	ldr	r0, [pc, #24]	; (8000980 <ILI9341_Reset+0x34>)
 8000966:	f002 f84d 	bl	8002a04 <HAL_GPIO_WritePin>
HAL_Delay(200);
 800096a:	20c8      	movs	r0, #200	; 0xc8
 800096c:	f001 fd60 	bl	8002430 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000970:	2201      	movs	r2, #1
 8000972:	2120      	movs	r1, #32
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <ILI9341_Reset+0x34>)
 8000976:	f002 f845 	bl	8002a04 <HAL_GPIO_WritePin>
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40021000 	.word	0x40021000

08000984 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000992:	2036      	movs	r0, #54	; 0x36
 8000994:	f7ff ff52 	bl	800083c <ILI9341_Write_Command>
HAL_Delay(1);
 8000998:	2001      	movs	r0, #1
 800099a:	f001 fd49 	bl	8002430 <HAL_Delay>
	
switch(screen_rotation) 
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	2b03      	cmp	r3, #3
 80009a2:	d837      	bhi.n	8000a14 <ILI9341_Set_Rotation+0x90>
 80009a4:	a201      	add	r2, pc, #4	; (adr r2, 80009ac <ILI9341_Set_Rotation+0x28>)
 80009a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009aa:	bf00      	nop
 80009ac:	080009bd 	.word	0x080009bd
 80009b0:	080009d3 	.word	0x080009d3
 80009b4:	080009e9 	.word	0x080009e9
 80009b8:	080009ff 	.word	0x080009ff
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80009bc:	2048      	movs	r0, #72	; 0x48
 80009be:	f7ff ff5b 	bl	8000878 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <ILI9341_Set_Rotation+0x9c>)
 80009c4:	22f0      	movs	r2, #240	; 0xf0
 80009c6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80009c8:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <ILI9341_Set_Rotation+0xa0>)
 80009ca:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80009ce:	801a      	strh	r2, [r3, #0]
			break;
 80009d0:	e021      	b.n	8000a16 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80009d2:	2028      	movs	r0, #40	; 0x28
 80009d4:	f7ff ff50 	bl	8000878 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <ILI9341_Set_Rotation+0x9c>)
 80009da:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80009de:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80009e0:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <ILI9341_Set_Rotation+0xa0>)
 80009e2:	22f0      	movs	r2, #240	; 0xf0
 80009e4:	801a      	strh	r2, [r3, #0]
			break;
 80009e6:	e016      	b.n	8000a16 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80009e8:	2088      	movs	r0, #136	; 0x88
 80009ea:	f7ff ff45 	bl	8000878 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <ILI9341_Set_Rotation+0x9c>)
 80009f0:	22f0      	movs	r2, #240	; 0xf0
 80009f2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80009f4:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <ILI9341_Set_Rotation+0xa0>)
 80009f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80009fa:	801a      	strh	r2, [r3, #0]
			break;
 80009fc:	e00b      	b.n	8000a16 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80009fe:	20e8      	movs	r0, #232	; 0xe8
 8000a00:	f7ff ff3a 	bl	8000878 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <ILI9341_Set_Rotation+0x9c>)
 8000a06:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000a0a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <ILI9341_Set_Rotation+0xa0>)
 8000a0e:	22f0      	movs	r2, #240	; 0xf0
 8000a10:	801a      	strh	r2, [r3, #0]
			break;
 8000a12:	e000      	b.n	8000a16 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8000a14:	bf00      	nop
	}
}
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000002 	.word	0x20000002
 8000a24:	20000000 	.word	0x20000000

08000a28 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2120      	movs	r1, #32
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <ILI9341_Enable+0x14>)
 8000a32:	f001 ffe7 	bl	8002a04 <HAL_GPIO_WritePin>
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40021000 	.word	0x40021000

08000a40 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000a44:	f7ff fff0 	bl	8000a28 <ILI9341_Enable>
ILI9341_SPI_Init();
 8000a48:	f7ff feda 	bl	8000800 <ILI9341_SPI_Init>
ILI9341_Reset();
 8000a4c:	f7ff ff7e 	bl	800094c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000a50:	2001      	movs	r0, #1
 8000a52:	f7ff fef3 	bl	800083c <ILI9341_Write_Command>
HAL_Delay(1000);
 8000a56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a5a:	f001 fce9 	bl	8002430 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8000a5e:	20cb      	movs	r0, #203	; 0xcb
 8000a60:	f7ff feec 	bl	800083c <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000a64:	2039      	movs	r0, #57	; 0x39
 8000a66:	f7ff ff07 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000a6a:	202c      	movs	r0, #44	; 0x2c
 8000a6c:	f7ff ff04 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000a70:	2000      	movs	r0, #0
 8000a72:	f7ff ff01 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000a76:	2034      	movs	r0, #52	; 0x34
 8000a78:	f7ff fefe 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	f7ff fefb 	bl	8000878 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8000a82:	20cf      	movs	r0, #207	; 0xcf
 8000a84:	f7ff feda 	bl	800083c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f7ff fef5 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000a8e:	20c1      	movs	r0, #193	; 0xc1
 8000a90:	f7ff fef2 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000a94:	2030      	movs	r0, #48	; 0x30
 8000a96:	f7ff feef 	bl	8000878 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8000a9a:	20e8      	movs	r0, #232	; 0xe8
 8000a9c:	f7ff fece 	bl	800083c <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8000aa0:	2085      	movs	r0, #133	; 0x85
 8000aa2:	f7ff fee9 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f7ff fee6 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000aac:	2078      	movs	r0, #120	; 0x78
 8000aae:	f7ff fee3 	bl	8000878 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8000ab2:	20ea      	movs	r0, #234	; 0xea
 8000ab4:	f7ff fec2 	bl	800083c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f7ff fedd 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f7ff feda 	bl	8000878 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000ac4:	20ed      	movs	r0, #237	; 0xed
 8000ac6:	f7ff feb9 	bl	800083c <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000aca:	2064      	movs	r0, #100	; 0x64
 8000acc:	f7ff fed4 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f7ff fed1 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000ad6:	2012      	movs	r0, #18
 8000ad8:	f7ff fece 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000adc:	2081      	movs	r0, #129	; 0x81
 8000ade:	f7ff fecb 	bl	8000878 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8000ae2:	20f7      	movs	r0, #247	; 0xf7
 8000ae4:	f7ff feaa 	bl	800083c <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000ae8:	2020      	movs	r0, #32
 8000aea:	f7ff fec5 	bl	8000878 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000aee:	20c0      	movs	r0, #192	; 0xc0
 8000af0:	f7ff fea4 	bl	800083c <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000af4:	2023      	movs	r0, #35	; 0x23
 8000af6:	f7ff febf 	bl	8000878 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000afa:	20c1      	movs	r0, #193	; 0xc1
 8000afc:	f7ff fe9e 	bl	800083c <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000b00:	2010      	movs	r0, #16
 8000b02:	f7ff feb9 	bl	8000878 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000b06:	20c5      	movs	r0, #197	; 0xc5
 8000b08:	f7ff fe98 	bl	800083c <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000b0c:	203e      	movs	r0, #62	; 0x3e
 8000b0e:	f7ff feb3 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8000b12:	2028      	movs	r0, #40	; 0x28
 8000b14:	f7ff feb0 	bl	8000878 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000b18:	20c7      	movs	r0, #199	; 0xc7
 8000b1a:	f7ff fe8f 	bl	800083c <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000b1e:	2086      	movs	r0, #134	; 0x86
 8000b20:	f7ff feaa 	bl	8000878 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000b24:	2036      	movs	r0, #54	; 0x36
 8000b26:	f7ff fe89 	bl	800083c <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000b2a:	2048      	movs	r0, #72	; 0x48
 8000b2c:	f7ff fea4 	bl	8000878 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000b30:	203a      	movs	r0, #58	; 0x3a
 8000b32:	f7ff fe83 	bl	800083c <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000b36:	2055      	movs	r0, #85	; 0x55
 8000b38:	f7ff fe9e 	bl	8000878 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000b3c:	20b1      	movs	r0, #177	; 0xb1
 8000b3e:	f7ff fe7d 	bl	800083c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000b42:	2000      	movs	r0, #0
 8000b44:	f7ff fe98 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000b48:	2018      	movs	r0, #24
 8000b4a:	f7ff fe95 	bl	8000878 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8000b4e:	20b6      	movs	r0, #182	; 0xb6
 8000b50:	f7ff fe74 	bl	800083c <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000b54:	2008      	movs	r0, #8
 8000b56:	f7ff fe8f 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8000b5a:	2082      	movs	r0, #130	; 0x82
 8000b5c:	f7ff fe8c 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8000b60:	2027      	movs	r0, #39	; 0x27
 8000b62:	f7ff fe89 	bl	8000878 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8000b66:	20f2      	movs	r0, #242	; 0xf2
 8000b68:	f7ff fe68 	bl	800083c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f7ff fe83 	bl	8000878 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8000b72:	2026      	movs	r0, #38	; 0x26
 8000b74:	f7ff fe62 	bl	800083c <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f7ff fe7d 	bl	8000878 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8000b7e:	20e0      	movs	r0, #224	; 0xe0
 8000b80:	f7ff fe5c 	bl	800083c <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000b84:	200f      	movs	r0, #15
 8000b86:	f7ff fe77 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000b8a:	2031      	movs	r0, #49	; 0x31
 8000b8c:	f7ff fe74 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8000b90:	202b      	movs	r0, #43	; 0x2b
 8000b92:	f7ff fe71 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000b96:	200c      	movs	r0, #12
 8000b98:	f7ff fe6e 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000b9c:	200e      	movs	r0, #14
 8000b9e:	f7ff fe6b 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000ba2:	2008      	movs	r0, #8
 8000ba4:	f7ff fe68 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000ba8:	204e      	movs	r0, #78	; 0x4e
 8000baa:	f7ff fe65 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8000bae:	20f1      	movs	r0, #241	; 0xf1
 8000bb0:	f7ff fe62 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000bb4:	2037      	movs	r0, #55	; 0x37
 8000bb6:	f7ff fe5f 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000bba:	2007      	movs	r0, #7
 8000bbc:	f7ff fe5c 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000bc0:	2010      	movs	r0, #16
 8000bc2:	f7ff fe59 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000bc6:	2003      	movs	r0, #3
 8000bc8:	f7ff fe56 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000bcc:	200e      	movs	r0, #14
 8000bce:	f7ff fe53 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000bd2:	2009      	movs	r0, #9
 8000bd4:	f7ff fe50 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f7ff fe4d 	bl	8000878 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000bde:	20e1      	movs	r0, #225	; 0xe1
 8000be0:	f7ff fe2c 	bl	800083c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000be4:	2000      	movs	r0, #0
 8000be6:	f7ff fe47 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000bea:	200e      	movs	r0, #14
 8000bec:	f7ff fe44 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000bf0:	2014      	movs	r0, #20
 8000bf2:	f7ff fe41 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000bf6:	2003      	movs	r0, #3
 8000bf8:	f7ff fe3e 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000bfc:	2011      	movs	r0, #17
 8000bfe:	f7ff fe3b 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000c02:	2007      	movs	r0, #7
 8000c04:	f7ff fe38 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000c08:	2031      	movs	r0, #49	; 0x31
 8000c0a:	f7ff fe35 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000c0e:	20c1      	movs	r0, #193	; 0xc1
 8000c10:	f7ff fe32 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000c14:	2048      	movs	r0, #72	; 0x48
 8000c16:	f7ff fe2f 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000c1a:	2008      	movs	r0, #8
 8000c1c:	f7ff fe2c 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000c20:	200f      	movs	r0, #15
 8000c22:	f7ff fe29 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000c26:	200c      	movs	r0, #12
 8000c28:	f7ff fe26 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000c2c:	2031      	movs	r0, #49	; 0x31
 8000c2e:	f7ff fe23 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000c32:	2036      	movs	r0, #54	; 0x36
 8000c34:	f7ff fe20 	bl	8000878 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000c38:	200f      	movs	r0, #15
 8000c3a:	f7ff fe1d 	bl	8000878 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000c3e:	2011      	movs	r0, #17
 8000c40:	f7ff fdfc 	bl	800083c <ILI9341_Write_Command>
HAL_Delay(120);
 8000c44:	2078      	movs	r0, #120	; 0x78
 8000c46:	f001 fbf3 	bl	8002430 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000c4a:	2029      	movs	r0, #41	; 0x29
 8000c4c:	f7ff fdf6 	bl	800083c <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000c50:	2003      	movs	r0, #3
 8000c52:	f7ff fe97 	bl	8000984 <ILI9341_Set_Rotation>

HAL_Delay(10);
 8000c56:	200a      	movs	r0, #10
 8000c58:	f001 fbea 	bl	8002430 <HAL_Delay>
//
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000c60:	b5b0      	push	{r4, r5, r7, lr}
 8000c62:	b08c      	sub	sp, #48	; 0x30
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	6039      	str	r1, [r7, #0]
 8000c6a:	80fb      	strh	r3, [r7, #6]
 8000c6c:	466b      	mov	r3, sp
 8000c6e:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c7c:	d202      	bcs.n	8000c84 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
 8000c82:	e002      	b.n	8000c8a <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000c84:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2140      	movs	r1, #64	; 0x40
 8000c8e:	483d      	ldr	r0, [pc, #244]	; (8000d84 <ILI9341_Draw_Colour_Burst+0x124>)
 8000c90:	f001 feb8 	bl	8002a04 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2110      	movs	r1, #16
 8000c98:	483a      	ldr	r0, [pc, #232]	; (8000d84 <ILI9341_Draw_Colour_Burst+0x124>)
 8000c9a:	f001 feb3 	bl	8002a04 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8000ca8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000caa:	4623      	mov	r3, r4
 8000cac:	3b01      	subs	r3, #1
 8000cae:	61fb      	str	r3, [r7, #28]
 8000cb0:	4620      	mov	r0, r4
 8000cb2:	f04f 0100 	mov.w	r1, #0
 8000cb6:	f04f 0200 	mov.w	r2, #0
 8000cba:	f04f 0300 	mov.w	r3, #0
 8000cbe:	00cb      	lsls	r3, r1, #3
 8000cc0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000cc4:	00c2      	lsls	r2, r0, #3
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	f04f 0100 	mov.w	r1, #0
 8000ccc:	f04f 0200 	mov.w	r2, #0
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	00cb      	lsls	r3, r1, #3
 8000cd6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000cda:	00c2      	lsls	r2, r0, #3
 8000cdc:	1de3      	adds	r3, r4, #7
 8000cde:	08db      	lsrs	r3, r3, #3
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	ebad 0d03 	sub.w	sp, sp, r3
 8000ce6:	466b      	mov	r3, sp
 8000ce8:	3300      	adds	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000cec:	2300      	movs	r3, #0
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cf0:	e00e      	b.n	8000d10 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf6:	4413      	add	r3, r2
 8000cf8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000cfc:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d00:	3301      	adds	r3, #1
 8000d02:	88fa      	ldrh	r2, [r7, #6]
 8000d04:	b2d1      	uxtb	r1, r2
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0c:	3302      	adds	r3, #2
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d3ec      	bcc.n	8000cf2 <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000d1e:	697a      	ldr	r2, [r7, #20]
 8000d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d26:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d2c:	fbb3 f2f2 	udiv	r2, r3, r2
 8000d30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000d32:	fb01 f202 	mul.w	r2, r1, r2
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d010      	beq.n	8000d62 <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d44:	e009      	b.n	8000d5a <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8000d46:	69b9      	ldr	r1, [r7, #24]
 8000d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	230a      	movs	r3, #10
 8000d4e:	480e      	ldr	r0, [pc, #56]	; (8000d88 <ILI9341_Draw_Colour_Burst+0x128>)
 8000d50:	f004 ff27 	bl	8005ba2 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d56:	3301      	adds	r3, #1
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d3f1      	bcc.n	8000d46 <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8000d62:	69b9      	ldr	r1, [r7, #24]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	230a      	movs	r3, #10
 8000d6a:	4807      	ldr	r0, [pc, #28]	; (8000d88 <ILI9341_Draw_Colour_Burst+0x128>)
 8000d6c:	f004 ff19 	bl	8005ba2 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	2110      	movs	r1, #16
 8000d74:	4803      	ldr	r0, [pc, #12]	; (8000d84 <ILI9341_Draw_Colour_Burst+0x124>)
 8000d76:	f001 fe45 	bl	8002a04 <HAL_GPIO_WritePin>
 8000d7a:	46ad      	mov	sp, r5
}
 8000d7c:	bf00      	nop
 8000d7e:	3730      	adds	r7, #48	; 0x30
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bdb0      	pop	{r4, r5, r7, pc}
 8000d84:	40021000 	.word	0x40021000
 8000d88:	200000f0 	.word	0x200000f0

08000d8c <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <ILI9341_Fill_Screen+0x44>)
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <ILI9341_Fill_Screen+0x48>)
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	2100      	movs	r1, #0
 8000da4:	2000      	movs	r0, #0
 8000da6:	f7ff fd85 	bl	80008b4 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <ILI9341_Fill_Screen+0x44>)
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <ILI9341_Fill_Screen+0x48>)
 8000db4:	881b      	ldrh	r3, [r3, #0]
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	fb03 f302 	mul.w	r3, r3, r2
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ff4c 	bl	8000c60 <ILI9341_Draw_Colour_Burst>
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000002 	.word	0x20000002
 8000dd4:	20000000 	.word	0x20000000

08000dd8 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	80fb      	strh	r3, [r7, #6]
 8000de2:	460b      	mov	r3, r1
 8000de4:	80bb      	strh	r3, [r7, #4]
 8000de6:	4613      	mov	r3, r2
 8000de8:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000dea:	4b5b      	ldr	r3, [pc, #364]	; (8000f58 <ILI9341_Draw_Pixel+0x180>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	88fa      	ldrh	r2, [r7, #6]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	f080 80ac 	bcs.w	8000f50 <ILI9341_Draw_Pixel+0x178>
 8000df8:	4b58      	ldr	r3, [pc, #352]	; (8000f5c <ILI9341_Draw_Pixel+0x184>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	88ba      	ldrh	r2, [r7, #4]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	f080 80a5 	bcs.w	8000f50 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000e06:	2200      	movs	r2, #0
 8000e08:	2140      	movs	r1, #64	; 0x40
 8000e0a:	4855      	ldr	r0, [pc, #340]	; (8000f60 <ILI9341_Draw_Pixel+0x188>)
 8000e0c:	f001 fdfa 	bl	8002a04 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2110      	movs	r1, #16
 8000e14:	4852      	ldr	r0, [pc, #328]	; (8000f60 <ILI9341_Draw_Pixel+0x188>)
 8000e16:	f001 fdf5 	bl	8002a04 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8000e1a:	202a      	movs	r0, #42	; 0x2a
 8000e1c:	f7ff fcfc 	bl	8000818 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000e20:	2201      	movs	r2, #1
 8000e22:	2140      	movs	r1, #64	; 0x40
 8000e24:	484e      	ldr	r0, [pc, #312]	; (8000f60 <ILI9341_Draw_Pixel+0x188>)
 8000e26:	f001 fded 	bl	8002a04 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2110      	movs	r1, #16
 8000e2e:	484c      	ldr	r0, [pc, #304]	; (8000f60 <ILI9341_Draw_Pixel+0x188>)
 8000e30:	f001 fde8 	bl	8002a04 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000e34:	2200      	movs	r2, #0
 8000e36:	2110      	movs	r1, #16
 8000e38:	4849      	ldr	r0, [pc, #292]	; (8000f60 <ILI9341_Draw_Pixel+0x188>)
 8000e3a:	f001 fde3 	bl	8002a04 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	753b      	strb	r3, [r7, #20]
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	757b      	strb	r3, [r7, #21]
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	3301      	adds	r3, #1
 8000e52:	121b      	asrs	r3, r3, #8
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	75bb      	strb	r3, [r7, #22]
 8000e58:	88fb      	ldrh	r3, [r7, #6]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8000e62:	f107 0114 	add.w	r1, r7, #20
 8000e66:	2301      	movs	r3, #1
 8000e68:	2204      	movs	r2, #4
 8000e6a:	483e      	ldr	r0, [pc, #248]	; (8000f64 <ILI9341_Draw_Pixel+0x18c>)
 8000e6c:	f004 fe99 	bl	8005ba2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000e70:	2201      	movs	r2, #1
 8000e72:	2110      	movs	r1, #16
 8000e74:	483a      	ldr	r0, [pc, #232]	; (8000f60 <ILI9341_Draw_Pixel+0x188>)
 8000e76:	f001 fdc5 	bl	8002a04 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2140      	movs	r1, #64	; 0x40
 8000e7e:	4838      	ldr	r0, [pc, #224]	; (8000f60 <ILI9341_Draw_Pixel+0x188>)
 8000e80:	f001 fdc0 	bl	8002a04 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000e84:	2200      	movs	r2, #0
 8000e86:	2110      	movs	r1, #16
 8000e88:	4835      	ldr	r0, [pc, #212]	; (8000f60 <ILI9341_Draw_Pixel+0x188>)
 8000e8a:	f001 fdbb 	bl	8002a04 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8000e8e:	202b      	movs	r0, #43	; 0x2b
 8000e90:	f7ff fcc2 	bl	8000818 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000e94:	2201      	movs	r2, #1
 8000e96:	2140      	movs	r1, #64	; 0x40
 8000e98:	4831      	ldr	r0, [pc, #196]	; (8000f60 <ILI9341_Draw_Pixel+0x188>)
 8000e9a:	f001 fdb3 	bl	8002a04 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2110      	movs	r1, #16
 8000ea2:	482f      	ldr	r0, [pc, #188]	; (8000f60 <ILI9341_Draw_Pixel+0x188>)
 8000ea4:	f001 fdae 	bl	8002a04 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2110      	movs	r1, #16
 8000eac:	482c      	ldr	r0, [pc, #176]	; (8000f60 <ILI9341_Draw_Pixel+0x188>)
 8000eae:	f001 fda9 	bl	8002a04 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8000eb2:	88bb      	ldrh	r3, [r7, #4]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	743b      	strb	r3, [r7, #16]
 8000ebc:	88bb      	ldrh	r3, [r7, #4]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	747b      	strb	r3, [r7, #17]
 8000ec2:	88bb      	ldrh	r3, [r7, #4]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	121b      	asrs	r3, r3, #8
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	74bb      	strb	r3, [r7, #18]
 8000ecc:	88bb      	ldrh	r3, [r7, #4]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8000ed6:	f107 0110 	add.w	r1, r7, #16
 8000eda:	2301      	movs	r3, #1
 8000edc:	2204      	movs	r2, #4
 8000ede:	4821      	ldr	r0, [pc, #132]	; (8000f64 <ILI9341_Draw_Pixel+0x18c>)
 8000ee0:	f004 fe5f 	bl	8005ba2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2110      	movs	r1, #16
 8000ee8:	481d      	ldr	r0, [pc, #116]	; (8000f60 <ILI9341_Draw_Pixel+0x188>)
 8000eea:	f001 fd8b 	bl	8002a04 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2140      	movs	r1, #64	; 0x40
 8000ef2:	481b      	ldr	r0, [pc, #108]	; (8000f60 <ILI9341_Draw_Pixel+0x188>)
 8000ef4:	f001 fd86 	bl	8002a04 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2110      	movs	r1, #16
 8000efc:	4818      	ldr	r0, [pc, #96]	; (8000f60 <ILI9341_Draw_Pixel+0x188>)
 8000efe:	f001 fd81 	bl	8002a04 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8000f02:	202c      	movs	r0, #44	; 0x2c
 8000f04:	f7ff fc88 	bl	8000818 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2140      	movs	r1, #64	; 0x40
 8000f0c:	4814      	ldr	r0, [pc, #80]	; (8000f60 <ILI9341_Draw_Pixel+0x188>)
 8000f0e:	f001 fd79 	bl	8002a04 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000f12:	2201      	movs	r2, #1
 8000f14:	2110      	movs	r1, #16
 8000f16:	4812      	ldr	r0, [pc, #72]	; (8000f60 <ILI9341_Draw_Pixel+0x188>)
 8000f18:	f001 fd74 	bl	8002a04 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2110      	movs	r1, #16
 8000f20:	480f      	ldr	r0, [pc, #60]	; (8000f60 <ILI9341_Draw_Pixel+0x188>)
 8000f22:	f001 fd6f 	bl	8002a04 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8000f26:	887b      	ldrh	r3, [r7, #2]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	733b      	strb	r3, [r7, #12]
 8000f30:	887b      	ldrh	r3, [r7, #2]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8000f36:	f107 010c 	add.w	r1, r7, #12
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	4809      	ldr	r0, [pc, #36]	; (8000f64 <ILI9341_Draw_Pixel+0x18c>)
 8000f40:	f004 fe2f 	bl	8005ba2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2110      	movs	r1, #16
 8000f48:	4805      	ldr	r0, [pc, #20]	; (8000f60 <ILI9341_Draw_Pixel+0x188>)
 8000f4a:	f001 fd5b 	bl	8002a04 <HAL_GPIO_WritePin>
 8000f4e:	e000      	b.n	8000f52 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000f50:	bf00      	nop
	
}
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000002 	.word	0x20000002
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	40021000 	.word	0x40021000
 8000f64:	200000f0 	.word	0x200000f0

08000f68 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4604      	mov	r4, r0
 8000f70:	4608      	mov	r0, r1
 8000f72:	4611      	mov	r1, r2
 8000f74:	461a      	mov	r2, r3
 8000f76:	4623      	mov	r3, r4
 8000f78:	80fb      	strh	r3, [r7, #6]
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	80bb      	strh	r3, [r7, #4]
 8000f7e:	460b      	mov	r3, r1
 8000f80:	807b      	strh	r3, [r7, #2]
 8000f82:	4613      	mov	r3, r2
 8000f84:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000f86:	4b24      	ldr	r3, [pc, #144]	; (8001018 <ILI9341_Draw_Rectangle+0xb0>)
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	88fa      	ldrh	r2, [r7, #6]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d23d      	bcs.n	800100e <ILI9341_Draw_Rectangle+0xa6>
 8000f92:	4b22      	ldr	r3, [pc, #136]	; (800101c <ILI9341_Draw_Rectangle+0xb4>)
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	88ba      	ldrh	r2, [r7, #4]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d237      	bcs.n	800100e <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8000f9e:	88fa      	ldrh	r2, [r7, #6]
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a1c      	ldr	r2, [pc, #112]	; (8001018 <ILI9341_Draw_Rectangle+0xb0>)
 8000fa6:	8812      	ldrh	r2, [r2, #0]
 8000fa8:	b292      	uxth	r2, r2
 8000faa:	4293      	cmp	r3, r2
 8000fac:	dd05      	ble.n	8000fba <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8000fae:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <ILI9341_Draw_Rectangle+0xb0>)
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8000fba:	88ba      	ldrh	r2, [r7, #4]
 8000fbc:	883b      	ldrh	r3, [r7, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a16      	ldr	r2, [pc, #88]	; (800101c <ILI9341_Draw_Rectangle+0xb4>)
 8000fc2:	8812      	ldrh	r2, [r2, #0]
 8000fc4:	b292      	uxth	r2, r2
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	dd05      	ble.n	8000fd6 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <ILI9341_Draw_Rectangle+0xb4>)
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	88bb      	ldrh	r3, [r7, #4]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8000fd6:	88fa      	ldrh	r2, [r7, #6]
 8000fd8:	887b      	ldrh	r3, [r7, #2]
 8000fda:	4413      	add	r3, r2
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	b29c      	uxth	r4, r3
 8000fe2:	88ba      	ldrh	r2, [r7, #4]
 8000fe4:	883b      	ldrh	r3, [r7, #0]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	3b01      	subs	r3, #1
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	88b9      	ldrh	r1, [r7, #4]
 8000ff0:	88f8      	ldrh	r0, [r7, #6]
 8000ff2:	4622      	mov	r2, r4
 8000ff4:	f7ff fc5e 	bl	80008b4 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8000ff8:	883b      	ldrh	r3, [r7, #0]
 8000ffa:	887a      	ldrh	r2, [r7, #2]
 8000ffc:	fb02 f303 	mul.w	r3, r2, r3
 8001000:	461a      	mov	r2, r3
 8001002:	8b3b      	ldrh	r3, [r7, #24]
 8001004:	4611      	mov	r1, r2
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fe2a 	bl	8000c60 <ILI9341_Draw_Colour_Burst>
 800100c:	e000      	b.n	8001010 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800100e:	bf00      	nop
}
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	bd90      	pop	{r4, r7, pc}
 8001016:	bf00      	nop
 8001018:	20000002 	.word	0x20000002
 800101c:	20000000 	.word	0x20000000

08001020 <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	int i =0;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 800102c:	e036      	b.n	800109c <speed_test_LCD+0x7c>
	{
		i ++;
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	3301      	adds	r3, #1
 8001032:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001048:	4819      	ldr	r0, [pc, #100]	; (80010b0 <speed_test_LCD+0x90>)
 800104a:	f004 fd0c 	bl	8005a66 <HAL_RNG_GetRandomNumber>
 800104e:	6138      	str	r0, [r7, #16]
		xr = random_num;
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001054:	4816      	ldr	r0, [pc, #88]	; (80010b0 <speed_test_LCD+0x90>)
 8001056:	f004 fd06 	bl	8005a66 <HAL_RNG_GetRandomNumber>
 800105a:	6138      	str	r0, [r7, #16]
		yr = random_num;
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001060:	4813      	ldr	r0, [pc, #76]	; (80010b0 <speed_test_LCD+0x90>)
 8001062:	f004 fd00 	bl	8005a66 <HAL_RNG_GetRandomNumber>
 8001066:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 800106c:	4810      	ldr	r0, [pc, #64]	; (80010b0 <speed_test_LCD+0x90>)
 800106e:	f004 fcfa 	bl	8005a66 <HAL_RNG_GetRandomNumber>
 8001072:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 8001078:	89fb      	ldrh	r3, [r7, #14]
 800107a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800107e:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 8001080:	89bb      	ldrh	r3, [r7, #12]
 8001082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001086:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 8001088:	897b      	ldrh	r3, [r7, #10]
 800108a:	f003 031f 	and.w	r3, r3, #31
 800108e:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 8001090:	893b      	ldrh	r3, [r7, #8]
 8001092:	897a      	ldrh	r2, [r7, #10]
 8001094:	89b9      	ldrh	r1, [r7, #12]
 8001096:	89f8      	ldrh	r0, [r7, #14]
 8001098:	f7ff fa66 	bl	8000568 <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	ddc4      	ble.n	800102e <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200001d8 	.word	0x200001d8

080010b4 <read_digits>:
#include <stdbool.h>


//----------------------------------------------------------------------------------------
void read_digits(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
	char digith = 0;;
 80010ba:	2300      	movs	r3, #0
 80010bc:	71fb      	strb	r3, [r7, #7]

	digith = read_one_digit_from_keyboard();
 80010be:	f000 f853 	bl	8001168 <read_one_digit_from_keyboard>
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
	if(digith == '#')						// Clean buffer
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	2b23      	cmp	r3, #35	; 0x23
 80010ca:	d10a      	bne.n	80010e2 <read_digits+0x2e>
	{
		memset(keyboard.keyboard_digits_buffer, '\0', sizeof(keyboard.keyboard_digits_buffer));
 80010cc:	221e      	movs	r2, #30
 80010ce:	2100      	movs	r1, #0
 80010d0:	4824      	ldr	r0, [pc, #144]	; (8001164 <read_digits+0xb0>)
 80010d2:	f009 fac7 	bl	800a664 <memset>
		keyboard.read_digits_position = 0;
 80010d6:	4b23      	ldr	r3, [pc, #140]	; (8001164 <read_digits+0xb0>)
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	; 0x24
		keyboard.read_one_digit_status = false;
 80010dc:	4b21      	ldr	r3, [pc, #132]	; (8001164 <read_digits+0xb0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	77da      	strb	r2, [r3, #31]
	}
	if(digith == '*')						// If pressed enter
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2b2a      	cmp	r3, #42	; 0x2a
 80010e6:	d109      	bne.n	80010fc <read_digits+0x48>
	{
		keyboard.all_digits_was_read = true;
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <read_digits+0xb0>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	f883 2020 	strb.w	r2, [r3, #32]
		keyboard.read_one_digit_status = false;
 80010f0:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <read_digits+0xb0>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	77da      	strb	r2, [r3, #31]
		keyboard.read_digits_position = 0;
 80010f6:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <read_digits+0xb0>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if((digith != '\0') && (digith != '#')&& (digith != '*'))
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d028      	beq.n	8001154 <read_digits+0xa0>
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b23      	cmp	r3, #35	; 0x23
 8001106:	d025      	beq.n	8001154 <read_digits+0xa0>
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	2b2a      	cmp	r3, #42	; 0x2a
 800110c:	d022      	beq.n	8001154 <read_digits+0xa0>
	{
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <read_digits+0xb0>)
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	4a14      	ldr	r2, [pc, #80]	; (8001164 <read_digits+0xb0>)
 8001114:	7f92      	ldrb	r2, [r2, #30]
 8001116:	4293      	cmp	r3, r2
 8001118:	dc11      	bgt.n	800113e <read_digits+0x8a>
		{
			keyboard.keyboard_digits_buffer[keyboard.read_digits_position] = digith;
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <read_digits+0xb0>)
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	4911      	ldr	r1, [pc, #68]	; (8001164 <read_digits+0xb0>)
 8001120:	79fa      	ldrb	r2, [r7, #7]
 8001122:	54ca      	strb	r2, [r1, r3]
			keyboard.read_digits_position++;
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <read_digits+0xb0>)
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	3301      	adds	r3, #1
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <read_digits+0xb0>)
 800112c:	6253      	str	r3, [r2, #36]	; 0x24
			keyboard.all_digits_was_read = false;
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <read_digits+0xb0>)
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = true;
 8001136:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <read_digits+0xb0>)
 8001138:	2201      	movs	r2, #1
 800113a:	77da      	strb	r2, [r3, #31]
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 800113c:	e00e      	b.n	800115c <read_digits+0xa8>
		}
		else								// If entered all digits
		{
			keyboard.all_digits_was_read = true;
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <read_digits+0xb0>)
 8001140:	2201      	movs	r2, #1
 8001142:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = false;
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <read_digits+0xb0>)
 8001148:	2200      	movs	r2, #0
 800114a:	77da      	strb	r2, [r3, #31]
			keyboard.read_digits_position = 0;
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <read_digits+0xb0>)
 800114e:	2200      	movs	r2, #0
 8001150:	625a      	str	r2, [r3, #36]	; 0x24
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8001152:	e003      	b.n	800115c <read_digits+0xa8>
		}
	}
	else									// If didn't enter any key
	{
		keyboard.read_one_digit_status = false;
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <read_digits+0xb0>)
 8001156:	2200      	movs	r2, #0
 8001158:	77da      	strb	r2, [r3, #31]
	}
}
 800115a:	bf00      	nop
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200000c8 	.word	0x200000c8

08001168 <read_one_digit_from_keyboard>:

//----------------------------------------------------------------------------------------
char read_one_digit_from_keyboard(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
	char digit = '\0';
 800116e:	2300      	movs	r3, #0
 8001170:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001178:	48cf      	ldr	r0, [pc, #828]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 800117a:	f001 fc43 	bl	8002a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001184:	48cc      	ldr	r0, [pc, #816]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 8001186:	f001 fc3d 	bl	8002a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001190:	48c9      	ldr	r0, [pc, #804]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 8001192:	f001 fc37 	bl	8002a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 7180 	mov.w	r1, #256	; 0x100
 800119c:	48c6      	ldr	r0, [pc, #792]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 800119e:	f001 fc31 	bl	8002a04 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80011a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011a6:	48c5      	ldr	r0, [pc, #788]	; (80014bc <read_one_digit_from_keyboard+0x354>)
 80011a8:	f001 fc14 	bl	80029d4 <HAL_GPIO_ReadPin>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d169      	bne.n	8001286 <read_one_digit_from_keyboard+0x11e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b8:	48bf      	ldr	r0, [pc, #764]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 80011ba:	f001 fc23 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80011be:	2201      	movs	r2, #1
 80011c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011c4:	48bc      	ldr	r0, [pc, #752]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 80011c6:	f001 fc1d 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d0:	48b9      	ldr	r0, [pc, #740]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 80011d2:	f001 fc17 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80011d6:	2201      	movs	r2, #1
 80011d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011dc:	48b6      	ldr	r0, [pc, #728]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 80011de:	f001 fc11 	bl	8002a04 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80011e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011e6:	48b5      	ldr	r0, [pc, #724]	; (80014bc <read_one_digit_from_keyboard+0x354>)
 80011e8:	f001 fbf4 	bl	80029d4 <HAL_GPIO_ReadPin>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <read_one_digit_from_keyboard+0x8e>
		{
			digit = '1';
 80011f2:	2331      	movs	r3, #49	; 0x31
 80011f4:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 80011f6:	2201      	movs	r2, #1
 80011f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011fc:	48ae      	ldr	r0, [pc, #696]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 80011fe:	f001 fc01 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001208:	48ab      	ldr	r0, [pc, #684]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 800120a:	f001 fbfb 	bl	8002a04 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800120e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001212:	48aa      	ldr	r0, [pc, #680]	; (80014bc <read_one_digit_from_keyboard+0x354>)
 8001214:	f001 fbde 	bl	80029d4 <HAL_GPIO_ReadPin>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <read_one_digit_from_keyboard+0xba>
		{
			digit = '4';
 800121e:	2334      	movs	r3, #52	; 0x34
 8001220:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8001222:	2201      	movs	r2, #1
 8001224:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001228:	48a3      	ldr	r0, [pc, #652]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 800122a:	f001 fbeb 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001234:	48a0      	ldr	r0, [pc, #640]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 8001236:	f001 fbe5 	bl	8002a04 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800123a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800123e:	489f      	ldr	r0, [pc, #636]	; (80014bc <read_one_digit_from_keyboard+0x354>)
 8001240:	f001 fbc8 	bl	80029d4 <HAL_GPIO_ReadPin>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <read_one_digit_from_keyboard+0xe6>
		{
			digit =  '7';
 800124a:	2337      	movs	r3, #55	; 0x37
 800124c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800124e:	2201      	movs	r2, #1
 8001250:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001254:	4898      	ldr	r0, [pc, #608]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 8001256:	f001 fbd5 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001260:	4895      	ldr	r0, [pc, #596]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 8001262:	f001 fbcf 	bl	8002a04 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8001266:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800126a:	4894      	ldr	r0, [pc, #592]	; (80014bc <read_one_digit_from_keyboard+0x354>)
 800126c:	f001 fbb2 	bl	80029d4 <HAL_GPIO_ReadPin>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <read_one_digit_from_keyboard+0x112>
		{
			digit =  '*';
 8001276:	232a      	movs	r3, #42	; 0x2a
 8001278:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800127a:	2201      	movs	r2, #1
 800127c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001280:	488d      	ldr	r0, [pc, #564]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 8001282:	f001 fbbf 	bl	8002a04 <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800128c:	488a      	ldr	r0, [pc, #552]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 800128e:	f001 fbb9 	bl	8002a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001298:	4887      	ldr	r0, [pc, #540]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 800129a:	f001 fbb3 	bl	8002a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012a4:	4884      	ldr	r0, [pc, #528]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 80012a6:	f001 fbad 	bl	8002a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012b0:	4881      	ldr	r0, [pc, #516]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 80012b2:	f001 fba7 	bl	8002a04 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 80012b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ba:	4880      	ldr	r0, [pc, #512]	; (80014bc <read_one_digit_from_keyboard+0x354>)
 80012bc:	f001 fb8a 	bl	80029d4 <HAL_GPIO_ReadPin>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d169      	bne.n	800139a <read_one_digit_from_keyboard+0x232>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012cc:	487a      	ldr	r0, [pc, #488]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 80012ce:	f001 fb99 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80012d2:	2201      	movs	r2, #1
 80012d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012d8:	4877      	ldr	r0, [pc, #476]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 80012da:	f001 fb93 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e4:	4874      	ldr	r0, [pc, #464]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 80012e6:	f001 fb8d 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80012ea:	2201      	movs	r2, #1
 80012ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012f0:	4871      	ldr	r0, [pc, #452]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 80012f2:	f001 fb87 	bl	8002a04 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80012f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012fa:	4870      	ldr	r0, [pc, #448]	; (80014bc <read_one_digit_from_keyboard+0x354>)
 80012fc:	f001 fb6a 	bl	80029d4 <HAL_GPIO_ReadPin>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <read_one_digit_from_keyboard+0x1a2>
		{
			digit =  '2';
 8001306:	2332      	movs	r3, #50	; 0x32
 8001308:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 800130a:	2201      	movs	r2, #1
 800130c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001310:	4869      	ldr	r0, [pc, #420]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 8001312:	f001 fb77 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800131c:	4866      	ldr	r0, [pc, #408]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 800131e:	f001 fb71 	bl	8002a04 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001322:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001326:	4865      	ldr	r0, [pc, #404]	; (80014bc <read_one_digit_from_keyboard+0x354>)
 8001328:	f001 fb54 	bl	80029d4 <HAL_GPIO_ReadPin>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <read_one_digit_from_keyboard+0x1ce>
		{
			digit =  '5';
 8001332:	2335      	movs	r3, #53	; 0x35
 8001334:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8001336:	2201      	movs	r2, #1
 8001338:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800133c:	485e      	ldr	r0, [pc, #376]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 800133e:	f001 fb61 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001348:	485b      	ldr	r0, [pc, #364]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 800134a:	f001 fb5b 	bl	8002a04 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800134e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001352:	485a      	ldr	r0, [pc, #360]	; (80014bc <read_one_digit_from_keyboard+0x354>)
 8001354:	f001 fb3e 	bl	80029d4 <HAL_GPIO_ReadPin>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <read_one_digit_from_keyboard+0x1fa>
		{
			digit = '8';
 800135e:	2338      	movs	r3, #56	; 0x38
 8001360:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001362:	2201      	movs	r2, #1
 8001364:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001368:	4853      	ldr	r0, [pc, #332]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 800136a:	f001 fb4b 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001374:	4850      	ldr	r0, [pc, #320]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 8001376:	f001 fb45 	bl	8002a04 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800137a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800137e:	484f      	ldr	r0, [pc, #316]	; (80014bc <read_one_digit_from_keyboard+0x354>)
 8001380:	f001 fb28 	bl	80029d4 <HAL_GPIO_ReadPin>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <read_one_digit_from_keyboard+0x226>
		{
			digit = '0';
 800138a:	2330      	movs	r3, #48	; 0x30
 800138c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800138e:	2201      	movs	r2, #1
 8001390:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001394:	4848      	ldr	r0, [pc, #288]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 8001396:	f001 fb35 	bl	8002a04 <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013a0:	4845      	ldr	r0, [pc, #276]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 80013a2:	f001 fb2f 	bl	8002a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ac:	4842      	ldr	r0, [pc, #264]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 80013ae:	f001 fb29 	bl	8002a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b8:	483f      	ldr	r0, [pc, #252]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 80013ba:	f001 fb23 	bl	8002a04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c4:	483c      	ldr	r0, [pc, #240]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 80013c6:	f001 fb1d 	bl	8002a04 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №
 80013ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ce:	483b      	ldr	r0, [pc, #236]	; (80014bc <read_one_digit_from_keyboard+0x354>)
 80013d0:	f001 fb00 	bl	80029d4 <HAL_GPIO_ReadPin>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d169      	bne.n	80014ae <read_one_digit_from_keyboard+0x346>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013e0:	4835      	ldr	r0, [pc, #212]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 80013e2:	f001 fb0f 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80013e6:	2201      	movs	r2, #1
 80013e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ec:	4832      	ldr	r0, [pc, #200]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 80013ee:	f001 fb09 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80013f2:	2201      	movs	r2, #1
 80013f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f8:	482f      	ldr	r0, [pc, #188]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 80013fa:	f001 fb03 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80013fe:	2201      	movs	r2, #1
 8001400:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001404:	482c      	ldr	r0, [pc, #176]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 8001406:	f001 fafd 	bl	8002a04 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800140a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800140e:	482b      	ldr	r0, [pc, #172]	; (80014bc <read_one_digit_from_keyboard+0x354>)
 8001410:	f001 fae0 	bl	80029d4 <HAL_GPIO_ReadPin>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <read_one_digit_from_keyboard+0x2b6>
		{
			digit = '3';
 800141a:	2333      	movs	r3, #51	; 0x33
 800141c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 800141e:	2201      	movs	r2, #1
 8001420:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001424:	4824      	ldr	r0, [pc, #144]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 8001426:	f001 faed 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001430:	4821      	ldr	r0, [pc, #132]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 8001432:	f001 fae7 	bl	8002a04 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001436:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800143a:	4820      	ldr	r0, [pc, #128]	; (80014bc <read_one_digit_from_keyboard+0x354>)
 800143c:	f001 faca 	bl	80029d4 <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <read_one_digit_from_keyboard+0x2e2>
		{
			digit = '6';
 8001446:	2336      	movs	r3, #54	; 0x36
 8001448:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800144a:	2201      	movs	r2, #1
 800144c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001450:	4819      	ldr	r0, [pc, #100]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 8001452:	f001 fad7 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	f44f 7100 	mov.w	r1, #512	; 0x200
 800145c:	4816      	ldr	r0, [pc, #88]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 800145e:	f001 fad1 	bl	8002a04 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001462:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001466:	4815      	ldr	r0, [pc, #84]	; (80014bc <read_one_digit_from_keyboard+0x354>)
 8001468:	f001 fab4 	bl	80029d4 <HAL_GPIO_ReadPin>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <read_one_digit_from_keyboard+0x30e>
		{
			digit = '9';
 8001472:	2339      	movs	r3, #57	; 0x39
 8001474:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001476:	2201      	movs	r2, #1
 8001478:	f44f 7100 	mov.w	r1, #512	; 0x200
 800147c:	480e      	ldr	r0, [pc, #56]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 800147e:	f001 fac1 	bl	8002a04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001488:	480b      	ldr	r0, [pc, #44]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 800148a:	f001 fabb 	bl	8002a04 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800148e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001492:	480a      	ldr	r0, [pc, #40]	; (80014bc <read_one_digit_from_keyboard+0x354>)
 8001494:	f001 fa9e 	bl	80029d4 <HAL_GPIO_ReadPin>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <read_one_digit_from_keyboard+0x33a>
		{
			digit = '#';
 800149e:	2323      	movs	r3, #35	; 0x23
 80014a0:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80014a2:	2201      	movs	r2, #1
 80014a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014a8:	4803      	ldr	r0, [pc, #12]	; (80014b8 <read_one_digit_from_keyboard+0x350>)
 80014aa:	f001 faab 	bl	8002a04 <HAL_GPIO_WritePin>
	}
	return digit;
 80014ae:	79fb      	ldrb	r3, [r7, #7]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40020c00 	.word	0x40020c00
 80014bc:	40020400 	.word	0x40020400

080014c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c6:	f000 ff41 	bl	800234c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ca:	f000 f88f 	bl	80015ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ce:	f000 fae5 	bl	8001a9c <MX_GPIO_Init>
  MX_I2S3_Init();
 80014d2:	f000 f919 	bl	8001708 <MX_I2S3_Init>
  MX_SPI1_Init();
 80014d6:	f000 f95b 	bl	8001790 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80014da:	f008 fd81 	bl	8009fe0 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80014de:	f000 fa1b 	bl	8001918 <MX_TIM2_Init>
  MX_SPI2_Init();
 80014e2:	f000 f98b 	bl	80017fc <MX_SPI2_Init>
  MX_RNG_Init();
 80014e6:	f000 f93f 	bl	8001768 <MX_RNG_Init>
  MX_TIM3_Init();
 80014ea:	f000 fa63 	bl	80019b4 <MX_TIM3_Init>
  MX_TIM1_Init();
 80014ee:	f000 f9bb 	bl	8001868 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80014f2:	f000 f8fd 	bl	80016f0 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 80014f6:	f7ff faa3 	bl	8000a40 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 80014fa:	2000      	movs	r0, #0
 80014fc:	f7ff fc46 	bl	8000d8c <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 8001500:	2003      	movs	r0, #3
 8001502:	f7ff fa3f 	bl	8000984 <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 8001506:	2000      	movs	r0, #0
 8001508:	f7ff fc40 	bl	8000d8c <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 800150c:	2364      	movs	r3, #100	; 0x64
 800150e:	61bb      	str	r3, [r7, #24]
  speed_test_LCD(number_of_tests);
 8001510:	69b8      	ldr	r0, [r7, #24]
 8001512:	f7ff fd85 	bl	8001020 <speed_test_LCD>

  ILI9341_Fill_Screen(BLACK);
 8001516:	2000      	movs	r0, #0
 8001518:	f7ff fc38 	bl	8000d8c <ILI9341_Fill_Screen>

  // Start scan digits ///////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);			// Start read digits
 800151c:	482c      	ldr	r0, [pc, #176]	; (80015d0 <main+0x110>)
 800151e:	f004 fd97 	bl	8006050 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001522:	2100      	movs	r1, #0
 8001524:	482a      	ldr	r0, [pc, #168]	; (80015d0 <main+0x110>)
 8001526:	f004 fe03 	bl	8006130 <HAL_TIM_OC_Start_IT>
  keyboard.how_meny_digits_must_be_written = 10;
 800152a:	4b2a      	ldr	r3, [pc, #168]	; (80015d4 <main+0x114>)
 800152c:	220a      	movs	r2, #10
 800152e:	779a      	strb	r2, [r3, #30]
  // Stop scan digits

  // Encoder /////////////////////////////////////////
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001530:	213c      	movs	r1, #60	; 0x3c
 8001532:	4829      	ldr	r0, [pc, #164]	; (80015d8 <main+0x118>)
 8001534:	f005 f809 	bl	800654a <HAL_TIM_Encoder_Start>
  int32_t prevCounter = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
  ////////////////////////////////////////////////////
  while (1)
  {

	  int currCounter = __HAL_TIM_GET_COUNTER(&htim1);
 800153c:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <main+0x118>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001542:	617b      	str	r3, [r7, #20]
	  currCounter = 32767 - ((currCounter-1) & 0xFFFF) / 2;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	3b01      	subs	r3, #1
 8001548:	b29b      	uxth	r3, r3
 800154a:	0fda      	lsrs	r2, r3, #31
 800154c:	4413      	add	r3, r2
 800154e:	105b      	asrs	r3, r3, #1
 8001550:	425b      	negs	r3, r3
 8001552:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001556:	337f      	adds	r3, #127	; 0x7f
 8001558:	617b      	str	r3, [r7, #20]
	  if(currCounter != prevCounter)
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	429a      	cmp	r2, r3
 8001560:	d012      	beq.n	8001588 <main+0xc8>
	  {
	          char buff[16];
	          snprintf(buff, sizeof(buff), "%06d", currCounter);
 8001562:	4638      	mov	r0, r7
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	4a1d      	ldr	r2, [pc, #116]	; (80015dc <main+0x11c>)
 8001568:	2110      	movs	r1, #16
 800156a:	f009 f93d 	bl	800a7e8 <sniprintf>
	          ILI9341_Draw_Text( buff, 10, 30, WHITE, 3, BLACK);
 800156e:	4638      	mov	r0, r7
 8001570:	2300      	movs	r3, #0
 8001572:	9301      	str	r3, [sp, #4]
 8001574:	2303      	movs	r3, #3
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800157c:	221e      	movs	r2, #30
 800157e:	210a      	movs	r1, #10
 8001580:	f7ff f910 	bl	80007a4 <ILI9341_Draw_Text>

	          // выводим куда-то currCounter
	          // ... пропущено ...

	          prevCounter = currCounter;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	61fb      	str	r3, [r7, #28]
	   }
	  if(HAL_GPIO_ReadPin(GPIOE, encoder_button_Pin) == 0)
 8001588:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800158c:	4814      	ldr	r0, [pc, #80]	; (80015e0 <main+0x120>)
 800158e:	f001 fa21 	bl	80029d4 <HAL_GPIO_ReadPin>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10b      	bne.n	80015b0 <main+0xf0>
	  {
		  ILI9341_Draw_Text( "KEY pressed", 10, 60, WHITE, 3, BLACK);
 8001598:	2300      	movs	r3, #0
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	2303      	movs	r3, #3
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015a4:	223c      	movs	r2, #60	; 0x3c
 80015a6:	210a      	movs	r1, #10
 80015a8:	480e      	ldr	r0, [pc, #56]	; (80015e4 <main+0x124>)
 80015aa:	f7ff f8fb 	bl	80007a4 <ILI9341_Draw_Text>
 80015ae:	e00a      	b.n	80015c6 <main+0x106>
	  }
	  else
	  {
		  ILI9341_Draw_Text( "            ", 10, 60, WHITE, 3, BLACK);
 80015b0:	2300      	movs	r3, #0
 80015b2:	9301      	str	r3, [sp, #4]
 80015b4:	2303      	movs	r3, #3
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015bc:	223c      	movs	r2, #60	; 0x3c
 80015be:	210a      	movs	r1, #10
 80015c0:	4809      	ldr	r0, [pc, #36]	; (80015e8 <main+0x128>)
 80015c2:	f7ff f8ef 	bl	80007a4 <ILI9341_Draw_Text>

	  */

	  //test_touchsreen();
	  char number;
	  int ARR_REG =0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
//	  HAL_TIM_Base_Stop_IT(&htim3);				// Stop timer measure
//	  ARR_REG = TIM3-> CNT;


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80015ca:	f008 fd2f 	bl	800a02c <MX_USB_HOST_Process>
  {
 80015ce:	e7b5      	b.n	800153c <main+0x7c>
 80015d0:	20000148 	.word	0x20000148
 80015d4:	200000c8 	.word	0x200000c8
 80015d8:	20000190 	.word	0x20000190
 80015dc:	0800af10 	.word	0x0800af10
 80015e0:	40021000 	.word	0x40021000
 80015e4:	0800af18 	.word	0x0800af18
 80015e8:	0800af24 	.word	0x0800af24

080015ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b098      	sub	sp, #96	; 0x60
 80015f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015f6:	2230      	movs	r2, #48	; 0x30
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f009 f832 	bl	800a664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	4b31      	ldr	r3, [pc, #196]	; (80016e8 <SystemClock_Config+0xfc>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	4a30      	ldr	r2, [pc, #192]	; (80016e8 <SystemClock_Config+0xfc>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162c:	6413      	str	r3, [r2, #64]	; 0x40
 800162e:	4b2e      	ldr	r3, [pc, #184]	; (80016e8 <SystemClock_Config+0xfc>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <SystemClock_Config+0x100>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a2a      	ldr	r2, [pc, #168]	; (80016ec <SystemClock_Config+0x100>)
 8001644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	4b28      	ldr	r3, [pc, #160]	; (80016ec <SystemClock_Config+0x100>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001656:	2301      	movs	r3, #1
 8001658:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800165a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800165e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001660:	2302      	movs	r3, #2
 8001662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001664:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001668:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800166a:	2308      	movs	r3, #8
 800166c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800166e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001672:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001674:	2302      	movs	r3, #2
 8001676:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001678:	2307      	movs	r3, #7
 800167a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800167c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001680:	4618      	mov	r0, r3
 8001682:	f003 fbf7 	bl	8004e74 <HAL_RCC_OscConfig>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800168c:	f000 fb78 	bl	8001d80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001690:	230f      	movs	r3, #15
 8001692:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001694:	2302      	movs	r3, #2
 8001696:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001698:	2300      	movs	r3, #0
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800169c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016a8:	f107 031c 	add.w	r3, r7, #28
 80016ac:	2105      	movs	r1, #5
 80016ae:	4618      	mov	r0, r3
 80016b0:	f003 fe58 	bl	8005364 <HAL_RCC_ClockConfig>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80016ba:	f000 fb61 	bl	8001d80 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80016be:	2301      	movs	r3, #1
 80016c0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80016c2:	23c0      	movs	r3, #192	; 0xc0
 80016c4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80016c6:	2302      	movs	r3, #2
 80016c8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	4618      	mov	r0, r3
 80016d0:	f004 f810 	bl	80056f4 <HAL_RCCEx_PeriphCLKConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80016da:	f000 fb51 	bl	8001d80 <Error_Handler>
  }
}
 80016de:	bf00      	nop
 80016e0:	3760      	adds	r7, #96	; 0x60
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40007000 	.word	0x40007000

080016f0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2100      	movs	r1, #0
 80016f8:	201c      	movs	r0, #28
 80016fa:	f000 ff98 	bl	800262e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016fe:	201c      	movs	r0, #28
 8001700:	f000 ffb1 	bl	8002666 <HAL_NVIC_EnableIRQ>
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}

08001708 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800170c:	4b13      	ldr	r3, [pc, #76]	; (800175c <MX_I2S3_Init+0x54>)
 800170e:	4a14      	ldr	r2, [pc, #80]	; (8001760 <MX_I2S3_Init+0x58>)
 8001710:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <MX_I2S3_Init+0x54>)
 8001714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001718:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <MX_I2S3_Init+0x54>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001720:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_I2S3_Init+0x54>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001726:	4b0d      	ldr	r3, [pc, #52]	; (800175c <MX_I2S3_Init+0x54>)
 8001728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800172c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <MX_I2S3_Init+0x54>)
 8001730:	4a0c      	ldr	r2, [pc, #48]	; (8001764 <MX_I2S3_Init+0x5c>)
 8001732:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_I2S3_Init+0x54>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <MX_I2S3_Init+0x54>)
 800173c:	2200      	movs	r2, #0
 800173e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_I2S3_Init+0x54>)
 8001742:	2200      	movs	r2, #0
 8001744:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <MX_I2S3_Init+0x54>)
 8001748:	f002 fef4 	bl	8004534 <HAL_I2S_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001752:	f000 fb15 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000288 	.word	0x20000288
 8001760:	40003c00 	.word	0x40003c00
 8001764:	00017700 	.word	0x00017700

08001768 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <MX_RNG_Init+0x20>)
 800176e:	4a07      	ldr	r2, [pc, #28]	; (800178c <MX_RNG_Init+0x24>)
 8001770:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001772:	4805      	ldr	r0, [pc, #20]	; (8001788 <MX_RNG_Init+0x20>)
 8001774:	f004 f8fe 	bl	8005974 <HAL_RNG_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800177e:	f000 faff 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200001d8 	.word	0x200001d8
 800178c:	50060800 	.word	0x50060800

08001790 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001794:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <MX_SPI1_Init+0x64>)
 8001796:	4a18      	ldr	r2, [pc, #96]	; (80017f8 <MX_SPI1_Init+0x68>)
 8001798:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800179a:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <MX_SPI1_Init+0x64>)
 800179c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <MX_SPI1_Init+0x64>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <MX_SPI1_Init+0x64>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <MX_SPI1_Init+0x64>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <MX_SPI1_Init+0x64>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <MX_SPI1_Init+0x64>)
 80017bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <MX_SPI1_Init+0x64>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <MX_SPI1_Init+0x64>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <MX_SPI1_Init+0x64>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <MX_SPI1_Init+0x64>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <MX_SPI1_Init+0x64>)
 80017dc:	220a      	movs	r2, #10
 80017de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017e0:	4804      	ldr	r0, [pc, #16]	; (80017f4 <MX_SPI1_Init+0x64>)
 80017e2:	f004 f955 	bl	8005a90 <HAL_SPI_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017ec:	f000 fac8 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	200001e8 	.word	0x200001e8
 80017f8:	40013000 	.word	0x40013000

080017fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001800:	4b17      	ldr	r3, [pc, #92]	; (8001860 <MX_SPI2_Init+0x64>)
 8001802:	4a18      	ldr	r2, [pc, #96]	; (8001864 <MX_SPI2_Init+0x68>)
 8001804:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001806:	4b16      	ldr	r3, [pc, #88]	; (8001860 <MX_SPI2_Init+0x64>)
 8001808:	f44f 7282 	mov.w	r2, #260	; 0x104
 800180c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <MX_SPI2_Init+0x64>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <MX_SPI2_Init+0x64>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <MX_SPI2_Init+0x64>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <MX_SPI2_Init+0x64>)
 8001822:	2200      	movs	r2, #0
 8001824:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <MX_SPI2_Init+0x64>)
 8001828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800182c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <MX_SPI2_Init+0x64>)
 8001830:	2200      	movs	r2, #0
 8001832:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001834:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <MX_SPI2_Init+0x64>)
 8001836:	2200      	movs	r2, #0
 8001838:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_SPI2_Init+0x64>)
 800183c:	2200      	movs	r2, #0
 800183e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <MX_SPI2_Init+0x64>)
 8001842:	2200      	movs	r2, #0
 8001844:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <MX_SPI2_Init+0x64>)
 8001848:	220a      	movs	r2, #10
 800184a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800184c:	4804      	ldr	r0, [pc, #16]	; (8001860 <MX_SPI2_Init+0x64>)
 800184e:	f004 f91f 	bl	8005a90 <HAL_SPI_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001858:	f000 fa92 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200000f0 	.word	0x200000f0
 8001864:	40003800 	.word	0x40003800

08001868 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08c      	sub	sp, #48	; 0x30
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	2224      	movs	r2, #36	; 0x24
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f008 fef4 	bl	800a664 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001884:	4b22      	ldr	r3, [pc, #136]	; (8001910 <MX_TIM1_Init+0xa8>)
 8001886:	4a23      	ldr	r2, [pc, #140]	; (8001914 <MX_TIM1_Init+0xac>)
 8001888:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800188a:	4b21      	ldr	r3, [pc, #132]	; (8001910 <MX_TIM1_Init+0xa8>)
 800188c:	2200      	movs	r2, #0
 800188e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001890:	4b1f      	ldr	r3, [pc, #124]	; (8001910 <MX_TIM1_Init+0xa8>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001896:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <MX_TIM1_Init+0xa8>)
 8001898:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800189c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189e:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <MX_TIM1_Init+0xa8>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018a4:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <MX_TIM1_Init+0xa8>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018aa:	4b19      	ldr	r3, [pc, #100]	; (8001910 <MX_TIM1_Init+0xa8>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80018b0:	2301      	movs	r3, #1
 80018b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018b4:	2300      	movs	r3, #0
 80018b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018b8:	2301      	movs	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018bc:	2300      	movs	r3, #0
 80018be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018c4:	2300      	movs	r3, #0
 80018c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018c8:	2301      	movs	r3, #1
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	4619      	mov	r1, r3
 80018da:	480d      	ldr	r0, [pc, #52]	; (8001910 <MX_TIM1_Init+0xa8>)
 80018dc:	f004 fd8f 	bl	80063fe <HAL_TIM_Encoder_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80018e6:	f000 fa4b 	bl	8001d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	4619      	mov	r1, r3
 80018f6:	4806      	ldr	r0, [pc, #24]	; (8001910 <MX_TIM1_Init+0xa8>)
 80018f8:	f005 fc82 	bl	8007200 <HAL_TIMEx_MasterConfigSynchronization>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001902:	f000 fa3d 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	3730      	adds	r7, #48	; 0x30
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000190 	.word	0x20000190
 8001914:	40010000 	.word	0x40010000

08001918 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800191e:	f107 0308 	add.w	r3, r7, #8
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800192c:	463b      	mov	r3, r7
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001934:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <MX_TIM2_Init+0x98>)
 8001936:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800193a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 800193c:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <MX_TIM2_Init+0x98>)
 800193e:	f240 3247 	movw	r2, #839	; 0x347
 8001942:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001944:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <MX_TIM2_Init+0x98>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 800194a:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <MX_TIM2_Init+0x98>)
 800194c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001950:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001952:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <MX_TIM2_Init+0x98>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001958:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <MX_TIM2_Init+0x98>)
 800195a:	2280      	movs	r2, #128	; 0x80
 800195c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800195e:	4814      	ldr	r0, [pc, #80]	; (80019b0 <MX_TIM2_Init+0x98>)
 8001960:	f004 fb26 	bl	8005fb0 <HAL_TIM_Base_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800196a:	f000 fa09 	bl	8001d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800196e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001972:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001974:	f107 0308 	add.w	r3, r7, #8
 8001978:	4619      	mov	r1, r3
 800197a:	480d      	ldr	r0, [pc, #52]	; (80019b0 <MX_TIM2_Init+0x98>)
 800197c:	f005 f83a 	bl	80069f4 <HAL_TIM_ConfigClockSource>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001986:	f000 f9fb 	bl	8001d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800198a:	2310      	movs	r3, #16
 800198c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001992:	463b      	mov	r3, r7
 8001994:	4619      	mov	r1, r3
 8001996:	4806      	ldr	r0, [pc, #24]	; (80019b0 <MX_TIM2_Init+0x98>)
 8001998:	f005 fc32 	bl	8007200 <HAL_TIMEx_MasterConfigSynchronization>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80019a2:	f000 f9ed 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019a6:	bf00      	nop
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000240 	.word	0x20000240

080019b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08e      	sub	sp, #56	; 0x38
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c8:	f107 0320 	add.w	r3, r7, #32
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
 80019e0:	615a      	str	r2, [r3, #20]
 80019e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019e4:	4b2b      	ldr	r3, [pc, #172]	; (8001a94 <MX_TIM3_Init+0xe0>)
 80019e6:	4a2c      	ldr	r2, [pc, #176]	; (8001a98 <MX_TIM3_Init+0xe4>)
 80019e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 80019ea:	4b2a      	ldr	r3, [pc, #168]	; (8001a94 <MX_TIM3_Init+0xe0>)
 80019ec:	f640 0233 	movw	r2, #2099	; 0x833
 80019f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f2:	4b28      	ldr	r3, [pc, #160]	; (8001a94 <MX_TIM3_Init+0xe0>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80019f8:	4b26      	ldr	r3, [pc, #152]	; (8001a94 <MX_TIM3_Init+0xe0>)
 80019fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80019fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a00:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <MX_TIM3_Init+0xe0>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a06:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <MX_TIM3_Init+0xe0>)
 8001a08:	2280      	movs	r2, #128	; 0x80
 8001a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a0c:	4821      	ldr	r0, [pc, #132]	; (8001a94 <MX_TIM3_Init+0xe0>)
 8001a0e:	f004 facf 	bl	8005fb0 <HAL_TIM_Base_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001a18:	f000 f9b2 	bl	8001d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a26:	4619      	mov	r1, r3
 8001a28:	481a      	ldr	r0, [pc, #104]	; (8001a94 <MX_TIM3_Init+0xe0>)
 8001a2a:	f004 ffe3 	bl	80069f4 <HAL_TIM_ConfigClockSource>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001a34:	f000 f9a4 	bl	8001d80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a38:	4816      	ldr	r0, [pc, #88]	; (8001a94 <MX_TIM3_Init+0xe0>)
 8001a3a:	f004 fc87 	bl	800634c <HAL_TIM_PWM_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001a44:	f000 f99c 	bl	8001d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a50:	f107 0320 	add.w	r3, r7, #32
 8001a54:	4619      	mov	r1, r3
 8001a56:	480f      	ldr	r0, [pc, #60]	; (8001a94 <MX_TIM3_Init+0xe0>)
 8001a58:	f005 fbd2 	bl	8007200 <HAL_TIMEx_MasterConfigSynchronization>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001a62:	f000 f98d 	bl	8001d80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a66:	2360      	movs	r3, #96	; 0x60
 8001a68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	2200      	movs	r2, #0
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_TIM3_Init+0xe0>)
 8001a7e:	f004 fefb 	bl	8006878 <HAL_TIM_PWM_ConfigChannel>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001a88:	f000 f97a 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a8c:	bf00      	nop
 8001a8e:	3738      	adds	r7, #56	; 0x38
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000148 	.word	0x20000148
 8001a98:	40000400 	.word	0x40000400

08001a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08c      	sub	sp, #48	; 0x30
 8001aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa2:	f107 031c 	add.w	r3, r7, #28
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
 8001ab0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	4bab      	ldr	r3, [pc, #684]	; (8001d64 <MX_GPIO_Init+0x2c8>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4aaa      	ldr	r2, [pc, #680]	; (8001d64 <MX_GPIO_Init+0x2c8>)
 8001abc:	f043 0310 	orr.w	r3, r3, #16
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4ba8      	ldr	r3, [pc, #672]	; (8001d64 <MX_GPIO_Init+0x2c8>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0310 	and.w	r3, r3, #16
 8001aca:	61bb      	str	r3, [r7, #24]
 8001acc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	4ba4      	ldr	r3, [pc, #656]	; (8001d64 <MX_GPIO_Init+0x2c8>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4aa3      	ldr	r2, [pc, #652]	; (8001d64 <MX_GPIO_Init+0x2c8>)
 8001ad8:	f043 0304 	orr.w	r3, r3, #4
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4ba1      	ldr	r3, [pc, #644]	; (8001d64 <MX_GPIO_Init+0x2c8>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	4b9d      	ldr	r3, [pc, #628]	; (8001d64 <MX_GPIO_Init+0x2c8>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a9c      	ldr	r2, [pc, #624]	; (8001d64 <MX_GPIO_Init+0x2c8>)
 8001af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b9a      	ldr	r3, [pc, #616]	; (8001d64 <MX_GPIO_Init+0x2c8>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4b96      	ldr	r3, [pc, #600]	; (8001d64 <MX_GPIO_Init+0x2c8>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a95      	ldr	r2, [pc, #596]	; (8001d64 <MX_GPIO_Init+0x2c8>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b93      	ldr	r3, [pc, #588]	; (8001d64 <MX_GPIO_Init+0x2c8>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	4b8f      	ldr	r3, [pc, #572]	; (8001d64 <MX_GPIO_Init+0x2c8>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a8e      	ldr	r2, [pc, #568]	; (8001d64 <MX_GPIO_Init+0x2c8>)
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b8c      	ldr	r3, [pc, #560]	; (8001d64 <MX_GPIO_Init+0x2c8>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	4b88      	ldr	r3, [pc, #544]	; (8001d64 <MX_GPIO_Init+0x2c8>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a87      	ldr	r2, [pc, #540]	; (8001d64 <MX_GPIO_Init+0x2c8>)
 8001b48:	f043 0308 	orr.w	r3, r3, #8
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b85      	ldr	r3, [pc, #532]	; (8001d64 <MX_GPIO_Init+0x2c8>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	217c      	movs	r1, #124	; 0x7c
 8001b5e:	4882      	ldr	r0, [pc, #520]	; (8001d68 <MX_GPIO_Init+0x2cc>)
 8001b60:	f000 ff50 	bl	8002a04 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001b64:	2201      	movs	r2, #1
 8001b66:	2101      	movs	r1, #1
 8001b68:	4880      	ldr	r0, [pc, #512]	; (8001d6c <MX_GPIO_Init+0x2d0>)
 8001b6a:	f000 ff4b 	bl	8002a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f64f 7110 	movw	r1, #65296	; 0xff10
 8001b74:	487e      	ldr	r0, [pc, #504]	; (8001d70 <MX_GPIO_Init+0x2d4>)
 8001b76:	f000 ff45 	bl	8002a04 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001b80:	487c      	ldr	r0, [pc, #496]	; (8001d74 <MX_GPIO_Init+0x2d8>)
 8001b82:	f000 ff3f 	bl	8002a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 8001b86:	2374      	movs	r3, #116	; 0x74
 8001b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b92:	2303      	movs	r3, #3
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b96:	f107 031c 	add.w	r3, r7, #28
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4872      	ldr	r0, [pc, #456]	; (8001d68 <MX_GPIO_Init+0x2cc>)
 8001b9e:	f000 fd7d 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001ba2:	2308      	movs	r3, #8
 8001ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001bb2:	f107 031c 	add.w	r3, r7, #28
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	486b      	ldr	r0, [pc, #428]	; (8001d68 <MX_GPIO_Init+0x2cc>)
 8001bba:	f000 fd6f 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001bbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4866      	ldr	r0, [pc, #408]	; (8001d6c <MX_GPIO_Init+0x2d0>)
 8001bd4:	f000 fd62 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001be8:	f107 031c 	add.w	r3, r7, #28
 8001bec:	4619      	mov	r1, r3
 8001bee:	485f      	ldr	r0, [pc, #380]	; (8001d6c <MX_GPIO_Init+0x2d0>)
 8001bf0:	f000 fd54 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001bf4:	2308      	movs	r3, #8
 8001bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	2300      	movs	r3, #0
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c04:	2305      	movs	r3, #5
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001c08:	f107 031c 	add.w	r3, r7, #28
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4857      	ldr	r0, [pc, #348]	; (8001d6c <MX_GPIO_Init+0x2d0>)
 8001c10:	f000 fd44 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c14:	2301      	movs	r3, #1
 8001c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c18:	4b57      	ldr	r3, [pc, #348]	; (8001d78 <MX_GPIO_Init+0x2dc>)
 8001c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	4619      	mov	r1, r3
 8001c26:	4855      	ldr	r0, [pc, #340]	; (8001d7c <MX_GPIO_Init+0x2e0>)
 8001c28:	f000 fd38 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c30:	2300      	movs	r3, #0
 8001c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001c38:	f107 031c 	add.w	r3, r7, #28
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	484d      	ldr	r0, [pc, #308]	; (8001d74 <MX_GPIO_Init+0x2d8>)
 8001c40:	f000 fd2c 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : encoder_button_Pin */
  GPIO_InitStruct.Pin = encoder_button_Pin;
 8001c44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(encoder_button_GPIO_Port, &GPIO_InitStruct);
 8001c52:	f107 031c 	add.w	r3, r7, #28
 8001c56:	4619      	mov	r1, r3
 8001c58:	4843      	ldr	r0, [pc, #268]	; (8001d68 <MX_GPIO_Init+0x2cc>)
 8001c5a:	f000 fd1f 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c70:	2305      	movs	r3, #5
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001c74:	f107 031c 	add.w	r3, r7, #28
 8001c78:	4619      	mov	r1, r3
 8001c7a:	483e      	ldr	r0, [pc, #248]	; (8001d74 <MX_GPIO_Init+0x2d8>)
 8001c7c:	f000 fd0e 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_3_Pin KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_3_Pin|KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 8001c80:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8001c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c86:	2300      	movs	r3, #0
 8001c88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8e:	f107 031c 	add.w	r3, r7, #28
 8001c92:	4619      	mov	r1, r3
 8001c94:	4837      	ldr	r0, [pc, #220]	; (8001d74 <MX_GPIO_Init+0x2d8>)
 8001c96:	f000 fd01 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001c9a:	f64f 7310 	movw	r3, #65296	; 0xff10
 8001c9e:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cac:	f107 031c 	add.w	r3, r7, #28
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	482f      	ldr	r0, [pc, #188]	; (8001d70 <MX_GPIO_Init+0x2d4>)
 8001cb4:	f000 fcf2 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001cb8:	2320      	movs	r3, #32
 8001cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4829      	ldr	r0, [pc, #164]	; (8001d70 <MX_GPIO_Init+0x2d4>)
 8001ccc:	f000 fce6 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cd0:	2340      	movs	r3, #64	; 0x40
 8001cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce0:	f107 031c 	add.w	r3, r7, #28
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4823      	ldr	r0, [pc, #140]	; (8001d74 <MX_GPIO_Init+0x2d8>)
 8001ce8:	f000 fcd8 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8001cec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfe:	f107 031c 	add.w	r3, r7, #28
 8001d02:	4619      	mov	r1, r3
 8001d04:	481b      	ldr	r0, [pc, #108]	; (8001d74 <MX_GPIO_Init+0x2d8>)
 8001d06:	f000 fcc9 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001d0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d10:	2312      	movs	r3, #18
 8001d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d14:	2301      	movs	r3, #1
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d1c:	2304      	movs	r3, #4
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8001d20:	f107 031c 	add.w	r3, r7, #28
 8001d24:	4619      	mov	r1, r3
 8001d26:	4813      	ldr	r0, [pc, #76]	; (8001d74 <MX_GPIO_Init+0x2d8>)
 8001d28:	f000 fcb8 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d30:	2300      	movs	r3, #0
 8001d32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8001d38:	f107 031c 	add.w	r3, r7, #28
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	480a      	ldr	r0, [pc, #40]	; (8001d68 <MX_GPIO_Init+0x2cc>)
 8001d40:	f000 fcac 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001d44:	2302      	movs	r3, #2
 8001d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <MX_GPIO_Init+0x2dc>)
 8001d4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001d50:	f107 031c 	add.w	r3, r7, #28
 8001d54:	4619      	mov	r1, r3
 8001d56:	4804      	ldr	r0, [pc, #16]	; (8001d68 <MX_GPIO_Init+0x2cc>)
 8001d58:	f000 fca0 	bl	800269c <HAL_GPIO_Init>

}
 8001d5c:	bf00      	nop
 8001d5e:	3730      	adds	r7, #48	; 0x30
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40020800 	.word	0x40020800
 8001d70:	40020c00 	.word	0x40020c00
 8001d74:	40020400 	.word	0x40020400
 8001d78:	10120000 	.word	0x10120000
 8001d7c:	40020000 	.word	0x40020000

08001d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d84:	b672      	cpsid	i
}
 8001d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <Error_Handler+0x8>
	...

08001d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	607b      	str	r3, [r7, #4]
 8001d96:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <HAL_MspInit+0x5c>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <HAL_MspInit+0x5c>)
 8001d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da0:	6453      	str	r3, [r2, #68]	; 0x44
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <HAL_MspInit+0x5c>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	603b      	str	r3, [r7, #0]
 8001db2:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <HAL_MspInit+0x5c>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	4a0c      	ldr	r2, [pc, #48]	; (8001de8 <HAL_MspInit+0x5c>)
 8001db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <HAL_MspInit+0x5c>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001dca:	2007      	movs	r0, #7
 8001dcc:	f000 fc24 	bl	8002618 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	2005      	movs	r0, #5
 8001dd6:	f000 fc2a 	bl	800262e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001dda:	2005      	movs	r0, #5
 8001ddc:	f000 fc43 	bl	8002666 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40023800 	.word	0x40023800

08001dec <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a28      	ldr	r2, [pc, #160]	; (8001eac <HAL_I2S_MspInit+0xc0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d14a      	bne.n	8001ea4 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <HAL_I2S_MspInit+0xc4>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	4a26      	ldr	r2, [pc, #152]	; (8001eb0 <HAL_I2S_MspInit+0xc4>)
 8001e18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1e:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <HAL_I2S_MspInit+0xc4>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <HAL_I2S_MspInit+0xc4>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a1f      	ldr	r2, [pc, #124]	; (8001eb0 <HAL_I2S_MspInit+0xc4>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b1d      	ldr	r3, [pc, #116]	; (8001eb0 <HAL_I2S_MspInit+0xc4>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <HAL_I2S_MspInit+0xc4>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a18      	ldr	r2, [pc, #96]	; (8001eb0 <HAL_I2S_MspInit+0xc4>)
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <HAL_I2S_MspInit+0xc4>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001e62:	2310      	movs	r3, #16
 8001e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e66:	2302      	movs	r3, #2
 8001e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e72:	2306      	movs	r3, #6
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001e76:	f107 0314 	add.w	r3, r7, #20
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	480d      	ldr	r0, [pc, #52]	; (8001eb4 <HAL_I2S_MspInit+0xc8>)
 8001e7e:	f000 fc0d 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001e82:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e90:	2300      	movs	r3, #0
 8001e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e94:	2306      	movs	r3, #6
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4806      	ldr	r0, [pc, #24]	; (8001eb8 <HAL_I2S_MspInit+0xcc>)
 8001ea0:	f000 fbfc 	bl	800269c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001ea4:	bf00      	nop
 8001ea6:	3728      	adds	r7, #40	; 0x28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40003c00 	.word	0x40003c00
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40020000 	.word	0x40020000
 8001eb8:	40020800 	.word	0x40020800

08001ebc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0b      	ldr	r2, [pc, #44]	; (8001ef8 <HAL_RNG_MspInit+0x3c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d10d      	bne.n	8001eea <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <HAL_RNG_MspInit+0x40>)
 8001ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed6:	4a09      	ldr	r2, [pc, #36]	; (8001efc <HAL_RNG_MspInit+0x40>)
 8001ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001edc:	6353      	str	r3, [r2, #52]	; 0x34
 8001ede:	4b07      	ldr	r3, [pc, #28]	; (8001efc <HAL_RNG_MspInit+0x40>)
 8001ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001eea:	bf00      	nop
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	50060800 	.word	0x50060800
 8001efc:	40023800 	.word	0x40023800

08001f00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08c      	sub	sp, #48	; 0x30
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f08:	f107 031c 	add.w	r3, r7, #28
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a41      	ldr	r2, [pc, #260]	; (8002024 <HAL_SPI_MspInit+0x124>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d12c      	bne.n	8001f7c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
 8001f26:	4b40      	ldr	r3, [pc, #256]	; (8002028 <HAL_SPI_MspInit+0x128>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	4a3f      	ldr	r2, [pc, #252]	; (8002028 <HAL_SPI_MspInit+0x128>)
 8001f2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f30:	6453      	str	r3, [r2, #68]	; 0x44
 8001f32:	4b3d      	ldr	r3, [pc, #244]	; (8002028 <HAL_SPI_MspInit+0x128>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f3a:	61bb      	str	r3, [r7, #24]
 8001f3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	4b39      	ldr	r3, [pc, #228]	; (8002028 <HAL_SPI_MspInit+0x128>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a38      	ldr	r2, [pc, #224]	; (8002028 <HAL_SPI_MspInit+0x128>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b36      	ldr	r3, [pc, #216]	; (8002028 <HAL_SPI_MspInit+0x128>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001f5a:	23e0      	movs	r3, #224	; 0xe0
 8001f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f66:	2300      	movs	r3, #0
 8001f68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f6a:	2305      	movs	r3, #5
 8001f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6e:	f107 031c 	add.w	r3, r7, #28
 8001f72:	4619      	mov	r1, r3
 8001f74:	482d      	ldr	r0, [pc, #180]	; (800202c <HAL_SPI_MspInit+0x12c>)
 8001f76:	f000 fb91 	bl	800269c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001f7a:	e04f      	b.n	800201c <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a2b      	ldr	r2, [pc, #172]	; (8002030 <HAL_SPI_MspInit+0x130>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d14a      	bne.n	800201c <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	4b27      	ldr	r3, [pc, #156]	; (8002028 <HAL_SPI_MspInit+0x128>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	4a26      	ldr	r2, [pc, #152]	; (8002028 <HAL_SPI_MspInit+0x128>)
 8001f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f94:	6413      	str	r3, [r2, #64]	; 0x40
 8001f96:	4b24      	ldr	r3, [pc, #144]	; (8002028 <HAL_SPI_MspInit+0x128>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	4b20      	ldr	r3, [pc, #128]	; (8002028 <HAL_SPI_MspInit+0x128>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	4a1f      	ldr	r2, [pc, #124]	; (8002028 <HAL_SPI_MspInit+0x128>)
 8001fac:	f043 0304 	orr.w	r3, r3, #4
 8001fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb2:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <HAL_SPI_MspInit+0x128>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	4b19      	ldr	r3, [pc, #100]	; (8002028 <HAL_SPI_MspInit+0x128>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a18      	ldr	r2, [pc, #96]	; (8002028 <HAL_SPI_MspInit+0x128>)
 8001fc8:	f043 0302 	orr.w	r3, r3, #2
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fce:	4b16      	ldr	r3, [pc, #88]	; (8002028 <HAL_SPI_MspInit+0x128>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fda:	2304      	movs	r3, #4
 8001fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fea:	2305      	movs	r3, #5
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fee:	f107 031c 	add.w	r3, r7, #28
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	480f      	ldr	r0, [pc, #60]	; (8002034 <HAL_SPI_MspInit+0x134>)
 8001ff6:	f000 fb51 	bl	800269c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001ffa:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	2302      	movs	r3, #2
 8002002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002008:	2303      	movs	r3, #3
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800200c:	2305      	movs	r3, #5
 800200e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002010:	f107 031c 	add.w	r3, r7, #28
 8002014:	4619      	mov	r1, r3
 8002016:	4808      	ldr	r0, [pc, #32]	; (8002038 <HAL_SPI_MspInit+0x138>)
 8002018:	f000 fb40 	bl	800269c <HAL_GPIO_Init>
}
 800201c:	bf00      	nop
 800201e:	3730      	adds	r7, #48	; 0x30
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40013000 	.word	0x40013000
 8002028:	40023800 	.word	0x40023800
 800202c:	40020000 	.word	0x40020000
 8002030:	40003800 	.word	0x40003800
 8002034:	40020800 	.word	0x40020800
 8002038:	40020400 	.word	0x40020400

0800203c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08a      	sub	sp, #40	; 0x28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a19      	ldr	r2, [pc, #100]	; (80020c0 <HAL_TIM_Encoder_MspInit+0x84>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d12c      	bne.n	80020b8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	4a17      	ldr	r2, [pc, #92]	; (80020c4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6453      	str	r3, [r2, #68]	; 0x44
 800206e:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a10      	ldr	r2, [pc, #64]	; (80020c4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002084:	f043 0310 	orr.w	r3, r3, #16
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <HAL_TIM_Encoder_MspInit+0x88>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002096:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800209a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020a0:	2301      	movs	r3, #1
 80020a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a4:	2300      	movs	r3, #0
 80020a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020a8:	2301      	movs	r3, #1
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	4619      	mov	r1, r3
 80020b2:	4805      	ldr	r0, [pc, #20]	; (80020c8 <HAL_TIM_Encoder_MspInit+0x8c>)
 80020b4:	f000 faf2 	bl	800269c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80020b8:	bf00      	nop
 80020ba:	3728      	adds	r7, #40	; 0x28
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40010000 	.word	0x40010000
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40021000 	.word	0x40021000

080020cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020dc:	d10e      	bne.n	80020fc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	4b16      	ldr	r3, [pc, #88]	; (800213c <HAL_TIM_Base_MspInit+0x70>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a15      	ldr	r2, [pc, #84]	; (800213c <HAL_TIM_Base_MspInit+0x70>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
 80020ee:	4b13      	ldr	r3, [pc, #76]	; (800213c <HAL_TIM_Base_MspInit+0x70>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80020fa:	e01a      	b.n	8002132 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a0f      	ldr	r2, [pc, #60]	; (8002140 <HAL_TIM_Base_MspInit+0x74>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d115      	bne.n	8002132 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	4b0c      	ldr	r3, [pc, #48]	; (800213c <HAL_TIM_Base_MspInit+0x70>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	4a0b      	ldr	r2, [pc, #44]	; (800213c <HAL_TIM_Base_MspInit+0x70>)
 8002110:	f043 0302 	orr.w	r3, r3, #2
 8002114:	6413      	str	r3, [r2, #64]	; 0x40
 8002116:	4b09      	ldr	r3, [pc, #36]	; (800213c <HAL_TIM_Base_MspInit+0x70>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002122:	2200      	movs	r2, #0
 8002124:	2100      	movs	r1, #0
 8002126:	201d      	movs	r0, #29
 8002128:	f000 fa81 	bl	800262e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800212c:	201d      	movs	r0, #29
 800212e:	f000 fa9a 	bl	8002666 <HAL_NVIC_EnableIRQ>
}
 8002132:	bf00      	nop
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40023800 	.word	0x40023800
 8002140:	40000400 	.word	0x40000400

08002144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002148:	e7fe      	b.n	8002148 <NMI_Handler+0x4>

0800214a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800214e:	e7fe      	b.n	800214e <HardFault_Handler+0x4>

08002150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002154:	e7fe      	b.n	8002154 <MemManage_Handler+0x4>

08002156 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800215a:	e7fe      	b.n	800215a <BusFault_Handler+0x4>

0800215c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002160:	e7fe      	b.n	8002160 <UsageFault_Handler+0x4>

08002162 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002190:	f000 f92e 	bl	80023f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}

08002198 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
	...

080021a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 80021ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021b0:	481b      	ldr	r0, [pc, #108]	; (8002220 <TIM2_IRQHandler+0x78>)
 80021b2:	f000 fc40 	bl	8002a36 <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 80021b6:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <TIM2_IRQHandler+0x7c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d111      	bne.n	80021e2 <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 80021be:	4b1a      	ldr	r3, [pc, #104]	; (8002228 <TIM2_IRQHandler+0x80>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2bc8      	cmp	r3, #200	; 0xc8
 80021c4:	dc0a      	bgt.n	80021dc <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 80021c6:	4b18      	ldr	r3, [pc, #96]	; (8002228 <TIM2_IRQHandler+0x80>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	4b18      	ldr	r3, [pc, #96]	; (800222c <TIM2_IRQHandler+0x84>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 80021d0:	4b15      	ldr	r3, [pc, #84]	; (8002228 <TIM2_IRQHandler+0x80>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	3301      	adds	r3, #1
 80021d6:	4a14      	ldr	r2, [pc, #80]	; (8002228 <TIM2_IRQHandler+0x80>)
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e002      	b.n	80021e2 <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 80021dc:	4b11      	ldr	r3, [pc, #68]	; (8002224 <TIM2_IRQHandler+0x7c>)
 80021de:	2201      	movs	r2, #1
 80021e0:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 80021e2:	4b10      	ldr	r3, [pc, #64]	; (8002224 <TIM2_IRQHandler+0x7c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d114      	bne.n	8002214 <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <TIM2_IRQHandler+0x80>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2b63      	cmp	r3, #99	; 0x63
 80021f0:	dd0a      	ble.n	8002208 <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 80021f2:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <TIM2_IRQHandler+0x80>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	4b0d      	ldr	r3, [pc, #52]	; (800222c <TIM2_IRQHandler+0x84>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <TIM2_IRQHandler+0x80>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	3b01      	subs	r3, #1
 8002202:	4a09      	ldr	r2, [pc, #36]	; (8002228 <TIM2_IRQHandler+0x80>)
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	e005      	b.n	8002214 <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <TIM2_IRQHandler+0x7c>)
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
		  i = 100;
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <TIM2_IRQHandler+0x80>)
 8002210:	2264      	movs	r2, #100	; 0x64
 8002212:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002214:	4805      	ldr	r0, [pc, #20]	; (800222c <TIM2_IRQHandler+0x84>)
 8002216:	f004 fa26 	bl	8006666 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40020c00 	.word	0x40020c00
 8002224:	200000b4 	.word	0x200000b4
 8002228:	20000004 	.word	0x20000004
 800222c:	20000240 	.word	0x20000240

08002230 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8002234:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002238:	4804      	ldr	r0, [pc, #16]	; (800224c <TIM3_IRQHandler+0x1c>)
 800223a:	f000 fbfc 	bl	8002a36 <HAL_GPIO_TogglePin>
  read_digits();
 800223e:	f7fe ff39 	bl	80010b4 <read_digits>

	//keyboard_test();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002242:	4803      	ldr	r0, [pc, #12]	; (8002250 <TIM3_IRQHandler+0x20>)
 8002244:	f004 fa0f 	bl	8006666 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40020c00 	.word	0x40020c00
 8002250:	20000148 	.word	0x20000148

08002254 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002258:	4802      	ldr	r0, [pc, #8]	; (8002264 <OTG_FS_IRQHandler+0x10>)
 800225a:	f000 fe71 	bl	8002f40 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	200006ac 	.word	0x200006ac

08002268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002270:	4a14      	ldr	r2, [pc, #80]	; (80022c4 <_sbrk+0x5c>)
 8002272:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <_sbrk+0x60>)
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800227c:	4b13      	ldr	r3, [pc, #76]	; (80022cc <_sbrk+0x64>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d102      	bne.n	800228a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <_sbrk+0x64>)
 8002286:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <_sbrk+0x68>)
 8002288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <_sbrk+0x64>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	429a      	cmp	r2, r3
 8002296:	d207      	bcs.n	80022a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002298:	f008 f9aa 	bl	800a5f0 <__errno>
 800229c:	4603      	mov	r3, r0
 800229e:	220c      	movs	r2, #12
 80022a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022a6:	e009      	b.n	80022bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <_sbrk+0x64>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ae:	4b07      	ldr	r3, [pc, #28]	; (80022cc <_sbrk+0x64>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	4a05      	ldr	r2, [pc, #20]	; (80022cc <_sbrk+0x64>)
 80022b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ba:	68fb      	ldr	r3, [r7, #12]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20020000 	.word	0x20020000
 80022c8:	00000400 	.word	0x00000400
 80022cc:	200000b8 	.word	0x200000b8
 80022d0:	200009c0 	.word	0x200009c0

080022d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <SystemInit+0x20>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	4a05      	ldr	r2, [pc, #20]	; (80022f4 <SystemInit+0x20>)
 80022e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80022f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002330 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022fc:	480d      	ldr	r0, [pc, #52]	; (8002334 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022fe:	490e      	ldr	r1, [pc, #56]	; (8002338 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002300:	4a0e      	ldr	r2, [pc, #56]	; (800233c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002304:	e002      	b.n	800230c <LoopCopyDataInit>

08002306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800230a:	3304      	adds	r3, #4

0800230c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800230c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800230e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002310:	d3f9      	bcc.n	8002306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002312:	4a0b      	ldr	r2, [pc, #44]	; (8002340 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002314:	4c0b      	ldr	r4, [pc, #44]	; (8002344 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002318:	e001      	b.n	800231e <LoopFillZerobss>

0800231a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800231a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800231c:	3204      	adds	r2, #4

0800231e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800231e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002320:	d3fb      	bcc.n	800231a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002322:	f7ff ffd7 	bl	80022d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002326:	f008 f969 	bl	800a5fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800232a:	f7ff f8c9 	bl	80014c0 <main>
  bx  lr    
 800232e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002330:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002338:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800233c:	0800b1cc 	.word	0x0800b1cc
  ldr r2, =_sbss
 8002340:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002344:	200009c0 	.word	0x200009c0

08002348 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002348:	e7fe      	b.n	8002348 <ADC_IRQHandler>
	...

0800234c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002350:	4b0e      	ldr	r3, [pc, #56]	; (800238c <HAL_Init+0x40>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0d      	ldr	r2, [pc, #52]	; (800238c <HAL_Init+0x40>)
 8002356:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800235a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <HAL_Init+0x40>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a0a      	ldr	r2, [pc, #40]	; (800238c <HAL_Init+0x40>)
 8002362:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002366:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002368:	4b08      	ldr	r3, [pc, #32]	; (800238c <HAL_Init+0x40>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a07      	ldr	r2, [pc, #28]	; (800238c <HAL_Init+0x40>)
 800236e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002372:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002374:	2003      	movs	r0, #3
 8002376:	f000 f94f 	bl	8002618 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800237a:	2000      	movs	r0, #0
 800237c:	f000 f808 	bl	8002390 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002380:	f7ff fd04 	bl	8001d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40023c00 	.word	0x40023c00

08002390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002398:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <HAL_InitTick+0x54>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <HAL_InitTick+0x58>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	4619      	mov	r1, r3
 80023a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f967 	bl	8002682 <HAL_SYSTICK_Config>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e00e      	b.n	80023dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b0f      	cmp	r3, #15
 80023c2:	d80a      	bhi.n	80023da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023c4:	2200      	movs	r2, #0
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023cc:	f000 f92f 	bl	800262e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023d0:	4a06      	ldr	r2, [pc, #24]	; (80023ec <HAL_InitTick+0x5c>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	e000      	b.n	80023dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20000008 	.word	0x20000008
 80023e8:	20000010 	.word	0x20000010
 80023ec:	2000000c 	.word	0x2000000c

080023f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_IncTick+0x20>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_IncTick+0x24>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	4a04      	ldr	r2, [pc, #16]	; (8002414 <HAL_IncTick+0x24>)
 8002402:	6013      	str	r3, [r2, #0]
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000010 	.word	0x20000010
 8002414:	200002d0 	.word	0x200002d0

08002418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return uwTick;
 800241c:	4b03      	ldr	r3, [pc, #12]	; (800242c <HAL_GetTick+0x14>)
 800241e:	681b      	ldr	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	200002d0 	.word	0x200002d0

08002430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002438:	f7ff ffee 	bl	8002418 <HAL_GetTick>
 800243c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002448:	d005      	beq.n	8002456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <HAL_Delay+0x44>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4413      	add	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002456:	bf00      	nop
 8002458:	f7ff ffde 	bl	8002418 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	429a      	cmp	r2, r3
 8002466:	d8f7      	bhi.n	8002458 <HAL_Delay+0x28>
  {
  }
}
 8002468:	bf00      	nop
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000010 	.word	0x20000010

08002478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <__NVIC_SetPriorityGrouping+0x44>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002494:	4013      	ands	r3, r2
 8002496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024aa:	4a04      	ldr	r2, [pc, #16]	; (80024bc <__NVIC_SetPriorityGrouping+0x44>)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	60d3      	str	r3, [r2, #12]
}
 80024b0:	bf00      	nop
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <__NVIC_GetPriorityGrouping+0x18>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	0a1b      	lsrs	r3, r3, #8
 80024ca:	f003 0307 	and.w	r3, r3, #7
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	db0b      	blt.n	8002506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	f003 021f 	and.w	r2, r3, #31
 80024f4:	4907      	ldr	r1, [pc, #28]	; (8002514 <__NVIC_EnableIRQ+0x38>)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	2001      	movs	r0, #1
 80024fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000e100 	.word	0xe000e100

08002518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	6039      	str	r1, [r7, #0]
 8002522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002528:	2b00      	cmp	r3, #0
 800252a:	db0a      	blt.n	8002542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	b2da      	uxtb	r2, r3
 8002530:	490c      	ldr	r1, [pc, #48]	; (8002564 <__NVIC_SetPriority+0x4c>)
 8002532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002536:	0112      	lsls	r2, r2, #4
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	440b      	add	r3, r1
 800253c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002540:	e00a      	b.n	8002558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	b2da      	uxtb	r2, r3
 8002546:	4908      	ldr	r1, [pc, #32]	; (8002568 <__NVIC_SetPriority+0x50>)
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	3b04      	subs	r3, #4
 8002550:	0112      	lsls	r2, r2, #4
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	440b      	add	r3, r1
 8002556:	761a      	strb	r2, [r3, #24]
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000e100 	.word	0xe000e100
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800256c:	b480      	push	{r7}
 800256e:	b089      	sub	sp, #36	; 0x24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f1c3 0307 	rsb	r3, r3, #7
 8002586:	2b04      	cmp	r3, #4
 8002588:	bf28      	it	cs
 800258a:	2304      	movcs	r3, #4
 800258c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3304      	adds	r3, #4
 8002592:	2b06      	cmp	r3, #6
 8002594:	d902      	bls.n	800259c <NVIC_EncodePriority+0x30>
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3b03      	subs	r3, #3
 800259a:	e000      	b.n	800259e <NVIC_EncodePriority+0x32>
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43da      	mvns	r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	401a      	ands	r2, r3
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	43d9      	mvns	r1, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c4:	4313      	orrs	r3, r2
         );
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3724      	adds	r7, #36	; 0x24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
	...

080025d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3b01      	subs	r3, #1
 80025e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025e4:	d301      	bcc.n	80025ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025e6:	2301      	movs	r3, #1
 80025e8:	e00f      	b.n	800260a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ea:	4a0a      	ldr	r2, [pc, #40]	; (8002614 <SysTick_Config+0x40>)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025f2:	210f      	movs	r1, #15
 80025f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025f8:	f7ff ff8e 	bl	8002518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <SysTick_Config+0x40>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002602:	4b04      	ldr	r3, [pc, #16]	; (8002614 <SysTick_Config+0x40>)
 8002604:	2207      	movs	r2, #7
 8002606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	e000e010 	.word	0xe000e010

08002618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff ff29 	bl	8002478 <__NVIC_SetPriorityGrouping>
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800262e:	b580      	push	{r7, lr}
 8002630:	b086      	sub	sp, #24
 8002632:	af00      	add	r7, sp, #0
 8002634:	4603      	mov	r3, r0
 8002636:	60b9      	str	r1, [r7, #8]
 8002638:	607a      	str	r2, [r7, #4]
 800263a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002640:	f7ff ff3e 	bl	80024c0 <__NVIC_GetPriorityGrouping>
 8002644:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	6978      	ldr	r0, [r7, #20]
 800264c:	f7ff ff8e 	bl	800256c <NVIC_EncodePriority>
 8002650:	4602      	mov	r2, r0
 8002652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff5d 	bl	8002518 <__NVIC_SetPriority>
}
 800265e:	bf00      	nop
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	4603      	mov	r3, r0
 800266e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff31 	bl	80024dc <__NVIC_EnableIRQ>
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff ffa2 	bl	80025d4 <SysTick_Config>
 8002690:	4603      	mov	r3, r0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800269c:	b480      	push	{r7}
 800269e:	b089      	sub	sp, #36	; 0x24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
 80026b6:	e16b      	b.n	8002990 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026b8:	2201      	movs	r2, #1
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	f040 815a 	bne.w	800298a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d005      	beq.n	80026ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d130      	bne.n	8002750 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	2203      	movs	r2, #3
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002724:	2201      	movs	r2, #1
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 0201 	and.w	r2, r3, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	2b03      	cmp	r3, #3
 800275a:	d017      	beq.n	800278c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	2203      	movs	r2, #3
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d123      	bne.n	80027e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	08da      	lsrs	r2, r3, #3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3208      	adds	r2, #8
 80027a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	220f      	movs	r2, #15
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	08da      	lsrs	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3208      	adds	r2, #8
 80027da:	69b9      	ldr	r1, [r7, #24]
 80027dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	2203      	movs	r2, #3
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 0203 	and.w	r2, r3, #3
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80b4 	beq.w	800298a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	4b60      	ldr	r3, [pc, #384]	; (80029a8 <HAL_GPIO_Init+0x30c>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	4a5f      	ldr	r2, [pc, #380]	; (80029a8 <HAL_GPIO_Init+0x30c>)
 800282c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002830:	6453      	str	r3, [r2, #68]	; 0x44
 8002832:	4b5d      	ldr	r3, [pc, #372]	; (80029a8 <HAL_GPIO_Init+0x30c>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800283e:	4a5b      	ldr	r2, [pc, #364]	; (80029ac <HAL_GPIO_Init+0x310>)
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	089b      	lsrs	r3, r3, #2
 8002844:	3302      	adds	r3, #2
 8002846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	220f      	movs	r2, #15
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43db      	mvns	r3, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4013      	ands	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a52      	ldr	r2, [pc, #328]	; (80029b0 <HAL_GPIO_Init+0x314>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d02b      	beq.n	80028c2 <HAL_GPIO_Init+0x226>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a51      	ldr	r2, [pc, #324]	; (80029b4 <HAL_GPIO_Init+0x318>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d025      	beq.n	80028be <HAL_GPIO_Init+0x222>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a50      	ldr	r2, [pc, #320]	; (80029b8 <HAL_GPIO_Init+0x31c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d01f      	beq.n	80028ba <HAL_GPIO_Init+0x21e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a4f      	ldr	r2, [pc, #316]	; (80029bc <HAL_GPIO_Init+0x320>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d019      	beq.n	80028b6 <HAL_GPIO_Init+0x21a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a4e      	ldr	r2, [pc, #312]	; (80029c0 <HAL_GPIO_Init+0x324>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <HAL_GPIO_Init+0x216>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4d      	ldr	r2, [pc, #308]	; (80029c4 <HAL_GPIO_Init+0x328>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00d      	beq.n	80028ae <HAL_GPIO_Init+0x212>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a4c      	ldr	r2, [pc, #304]	; (80029c8 <HAL_GPIO_Init+0x32c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d007      	beq.n	80028aa <HAL_GPIO_Init+0x20e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a4b      	ldr	r2, [pc, #300]	; (80029cc <HAL_GPIO_Init+0x330>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d101      	bne.n	80028a6 <HAL_GPIO_Init+0x20a>
 80028a2:	2307      	movs	r3, #7
 80028a4:	e00e      	b.n	80028c4 <HAL_GPIO_Init+0x228>
 80028a6:	2308      	movs	r3, #8
 80028a8:	e00c      	b.n	80028c4 <HAL_GPIO_Init+0x228>
 80028aa:	2306      	movs	r3, #6
 80028ac:	e00a      	b.n	80028c4 <HAL_GPIO_Init+0x228>
 80028ae:	2305      	movs	r3, #5
 80028b0:	e008      	b.n	80028c4 <HAL_GPIO_Init+0x228>
 80028b2:	2304      	movs	r3, #4
 80028b4:	e006      	b.n	80028c4 <HAL_GPIO_Init+0x228>
 80028b6:	2303      	movs	r3, #3
 80028b8:	e004      	b.n	80028c4 <HAL_GPIO_Init+0x228>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e002      	b.n	80028c4 <HAL_GPIO_Init+0x228>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <HAL_GPIO_Init+0x228>
 80028c2:	2300      	movs	r3, #0
 80028c4:	69fa      	ldr	r2, [r7, #28]
 80028c6:	f002 0203 	and.w	r2, r2, #3
 80028ca:	0092      	lsls	r2, r2, #2
 80028cc:	4093      	lsls	r3, r2
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028d4:	4935      	ldr	r1, [pc, #212]	; (80029ac <HAL_GPIO_Init+0x310>)
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	089b      	lsrs	r3, r3, #2
 80028da:	3302      	adds	r3, #2
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028e2:	4b3b      	ldr	r3, [pc, #236]	; (80029d0 <HAL_GPIO_Init+0x334>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002906:	4a32      	ldr	r2, [pc, #200]	; (80029d0 <HAL_GPIO_Init+0x334>)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800290c:	4b30      	ldr	r3, [pc, #192]	; (80029d0 <HAL_GPIO_Init+0x334>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002930:	4a27      	ldr	r2, [pc, #156]	; (80029d0 <HAL_GPIO_Init+0x334>)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002936:	4b26      	ldr	r3, [pc, #152]	; (80029d0 <HAL_GPIO_Init+0x334>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	43db      	mvns	r3, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4013      	ands	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800295a:	4a1d      	ldr	r2, [pc, #116]	; (80029d0 <HAL_GPIO_Init+0x334>)
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002960:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <HAL_GPIO_Init+0x334>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002984:	4a12      	ldr	r2, [pc, #72]	; (80029d0 <HAL_GPIO_Init+0x334>)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3301      	adds	r3, #1
 800298e:	61fb      	str	r3, [r7, #28]
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	2b0f      	cmp	r3, #15
 8002994:	f67f ae90 	bls.w	80026b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002998:	bf00      	nop
 800299a:	bf00      	nop
 800299c:	3724      	adds	r7, #36	; 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40013800 	.word	0x40013800
 80029b0:	40020000 	.word	0x40020000
 80029b4:	40020400 	.word	0x40020400
 80029b8:	40020800 	.word	0x40020800
 80029bc:	40020c00 	.word	0x40020c00
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40021400 	.word	0x40021400
 80029c8:	40021800 	.word	0x40021800
 80029cc:	40021c00 	.word	0x40021c00
 80029d0:	40013c00 	.word	0x40013c00

080029d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	887b      	ldrh	r3, [r7, #2]
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029ec:	2301      	movs	r3, #1
 80029ee:	73fb      	strb	r3, [r7, #15]
 80029f0:	e001      	b.n	80029f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029f2:	2300      	movs	r3, #0
 80029f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	807b      	strh	r3, [r7, #2]
 8002a10:	4613      	mov	r3, r2
 8002a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a14:	787b      	ldrb	r3, [r7, #1]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a1a:	887a      	ldrh	r2, [r7, #2]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a20:	e003      	b.n	8002a2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a22:	887b      	ldrh	r3, [r7, #2]
 8002a24:	041a      	lsls	r2, r3, #16
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	619a      	str	r2, [r3, #24]
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b085      	sub	sp, #20
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	460b      	mov	r3, r1
 8002a40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a48:	887a      	ldrh	r2, [r7, #2]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	041a      	lsls	r2, r3, #16
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	43d9      	mvns	r1, r3
 8002a54:	887b      	ldrh	r3, [r7, #2]
 8002a56:	400b      	ands	r3, r1
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	619a      	str	r2, [r3, #24]
}
 8002a5e:	bf00      	nop
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002a6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a6c:	b08f      	sub	sp, #60	; 0x3c
 8002a6e:	af0a      	add	r7, sp, #40	; 0x28
 8002a70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e054      	b.n	8002b26 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f007 fb00 	bl	800a09c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d102      	bne.n	8002ab6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f004 fca2 	bl	8007404 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	603b      	str	r3, [r7, #0]
 8002ac6:	687e      	ldr	r6, [r7, #4]
 8002ac8:	466d      	mov	r5, sp
 8002aca:	f106 0410 	add.w	r4, r6, #16
 8002ace:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ad6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ada:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ade:	1d33      	adds	r3, r6, #4
 8002ae0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ae2:	6838      	ldr	r0, [r7, #0]
 8002ae4:	f004 fc1c 	bl	8007320 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2101      	movs	r1, #1
 8002aee:	4618      	mov	r0, r3
 8002af0:	f004 fc99 	bl	8007426 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	603b      	str	r3, [r7, #0]
 8002afa:	687e      	ldr	r6, [r7, #4]
 8002afc:	466d      	mov	r5, sp
 8002afe:	f106 0410 	add.w	r4, r6, #16
 8002b02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b12:	1d33      	adds	r3, r6, #4
 8002b14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b16:	6838      	ldr	r0, [r7, #0]
 8002b18:	f004 fdac 	bl	8007674 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b2e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002b2e:	b590      	push	{r4, r7, lr}
 8002b30:	b089      	sub	sp, #36	; 0x24
 8002b32:	af04      	add	r7, sp, #16
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	4608      	mov	r0, r1
 8002b38:	4611      	mov	r1, r2
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	70fb      	strb	r3, [r7, #3]
 8002b40:	460b      	mov	r3, r1
 8002b42:	70bb      	strb	r3, [r7, #2]
 8002b44:	4613      	mov	r3, r2
 8002b46:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_HCD_HC_Init+0x28>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e076      	b.n	8002c44 <HAL_HCD_HC_Init+0x116>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	212c      	movs	r1, #44	; 0x2c
 8002b64:	fb01 f303 	mul.w	r3, r1, r3
 8002b68:	4413      	add	r3, r2
 8002b6a:	333d      	adds	r3, #61	; 0x3d
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3338      	adds	r3, #56	; 0x38
 8002b7e:	787a      	ldrb	r2, [r7, #1]
 8002b80:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002b82:	78fb      	ldrb	r3, [r7, #3]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	212c      	movs	r1, #44	; 0x2c
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3340      	adds	r3, #64	; 0x40
 8002b90:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002b92:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002b94:	78fb      	ldrb	r3, [r7, #3]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	212c      	movs	r1, #44	; 0x2c
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3339      	adds	r3, #57	; 0x39
 8002ba2:	78fa      	ldrb	r2, [r7, #3]
 8002ba4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002ba6:	78fb      	ldrb	r3, [r7, #3]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	212c      	movs	r1, #44	; 0x2c
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	333f      	adds	r3, #63	; 0x3f
 8002bb4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002bb8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002bba:	78fb      	ldrb	r3, [r7, #3]
 8002bbc:	78ba      	ldrb	r2, [r7, #2]
 8002bbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bc2:	b2d0      	uxtb	r0, r2
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	212c      	movs	r1, #44	; 0x2c
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	333a      	adds	r3, #58	; 0x3a
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002bd4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	da09      	bge.n	8002bf0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	212c      	movs	r1, #44	; 0x2c
 8002be2:	fb01 f303 	mul.w	r3, r1, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	333b      	adds	r3, #59	; 0x3b
 8002bea:	2201      	movs	r2, #1
 8002bec:	701a      	strb	r2, [r3, #0]
 8002bee:	e008      	b.n	8002c02 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	212c      	movs	r1, #44	; 0x2c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	333b      	adds	r3, #59	; 0x3b
 8002bfe:	2200      	movs	r2, #0
 8002c00:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	212c      	movs	r1, #44	; 0x2c
 8002c08:	fb01 f303 	mul.w	r3, r1, r3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	333c      	adds	r3, #60	; 0x3c
 8002c10:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002c14:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	787c      	ldrb	r4, [r7, #1]
 8002c1c:	78ba      	ldrb	r2, [r7, #2]
 8002c1e:	78f9      	ldrb	r1, [r7, #3]
 8002c20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002c22:	9302      	str	r3, [sp, #8]
 8002c24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c28:	9301      	str	r3, [sp, #4]
 8002c2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	4623      	mov	r3, r4
 8002c32:	f004 fea1 	bl	8007978 <USB_HC_Init>
 8002c36:	4603      	mov	r3, r0
 8002c38:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd90      	pop	{r4, r7, pc}

08002c4c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_HCD_HC_Halt+0x1e>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e00f      	b.n	8002c8a <HAL_HCD_HC_Halt+0x3e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	4611      	mov	r1, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f005 f8dd 	bl	8007e3a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	4608      	mov	r0, r1
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	70fb      	strb	r3, [r7, #3]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	70bb      	strb	r3, [r7, #2]
 8002caa:	4613      	mov	r3, r2
 8002cac:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	212c      	movs	r1, #44	; 0x2c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	333b      	adds	r3, #59	; 0x3b
 8002cbc:	78ba      	ldrb	r2, [r7, #2]
 8002cbe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002cc0:	78fb      	ldrb	r3, [r7, #3]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	212c      	movs	r1, #44	; 0x2c
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	333f      	adds	r3, #63	; 0x3f
 8002cce:	787a      	ldrb	r2, [r7, #1]
 8002cd0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002cd2:	7c3b      	ldrb	r3, [r7, #16]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d112      	bne.n	8002cfe <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	212c      	movs	r1, #44	; 0x2c
 8002cde:	fb01 f303 	mul.w	r3, r1, r3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3342      	adds	r3, #66	; 0x42
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002cea:	78fb      	ldrb	r3, [r7, #3]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	212c      	movs	r1, #44	; 0x2c
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	333d      	adds	r3, #61	; 0x3d
 8002cf8:	7f3a      	ldrb	r2, [r7, #28]
 8002cfa:	701a      	strb	r2, [r3, #0]
 8002cfc:	e008      	b.n	8002d10 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	212c      	movs	r1, #44	; 0x2c
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	3342      	adds	r3, #66	; 0x42
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002d10:	787b      	ldrb	r3, [r7, #1]
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	f200 80c6 	bhi.w	8002ea4 <HAL_HCD_HC_SubmitRequest+0x210>
 8002d18:	a201      	add	r2, pc, #4	; (adr r2, 8002d20 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1e:	bf00      	nop
 8002d20:	08002d31 	.word	0x08002d31
 8002d24:	08002e91 	.word	0x08002e91
 8002d28:	08002d95 	.word	0x08002d95
 8002d2c:	08002e13 	.word	0x08002e13
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002d30:	7c3b      	ldrb	r3, [r7, #16]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	f040 80b8 	bne.w	8002ea8 <HAL_HCD_HC_SubmitRequest+0x214>
 8002d38:	78bb      	ldrb	r3, [r7, #2]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f040 80b4 	bne.w	8002ea8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002d40:	8b3b      	ldrh	r3, [r7, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d108      	bne.n	8002d58 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002d46:	78fb      	ldrb	r3, [r7, #3]
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	212c      	movs	r1, #44	; 0x2c
 8002d4c:	fb01 f303 	mul.w	r3, r1, r3
 8002d50:	4413      	add	r3, r2
 8002d52:	3355      	adds	r3, #85	; 0x55
 8002d54:	2201      	movs	r2, #1
 8002d56:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	3355      	adds	r3, #85	; 0x55
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d109      	bne.n	8002d80 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	212c      	movs	r1, #44	; 0x2c
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	3342      	adds	r3, #66	; 0x42
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d7e:	e093      	b.n	8002ea8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	212c      	movs	r1, #44	; 0x2c
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3342      	adds	r3, #66	; 0x42
 8002d8e:	2202      	movs	r2, #2
 8002d90:	701a      	strb	r2, [r3, #0]
      break;
 8002d92:	e089      	b.n	8002ea8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002d94:	78bb      	ldrb	r3, [r7, #2]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d11d      	bne.n	8002dd6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	212c      	movs	r1, #44	; 0x2c
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	4413      	add	r3, r2
 8002da6:	3355      	adds	r3, #85	; 0x55
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d109      	bne.n	8002dc2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002dae:	78fb      	ldrb	r3, [r7, #3]
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	212c      	movs	r1, #44	; 0x2c
 8002db4:	fb01 f303 	mul.w	r3, r1, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	3342      	adds	r3, #66	; 0x42
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002dc0:	e073      	b.n	8002eaa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002dc2:	78fb      	ldrb	r3, [r7, #3]
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	212c      	movs	r1, #44	; 0x2c
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	3342      	adds	r3, #66	; 0x42
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	701a      	strb	r2, [r3, #0]
      break;
 8002dd4:	e069      	b.n	8002eaa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002dd6:	78fb      	ldrb	r3, [r7, #3]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	212c      	movs	r1, #44	; 0x2c
 8002ddc:	fb01 f303 	mul.w	r3, r1, r3
 8002de0:	4413      	add	r3, r2
 8002de2:	3354      	adds	r3, #84	; 0x54
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d109      	bne.n	8002dfe <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002dea:	78fb      	ldrb	r3, [r7, #3]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	212c      	movs	r1, #44	; 0x2c
 8002df0:	fb01 f303 	mul.w	r3, r1, r3
 8002df4:	4413      	add	r3, r2
 8002df6:	3342      	adds	r3, #66	; 0x42
 8002df8:	2200      	movs	r2, #0
 8002dfa:	701a      	strb	r2, [r3, #0]
      break;
 8002dfc:	e055      	b.n	8002eaa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002dfe:	78fb      	ldrb	r3, [r7, #3]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	212c      	movs	r1, #44	; 0x2c
 8002e04:	fb01 f303 	mul.w	r3, r1, r3
 8002e08:	4413      	add	r3, r2
 8002e0a:	3342      	adds	r3, #66	; 0x42
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	701a      	strb	r2, [r3, #0]
      break;
 8002e10:	e04b      	b.n	8002eaa <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002e12:	78bb      	ldrb	r3, [r7, #2]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d11d      	bne.n	8002e54 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	212c      	movs	r1, #44	; 0x2c
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	4413      	add	r3, r2
 8002e24:	3355      	adds	r3, #85	; 0x55
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d109      	bne.n	8002e40 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e2c:	78fb      	ldrb	r3, [r7, #3]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	212c      	movs	r1, #44	; 0x2c
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	3342      	adds	r3, #66	; 0x42
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002e3e:	e034      	b.n	8002eaa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e40:	78fb      	ldrb	r3, [r7, #3]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	212c      	movs	r1, #44	; 0x2c
 8002e46:	fb01 f303 	mul.w	r3, r1, r3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3342      	adds	r3, #66	; 0x42
 8002e4e:	2202      	movs	r2, #2
 8002e50:	701a      	strb	r2, [r3, #0]
      break;
 8002e52:	e02a      	b.n	8002eaa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	212c      	movs	r1, #44	; 0x2c
 8002e5a:	fb01 f303 	mul.w	r3, r1, r3
 8002e5e:	4413      	add	r3, r2
 8002e60:	3354      	adds	r3, #84	; 0x54
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d109      	bne.n	8002e7c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e68:	78fb      	ldrb	r3, [r7, #3]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	212c      	movs	r1, #44	; 0x2c
 8002e6e:	fb01 f303 	mul.w	r3, r1, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	3342      	adds	r3, #66	; 0x42
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]
      break;
 8002e7a:	e016      	b.n	8002eaa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e7c:	78fb      	ldrb	r3, [r7, #3]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	3342      	adds	r3, #66	; 0x42
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	701a      	strb	r2, [r3, #0]
      break;
 8002e8e:	e00c      	b.n	8002eaa <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	212c      	movs	r1, #44	; 0x2c
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3342      	adds	r3, #66	; 0x42
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	701a      	strb	r2, [r3, #0]
      break;
 8002ea2:	e002      	b.n	8002eaa <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002ea4:	bf00      	nop
 8002ea6:	e000      	b.n	8002eaa <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002ea8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	212c      	movs	r1, #44	; 0x2c
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3344      	adds	r3, #68	; 0x44
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	8b3a      	ldrh	r2, [r7, #24]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	202c      	movs	r0, #44	; 0x2c
 8002ec4:	fb00 f303 	mul.w	r3, r0, r3
 8002ec8:	440b      	add	r3, r1
 8002eca:	334c      	adds	r3, #76	; 0x4c
 8002ecc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	212c      	movs	r1, #44	; 0x2c
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	4413      	add	r3, r2
 8002eda:	3360      	adds	r3, #96	; 0x60
 8002edc:	2200      	movs	r2, #0
 8002ede:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002ee0:	78fb      	ldrb	r3, [r7, #3]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	212c      	movs	r1, #44	; 0x2c
 8002ee6:	fb01 f303 	mul.w	r3, r1, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	3350      	adds	r3, #80	; 0x50
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ef2:	78fb      	ldrb	r3, [r7, #3]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	212c      	movs	r1, #44	; 0x2c
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	4413      	add	r3, r2
 8002efe:	3339      	adds	r3, #57	; 0x39
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	212c      	movs	r1, #44	; 0x2c
 8002f0a:	fb01 f303 	mul.w	r3, r1, r3
 8002f0e:	4413      	add	r3, r2
 8002f10:	3361      	adds	r3, #97	; 0x61
 8002f12:	2200      	movs	r2, #0
 8002f14:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6818      	ldr	r0, [r3, #0]
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	222c      	movs	r2, #44	; 0x2c
 8002f1e:	fb02 f303 	mul.w	r3, r2, r3
 8002f22:	3338      	adds	r3, #56	; 0x38
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	18d1      	adds	r1, r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f004 fe30 	bl	8007b94 <USB_HC_StartXfer>
 8002f34:	4603      	mov	r3, r0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop

08002f40 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f004 fb49 	bl	80075ee <USB_GetMode>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	f040 80ef 	bne.w	8003142 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f004 fb2d 	bl	80075c8 <USB_ReadInterrupts>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 80e5 	beq.w	8003140 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f004 fb24 	bl	80075c8 <USB_ReadInterrupts>
 8002f80:	4603      	mov	r3, r0
 8002f82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f8a:	d104      	bne.n	8002f96 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002f94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f004 fb14 	bl	80075c8 <USB_ReadInterrupts>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002faa:	d104      	bne.n	8002fb6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002fb4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f004 fb04 	bl	80075c8 <USB_ReadInterrupts>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fca:	d104      	bne.n	8002fd6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002fd4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f004 faf4 	bl	80075c8 <USB_ReadInterrupts>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d103      	bne.n	8002ff2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2202      	movs	r2, #2
 8002ff0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f004 fae6 	bl	80075c8 <USB_ReadInterrupts>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003002:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003006:	d115      	bne.n	8003034 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003010:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d108      	bne.n	8003034 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f007 f8b8 	bl	800a198 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2101      	movs	r1, #1
 800302e:	4618      	mov	r0, r3
 8003030:	f004 fbdc 	bl	80077ec <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f004 fac5 	bl	80075c8 <USB_ReadInterrupts>
 800303e:	4603      	mov	r3, r0
 8003040:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003048:	d102      	bne.n	8003050 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f001 f9ff 	bl	800444e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f004 fab7 	bl	80075c8 <USB_ReadInterrupts>
 800305a:	4603      	mov	r3, r0
 800305c:	f003 0308 	and.w	r3, r3, #8
 8003060:	2b08      	cmp	r3, #8
 8003062:	d106      	bne.n	8003072 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f007 f87b 	bl	800a160 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2208      	movs	r2, #8
 8003070:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f004 faa6 	bl	80075c8 <USB_ReadInterrupts>
 800307c:	4603      	mov	r3, r0
 800307e:	f003 0310 	and.w	r3, r3, #16
 8003082:	2b10      	cmp	r3, #16
 8003084:	d101      	bne.n	800308a <HAL_HCD_IRQHandler+0x14a>
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <HAL_HCD_IRQHandler+0x14c>
 800308a:	2300      	movs	r3, #0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d012      	beq.n	80030b6 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699a      	ldr	r2, [r3, #24]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0210 	bic.w	r2, r2, #16
 800309e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f001 f902 	bl	80042aa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	699a      	ldr	r2, [r3, #24]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 0210 	orr.w	r2, r2, #16
 80030b4:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f004 fa84 	bl	80075c8 <USB_ReadInterrupts>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030ca:	d13a      	bne.n	8003142 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f004 fea1 	bl	8007e18 <USB_HC_ReadInterrupt>
 80030d6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	e025      	b.n	800312a <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d018      	beq.n	8003124 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003108:	d106      	bne.n	8003118 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	4619      	mov	r1, r3
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f8ab 	bl	800326c <HCD_HC_IN_IRQHandler>
 8003116:	e005      	b.n	8003124 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	4619      	mov	r1, r3
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fcc6 	bl	8003ab0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	3301      	adds	r3, #1
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	429a      	cmp	r2, r3
 8003132:	d3d4      	bcc.n	80030de <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800313c:	615a      	str	r2, [r3, #20]
 800313e:	e000      	b.n	8003142 <HAL_HCD_IRQHandler+0x202>
      return;
 8003140:	bf00      	nop
    }
  }
}
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003156:	2b01      	cmp	r3, #1
 8003158:	d101      	bne.n	800315e <HAL_HCD_Start+0x16>
 800315a:	2302      	movs	r3, #2
 800315c:	e013      	b.n	8003186 <HAL_HCD_Start+0x3e>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f004 f939 	bl	80073e2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2101      	movs	r1, #1
 8003176:	4618      	mov	r0, r3
 8003178:	f004 fb9c 	bl	80078b4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_HCD_Stop+0x16>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e00d      	b.n	80031c0 <HAL_HCD_Stop+0x32>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f004 ff9b 	bl	80080ec <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f004 fb43 	bl	8007860 <USB_ResetPort>
 80031da:	4603      	mov	r3, r0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80031f0:	78fb      	ldrb	r3, [r7, #3]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	212c      	movs	r1, #44	; 0x2c
 80031f6:	fb01 f303 	mul.w	r3, r1, r3
 80031fa:	4413      	add	r3, r2
 80031fc:	3360      	adds	r3, #96	; 0x60
 80031fe:	781b      	ldrb	r3, [r3, #0]
}
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	212c      	movs	r1, #44	; 0x2c
 800321e:	fb01 f303 	mul.w	r3, r1, r3
 8003222:	4413      	add	r3, r2
 8003224:	3350      	adds	r3, #80	; 0x50
 8003226:	681b      	ldr	r3, [r3, #0]
}
 8003228:	4618      	mov	r0, r3
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f004 fb87 	bl	8007954 <USB_GetCurrentFrame>
 8003246:	4603      	mov	r3, r0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f004 fb62 	bl	8007926 <USB_GetHostSpeed>
 8003262:	4603      	mov	r3, r0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4413      	add	r3, r2
 800328e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b04      	cmp	r3, #4
 800329a:	d119      	bne.n	80032d0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a8:	461a      	mov	r2, r3
 80032aa:	2304      	movs	r3, #4
 80032ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	0151      	lsls	r1, r2, #5
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	440a      	add	r2, r1
 80032c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032c8:	f043 0302 	orr.w	r3, r3, #2
 80032cc:	60d3      	str	r3, [r2, #12]
 80032ce:	e101      	b.n	80034d4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032e6:	d12b      	bne.n	8003340 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f4:	461a      	mov	r2, r3
 80032f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	212c      	movs	r1, #44	; 0x2c
 8003302:	fb01 f303 	mul.w	r3, r1, r3
 8003306:	4413      	add	r3, r2
 8003308:	3361      	adds	r3, #97	; 0x61
 800330a:	2207      	movs	r2, #7
 800330c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	015a      	lsls	r2, r3, #5
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	4413      	add	r3, r2
 8003316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	0151      	lsls	r1, r2, #5
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	440a      	add	r2, r1
 8003324:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003328:	f043 0302 	orr.w	r3, r3, #2
 800332c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	4611      	mov	r1, r2
 8003338:	4618      	mov	r0, r3
 800333a:	f004 fd7e 	bl	8007e3a <USB_HC_Halt>
 800333e:	e0c9      	b.n	80034d4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	4413      	add	r3, r2
 8003348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b20      	cmp	r3, #32
 8003354:	d109      	bne.n	800336a <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	015a      	lsls	r2, r3, #5
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4413      	add	r3, r2
 800335e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003362:	461a      	mov	r2, r3
 8003364:	2320      	movs	r3, #32
 8003366:	6093      	str	r3, [r2, #8]
 8003368:	e0b4      	b.n	80034d4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4413      	add	r3, r2
 8003372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b08      	cmp	r3, #8
 800337e:	d133      	bne.n	80033e8 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4413      	add	r3, r2
 8003388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	0151      	lsls	r1, r2, #5
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	440a      	add	r2, r1
 8003396:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800339a:	f043 0302 	orr.w	r3, r3, #2
 800339e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	212c      	movs	r1, #44	; 0x2c
 80033a6:	fb01 f303 	mul.w	r3, r1, r3
 80033aa:	4413      	add	r3, r2
 80033ac:	3361      	adds	r3, #97	; 0x61
 80033ae:	2205      	movs	r2, #5
 80033b0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033be:	461a      	mov	r2, r3
 80033c0:	2310      	movs	r3, #16
 80033c2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d0:	461a      	mov	r2, r3
 80033d2:	2308      	movs	r3, #8
 80033d4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	4611      	mov	r1, r2
 80033e0:	4618      	mov	r0, r3
 80033e2:	f004 fd2a 	bl	8007e3a <USB_HC_Halt>
 80033e6:	e075      	b.n	80034d4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fe:	d134      	bne.n	800346a <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4413      	add	r3, r2
 8003408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	0151      	lsls	r1, r2, #5
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	440a      	add	r2, r1
 8003416:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800341a:	f043 0302 	orr.w	r3, r3, #2
 800341e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	212c      	movs	r1, #44	; 0x2c
 8003426:	fb01 f303 	mul.w	r3, r1, r3
 800342a:	4413      	add	r3, r2
 800342c:	3361      	adds	r3, #97	; 0x61
 800342e:	2208      	movs	r2, #8
 8003430:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4413      	add	r3, r2
 800343a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343e:	461a      	mov	r2, r3
 8003440:	2310      	movs	r3, #16
 8003442:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	4413      	add	r3, r2
 800344c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003450:	461a      	mov	r2, r3
 8003452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003456:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	4611      	mov	r1, r2
 8003462:	4618      	mov	r0, r3
 8003464:	f004 fce9 	bl	8007e3a <USB_HC_Halt>
 8003468:	e034      	b.n	80034d4 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4413      	add	r3, r2
 8003472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347c:	2b80      	cmp	r3, #128	; 0x80
 800347e:	d129      	bne.n	80034d4 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4413      	add	r3, r2
 8003488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	0151      	lsls	r1, r2, #5
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	440a      	add	r2, r1
 8003496:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800349a:	f043 0302 	orr.w	r3, r3, #2
 800349e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	212c      	movs	r1, #44	; 0x2c
 80034a6:	fb01 f303 	mul.w	r3, r1, r3
 80034aa:	4413      	add	r3, r2
 80034ac:	3361      	adds	r3, #97	; 0x61
 80034ae:	2206      	movs	r2, #6
 80034b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	4611      	mov	r1, r2
 80034bc:	4618      	mov	r0, r3
 80034be:	f004 fcbc 	bl	8007e3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ce:	461a      	mov	r2, r3
 80034d0:	2380      	movs	r3, #128	; 0x80
 80034d2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ea:	d122      	bne.n	8003532 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	0151      	lsls	r1, r2, #5
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	440a      	add	r2, r1
 8003502:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003506:	f043 0302 	orr.w	r3, r3, #2
 800350a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	4611      	mov	r1, r2
 8003516:	4618      	mov	r0, r3
 8003518:	f004 fc8f 	bl	8007e3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4413      	add	r3, r2
 8003524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003528:	461a      	mov	r2, r3
 800352a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800352e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003530:	e2ba      	b.n	8003aa8 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	4413      	add	r3, r2
 800353a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b01      	cmp	r3, #1
 8003546:	f040 811b 	bne.w	8003780 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d019      	beq.n	8003586 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	212c      	movs	r1, #44	; 0x2c
 8003558:	fb01 f303 	mul.w	r3, r1, r3
 800355c:	4413      	add	r3, r2
 800355e:	3348      	adds	r3, #72	; 0x48
 8003560:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	0159      	lsls	r1, r3, #5
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	440b      	add	r3, r1
 800356a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003574:	1ad2      	subs	r2, r2, r3
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	202c      	movs	r0, #44	; 0x2c
 800357c:	fb00 f303 	mul.w	r3, r0, r3
 8003580:	440b      	add	r3, r1
 8003582:	3350      	adds	r3, #80	; 0x50
 8003584:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	212c      	movs	r1, #44	; 0x2c
 800358c:	fb01 f303 	mul.w	r3, r1, r3
 8003590:	4413      	add	r3, r2
 8003592:	3361      	adds	r3, #97	; 0x61
 8003594:	2201      	movs	r2, #1
 8003596:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	212c      	movs	r1, #44	; 0x2c
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	335c      	adds	r3, #92	; 0x5c
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b6:	461a      	mov	r2, r3
 80035b8:	2301      	movs	r3, #1
 80035ba:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	212c      	movs	r1, #44	; 0x2c
 80035c2:	fb01 f303 	mul.w	r3, r1, r3
 80035c6:	4413      	add	r3, r2
 80035c8:	333f      	adds	r3, #63	; 0x3f
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d009      	beq.n	80035e4 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	212c      	movs	r1, #44	; 0x2c
 80035d6:	fb01 f303 	mul.w	r3, r1, r3
 80035da:	4413      	add	r3, r2
 80035dc:	333f      	adds	r3, #63	; 0x3f
 80035de:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d121      	bne.n	8003628 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	0151      	lsls	r1, r2, #5
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	440a      	add	r2, r1
 80035fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035fe:	f043 0302 	orr.w	r3, r3, #2
 8003602:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	4611      	mov	r1, r2
 800360e:	4618      	mov	r0, r3
 8003610:	f004 fc13 	bl	8007e3a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4413      	add	r3, r2
 800361c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003620:	461a      	mov	r2, r3
 8003622:	2310      	movs	r3, #16
 8003624:	6093      	str	r3, [r2, #8]
 8003626:	e066      	b.n	80036f6 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	212c      	movs	r1, #44	; 0x2c
 800362e:	fb01 f303 	mul.w	r3, r1, r3
 8003632:	4413      	add	r3, r2
 8003634:	333f      	adds	r3, #63	; 0x3f
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b03      	cmp	r3, #3
 800363a:	d127      	bne.n	800368c <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4413      	add	r3, r2
 8003644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	0151      	lsls	r1, r2, #5
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	440a      	add	r2, r1
 8003652:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003656:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800365a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	212c      	movs	r1, #44	; 0x2c
 8003662:	fb01 f303 	mul.w	r3, r1, r3
 8003666:	4413      	add	r3, r2
 8003668:	3360      	adds	r3, #96	; 0x60
 800366a:	2201      	movs	r2, #1
 800366c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	b2d9      	uxtb	r1, r3
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	202c      	movs	r0, #44	; 0x2c
 8003678:	fb00 f303 	mul.w	r3, r0, r3
 800367c:	4413      	add	r3, r2
 800367e:	3360      	adds	r3, #96	; 0x60
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f006 fd95 	bl	800a1b4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800368a:	e034      	b.n	80036f6 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	212c      	movs	r1, #44	; 0x2c
 8003692:	fb01 f303 	mul.w	r3, r1, r3
 8003696:	4413      	add	r3, r2
 8003698:	333f      	adds	r3, #63	; 0x3f
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d12a      	bne.n	80036f6 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	212c      	movs	r1, #44	; 0x2c
 80036a6:	fb01 f303 	mul.w	r3, r1, r3
 80036aa:	4413      	add	r3, r2
 80036ac:	3360      	adds	r3, #96	; 0x60
 80036ae:	2201      	movs	r2, #1
 80036b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	212c      	movs	r1, #44	; 0x2c
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	4413      	add	r3, r2
 80036be:	3354      	adds	r3, #84	; 0x54
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	f083 0301 	eor.w	r3, r3, #1
 80036c6:	b2d8      	uxtb	r0, r3
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	212c      	movs	r1, #44	; 0x2c
 80036ce:	fb01 f303 	mul.w	r3, r1, r3
 80036d2:	4413      	add	r3, r2
 80036d4:	3354      	adds	r3, #84	; 0x54
 80036d6:	4602      	mov	r2, r0
 80036d8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	b2d9      	uxtb	r1, r3
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	202c      	movs	r0, #44	; 0x2c
 80036e4:	fb00 f303 	mul.w	r3, r0, r3
 80036e8:	4413      	add	r3, r2
 80036ea:	3360      	adds	r3, #96	; 0x60
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f006 fd5f 	bl	800a1b4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d12b      	bne.n	8003756 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	212c      	movs	r1, #44	; 0x2c
 8003704:	fb01 f303 	mul.w	r3, r1, r3
 8003708:	4413      	add	r3, r2
 800370a:	3348      	adds	r3, #72	; 0x48
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	202c      	movs	r0, #44	; 0x2c
 8003714:	fb00 f202 	mul.w	r2, r0, r2
 8003718:	440a      	add	r2, r1
 800371a:	3240      	adds	r2, #64	; 0x40
 800371c:	8812      	ldrh	r2, [r2, #0]
 800371e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 81be 	beq.w	8003aa8 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	212c      	movs	r1, #44	; 0x2c
 8003732:	fb01 f303 	mul.w	r3, r1, r3
 8003736:	4413      	add	r3, r2
 8003738:	3354      	adds	r3, #84	; 0x54
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	f083 0301 	eor.w	r3, r3, #1
 8003740:	b2d8      	uxtb	r0, r3
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	212c      	movs	r1, #44	; 0x2c
 8003748:	fb01 f303 	mul.w	r3, r1, r3
 800374c:	4413      	add	r3, r2
 800374e:	3354      	adds	r3, #84	; 0x54
 8003750:	4602      	mov	r2, r0
 8003752:	701a      	strb	r2, [r3, #0]
}
 8003754:	e1a8      	b.n	8003aa8 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	212c      	movs	r1, #44	; 0x2c
 800375c:	fb01 f303 	mul.w	r3, r1, r3
 8003760:	4413      	add	r3, r2
 8003762:	3354      	adds	r3, #84	; 0x54
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	f083 0301 	eor.w	r3, r3, #1
 800376a:	b2d8      	uxtb	r0, r3
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	212c      	movs	r1, #44	; 0x2c
 8003772:	fb01 f303 	mul.w	r3, r1, r3
 8003776:	4413      	add	r3, r2
 8003778:	3354      	adds	r3, #84	; 0x54
 800377a:	4602      	mov	r2, r0
 800377c:	701a      	strb	r2, [r3, #0]
}
 800377e:	e193      	b.n	8003aa8 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4413      	add	r3, r2
 8003788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b02      	cmp	r3, #2
 8003794:	f040 8106 	bne.w	80039a4 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	0151      	lsls	r1, r2, #5
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	440a      	add	r2, r1
 80037ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037b2:	f023 0302 	bic.w	r3, r3, #2
 80037b6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	212c      	movs	r1, #44	; 0x2c
 80037be:	fb01 f303 	mul.w	r3, r1, r3
 80037c2:	4413      	add	r3, r2
 80037c4:	3361      	adds	r3, #97	; 0x61
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d109      	bne.n	80037e0 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	212c      	movs	r1, #44	; 0x2c
 80037d2:	fb01 f303 	mul.w	r3, r1, r3
 80037d6:	4413      	add	r3, r2
 80037d8:	3360      	adds	r3, #96	; 0x60
 80037da:	2201      	movs	r2, #1
 80037dc:	701a      	strb	r2, [r3, #0]
 80037de:	e0c9      	b.n	8003974 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	212c      	movs	r1, #44	; 0x2c
 80037e6:	fb01 f303 	mul.w	r3, r1, r3
 80037ea:	4413      	add	r3, r2
 80037ec:	3361      	adds	r3, #97	; 0x61
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b05      	cmp	r3, #5
 80037f2:	d109      	bne.n	8003808 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	212c      	movs	r1, #44	; 0x2c
 80037fa:	fb01 f303 	mul.w	r3, r1, r3
 80037fe:	4413      	add	r3, r2
 8003800:	3360      	adds	r3, #96	; 0x60
 8003802:	2205      	movs	r2, #5
 8003804:	701a      	strb	r2, [r3, #0]
 8003806:	e0b5      	b.n	8003974 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	212c      	movs	r1, #44	; 0x2c
 800380e:	fb01 f303 	mul.w	r3, r1, r3
 8003812:	4413      	add	r3, r2
 8003814:	3361      	adds	r3, #97	; 0x61
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b06      	cmp	r3, #6
 800381a:	d009      	beq.n	8003830 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	212c      	movs	r1, #44	; 0x2c
 8003822:	fb01 f303 	mul.w	r3, r1, r3
 8003826:	4413      	add	r3, r2
 8003828:	3361      	adds	r3, #97	; 0x61
 800382a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800382c:	2b08      	cmp	r3, #8
 800382e:	d150      	bne.n	80038d2 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	212c      	movs	r1, #44	; 0x2c
 8003836:	fb01 f303 	mul.w	r3, r1, r3
 800383a:	4413      	add	r3, r2
 800383c:	335c      	adds	r3, #92	; 0x5c
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	1c5a      	adds	r2, r3, #1
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	202c      	movs	r0, #44	; 0x2c
 8003848:	fb00 f303 	mul.w	r3, r0, r3
 800384c:	440b      	add	r3, r1
 800384e:	335c      	adds	r3, #92	; 0x5c
 8003850:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	212c      	movs	r1, #44	; 0x2c
 8003858:	fb01 f303 	mul.w	r3, r1, r3
 800385c:	4413      	add	r3, r2
 800385e:	335c      	adds	r3, #92	; 0x5c
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d912      	bls.n	800388c <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	212c      	movs	r1, #44	; 0x2c
 800386c:	fb01 f303 	mul.w	r3, r1, r3
 8003870:	4413      	add	r3, r2
 8003872:	335c      	adds	r3, #92	; 0x5c
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	212c      	movs	r1, #44	; 0x2c
 800387e:	fb01 f303 	mul.w	r3, r1, r3
 8003882:	4413      	add	r3, r2
 8003884:	3360      	adds	r3, #96	; 0x60
 8003886:	2204      	movs	r2, #4
 8003888:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800388a:	e073      	b.n	8003974 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	212c      	movs	r1, #44	; 0x2c
 8003892:	fb01 f303 	mul.w	r3, r1, r3
 8003896:	4413      	add	r3, r2
 8003898:	3360      	adds	r3, #96	; 0x60
 800389a:	2202      	movs	r2, #2
 800389c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038b4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038bc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ca:	461a      	mov	r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80038d0:	e050      	b.n	8003974 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	212c      	movs	r1, #44	; 0x2c
 80038d8:	fb01 f303 	mul.w	r3, r1, r3
 80038dc:	4413      	add	r3, r2
 80038de:	3361      	adds	r3, #97	; 0x61
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d122      	bne.n	800392c <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	212c      	movs	r1, #44	; 0x2c
 80038ec:	fb01 f303 	mul.w	r3, r1, r3
 80038f0:	4413      	add	r3, r2
 80038f2:	3360      	adds	r3, #96	; 0x60
 80038f4:	2202      	movs	r2, #2
 80038f6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800390e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003916:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4413      	add	r3, r2
 8003920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003924:	461a      	mov	r2, r3
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	e023      	b.n	8003974 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	212c      	movs	r1, #44	; 0x2c
 8003932:	fb01 f303 	mul.w	r3, r1, r3
 8003936:	4413      	add	r3, r2
 8003938:	3361      	adds	r3, #97	; 0x61
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b07      	cmp	r3, #7
 800393e:	d119      	bne.n	8003974 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	212c      	movs	r1, #44	; 0x2c
 8003946:	fb01 f303 	mul.w	r3, r1, r3
 800394a:	4413      	add	r3, r2
 800394c:	335c      	adds	r3, #92	; 0x5c
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	202c      	movs	r0, #44	; 0x2c
 8003958:	fb00 f303 	mul.w	r3, r0, r3
 800395c:	440b      	add	r3, r1
 800395e:	335c      	adds	r3, #92	; 0x5c
 8003960:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	212c      	movs	r1, #44	; 0x2c
 8003968:	fb01 f303 	mul.w	r3, r1, r3
 800396c:	4413      	add	r3, r2
 800396e:	3360      	adds	r3, #96	; 0x60
 8003970:	2204      	movs	r2, #4
 8003972:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4413      	add	r3, r2
 800397c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003980:	461a      	mov	r2, r3
 8003982:	2302      	movs	r3, #2
 8003984:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	b2d9      	uxtb	r1, r3
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	202c      	movs	r0, #44	; 0x2c
 8003990:	fb00 f303 	mul.w	r3, r0, r3
 8003994:	4413      	add	r3, r2
 8003996:	3360      	adds	r3, #96	; 0x60
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f006 fc09 	bl	800a1b4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80039a2:	e081      	b.n	8003aa8 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	2b10      	cmp	r3, #16
 80039b8:	d176      	bne.n	8003aa8 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	212c      	movs	r1, #44	; 0x2c
 80039c0:	fb01 f303 	mul.w	r3, r1, r3
 80039c4:	4413      	add	r3, r2
 80039c6:	333f      	adds	r3, #63	; 0x3f
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	d121      	bne.n	8003a12 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	212c      	movs	r1, #44	; 0x2c
 80039d4:	fb01 f303 	mul.w	r3, r1, r3
 80039d8:	4413      	add	r3, r2
 80039da:	335c      	adds	r3, #92	; 0x5c
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	0151      	lsls	r1, r2, #5
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	440a      	add	r2, r1
 80039f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039fa:	f043 0302 	orr.w	r3, r3, #2
 80039fe:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	4611      	mov	r1, r2
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f004 fa15 	bl	8007e3a <USB_HC_Halt>
 8003a10:	e041      	b.n	8003a96 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	212c      	movs	r1, #44	; 0x2c
 8003a18:	fb01 f303 	mul.w	r3, r1, r3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	333f      	adds	r3, #63	; 0x3f
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d009      	beq.n	8003a3a <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	212c      	movs	r1, #44	; 0x2c
 8003a2c:	fb01 f303 	mul.w	r3, r1, r3
 8003a30:	4413      	add	r3, r2
 8003a32:	333f      	adds	r3, #63	; 0x3f
 8003a34:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d12d      	bne.n	8003a96 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	212c      	movs	r1, #44	; 0x2c
 8003a40:	fb01 f303 	mul.w	r3, r1, r3
 8003a44:	4413      	add	r3, r2
 8003a46:	335c      	adds	r3, #92	; 0x5c
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d120      	bne.n	8003a96 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	212c      	movs	r1, #44	; 0x2c
 8003a5a:	fb01 f303 	mul.w	r3, r1, r3
 8003a5e:	4413      	add	r3, r2
 8003a60:	3361      	adds	r3, #97	; 0x61
 8003a62:	2203      	movs	r2, #3
 8003a64:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	015a      	lsls	r2, r3, #5
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	0151      	lsls	r1, r2, #5
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	440a      	add	r2, r1
 8003a7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a80:	f043 0302 	orr.w	r3, r3, #2
 8003a84:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	4611      	mov	r1, r2
 8003a90:	4618      	mov	r0, r3
 8003a92:	f004 f9d2 	bl	8007e3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	6093      	str	r3, [r2, #8]
}
 8003aa8:	bf00      	nop
 8003aaa:	3718      	adds	r7, #24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b088      	sub	sp, #32
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003ac6:	78fb      	ldrb	r3, [r7, #3]
 8003ac8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d119      	bne.n	8003b14 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aec:	461a      	mov	r2, r3
 8003aee:	2304      	movs	r3, #4
 8003af0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	0151      	lsls	r1, r2, #5
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	440a      	add	r2, r1
 8003b08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b0c:	f043 0302 	orr.w	r3, r3, #2
 8003b10:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003b12:	e3c6      	b.n	80042a2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	015a      	lsls	r2, r3, #5
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b20      	cmp	r3, #32
 8003b28:	d13e      	bne.n	8003ba8 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b36:	461a      	mov	r2, r3
 8003b38:	2320      	movs	r3, #32
 8003b3a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	212c      	movs	r1, #44	; 0x2c
 8003b42:	fb01 f303 	mul.w	r3, r1, r3
 8003b46:	4413      	add	r3, r2
 8003b48:	333d      	adds	r3, #61	; 0x3d
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	f040 83a8 	bne.w	80042a2 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	212c      	movs	r1, #44	; 0x2c
 8003b58:	fb01 f303 	mul.w	r3, r1, r3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	333d      	adds	r3, #61	; 0x3d
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	212c      	movs	r1, #44	; 0x2c
 8003b6a:	fb01 f303 	mul.w	r3, r1, r3
 8003b6e:	4413      	add	r3, r2
 8003b70:	3360      	adds	r3, #96	; 0x60
 8003b72:	2202      	movs	r2, #2
 8003b74:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	0151      	lsls	r1, r2, #5
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	440a      	add	r2, r1
 8003b8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b90:	f043 0302 	orr.w	r3, r3, #2
 8003b94:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f004 f94a 	bl	8007e3a <USB_HC_Halt>
}
 8003ba6:	e37c      	b.n	80042a2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bbe:	d122      	bne.n	8003c06 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	0151      	lsls	r1, r2, #5
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	440a      	add	r2, r1
 8003bd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bda:	f043 0302 	orr.w	r3, r3, #2
 8003bde:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	4611      	mov	r1, r2
 8003bea:	4618      	mov	r0, r3
 8003bec:	f004 f925 	bl	8007e3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c02:	6093      	str	r3, [r2, #8]
}
 8003c04:	e34d      	b.n	80042a2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d150      	bne.n	8003cbe <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	212c      	movs	r1, #44	; 0x2c
 8003c22:	fb01 f303 	mul.w	r3, r1, r3
 8003c26:	4413      	add	r3, r2
 8003c28:	335c      	adds	r3, #92	; 0x5c
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c40:	2b40      	cmp	r3, #64	; 0x40
 8003c42:	d111      	bne.n	8003c68 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	212c      	movs	r1, #44	; 0x2c
 8003c4a:	fb01 f303 	mul.w	r3, r1, r3
 8003c4e:	4413      	add	r3, r2
 8003c50:	333d      	adds	r3, #61	; 0x3d
 8003c52:	2201      	movs	r2, #1
 8003c54:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c62:	461a      	mov	r2, r3
 8003c64:	2340      	movs	r3, #64	; 0x40
 8003c66:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	0151      	lsls	r1, r2, #5
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	440a      	add	r2, r1
 8003c7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c82:	f043 0302 	orr.w	r3, r3, #2
 8003c86:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	4611      	mov	r1, r2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f004 f8d1 	bl	8007e3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	212c      	movs	r1, #44	; 0x2c
 8003cb0:	fb01 f303 	mul.w	r3, r1, r3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	3361      	adds	r3, #97	; 0x61
 8003cb8:	2201      	movs	r2, #1
 8003cba:	701a      	strb	r2, [r3, #0]
}
 8003cbc:	e2f1      	b.n	80042a2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd0:	2b40      	cmp	r3, #64	; 0x40
 8003cd2:	d13c      	bne.n	8003d4e <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	212c      	movs	r1, #44	; 0x2c
 8003cda:	fb01 f303 	mul.w	r3, r1, r3
 8003cde:	4413      	add	r3, r2
 8003ce0:	3361      	adds	r3, #97	; 0x61
 8003ce2:	2204      	movs	r2, #4
 8003ce4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	212c      	movs	r1, #44	; 0x2c
 8003cec:	fb01 f303 	mul.w	r3, r1, r3
 8003cf0:	4413      	add	r3, r2
 8003cf2:	333d      	adds	r3, #61	; 0x3d
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	212c      	movs	r1, #44	; 0x2c
 8003cfe:	fb01 f303 	mul.w	r3, r1, r3
 8003d02:	4413      	add	r3, r2
 8003d04:	335c      	adds	r3, #92	; 0x5c
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	0151      	lsls	r1, r2, #5
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	440a      	add	r2, r1
 8003d20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d24:	f043 0302 	orr.w	r3, r3, #2
 8003d28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	4611      	mov	r1, r2
 8003d34:	4618      	mov	r0, r3
 8003d36:	f004 f880 	bl	8007e3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d46:	461a      	mov	r2, r3
 8003d48:	2340      	movs	r3, #64	; 0x40
 8003d4a:	6093      	str	r3, [r2, #8]
}
 8003d4c:	e2a9      	b.n	80042a2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d12a      	bne.n	8003dba <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d70:	461a      	mov	r2, r3
 8003d72:	2308      	movs	r3, #8
 8003d74:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	0151      	lsls	r1, r2, #5
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	440a      	add	r2, r1
 8003d8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d90:	f043 0302 	orr.w	r3, r3, #2
 8003d94:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	4611      	mov	r1, r2
 8003da0:	4618      	mov	r0, r3
 8003da2:	f004 f84a 	bl	8007e3a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	212c      	movs	r1, #44	; 0x2c
 8003dac:	fb01 f303 	mul.w	r3, r1, r3
 8003db0:	4413      	add	r3, r2
 8003db2:	3361      	adds	r3, #97	; 0x61
 8003db4:	2205      	movs	r2, #5
 8003db6:	701a      	strb	r2, [r3, #0]
}
 8003db8:	e273      	b.n	80042a2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 0310 	and.w	r3, r3, #16
 8003dcc:	2b10      	cmp	r3, #16
 8003dce:	d150      	bne.n	8003e72 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	212c      	movs	r1, #44	; 0x2c
 8003dd6:	fb01 f303 	mul.w	r3, r1, r3
 8003dda:	4413      	add	r3, r2
 8003ddc:	335c      	adds	r3, #92	; 0x5c
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	212c      	movs	r1, #44	; 0x2c
 8003de8:	fb01 f303 	mul.w	r3, r1, r3
 8003dec:	4413      	add	r3, r2
 8003dee:	3361      	adds	r3, #97	; 0x61
 8003df0:	2203      	movs	r2, #3
 8003df2:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	212c      	movs	r1, #44	; 0x2c
 8003dfa:	fb01 f303 	mul.w	r3, r1, r3
 8003dfe:	4413      	add	r3, r2
 8003e00:	333d      	adds	r3, #61	; 0x3d
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d112      	bne.n	8003e2e <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	212c      	movs	r1, #44	; 0x2c
 8003e0e:	fb01 f303 	mul.w	r3, r1, r3
 8003e12:	4413      	add	r3, r2
 8003e14:	333c      	adds	r3, #60	; 0x3c
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d108      	bne.n	8003e2e <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	212c      	movs	r1, #44	; 0x2c
 8003e22:	fb01 f303 	mul.w	r3, r1, r3
 8003e26:	4413      	add	r3, r2
 8003e28:	333d      	adds	r3, #61	; 0x3d
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	0151      	lsls	r1, r2, #5
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	440a      	add	r2, r1
 8003e44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e48:	f043 0302 	orr.w	r3, r3, #2
 8003e4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	4611      	mov	r1, r2
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f003 ffee 	bl	8007e3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	2310      	movs	r3, #16
 8003e6e:	6093      	str	r3, [r2, #8]
}
 8003e70:	e217      	b.n	80042a2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e84:	2b80      	cmp	r3, #128	; 0x80
 8003e86:	d174      	bne.n	8003f72 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d121      	bne.n	8003ed4 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	212c      	movs	r1, #44	; 0x2c
 8003e96:	fb01 f303 	mul.w	r3, r1, r3
 8003e9a:	4413      	add	r3, r2
 8003e9c:	3361      	adds	r3, #97	; 0x61
 8003e9e:	2206      	movs	r2, #6
 8003ea0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	015a      	lsls	r2, r3, #5
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	0151      	lsls	r1, r2, #5
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	440a      	add	r2, r1
 8003eb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ebc:	f043 0302 	orr.w	r3, r3, #2
 8003ec0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	4611      	mov	r1, r2
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f003 ffb4 	bl	8007e3a <USB_HC_Halt>
 8003ed2:	e044      	b.n	8003f5e <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	212c      	movs	r1, #44	; 0x2c
 8003eda:	fb01 f303 	mul.w	r3, r1, r3
 8003ede:	4413      	add	r3, r2
 8003ee0:	335c      	adds	r3, #92	; 0x5c
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	202c      	movs	r0, #44	; 0x2c
 8003eec:	fb00 f303 	mul.w	r3, r0, r3
 8003ef0:	440b      	add	r3, r1
 8003ef2:	335c      	adds	r3, #92	; 0x5c
 8003ef4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	212c      	movs	r1, #44	; 0x2c
 8003efc:	fb01 f303 	mul.w	r3, r1, r3
 8003f00:	4413      	add	r3, r2
 8003f02:	335c      	adds	r3, #92	; 0x5c
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d920      	bls.n	8003f4c <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	212c      	movs	r1, #44	; 0x2c
 8003f10:	fb01 f303 	mul.w	r3, r1, r3
 8003f14:	4413      	add	r3, r2
 8003f16:	335c      	adds	r3, #92	; 0x5c
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	212c      	movs	r1, #44	; 0x2c
 8003f22:	fb01 f303 	mul.w	r3, r1, r3
 8003f26:	4413      	add	r3, r2
 8003f28:	3360      	adds	r3, #96	; 0x60
 8003f2a:	2204      	movs	r2, #4
 8003f2c:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	b2d9      	uxtb	r1, r3
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	202c      	movs	r0, #44	; 0x2c
 8003f38:	fb00 f303 	mul.w	r3, r0, r3
 8003f3c:	4413      	add	r3, r2
 8003f3e:	3360      	adds	r3, #96	; 0x60
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f006 f935 	bl	800a1b4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f4a:	e008      	b.n	8003f5e <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	212c      	movs	r1, #44	; 0x2c
 8003f52:	fb01 f303 	mul.w	r3, r1, r3
 8003f56:	4413      	add	r3, r2
 8003f58:	3360      	adds	r3, #96	; 0x60
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	2380      	movs	r3, #128	; 0x80
 8003f6e:	6093      	str	r3, [r2, #8]
}
 8003f70:	e197      	b.n	80042a2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f88:	d134      	bne.n	8003ff4 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	0151      	lsls	r1, r2, #5
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	440a      	add	r2, r1
 8003fa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fa4:	f043 0302 	orr.w	r3, r3, #2
 8003fa8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f003 ff40 	bl	8007e3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	2310      	movs	r3, #16
 8003fca:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	015a      	lsls	r2, r3, #5
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd8:	461a      	mov	r2, r3
 8003fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fde:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	212c      	movs	r1, #44	; 0x2c
 8003fe6:	fb01 f303 	mul.w	r3, r1, r3
 8003fea:	4413      	add	r3, r2
 8003fec:	3361      	adds	r3, #97	; 0x61
 8003fee:	2208      	movs	r2, #8
 8003ff0:	701a      	strb	r2, [r3, #0]
}
 8003ff2:	e156      	b.n	80042a2 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b02      	cmp	r3, #2
 8004008:	f040 814b 	bne.w	80042a2 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	4413      	add	r3, r2
 8004014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	0151      	lsls	r1, r2, #5
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	440a      	add	r2, r1
 8004022:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004026:	f023 0302 	bic.w	r3, r3, #2
 800402a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	212c      	movs	r1, #44	; 0x2c
 8004032:	fb01 f303 	mul.w	r3, r1, r3
 8004036:	4413      	add	r3, r2
 8004038:	3361      	adds	r3, #97	; 0x61
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d179      	bne.n	8004134 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	212c      	movs	r1, #44	; 0x2c
 8004046:	fb01 f303 	mul.w	r3, r1, r3
 800404a:	4413      	add	r3, r2
 800404c:	3360      	adds	r3, #96	; 0x60
 800404e:	2201      	movs	r2, #1
 8004050:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	212c      	movs	r1, #44	; 0x2c
 8004058:	fb01 f303 	mul.w	r3, r1, r3
 800405c:	4413      	add	r3, r2
 800405e:	333f      	adds	r3, #63	; 0x3f
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	2b02      	cmp	r3, #2
 8004064:	d00a      	beq.n	800407c <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	212c      	movs	r1, #44	; 0x2c
 800406c:	fb01 f303 	mul.w	r3, r1, r3
 8004070:	4413      	add	r3, r2
 8004072:	333f      	adds	r3, #63	; 0x3f
 8004074:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004076:	2b03      	cmp	r3, #3
 8004078:	f040 80fc 	bne.w	8004274 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d142      	bne.n	800410a <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	212c      	movs	r1, #44	; 0x2c
 800408a:	fb01 f303 	mul.w	r3, r1, r3
 800408e:	4413      	add	r3, r2
 8004090:	334c      	adds	r3, #76	; 0x4c
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 80ed 	beq.w	8004274 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	212c      	movs	r1, #44	; 0x2c
 80040a0:	fb01 f303 	mul.w	r3, r1, r3
 80040a4:	4413      	add	r3, r2
 80040a6:	334c      	adds	r3, #76	; 0x4c
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	202c      	movs	r0, #44	; 0x2c
 80040b0:	fb00 f202 	mul.w	r2, r0, r2
 80040b4:	440a      	add	r2, r1
 80040b6:	3240      	adds	r2, #64	; 0x40
 80040b8:	8812      	ldrh	r2, [r2, #0]
 80040ba:	4413      	add	r3, r2
 80040bc:	3b01      	subs	r3, #1
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	202c      	movs	r0, #44	; 0x2c
 80040c4:	fb00 f202 	mul.w	r2, r0, r2
 80040c8:	440a      	add	r2, r1
 80040ca:	3240      	adds	r2, #64	; 0x40
 80040cc:	8812      	ldrh	r2, [r2, #0]
 80040ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 80ca 	beq.w	8004274 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	212c      	movs	r1, #44	; 0x2c
 80040e6:	fb01 f303 	mul.w	r3, r1, r3
 80040ea:	4413      	add	r3, r2
 80040ec:	3355      	adds	r3, #85	; 0x55
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	f083 0301 	eor.w	r3, r3, #1
 80040f4:	b2d8      	uxtb	r0, r3
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	212c      	movs	r1, #44	; 0x2c
 80040fc:	fb01 f303 	mul.w	r3, r1, r3
 8004100:	4413      	add	r3, r2
 8004102:	3355      	adds	r3, #85	; 0x55
 8004104:	4602      	mov	r2, r0
 8004106:	701a      	strb	r2, [r3, #0]
 8004108:	e0b4      	b.n	8004274 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	212c      	movs	r1, #44	; 0x2c
 8004110:	fb01 f303 	mul.w	r3, r1, r3
 8004114:	4413      	add	r3, r2
 8004116:	3355      	adds	r3, #85	; 0x55
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	f083 0301 	eor.w	r3, r3, #1
 800411e:	b2d8      	uxtb	r0, r3
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	212c      	movs	r1, #44	; 0x2c
 8004126:	fb01 f303 	mul.w	r3, r1, r3
 800412a:	4413      	add	r3, r2
 800412c:	3355      	adds	r3, #85	; 0x55
 800412e:	4602      	mov	r2, r0
 8004130:	701a      	strb	r2, [r3, #0]
 8004132:	e09f      	b.n	8004274 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	212c      	movs	r1, #44	; 0x2c
 800413a:	fb01 f303 	mul.w	r3, r1, r3
 800413e:	4413      	add	r3, r2
 8004140:	3361      	adds	r3, #97	; 0x61
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b03      	cmp	r3, #3
 8004146:	d109      	bne.n	800415c <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	212c      	movs	r1, #44	; 0x2c
 800414e:	fb01 f303 	mul.w	r3, r1, r3
 8004152:	4413      	add	r3, r2
 8004154:	3360      	adds	r3, #96	; 0x60
 8004156:	2202      	movs	r2, #2
 8004158:	701a      	strb	r2, [r3, #0]
 800415a:	e08b      	b.n	8004274 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	212c      	movs	r1, #44	; 0x2c
 8004162:	fb01 f303 	mul.w	r3, r1, r3
 8004166:	4413      	add	r3, r2
 8004168:	3361      	adds	r3, #97	; 0x61
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	2b04      	cmp	r3, #4
 800416e:	d109      	bne.n	8004184 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	212c      	movs	r1, #44	; 0x2c
 8004176:	fb01 f303 	mul.w	r3, r1, r3
 800417a:	4413      	add	r3, r2
 800417c:	3360      	adds	r3, #96	; 0x60
 800417e:	2202      	movs	r2, #2
 8004180:	701a      	strb	r2, [r3, #0]
 8004182:	e077      	b.n	8004274 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	212c      	movs	r1, #44	; 0x2c
 800418a:	fb01 f303 	mul.w	r3, r1, r3
 800418e:	4413      	add	r3, r2
 8004190:	3361      	adds	r3, #97	; 0x61
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b05      	cmp	r3, #5
 8004196:	d109      	bne.n	80041ac <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	212c      	movs	r1, #44	; 0x2c
 800419e:	fb01 f303 	mul.w	r3, r1, r3
 80041a2:	4413      	add	r3, r2
 80041a4:	3360      	adds	r3, #96	; 0x60
 80041a6:	2205      	movs	r2, #5
 80041a8:	701a      	strb	r2, [r3, #0]
 80041aa:	e063      	b.n	8004274 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	212c      	movs	r1, #44	; 0x2c
 80041b2:	fb01 f303 	mul.w	r3, r1, r3
 80041b6:	4413      	add	r3, r2
 80041b8:	3361      	adds	r3, #97	; 0x61
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b06      	cmp	r3, #6
 80041be:	d009      	beq.n	80041d4 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	212c      	movs	r1, #44	; 0x2c
 80041c6:	fb01 f303 	mul.w	r3, r1, r3
 80041ca:	4413      	add	r3, r2
 80041cc:	3361      	adds	r3, #97	; 0x61
 80041ce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d14f      	bne.n	8004274 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	212c      	movs	r1, #44	; 0x2c
 80041da:	fb01 f303 	mul.w	r3, r1, r3
 80041de:	4413      	add	r3, r2
 80041e0:	335c      	adds	r3, #92	; 0x5c
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	202c      	movs	r0, #44	; 0x2c
 80041ec:	fb00 f303 	mul.w	r3, r0, r3
 80041f0:	440b      	add	r3, r1
 80041f2:	335c      	adds	r3, #92	; 0x5c
 80041f4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	212c      	movs	r1, #44	; 0x2c
 80041fc:	fb01 f303 	mul.w	r3, r1, r3
 8004200:	4413      	add	r3, r2
 8004202:	335c      	adds	r3, #92	; 0x5c
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b02      	cmp	r3, #2
 8004208:	d912      	bls.n	8004230 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	212c      	movs	r1, #44	; 0x2c
 8004210:	fb01 f303 	mul.w	r3, r1, r3
 8004214:	4413      	add	r3, r2
 8004216:	335c      	adds	r3, #92	; 0x5c
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	212c      	movs	r1, #44	; 0x2c
 8004222:	fb01 f303 	mul.w	r3, r1, r3
 8004226:	4413      	add	r3, r2
 8004228:	3360      	adds	r3, #96	; 0x60
 800422a:	2204      	movs	r2, #4
 800422c:	701a      	strb	r2, [r3, #0]
 800422e:	e021      	b.n	8004274 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	212c      	movs	r1, #44	; 0x2c
 8004236:	fb01 f303 	mul.w	r3, r1, r3
 800423a:	4413      	add	r3, r2
 800423c:	3360      	adds	r3, #96	; 0x60
 800423e:	2202      	movs	r2, #2
 8004240:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	015a      	lsls	r2, r3, #5
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	4413      	add	r3, r2
 800424a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004258:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004260:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	4413      	add	r3, r2
 800426a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800426e:	461a      	mov	r2, r3
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	4413      	add	r3, r2
 800427c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004280:	461a      	mov	r2, r3
 8004282:	2302      	movs	r3, #2
 8004284:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	b2d9      	uxtb	r1, r3
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	202c      	movs	r0, #44	; 0x2c
 8004290:	fb00 f303 	mul.w	r3, r0, r3
 8004294:	4413      	add	r3, r2
 8004296:	3360      	adds	r3, #96	; 0x60
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	461a      	mov	r2, r3
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f005 ff89 	bl	800a1b4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80042a2:	bf00      	nop
 80042a4:	3720      	adds	r7, #32
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b08a      	sub	sp, #40	; 0x28
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	0c5b      	lsrs	r3, r3, #17
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	091b      	lsrs	r3, r3, #4
 80042da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042de:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d004      	beq.n	80042f0 <HCD_RXQLVL_IRQHandler+0x46>
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2b05      	cmp	r3, #5
 80042ea:	f000 80a9 	beq.w	8004440 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80042ee:	e0aa      	b.n	8004446 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 80a6 	beq.w	8004444 <HCD_RXQLVL_IRQHandler+0x19a>
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	212c      	movs	r1, #44	; 0x2c
 80042fe:	fb01 f303 	mul.w	r3, r1, r3
 8004302:	4413      	add	r3, r2
 8004304:	3344      	adds	r3, #68	; 0x44
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 809b 	beq.w	8004444 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	212c      	movs	r1, #44	; 0x2c
 8004314:	fb01 f303 	mul.w	r3, r1, r3
 8004318:	4413      	add	r3, r2
 800431a:	3350      	adds	r3, #80	; 0x50
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	441a      	add	r2, r3
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	202c      	movs	r0, #44	; 0x2c
 8004328:	fb00 f303 	mul.w	r3, r0, r3
 800432c:	440b      	add	r3, r1
 800432e:	334c      	adds	r3, #76	; 0x4c
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d87a      	bhi.n	800442c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6818      	ldr	r0, [r3, #0]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	212c      	movs	r1, #44	; 0x2c
 8004340:	fb01 f303 	mul.w	r3, r1, r3
 8004344:	4413      	add	r3, r2
 8004346:	3344      	adds	r3, #68	; 0x44
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	b292      	uxth	r2, r2
 800434e:	4619      	mov	r1, r3
 8004350:	f003 f911 	bl	8007576 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	212c      	movs	r1, #44	; 0x2c
 800435a:	fb01 f303 	mul.w	r3, r1, r3
 800435e:	4413      	add	r3, r2
 8004360:	3344      	adds	r3, #68	; 0x44
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	441a      	add	r2, r3
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	202c      	movs	r0, #44	; 0x2c
 800436e:	fb00 f303 	mul.w	r3, r0, r3
 8004372:	440b      	add	r3, r1
 8004374:	3344      	adds	r3, #68	; 0x44
 8004376:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	212c      	movs	r1, #44	; 0x2c
 800437e:	fb01 f303 	mul.w	r3, r1, r3
 8004382:	4413      	add	r3, r2
 8004384:	3350      	adds	r3, #80	; 0x50
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	441a      	add	r2, r3
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	202c      	movs	r0, #44	; 0x2c
 8004392:	fb00 f303 	mul.w	r3, r0, r3
 8004396:	440b      	add	r3, r1
 8004398:	3350      	adds	r3, #80	; 0x50
 800439a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	0cdb      	lsrs	r3, r3, #19
 80043ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043b0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	212c      	movs	r1, #44	; 0x2c
 80043b8:	fb01 f303 	mul.w	r3, r1, r3
 80043bc:	4413      	add	r3, r2
 80043be:	3340      	adds	r3, #64	; 0x40
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	461a      	mov	r2, r3
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d13c      	bne.n	8004444 <HCD_RXQLVL_IRQHandler+0x19a>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d039      	beq.n	8004444 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043e6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043ee:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043fc:	461a      	mov	r2, r3
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	212c      	movs	r1, #44	; 0x2c
 8004408:	fb01 f303 	mul.w	r3, r1, r3
 800440c:	4413      	add	r3, r2
 800440e:	3354      	adds	r3, #84	; 0x54
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	f083 0301 	eor.w	r3, r3, #1
 8004416:	b2d8      	uxtb	r0, r3
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	212c      	movs	r1, #44	; 0x2c
 800441e:	fb01 f303 	mul.w	r3, r1, r3
 8004422:	4413      	add	r3, r2
 8004424:	3354      	adds	r3, #84	; 0x54
 8004426:	4602      	mov	r2, r0
 8004428:	701a      	strb	r2, [r3, #0]
      break;
 800442a:	e00b      	b.n	8004444 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	212c      	movs	r1, #44	; 0x2c
 8004432:	fb01 f303 	mul.w	r3, r1, r3
 8004436:	4413      	add	r3, r2
 8004438:	3360      	adds	r3, #96	; 0x60
 800443a:	2204      	movs	r2, #4
 800443c:	701a      	strb	r2, [r3, #0]
      break;
 800443e:	e001      	b.n	8004444 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004440:	bf00      	nop
 8004442:	e000      	b.n	8004446 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004444:	bf00      	nop
  }
}
 8004446:	bf00      	nop
 8004448:	3728      	adds	r7, #40	; 0x28
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b086      	sub	sp, #24
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800447a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b02      	cmp	r3, #2
 8004484:	d10b      	bne.n	800449e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b01      	cmp	r3, #1
 800448e:	d102      	bne.n	8004496 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f005 fe73 	bl	800a17c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f043 0302 	orr.w	r3, r3, #2
 800449c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d132      	bne.n	800450e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f043 0308 	orr.w	r3, r3, #8
 80044ae:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d126      	bne.n	8004508 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d113      	bne.n	80044ea <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80044c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044cc:	d106      	bne.n	80044dc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2102      	movs	r1, #2
 80044d4:	4618      	mov	r0, r3
 80044d6:	f003 f989 	bl	80077ec <USB_InitFSLSPClkSel>
 80044da:	e011      	b.n	8004500 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2101      	movs	r1, #1
 80044e2:	4618      	mov	r0, r3
 80044e4:	f003 f982 	bl	80077ec <USB_InitFSLSPClkSel>
 80044e8:	e00a      	b.n	8004500 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d106      	bne.n	8004500 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044f8:	461a      	mov	r2, r3
 80044fa:	f64e 2360 	movw	r3, #60000	; 0xea60
 80044fe:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f005 fe65 	bl	800a1d0 <HAL_HCD_PortEnabled_Callback>
 8004506:	e002      	b.n	800450e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f005 fe6f 	bl	800a1ec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b20      	cmp	r3, #32
 8004516:	d103      	bne.n	8004520 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f043 0320 	orr.w	r3, r3, #32
 800451e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004526:	461a      	mov	r2, r3
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	6013      	str	r3, [r2, #0]
}
 800452c:	bf00      	nop
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e128      	b.n	8004798 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d109      	bne.n	8004566 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a90      	ldr	r2, [pc, #576]	; (80047a0 <HAL_I2S_Init+0x26c>)
 800455e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7fd fc43 	bl	8001dec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2202      	movs	r2, #2
 800456a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6812      	ldr	r2, [r2, #0]
 8004578:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800457c:	f023 030f 	bic.w	r3, r3, #15
 8004580:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2202      	movs	r2, #2
 8004588:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d060      	beq.n	8004654 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d102      	bne.n	80045a0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800459a:	2310      	movs	r3, #16
 800459c:	617b      	str	r3, [r7, #20]
 800459e:	e001      	b.n	80045a4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80045a0:	2320      	movs	r3, #32
 80045a2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	2b20      	cmp	r3, #32
 80045aa:	d802      	bhi.n	80045b2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80045b2:	2001      	movs	r0, #1
 80045b4:	f001 f980 	bl	80058b8 <HAL_RCCEx_GetPeriphCLKFreq>
 80045b8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045c2:	d125      	bne.n	8004610 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d010      	beq.n	80045ee <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80045d6:	4613      	mov	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	461a      	mov	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e8:	3305      	adds	r3, #5
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	e01f      	b.n	800462e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80045f8:	4613      	mov	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	461a      	mov	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	fbb2 f3f3 	udiv	r3, r2, r3
 800460a:	3305      	adds	r3, #5
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	e00e      	b.n	800462e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	fbb2 f2f3 	udiv	r2, r2, r3
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	461a      	mov	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	fbb2 f3f3 	udiv	r3, r2, r3
 800462a:	3305      	adds	r3, #5
 800462c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	4a5c      	ldr	r2, [pc, #368]	; (80047a4 <HAL_I2S_Init+0x270>)
 8004632:	fba2 2303 	umull	r2, r3, r2, r3
 8004636:	08db      	lsrs	r3, r3, #3
 8004638:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	085b      	lsrs	r3, r3, #1
 800464a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	021b      	lsls	r3, r3, #8
 8004650:	61bb      	str	r3, [r7, #24]
 8004652:	e003      	b.n	800465c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004654:	2302      	movs	r3, #2
 8004656:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004658:	2300      	movs	r3, #0
 800465a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d902      	bls.n	8004668 <HAL_I2S_Init+0x134>
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	2bff      	cmp	r3, #255	; 0xff
 8004666:	d907      	bls.n	8004678 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466c:	f043 0210 	orr.w	r2, r3, #16
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e08f      	b.n	8004798 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	ea42 0103 	orr.w	r1, r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	430a      	orrs	r2, r1
 800468a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004696:	f023 030f 	bic.w	r3, r3, #15
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6851      	ldr	r1, [r2, #4]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6892      	ldr	r2, [r2, #8]
 80046a2:	4311      	orrs	r1, r2
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	68d2      	ldr	r2, [r2, #12]
 80046a8:	4311      	orrs	r1, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6992      	ldr	r2, [r2, #24]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046ba:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d161      	bne.n	8004788 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a38      	ldr	r2, [pc, #224]	; (80047a8 <HAL_I2S_Init+0x274>)
 80046c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a37      	ldr	r2, [pc, #220]	; (80047ac <HAL_I2S_Init+0x278>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d101      	bne.n	80046d8 <HAL_I2S_Init+0x1a4>
 80046d4:	4b36      	ldr	r3, [pc, #216]	; (80047b0 <HAL_I2S_Init+0x27c>)
 80046d6:	e001      	b.n	80046dc <HAL_I2S_Init+0x1a8>
 80046d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6812      	ldr	r2, [r2, #0]
 80046e2:	4932      	ldr	r1, [pc, #200]	; (80047ac <HAL_I2S_Init+0x278>)
 80046e4:	428a      	cmp	r2, r1
 80046e6:	d101      	bne.n	80046ec <HAL_I2S_Init+0x1b8>
 80046e8:	4a31      	ldr	r2, [pc, #196]	; (80047b0 <HAL_I2S_Init+0x27c>)
 80046ea:	e001      	b.n	80046f0 <HAL_I2S_Init+0x1bc>
 80046ec:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80046f0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80046f4:	f023 030f 	bic.w	r3, r3, #15
 80046f8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a2b      	ldr	r2, [pc, #172]	; (80047ac <HAL_I2S_Init+0x278>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d101      	bne.n	8004708 <HAL_I2S_Init+0x1d4>
 8004704:	4b2a      	ldr	r3, [pc, #168]	; (80047b0 <HAL_I2S_Init+0x27c>)
 8004706:	e001      	b.n	800470c <HAL_I2S_Init+0x1d8>
 8004708:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800470c:	2202      	movs	r2, #2
 800470e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a25      	ldr	r2, [pc, #148]	; (80047ac <HAL_I2S_Init+0x278>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d101      	bne.n	800471e <HAL_I2S_Init+0x1ea>
 800471a:	4b25      	ldr	r3, [pc, #148]	; (80047b0 <HAL_I2S_Init+0x27c>)
 800471c:	e001      	b.n	8004722 <HAL_I2S_Init+0x1ee>
 800471e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800472e:	d003      	beq.n	8004738 <HAL_I2S_Init+0x204>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d103      	bne.n	8004740 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	e001      	b.n	8004744 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004740:	2300      	movs	r3, #0
 8004742:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800474e:	4313      	orrs	r3, r2
 8004750:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004758:	4313      	orrs	r3, r2
 800475a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004762:	4313      	orrs	r3, r2
 8004764:	b29a      	uxth	r2, r3
 8004766:	897b      	ldrh	r3, [r7, #10]
 8004768:	4313      	orrs	r3, r2
 800476a:	b29b      	uxth	r3, r3
 800476c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004770:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a0d      	ldr	r2, [pc, #52]	; (80047ac <HAL_I2S_Init+0x278>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d101      	bne.n	8004780 <HAL_I2S_Init+0x24c>
 800477c:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <HAL_I2S_Init+0x27c>)
 800477e:	e001      	b.n	8004784 <HAL_I2S_Init+0x250>
 8004780:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004784:	897a      	ldrh	r2, [r7, #10]
 8004786:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3720      	adds	r7, #32
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	080048ab 	.word	0x080048ab
 80047a4:	cccccccd 	.word	0xcccccccd
 80047a8:	080049c1 	.word	0x080049c1
 80047ac:	40003800 	.word	0x40003800
 80047b0:	40003400 	.word	0x40003400

080047b4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	881a      	ldrh	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	1c9a      	adds	r2, r3, #2
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004812:	b29b      	uxth	r3, r3
 8004814:	3b01      	subs	r3, #1
 8004816:	b29a      	uxth	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004820:	b29b      	uxth	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10e      	bne.n	8004844 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004834:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff ffb8 	bl	80047b4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004844:	bf00      	nop
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485e:	b292      	uxth	r2, r2
 8004860:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004866:	1c9a      	adds	r2, r3, #2
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004870:	b29b      	uxth	r3, r3
 8004872:	3b01      	subs	r3, #1
 8004874:	b29a      	uxth	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800487e:	b29b      	uxth	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10e      	bne.n	80048a2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004892:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff ff93 	bl	80047c8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b086      	sub	sp, #24
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d13a      	bne.n	800493c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d109      	bne.n	80048e4 <I2S_IRQHandler+0x3a>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048da:	2b40      	cmp	r3, #64	; 0x40
 80048dc:	d102      	bne.n	80048e4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff ffb4 	bl	800484c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ea:	2b40      	cmp	r3, #64	; 0x40
 80048ec:	d126      	bne.n	800493c <I2S_IRQHandler+0x92>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f003 0320 	and.w	r3, r3, #32
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	d11f      	bne.n	800493c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800490a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800490c:	2300      	movs	r3, #0
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	613b      	str	r3, [r7, #16]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	613b      	str	r3, [r7, #16]
 8004920:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492e:	f043 0202 	orr.w	r2, r3, #2
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7ff ff50 	bl	80047dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b03      	cmp	r3, #3
 8004946:	d136      	bne.n	80049b6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b02      	cmp	r3, #2
 8004950:	d109      	bne.n	8004966 <I2S_IRQHandler+0xbc>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495c:	2b80      	cmp	r3, #128	; 0x80
 800495e:	d102      	bne.n	8004966 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7ff ff45 	bl	80047f0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f003 0308 	and.w	r3, r3, #8
 800496c:	2b08      	cmp	r3, #8
 800496e:	d122      	bne.n	80049b6 <I2S_IRQHandler+0x10c>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f003 0320 	and.w	r3, r3, #32
 800497a:	2b20      	cmp	r3, #32
 800497c:	d11b      	bne.n	80049b6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800498c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800498e:	2300      	movs	r3, #0
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a8:	f043 0204 	orr.w	r2, r3, #4
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7ff ff13 	bl	80047dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049b6:	bf00      	nop
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
	...

080049c0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4aa2      	ldr	r2, [pc, #648]	; (8004c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d101      	bne.n	80049de <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80049da:	4ba2      	ldr	r3, [pc, #648]	; (8004c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80049dc:	e001      	b.n	80049e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80049de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a9b      	ldr	r2, [pc, #620]	; (8004c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d101      	bne.n	80049fc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80049f8:	4b9a      	ldr	r3, [pc, #616]	; (8004c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80049fa:	e001      	b.n	8004a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80049fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a0c:	d004      	beq.n	8004a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f040 8099 	bne.w	8004b4a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d107      	bne.n	8004a32 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f925 	bl	8004c7c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d107      	bne.n	8004a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f9c8 	bl	8004ddc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a52:	2b40      	cmp	r3, #64	; 0x40
 8004a54:	d13a      	bne.n	8004acc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	f003 0320 	and.w	r3, r3, #32
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d035      	beq.n	8004acc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a7e      	ldr	r2, [pc, #504]	; (8004c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d101      	bne.n	8004a6e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004a6a:	4b7e      	ldr	r3, [pc, #504]	; (8004c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004a6c:	e001      	b.n	8004a72 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004a6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4979      	ldr	r1, [pc, #484]	; (8004c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004a7a:	428b      	cmp	r3, r1
 8004a7c:	d101      	bne.n	8004a82 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004a7e:	4b79      	ldr	r3, [pc, #484]	; (8004c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004a80:	e001      	b.n	8004a86 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004a82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a8a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a9a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	60fb      	str	r3, [r7, #12]
 8004ab0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abe:	f043 0202 	orr.w	r2, r3, #2
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7ff fe88 	bl	80047dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b08      	cmp	r3, #8
 8004ad4:	f040 80be 	bne.w	8004c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 80b8 	beq.w	8004c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004af2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a59      	ldr	r2, [pc, #356]	; (8004c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d101      	bne.n	8004b02 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004afe:	4b59      	ldr	r3, [pc, #356]	; (8004c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b00:	e001      	b.n	8004b06 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004b02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4954      	ldr	r1, [pc, #336]	; (8004c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b0e:	428b      	cmp	r3, r1
 8004b10:	d101      	bne.n	8004b16 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004b12:	4b54      	ldr	r3, [pc, #336]	; (8004c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b14:	e001      	b.n	8004b1a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004b16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b1e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004b20:	2300      	movs	r3, #0
 8004b22:	60bb      	str	r3, [r7, #8]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	60bb      	str	r3, [r7, #8]
 8004b2c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3a:	f043 0204 	orr.w	r2, r3, #4
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7ff fe4a 	bl	80047dc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b48:	e084      	b.n	8004c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d107      	bne.n	8004b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f8be 	bl	8004ce0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d107      	bne.n	8004b7e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f8fd 	bl	8004d78 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b84:	2b40      	cmp	r3, #64	; 0x40
 8004b86:	d12f      	bne.n	8004be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d02a      	beq.n	8004be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ba0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a2e      	ldr	r2, [pc, #184]	; (8004c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d101      	bne.n	8004bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004bac:	4b2d      	ldr	r3, [pc, #180]	; (8004c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004bae:	e001      	b.n	8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004bb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4929      	ldr	r1, [pc, #164]	; (8004c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004bbc:	428b      	cmp	r3, r1
 8004bbe:	d101      	bne.n	8004bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004bc0:	4b28      	ldr	r3, [pc, #160]	; (8004c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004bc2:	e001      	b.n	8004bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004bc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bcc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bda:	f043 0202 	orr.w	r2, r3, #2
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7ff fdfa 	bl	80047dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d131      	bne.n	8004c56 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	f003 0320 	and.w	r3, r3, #32
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d02c      	beq.n	8004c56 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a17      	ldr	r2, [pc, #92]	; (8004c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d101      	bne.n	8004c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004c06:	4b17      	ldr	r3, [pc, #92]	; (8004c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c08:	e001      	b.n	8004c0e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004c0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4912      	ldr	r1, [pc, #72]	; (8004c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c16:	428b      	cmp	r3, r1
 8004c18:	d101      	bne.n	8004c1e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004c1a:	4b12      	ldr	r3, [pc, #72]	; (8004c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c1c:	e001      	b.n	8004c22 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004c1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c22:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c26:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c36:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c44:	f043 0204 	orr.w	r2, r3, #4
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7ff fdc5 	bl	80047dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c52:	e000      	b.n	8004c56 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c54:	bf00      	nop
}
 8004c56:	bf00      	nop
 8004c58:	3720      	adds	r7, #32
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	40003800 	.word	0x40003800
 8004c64:	40003400 	.word	0x40003400

08004c68 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	1c99      	adds	r1, r3, #2
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6251      	str	r1, [r2, #36]	; 0x24
 8004c8e:	881a      	ldrh	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d113      	bne.n	8004cd6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cbc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d106      	bne.n	8004cd6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7ff ffc9 	bl	8004c68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cd6:	bf00      	nop
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
	...

08004ce0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	1c99      	adds	r1, r3, #2
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	6251      	str	r1, [r2, #36]	; 0x24
 8004cf2:	8819      	ldrh	r1, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a1d      	ldr	r2, [pc, #116]	; (8004d70 <I2SEx_TxISR_I2SExt+0x90>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d101      	bne.n	8004d02 <I2SEx_TxISR_I2SExt+0x22>
 8004cfe:	4b1d      	ldr	r3, [pc, #116]	; (8004d74 <I2SEx_TxISR_I2SExt+0x94>)
 8004d00:	e001      	b.n	8004d06 <I2SEx_TxISR_I2SExt+0x26>
 8004d02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d06:	460a      	mov	r2, r1
 8004d08:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d121      	bne.n	8004d66 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a12      	ldr	r2, [pc, #72]	; (8004d70 <I2SEx_TxISR_I2SExt+0x90>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d101      	bne.n	8004d30 <I2SEx_TxISR_I2SExt+0x50>
 8004d2c:	4b11      	ldr	r3, [pc, #68]	; (8004d74 <I2SEx_TxISR_I2SExt+0x94>)
 8004d2e:	e001      	b.n	8004d34 <I2SEx_TxISR_I2SExt+0x54>
 8004d30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	490d      	ldr	r1, [pc, #52]	; (8004d70 <I2SEx_TxISR_I2SExt+0x90>)
 8004d3c:	428b      	cmp	r3, r1
 8004d3e:	d101      	bne.n	8004d44 <I2SEx_TxISR_I2SExt+0x64>
 8004d40:	4b0c      	ldr	r3, [pc, #48]	; (8004d74 <I2SEx_TxISR_I2SExt+0x94>)
 8004d42:	e001      	b.n	8004d48 <I2SEx_TxISR_I2SExt+0x68>
 8004d44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d4c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d106      	bne.n	8004d66 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7ff ff81 	bl	8004c68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d66:	bf00      	nop
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	40003800 	.word	0x40003800
 8004d74:	40003400 	.word	0x40003400

08004d78 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68d8      	ldr	r0, [r3, #12]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8a:	1c99      	adds	r1, r3, #2
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004d90:	b282      	uxth	r2, r0
 8004d92:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d113      	bne.n	8004dd4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004dba:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d106      	bne.n	8004dd4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7ff ff4a 	bl	8004c68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004dd4:	bf00      	nop
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a20      	ldr	r2, [pc, #128]	; (8004e6c <I2SEx_RxISR_I2SExt+0x90>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d101      	bne.n	8004df2 <I2SEx_RxISR_I2SExt+0x16>
 8004dee:	4b20      	ldr	r3, [pc, #128]	; (8004e70 <I2SEx_RxISR_I2SExt+0x94>)
 8004df0:	e001      	b.n	8004df6 <I2SEx_RxISR_I2SExt+0x1a>
 8004df2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004df6:	68d8      	ldr	r0, [r3, #12]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfc:	1c99      	adds	r1, r3, #2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004e02:	b282      	uxth	r2, r0
 8004e04:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d121      	bne.n	8004e62 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a12      	ldr	r2, [pc, #72]	; (8004e6c <I2SEx_RxISR_I2SExt+0x90>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d101      	bne.n	8004e2c <I2SEx_RxISR_I2SExt+0x50>
 8004e28:	4b11      	ldr	r3, [pc, #68]	; (8004e70 <I2SEx_RxISR_I2SExt+0x94>)
 8004e2a:	e001      	b.n	8004e30 <I2SEx_RxISR_I2SExt+0x54>
 8004e2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	490d      	ldr	r1, [pc, #52]	; (8004e6c <I2SEx_RxISR_I2SExt+0x90>)
 8004e38:	428b      	cmp	r3, r1
 8004e3a:	d101      	bne.n	8004e40 <I2SEx_RxISR_I2SExt+0x64>
 8004e3c:	4b0c      	ldr	r3, [pc, #48]	; (8004e70 <I2SEx_RxISR_I2SExt+0x94>)
 8004e3e:	e001      	b.n	8004e44 <I2SEx_RxISR_I2SExt+0x68>
 8004e40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e44:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e48:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d106      	bne.n	8004e62 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7ff ff03 	bl	8004c68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e62:	bf00      	nop
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40003800 	.word	0x40003800
 8004e70:	40003400 	.word	0x40003400

08004e74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e264      	b.n	8005350 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d075      	beq.n	8004f7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e92:	4ba3      	ldr	r3, [pc, #652]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 030c 	and.w	r3, r3, #12
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d00c      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e9e:	4ba0      	ldr	r3, [pc, #640]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d112      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eaa:	4b9d      	ldr	r3, [pc, #628]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eb6:	d10b      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eb8:	4b99      	ldr	r3, [pc, #612]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d05b      	beq.n	8004f7c <HAL_RCC_OscConfig+0x108>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d157      	bne.n	8004f7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e23f      	b.n	8005350 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed8:	d106      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x74>
 8004eda:	4b91      	ldr	r3, [pc, #580]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a90      	ldr	r2, [pc, #576]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 8004ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	e01d      	b.n	8004f24 <HAL_RCC_OscConfig+0xb0>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ef0:	d10c      	bne.n	8004f0c <HAL_RCC_OscConfig+0x98>
 8004ef2:	4b8b      	ldr	r3, [pc, #556]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a8a      	ldr	r2, [pc, #552]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 8004ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	4b88      	ldr	r3, [pc, #544]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a87      	ldr	r2, [pc, #540]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 8004f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	e00b      	b.n	8004f24 <HAL_RCC_OscConfig+0xb0>
 8004f0c:	4b84      	ldr	r3, [pc, #528]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a83      	ldr	r2, [pc, #524]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 8004f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f16:	6013      	str	r3, [r2, #0]
 8004f18:	4b81      	ldr	r3, [pc, #516]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a80      	ldr	r2, [pc, #512]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 8004f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d013      	beq.n	8004f54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2c:	f7fd fa74 	bl	8002418 <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f34:	f7fd fa70 	bl	8002418 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b64      	cmp	r3, #100	; 0x64
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e204      	b.n	8005350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f46:	4b76      	ldr	r3, [pc, #472]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d0f0      	beq.n	8004f34 <HAL_RCC_OscConfig+0xc0>
 8004f52:	e014      	b.n	8004f7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f54:	f7fd fa60 	bl	8002418 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f5c:	f7fd fa5c 	bl	8002418 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b64      	cmp	r3, #100	; 0x64
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e1f0      	b.n	8005350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f6e:	4b6c      	ldr	r3, [pc, #432]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1f0      	bne.n	8004f5c <HAL_RCC_OscConfig+0xe8>
 8004f7a:	e000      	b.n	8004f7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d063      	beq.n	8005052 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f8a:	4b65      	ldr	r3, [pc, #404]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f003 030c 	and.w	r3, r3, #12
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00b      	beq.n	8004fae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f96:	4b62      	ldr	r3, [pc, #392]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f9e:	2b08      	cmp	r3, #8
 8004fa0:	d11c      	bne.n	8004fdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fa2:	4b5f      	ldr	r3, [pc, #380]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d116      	bne.n	8004fdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fae:	4b5c      	ldr	r3, [pc, #368]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d005      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x152>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d001      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e1c4      	b.n	8005350 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fc6:	4b56      	ldr	r3, [pc, #344]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	4952      	ldr	r1, [pc, #328]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fda:	e03a      	b.n	8005052 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d020      	beq.n	8005026 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fe4:	4b4f      	ldr	r3, [pc, #316]	; (8005124 <HAL_RCC_OscConfig+0x2b0>)
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fea:	f7fd fa15 	bl	8002418 <HAL_GetTick>
 8004fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ff2:	f7fd fa11 	bl	8002418 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e1a5      	b.n	8005350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005004:	4b46      	ldr	r3, [pc, #280]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0f0      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005010:	4b43      	ldr	r3, [pc, #268]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	4940      	ldr	r1, [pc, #256]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 8005020:	4313      	orrs	r3, r2
 8005022:	600b      	str	r3, [r1, #0]
 8005024:	e015      	b.n	8005052 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005026:	4b3f      	ldr	r3, [pc, #252]	; (8005124 <HAL_RCC_OscConfig+0x2b0>)
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502c:	f7fd f9f4 	bl	8002418 <HAL_GetTick>
 8005030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005034:	f7fd f9f0 	bl	8002418 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e184      	b.n	8005350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005046:	4b36      	ldr	r3, [pc, #216]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1f0      	bne.n	8005034 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0308 	and.w	r3, r3, #8
 800505a:	2b00      	cmp	r3, #0
 800505c:	d030      	beq.n	80050c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d016      	beq.n	8005094 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005066:	4b30      	ldr	r3, [pc, #192]	; (8005128 <HAL_RCC_OscConfig+0x2b4>)
 8005068:	2201      	movs	r2, #1
 800506a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800506c:	f7fd f9d4 	bl	8002418 <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005074:	f7fd f9d0 	bl	8002418 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e164      	b.n	8005350 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005086:	4b26      	ldr	r3, [pc, #152]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 8005088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0f0      	beq.n	8005074 <HAL_RCC_OscConfig+0x200>
 8005092:	e015      	b.n	80050c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005094:	4b24      	ldr	r3, [pc, #144]	; (8005128 <HAL_RCC_OscConfig+0x2b4>)
 8005096:	2200      	movs	r2, #0
 8005098:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800509a:	f7fd f9bd 	bl	8002418 <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050a0:	e008      	b.n	80050b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050a2:	f7fd f9b9 	bl	8002418 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e14d      	b.n	8005350 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050b4:	4b1a      	ldr	r3, [pc, #104]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 80050b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1f0      	bne.n	80050a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 80a0 	beq.w	800520e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ce:	2300      	movs	r3, #0
 80050d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050d2:	4b13      	ldr	r3, [pc, #76]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10f      	bne.n	80050fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050de:	2300      	movs	r3, #0
 80050e0:	60bb      	str	r3, [r7, #8]
 80050e2:	4b0f      	ldr	r3, [pc, #60]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	4a0e      	ldr	r2, [pc, #56]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 80050e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ec:	6413      	str	r3, [r2, #64]	; 0x40
 80050ee:	4b0c      	ldr	r3, [pc, #48]	; (8005120 <HAL_RCC_OscConfig+0x2ac>)
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f6:	60bb      	str	r3, [r7, #8]
 80050f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050fa:	2301      	movs	r3, #1
 80050fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050fe:	4b0b      	ldr	r3, [pc, #44]	; (800512c <HAL_RCC_OscConfig+0x2b8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005106:	2b00      	cmp	r3, #0
 8005108:	d121      	bne.n	800514e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800510a:	4b08      	ldr	r3, [pc, #32]	; (800512c <HAL_RCC_OscConfig+0x2b8>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a07      	ldr	r2, [pc, #28]	; (800512c <HAL_RCC_OscConfig+0x2b8>)
 8005110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005116:	f7fd f97f 	bl	8002418 <HAL_GetTick>
 800511a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800511c:	e011      	b.n	8005142 <HAL_RCC_OscConfig+0x2ce>
 800511e:	bf00      	nop
 8005120:	40023800 	.word	0x40023800
 8005124:	42470000 	.word	0x42470000
 8005128:	42470e80 	.word	0x42470e80
 800512c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005130:	f7fd f972 	bl	8002418 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e106      	b.n	8005350 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005142:	4b85      	ldr	r3, [pc, #532]	; (8005358 <HAL_RCC_OscConfig+0x4e4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800514a:	2b00      	cmp	r3, #0
 800514c:	d0f0      	beq.n	8005130 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d106      	bne.n	8005164 <HAL_RCC_OscConfig+0x2f0>
 8005156:	4b81      	ldr	r3, [pc, #516]	; (800535c <HAL_RCC_OscConfig+0x4e8>)
 8005158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515a:	4a80      	ldr	r2, [pc, #512]	; (800535c <HAL_RCC_OscConfig+0x4e8>)
 800515c:	f043 0301 	orr.w	r3, r3, #1
 8005160:	6713      	str	r3, [r2, #112]	; 0x70
 8005162:	e01c      	b.n	800519e <HAL_RCC_OscConfig+0x32a>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	2b05      	cmp	r3, #5
 800516a:	d10c      	bne.n	8005186 <HAL_RCC_OscConfig+0x312>
 800516c:	4b7b      	ldr	r3, [pc, #492]	; (800535c <HAL_RCC_OscConfig+0x4e8>)
 800516e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005170:	4a7a      	ldr	r2, [pc, #488]	; (800535c <HAL_RCC_OscConfig+0x4e8>)
 8005172:	f043 0304 	orr.w	r3, r3, #4
 8005176:	6713      	str	r3, [r2, #112]	; 0x70
 8005178:	4b78      	ldr	r3, [pc, #480]	; (800535c <HAL_RCC_OscConfig+0x4e8>)
 800517a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517c:	4a77      	ldr	r2, [pc, #476]	; (800535c <HAL_RCC_OscConfig+0x4e8>)
 800517e:	f043 0301 	orr.w	r3, r3, #1
 8005182:	6713      	str	r3, [r2, #112]	; 0x70
 8005184:	e00b      	b.n	800519e <HAL_RCC_OscConfig+0x32a>
 8005186:	4b75      	ldr	r3, [pc, #468]	; (800535c <HAL_RCC_OscConfig+0x4e8>)
 8005188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518a:	4a74      	ldr	r2, [pc, #464]	; (800535c <HAL_RCC_OscConfig+0x4e8>)
 800518c:	f023 0301 	bic.w	r3, r3, #1
 8005190:	6713      	str	r3, [r2, #112]	; 0x70
 8005192:	4b72      	ldr	r3, [pc, #456]	; (800535c <HAL_RCC_OscConfig+0x4e8>)
 8005194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005196:	4a71      	ldr	r2, [pc, #452]	; (800535c <HAL_RCC_OscConfig+0x4e8>)
 8005198:	f023 0304 	bic.w	r3, r3, #4
 800519c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d015      	beq.n	80051d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a6:	f7fd f937 	bl	8002418 <HAL_GetTick>
 80051aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ac:	e00a      	b.n	80051c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051ae:	f7fd f933 	bl	8002418 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051bc:	4293      	cmp	r3, r2
 80051be:	d901      	bls.n	80051c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e0c5      	b.n	8005350 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c4:	4b65      	ldr	r3, [pc, #404]	; (800535c <HAL_RCC_OscConfig+0x4e8>)
 80051c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0ee      	beq.n	80051ae <HAL_RCC_OscConfig+0x33a>
 80051d0:	e014      	b.n	80051fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051d2:	f7fd f921 	bl	8002418 <HAL_GetTick>
 80051d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051d8:	e00a      	b.n	80051f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051da:	f7fd f91d 	bl	8002418 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e0af      	b.n	8005350 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051f0:	4b5a      	ldr	r3, [pc, #360]	; (800535c <HAL_RCC_OscConfig+0x4e8>)
 80051f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1ee      	bne.n	80051da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051fc:	7dfb      	ldrb	r3, [r7, #23]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d105      	bne.n	800520e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005202:	4b56      	ldr	r3, [pc, #344]	; (800535c <HAL_RCC_OscConfig+0x4e8>)
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	4a55      	ldr	r2, [pc, #340]	; (800535c <HAL_RCC_OscConfig+0x4e8>)
 8005208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800520c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 809b 	beq.w	800534e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005218:	4b50      	ldr	r3, [pc, #320]	; (800535c <HAL_RCC_OscConfig+0x4e8>)
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f003 030c 	and.w	r3, r3, #12
 8005220:	2b08      	cmp	r3, #8
 8005222:	d05c      	beq.n	80052de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	2b02      	cmp	r3, #2
 800522a:	d141      	bne.n	80052b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800522c:	4b4c      	ldr	r3, [pc, #304]	; (8005360 <HAL_RCC_OscConfig+0x4ec>)
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005232:	f7fd f8f1 	bl	8002418 <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005238:	e008      	b.n	800524c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800523a:	f7fd f8ed 	bl	8002418 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e081      	b.n	8005350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800524c:	4b43      	ldr	r3, [pc, #268]	; (800535c <HAL_RCC_OscConfig+0x4e8>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1f0      	bne.n	800523a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	431a      	orrs	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	019b      	lsls	r3, r3, #6
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526e:	085b      	lsrs	r3, r3, #1
 8005270:	3b01      	subs	r3, #1
 8005272:	041b      	lsls	r3, r3, #16
 8005274:	431a      	orrs	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527a:	061b      	lsls	r3, r3, #24
 800527c:	4937      	ldr	r1, [pc, #220]	; (800535c <HAL_RCC_OscConfig+0x4e8>)
 800527e:	4313      	orrs	r3, r2
 8005280:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005282:	4b37      	ldr	r3, [pc, #220]	; (8005360 <HAL_RCC_OscConfig+0x4ec>)
 8005284:	2201      	movs	r2, #1
 8005286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005288:	f7fd f8c6 	bl	8002418 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005290:	f7fd f8c2 	bl	8002418 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e056      	b.n	8005350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a2:	4b2e      	ldr	r3, [pc, #184]	; (800535c <HAL_RCC_OscConfig+0x4e8>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0f0      	beq.n	8005290 <HAL_RCC_OscConfig+0x41c>
 80052ae:	e04e      	b.n	800534e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052b0:	4b2b      	ldr	r3, [pc, #172]	; (8005360 <HAL_RCC_OscConfig+0x4ec>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b6:	f7fd f8af 	bl	8002418 <HAL_GetTick>
 80052ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052bc:	e008      	b.n	80052d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052be:	f7fd f8ab 	bl	8002418 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e03f      	b.n	8005350 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052d0:	4b22      	ldr	r3, [pc, #136]	; (800535c <HAL_RCC_OscConfig+0x4e8>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1f0      	bne.n	80052be <HAL_RCC_OscConfig+0x44a>
 80052dc:	e037      	b.n	800534e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e032      	b.n	8005350 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052ea:	4b1c      	ldr	r3, [pc, #112]	; (800535c <HAL_RCC_OscConfig+0x4e8>)
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d028      	beq.n	800534a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005302:	429a      	cmp	r2, r3
 8005304:	d121      	bne.n	800534a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005310:	429a      	cmp	r2, r3
 8005312:	d11a      	bne.n	800534a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800531a:	4013      	ands	r3, r2
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005320:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005322:	4293      	cmp	r3, r2
 8005324:	d111      	bne.n	800534a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005330:	085b      	lsrs	r3, r3, #1
 8005332:	3b01      	subs	r3, #1
 8005334:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005336:	429a      	cmp	r2, r3
 8005338:	d107      	bne.n	800534a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005346:	429a      	cmp	r2, r3
 8005348:	d001      	beq.n	800534e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e000      	b.n	8005350 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	40007000 	.word	0x40007000
 800535c:	40023800 	.word	0x40023800
 8005360:	42470060 	.word	0x42470060

08005364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e0cc      	b.n	8005512 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005378:	4b68      	ldr	r3, [pc, #416]	; (800551c <HAL_RCC_ClockConfig+0x1b8>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d90c      	bls.n	80053a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005386:	4b65      	ldr	r3, [pc, #404]	; (800551c <HAL_RCC_ClockConfig+0x1b8>)
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	b2d2      	uxtb	r2, r2
 800538c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800538e:	4b63      	ldr	r3, [pc, #396]	; (800551c <HAL_RCC_ClockConfig+0x1b8>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d001      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e0b8      	b.n	8005512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d020      	beq.n	80053ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053b8:	4b59      	ldr	r3, [pc, #356]	; (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	4a58      	ldr	r2, [pc, #352]	; (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 80053be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0308 	and.w	r3, r3, #8
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d005      	beq.n	80053dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053d0:	4b53      	ldr	r3, [pc, #332]	; (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	4a52      	ldr	r2, [pc, #328]	; (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 80053d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053dc:	4b50      	ldr	r3, [pc, #320]	; (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	494d      	ldr	r1, [pc, #308]	; (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d044      	beq.n	8005484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d107      	bne.n	8005412 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005402:	4b47      	ldr	r3, [pc, #284]	; (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d119      	bne.n	8005442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e07f      	b.n	8005512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2b02      	cmp	r3, #2
 8005418:	d003      	beq.n	8005422 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800541e:	2b03      	cmp	r3, #3
 8005420:	d107      	bne.n	8005432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005422:	4b3f      	ldr	r3, [pc, #252]	; (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d109      	bne.n	8005442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e06f      	b.n	8005512 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005432:	4b3b      	ldr	r3, [pc, #236]	; (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e067      	b.n	8005512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005442:	4b37      	ldr	r3, [pc, #220]	; (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f023 0203 	bic.w	r2, r3, #3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	4934      	ldr	r1, [pc, #208]	; (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 8005450:	4313      	orrs	r3, r2
 8005452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005454:	f7fc ffe0 	bl	8002418 <HAL_GetTick>
 8005458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800545a:	e00a      	b.n	8005472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800545c:	f7fc ffdc 	bl	8002418 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	f241 3288 	movw	r2, #5000	; 0x1388
 800546a:	4293      	cmp	r3, r2
 800546c:	d901      	bls.n	8005472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e04f      	b.n	8005512 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005472:	4b2b      	ldr	r3, [pc, #172]	; (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 020c 	and.w	r2, r3, #12
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	429a      	cmp	r2, r3
 8005482:	d1eb      	bne.n	800545c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005484:	4b25      	ldr	r3, [pc, #148]	; (800551c <HAL_RCC_ClockConfig+0x1b8>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0307 	and.w	r3, r3, #7
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	429a      	cmp	r2, r3
 8005490:	d20c      	bcs.n	80054ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005492:	4b22      	ldr	r3, [pc, #136]	; (800551c <HAL_RCC_ClockConfig+0x1b8>)
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800549a:	4b20      	ldr	r3, [pc, #128]	; (800551c <HAL_RCC_ClockConfig+0x1b8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0307 	and.w	r3, r3, #7
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d001      	beq.n	80054ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e032      	b.n	8005512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d008      	beq.n	80054ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054b8:	4b19      	ldr	r3, [pc, #100]	; (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	4916      	ldr	r1, [pc, #88]	; (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0308 	and.w	r3, r3, #8
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d009      	beq.n	80054ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054d6:	4b12      	ldr	r3, [pc, #72]	; (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	490e      	ldr	r1, [pc, #56]	; (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054ea:	f000 f821 	bl	8005530 <HAL_RCC_GetSysClockFreq>
 80054ee:	4602      	mov	r2, r0
 80054f0:	4b0b      	ldr	r3, [pc, #44]	; (8005520 <HAL_RCC_ClockConfig+0x1bc>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	091b      	lsrs	r3, r3, #4
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	490a      	ldr	r1, [pc, #40]	; (8005524 <HAL_RCC_ClockConfig+0x1c0>)
 80054fc:	5ccb      	ldrb	r3, [r1, r3]
 80054fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005502:	4a09      	ldr	r2, [pc, #36]	; (8005528 <HAL_RCC_ClockConfig+0x1c4>)
 8005504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005506:	4b09      	ldr	r3, [pc, #36]	; (800552c <HAL_RCC_ClockConfig+0x1c8>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4618      	mov	r0, r3
 800550c:	f7fc ff40 	bl	8002390 <HAL_InitTick>

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	40023c00 	.word	0x40023c00
 8005520:	40023800 	.word	0x40023800
 8005524:	0800b178 	.word	0x0800b178
 8005528:	20000008 	.word	0x20000008
 800552c:	2000000c 	.word	0x2000000c

08005530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005530:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005534:	b084      	sub	sp, #16
 8005536:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	607b      	str	r3, [r7, #4]
 800553c:	2300      	movs	r3, #0
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	2300      	movs	r3, #0
 8005542:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005544:	2300      	movs	r3, #0
 8005546:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005548:	4b67      	ldr	r3, [pc, #412]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f003 030c 	and.w	r3, r3, #12
 8005550:	2b08      	cmp	r3, #8
 8005552:	d00d      	beq.n	8005570 <HAL_RCC_GetSysClockFreq+0x40>
 8005554:	2b08      	cmp	r3, #8
 8005556:	f200 80bd 	bhi.w	80056d4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800555a:	2b00      	cmp	r3, #0
 800555c:	d002      	beq.n	8005564 <HAL_RCC_GetSysClockFreq+0x34>
 800555e:	2b04      	cmp	r3, #4
 8005560:	d003      	beq.n	800556a <HAL_RCC_GetSysClockFreq+0x3a>
 8005562:	e0b7      	b.n	80056d4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005564:	4b61      	ldr	r3, [pc, #388]	; (80056ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005566:	60bb      	str	r3, [r7, #8]
       break;
 8005568:	e0b7      	b.n	80056da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800556a:	4b61      	ldr	r3, [pc, #388]	; (80056f0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800556c:	60bb      	str	r3, [r7, #8]
      break;
 800556e:	e0b4      	b.n	80056da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005570:	4b5d      	ldr	r3, [pc, #372]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005578:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800557a:	4b5b      	ldr	r3, [pc, #364]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d04d      	beq.n	8005622 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005586:	4b58      	ldr	r3, [pc, #352]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	099b      	lsrs	r3, r3, #6
 800558c:	461a      	mov	r2, r3
 800558e:	f04f 0300 	mov.w	r3, #0
 8005592:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005596:	f04f 0100 	mov.w	r1, #0
 800559a:	ea02 0800 	and.w	r8, r2, r0
 800559e:	ea03 0901 	and.w	r9, r3, r1
 80055a2:	4640      	mov	r0, r8
 80055a4:	4649      	mov	r1, r9
 80055a6:	f04f 0200 	mov.w	r2, #0
 80055aa:	f04f 0300 	mov.w	r3, #0
 80055ae:	014b      	lsls	r3, r1, #5
 80055b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80055b4:	0142      	lsls	r2, r0, #5
 80055b6:	4610      	mov	r0, r2
 80055b8:	4619      	mov	r1, r3
 80055ba:	ebb0 0008 	subs.w	r0, r0, r8
 80055be:	eb61 0109 	sbc.w	r1, r1, r9
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	f04f 0300 	mov.w	r3, #0
 80055ca:	018b      	lsls	r3, r1, #6
 80055cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80055d0:	0182      	lsls	r2, r0, #6
 80055d2:	1a12      	subs	r2, r2, r0
 80055d4:	eb63 0301 	sbc.w	r3, r3, r1
 80055d8:	f04f 0000 	mov.w	r0, #0
 80055dc:	f04f 0100 	mov.w	r1, #0
 80055e0:	00d9      	lsls	r1, r3, #3
 80055e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055e6:	00d0      	lsls	r0, r2, #3
 80055e8:	4602      	mov	r2, r0
 80055ea:	460b      	mov	r3, r1
 80055ec:	eb12 0208 	adds.w	r2, r2, r8
 80055f0:	eb43 0309 	adc.w	r3, r3, r9
 80055f4:	f04f 0000 	mov.w	r0, #0
 80055f8:	f04f 0100 	mov.w	r1, #0
 80055fc:	0259      	lsls	r1, r3, #9
 80055fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005602:	0250      	lsls	r0, r2, #9
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	4610      	mov	r0, r2
 800560a:	4619      	mov	r1, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	461a      	mov	r2, r3
 8005610:	f04f 0300 	mov.w	r3, #0
 8005614:	f7fa fe2c 	bl	8000270 <__aeabi_uldivmod>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	4613      	mov	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	e04a      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005622:	4b31      	ldr	r3, [pc, #196]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	099b      	lsrs	r3, r3, #6
 8005628:	461a      	mov	r2, r3
 800562a:	f04f 0300 	mov.w	r3, #0
 800562e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005632:	f04f 0100 	mov.w	r1, #0
 8005636:	ea02 0400 	and.w	r4, r2, r0
 800563a:	ea03 0501 	and.w	r5, r3, r1
 800563e:	4620      	mov	r0, r4
 8005640:	4629      	mov	r1, r5
 8005642:	f04f 0200 	mov.w	r2, #0
 8005646:	f04f 0300 	mov.w	r3, #0
 800564a:	014b      	lsls	r3, r1, #5
 800564c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005650:	0142      	lsls	r2, r0, #5
 8005652:	4610      	mov	r0, r2
 8005654:	4619      	mov	r1, r3
 8005656:	1b00      	subs	r0, r0, r4
 8005658:	eb61 0105 	sbc.w	r1, r1, r5
 800565c:	f04f 0200 	mov.w	r2, #0
 8005660:	f04f 0300 	mov.w	r3, #0
 8005664:	018b      	lsls	r3, r1, #6
 8005666:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800566a:	0182      	lsls	r2, r0, #6
 800566c:	1a12      	subs	r2, r2, r0
 800566e:	eb63 0301 	sbc.w	r3, r3, r1
 8005672:	f04f 0000 	mov.w	r0, #0
 8005676:	f04f 0100 	mov.w	r1, #0
 800567a:	00d9      	lsls	r1, r3, #3
 800567c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005680:	00d0      	lsls	r0, r2, #3
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	1912      	adds	r2, r2, r4
 8005688:	eb45 0303 	adc.w	r3, r5, r3
 800568c:	f04f 0000 	mov.w	r0, #0
 8005690:	f04f 0100 	mov.w	r1, #0
 8005694:	0299      	lsls	r1, r3, #10
 8005696:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800569a:	0290      	lsls	r0, r2, #10
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	4610      	mov	r0, r2
 80056a2:	4619      	mov	r1, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	461a      	mov	r2, r3
 80056a8:	f04f 0300 	mov.w	r3, #0
 80056ac:	f7fa fde0 	bl	8000270 <__aeabi_uldivmod>
 80056b0:	4602      	mov	r2, r0
 80056b2:	460b      	mov	r3, r1
 80056b4:	4613      	mov	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056b8:	4b0b      	ldr	r3, [pc, #44]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	0c1b      	lsrs	r3, r3, #16
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	3301      	adds	r3, #1
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d0:	60bb      	str	r3, [r7, #8]
      break;
 80056d2:	e002      	b.n	80056da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056d4:	4b05      	ldr	r3, [pc, #20]	; (80056ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 80056d6:	60bb      	str	r3, [r7, #8]
      break;
 80056d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056da:	68bb      	ldr	r3, [r7, #8]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80056e6:	bf00      	nop
 80056e8:	40023800 	.word	0x40023800
 80056ec:	00f42400 	.word	0x00f42400
 80056f0:	007a1200 	.word	0x007a1200

080056f4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d105      	bne.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005718:	2b00      	cmp	r3, #0
 800571a:	d035      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800571c:	4b62      	ldr	r3, [pc, #392]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800571e:	2200      	movs	r2, #0
 8005720:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005722:	f7fc fe79 	bl	8002418 <HAL_GetTick>
 8005726:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005728:	e008      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800572a:	f7fc fe75 	bl	8002418 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d901      	bls.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e0b0      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800573c:	4b5b      	ldr	r3, [pc, #364]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1f0      	bne.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	019a      	lsls	r2, r3, #6
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	071b      	lsls	r3, r3, #28
 8005754:	4955      	ldr	r1, [pc, #340]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005756:	4313      	orrs	r3, r2
 8005758:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800575c:	4b52      	ldr	r3, [pc, #328]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800575e:	2201      	movs	r2, #1
 8005760:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005762:	f7fc fe59 	bl	8002418 <HAL_GetTick>
 8005766:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005768:	e008      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800576a:	f7fc fe55 	bl	8002418 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d901      	bls.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e090      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800577c:	4b4b      	ldr	r3, [pc, #300]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d0f0      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 8083 	beq.w	800589c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005796:	2300      	movs	r3, #0
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	4b44      	ldr	r3, [pc, #272]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800579c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579e:	4a43      	ldr	r2, [pc, #268]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a4:	6413      	str	r3, [r2, #64]	; 0x40
 80057a6:	4b41      	ldr	r3, [pc, #260]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ae:	60fb      	str	r3, [r7, #12]
 80057b0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80057b2:	4b3f      	ldr	r3, [pc, #252]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a3e      	ldr	r2, [pc, #248]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80057be:	f7fc fe2b 	bl	8002418 <HAL_GetTick>
 80057c2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057c4:	e008      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057c6:	f7fc fe27 	bl	8002418 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d901      	bls.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e062      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057d8:	4b35      	ldr	r3, [pc, #212]	; (80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d0f0      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057e4:	4b31      	ldr	r3, [pc, #196]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d02f      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d028      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005802:	4b2a      	ldr	r3, [pc, #168]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800580a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800580c:	4b29      	ldr	r3, [pc, #164]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800580e:	2201      	movs	r2, #1
 8005810:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005812:	4b28      	ldr	r3, [pc, #160]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005818:	4a24      	ldr	r2, [pc, #144]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800581e:	4b23      	ldr	r3, [pc, #140]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b01      	cmp	r3, #1
 8005828:	d114      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800582a:	f7fc fdf5 	bl	8002418 <HAL_GetTick>
 800582e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005830:	e00a      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005832:	f7fc fdf1 	bl	8002418 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005840:	4293      	cmp	r3, r2
 8005842:	d901      	bls.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e02a      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005848:	4b18      	ldr	r3, [pc, #96]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800584a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0ee      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800585c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005860:	d10d      	bne.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005862:	4b12      	ldr	r3, [pc, #72]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005876:	490d      	ldr	r1, [pc, #52]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005878:	4313      	orrs	r3, r2
 800587a:	608b      	str	r3, [r1, #8]
 800587c:	e005      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800587e:	4b0b      	ldr	r3, [pc, #44]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	4a0a      	ldr	r2, [pc, #40]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005884:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005888:	6093      	str	r3, [r2, #8]
 800588a:	4b08      	ldr	r3, [pc, #32]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800588c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005896:	4905      	ldr	r1, [pc, #20]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005898:	4313      	orrs	r3, r2
 800589a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3718      	adds	r7, #24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	42470068 	.word	0x42470068
 80058ac:	40023800 	.word	0x40023800
 80058b0:	40007000 	.word	0x40007000
 80058b4:	42470e40 	.word	0x42470e40

080058b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80058c0:	2300      	movs	r3, #0
 80058c2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d13e      	bne.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80058d6:	4b23      	ldr	r3, [pc, #140]	; (8005964 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d005      	beq.n	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d12f      	bne.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80058ec:	4b1e      	ldr	r3, [pc, #120]	; (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80058ee:	617b      	str	r3, [r7, #20]
          break;
 80058f0:	e02f      	b.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80058f2:	4b1c      	ldr	r3, [pc, #112]	; (8005964 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058fe:	d108      	bne.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005900:	4b18      	ldr	r3, [pc, #96]	; (8005964 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005908:	4a18      	ldr	r2, [pc, #96]	; (800596c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800590a:	fbb2 f3f3 	udiv	r3, r2, r3
 800590e:	613b      	str	r3, [r7, #16]
 8005910:	e007      	b.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005912:	4b14      	ldr	r3, [pc, #80]	; (8005964 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800591a:	4a15      	ldr	r2, [pc, #84]	; (8005970 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800591c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005920:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005922:	4b10      	ldr	r3, [pc, #64]	; (8005964 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005924:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005928:	099b      	lsrs	r3, r3, #6
 800592a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	fb02 f303 	mul.w	r3, r2, r3
 8005934:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005936:	4b0b      	ldr	r3, [pc, #44]	; (8005964 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800593c:	0f1b      	lsrs	r3, r3, #28
 800593e:	f003 0307 	and.w	r3, r3, #7
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	fbb2 f3f3 	udiv	r3, r2, r3
 8005948:	617b      	str	r3, [r7, #20]
          break;
 800594a:	e002      	b.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	617b      	str	r3, [r7, #20]
          break;
 8005950:	bf00      	nop
        }
      }
      break;
 8005952:	bf00      	nop
    }
  }
  return frequency;
 8005954:	697b      	ldr	r3, [r7, #20]
}
 8005956:	4618      	mov	r0, r3
 8005958:	371c      	adds	r7, #28
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	40023800 	.word	0x40023800
 8005968:	00bb8000 	.word	0x00bb8000
 800596c:	007a1200 	.word	0x007a1200
 8005970:	00f42400 	.word	0x00f42400

08005974 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e01c      	b.n	80059c0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	795b      	ldrb	r3, [r3, #5]
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d105      	bne.n	800599c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7fc fa90 	bl	8001ebc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f042 0204 	orr.w	r2, r2, #4
 80059b0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	791b      	ldrb	r3, [r3, #4]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d101      	bne.n	80059e2 <HAL_RNG_GenerateRandomNumber+0x1a>
 80059de:	2302      	movs	r3, #2
 80059e0:	e03d      	b.n	8005a5e <HAL_RNG_GenerateRandomNumber+0x96>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	795b      	ldrb	r3, [r3, #5]
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d12c      	bne.n	8005a4c <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2202      	movs	r2, #2
 80059f6:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059f8:	f7fc fd0e 	bl	8002418 <HAL_GetTick>
 80059fc:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80059fe:	e011      	b.n	8005a24 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005a00:	f7fc fd0a 	bl	8002418 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d90a      	bls.n	8005a24 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e01c      	b.n	8005a5e <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d1e6      	bne.n	8005a00 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68da      	ldr	r2, [r3, #12]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	715a      	strb	r2, [r3, #5]
 8005a4a:	e004      	b.n	8005a56 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2204      	movs	r2, #4
 8005a50:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	711a      	strb	r2, [r3, #4]

  return status;
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b082      	sub	sp, #8
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	330c      	adds	r3, #12
 8005a72:	4619      	mov	r1, r3
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7ff ffa7 	bl	80059c8 <HAL_RNG_GenerateRandomNumber>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d102      	bne.n	8005a86 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	e000      	b.n	8005a88 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8005a86:	2300      	movs	r3, #0
  }
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e07b      	b.n	8005b9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d108      	bne.n	8005abc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ab2:	d009      	beq.n	8005ac8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	61da      	str	r2, [r3, #28]
 8005aba:	e005      	b.n	8005ac8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d106      	bne.n	8005ae8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7fc fa0c 	bl	8001f00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005afe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b10:	431a      	orrs	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	431a      	orrs	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b42:	431a      	orrs	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b4c:	ea42 0103 	orr.w	r1, r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b54:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	0c1b      	lsrs	r3, r3, #16
 8005b66:	f003 0104 	and.w	r1, r3, #4
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	f003 0210 	and.w	r2, r3, #16
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	69da      	ldr	r2, [r3, #28]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b088      	sub	sp, #32
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	603b      	str	r3, [r7, #0]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d101      	bne.n	8005bc4 <HAL_SPI_Transmit+0x22>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e126      	b.n	8005e12 <HAL_SPI_Transmit+0x270>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bcc:	f7fc fc24 	bl	8002418 <HAL_GetTick>
 8005bd0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005bd2:	88fb      	ldrh	r3, [r7, #6]
 8005bd4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d002      	beq.n	8005be8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005be2:	2302      	movs	r3, #2
 8005be4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005be6:	e10b      	b.n	8005e00 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <HAL_SPI_Transmit+0x52>
 8005bee:	88fb      	ldrh	r3, [r7, #6]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d102      	bne.n	8005bfa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005bf8:	e102      	b.n	8005e00 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2203      	movs	r2, #3
 8005bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	88fa      	ldrh	r2, [r7, #6]
 8005c12:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	88fa      	ldrh	r2, [r7, #6]
 8005c18:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c40:	d10f      	bne.n	8005c62 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6c:	2b40      	cmp	r3, #64	; 0x40
 8005c6e:	d007      	beq.n	8005c80 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c88:	d14b      	bne.n	8005d22 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <HAL_SPI_Transmit+0xf6>
 8005c92:	8afb      	ldrh	r3, [r7, #22]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d13e      	bne.n	8005d16 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9c:	881a      	ldrh	r2, [r3, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca8:	1c9a      	adds	r2, r3, #2
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005cbc:	e02b      	b.n	8005d16 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d112      	bne.n	8005cf2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd0:	881a      	ldrh	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cdc:	1c9a      	adds	r2, r3, #2
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	86da      	strh	r2, [r3, #54]	; 0x36
 8005cf0:	e011      	b.n	8005d16 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cf2:	f7fc fb91 	bl	8002418 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d803      	bhi.n	8005d0a <HAL_SPI_Transmit+0x168>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d08:	d102      	bne.n	8005d10 <HAL_SPI_Transmit+0x16e>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d102      	bne.n	8005d16 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d14:	e074      	b.n	8005e00 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1ce      	bne.n	8005cbe <HAL_SPI_Transmit+0x11c>
 8005d20:	e04c      	b.n	8005dbc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d002      	beq.n	8005d30 <HAL_SPI_Transmit+0x18e>
 8005d2a:	8afb      	ldrh	r3, [r7, #22]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d140      	bne.n	8005db2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	330c      	adds	r3, #12
 8005d3a:	7812      	ldrb	r2, [r2, #0]
 8005d3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005d56:	e02c      	b.n	8005db2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d113      	bne.n	8005d8e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	330c      	adds	r3, #12
 8005d70:	7812      	ldrb	r2, [r2, #0]
 8005d72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	3b01      	subs	r3, #1
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d8c:	e011      	b.n	8005db2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d8e:	f7fc fb43 	bl	8002418 <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d803      	bhi.n	8005da6 <HAL_SPI_Transmit+0x204>
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005da4:	d102      	bne.n	8005dac <HAL_SPI_Transmit+0x20a>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d102      	bne.n	8005db2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005db0:	e026      	b.n	8005e00 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1cd      	bne.n	8005d58 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	6839      	ldr	r1, [r7, #0]
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 f8b3 	bl	8005f2c <SPI_EndRxTxTransaction>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10a      	bne.n	8005df0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dda:	2300      	movs	r3, #0
 8005ddc:	613b      	str	r3, [r7, #16]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	613b      	str	r3, [r7, #16]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	613b      	str	r3, [r7, #16]
 8005dee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d002      	beq.n	8005dfe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	77fb      	strb	r3, [r7, #31]
 8005dfc:	e000      	b.n	8005e00 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005dfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e10:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3720      	adds	r7, #32
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
	...

08005e1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b088      	sub	sp, #32
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e2c:	f7fc faf4 	bl	8002418 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e34:	1a9b      	subs	r3, r3, r2
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	4413      	add	r3, r2
 8005e3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e3c:	f7fc faec 	bl	8002418 <HAL_GetTick>
 8005e40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e42:	4b39      	ldr	r3, [pc, #228]	; (8005f28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	015b      	lsls	r3, r3, #5
 8005e48:	0d1b      	lsrs	r3, r3, #20
 8005e4a:	69fa      	ldr	r2, [r7, #28]
 8005e4c:	fb02 f303 	mul.w	r3, r2, r3
 8005e50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e52:	e054      	b.n	8005efe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e5a:	d050      	beq.n	8005efe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e5c:	f7fc fadc 	bl	8002418 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	69fa      	ldr	r2, [r7, #28]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d902      	bls.n	8005e72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d13d      	bne.n	8005eee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e8a:	d111      	bne.n	8005eb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e94:	d004      	beq.n	8005ea0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e9e:	d107      	bne.n	8005eb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eb8:	d10f      	bne.n	8005eda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ed8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e017      	b.n	8005f1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	3b01      	subs	r3, #1
 8005efc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	4013      	ands	r3, r2
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	bf0c      	ite	eq
 8005f0e:	2301      	moveq	r3, #1
 8005f10:	2300      	movne	r3, #0
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	461a      	mov	r2, r3
 8005f16:	79fb      	ldrb	r3, [r7, #7]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d19b      	bne.n	8005e54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3720      	adds	r7, #32
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	20000008 	.word	0x20000008

08005f2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af02      	add	r7, sp, #8
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005f38:	4b1b      	ldr	r3, [pc, #108]	; (8005fa8 <SPI_EndRxTxTransaction+0x7c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a1b      	ldr	r2, [pc, #108]	; (8005fac <SPI_EndRxTxTransaction+0x80>)
 8005f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f42:	0d5b      	lsrs	r3, r3, #21
 8005f44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f48:	fb02 f303 	mul.w	r3, r2, r3
 8005f4c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f56:	d112      	bne.n	8005f7e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	2180      	movs	r1, #128	; 0x80
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f7ff ff5a 	bl	8005e1c <SPI_WaitFlagStateUntilTimeout>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d016      	beq.n	8005f9c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f72:	f043 0220 	orr.w	r2, r3, #32
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e00f      	b.n	8005f9e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00a      	beq.n	8005f9a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	3b01      	subs	r3, #1
 8005f88:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f94:	2b80      	cmp	r3, #128	; 0x80
 8005f96:	d0f2      	beq.n	8005f7e <SPI_EndRxTxTransaction+0x52>
 8005f98:	e000      	b.n	8005f9c <SPI_EndRxTxTransaction+0x70>
        break;
 8005f9a:	bf00      	nop
  }

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20000008 	.word	0x20000008
 8005fac:	165e9f81 	.word	0x165e9f81

08005fb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e041      	b.n	8006046 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d106      	bne.n	8005fdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7fc f878 	bl	80020cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2202      	movs	r2, #2
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3304      	adds	r3, #4
 8005fec:	4619      	mov	r1, r3
 8005fee:	4610      	mov	r0, r2
 8005ff0:	f000 fdf6 	bl	8006be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
	...

08006050 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b01      	cmp	r3, #1
 8006062:	d001      	beq.n	8006068 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e04e      	b.n	8006106 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2202      	movs	r2, #2
 800606c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f042 0201 	orr.w	r2, r2, #1
 800607e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a23      	ldr	r2, [pc, #140]	; (8006114 <HAL_TIM_Base_Start_IT+0xc4>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d022      	beq.n	80060d0 <HAL_TIM_Base_Start_IT+0x80>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006092:	d01d      	beq.n	80060d0 <HAL_TIM_Base_Start_IT+0x80>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a1f      	ldr	r2, [pc, #124]	; (8006118 <HAL_TIM_Base_Start_IT+0xc8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d018      	beq.n	80060d0 <HAL_TIM_Base_Start_IT+0x80>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a1e      	ldr	r2, [pc, #120]	; (800611c <HAL_TIM_Base_Start_IT+0xcc>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d013      	beq.n	80060d0 <HAL_TIM_Base_Start_IT+0x80>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a1c      	ldr	r2, [pc, #112]	; (8006120 <HAL_TIM_Base_Start_IT+0xd0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d00e      	beq.n	80060d0 <HAL_TIM_Base_Start_IT+0x80>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a1b      	ldr	r2, [pc, #108]	; (8006124 <HAL_TIM_Base_Start_IT+0xd4>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d009      	beq.n	80060d0 <HAL_TIM_Base_Start_IT+0x80>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a19      	ldr	r2, [pc, #100]	; (8006128 <HAL_TIM_Base_Start_IT+0xd8>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d004      	beq.n	80060d0 <HAL_TIM_Base_Start_IT+0x80>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a18      	ldr	r2, [pc, #96]	; (800612c <HAL_TIM_Base_Start_IT+0xdc>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d111      	bne.n	80060f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f003 0307 	and.w	r3, r3, #7
 80060da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2b06      	cmp	r3, #6
 80060e0:	d010      	beq.n	8006104 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f042 0201 	orr.w	r2, r2, #1
 80060f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f2:	e007      	b.n	8006104 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f042 0201 	orr.w	r2, r2, #1
 8006102:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	40010000 	.word	0x40010000
 8006118:	40000400 	.word	0x40000400
 800611c:	40000800 	.word	0x40000800
 8006120:	40000c00 	.word	0x40000c00
 8006124:	40010400 	.word	0x40010400
 8006128:	40014000 	.word	0x40014000
 800612c:	40001800 	.word	0x40001800

08006130 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d109      	bne.n	8006154 <HAL_TIM_OC_Start_IT+0x24>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b01      	cmp	r3, #1
 800614a:	bf14      	ite	ne
 800614c:	2301      	movne	r3, #1
 800614e:	2300      	moveq	r3, #0
 8006150:	b2db      	uxtb	r3, r3
 8006152:	e022      	b.n	800619a <HAL_TIM_OC_Start_IT+0x6a>
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	2b04      	cmp	r3, #4
 8006158:	d109      	bne.n	800616e <HAL_TIM_OC_Start_IT+0x3e>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b01      	cmp	r3, #1
 8006164:	bf14      	ite	ne
 8006166:	2301      	movne	r3, #1
 8006168:	2300      	moveq	r3, #0
 800616a:	b2db      	uxtb	r3, r3
 800616c:	e015      	b.n	800619a <HAL_TIM_OC_Start_IT+0x6a>
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b08      	cmp	r3, #8
 8006172:	d109      	bne.n	8006188 <HAL_TIM_OC_Start_IT+0x58>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b01      	cmp	r3, #1
 800617e:	bf14      	ite	ne
 8006180:	2301      	movne	r3, #1
 8006182:	2300      	moveq	r3, #0
 8006184:	b2db      	uxtb	r3, r3
 8006186:	e008      	b.n	800619a <HAL_TIM_OC_Start_IT+0x6a>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b01      	cmp	r3, #1
 8006192:	bf14      	ite	ne
 8006194:	2301      	movne	r3, #1
 8006196:	2300      	moveq	r3, #0
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e0c2      	b.n	8006328 <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d104      	bne.n	80061b2 <HAL_TIM_OC_Start_IT+0x82>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2202      	movs	r2, #2
 80061ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061b0:	e013      	b.n	80061da <HAL_TIM_OC_Start_IT+0xaa>
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d104      	bne.n	80061c2 <HAL_TIM_OC_Start_IT+0x92>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061c0:	e00b      	b.n	80061da <HAL_TIM_OC_Start_IT+0xaa>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d104      	bne.n	80061d2 <HAL_TIM_OC_Start_IT+0xa2>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061d0:	e003      	b.n	80061da <HAL_TIM_OC_Start_IT+0xaa>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2202      	movs	r2, #2
 80061d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b0c      	cmp	r3, #12
 80061de:	d841      	bhi.n	8006264 <HAL_TIM_OC_Start_IT+0x134>
 80061e0:	a201      	add	r2, pc, #4	; (adr r2, 80061e8 <HAL_TIM_OC_Start_IT+0xb8>)
 80061e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e6:	bf00      	nop
 80061e8:	0800621d 	.word	0x0800621d
 80061ec:	08006265 	.word	0x08006265
 80061f0:	08006265 	.word	0x08006265
 80061f4:	08006265 	.word	0x08006265
 80061f8:	0800622f 	.word	0x0800622f
 80061fc:	08006265 	.word	0x08006265
 8006200:	08006265 	.word	0x08006265
 8006204:	08006265 	.word	0x08006265
 8006208:	08006241 	.word	0x08006241
 800620c:	08006265 	.word	0x08006265
 8006210:	08006265 	.word	0x08006265
 8006214:	08006265 	.word	0x08006265
 8006218:	08006253 	.word	0x08006253
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0202 	orr.w	r2, r2, #2
 800622a:	60da      	str	r2, [r3, #12]
      break;
 800622c:	e01b      	b.n	8006266 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68da      	ldr	r2, [r3, #12]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f042 0204 	orr.w	r2, r2, #4
 800623c:	60da      	str	r2, [r3, #12]
      break;
 800623e:	e012      	b.n	8006266 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0208 	orr.w	r2, r2, #8
 800624e:	60da      	str	r2, [r3, #12]
      break;
 8006250:	e009      	b.n	8006266 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68da      	ldr	r2, [r3, #12]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f042 0210 	orr.w	r2, r2, #16
 8006260:	60da      	str	r2, [r3, #12]
      break;
 8006262:	e000      	b.n	8006266 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8006264:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2201      	movs	r2, #1
 800626c:	6839      	ldr	r1, [r7, #0]
 800626e:	4618      	mov	r0, r3
 8006270:	f000 ffa0 	bl	80071b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a2d      	ldr	r2, [pc, #180]	; (8006330 <HAL_TIM_OC_Start_IT+0x200>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d004      	beq.n	8006288 <HAL_TIM_OC_Start_IT+0x158>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a2c      	ldr	r2, [pc, #176]	; (8006334 <HAL_TIM_OC_Start_IT+0x204>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d101      	bne.n	800628c <HAL_TIM_OC_Start_IT+0x15c>
 8006288:	2301      	movs	r3, #1
 800628a:	e000      	b.n	800628e <HAL_TIM_OC_Start_IT+0x15e>
 800628c:	2300      	movs	r3, #0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d007      	beq.n	80062a2 <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a22      	ldr	r2, [pc, #136]	; (8006330 <HAL_TIM_OC_Start_IT+0x200>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d022      	beq.n	80062f2 <HAL_TIM_OC_Start_IT+0x1c2>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b4:	d01d      	beq.n	80062f2 <HAL_TIM_OC_Start_IT+0x1c2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a1f      	ldr	r2, [pc, #124]	; (8006338 <HAL_TIM_OC_Start_IT+0x208>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d018      	beq.n	80062f2 <HAL_TIM_OC_Start_IT+0x1c2>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a1d      	ldr	r2, [pc, #116]	; (800633c <HAL_TIM_OC_Start_IT+0x20c>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d013      	beq.n	80062f2 <HAL_TIM_OC_Start_IT+0x1c2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a1c      	ldr	r2, [pc, #112]	; (8006340 <HAL_TIM_OC_Start_IT+0x210>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d00e      	beq.n	80062f2 <HAL_TIM_OC_Start_IT+0x1c2>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a16      	ldr	r2, [pc, #88]	; (8006334 <HAL_TIM_OC_Start_IT+0x204>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d009      	beq.n	80062f2 <HAL_TIM_OC_Start_IT+0x1c2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a18      	ldr	r2, [pc, #96]	; (8006344 <HAL_TIM_OC_Start_IT+0x214>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d004      	beq.n	80062f2 <HAL_TIM_OC_Start_IT+0x1c2>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a16      	ldr	r2, [pc, #88]	; (8006348 <HAL_TIM_OC_Start_IT+0x218>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d111      	bne.n	8006316 <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f003 0307 	and.w	r3, r3, #7
 80062fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2b06      	cmp	r3, #6
 8006302:	d010      	beq.n	8006326 <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f042 0201 	orr.w	r2, r2, #1
 8006312:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006314:	e007      	b.n	8006326 <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f042 0201 	orr.w	r2, r2, #1
 8006324:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	40010000 	.word	0x40010000
 8006334:	40010400 	.word	0x40010400
 8006338:	40000400 	.word	0x40000400
 800633c:	40000800 	.word	0x40000800
 8006340:	40000c00 	.word	0x40000c00
 8006344:	40014000 	.word	0x40014000
 8006348:	40001800 	.word	0x40001800

0800634c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e041      	b.n	80063e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d106      	bne.n	8006378 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f839 	bl	80063ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2202      	movs	r2, #2
 800637c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	3304      	adds	r3, #4
 8006388:	4619      	mov	r1, r3
 800638a:	4610      	mov	r0, r2
 800638c:	f000 fc28 	bl	8006be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063f2:	bf00      	nop
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b086      	sub	sp, #24
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e097      	b.n	8006542 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d106      	bne.n	800642c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7fb fe08 	bl	800203c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	6812      	ldr	r2, [r2, #0]
 800643e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006442:	f023 0307 	bic.w	r3, r3, #7
 8006446:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	3304      	adds	r3, #4
 8006450:	4619      	mov	r1, r3
 8006452:	4610      	mov	r0, r2
 8006454:	f000 fbc4 	bl	8006be0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	4313      	orrs	r3, r2
 8006478:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006480:	f023 0303 	bic.w	r3, r3, #3
 8006484:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	689a      	ldr	r2, [r3, #8]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	021b      	lsls	r3, r3, #8
 8006490:	4313      	orrs	r3, r2
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	4313      	orrs	r3, r2
 8006496:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800649e:	f023 030c 	bic.w	r3, r3, #12
 80064a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	68da      	ldr	r2, [r3, #12]
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	021b      	lsls	r3, r3, #8
 80064ba:	4313      	orrs	r3, r2
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	4313      	orrs	r3, r2
 80064c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	011a      	lsls	r2, r3, #4
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	031b      	lsls	r3, r3, #12
 80064ce:	4313      	orrs	r3, r2
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80064dc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80064e4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	011b      	lsls	r3, r3, #4
 80064f0:	4313      	orrs	r3, r2
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b084      	sub	sp, #16
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800655a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006562:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800656a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006572:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d110      	bne.n	800659c <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800657a:	7bfb      	ldrb	r3, [r7, #15]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d102      	bne.n	8006586 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006580:	7b7b      	ldrb	r3, [r7, #13]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d001      	beq.n	800658a <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e069      	b.n	800665e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2202      	movs	r2, #2
 800658e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2202      	movs	r2, #2
 8006596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800659a:	e031      	b.n	8006600 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	2b04      	cmp	r3, #4
 80065a0:	d110      	bne.n	80065c4 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80065a2:	7bbb      	ldrb	r3, [r7, #14]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d102      	bne.n	80065ae <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80065a8:	7b3b      	ldrb	r3, [r7, #12]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d001      	beq.n	80065b2 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e055      	b.n	800665e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2202      	movs	r2, #2
 80065b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2202      	movs	r2, #2
 80065be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065c2:	e01d      	b.n	8006600 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d108      	bne.n	80065dc <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80065ca:	7bbb      	ldrb	r3, [r7, #14]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d105      	bne.n	80065dc <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80065d0:	7b7b      	ldrb	r3, [r7, #13]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d102      	bne.n	80065dc <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80065d6:	7b3b      	ldrb	r3, [r7, #12]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d001      	beq.n	80065e0 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e03e      	b.n	800665e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2202      	movs	r2, #2
 80065e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2202      	movs	r2, #2
 80065ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <HAL_TIM_Encoder_Start+0xc4>
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	2b04      	cmp	r3, #4
 800660a:	d008      	beq.n	800661e <HAL_TIM_Encoder_Start+0xd4>
 800660c:	e00f      	b.n	800662e <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2201      	movs	r2, #1
 8006614:	2100      	movs	r1, #0
 8006616:	4618      	mov	r0, r3
 8006618:	f000 fdcc 	bl	80071b4 <TIM_CCxChannelCmd>
      break;
 800661c:	e016      	b.n	800664c <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2201      	movs	r2, #1
 8006624:	2104      	movs	r1, #4
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fdc4 	bl	80071b4 <TIM_CCxChannelCmd>
      break;
 800662c:	e00e      	b.n	800664c <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2201      	movs	r2, #1
 8006634:	2100      	movs	r1, #0
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fdbc 	bl	80071b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2201      	movs	r2, #1
 8006642:	2104      	movs	r1, #4
 8006644:	4618      	mov	r0, r3
 8006646:	f000 fdb5 	bl	80071b4 <TIM_CCxChannelCmd>
      break;
 800664a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f042 0201 	orr.w	r2, r2, #1
 800665a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b082      	sub	sp, #8
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	f003 0302 	and.w	r3, r3, #2
 8006678:	2b02      	cmp	r3, #2
 800667a:	d122      	bne.n	80066c2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b02      	cmp	r3, #2
 8006688:	d11b      	bne.n	80066c2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f06f 0202 	mvn.w	r2, #2
 8006692:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	f003 0303 	and.w	r3, r3, #3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d003      	beq.n	80066b0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fa7b 	bl	8006ba4 <HAL_TIM_IC_CaptureCallback>
 80066ae:	e005      	b.n	80066bc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 fa6d 	bl	8006b90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fa7e 	bl	8006bb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	f003 0304 	and.w	r3, r3, #4
 80066cc:	2b04      	cmp	r3, #4
 80066ce:	d122      	bne.n	8006716 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f003 0304 	and.w	r3, r3, #4
 80066da:	2b04      	cmp	r3, #4
 80066dc:	d11b      	bne.n	8006716 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f06f 0204 	mvn.w	r2, #4
 80066e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 fa51 	bl	8006ba4 <HAL_TIM_IC_CaptureCallback>
 8006702:	e005      	b.n	8006710 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fa43 	bl	8006b90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fa54 	bl	8006bb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f003 0308 	and.w	r3, r3, #8
 8006720:	2b08      	cmp	r3, #8
 8006722:	d122      	bne.n	800676a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	f003 0308 	and.w	r3, r3, #8
 800672e:	2b08      	cmp	r3, #8
 8006730:	d11b      	bne.n	800676a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f06f 0208 	mvn.w	r2, #8
 800673a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2204      	movs	r2, #4
 8006740:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	f003 0303 	and.w	r3, r3, #3
 800674c:	2b00      	cmp	r3, #0
 800674e:	d003      	beq.n	8006758 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fa27 	bl	8006ba4 <HAL_TIM_IC_CaptureCallback>
 8006756:	e005      	b.n	8006764 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fa19 	bl	8006b90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fa2a 	bl	8006bb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	f003 0310 	and.w	r3, r3, #16
 8006774:	2b10      	cmp	r3, #16
 8006776:	d122      	bne.n	80067be <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f003 0310 	and.w	r3, r3, #16
 8006782:	2b10      	cmp	r3, #16
 8006784:	d11b      	bne.n	80067be <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f06f 0210 	mvn.w	r2, #16
 800678e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2208      	movs	r2, #8
 8006794:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d003      	beq.n	80067ac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f9fd 	bl	8006ba4 <HAL_TIM_IC_CaptureCallback>
 80067aa:	e005      	b.n	80067b8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f9ef 	bl	8006b90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fa00 	bl	8006bb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	f003 0301 	and.w	r3, r3, #1
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d10e      	bne.n	80067ea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d107      	bne.n	80067ea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f06f 0201 	mvn.w	r2, #1
 80067e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f9c9 	bl	8006b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f4:	2b80      	cmp	r3, #128	; 0x80
 80067f6:	d10e      	bne.n	8006816 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006802:	2b80      	cmp	r3, #128	; 0x80
 8006804:	d107      	bne.n	8006816 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800680e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fd7b 	bl	800730c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006820:	2b40      	cmp	r3, #64	; 0x40
 8006822:	d10e      	bne.n	8006842 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682e:	2b40      	cmp	r3, #64	; 0x40
 8006830:	d107      	bne.n	8006842 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800683a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f9c5 	bl	8006bcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	f003 0320 	and.w	r3, r3, #32
 800684c:	2b20      	cmp	r3, #32
 800684e:	d10e      	bne.n	800686e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	f003 0320 	and.w	r3, r3, #32
 800685a:	2b20      	cmp	r3, #32
 800685c:	d107      	bne.n	800686e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f06f 0220 	mvn.w	r2, #32
 8006866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fd45 	bl	80072f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800686e:	bf00      	nop
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
	...

08006878 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800688a:	2b01      	cmp	r3, #1
 800688c:	d101      	bne.n	8006892 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800688e:	2302      	movs	r3, #2
 8006890:	e0ac      	b.n	80069ec <HAL_TIM_PWM_ConfigChannel+0x174>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b0c      	cmp	r3, #12
 800689e:	f200 809f 	bhi.w	80069e0 <HAL_TIM_PWM_ConfigChannel+0x168>
 80068a2:	a201      	add	r2, pc, #4	; (adr r2, 80068a8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80068a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a8:	080068dd 	.word	0x080068dd
 80068ac:	080069e1 	.word	0x080069e1
 80068b0:	080069e1 	.word	0x080069e1
 80068b4:	080069e1 	.word	0x080069e1
 80068b8:	0800691d 	.word	0x0800691d
 80068bc:	080069e1 	.word	0x080069e1
 80068c0:	080069e1 	.word	0x080069e1
 80068c4:	080069e1 	.word	0x080069e1
 80068c8:	0800695f 	.word	0x0800695f
 80068cc:	080069e1 	.word	0x080069e1
 80068d0:	080069e1 	.word	0x080069e1
 80068d4:	080069e1 	.word	0x080069e1
 80068d8:	0800699f 	.word	0x0800699f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68b9      	ldr	r1, [r7, #8]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 fa1c 	bl	8006d20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	699a      	ldr	r2, [r3, #24]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f042 0208 	orr.w	r2, r2, #8
 80068f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	699a      	ldr	r2, [r3, #24]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f022 0204 	bic.w	r2, r2, #4
 8006906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6999      	ldr	r1, [r3, #24]
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	691a      	ldr	r2, [r3, #16]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	619a      	str	r2, [r3, #24]
      break;
 800691a:	e062      	b.n	80069e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68b9      	ldr	r1, [r7, #8]
 8006922:	4618      	mov	r0, r3
 8006924:	f000 fa6c 	bl	8006e00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	699a      	ldr	r2, [r3, #24]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	699a      	ldr	r2, [r3, #24]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6999      	ldr	r1, [r3, #24]
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	021a      	lsls	r2, r3, #8
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	430a      	orrs	r2, r1
 800695a:	619a      	str	r2, [r3, #24]
      break;
 800695c:	e041      	b.n	80069e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68b9      	ldr	r1, [r7, #8]
 8006964:	4618      	mov	r0, r3
 8006966:	f000 fac1 	bl	8006eec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	69da      	ldr	r2, [r3, #28]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f042 0208 	orr.w	r2, r2, #8
 8006978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	69da      	ldr	r2, [r3, #28]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 0204 	bic.w	r2, r2, #4
 8006988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	69d9      	ldr	r1, [r3, #28]
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	691a      	ldr	r2, [r3, #16]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	61da      	str	r2, [r3, #28]
      break;
 800699c:	e021      	b.n	80069e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68b9      	ldr	r1, [r7, #8]
 80069a4:	4618      	mov	r0, r3
 80069a6:	f000 fb15 	bl	8006fd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	69da      	ldr	r2, [r3, #28]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	69da      	ldr	r2, [r3, #28]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	69d9      	ldr	r1, [r3, #28]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	021a      	lsls	r2, r3, #8
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	61da      	str	r2, [r3, #28]
      break;
 80069de:	e000      	b.n	80069e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80069e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d101      	bne.n	8006a0c <HAL_TIM_ConfigClockSource+0x18>
 8006a08:	2302      	movs	r3, #2
 8006a0a:	e0b3      	b.n	8006b74 <HAL_TIM_ConfigClockSource+0x180>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2202      	movs	r2, #2
 8006a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a32:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a44:	d03e      	beq.n	8006ac4 <HAL_TIM_ConfigClockSource+0xd0>
 8006a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a4a:	f200 8087 	bhi.w	8006b5c <HAL_TIM_ConfigClockSource+0x168>
 8006a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a52:	f000 8085 	beq.w	8006b60 <HAL_TIM_ConfigClockSource+0x16c>
 8006a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a5a:	d87f      	bhi.n	8006b5c <HAL_TIM_ConfigClockSource+0x168>
 8006a5c:	2b70      	cmp	r3, #112	; 0x70
 8006a5e:	d01a      	beq.n	8006a96 <HAL_TIM_ConfigClockSource+0xa2>
 8006a60:	2b70      	cmp	r3, #112	; 0x70
 8006a62:	d87b      	bhi.n	8006b5c <HAL_TIM_ConfigClockSource+0x168>
 8006a64:	2b60      	cmp	r3, #96	; 0x60
 8006a66:	d050      	beq.n	8006b0a <HAL_TIM_ConfigClockSource+0x116>
 8006a68:	2b60      	cmp	r3, #96	; 0x60
 8006a6a:	d877      	bhi.n	8006b5c <HAL_TIM_ConfigClockSource+0x168>
 8006a6c:	2b50      	cmp	r3, #80	; 0x50
 8006a6e:	d03c      	beq.n	8006aea <HAL_TIM_ConfigClockSource+0xf6>
 8006a70:	2b50      	cmp	r3, #80	; 0x50
 8006a72:	d873      	bhi.n	8006b5c <HAL_TIM_ConfigClockSource+0x168>
 8006a74:	2b40      	cmp	r3, #64	; 0x40
 8006a76:	d058      	beq.n	8006b2a <HAL_TIM_ConfigClockSource+0x136>
 8006a78:	2b40      	cmp	r3, #64	; 0x40
 8006a7a:	d86f      	bhi.n	8006b5c <HAL_TIM_ConfigClockSource+0x168>
 8006a7c:	2b30      	cmp	r3, #48	; 0x30
 8006a7e:	d064      	beq.n	8006b4a <HAL_TIM_ConfigClockSource+0x156>
 8006a80:	2b30      	cmp	r3, #48	; 0x30
 8006a82:	d86b      	bhi.n	8006b5c <HAL_TIM_ConfigClockSource+0x168>
 8006a84:	2b20      	cmp	r3, #32
 8006a86:	d060      	beq.n	8006b4a <HAL_TIM_ConfigClockSource+0x156>
 8006a88:	2b20      	cmp	r3, #32
 8006a8a:	d867      	bhi.n	8006b5c <HAL_TIM_ConfigClockSource+0x168>
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d05c      	beq.n	8006b4a <HAL_TIM_ConfigClockSource+0x156>
 8006a90:	2b10      	cmp	r3, #16
 8006a92:	d05a      	beq.n	8006b4a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006a94:	e062      	b.n	8006b5c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6818      	ldr	r0, [r3, #0]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	6899      	ldr	r1, [r3, #8]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	685a      	ldr	r2, [r3, #4]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f000 fb65 	bl	8007174 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ab8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	609a      	str	r2, [r3, #8]
      break;
 8006ac2:	e04e      	b.n	8006b62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6818      	ldr	r0, [r3, #0]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	6899      	ldr	r1, [r3, #8]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	f000 fb4e 	bl	8007174 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689a      	ldr	r2, [r3, #8]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ae6:	609a      	str	r2, [r3, #8]
      break;
 8006ae8:	e03b      	b.n	8006b62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6818      	ldr	r0, [r3, #0]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	6859      	ldr	r1, [r3, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	461a      	mov	r2, r3
 8006af8:	f000 fac2 	bl	8007080 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2150      	movs	r1, #80	; 0x50
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 fb1b 	bl	800713e <TIM_ITRx_SetConfig>
      break;
 8006b08:	e02b      	b.n	8006b62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6818      	ldr	r0, [r3, #0]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	6859      	ldr	r1, [r3, #4]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	461a      	mov	r2, r3
 8006b18:	f000 fae1 	bl	80070de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2160      	movs	r1, #96	; 0x60
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 fb0b 	bl	800713e <TIM_ITRx_SetConfig>
      break;
 8006b28:	e01b      	b.n	8006b62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6818      	ldr	r0, [r3, #0]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	6859      	ldr	r1, [r3, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	461a      	mov	r2, r3
 8006b38:	f000 faa2 	bl	8007080 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2140      	movs	r1, #64	; 0x40
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 fafb 	bl	800713e <TIM_ITRx_SetConfig>
      break;
 8006b48:	e00b      	b.n	8006b62 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4619      	mov	r1, r3
 8006b54:	4610      	mov	r0, r2
 8006b56:	f000 faf2 	bl	800713e <TIM_ITRx_SetConfig>
        break;
 8006b5a:	e002      	b.n	8006b62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006b5c:	bf00      	nop
 8006b5e:	e000      	b.n	8006b62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006b60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a40      	ldr	r2, [pc, #256]	; (8006cf4 <TIM_Base_SetConfig+0x114>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d013      	beq.n	8006c20 <TIM_Base_SetConfig+0x40>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bfe:	d00f      	beq.n	8006c20 <TIM_Base_SetConfig+0x40>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a3d      	ldr	r2, [pc, #244]	; (8006cf8 <TIM_Base_SetConfig+0x118>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00b      	beq.n	8006c20 <TIM_Base_SetConfig+0x40>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a3c      	ldr	r2, [pc, #240]	; (8006cfc <TIM_Base_SetConfig+0x11c>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d007      	beq.n	8006c20 <TIM_Base_SetConfig+0x40>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a3b      	ldr	r2, [pc, #236]	; (8006d00 <TIM_Base_SetConfig+0x120>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d003      	beq.n	8006c20 <TIM_Base_SetConfig+0x40>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a3a      	ldr	r2, [pc, #232]	; (8006d04 <TIM_Base_SetConfig+0x124>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d108      	bne.n	8006c32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a2f      	ldr	r2, [pc, #188]	; (8006cf4 <TIM_Base_SetConfig+0x114>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d02b      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c40:	d027      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a2c      	ldr	r2, [pc, #176]	; (8006cf8 <TIM_Base_SetConfig+0x118>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d023      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a2b      	ldr	r2, [pc, #172]	; (8006cfc <TIM_Base_SetConfig+0x11c>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d01f      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a2a      	ldr	r2, [pc, #168]	; (8006d00 <TIM_Base_SetConfig+0x120>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d01b      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a29      	ldr	r2, [pc, #164]	; (8006d04 <TIM_Base_SetConfig+0x124>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d017      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a28      	ldr	r2, [pc, #160]	; (8006d08 <TIM_Base_SetConfig+0x128>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d013      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a27      	ldr	r2, [pc, #156]	; (8006d0c <TIM_Base_SetConfig+0x12c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00f      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a26      	ldr	r2, [pc, #152]	; (8006d10 <TIM_Base_SetConfig+0x130>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d00b      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a25      	ldr	r2, [pc, #148]	; (8006d14 <TIM_Base_SetConfig+0x134>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d007      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a24      	ldr	r2, [pc, #144]	; (8006d18 <TIM_Base_SetConfig+0x138>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d003      	beq.n	8006c92 <TIM_Base_SetConfig+0xb2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a23      	ldr	r2, [pc, #140]	; (8006d1c <TIM_Base_SetConfig+0x13c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d108      	bne.n	8006ca4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	689a      	ldr	r2, [r3, #8]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a0a      	ldr	r2, [pc, #40]	; (8006cf4 <TIM_Base_SetConfig+0x114>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d003      	beq.n	8006cd8 <TIM_Base_SetConfig+0xf8>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a0c      	ldr	r2, [pc, #48]	; (8006d04 <TIM_Base_SetConfig+0x124>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d103      	bne.n	8006ce0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	691a      	ldr	r2, [r3, #16]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	615a      	str	r2, [r3, #20]
}
 8006ce6:	bf00      	nop
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	40010000 	.word	0x40010000
 8006cf8:	40000400 	.word	0x40000400
 8006cfc:	40000800 	.word	0x40000800
 8006d00:	40000c00 	.word	0x40000c00
 8006d04:	40010400 	.word	0x40010400
 8006d08:	40014000 	.word	0x40014000
 8006d0c:	40014400 	.word	0x40014400
 8006d10:	40014800 	.word	0x40014800
 8006d14:	40001800 	.word	0x40001800
 8006d18:	40001c00 	.word	0x40001c00
 8006d1c:	40002000 	.word	0x40002000

08006d20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	f023 0201 	bic.w	r2, r3, #1
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f023 0303 	bic.w	r3, r3, #3
 8006d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f023 0302 	bic.w	r3, r3, #2
 8006d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a20      	ldr	r2, [pc, #128]	; (8006df8 <TIM_OC1_SetConfig+0xd8>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d003      	beq.n	8006d84 <TIM_OC1_SetConfig+0x64>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a1f      	ldr	r2, [pc, #124]	; (8006dfc <TIM_OC1_SetConfig+0xdc>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d10c      	bne.n	8006d9e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f023 0308 	bic.w	r3, r3, #8
 8006d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f023 0304 	bic.w	r3, r3, #4
 8006d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a15      	ldr	r2, [pc, #84]	; (8006df8 <TIM_OC1_SetConfig+0xd8>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d003      	beq.n	8006dae <TIM_OC1_SetConfig+0x8e>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a14      	ldr	r2, [pc, #80]	; (8006dfc <TIM_OC1_SetConfig+0xdc>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d111      	bne.n	8006dd2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006db4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	621a      	str	r2, [r3, #32]
}
 8006dec:	bf00      	nop
 8006dee:	371c      	adds	r7, #28
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr
 8006df8:	40010000 	.word	0x40010000
 8006dfc:	40010400 	.word	0x40010400

08006e00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b087      	sub	sp, #28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	f023 0210 	bic.w	r2, r3, #16
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	021b      	lsls	r3, r3, #8
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	f023 0320 	bic.w	r3, r3, #32
 8006e4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	011b      	lsls	r3, r3, #4
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a22      	ldr	r2, [pc, #136]	; (8006ee4 <TIM_OC2_SetConfig+0xe4>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d003      	beq.n	8006e68 <TIM_OC2_SetConfig+0x68>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a21      	ldr	r2, [pc, #132]	; (8006ee8 <TIM_OC2_SetConfig+0xe8>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d10d      	bne.n	8006e84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	011b      	lsls	r3, r3, #4
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a17      	ldr	r2, [pc, #92]	; (8006ee4 <TIM_OC2_SetConfig+0xe4>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d003      	beq.n	8006e94 <TIM_OC2_SetConfig+0x94>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a16      	ldr	r2, [pc, #88]	; (8006ee8 <TIM_OC2_SetConfig+0xe8>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d113      	bne.n	8006ebc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	621a      	str	r2, [r3, #32]
}
 8006ed6:	bf00      	nop
 8006ed8:	371c      	adds	r7, #28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	40010000 	.word	0x40010000
 8006ee8:	40010400 	.word	0x40010400

08006eec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f023 0303 	bic.w	r3, r3, #3
 8006f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	021b      	lsls	r3, r3, #8
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a21      	ldr	r2, [pc, #132]	; (8006fcc <TIM_OC3_SetConfig+0xe0>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d003      	beq.n	8006f52 <TIM_OC3_SetConfig+0x66>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a20      	ldr	r2, [pc, #128]	; (8006fd0 <TIM_OC3_SetConfig+0xe4>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d10d      	bne.n	8006f6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	021b      	lsls	r3, r3, #8
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a16      	ldr	r2, [pc, #88]	; (8006fcc <TIM_OC3_SetConfig+0xe0>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d003      	beq.n	8006f7e <TIM_OC3_SetConfig+0x92>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a15      	ldr	r2, [pc, #84]	; (8006fd0 <TIM_OC3_SetConfig+0xe4>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d113      	bne.n	8006fa6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	011b      	lsls	r3, r3, #4
 8006f94:	693a      	ldr	r2, [r7, #16]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	011b      	lsls	r3, r3, #4
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	621a      	str	r2, [r3, #32]
}
 8006fc0:	bf00      	nop
 8006fc2:	371c      	adds	r7, #28
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr
 8006fcc:	40010000 	.word	0x40010000
 8006fd0:	40010400 	.word	0x40010400

08006fd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800700a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	021b      	lsls	r3, r3, #8
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	4313      	orrs	r3, r2
 8007016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800701e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	031b      	lsls	r3, r3, #12
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	4313      	orrs	r3, r2
 800702a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a12      	ldr	r2, [pc, #72]	; (8007078 <TIM_OC4_SetConfig+0xa4>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d003      	beq.n	800703c <TIM_OC4_SetConfig+0x68>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a11      	ldr	r2, [pc, #68]	; (800707c <TIM_OC4_SetConfig+0xa8>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d109      	bne.n	8007050 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007042:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	695b      	ldr	r3, [r3, #20]
 8007048:	019b      	lsls	r3, r3, #6
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	4313      	orrs	r3, r2
 800704e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	621a      	str	r2, [r3, #32]
}
 800706a:	bf00      	nop
 800706c:	371c      	adds	r7, #28
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	40010000 	.word	0x40010000
 800707c:	40010400 	.word	0x40010400

08007080 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007080:	b480      	push	{r7}
 8007082:	b087      	sub	sp, #28
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	f023 0201 	bic.w	r2, r3, #1
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	011b      	lsls	r3, r3, #4
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f023 030a 	bic.w	r3, r3, #10
 80070bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	621a      	str	r2, [r3, #32]
}
 80070d2:	bf00      	nop
 80070d4:	371c      	adds	r7, #28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070de:	b480      	push	{r7}
 80070e0:	b087      	sub	sp, #28
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	60f8      	str	r0, [r7, #12]
 80070e6:	60b9      	str	r1, [r7, #8]
 80070e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	f023 0210 	bic.w	r2, r3, #16
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007108:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	031b      	lsls	r3, r3, #12
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	4313      	orrs	r3, r2
 8007112:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800711a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	011b      	lsls	r3, r3, #4
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	4313      	orrs	r3, r2
 8007124:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	621a      	str	r2, [r3, #32]
}
 8007132:	bf00      	nop
 8007134:	371c      	adds	r7, #28
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800713e:	b480      	push	{r7}
 8007140:	b085      	sub	sp, #20
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007154:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4313      	orrs	r3, r2
 800715c:	f043 0307 	orr.w	r3, r3, #7
 8007160:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	609a      	str	r2, [r3, #8]
}
 8007168:	bf00      	nop
 800716a:	3714      	adds	r7, #20
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	607a      	str	r2, [r7, #4]
 8007180:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800718e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	021a      	lsls	r2, r3, #8
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	431a      	orrs	r2, r3
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	4313      	orrs	r3, r2
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	4313      	orrs	r3, r2
 80071a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	609a      	str	r2, [r3, #8]
}
 80071a8:	bf00      	nop
 80071aa:	371c      	adds	r7, #28
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b087      	sub	sp, #28
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	f003 031f 	and.w	r3, r3, #31
 80071c6:	2201      	movs	r2, #1
 80071c8:	fa02 f303 	lsl.w	r3, r2, r3
 80071cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6a1a      	ldr	r2, [r3, #32]
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	43db      	mvns	r3, r3
 80071d6:	401a      	ands	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6a1a      	ldr	r2, [r3, #32]
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	f003 031f 	and.w	r3, r3, #31
 80071e6:	6879      	ldr	r1, [r7, #4]
 80071e8:	fa01 f303 	lsl.w	r3, r1, r3
 80071ec:	431a      	orrs	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	621a      	str	r2, [r3, #32]
}
 80071f2:	bf00      	nop
 80071f4:	371c      	adds	r7, #28
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
	...

08007200 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007210:	2b01      	cmp	r3, #1
 8007212:	d101      	bne.n	8007218 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007214:	2302      	movs	r3, #2
 8007216:	e05a      	b.n	80072ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2202      	movs	r2, #2
 8007224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4313      	orrs	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a21      	ldr	r2, [pc, #132]	; (80072dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d022      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007264:	d01d      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a1d      	ldr	r2, [pc, #116]	; (80072e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d018      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a1b      	ldr	r2, [pc, #108]	; (80072e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d013      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a1a      	ldr	r2, [pc, #104]	; (80072e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d00e      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a18      	ldr	r2, [pc, #96]	; (80072ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d009      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a17      	ldr	r2, [pc, #92]	; (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d004      	beq.n	80072a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a15      	ldr	r2, [pc, #84]	; (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d10c      	bne.n	80072bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3714      	adds	r7, #20
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	40010000 	.word	0x40010000
 80072e0:	40000400 	.word	0x40000400
 80072e4:	40000800 	.word	0x40000800
 80072e8:	40000c00 	.word	0x40000c00
 80072ec:	40010400 	.word	0x40010400
 80072f0:	40014000 	.word	0x40014000
 80072f4:	40001800 	.word	0x40001800

080072f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007320:	b084      	sub	sp, #16
 8007322:	b580      	push	{r7, lr}
 8007324:	b084      	sub	sp, #16
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	f107 001c 	add.w	r0, r7, #28
 800732e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007334:	2b01      	cmp	r3, #1
 8007336:	d122      	bne.n	800737e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800734c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007362:	2b01      	cmp	r3, #1
 8007364:	d105      	bne.n	8007372 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f94a 	bl	800760c <USB_CoreReset>
 8007378:	4603      	mov	r3, r0
 800737a:	73fb      	strb	r3, [r7, #15]
 800737c:	e01a      	b.n	80073b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f93e 	bl	800760c <USB_CoreReset>
 8007390:	4603      	mov	r3, r0
 8007392:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007396:	2b00      	cmp	r3, #0
 8007398:	d106      	bne.n	80073a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	639a      	str	r2, [r3, #56]	; 0x38
 80073a6:	e005      	b.n	80073b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80073b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d10b      	bne.n	80073d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f043 0206 	orr.w	r2, r3, #6
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f043 0220 	orr.w	r2, r3, #32
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073de:	b004      	add	sp, #16
 80073e0:	4770      	bx	lr

080073e2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b083      	sub	sp, #12
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f043 0201 	orr.w	r2, r3, #1
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f023 0201 	bic.w	r2, r3, #1
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b082      	sub	sp, #8
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	460b      	mov	r3, r1
 8007430:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800743e:	78fb      	ldrb	r3, [r7, #3]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d106      	bne.n	8007452 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	60da      	str	r2, [r3, #12]
 8007450:	e00b      	b.n	800746a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007452:	78fb      	ldrb	r3, [r7, #3]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d106      	bne.n	8007466 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	60da      	str	r2, [r3, #12]
 8007464:	e001      	b.n	800746a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e003      	b.n	8007472 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800746a:	2032      	movs	r0, #50	; 0x32
 800746c:	f7fa ffe0 	bl	8002430 <HAL_Delay>

  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3708      	adds	r7, #8
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
	...

0800747c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007486:	2300      	movs	r3, #0
 8007488:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	019b      	lsls	r3, r3, #6
 800748e:	f043 0220 	orr.w	r2, r3, #32
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	3301      	adds	r3, #1
 800749a:	60fb      	str	r3, [r7, #12]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4a09      	ldr	r2, [pc, #36]	; (80074c4 <USB_FlushTxFifo+0x48>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d901      	bls.n	80074a8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e006      	b.n	80074b6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	f003 0320 	and.w	r3, r3, #32
 80074b0:	2b20      	cmp	r3, #32
 80074b2:	d0f0      	beq.n	8007496 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	00030d40 	.word	0x00030d40

080074c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80074d0:	2300      	movs	r3, #0
 80074d2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2210      	movs	r2, #16
 80074d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	3301      	adds	r3, #1
 80074de:	60fb      	str	r3, [r7, #12]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	4a09      	ldr	r2, [pc, #36]	; (8007508 <USB_FlushRxFifo+0x40>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d901      	bls.n	80074ec <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e006      	b.n	80074fa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	f003 0310 	and.w	r3, r3, #16
 80074f4:	2b10      	cmp	r3, #16
 80074f6:	d0f0      	beq.n	80074da <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	00030d40 	.word	0x00030d40

0800750c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800750c:	b480      	push	{r7}
 800750e:	b089      	sub	sp, #36	; 0x24
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	4611      	mov	r1, r2
 8007518:	461a      	mov	r2, r3
 800751a:	460b      	mov	r3, r1
 800751c:	71fb      	strb	r3, [r7, #7]
 800751e:	4613      	mov	r3, r2
 8007520:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800752a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800752e:	2b00      	cmp	r3, #0
 8007530:	d11a      	bne.n	8007568 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007532:	88bb      	ldrh	r3, [r7, #4]
 8007534:	3303      	adds	r3, #3
 8007536:	089b      	lsrs	r3, r3, #2
 8007538:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800753a:	2300      	movs	r3, #0
 800753c:	61bb      	str	r3, [r7, #24]
 800753e:	e00f      	b.n	8007560 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007540:	79fb      	ldrb	r3, [r7, #7]
 8007542:	031a      	lsls	r2, r3, #12
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	4413      	add	r3, r2
 8007548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800754c:	461a      	mov	r2, r3
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	3304      	adds	r3, #4
 8007558:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	3301      	adds	r3, #1
 800755e:	61bb      	str	r3, [r7, #24]
 8007560:	69ba      	ldr	r2, [r7, #24]
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	429a      	cmp	r2, r3
 8007566:	d3eb      	bcc.n	8007540 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3724      	adds	r7, #36	; 0x24
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007576:	b480      	push	{r7}
 8007578:	b089      	sub	sp, #36	; 0x24
 800757a:	af00      	add	r7, sp, #0
 800757c:	60f8      	str	r0, [r7, #12]
 800757e:	60b9      	str	r1, [r7, #8]
 8007580:	4613      	mov	r3, r2
 8007582:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800758c:	88fb      	ldrh	r3, [r7, #6]
 800758e:	3303      	adds	r3, #3
 8007590:	089b      	lsrs	r3, r3, #2
 8007592:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007594:	2300      	movs	r3, #0
 8007596:	61bb      	str	r3, [r7, #24]
 8007598:	e00b      	b.n	80075b2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	601a      	str	r2, [r3, #0]
    pDest++;
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	3304      	adds	r3, #4
 80075aa:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	3301      	adds	r3, #1
 80075b0:	61bb      	str	r3, [r7, #24]
 80075b2:	69ba      	ldr	r2, [r7, #24]
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d3ef      	bcc.n	800759a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80075ba:	69fb      	ldr	r3, [r7, #28]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3724      	adds	r7, #36	; 0x24
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	4013      	ands	r3, r2
 80075de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80075e0:	68fb      	ldr	r3, [r7, #12]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b083      	sub	sp, #12
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	f003 0301 	and.w	r3, r3, #1
}
 80075fe:	4618      	mov	r0, r3
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
	...

0800760c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007614:	2300      	movs	r3, #0
 8007616:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	3301      	adds	r3, #1
 800761c:	60fb      	str	r3, [r7, #12]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	4a13      	ldr	r2, [pc, #76]	; (8007670 <USB_CoreReset+0x64>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d901      	bls.n	800762a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e01b      	b.n	8007662 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	2b00      	cmp	r3, #0
 8007630:	daf2      	bge.n	8007618 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	f043 0201 	orr.w	r2, r3, #1
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	3301      	adds	r3, #1
 8007646:	60fb      	str	r3, [r7, #12]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	4a09      	ldr	r2, [pc, #36]	; (8007670 <USB_CoreReset+0x64>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d901      	bls.n	8007654 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e006      	b.n	8007662 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	f003 0301 	and.w	r3, r3, #1
 800765c:	2b01      	cmp	r3, #1
 800765e:	d0f0      	beq.n	8007642 <USB_CoreReset+0x36>

  return HAL_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	00030d40 	.word	0x00030d40

08007674 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007674:	b084      	sub	sp, #16
 8007676:	b580      	push	{r7, lr}
 8007678:	b084      	sub	sp, #16
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
 800767e:	f107 001c 	add.w	r0, r7, #28
 8007682:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007690:	461a      	mov	r2, r3
 8007692:	2300      	movs	r3, #0
 8007694:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d018      	beq.n	80076f8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80076c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d10a      	bne.n	80076e2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076da:	f043 0304 	orr.w	r3, r3, #4
 80076de:	6013      	str	r3, [r2, #0]
 80076e0:	e014      	b.n	800770c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076f0:	f023 0304 	bic.w	r3, r3, #4
 80076f4:	6013      	str	r3, [r2, #0]
 80076f6:	e009      	b.n	800770c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007706:	f023 0304 	bic.w	r3, r3, #4
 800770a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800770c:	2110      	movs	r1, #16
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f7ff feb4 	bl	800747c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f7ff fed7 	bl	80074c8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800771a:	2300      	movs	r3, #0
 800771c:	60fb      	str	r3, [r7, #12]
 800771e:	e015      	b.n	800774c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	015a      	lsls	r2, r3, #5
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	4413      	add	r3, r2
 8007728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800772c:	461a      	mov	r2, r3
 800772e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007732:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	015a      	lsls	r2, r3, #5
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	4413      	add	r3, r2
 800773c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007740:	461a      	mov	r2, r3
 8007742:	2300      	movs	r3, #0
 8007744:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3301      	adds	r3, #1
 800774a:	60fb      	str	r3, [r7, #12]
 800774c:	6a3b      	ldr	r3, [r7, #32]
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	429a      	cmp	r2, r3
 8007752:	d3e5      	bcc.n	8007720 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8007754:	2101      	movs	r1, #1
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f8ac 	bl	80078b4 <USB_DriveVbus>

  HAL_Delay(200U);
 800775c:	20c8      	movs	r0, #200	; 0xc8
 800775e:	f7fa fe67 	bl	8002430 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800776e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00b      	beq.n	8007794 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007782:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a14      	ldr	r2, [pc, #80]	; (80077d8 <USB_HostInit+0x164>)
 8007788:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a13      	ldr	r2, [pc, #76]	; (80077dc <USB_HostInit+0x168>)
 800778e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007792:	e009      	b.n	80077a8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2280      	movs	r2, #128	; 0x80
 8007798:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a10      	ldr	r2, [pc, #64]	; (80077e0 <USB_HostInit+0x16c>)
 800779e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a10      	ldr	r2, [pc, #64]	; (80077e4 <USB_HostInit+0x170>)
 80077a4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80077a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d105      	bne.n	80077ba <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	f043 0210 	orr.w	r2, r3, #16
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	699a      	ldr	r2, [r3, #24]
 80077be:	4b0a      	ldr	r3, [pc, #40]	; (80077e8 <USB_HostInit+0x174>)
 80077c0:	4313      	orrs	r3, r2
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077d2:	b004      	add	sp, #16
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	01000200 	.word	0x01000200
 80077dc:	00e00300 	.word	0x00e00300
 80077e0:	00600080 	.word	0x00600080
 80077e4:	004000e0 	.word	0x004000e0
 80077e8:	a3200008 	.word	0xa3200008

080077ec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	460b      	mov	r3, r1
 80077f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800780a:	f023 0303 	bic.w	r3, r3, #3
 800780e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	78fb      	ldrb	r3, [r7, #3]
 800781a:	f003 0303 	and.w	r3, r3, #3
 800781e:	68f9      	ldr	r1, [r7, #12]
 8007820:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007824:	4313      	orrs	r3, r2
 8007826:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007828:	78fb      	ldrb	r3, [r7, #3]
 800782a:	2b01      	cmp	r3, #1
 800782c:	d107      	bne.n	800783e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007834:	461a      	mov	r2, r3
 8007836:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800783a:	6053      	str	r3, [r2, #4]
 800783c:	e009      	b.n	8007852 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800783e:	78fb      	ldrb	r3, [r7, #3]
 8007840:	2b02      	cmp	r3, #2
 8007842:	d106      	bne.n	8007852 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800784a:	461a      	mov	r2, r3
 800784c:	f241 7370 	movw	r3, #6000	; 0x1770
 8007850:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800786c:	2300      	movs	r3, #0
 800786e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007880:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800788a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800788e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007890:	2064      	movs	r0, #100	; 0x64
 8007892:	f7fa fdcd 	bl	8002430 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800789e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078a2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80078a4:	200a      	movs	r0, #10
 80078a6:	f7fa fdc3 	bl	8002430 <HAL_Delay>

  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	460b      	mov	r3, r1
 80078be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80078c4:	2300      	movs	r3, #0
 80078c6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80078d8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d109      	bne.n	80078f8 <USB_DriveVbus+0x44>
 80078e4:	78fb      	ldrb	r3, [r7, #3]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d106      	bne.n	80078f8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80078f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80078f6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007902:	d109      	bne.n	8007918 <USB_DriveVbus+0x64>
 8007904:	78fb      	ldrb	r3, [r7, #3]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d106      	bne.n	8007918 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007912:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007916:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007926:	b480      	push	{r7}
 8007928:	b085      	sub	sp, #20
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007932:	2300      	movs	r3, #0
 8007934:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	0c5b      	lsrs	r3, r3, #17
 8007944:	f003 0303 	and.w	r3, r3, #3
}
 8007948:	4618      	mov	r0, r3
 800794a:	3714      	adds	r7, #20
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	b29b      	uxth	r3, r3
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
	...

08007978 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b088      	sub	sp, #32
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	4608      	mov	r0, r1
 8007982:	4611      	mov	r1, r2
 8007984:	461a      	mov	r2, r3
 8007986:	4603      	mov	r3, r0
 8007988:	70fb      	strb	r3, [r7, #3]
 800798a:	460b      	mov	r3, r1
 800798c:	70bb      	strb	r3, [r7, #2]
 800798e:	4613      	mov	r3, r2
 8007990:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007992:	2300      	movs	r3, #0
 8007994:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800799a:	78fb      	ldrb	r3, [r7, #3]
 800799c:	015a      	lsls	r2, r3, #5
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	4413      	add	r3, r2
 80079a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079a6:	461a      	mov	r2, r3
 80079a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079ac:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80079ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	d87e      	bhi.n	8007ab4 <USB_HC_Init+0x13c>
 80079b6:	a201      	add	r2, pc, #4	; (adr r2, 80079bc <USB_HC_Init+0x44>)
 80079b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079bc:	080079cd 	.word	0x080079cd
 80079c0:	08007a77 	.word	0x08007a77
 80079c4:	080079cd 	.word	0x080079cd
 80079c8:	08007a39 	.word	0x08007a39
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80079cc:	78fb      	ldrb	r3, [r7, #3]
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079d8:	461a      	mov	r2, r3
 80079da:	f240 439d 	movw	r3, #1181	; 0x49d
 80079de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80079e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	da10      	bge.n	8007a0a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80079e8:	78fb      	ldrb	r3, [r7, #3]
 80079ea:	015a      	lsls	r2, r3, #5
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	78fa      	ldrb	r2, [r7, #3]
 80079f8:	0151      	lsls	r1, r2, #5
 80079fa:	693a      	ldr	r2, [r7, #16]
 80079fc:	440a      	add	r2, r1
 80079fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a06:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007a08:	e057      	b.n	8007aba <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d051      	beq.n	8007aba <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007a16:	78fb      	ldrb	r3, [r7, #3]
 8007a18:	015a      	lsls	r2, r3, #5
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	78fa      	ldrb	r2, [r7, #3]
 8007a26:	0151      	lsls	r1, r2, #5
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	440a      	add	r2, r1
 8007a2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a30:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007a34:	60d3      	str	r3, [r2, #12]
      break;
 8007a36:	e040      	b.n	8007aba <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a38:	78fb      	ldrb	r3, [r7, #3]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a44:	461a      	mov	r2, r3
 8007a46:	f240 639d 	movw	r3, #1693	; 0x69d
 8007a4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007a4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	da34      	bge.n	8007abe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007a54:	78fb      	ldrb	r3, [r7, #3]
 8007a56:	015a      	lsls	r2, r3, #5
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	78fa      	ldrb	r2, [r7, #3]
 8007a64:	0151      	lsls	r1, r2, #5
 8007a66:	693a      	ldr	r2, [r7, #16]
 8007a68:	440a      	add	r2, r1
 8007a6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a72:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007a74:	e023      	b.n	8007abe <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a76:	78fb      	ldrb	r3, [r7, #3]
 8007a78:	015a      	lsls	r2, r3, #5
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a82:	461a      	mov	r2, r3
 8007a84:	f240 2325 	movw	r3, #549	; 0x225
 8007a88:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007a8a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	da17      	bge.n	8007ac2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007a92:	78fb      	ldrb	r3, [r7, #3]
 8007a94:	015a      	lsls	r2, r3, #5
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	4413      	add	r3, r2
 8007a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	78fa      	ldrb	r2, [r7, #3]
 8007aa2:	0151      	lsls	r1, r2, #5
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	440a      	add	r2, r1
 8007aa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007aac:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007ab0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007ab2:	e006      	b.n	8007ac2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	77fb      	strb	r3, [r7, #31]
      break;
 8007ab8:	e004      	b.n	8007ac4 <USB_HC_Init+0x14c>
      break;
 8007aba:	bf00      	nop
 8007abc:	e002      	b.n	8007ac4 <USB_HC_Init+0x14c>
      break;
 8007abe:	bf00      	nop
 8007ac0:	e000      	b.n	8007ac4 <USB_HC_Init+0x14c>
      break;
 8007ac2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007aca:	699a      	ldr	r2, [r3, #24]
 8007acc:	78fb      	ldrb	r3, [r7, #3]
 8007ace:	f003 030f 	and.w	r3, r3, #15
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ad8:	6939      	ldr	r1, [r7, #16]
 8007ada:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007aee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	da03      	bge.n	8007afe <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007afa:	61bb      	str	r3, [r7, #24]
 8007afc:	e001      	b.n	8007b02 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f7ff ff0f 	bl	8007926 <USB_GetHostSpeed>
 8007b08:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007b0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d106      	bne.n	8007b20 <USB_HC_Init+0x1a8>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d003      	beq.n	8007b20 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007b18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b1c:	617b      	str	r3, [r7, #20]
 8007b1e:	e001      	b.n	8007b24 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007b20:	2300      	movs	r3, #0
 8007b22:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b24:	787b      	ldrb	r3, [r7, #1]
 8007b26:	059b      	lsls	r3, r3, #22
 8007b28:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007b2c:	78bb      	ldrb	r3, [r7, #2]
 8007b2e:	02db      	lsls	r3, r3, #11
 8007b30:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b34:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007b36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007b3a:	049b      	lsls	r3, r3, #18
 8007b3c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007b40:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007b42:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007b44:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007b48:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b4e:	78fb      	ldrb	r3, [r7, #3]
 8007b50:	0159      	lsls	r1, r3, #5
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	440b      	add	r3, r1
 8007b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b5a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b60:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007b62:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	d10f      	bne.n	8007b8a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007b6a:	78fb      	ldrb	r3, [r7, #3]
 8007b6c:	015a      	lsls	r2, r3, #5
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	4413      	add	r3, r2
 8007b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	78fa      	ldrb	r2, [r7, #3]
 8007b7a:	0151      	lsls	r1, r2, #5
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	440a      	add	r2, r1
 8007b80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b88:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007b8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3720      	adds	r7, #32
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b08c      	sub	sp, #48	; 0x30
 8007b98:	af02      	add	r7, sp, #8
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	785b      	ldrb	r3, [r3, #1]
 8007baa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007bac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bb0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d02d      	beq.n	8007c1a <USB_HC_StartXfer+0x86>
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	791b      	ldrb	r3, [r3, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d129      	bne.n	8007c1a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007bc6:	79fb      	ldrb	r3, [r7, #7]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d117      	bne.n	8007bfc <USB_HC_StartXfer+0x68>
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	79db      	ldrb	r3, [r3, #7]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d003      	beq.n	8007bdc <USB_HC_StartXfer+0x48>
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	79db      	ldrb	r3, [r3, #7]
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d10f      	bne.n	8007bfc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	015a      	lsls	r2, r3, #5
 8007be0:	6a3b      	ldr	r3, [r7, #32]
 8007be2:	4413      	add	r3, r2
 8007be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	69fa      	ldr	r2, [r7, #28]
 8007bec:	0151      	lsls	r1, r2, #5
 8007bee:	6a3a      	ldr	r2, [r7, #32]
 8007bf0:	440a      	add	r2, r1
 8007bf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bfa:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007bfc:	79fb      	ldrb	r3, [r7, #7]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d10b      	bne.n	8007c1a <USB_HC_StartXfer+0x86>
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	795b      	ldrb	r3, [r3, #5]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d107      	bne.n	8007c1a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	785b      	ldrb	r3, [r3, #1]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f000 fa2f 	bl	8008074 <USB_DoPing>
      return HAL_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	e0f8      	b.n	8007e0c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d018      	beq.n	8007c54 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	68ba      	ldr	r2, [r7, #8]
 8007c28:	8912      	ldrh	r2, [r2, #8]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	8912      	ldrh	r2, [r2, #8]
 8007c32:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c36:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007c38:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007c3a:	8b7b      	ldrh	r3, [r7, #26]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d90b      	bls.n	8007c58 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007c40:	8b7b      	ldrh	r3, [r7, #26]
 8007c42:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007c44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	8912      	ldrh	r2, [r2, #8]
 8007c4a:	fb02 f203 	mul.w	r2, r2, r3
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	611a      	str	r2, [r3, #16]
 8007c52:	e001      	b.n	8007c58 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007c54:	2301      	movs	r3, #1
 8007c56:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	78db      	ldrb	r3, [r3, #3]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d007      	beq.n	8007c70 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007c60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	8912      	ldrh	r2, [r2, #8]
 8007c66:	fb02 f203 	mul.w	r2, r2, r3
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	611a      	str	r2, [r3, #16]
 8007c6e:	e003      	b.n	8007c78 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	695a      	ldr	r2, [r3, #20]
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007c80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c82:	04d9      	lsls	r1, r3, #19
 8007c84:	4b63      	ldr	r3, [pc, #396]	; (8007e14 <USB_HC_StartXfer+0x280>)
 8007c86:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c88:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	7a9b      	ldrb	r3, [r3, #10]
 8007c8e:	075b      	lsls	r3, r3, #29
 8007c90:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c94:	69f9      	ldr	r1, [r7, #28]
 8007c96:	0148      	lsls	r0, r1, #5
 8007c98:	6a39      	ldr	r1, [r7, #32]
 8007c9a:	4401      	add	r1, r0
 8007c9c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007ca0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ca2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007ca4:	79fb      	ldrb	r3, [r7, #7]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d009      	beq.n	8007cbe <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	68d9      	ldr	r1, [r3, #12]
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	015a      	lsls	r2, r3, #5
 8007cb2:	6a3b      	ldr	r3, [r7, #32]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cba:	460a      	mov	r2, r1
 8007cbc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007cbe:	6a3b      	ldr	r3, [r7, #32]
 8007cc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	bf0c      	ite	eq
 8007cce:	2301      	moveq	r3, #1
 8007cd0:	2300      	movne	r3, #0
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	015a      	lsls	r2, r3, #5
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	4413      	add	r3, r2
 8007cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	69fa      	ldr	r2, [r7, #28]
 8007ce6:	0151      	lsls	r1, r2, #5
 8007ce8:	6a3a      	ldr	r2, [r7, #32]
 8007cea:	440a      	add	r2, r1
 8007cec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cf0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007cf4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	015a      	lsls	r2, r3, #5
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	7e7b      	ldrb	r3, [r7, #25]
 8007d06:	075b      	lsls	r3, r3, #29
 8007d08:	69f9      	ldr	r1, [r7, #28]
 8007d0a:	0148      	lsls	r0, r1, #5
 8007d0c:	6a39      	ldr	r1, [r7, #32]
 8007d0e:	4401      	add	r1, r0
 8007d10:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007d14:	4313      	orrs	r3, r2
 8007d16:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	6a3b      	ldr	r3, [r7, #32]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d2e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	78db      	ldrb	r3, [r3, #3]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d004      	beq.n	8007d42 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d3e:	613b      	str	r3, [r7, #16]
 8007d40:	e003      	b.n	8007d4a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d48:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d50:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	015a      	lsls	r2, r3, #5
 8007d56:	6a3b      	ldr	r3, [r7, #32]
 8007d58:	4413      	add	r3, r2
 8007d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d5e:	461a      	mov	r2, r3
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007d64:	79fb      	ldrb	r3, [r7, #7]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d001      	beq.n	8007d6e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	e04e      	b.n	8007e0c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	78db      	ldrb	r3, [r3, #3]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d149      	bne.n	8007e0a <USB_HC_StartXfer+0x276>
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	695b      	ldr	r3, [r3, #20]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d045      	beq.n	8007e0a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	79db      	ldrb	r3, [r3, #7]
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d830      	bhi.n	8007de8 <USB_HC_StartXfer+0x254>
 8007d86:	a201      	add	r2, pc, #4	; (adr r2, 8007d8c <USB_HC_StartXfer+0x1f8>)
 8007d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8c:	08007d9d 	.word	0x08007d9d
 8007d90:	08007dc1 	.word	0x08007dc1
 8007d94:	08007d9d 	.word	0x08007d9d
 8007d98:	08007dc1 	.word	0x08007dc1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	695b      	ldr	r3, [r3, #20]
 8007da0:	3303      	adds	r3, #3
 8007da2:	089b      	lsrs	r3, r3, #2
 8007da4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007da6:	8afa      	ldrh	r2, [r7, #22]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d91c      	bls.n	8007dec <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	f043 0220 	orr.w	r2, r3, #32
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	619a      	str	r2, [r3, #24]
        }
        break;
 8007dbe:	e015      	b.n	8007dec <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	695b      	ldr	r3, [r3, #20]
 8007dc4:	3303      	adds	r3, #3
 8007dc6:	089b      	lsrs	r3, r3, #2
 8007dc8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007dca:	8afa      	ldrh	r2, [r7, #22]
 8007dcc:	6a3b      	ldr	r3, [r7, #32]
 8007dce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d90a      	bls.n	8007df0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	619a      	str	r2, [r3, #24]
        }
        break;
 8007de6:	e003      	b.n	8007df0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007de8:	bf00      	nop
 8007dea:	e002      	b.n	8007df2 <USB_HC_StartXfer+0x25e>
        break;
 8007dec:	bf00      	nop
 8007dee:	e000      	b.n	8007df2 <USB_HC_StartXfer+0x25e>
        break;
 8007df0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	68d9      	ldr	r1, [r3, #12]
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	785a      	ldrb	r2, [r3, #1]
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	2000      	movs	r0, #0
 8007e02:	9000      	str	r0, [sp, #0]
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f7ff fb81 	bl	800750c <USB_WritePacket>
  }

  return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3728      	adds	r7, #40	; 0x28
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	1ff80000 	.word	0x1ff80000

08007e18 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	b29b      	uxth	r3, r3
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007e3a:	b480      	push	{r7}
 8007e3c:	b089      	sub	sp, #36	; 0x24
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	460b      	mov	r3, r1
 8007e44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8007e4a:	78fb      	ldrb	r3, [r7, #3]
 8007e4c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	015a      	lsls	r2, r3, #5
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	4413      	add	r3, r2
 8007e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	0c9b      	lsrs	r3, r3, #18
 8007e62:	f003 0303 	and.w	r3, r3, #3
 8007e66:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	0fdb      	lsrs	r3, r3, #31
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f003 0320 	and.w	r3, r3, #32
 8007e86:	2b20      	cmp	r3, #32
 8007e88:	d104      	bne.n	8007e94 <USB_HC_Halt+0x5a>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d101      	bne.n	8007e94 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	e0e8      	b.n	8008066 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d002      	beq.n	8007ea0 <USB_HC_Halt+0x66>
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d173      	bne.n	8007f88 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	015a      	lsls	r2, r3, #5
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	0151      	lsls	r1, r2, #5
 8007eb2:	69ba      	ldr	r2, [r7, #24]
 8007eb4:	440a      	add	r2, r1
 8007eb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ebe:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	f003 0320 	and.w	r3, r3, #32
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f040 80cb 	bne.w	8008064 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d143      	bne.n	8007f62 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	015a      	lsls	r2, r3, #5
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	697a      	ldr	r2, [r7, #20]
 8007eea:	0151      	lsls	r1, r2, #5
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	440a      	add	r2, r1
 8007ef0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ef4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ef8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	015a      	lsls	r2, r3, #5
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	697a      	ldr	r2, [r7, #20]
 8007f0a:	0151      	lsls	r1, r2, #5
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	440a      	add	r2, r1
 8007f10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f18:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	015a      	lsls	r2, r3, #5
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	4413      	add	r3, r2
 8007f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	0151      	lsls	r1, r2, #5
 8007f2c:	69ba      	ldr	r2, [r7, #24]
 8007f2e:	440a      	add	r2, r1
 8007f30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f38:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	61fb      	str	r3, [r7, #28]
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f46:	d81d      	bhi.n	8007f84 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f5e:	d0ec      	beq.n	8007f3a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f60:	e080      	b.n	8008064 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	015a      	lsls	r2, r3, #5
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	4413      	add	r3, r2
 8007f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	697a      	ldr	r2, [r7, #20]
 8007f72:	0151      	lsls	r1, r2, #5
 8007f74:	69ba      	ldr	r2, [r7, #24]
 8007f76:	440a      	add	r2, r1
 8007f78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f80:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f82:	e06f      	b.n	8008064 <USB_HC_Halt+0x22a>
            break;
 8007f84:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f86:	e06d      	b.n	8008064 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	015a      	lsls	r2, r3, #5
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	4413      	add	r3, r2
 8007f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	0151      	lsls	r1, r2, #5
 8007f9a:	69ba      	ldr	r2, [r7, #24]
 8007f9c:	440a      	add	r2, r1
 8007f9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fa2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fa6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d143      	bne.n	8008040 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	697a      	ldr	r2, [r7, #20]
 8007fc8:	0151      	lsls	r1, r2, #5
 8007fca:	69ba      	ldr	r2, [r7, #24]
 8007fcc:	440a      	add	r2, r1
 8007fce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fd6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	015a      	lsls	r2, r3, #5
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	0151      	lsls	r1, r2, #5
 8007fea:	69ba      	ldr	r2, [r7, #24]
 8007fec:	440a      	add	r2, r1
 8007fee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ff2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ff6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	015a      	lsls	r2, r3, #5
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	4413      	add	r3, r2
 8008000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	0151      	lsls	r1, r2, #5
 800800a:	69ba      	ldr	r2, [r7, #24]
 800800c:	440a      	add	r2, r1
 800800e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008012:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008016:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	3301      	adds	r3, #1
 800801c:	61fb      	str	r3, [r7, #28]
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008024:	d81d      	bhi.n	8008062 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	015a      	lsls	r2, r3, #5
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	4413      	add	r3, r2
 800802e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008038:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800803c:	d0ec      	beq.n	8008018 <USB_HC_Halt+0x1de>
 800803e:	e011      	b.n	8008064 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	4413      	add	r3, r2
 8008048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	0151      	lsls	r1, r2, #5
 8008052:	69ba      	ldr	r2, [r7, #24]
 8008054:	440a      	add	r2, r1
 8008056:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800805a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800805e:	6013      	str	r3, [r2, #0]
 8008060:	e000      	b.n	8008064 <USB_HC_Halt+0x22a>
          break;
 8008062:	bf00      	nop
    }
  }

  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3724      	adds	r7, #36	; 0x24
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
	...

08008074 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008074:	b480      	push	{r7}
 8008076:	b087      	sub	sp, #28
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	460b      	mov	r3, r1
 800807e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008084:	78fb      	ldrb	r3, [r7, #3]
 8008086:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008088:	2301      	movs	r3, #1
 800808a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	04da      	lsls	r2, r3, #19
 8008090:	4b15      	ldr	r3, [pc, #84]	; (80080e8 <USB_DoPing+0x74>)
 8008092:	4013      	ands	r3, r2
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	0151      	lsls	r1, r2, #5
 8008098:	697a      	ldr	r2, [r7, #20]
 800809a:	440a      	add	r2, r1
 800809c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80080a4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	015a      	lsls	r2, r3, #5
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	4413      	add	r3, r2
 80080ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80080bc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80080c4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	015a      	lsls	r2, r3, #5
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	4413      	add	r3, r2
 80080ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080d2:	461a      	mov	r2, r3
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	371c      	adds	r7, #28
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	1ff80000 	.word	0x1ff80000

080080ec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b086      	sub	sp, #24
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80080f8:	2300      	movs	r3, #0
 80080fa:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7ff f981 	bl	8007404 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008102:	2110      	movs	r1, #16
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7ff f9b9 	bl	800747c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f7ff f9dc 	bl	80074c8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008110:	2300      	movs	r3, #0
 8008112:	613b      	str	r3, [r7, #16]
 8008114:	e01f      	b.n	8008156 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	015a      	lsls	r2, r3, #5
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	4413      	add	r3, r2
 800811e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800812c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008134:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800813c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	015a      	lsls	r2, r3, #5
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	4413      	add	r3, r2
 8008146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800814a:	461a      	mov	r2, r3
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	3301      	adds	r3, #1
 8008154:	613b      	str	r3, [r7, #16]
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	2b0f      	cmp	r3, #15
 800815a:	d9dc      	bls.n	8008116 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800815c:	2300      	movs	r3, #0
 800815e:	613b      	str	r3, [r7, #16]
 8008160:	e034      	b.n	80081cc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	015a      	lsls	r2, r3, #5
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	4413      	add	r3, r2
 800816a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008178:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008180:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008188:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	015a      	lsls	r2, r3, #5
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	4413      	add	r3, r2
 8008192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008196:	461a      	mov	r2, r3
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	3301      	adds	r3, #1
 80081a0:	617b      	str	r3, [r7, #20]
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081a8:	d80c      	bhi.n	80081c4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	015a      	lsls	r2, r3, #5
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	4413      	add	r3, r2
 80081b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081c0:	d0ec      	beq.n	800819c <USB_StopHost+0xb0>
 80081c2:	e000      	b.n	80081c6 <USB_StopHost+0xda>
        break;
 80081c4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	3301      	adds	r3, #1
 80081ca:	613b      	str	r3, [r7, #16]
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	2b0f      	cmp	r3, #15
 80081d0:	d9c7      	bls.n	8008162 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081d8:	461a      	mov	r2, r3
 80081da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081de:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081e6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f7ff f8fa 	bl	80073e2 <USB_EnableGlobalInt>

  return HAL_OK;
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3718      	adds	r7, #24
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80081f8:	b590      	push	{r4, r7, lr}
 80081fa:	b089      	sub	sp, #36	; 0x24
 80081fc:	af04      	add	r7, sp, #16
 80081fe:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008200:	2301      	movs	r3, #1
 8008202:	2202      	movs	r2, #2
 8008204:	2102      	movs	r1, #2
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fc66 	bl	8008ad8 <USBH_FindInterface>
 800820c:	4603      	mov	r3, r0
 800820e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008210:	7bfb      	ldrb	r3, [r7, #15]
 8008212:	2bff      	cmp	r3, #255	; 0xff
 8008214:	d002      	beq.n	800821c <USBH_CDC_InterfaceInit+0x24>
 8008216:	7bfb      	ldrb	r3, [r7, #15]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d901      	bls.n	8008220 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800821c:	2302      	movs	r3, #2
 800821e:	e13d      	b.n	800849c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008220:	7bfb      	ldrb	r3, [r7, #15]
 8008222:	4619      	mov	r1, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 fc3b 	bl	8008aa0 <USBH_SelectInterface>
 800822a:	4603      	mov	r3, r0
 800822c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800822e:	7bbb      	ldrb	r3, [r7, #14]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d001      	beq.n	8008238 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008234:	2302      	movs	r3, #2
 8008236:	e131      	b.n	800849c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800823e:	2050      	movs	r0, #80	; 0x50
 8008240:	f002 fa00 	bl	800a644 <malloc>
 8008244:	4603      	mov	r3, r0
 8008246:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800824e:	69db      	ldr	r3, [r3, #28]
 8008250:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d101      	bne.n	800825c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008258:	2302      	movs	r3, #2
 800825a:	e11f      	b.n	800849c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800825c:	2250      	movs	r2, #80	; 0x50
 800825e:	2100      	movs	r1, #0
 8008260:	68b8      	ldr	r0, [r7, #8]
 8008262:	f002 f9ff 	bl	800a664 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008266:	7bfb      	ldrb	r3, [r7, #15]
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	211a      	movs	r1, #26
 800826c:	fb01 f303 	mul.w	r3, r1, r3
 8008270:	4413      	add	r3, r2
 8008272:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	b25b      	sxtb	r3, r3
 800827a:	2b00      	cmp	r3, #0
 800827c:	da15      	bge.n	80082aa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800827e:	7bfb      	ldrb	r3, [r7, #15]
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	211a      	movs	r1, #26
 8008284:	fb01 f303 	mul.w	r3, r1, r3
 8008288:	4413      	add	r3, r2
 800828a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800828e:	781a      	ldrb	r2, [r3, #0]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008294:	7bfb      	ldrb	r3, [r7, #15]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	211a      	movs	r1, #26
 800829a:	fb01 f303 	mul.w	r3, r1, r3
 800829e:	4413      	add	r3, r2
 80082a0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80082a4:	881a      	ldrh	r2, [r3, #0]
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	785b      	ldrb	r3, [r3, #1]
 80082ae:	4619      	mov	r1, r3
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f001 fe32 	bl	8009f1a <USBH_AllocPipe>
 80082b6:	4603      	mov	r3, r0
 80082b8:	461a      	mov	r2, r3
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	7819      	ldrb	r1, [r3, #0]
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	7858      	ldrb	r0, [r3, #1]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	8952      	ldrh	r2, [r2, #10]
 80082d6:	9202      	str	r2, [sp, #8]
 80082d8:	2203      	movs	r2, #3
 80082da:	9201      	str	r2, [sp, #4]
 80082dc:	9300      	str	r3, [sp, #0]
 80082de:	4623      	mov	r3, r4
 80082e0:	4602      	mov	r2, r0
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f001 fdea 	bl	8009ebc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	2200      	movs	r2, #0
 80082ee:	4619      	mov	r1, r3
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f002 f8f9 	bl	800a4e8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80082f6:	2300      	movs	r3, #0
 80082f8:	2200      	movs	r2, #0
 80082fa:	210a      	movs	r1, #10
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fbeb 	bl	8008ad8 <USBH_FindInterface>
 8008302:	4603      	mov	r3, r0
 8008304:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008306:	7bfb      	ldrb	r3, [r7, #15]
 8008308:	2bff      	cmp	r3, #255	; 0xff
 800830a:	d002      	beq.n	8008312 <USBH_CDC_InterfaceInit+0x11a>
 800830c:	7bfb      	ldrb	r3, [r7, #15]
 800830e:	2b01      	cmp	r3, #1
 8008310:	d901      	bls.n	8008316 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008312:	2302      	movs	r3, #2
 8008314:	e0c2      	b.n	800849c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008316:	7bfb      	ldrb	r3, [r7, #15]
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	211a      	movs	r1, #26
 800831c:	fb01 f303 	mul.w	r3, r1, r3
 8008320:	4413      	add	r3, r2
 8008322:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	b25b      	sxtb	r3, r3
 800832a:	2b00      	cmp	r3, #0
 800832c:	da16      	bge.n	800835c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800832e:	7bfb      	ldrb	r3, [r7, #15]
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	211a      	movs	r1, #26
 8008334:	fb01 f303 	mul.w	r3, r1, r3
 8008338:	4413      	add	r3, r2
 800833a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800833e:	781a      	ldrb	r2, [r3, #0]
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008344:	7bfb      	ldrb	r3, [r7, #15]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	211a      	movs	r1, #26
 800834a:	fb01 f303 	mul.w	r3, r1, r3
 800834e:	4413      	add	r3, r2
 8008350:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008354:	881a      	ldrh	r2, [r3, #0]
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	835a      	strh	r2, [r3, #26]
 800835a:	e015      	b.n	8008388 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800835c:	7bfb      	ldrb	r3, [r7, #15]
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	211a      	movs	r1, #26
 8008362:	fb01 f303 	mul.w	r3, r1, r3
 8008366:	4413      	add	r3, r2
 8008368:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800836c:	781a      	ldrb	r2, [r3, #0]
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008372:	7bfb      	ldrb	r3, [r7, #15]
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	211a      	movs	r1, #26
 8008378:	fb01 f303 	mul.w	r3, r1, r3
 800837c:	4413      	add	r3, r2
 800837e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008382:	881a      	ldrh	r2, [r3, #0]
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008388:	7bfb      	ldrb	r3, [r7, #15]
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	211a      	movs	r1, #26
 800838e:	fb01 f303 	mul.w	r3, r1, r3
 8008392:	4413      	add	r3, r2
 8008394:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	b25b      	sxtb	r3, r3
 800839c:	2b00      	cmp	r3, #0
 800839e:	da16      	bge.n	80083ce <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	211a      	movs	r1, #26
 80083a6:	fb01 f303 	mul.w	r3, r1, r3
 80083aa:	4413      	add	r3, r2
 80083ac:	f203 3356 	addw	r3, r3, #854	; 0x356
 80083b0:	781a      	ldrb	r2, [r3, #0]
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80083b6:	7bfb      	ldrb	r3, [r7, #15]
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	211a      	movs	r1, #26
 80083bc:	fb01 f303 	mul.w	r3, r1, r3
 80083c0:	4413      	add	r3, r2
 80083c2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80083c6:	881a      	ldrh	r2, [r3, #0]
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	835a      	strh	r2, [r3, #26]
 80083cc:	e015      	b.n	80083fa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80083ce:	7bfb      	ldrb	r3, [r7, #15]
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	211a      	movs	r1, #26
 80083d4:	fb01 f303 	mul.w	r3, r1, r3
 80083d8:	4413      	add	r3, r2
 80083da:	f203 3356 	addw	r3, r3, #854	; 0x356
 80083de:	781a      	ldrb	r2, [r3, #0]
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80083e4:	7bfb      	ldrb	r3, [r7, #15]
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	211a      	movs	r1, #26
 80083ea:	fb01 f303 	mul.w	r3, r1, r3
 80083ee:	4413      	add	r3, r2
 80083f0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80083f4:	881a      	ldrh	r2, [r3, #0]
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	7b9b      	ldrb	r3, [r3, #14]
 80083fe:	4619      	mov	r1, r3
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f001 fd8a 	bl	8009f1a <USBH_AllocPipe>
 8008406:	4603      	mov	r3, r0
 8008408:	461a      	mov	r2, r3
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	7bdb      	ldrb	r3, [r3, #15]
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f001 fd80 	bl	8009f1a <USBH_AllocPipe>
 800841a:	4603      	mov	r3, r0
 800841c:	461a      	mov	r2, r3
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	7b59      	ldrb	r1, [r3, #13]
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	7b98      	ldrb	r0, [r3, #14]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008436:	68ba      	ldr	r2, [r7, #8]
 8008438:	8b12      	ldrh	r2, [r2, #24]
 800843a:	9202      	str	r2, [sp, #8]
 800843c:	2202      	movs	r2, #2
 800843e:	9201      	str	r2, [sp, #4]
 8008440:	9300      	str	r3, [sp, #0]
 8008442:	4623      	mov	r3, r4
 8008444:	4602      	mov	r2, r0
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f001 fd38 	bl	8009ebc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	7b19      	ldrb	r1, [r3, #12]
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	7bd8      	ldrb	r0, [r3, #15]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	8b52      	ldrh	r2, [r2, #26]
 8008464:	9202      	str	r2, [sp, #8]
 8008466:	2202      	movs	r2, #2
 8008468:	9201      	str	r2, [sp, #4]
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	4623      	mov	r3, r4
 800846e:	4602      	mov	r2, r0
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f001 fd23 	bl	8009ebc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	7b5b      	ldrb	r3, [r3, #13]
 8008482:	2200      	movs	r2, #0
 8008484:	4619      	mov	r1, r3
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f002 f82e 	bl	800a4e8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	7b1b      	ldrb	r3, [r3, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	4619      	mov	r1, r3
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f002 f827 	bl	800a4e8 <USBH_LL_SetToggle>

  return USBH_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3714      	adds	r7, #20
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd90      	pop	{r4, r7, pc}

080084a4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084b2:	69db      	ldr	r3, [r3, #28]
 80084b4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00e      	beq.n	80084dc <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f001 fd18 	bl	8009efa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	4619      	mov	r1, r3
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f001 fd43 	bl	8009f5c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	7b1b      	ldrb	r3, [r3, #12]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00e      	beq.n	8008502 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	7b1b      	ldrb	r3, [r3, #12]
 80084e8:	4619      	mov	r1, r3
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f001 fd05 	bl	8009efa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	7b1b      	ldrb	r3, [r3, #12]
 80084f4:	4619      	mov	r1, r3
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f001 fd30 	bl	8009f5c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	7b5b      	ldrb	r3, [r3, #13]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00e      	beq.n	8008528 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	7b5b      	ldrb	r3, [r3, #13]
 800850e:	4619      	mov	r1, r3
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f001 fcf2 	bl	8009efa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	7b5b      	ldrb	r3, [r3, #13]
 800851a:	4619      	mov	r1, r3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f001 fd1d 	bl	8009f5c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2200      	movs	r2, #0
 8008526:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800852e:	69db      	ldr	r3, [r3, #28]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00b      	beq.n	800854c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800853a:	69db      	ldr	r3, [r3, #28]
 800853c:	4618      	mov	r0, r3
 800853e:	f002 f889 	bl	800a654 <free>
    phost->pActiveClass->pData = 0U;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008548:	2200      	movs	r2, #0
 800854a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b084      	sub	sp, #16
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008564:	69db      	ldr	r3, [r3, #28]
 8008566:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	3340      	adds	r3, #64	; 0x40
 800856c:	4619      	mov	r1, r3
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f8b1 	bl	80086d6 <GetLineCoding>
 8008574:	4603      	mov	r3, r0
 8008576:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008578:	7afb      	ldrb	r3, [r7, #11]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d105      	bne.n	800858a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008584:	2102      	movs	r1, #2
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800858a:	7afb      	ldrb	r3, [r7, #11]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800859c:	2301      	movs	r3, #1
 800859e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085aa:	69db      	ldr	r3, [r3, #28]
 80085ac:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80085b4:	2b04      	cmp	r3, #4
 80085b6:	d877      	bhi.n	80086a8 <USBH_CDC_Process+0x114>
 80085b8:	a201      	add	r2, pc, #4	; (adr r2, 80085c0 <USBH_CDC_Process+0x2c>)
 80085ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085be:	bf00      	nop
 80085c0:	080085d5 	.word	0x080085d5
 80085c4:	080085db 	.word	0x080085db
 80085c8:	0800860b 	.word	0x0800860b
 80085cc:	0800867f 	.word	0x0800867f
 80085d0:	0800868d 	.word	0x0800868d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80085d4:	2300      	movs	r3, #0
 80085d6:	73fb      	strb	r3, [r7, #15]
      break;
 80085d8:	e06d      	b.n	80086b6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085de:	4619      	mov	r1, r3
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 f897 	bl	8008714 <SetLineCoding>
 80085e6:	4603      	mov	r3, r0
 80085e8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80085ea:	7bbb      	ldrb	r3, [r7, #14]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d104      	bne.n	80085fa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	2202      	movs	r2, #2
 80085f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80085f8:	e058      	b.n	80086ac <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80085fa:	7bbb      	ldrb	r3, [r7, #14]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d055      	beq.n	80086ac <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	2204      	movs	r2, #4
 8008604:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008608:	e050      	b.n	80086ac <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	3340      	adds	r3, #64	; 0x40
 800860e:	4619      	mov	r1, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f860 	bl	80086d6 <GetLineCoding>
 8008616:	4603      	mov	r3, r0
 8008618:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800861a:	7bbb      	ldrb	r3, [r7, #14]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d126      	bne.n	800866e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008632:	791b      	ldrb	r3, [r3, #4]
 8008634:	429a      	cmp	r2, r3
 8008636:	d13b      	bne.n	80086b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008642:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008644:	429a      	cmp	r2, r3
 8008646:	d133      	bne.n	80086b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008652:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008654:	429a      	cmp	r2, r3
 8008656:	d12b      	bne.n	80086b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008660:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008662:	429a      	cmp	r2, r3
 8008664:	d124      	bne.n	80086b0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f958 	bl	800891c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800866c:	e020      	b.n	80086b0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800866e:	7bbb      	ldrb	r3, [r7, #14]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d01d      	beq.n	80086b0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	2204      	movs	r2, #4
 8008678:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800867c:	e018      	b.n	80086b0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f867 	bl	8008752 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 f8da 	bl	800883e <CDC_ProcessReception>
      break;
 800868a:	e014      	b.n	80086b6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800868c:	2100      	movs	r1, #0
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 ffe3 	bl	800965a <USBH_ClrFeature>
 8008694:	4603      	mov	r3, r0
 8008696:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008698:	7bbb      	ldrb	r3, [r7, #14]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10a      	bne.n	80086b4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80086a6:	e005      	b.n	80086b4 <USBH_CDC_Process+0x120>

    default:
      break;
 80086a8:	bf00      	nop
 80086aa:	e004      	b.n	80086b6 <USBH_CDC_Process+0x122>
      break;
 80086ac:	bf00      	nop
 80086ae:	e002      	b.n	80086b6 <USBH_CDC_Process+0x122>
      break;
 80086b0:	bf00      	nop
 80086b2:	e000      	b.n	80086b6 <USBH_CDC_Process+0x122>
      break;
 80086b4:	bf00      	nop

  }

  return status;
 80086b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	370c      	adds	r7, #12
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b082      	sub	sp, #8
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
 80086de:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	22a1      	movs	r2, #161	; 0xa1
 80086e4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2221      	movs	r2, #33	; 0x21
 80086ea:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2207      	movs	r2, #7
 80086fc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	2207      	movs	r2, #7
 8008702:	4619      	mov	r1, r3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f001 f988 	bl	8009a1a <USBH_CtlReq>
 800870a:	4603      	mov	r3, r0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2221      	movs	r2, #33	; 0x21
 8008722:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2220      	movs	r2, #32
 8008728:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2207      	movs	r2, #7
 800873a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	2207      	movs	r2, #7
 8008740:	4619      	mov	r1, r3
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f001 f969 	bl	8009a1a <USBH_CtlReq>
 8008748:	4603      	mov	r3, r0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b086      	sub	sp, #24
 8008756:	af02      	add	r7, sp, #8
 8008758:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008764:	2300      	movs	r3, #0
 8008766:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800876e:	2b01      	cmp	r3, #1
 8008770:	d002      	beq.n	8008778 <CDC_ProcessTransmission+0x26>
 8008772:	2b02      	cmp	r3, #2
 8008774:	d023      	beq.n	80087be <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008776:	e05e      	b.n	8008836 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	8b12      	ldrh	r2, [r2, #24]
 8008780:	4293      	cmp	r3, r2
 8008782:	d90b      	bls.n	800879c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	69d9      	ldr	r1, [r3, #28]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	8b1a      	ldrh	r2, [r3, #24]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	7b5b      	ldrb	r3, [r3, #13]
 8008790:	2001      	movs	r0, #1
 8008792:	9000      	str	r0, [sp, #0]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f001 fb4e 	bl	8009e36 <USBH_BulkSendData>
 800879a:	e00b      	b.n	80087b4 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	7b5b      	ldrb	r3, [r3, #13]
 80087aa:	2001      	movs	r0, #1
 80087ac:	9000      	str	r0, [sp, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f001 fb41 	bl	8009e36 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2202      	movs	r2, #2
 80087b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80087bc:	e03b      	b.n	8008836 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	7b5b      	ldrb	r3, [r3, #13]
 80087c2:	4619      	mov	r1, r3
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f001 fe65 	bl	800a494 <USBH_LL_GetURBState>
 80087ca:	4603      	mov	r3, r0
 80087cc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80087ce:	7afb      	ldrb	r3, [r7, #11]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d128      	bne.n	8008826 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	8b12      	ldrh	r2, [r2, #24]
 80087dc:	4293      	cmp	r3, r2
 80087de:	d90e      	bls.n	80087fe <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	8b12      	ldrh	r2, [r2, #24]
 80087e8:	1a9a      	subs	r2, r3, r2
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	69db      	ldr	r3, [r3, #28]
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	8b12      	ldrh	r2, [r2, #24]
 80087f6:	441a      	add	r2, r3
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	61da      	str	r2, [r3, #28]
 80087fc:	e002      	b.n	8008804 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2200      	movs	r2, #0
 8008802:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008808:	2b00      	cmp	r3, #0
 800880a:	d004      	beq.n	8008816 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008814:	e00e      	b.n	8008834 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 f868 	bl	80088f4 <USBH_CDC_TransmitCallback>
      break;
 8008824:	e006      	b.n	8008834 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008826:	7afb      	ldrb	r3, [r7, #11]
 8008828:	2b02      	cmp	r3, #2
 800882a:	d103      	bne.n	8008834 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008834:	bf00      	nop
  }
}
 8008836:	bf00      	nop
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b086      	sub	sp, #24
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800884c:	69db      	ldr	r3, [r3, #28]
 800884e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008850:	2300      	movs	r3, #0
 8008852:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800885a:	2b03      	cmp	r3, #3
 800885c:	d002      	beq.n	8008864 <CDC_ProcessReception+0x26>
 800885e:	2b04      	cmp	r3, #4
 8008860:	d00e      	beq.n	8008880 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008862:	e043      	b.n	80088ec <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	6a19      	ldr	r1, [r3, #32]
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	8b5a      	ldrh	r2, [r3, #26]
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	7b1b      	ldrb	r3, [r3, #12]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f001 fb05 	bl	8009e80 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	2204      	movs	r2, #4
 800887a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800887e:	e035      	b.n	80088ec <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	7b1b      	ldrb	r3, [r3, #12]
 8008884:	4619      	mov	r1, r3
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f001 fe04 	bl	800a494 <USBH_LL_GetURBState>
 800888c:	4603      	mov	r3, r0
 800888e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008890:	7cfb      	ldrb	r3, [r7, #19]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d129      	bne.n	80088ea <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	7b1b      	ldrb	r3, [r3, #12]
 800889a:	4619      	mov	r1, r3
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f001 fd67 	bl	800a370 <USBH_LL_GetLastXferSize>
 80088a2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d016      	beq.n	80088dc <CDC_ProcessReception+0x9e>
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	8b5b      	ldrh	r3, [r3, #26]
 80088b2:	461a      	mov	r2, r3
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d910      	bls.n	80088dc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	1ad2      	subs	r2, r2, r3
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	6a1a      	ldr	r2, [r3, #32]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	441a      	add	r2, r3
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	2203      	movs	r2, #3
 80088d6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80088da:	e006      	b.n	80088ea <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	2200      	movs	r2, #0
 80088e0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 f80f 	bl	8008908 <USBH_CDC_ReceiveCallback>
      break;
 80088ea:	bf00      	nop
  }
}
 80088ec:	bf00      	nop
 80088ee:	3718      	adds	r7, #24
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80088fc:	bf00      	nop
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008924:	bf00      	nop
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	4613      	mov	r3, r2
 800893c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d101      	bne.n	8008948 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008944:	2302      	movs	r3, #2
 8008946:	e029      	b.n	800899c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	79fa      	ldrb	r2, [r7, #7]
 800894c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	f000 f81f 	bl	80089a4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d003      	beq.n	8008994 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f001 fc37 	bl	800a208 <USBH_LL_Init>

  return USBH_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80089ac:	2300      	movs	r3, #0
 80089ae:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80089b0:	2300      	movs	r3, #0
 80089b2:	60fb      	str	r3, [r7, #12]
 80089b4:	e009      	b.n	80089ca <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	33e0      	adds	r3, #224	; 0xe0
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	4413      	add	r3, r2
 80089c0:	2200      	movs	r2, #0
 80089c2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	3301      	adds	r3, #1
 80089c8:	60fb      	str	r3, [r7, #12]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2b0e      	cmp	r3, #14
 80089ce:	d9f2      	bls.n	80089b6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80089d0:	2300      	movs	r3, #0
 80089d2:	60fb      	str	r3, [r7, #12]
 80089d4:	e009      	b.n	80089ea <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80089e0:	2200      	movs	r2, #0
 80089e2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	3301      	adds	r3, #1
 80089e8:	60fb      	str	r3, [r7, #12]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089f0:	d3f1      	bcc.n	80089d6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2240      	movs	r2, #64	; 0x40
 8008a16:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3714      	adds	r7, #20
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d016      	beq.n	8008a8e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d10e      	bne.n	8008a88 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008a70:	1c59      	adds	r1, r3, #1
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	33de      	adds	r3, #222	; 0xde
 8008a7c:	6839      	ldr	r1, [r7, #0]
 8008a7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	73fb      	strb	r3, [r7, #15]
 8008a86:	e004      	b.n	8008a92 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008a88:	2302      	movs	r3, #2
 8008a8a:	73fb      	strb	r3, [r7, #15]
 8008a8c:	e001      	b.n	8008a92 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008a8e:	2302      	movs	r3, #2
 8008a90:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008aac:	2300      	movs	r3, #0
 8008aae:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008ab6:	78fa      	ldrb	r2, [r7, #3]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d204      	bcs.n	8008ac6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	78fa      	ldrb	r2, [r7, #3]
 8008ac0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008ac4:	e001      	b.n	8008aca <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008ac6:	2302      	movs	r3, #2
 8008ac8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3714      	adds	r7, #20
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b087      	sub	sp, #28
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	4608      	mov	r0, r1
 8008ae2:	4611      	mov	r1, r2
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	70fb      	strb	r3, [r7, #3]
 8008aea:	460b      	mov	r3, r1
 8008aec:	70bb      	strb	r3, [r7, #2]
 8008aee:	4613      	mov	r3, r2
 8008af0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008af2:	2300      	movs	r3, #0
 8008af4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008af6:	2300      	movs	r3, #0
 8008af8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008b00:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008b02:	e025      	b.n	8008b50 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008b04:	7dfb      	ldrb	r3, [r7, #23]
 8008b06:	221a      	movs	r2, #26
 8008b08:	fb02 f303 	mul.w	r3, r2, r3
 8008b0c:	3308      	adds	r3, #8
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	4413      	add	r3, r2
 8008b12:	3302      	adds	r3, #2
 8008b14:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	795b      	ldrb	r3, [r3, #5]
 8008b1a:	78fa      	ldrb	r2, [r7, #3]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d002      	beq.n	8008b26 <USBH_FindInterface+0x4e>
 8008b20:	78fb      	ldrb	r3, [r7, #3]
 8008b22:	2bff      	cmp	r3, #255	; 0xff
 8008b24:	d111      	bne.n	8008b4a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008b2a:	78ba      	ldrb	r2, [r7, #2]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d002      	beq.n	8008b36 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b30:	78bb      	ldrb	r3, [r7, #2]
 8008b32:	2bff      	cmp	r3, #255	; 0xff
 8008b34:	d109      	bne.n	8008b4a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b3a:	787a      	ldrb	r2, [r7, #1]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d002      	beq.n	8008b46 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008b40:	787b      	ldrb	r3, [r7, #1]
 8008b42:	2bff      	cmp	r3, #255	; 0xff
 8008b44:	d101      	bne.n	8008b4a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008b46:	7dfb      	ldrb	r3, [r7, #23]
 8008b48:	e006      	b.n	8008b58 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008b4a:	7dfb      	ldrb	r3, [r7, #23]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008b50:	7dfb      	ldrb	r3, [r7, #23]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d9d6      	bls.n	8008b04 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008b56:	23ff      	movs	r3, #255	; 0xff
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	371c      	adds	r7, #28
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f001 fb87 	bl	800a280 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008b72:	2101      	movs	r1, #1
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f001 fca0 	bl	800a4ba <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b088      	sub	sp, #32
 8008b88:	af04      	add	r7, sp, #16
 8008b8a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d102      	bne.n	8008ba6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2203      	movs	r2, #3
 8008ba4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	2b0b      	cmp	r3, #11
 8008bae:	f200 81b3 	bhi.w	8008f18 <USBH_Process+0x394>
 8008bb2:	a201      	add	r2, pc, #4	; (adr r2, 8008bb8 <USBH_Process+0x34>)
 8008bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb8:	08008be9 	.word	0x08008be9
 8008bbc:	08008c1b 	.word	0x08008c1b
 8008bc0:	08008c83 	.word	0x08008c83
 8008bc4:	08008eb3 	.word	0x08008eb3
 8008bc8:	08008f19 	.word	0x08008f19
 8008bcc:	08008d27 	.word	0x08008d27
 8008bd0:	08008e59 	.word	0x08008e59
 8008bd4:	08008d5d 	.word	0x08008d5d
 8008bd8:	08008d7d 	.word	0x08008d7d
 8008bdc:	08008d9d 	.word	0x08008d9d
 8008be0:	08008dcb 	.word	0x08008dcb
 8008be4:	08008e9b 	.word	0x08008e9b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f000 8193 	beq.w	8008f1c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008bfc:	20c8      	movs	r0, #200	; 0xc8
 8008bfe:	f001 fca3 	bl	800a548 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f001 fb99 	bl	800a33a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008c18:	e180      	b.n	8008f1c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d107      	bne.n	8008c34 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2202      	movs	r2, #2
 8008c30:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008c32:	e182      	b.n	8008f3a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008c3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c3e:	d914      	bls.n	8008c6a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008c46:	3301      	adds	r3, #1
 8008c48:	b2da      	uxtb	r2, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008c56:	2b03      	cmp	r3, #3
 8008c58:	d903      	bls.n	8008c62 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	220d      	movs	r2, #13
 8008c5e:	701a      	strb	r2, [r3, #0]
      break;
 8008c60:	e16b      	b.n	8008f3a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	701a      	strb	r2, [r3, #0]
      break;
 8008c68:	e167      	b.n	8008f3a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008c70:	f103 020a 	add.w	r2, r3, #10
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008c7a:	200a      	movs	r0, #10
 8008c7c:	f001 fc64 	bl	800a548 <USBH_Delay>
      break;
 8008c80:	e15b      	b.n	8008f3a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d005      	beq.n	8008c98 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c92:	2104      	movs	r1, #4
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008c98:	2064      	movs	r0, #100	; 0x64
 8008c9a:	f001 fc55 	bl	800a548 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f001 fb24 	bl	800a2ec <USBH_LL_GetSpeed>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2205      	movs	r2, #5
 8008cb2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f001 f92f 	bl	8009f1a <USBH_AllocPipe>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008cc4:	2180      	movs	r1, #128	; 0x80
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f001 f927 	bl	8009f1a <USBH_AllocPipe>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	461a      	mov	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	7919      	ldrb	r1, [r3, #4]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008ce8:	b292      	uxth	r2, r2
 8008cea:	9202      	str	r2, [sp, #8]
 8008cec:	2200      	movs	r2, #0
 8008cee:	9201      	str	r2, [sp, #4]
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2280      	movs	r2, #128	; 0x80
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f001 f8e0 	bl	8009ebc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	7959      	ldrb	r1, [r3, #5]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008d10:	b292      	uxth	r2, r2
 8008d12:	9202      	str	r2, [sp, #8]
 8008d14:	2200      	movs	r2, #0
 8008d16:	9201      	str	r2, [sp, #4]
 8008d18:	9300      	str	r3, [sp, #0]
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f001 f8cc 	bl	8009ebc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008d24:	e109      	b.n	8008f3a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f90c 	bl	8008f44 <USBH_HandleEnum>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008d30:	7bbb      	ldrb	r3, [r7, #14]
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f040 80f3 	bne.w	8008f20 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d103      	bne.n	8008d54 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2208      	movs	r2, #8
 8008d50:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008d52:	e0e5      	b.n	8008f20 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2207      	movs	r2, #7
 8008d58:	701a      	strb	r2, [r3, #0]
      break;
 8008d5a:	e0e1      	b.n	8008f20 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f000 80de 	beq.w	8008f24 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d6e:	2101      	movs	r1, #1
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2208      	movs	r2, #8
 8008d78:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008d7a:	e0d3      	b.n	8008f24 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	4619      	mov	r1, r3
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fc20 	bl	80095cc <USBH_SetCfg>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f040 80ca 	bne.w	8008f28 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2209      	movs	r2, #9
 8008d98:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008d9a:	e0c5      	b.n	8008f28 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008da2:	f003 0320 	and.w	r3, r3, #32
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00b      	beq.n	8008dc2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008daa:	2101      	movs	r1, #1
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fc30 	bl	8009612 <USBH_SetFeature>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f040 80b9 	bne.w	8008f2c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	220a      	movs	r2, #10
 8008dbe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008dc0:	e0b4      	b.n	8008f2c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	220a      	movs	r2, #10
 8008dc6:	701a      	strb	r2, [r3, #0]
      break;
 8008dc8:	e0b0      	b.n	8008f2c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f000 80ad 	beq.w	8008f30 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008dde:	2300      	movs	r3, #0
 8008de0:	73fb      	strb	r3, [r7, #15]
 8008de2:	e016      	b.n	8008e12 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008de4:	7bfa      	ldrb	r2, [r7, #15]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	32de      	adds	r2, #222	; 0xde
 8008dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dee:	791a      	ldrb	r2, [r3, #4]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d108      	bne.n	8008e0c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008dfa:	7bfa      	ldrb	r2, [r7, #15]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	32de      	adds	r2, #222	; 0xde
 8008e00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008e0a:	e005      	b.n	8008e18 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	73fb      	strb	r3, [r7, #15]
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d0e5      	beq.n	8008de4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d016      	beq.n	8008e50 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	4798      	blx	r3
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d109      	bne.n	8008e48 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2206      	movs	r2, #6
 8008e38:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e40:	2103      	movs	r1, #3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008e46:	e073      	b.n	8008f30 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	220d      	movs	r2, #13
 8008e4c:	701a      	strb	r2, [r3, #0]
      break;
 8008e4e:	e06f      	b.n	8008f30 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	220d      	movs	r2, #13
 8008e54:	701a      	strb	r2, [r3, #0]
      break;
 8008e56:	e06b      	b.n	8008f30 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d017      	beq.n	8008e92 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	4798      	blx	r3
 8008e6e:	4603      	mov	r3, r0
 8008e70:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008e72:	7bbb      	ldrb	r3, [r7, #14]
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d103      	bne.n	8008e82 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	220b      	movs	r2, #11
 8008e7e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008e80:	e058      	b.n	8008f34 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8008e82:	7bbb      	ldrb	r3, [r7, #14]
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d154      	bne.n	8008f34 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	220d      	movs	r2, #13
 8008e8e:	701a      	strb	r2, [r3, #0]
      break;
 8008e90:	e050      	b.n	8008f34 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	220d      	movs	r2, #13
 8008e96:	701a      	strb	r2, [r3, #0]
      break;
 8008e98:	e04c      	b.n	8008f34 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d049      	beq.n	8008f38 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008eaa:	695b      	ldr	r3, [r3, #20]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	4798      	blx	r3
      }
      break;
 8008eb0:	e042      	b.n	8008f38 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f7ff fd72 	bl	80089a4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d009      	beq.n	8008ede <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d005      	beq.n	8008ef4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008eee:	2105      	movs	r1, #5
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d107      	bne.n	8008f10 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f7ff fe2b 	bl	8008b64 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008f0e:	e014      	b.n	8008f3a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f001 f9b5 	bl	800a280 <USBH_LL_Start>
      break;
 8008f16:	e010      	b.n	8008f3a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008f18:	bf00      	nop
 8008f1a:	e00e      	b.n	8008f3a <USBH_Process+0x3b6>
      break;
 8008f1c:	bf00      	nop
 8008f1e:	e00c      	b.n	8008f3a <USBH_Process+0x3b6>
      break;
 8008f20:	bf00      	nop
 8008f22:	e00a      	b.n	8008f3a <USBH_Process+0x3b6>
    break;
 8008f24:	bf00      	nop
 8008f26:	e008      	b.n	8008f3a <USBH_Process+0x3b6>
      break;
 8008f28:	bf00      	nop
 8008f2a:	e006      	b.n	8008f3a <USBH_Process+0x3b6>
      break;
 8008f2c:	bf00      	nop
 8008f2e:	e004      	b.n	8008f3a <USBH_Process+0x3b6>
      break;
 8008f30:	bf00      	nop
 8008f32:	e002      	b.n	8008f3a <USBH_Process+0x3b6>
      break;
 8008f34:	bf00      	nop
 8008f36:	e000      	b.n	8008f3a <USBH_Process+0x3b6>
      break;
 8008f38:	bf00      	nop
  }
  return USBH_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3710      	adds	r7, #16
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b088      	sub	sp, #32
 8008f48:	af04      	add	r7, sp, #16
 8008f4a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008f50:	2301      	movs	r3, #1
 8008f52:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	785b      	ldrb	r3, [r3, #1]
 8008f58:	2b07      	cmp	r3, #7
 8008f5a:	f200 81c1 	bhi.w	80092e0 <USBH_HandleEnum+0x39c>
 8008f5e:	a201      	add	r2, pc, #4	; (adr r2, 8008f64 <USBH_HandleEnum+0x20>)
 8008f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f64:	08008f85 	.word	0x08008f85
 8008f68:	08009043 	.word	0x08009043
 8008f6c:	080090ad 	.word	0x080090ad
 8008f70:	0800913b 	.word	0x0800913b
 8008f74:	080091a5 	.word	0x080091a5
 8008f78:	08009215 	.word	0x08009215
 8008f7c:	0800925b 	.word	0x0800925b
 8008f80:	080092a1 	.word	0x080092a1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008f84:	2108      	movs	r1, #8
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 fa50 	bl	800942c <USBH_Get_DevDesc>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f90:	7bbb      	ldrb	r3, [r7, #14]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d130      	bne.n	8008ff8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	7919      	ldrb	r1, [r3, #4]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008fba:	b292      	uxth	r2, r2
 8008fbc:	9202      	str	r2, [sp, #8]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	9201      	str	r2, [sp, #4]
 8008fc2:	9300      	str	r3, [sp, #0]
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2280      	movs	r2, #128	; 0x80
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 ff77 	bl	8009ebc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	7959      	ldrb	r1, [r3, #5]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008fe2:	b292      	uxth	r2, r2
 8008fe4:	9202      	str	r2, [sp, #8]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	9201      	str	r2, [sp, #4]
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	4603      	mov	r3, r0
 8008fee:	2200      	movs	r2, #0
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 ff63 	bl	8009ebc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008ff6:	e175      	b.n	80092e4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ff8:	7bbb      	ldrb	r3, [r7, #14]
 8008ffa:	2b03      	cmp	r3, #3
 8008ffc:	f040 8172 	bne.w	80092e4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009006:	3301      	adds	r3, #1
 8009008:	b2da      	uxtb	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009016:	2b03      	cmp	r3, #3
 8009018:	d903      	bls.n	8009022 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	220d      	movs	r2, #13
 800901e:	701a      	strb	r2, [r3, #0]
      break;
 8009020:	e160      	b.n	80092e4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	795b      	ldrb	r3, [r3, #5]
 8009026:	4619      	mov	r1, r3
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 ff97 	bl	8009f5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	791b      	ldrb	r3, [r3, #4]
 8009032:	4619      	mov	r1, r3
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 ff91 	bl	8009f5c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	701a      	strb	r2, [r3, #0]
      break;
 8009040:	e150      	b.n	80092e4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009042:	2112      	movs	r1, #18
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 f9f1 	bl	800942c <USBH_Get_DevDesc>
 800904a:	4603      	mov	r3, r0
 800904c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800904e:	7bbb      	ldrb	r3, [r7, #14]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d103      	bne.n	800905c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2202      	movs	r2, #2
 8009058:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800905a:	e145      	b.n	80092e8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800905c:	7bbb      	ldrb	r3, [r7, #14]
 800905e:	2b03      	cmp	r3, #3
 8009060:	f040 8142 	bne.w	80092e8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800906a:	3301      	adds	r3, #1
 800906c:	b2da      	uxtb	r2, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800907a:	2b03      	cmp	r3, #3
 800907c:	d903      	bls.n	8009086 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	220d      	movs	r2, #13
 8009082:	701a      	strb	r2, [r3, #0]
      break;
 8009084:	e130      	b.n	80092e8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	795b      	ldrb	r3, [r3, #5]
 800908a:	4619      	mov	r1, r3
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 ff65 	bl	8009f5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	791b      	ldrb	r3, [r3, #4]
 8009096:	4619      	mov	r1, r3
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 ff5f 	bl	8009f5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	701a      	strb	r2, [r3, #0]
      break;
 80090aa:	e11d      	b.n	80092e8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80090ac:	2101      	movs	r1, #1
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fa68 	bl	8009584 <USBH_SetAddress>
 80090b4:	4603      	mov	r3, r0
 80090b6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80090b8:	7bbb      	ldrb	r3, [r7, #14]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d132      	bne.n	8009124 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80090be:	2002      	movs	r0, #2
 80090c0:	f001 fa42 	bl	800a548 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2203      	movs	r2, #3
 80090d0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	7919      	ldrb	r1, [r3, #4]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80090e6:	b292      	uxth	r2, r2
 80090e8:	9202      	str	r2, [sp, #8]
 80090ea:	2200      	movs	r2, #0
 80090ec:	9201      	str	r2, [sp, #4]
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	4603      	mov	r3, r0
 80090f2:	2280      	movs	r2, #128	; 0x80
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fee1 	bl	8009ebc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	7959      	ldrb	r1, [r3, #5]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800910e:	b292      	uxth	r2, r2
 8009110:	9202      	str	r2, [sp, #8]
 8009112:	2200      	movs	r2, #0
 8009114:	9201      	str	r2, [sp, #4]
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	4603      	mov	r3, r0
 800911a:	2200      	movs	r2, #0
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 fecd 	bl	8009ebc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009122:	e0e3      	b.n	80092ec <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009124:	7bbb      	ldrb	r3, [r7, #14]
 8009126:	2b03      	cmp	r3, #3
 8009128:	f040 80e0 	bne.w	80092ec <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	220d      	movs	r2, #13
 8009130:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	705a      	strb	r2, [r3, #1]
      break;
 8009138:	e0d8      	b.n	80092ec <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800913a:	2109      	movs	r1, #9
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 f99d 	bl	800947c <USBH_Get_CfgDesc>
 8009142:	4603      	mov	r3, r0
 8009144:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009146:	7bbb      	ldrb	r3, [r7, #14]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d103      	bne.n	8009154 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2204      	movs	r2, #4
 8009150:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009152:	e0cd      	b.n	80092f0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009154:	7bbb      	ldrb	r3, [r7, #14]
 8009156:	2b03      	cmp	r3, #3
 8009158:	f040 80ca 	bne.w	80092f0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009162:	3301      	adds	r3, #1
 8009164:	b2da      	uxtb	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009172:	2b03      	cmp	r3, #3
 8009174:	d903      	bls.n	800917e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	220d      	movs	r2, #13
 800917a:	701a      	strb	r2, [r3, #0]
      break;
 800917c:	e0b8      	b.n	80092f0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	795b      	ldrb	r3, [r3, #5]
 8009182:	4619      	mov	r1, r3
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 fee9 	bl	8009f5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	791b      	ldrb	r3, [r3, #4]
 800918e:	4619      	mov	r1, r3
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fee3 	bl	8009f5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	701a      	strb	r2, [r3, #0]
      break;
 80091a2:	e0a5      	b.n	80092f0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80091aa:	4619      	mov	r1, r3
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 f965 	bl	800947c <USBH_Get_CfgDesc>
 80091b2:	4603      	mov	r3, r0
 80091b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80091b6:	7bbb      	ldrb	r3, [r7, #14]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d103      	bne.n	80091c4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2205      	movs	r2, #5
 80091c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80091c2:	e097      	b.n	80092f4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091c4:	7bbb      	ldrb	r3, [r7, #14]
 80091c6:	2b03      	cmp	r3, #3
 80091c8:	f040 8094 	bne.w	80092f4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80091d2:	3301      	adds	r3, #1
 80091d4:	b2da      	uxtb	r2, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80091e2:	2b03      	cmp	r3, #3
 80091e4:	d903      	bls.n	80091ee <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	220d      	movs	r2, #13
 80091ea:	701a      	strb	r2, [r3, #0]
      break;
 80091ec:	e082      	b.n	80092f4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	795b      	ldrb	r3, [r3, #5]
 80091f2:	4619      	mov	r1, r3
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 feb1 	bl	8009f5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	791b      	ldrb	r3, [r3, #4]
 80091fe:	4619      	mov	r1, r3
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 feab 	bl	8009f5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	701a      	strb	r2, [r3, #0]
      break;
 8009212:	e06f      	b.n	80092f4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800921a:	2b00      	cmp	r3, #0
 800921c:	d019      	beq.n	8009252 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800922a:	23ff      	movs	r3, #255	; 0xff
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f949 	bl	80094c4 <USBH_Get_StringDesc>
 8009232:	4603      	mov	r3, r0
 8009234:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009236:	7bbb      	ldrb	r3, [r7, #14]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d103      	bne.n	8009244 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2206      	movs	r2, #6
 8009240:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009242:	e059      	b.n	80092f8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009244:	7bbb      	ldrb	r3, [r7, #14]
 8009246:	2b03      	cmp	r3, #3
 8009248:	d156      	bne.n	80092f8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2206      	movs	r2, #6
 800924e:	705a      	strb	r2, [r3, #1]
      break;
 8009250:	e052      	b.n	80092f8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2206      	movs	r2, #6
 8009256:	705a      	strb	r2, [r3, #1]
      break;
 8009258:	e04e      	b.n	80092f8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009260:	2b00      	cmp	r3, #0
 8009262:	d019      	beq.n	8009298 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009270:	23ff      	movs	r3, #255	; 0xff
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 f926 	bl	80094c4 <USBH_Get_StringDesc>
 8009278:	4603      	mov	r3, r0
 800927a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800927c:	7bbb      	ldrb	r3, [r7, #14]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d103      	bne.n	800928a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2207      	movs	r2, #7
 8009286:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009288:	e038      	b.n	80092fc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800928a:	7bbb      	ldrb	r3, [r7, #14]
 800928c:	2b03      	cmp	r3, #3
 800928e:	d135      	bne.n	80092fc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2207      	movs	r2, #7
 8009294:	705a      	strb	r2, [r3, #1]
      break;
 8009296:	e031      	b.n	80092fc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2207      	movs	r2, #7
 800929c:	705a      	strb	r2, [r3, #1]
      break;
 800929e:	e02d      	b.n	80092fc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d017      	beq.n	80092da <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80092b6:	23ff      	movs	r3, #255	; 0xff
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 f903 	bl	80094c4 <USBH_Get_StringDesc>
 80092be:	4603      	mov	r3, r0
 80092c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80092c2:	7bbb      	ldrb	r3, [r7, #14]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d102      	bne.n	80092ce <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80092cc:	e018      	b.n	8009300 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092ce:	7bbb      	ldrb	r3, [r7, #14]
 80092d0:	2b03      	cmp	r3, #3
 80092d2:	d115      	bne.n	8009300 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80092d4:	2300      	movs	r3, #0
 80092d6:	73fb      	strb	r3, [r7, #15]
      break;
 80092d8:	e012      	b.n	8009300 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80092da:	2300      	movs	r3, #0
 80092dc:	73fb      	strb	r3, [r7, #15]
      break;
 80092de:	e00f      	b.n	8009300 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80092e0:	bf00      	nop
 80092e2:	e00e      	b.n	8009302 <USBH_HandleEnum+0x3be>
      break;
 80092e4:	bf00      	nop
 80092e6:	e00c      	b.n	8009302 <USBH_HandleEnum+0x3be>
      break;
 80092e8:	bf00      	nop
 80092ea:	e00a      	b.n	8009302 <USBH_HandleEnum+0x3be>
      break;
 80092ec:	bf00      	nop
 80092ee:	e008      	b.n	8009302 <USBH_HandleEnum+0x3be>
      break;
 80092f0:	bf00      	nop
 80092f2:	e006      	b.n	8009302 <USBH_HandleEnum+0x3be>
      break;
 80092f4:	bf00      	nop
 80092f6:	e004      	b.n	8009302 <USBH_HandleEnum+0x3be>
      break;
 80092f8:	bf00      	nop
 80092fa:	e002      	b.n	8009302 <USBH_HandleEnum+0x3be>
      break;
 80092fc:	bf00      	nop
 80092fe:	e000      	b.n	8009302 <USBH_HandleEnum+0x3be>
      break;
 8009300:	bf00      	nop
  }
  return Status;
 8009302:	7bfb      	ldrb	r3, [r7, #15]
}
 8009304:	4618      	mov	r0, r3
 8009306:	3710      	adds	r7, #16
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	683a      	ldr	r2, [r7, #0]
 800931a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800931e:	bf00      	nop
 8009320:	370c      	adds	r7, #12
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr

0800932a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b082      	sub	sp, #8
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009338:	1c5a      	adds	r2, r3, #1
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 f804 	bl	800934e <USBH_HandleSof>
}
 8009346:	bf00      	nop
 8009348:	3708      	adds	r7, #8
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b082      	sub	sp, #8
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	b2db      	uxtb	r3, r3
 800935c:	2b0b      	cmp	r3, #11
 800935e:	d10a      	bne.n	8009376 <USBH_HandleSof+0x28>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009366:	2b00      	cmp	r3, #0
 8009368:	d005      	beq.n	8009376 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009370:	699b      	ldr	r3, [r3, #24]
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	4798      	blx	r3
  }
}
 8009376:	bf00      	nop
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800937e:	b480      	push	{r7}
 8009380:	b083      	sub	sp, #12
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2201      	movs	r2, #1
 800938a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800938e:	bf00      	nop
}
 8009390:	370c      	adds	r7, #12
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr

0800939a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800939a:	b480      	push	{r7}
 800939c:	b083      	sub	sp, #12
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80093aa:	bf00      	nop
}
 80093ac:	370c      	adds	r7, #12
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr

080093b6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80093b6:	b480      	push	{r7}
 80093b8:	b083      	sub	sp, #12
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2201      	movs	r2, #1
 80093c2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2201      	movs	r2, #1
 80093f0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 ff56 	bl	800a2b6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	791b      	ldrb	r3, [r3, #4]
 800940e:	4619      	mov	r1, r3
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 fda3 	bl	8009f5c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	795b      	ldrb	r3, [r3, #5]
 800941a:	4619      	mov	r1, r3
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fd9d 	bl	8009f5c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3708      	adds	r7, #8
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b086      	sub	sp, #24
 8009430:	af02      	add	r7, sp, #8
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	460b      	mov	r3, r1
 8009436:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800943e:	78fb      	ldrb	r3, [r7, #3]
 8009440:	b29b      	uxth	r3, r3
 8009442:	9300      	str	r3, [sp, #0]
 8009444:	4613      	mov	r3, r2
 8009446:	f44f 7280 	mov.w	r2, #256	; 0x100
 800944a:	2100      	movs	r1, #0
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 f864 	bl	800951a <USBH_GetDescriptor>
 8009452:	4603      	mov	r3, r0
 8009454:	73fb      	strb	r3, [r7, #15]
 8009456:	7bfb      	ldrb	r3, [r7, #15]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d10a      	bne.n	8009472 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009468:	78fa      	ldrb	r2, [r7, #3]
 800946a:	b292      	uxth	r2, r2
 800946c:	4619      	mov	r1, r3
 800946e:	f000 f918 	bl	80096a2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009472:	7bfb      	ldrb	r3, [r7, #15]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800947c:	b580      	push	{r7, lr}
 800947e:	b086      	sub	sp, #24
 8009480:	af02      	add	r7, sp, #8
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	460b      	mov	r3, r1
 8009486:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	331c      	adds	r3, #28
 800948c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800948e:	887b      	ldrh	r3, [r7, #2]
 8009490:	9300      	str	r3, [sp, #0]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009498:	2100      	movs	r1, #0
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f83d 	bl	800951a <USBH_GetDescriptor>
 80094a0:	4603      	mov	r3, r0
 80094a2:	72fb      	strb	r3, [r7, #11]
 80094a4:	7afb      	ldrb	r3, [r7, #11]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d107      	bne.n	80094ba <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80094b0:	887a      	ldrh	r2, [r7, #2]
 80094b2:	68f9      	ldr	r1, [r7, #12]
 80094b4:	4618      	mov	r0, r3
 80094b6:	f000 f964 	bl	8009782 <USBH_ParseCfgDesc>
  }

  return status;
 80094ba:	7afb      	ldrb	r3, [r7, #11]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3710      	adds	r7, #16
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b088      	sub	sp, #32
 80094c8:	af02      	add	r7, sp, #8
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	607a      	str	r2, [r7, #4]
 80094ce:	461a      	mov	r2, r3
 80094d0:	460b      	mov	r3, r1
 80094d2:	72fb      	strb	r3, [r7, #11]
 80094d4:	4613      	mov	r3, r2
 80094d6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80094d8:	7afb      	ldrb	r3, [r7, #11]
 80094da:	b29b      	uxth	r3, r3
 80094dc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80094e0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80094e8:	893b      	ldrh	r3, [r7, #8]
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	460b      	mov	r3, r1
 80094ee:	2100      	movs	r1, #0
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f000 f812 	bl	800951a <USBH_GetDescriptor>
 80094f6:	4603      	mov	r3, r0
 80094f8:	75fb      	strb	r3, [r7, #23]
 80094fa:	7dfb      	ldrb	r3, [r7, #23]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d107      	bne.n	8009510 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009506:	893a      	ldrh	r2, [r7, #8]
 8009508:	6879      	ldr	r1, [r7, #4]
 800950a:	4618      	mov	r0, r3
 800950c:	f000 fa37 	bl	800997e <USBH_ParseStringDesc>
  }

  return status;
 8009510:	7dfb      	ldrb	r3, [r7, #23]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3718      	adds	r7, #24
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b084      	sub	sp, #16
 800951e:	af00      	add	r7, sp, #0
 8009520:	60f8      	str	r0, [r7, #12]
 8009522:	607b      	str	r3, [r7, #4]
 8009524:	460b      	mov	r3, r1
 8009526:	72fb      	strb	r3, [r7, #11]
 8009528:	4613      	mov	r3, r2
 800952a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	789b      	ldrb	r3, [r3, #2]
 8009530:	2b01      	cmp	r3, #1
 8009532:	d11c      	bne.n	800956e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009534:	7afb      	ldrb	r3, [r7, #11]
 8009536:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800953a:	b2da      	uxtb	r2, r3
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2206      	movs	r2, #6
 8009544:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	893a      	ldrh	r2, [r7, #8]
 800954a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800954c:	893b      	ldrh	r3, [r7, #8]
 800954e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009552:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009556:	d104      	bne.n	8009562 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f240 4209 	movw	r2, #1033	; 0x409
 800955e:	829a      	strh	r2, [r3, #20]
 8009560:	e002      	b.n	8009568 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	8b3a      	ldrh	r2, [r7, #24]
 800956c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800956e:	8b3b      	ldrh	r3, [r7, #24]
 8009570:	461a      	mov	r2, r3
 8009572:	6879      	ldr	r1, [r7, #4]
 8009574:	68f8      	ldr	r0, [r7, #12]
 8009576:	f000 fa50 	bl	8009a1a <USBH_CtlReq>
 800957a:	4603      	mov	r3, r0
}
 800957c:	4618      	mov	r0, r3
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	460b      	mov	r3, r1
 800958e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	789b      	ldrb	r3, [r3, #2]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d10f      	bne.n	80095b8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2205      	movs	r2, #5
 80095a2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80095a4:	78fb      	ldrb	r3, [r7, #3]
 80095a6:	b29a      	uxth	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80095b8:	2200      	movs	r2, #0
 80095ba:	2100      	movs	r1, #0
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 fa2c 	bl	8009a1a <USBH_CtlReq>
 80095c2:	4603      	mov	r3, r0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3708      	adds	r7, #8
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	460b      	mov	r3, r1
 80095d6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	789b      	ldrb	r3, [r3, #2]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d10e      	bne.n	80095fe <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2209      	movs	r2, #9
 80095ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	887a      	ldrh	r2, [r7, #2]
 80095f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2200      	movs	r2, #0
 80095f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80095fe:	2200      	movs	r2, #0
 8009600:	2100      	movs	r1, #0
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fa09 	bl	8009a1a <USBH_CtlReq>
 8009608:	4603      	mov	r3, r0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3708      	adds	r7, #8
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b082      	sub	sp, #8
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
 800961a:	460b      	mov	r3, r1
 800961c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	789b      	ldrb	r3, [r3, #2]
 8009622:	2b01      	cmp	r3, #1
 8009624:	d10f      	bne.n	8009646 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2203      	movs	r2, #3
 8009630:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009632:	78fb      	ldrb	r3, [r7, #3]
 8009634:	b29a      	uxth	r2, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009646:	2200      	movs	r2, #0
 8009648:	2100      	movs	r1, #0
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 f9e5 	bl	8009a1a <USBH_CtlReq>
 8009650:	4603      	mov	r3, r0
}
 8009652:	4618      	mov	r0, r3
 8009654:	3708      	adds	r7, #8
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b082      	sub	sp, #8
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
 8009662:	460b      	mov	r3, r1
 8009664:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	789b      	ldrb	r3, [r3, #2]
 800966a:	2b01      	cmp	r3, #1
 800966c:	d10f      	bne.n	800968e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2202      	movs	r2, #2
 8009672:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009680:	78fb      	ldrb	r3, [r7, #3]
 8009682:	b29a      	uxth	r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800968e:	2200      	movs	r2, #0
 8009690:	2100      	movs	r1, #0
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 f9c1 	bl	8009a1a <USBH_CtlReq>
 8009698:	4603      	mov	r3, r0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80096a2:	b480      	push	{r7}
 80096a4:	b085      	sub	sp, #20
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	60f8      	str	r0, [r7, #12]
 80096aa:	60b9      	str	r1, [r7, #8]
 80096ac:	4613      	mov	r3, r2
 80096ae:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	781a      	ldrb	r2, [r3, #0]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	785a      	ldrb	r2, [r3, #1]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	3302      	adds	r3, #2
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	3303      	adds	r3, #3
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	021b      	lsls	r3, r3, #8
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	4313      	orrs	r3, r2
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	791a      	ldrb	r2, [r3, #4]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	795a      	ldrb	r2, [r3, #5]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	799a      	ldrb	r2, [r3, #6]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	79da      	ldrb	r2, [r3, #7]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80096fc:	88fb      	ldrh	r3, [r7, #6]
 80096fe:	2b08      	cmp	r3, #8
 8009700:	d939      	bls.n	8009776 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	3308      	adds	r3, #8
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	b29a      	uxth	r2, r3
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	3309      	adds	r3, #9
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	b29b      	uxth	r3, r3
 8009712:	021b      	lsls	r3, r3, #8
 8009714:	b29b      	uxth	r3, r3
 8009716:	4313      	orrs	r3, r2
 8009718:	b29a      	uxth	r2, r3
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	330a      	adds	r3, #10
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	b29a      	uxth	r2, r3
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	330b      	adds	r3, #11
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	b29b      	uxth	r3, r3
 800972e:	021b      	lsls	r3, r3, #8
 8009730:	b29b      	uxth	r3, r3
 8009732:	4313      	orrs	r3, r2
 8009734:	b29a      	uxth	r2, r3
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	330c      	adds	r3, #12
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	b29a      	uxth	r2, r3
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	330d      	adds	r3, #13
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	b29b      	uxth	r3, r3
 800974a:	021b      	lsls	r3, r3, #8
 800974c:	b29b      	uxth	r3, r3
 800974e:	4313      	orrs	r3, r2
 8009750:	b29a      	uxth	r2, r3
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	7b9a      	ldrb	r2, [r3, #14]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	7bda      	ldrb	r2, [r3, #15]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	7c1a      	ldrb	r2, [r3, #16]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	7c5a      	ldrb	r2, [r3, #17]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	745a      	strb	r2, [r3, #17]
  }
}
 8009776:	bf00      	nop
 8009778:	3714      	adds	r7, #20
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr

08009782 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b08a      	sub	sp, #40	; 0x28
 8009786:	af00      	add	r7, sp, #0
 8009788:	60f8      	str	r0, [r7, #12]
 800978a:	60b9      	str	r1, [r7, #8]
 800978c:	4613      	mov	r3, r2
 800978e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009794:	2300      	movs	r3, #0
 8009796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800979a:	2300      	movs	r3, #0
 800979c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	781a      	ldrb	r2, [r3, #0]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	785a      	ldrb	r2, [r3, #1]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	3302      	adds	r3, #2
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	b29a      	uxth	r2, r3
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	3303      	adds	r3, #3
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	021b      	lsls	r3, r3, #8
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	4313      	orrs	r3, r2
 80097ca:	b29a      	uxth	r2, r3
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	791a      	ldrb	r2, [r3, #4]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	795a      	ldrb	r2, [r3, #5]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	799a      	ldrb	r2, [r3, #6]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	79da      	ldrb	r2, [r3, #7]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	7a1a      	ldrb	r2, [r3, #8]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80097f8:	88fb      	ldrh	r3, [r7, #6]
 80097fa:	2b09      	cmp	r3, #9
 80097fc:	d95f      	bls.n	80098be <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80097fe:	2309      	movs	r3, #9
 8009800:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009802:	2300      	movs	r3, #0
 8009804:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009806:	e051      	b.n	80098ac <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009808:	f107 0316 	add.w	r3, r7, #22
 800980c:	4619      	mov	r1, r3
 800980e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009810:	f000 f8e8 	bl	80099e4 <USBH_GetNextDesc>
 8009814:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009818:	785b      	ldrb	r3, [r3, #1]
 800981a:	2b04      	cmp	r3, #4
 800981c:	d146      	bne.n	80098ac <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800981e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009822:	221a      	movs	r2, #26
 8009824:	fb02 f303 	mul.w	r3, r2, r3
 8009828:	3308      	adds	r3, #8
 800982a:	68fa      	ldr	r2, [r7, #12]
 800982c:	4413      	add	r3, r2
 800982e:	3302      	adds	r3, #2
 8009830:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009832:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009834:	69f8      	ldr	r0, [r7, #28]
 8009836:	f000 f846 	bl	80098c6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800983a:	2300      	movs	r3, #0
 800983c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009840:	2300      	movs	r3, #0
 8009842:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009844:	e022      	b.n	800988c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009846:	f107 0316 	add.w	r3, r7, #22
 800984a:	4619      	mov	r1, r3
 800984c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800984e:	f000 f8c9 	bl	80099e4 <USBH_GetNextDesc>
 8009852:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009856:	785b      	ldrb	r3, [r3, #1]
 8009858:	2b05      	cmp	r3, #5
 800985a:	d117      	bne.n	800988c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800985c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009860:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009864:	3201      	adds	r2, #1
 8009866:	00d2      	lsls	r2, r2, #3
 8009868:	211a      	movs	r1, #26
 800986a:	fb01 f303 	mul.w	r3, r1, r3
 800986e:	4413      	add	r3, r2
 8009870:	3308      	adds	r3, #8
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	4413      	add	r3, r2
 8009876:	3304      	adds	r3, #4
 8009878:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800987a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800987c:	69b8      	ldr	r0, [r7, #24]
 800987e:	f000 f851 	bl	8009924 <USBH_ParseEPDesc>
            ep_ix++;
 8009882:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009886:	3301      	adds	r3, #1
 8009888:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	791b      	ldrb	r3, [r3, #4]
 8009890:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009894:	429a      	cmp	r2, r3
 8009896:	d204      	bcs.n	80098a2 <USBH_ParseCfgDesc+0x120>
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	885a      	ldrh	r2, [r3, #2]
 800989c:	8afb      	ldrh	r3, [r7, #22]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d8d1      	bhi.n	8009846 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80098a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80098a6:	3301      	adds	r3, #1
 80098a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80098ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d804      	bhi.n	80098be <USBH_ParseCfgDesc+0x13c>
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	885a      	ldrh	r2, [r3, #2]
 80098b8:	8afb      	ldrh	r3, [r7, #22]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d8a4      	bhi.n	8009808 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80098be:	bf00      	nop
 80098c0:	3728      	adds	r7, #40	; 0x28
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80098c6:	b480      	push	{r7}
 80098c8:	b083      	sub	sp, #12
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
 80098ce:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	781a      	ldrb	r2, [r3, #0]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	785a      	ldrb	r2, [r3, #1]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	789a      	ldrb	r2, [r3, #2]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	78da      	ldrb	r2, [r3, #3]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	791a      	ldrb	r2, [r3, #4]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	795a      	ldrb	r2, [r3, #5]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	799a      	ldrb	r2, [r3, #6]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	79da      	ldrb	r2, [r3, #7]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	7a1a      	ldrb	r2, [r3, #8]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	721a      	strb	r2, [r3, #8]
}
 8009918:	bf00      	nop
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	781a      	ldrb	r2, [r3, #0]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	785a      	ldrb	r2, [r3, #1]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	789a      	ldrb	r2, [r3, #2]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	78da      	ldrb	r2, [r3, #3]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	3304      	adds	r3, #4
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	b29a      	uxth	r2, r3
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	3305      	adds	r3, #5
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	b29b      	uxth	r3, r3
 800995e:	021b      	lsls	r3, r3, #8
 8009960:	b29b      	uxth	r3, r3
 8009962:	4313      	orrs	r3, r2
 8009964:	b29a      	uxth	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	799a      	ldrb	r2, [r3, #6]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	719a      	strb	r2, [r3, #6]
}
 8009972:	bf00      	nop
 8009974:	370c      	adds	r7, #12
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr

0800997e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800997e:	b480      	push	{r7}
 8009980:	b087      	sub	sp, #28
 8009982:	af00      	add	r7, sp, #0
 8009984:	60f8      	str	r0, [r7, #12]
 8009986:	60b9      	str	r1, [r7, #8]
 8009988:	4613      	mov	r3, r2
 800998a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	3301      	adds	r3, #1
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	2b03      	cmp	r3, #3
 8009994:	d120      	bne.n	80099d8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	1e9a      	subs	r2, r3, #2
 800999c:	88fb      	ldrh	r3, [r7, #6]
 800999e:	4293      	cmp	r3, r2
 80099a0:	bf28      	it	cs
 80099a2:	4613      	movcs	r3, r2
 80099a4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	3302      	adds	r3, #2
 80099aa:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80099ac:	2300      	movs	r3, #0
 80099ae:	82fb      	strh	r3, [r7, #22]
 80099b0:	e00b      	b.n	80099ca <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80099b2:	8afb      	ldrh	r3, [r7, #22]
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	4413      	add	r3, r2
 80099b8:	781a      	ldrb	r2, [r3, #0]
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	701a      	strb	r2, [r3, #0]
      pdest++;
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	3301      	adds	r3, #1
 80099c2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80099c4:	8afb      	ldrh	r3, [r7, #22]
 80099c6:	3302      	adds	r3, #2
 80099c8:	82fb      	strh	r3, [r7, #22]
 80099ca:	8afa      	ldrh	r2, [r7, #22]
 80099cc:	8abb      	ldrh	r3, [r7, #20]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d3ef      	bcc.n	80099b2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	2200      	movs	r2, #0
 80099d6:	701a      	strb	r2, [r3, #0]
  }
}
 80099d8:	bf00      	nop
 80099da:	371c      	adds	r7, #28
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	881a      	ldrh	r2, [r3, #0]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	4413      	add	r3, r2
 80099fa:	b29a      	uxth	r2, r3
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4413      	add	r3, r2
 8009a0a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3714      	adds	r7, #20
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr

08009a1a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b086      	sub	sp, #24
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	60f8      	str	r0, [r7, #12]
 8009a22:	60b9      	str	r1, [r7, #8]
 8009a24:	4613      	mov	r3, r2
 8009a26:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	789b      	ldrb	r3, [r3, #2]
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d002      	beq.n	8009a3a <USBH_CtlReq+0x20>
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d00f      	beq.n	8009a58 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009a38:	e027      	b.n	8009a8a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	68ba      	ldr	r2, [r7, #8]
 8009a3e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	88fa      	ldrh	r2, [r7, #6]
 8009a44:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2202      	movs	r2, #2
 8009a50:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009a52:	2301      	movs	r3, #1
 8009a54:	75fb      	strb	r3, [r7, #23]
      break;
 8009a56:	e018      	b.n	8009a8a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f000 f81b 	bl	8009a94 <USBH_HandleControl>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009a62:	7dfb      	ldrb	r3, [r7, #23]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d002      	beq.n	8009a6e <USBH_CtlReq+0x54>
 8009a68:	7dfb      	ldrb	r3, [r7, #23]
 8009a6a:	2b03      	cmp	r3, #3
 8009a6c:	d106      	bne.n	8009a7c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2201      	movs	r2, #1
 8009a72:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2200      	movs	r2, #0
 8009a78:	761a      	strb	r2, [r3, #24]
      break;
 8009a7a:	e005      	b.n	8009a88 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009a7c:	7dfb      	ldrb	r3, [r7, #23]
 8009a7e:	2b02      	cmp	r3, #2
 8009a80:	d102      	bne.n	8009a88 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2201      	movs	r2, #1
 8009a86:	709a      	strb	r2, [r3, #2]
      break;
 8009a88:	bf00      	nop
  }
  return status;
 8009a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3718      	adds	r7, #24
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b086      	sub	sp, #24
 8009a98:	af02      	add	r7, sp, #8
 8009a9a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	7e1b      	ldrb	r3, [r3, #24]
 8009aa8:	3b01      	subs	r3, #1
 8009aaa:	2b0a      	cmp	r3, #10
 8009aac:	f200 8156 	bhi.w	8009d5c <USBH_HandleControl+0x2c8>
 8009ab0:	a201      	add	r2, pc, #4	; (adr r2, 8009ab8 <USBH_HandleControl+0x24>)
 8009ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab6:	bf00      	nop
 8009ab8:	08009ae5 	.word	0x08009ae5
 8009abc:	08009aff 	.word	0x08009aff
 8009ac0:	08009b69 	.word	0x08009b69
 8009ac4:	08009b8f 	.word	0x08009b8f
 8009ac8:	08009bc7 	.word	0x08009bc7
 8009acc:	08009bf1 	.word	0x08009bf1
 8009ad0:	08009c43 	.word	0x08009c43
 8009ad4:	08009c65 	.word	0x08009c65
 8009ad8:	08009ca1 	.word	0x08009ca1
 8009adc:	08009cc7 	.word	0x08009cc7
 8009ae0:	08009d05 	.word	0x08009d05
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f103 0110 	add.w	r1, r3, #16
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	795b      	ldrb	r3, [r3, #5]
 8009aee:	461a      	mov	r2, r3
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 f943 	bl	8009d7c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2202      	movs	r2, #2
 8009afa:	761a      	strb	r2, [r3, #24]
      break;
 8009afc:	e139      	b.n	8009d72 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	795b      	ldrb	r3, [r3, #5]
 8009b02:	4619      	mov	r1, r3
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 fcc5 	bl	800a494 <USBH_LL_GetURBState>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009b0e:	7bbb      	ldrb	r3, [r7, #14]
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d11e      	bne.n	8009b52 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	7c1b      	ldrb	r3, [r3, #16]
 8009b18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009b1c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	8adb      	ldrh	r3, [r3, #22]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d00a      	beq.n	8009b3c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009b26:	7b7b      	ldrb	r3, [r7, #13]
 8009b28:	2b80      	cmp	r3, #128	; 0x80
 8009b2a:	d103      	bne.n	8009b34 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2203      	movs	r2, #3
 8009b30:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009b32:	e115      	b.n	8009d60 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2205      	movs	r2, #5
 8009b38:	761a      	strb	r2, [r3, #24]
      break;
 8009b3a:	e111      	b.n	8009d60 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009b3c:	7b7b      	ldrb	r3, [r7, #13]
 8009b3e:	2b80      	cmp	r3, #128	; 0x80
 8009b40:	d103      	bne.n	8009b4a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2209      	movs	r2, #9
 8009b46:	761a      	strb	r2, [r3, #24]
      break;
 8009b48:	e10a      	b.n	8009d60 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2207      	movs	r2, #7
 8009b4e:	761a      	strb	r2, [r3, #24]
      break;
 8009b50:	e106      	b.n	8009d60 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009b52:	7bbb      	ldrb	r3, [r7, #14]
 8009b54:	2b04      	cmp	r3, #4
 8009b56:	d003      	beq.n	8009b60 <USBH_HandleControl+0xcc>
 8009b58:	7bbb      	ldrb	r3, [r7, #14]
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	f040 8100 	bne.w	8009d60 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	220b      	movs	r2, #11
 8009b64:	761a      	strb	r2, [r3, #24]
      break;
 8009b66:	e0fb      	b.n	8009d60 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6899      	ldr	r1, [r3, #8]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	899a      	ldrh	r2, [r3, #12]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	791b      	ldrb	r3, [r3, #4]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 f93a 	bl	8009dfa <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2204      	movs	r2, #4
 8009b8a:	761a      	strb	r2, [r3, #24]
      break;
 8009b8c:	e0f1      	b.n	8009d72 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	791b      	ldrb	r3, [r3, #4]
 8009b92:	4619      	mov	r1, r3
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 fc7d 	bl	800a494 <USBH_LL_GetURBState>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009b9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d102      	bne.n	8009baa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2209      	movs	r2, #9
 8009ba8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009baa:	7bbb      	ldrb	r3, [r7, #14]
 8009bac:	2b05      	cmp	r3, #5
 8009bae:	d102      	bne.n	8009bb6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009bb0:	2303      	movs	r3, #3
 8009bb2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009bb4:	e0d6      	b.n	8009d64 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009bb6:	7bbb      	ldrb	r3, [r7, #14]
 8009bb8:	2b04      	cmp	r3, #4
 8009bba:	f040 80d3 	bne.w	8009d64 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	220b      	movs	r2, #11
 8009bc2:	761a      	strb	r2, [r3, #24]
      break;
 8009bc4:	e0ce      	b.n	8009d64 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6899      	ldr	r1, [r3, #8]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	899a      	ldrh	r2, [r3, #12]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	795b      	ldrb	r3, [r3, #5]
 8009bd2:	2001      	movs	r0, #1
 8009bd4:	9000      	str	r0, [sp, #0]
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 f8ea 	bl	8009db0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009be2:	b29a      	uxth	r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2206      	movs	r2, #6
 8009bec:	761a      	strb	r2, [r3, #24]
      break;
 8009bee:	e0c0      	b.n	8009d72 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	795b      	ldrb	r3, [r3, #5]
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 fc4c 	bl	800a494 <USBH_LL_GetURBState>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009c00:	7bbb      	ldrb	r3, [r7, #14]
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d103      	bne.n	8009c0e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2207      	movs	r2, #7
 8009c0a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009c0c:	e0ac      	b.n	8009d68 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009c0e:	7bbb      	ldrb	r3, [r7, #14]
 8009c10:	2b05      	cmp	r3, #5
 8009c12:	d105      	bne.n	8009c20 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	220c      	movs	r2, #12
 8009c18:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009c1a:	2303      	movs	r3, #3
 8009c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8009c1e:	e0a3      	b.n	8009d68 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009c20:	7bbb      	ldrb	r3, [r7, #14]
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d103      	bne.n	8009c2e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2205      	movs	r2, #5
 8009c2a:	761a      	strb	r2, [r3, #24]
      break;
 8009c2c:	e09c      	b.n	8009d68 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009c2e:	7bbb      	ldrb	r3, [r7, #14]
 8009c30:	2b04      	cmp	r3, #4
 8009c32:	f040 8099 	bne.w	8009d68 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	220b      	movs	r2, #11
 8009c3a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8009c40:	e092      	b.n	8009d68 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	791b      	ldrb	r3, [r3, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	2100      	movs	r1, #0
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 f8d5 	bl	8009dfa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009c56:	b29a      	uxth	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2208      	movs	r2, #8
 8009c60:	761a      	strb	r2, [r3, #24]

      break;
 8009c62:	e086      	b.n	8009d72 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	791b      	ldrb	r3, [r3, #4]
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 fc12 	bl	800a494 <USBH_LL_GetURBState>
 8009c70:	4603      	mov	r3, r0
 8009c72:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009c74:	7bbb      	ldrb	r3, [r7, #14]
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d105      	bne.n	8009c86 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	220d      	movs	r2, #13
 8009c7e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009c84:	e072      	b.n	8009d6c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009c86:	7bbb      	ldrb	r3, [r7, #14]
 8009c88:	2b04      	cmp	r3, #4
 8009c8a:	d103      	bne.n	8009c94 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	220b      	movs	r2, #11
 8009c90:	761a      	strb	r2, [r3, #24]
      break;
 8009c92:	e06b      	b.n	8009d6c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009c94:	7bbb      	ldrb	r3, [r7, #14]
 8009c96:	2b05      	cmp	r3, #5
 8009c98:	d168      	bne.n	8009d6c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009c9a:	2303      	movs	r3, #3
 8009c9c:	73fb      	strb	r3, [r7, #15]
      break;
 8009c9e:	e065      	b.n	8009d6c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	795b      	ldrb	r3, [r3, #5]
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	9200      	str	r2, [sp, #0]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	2100      	movs	r1, #0
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 f87f 	bl	8009db0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009cb8:	b29a      	uxth	r2, r3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	220a      	movs	r2, #10
 8009cc2:	761a      	strb	r2, [r3, #24]
      break;
 8009cc4:	e055      	b.n	8009d72 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	795b      	ldrb	r3, [r3, #5]
 8009cca:	4619      	mov	r1, r3
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 fbe1 	bl	800a494 <USBH_LL_GetURBState>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009cd6:	7bbb      	ldrb	r3, [r7, #14]
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d105      	bne.n	8009ce8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	220d      	movs	r2, #13
 8009ce4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009ce6:	e043      	b.n	8009d70 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009ce8:	7bbb      	ldrb	r3, [r7, #14]
 8009cea:	2b02      	cmp	r3, #2
 8009cec:	d103      	bne.n	8009cf6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2209      	movs	r2, #9
 8009cf2:	761a      	strb	r2, [r3, #24]
      break;
 8009cf4:	e03c      	b.n	8009d70 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009cf6:	7bbb      	ldrb	r3, [r7, #14]
 8009cf8:	2b04      	cmp	r3, #4
 8009cfa:	d139      	bne.n	8009d70 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	220b      	movs	r2, #11
 8009d00:	761a      	strb	r2, [r3, #24]
      break;
 8009d02:	e035      	b.n	8009d70 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	7e5b      	ldrb	r3, [r3, #25]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	b2da      	uxtb	r2, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	765a      	strb	r2, [r3, #25]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	7e5b      	ldrb	r3, [r3, #25]
 8009d14:	2b02      	cmp	r3, #2
 8009d16:	d806      	bhi.n	8009d26 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2201      	movs	r2, #1
 8009d22:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009d24:	e025      	b.n	8009d72 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d2c:	2106      	movs	r1, #6
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	795b      	ldrb	r3, [r3, #5]
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f90c 	bl	8009f5c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	791b      	ldrb	r3, [r3, #4]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f906 	bl	8009f5c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009d56:	2302      	movs	r3, #2
 8009d58:	73fb      	strb	r3, [r7, #15]
      break;
 8009d5a:	e00a      	b.n	8009d72 <USBH_HandleControl+0x2de>

    default:
      break;
 8009d5c:	bf00      	nop
 8009d5e:	e008      	b.n	8009d72 <USBH_HandleControl+0x2de>
      break;
 8009d60:	bf00      	nop
 8009d62:	e006      	b.n	8009d72 <USBH_HandleControl+0x2de>
      break;
 8009d64:	bf00      	nop
 8009d66:	e004      	b.n	8009d72 <USBH_HandleControl+0x2de>
      break;
 8009d68:	bf00      	nop
 8009d6a:	e002      	b.n	8009d72 <USBH_HandleControl+0x2de>
      break;
 8009d6c:	bf00      	nop
 8009d6e:	e000      	b.n	8009d72 <USBH_HandleControl+0x2de>
      break;
 8009d70:	bf00      	nop
  }

  return status;
 8009d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b088      	sub	sp, #32
 8009d80:	af04      	add	r7, sp, #16
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	4613      	mov	r3, r2
 8009d88:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009d8a:	79f9      	ldrb	r1, [r7, #7]
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	9303      	str	r3, [sp, #12]
 8009d90:	2308      	movs	r3, #8
 8009d92:	9302      	str	r3, [sp, #8]
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	9301      	str	r3, [sp, #4]
 8009d98:	2300      	movs	r3, #0
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	2200      	movs	r2, #0
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f000 fb46 	bl	800a432 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b088      	sub	sp, #32
 8009db4:	af04      	add	r7, sp, #16
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	4611      	mov	r1, r2
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	80fb      	strh	r3, [r7, #6]
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d001      	beq.n	8009dd4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009dd4:	7979      	ldrb	r1, [r7, #5]
 8009dd6:	7e3b      	ldrb	r3, [r7, #24]
 8009dd8:	9303      	str	r3, [sp, #12]
 8009dda:	88fb      	ldrh	r3, [r7, #6]
 8009ddc:	9302      	str	r3, [sp, #8]
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	9301      	str	r3, [sp, #4]
 8009de2:	2301      	movs	r3, #1
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	2300      	movs	r3, #0
 8009de8:	2200      	movs	r2, #0
 8009dea:	68f8      	ldr	r0, [r7, #12]
 8009dec:	f000 fb21 	bl	800a432 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b088      	sub	sp, #32
 8009dfe:	af04      	add	r7, sp, #16
 8009e00:	60f8      	str	r0, [r7, #12]
 8009e02:	60b9      	str	r1, [r7, #8]
 8009e04:	4611      	mov	r1, r2
 8009e06:	461a      	mov	r2, r3
 8009e08:	460b      	mov	r3, r1
 8009e0a:	80fb      	strh	r3, [r7, #6]
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009e10:	7979      	ldrb	r1, [r7, #5]
 8009e12:	2300      	movs	r3, #0
 8009e14:	9303      	str	r3, [sp, #12]
 8009e16:	88fb      	ldrh	r3, [r7, #6]
 8009e18:	9302      	str	r3, [sp, #8]
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	9301      	str	r3, [sp, #4]
 8009e1e:	2301      	movs	r3, #1
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	2300      	movs	r3, #0
 8009e24:	2201      	movs	r2, #1
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	f000 fb03 	bl	800a432 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009e2c:	2300      	movs	r3, #0

}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}

08009e36 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b088      	sub	sp, #32
 8009e3a:	af04      	add	r7, sp, #16
 8009e3c:	60f8      	str	r0, [r7, #12]
 8009e3e:	60b9      	str	r1, [r7, #8]
 8009e40:	4611      	mov	r1, r2
 8009e42:	461a      	mov	r2, r3
 8009e44:	460b      	mov	r3, r1
 8009e46:	80fb      	strh	r3, [r7, #6]
 8009e48:	4613      	mov	r3, r2
 8009e4a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d001      	beq.n	8009e5a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009e56:	2300      	movs	r3, #0
 8009e58:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009e5a:	7979      	ldrb	r1, [r7, #5]
 8009e5c:	7e3b      	ldrb	r3, [r7, #24]
 8009e5e:	9303      	str	r3, [sp, #12]
 8009e60:	88fb      	ldrh	r3, [r7, #6]
 8009e62:	9302      	str	r3, [sp, #8]
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	9301      	str	r3, [sp, #4]
 8009e68:	2301      	movs	r3, #1
 8009e6a:	9300      	str	r3, [sp, #0]
 8009e6c:	2302      	movs	r3, #2
 8009e6e:	2200      	movs	r2, #0
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f000 fade 	bl	800a432 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009e76:	2300      	movs	r3, #0
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b088      	sub	sp, #32
 8009e84:	af04      	add	r7, sp, #16
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	4611      	mov	r1, r2
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	460b      	mov	r3, r1
 8009e90:	80fb      	strh	r3, [r7, #6]
 8009e92:	4613      	mov	r3, r2
 8009e94:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009e96:	7979      	ldrb	r1, [r7, #5]
 8009e98:	2300      	movs	r3, #0
 8009e9a:	9303      	str	r3, [sp, #12]
 8009e9c:	88fb      	ldrh	r3, [r7, #6]
 8009e9e:	9302      	str	r3, [sp, #8]
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	9301      	str	r3, [sp, #4]
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	9300      	str	r3, [sp, #0]
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	2201      	movs	r2, #1
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f000 fac0 	bl	800a432 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009eb2:	2300      	movs	r3, #0
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b086      	sub	sp, #24
 8009ec0:	af04      	add	r7, sp, #16
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	4608      	mov	r0, r1
 8009ec6:	4611      	mov	r1, r2
 8009ec8:	461a      	mov	r2, r3
 8009eca:	4603      	mov	r3, r0
 8009ecc:	70fb      	strb	r3, [r7, #3]
 8009ece:	460b      	mov	r3, r1
 8009ed0:	70bb      	strb	r3, [r7, #2]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009ed6:	7878      	ldrb	r0, [r7, #1]
 8009ed8:	78ba      	ldrb	r2, [r7, #2]
 8009eda:	78f9      	ldrb	r1, [r7, #3]
 8009edc:	8b3b      	ldrh	r3, [r7, #24]
 8009ede:	9302      	str	r3, [sp, #8]
 8009ee0:	7d3b      	ldrb	r3, [r7, #20]
 8009ee2:	9301      	str	r3, [sp, #4]
 8009ee4:	7c3b      	ldrb	r3, [r7, #16]
 8009ee6:	9300      	str	r3, [sp, #0]
 8009ee8:	4603      	mov	r3, r0
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 fa53 	bl	800a396 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b082      	sub	sp, #8
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
 8009f02:	460b      	mov	r3, r1
 8009f04:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009f06:	78fb      	ldrb	r3, [r7, #3]
 8009f08:	4619      	mov	r1, r3
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 fa72 	bl	800a3f4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009f10:	2300      	movs	r3, #0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3708      	adds	r7, #8
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}

08009f1a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009f1a:	b580      	push	{r7, lr}
 8009f1c:	b084      	sub	sp, #16
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
 8009f22:	460b      	mov	r3, r1
 8009f24:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 f836 	bl	8009f98 <USBH_GetFreePipe>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009f30:	89fb      	ldrh	r3, [r7, #14]
 8009f32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d00a      	beq.n	8009f50 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009f3a:	78fa      	ldrb	r2, [r7, #3]
 8009f3c:	89fb      	ldrh	r3, [r7, #14]
 8009f3e:	f003 030f 	and.w	r3, r3, #15
 8009f42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f46:	6879      	ldr	r1, [r7, #4]
 8009f48:	33e0      	adds	r3, #224	; 0xe0
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	440b      	add	r3, r1
 8009f4e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009f50:	89fb      	ldrh	r3, [r7, #14]
 8009f52:	b2db      	uxtb	r3, r3
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	460b      	mov	r3, r1
 8009f66:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009f68:	78fb      	ldrb	r3, [r7, #3]
 8009f6a:	2b0a      	cmp	r3, #10
 8009f6c:	d80d      	bhi.n	8009f8a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009f6e:	78fb      	ldrb	r3, [r7, #3]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	33e0      	adds	r3, #224	; 0xe0
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4413      	add	r3, r2
 8009f78:	685a      	ldr	r2, [r3, #4]
 8009f7a:	78fb      	ldrb	r3, [r7, #3]
 8009f7c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009f80:	6879      	ldr	r1, [r7, #4]
 8009f82:	33e0      	adds	r3, #224	; 0xe0
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	440b      	add	r3, r1
 8009f88:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009f8a:	2300      	movs	r3, #0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	370c      	adds	r7, #12
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b085      	sub	sp, #20
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	73fb      	strb	r3, [r7, #15]
 8009fa8:	e00f      	b.n	8009fca <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009faa:	7bfb      	ldrb	r3, [r7, #15]
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	33e0      	adds	r3, #224	; 0xe0
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	4413      	add	r3, r2
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d102      	bne.n	8009fc4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009fbe:	7bfb      	ldrb	r3, [r7, #15]
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	e007      	b.n	8009fd4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009fc4:	7bfb      	ldrb	r3, [r7, #15]
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	73fb      	strb	r3, [r7, #15]
 8009fca:	7bfb      	ldrb	r3, [r7, #15]
 8009fcc:	2b0a      	cmp	r3, #10
 8009fce:	d9ec      	bls.n	8009faa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009fd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3714      	adds	r7, #20
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	490e      	ldr	r1, [pc, #56]	; (800a020 <MX_USB_HOST_Init+0x40>)
 8009fe8:	480e      	ldr	r0, [pc, #56]	; (800a024 <MX_USB_HOST_Init+0x44>)
 8009fea:	f7fe fca1 	bl	8008930 <USBH_Init>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d001      	beq.n	8009ff8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009ff4:	f7f7 fec4 	bl	8001d80 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009ff8:	490b      	ldr	r1, [pc, #44]	; (800a028 <MX_USB_HOST_Init+0x48>)
 8009ffa:	480a      	ldr	r0, [pc, #40]	; (800a024 <MX_USB_HOST_Init+0x44>)
 8009ffc:	f7fe fd26 	bl	8008a4c <USBH_RegisterClass>
 800a000:	4603      	mov	r3, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	d001      	beq.n	800a00a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a006:	f7f7 febb 	bl	8001d80 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a00a:	4806      	ldr	r0, [pc, #24]	; (800a024 <MX_USB_HOST_Init+0x44>)
 800a00c:	f7fe fdaa 	bl	8008b64 <USBH_Start>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d001      	beq.n	800a01a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a016:	f7f7 feb3 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a01a:	bf00      	nop
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	0800a041 	.word	0x0800a041
 800a024:	200002d4 	.word	0x200002d4
 800a028:	20000014 	.word	0x20000014

0800a02c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a030:	4802      	ldr	r0, [pc, #8]	; (800a03c <MX_USB_HOST_Process+0x10>)
 800a032:	f7fe fda7 	bl	8008b84 <USBH_Process>
}
 800a036:	bf00      	nop
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	200002d4 	.word	0x200002d4

0800a040 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	460b      	mov	r3, r1
 800a04a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a04c:	78fb      	ldrb	r3, [r7, #3]
 800a04e:	3b01      	subs	r3, #1
 800a050:	2b04      	cmp	r3, #4
 800a052:	d819      	bhi.n	800a088 <USBH_UserProcess+0x48>
 800a054:	a201      	add	r2, pc, #4	; (adr r2, 800a05c <USBH_UserProcess+0x1c>)
 800a056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a05a:	bf00      	nop
 800a05c:	0800a089 	.word	0x0800a089
 800a060:	0800a079 	.word	0x0800a079
 800a064:	0800a089 	.word	0x0800a089
 800a068:	0800a081 	.word	0x0800a081
 800a06c:	0800a071 	.word	0x0800a071
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a070:	4b09      	ldr	r3, [pc, #36]	; (800a098 <USBH_UserProcess+0x58>)
 800a072:	2203      	movs	r2, #3
 800a074:	701a      	strb	r2, [r3, #0]
  break;
 800a076:	e008      	b.n	800a08a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a078:	4b07      	ldr	r3, [pc, #28]	; (800a098 <USBH_UserProcess+0x58>)
 800a07a:	2202      	movs	r2, #2
 800a07c:	701a      	strb	r2, [r3, #0]
  break;
 800a07e:	e004      	b.n	800a08a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a080:	4b05      	ldr	r3, [pc, #20]	; (800a098 <USBH_UserProcess+0x58>)
 800a082:	2201      	movs	r2, #1
 800a084:	701a      	strb	r2, [r3, #0]
  break;
 800a086:	e000      	b.n	800a08a <USBH_UserProcess+0x4a>

  default:
  break;
 800a088:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a08a:	bf00      	nop
 800a08c:	370c      	adds	r7, #12
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr
 800a096:	bf00      	nop
 800a098:	200000bc 	.word	0x200000bc

0800a09c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b08a      	sub	sp, #40	; 0x28
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0a4:	f107 0314 	add.w	r3, r7, #20
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	601a      	str	r2, [r3, #0]
 800a0ac:	605a      	str	r2, [r3, #4]
 800a0ae:	609a      	str	r2, [r3, #8]
 800a0b0:	60da      	str	r2, [r3, #12]
 800a0b2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0bc:	d147      	bne.n	800a14e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a0be:	2300      	movs	r3, #0
 800a0c0:	613b      	str	r3, [r7, #16]
 800a0c2:	4b25      	ldr	r3, [pc, #148]	; (800a158 <HAL_HCD_MspInit+0xbc>)
 800a0c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c6:	4a24      	ldr	r2, [pc, #144]	; (800a158 <HAL_HCD_MspInit+0xbc>)
 800a0c8:	f043 0301 	orr.w	r3, r3, #1
 800a0cc:	6313      	str	r3, [r2, #48]	; 0x30
 800a0ce:	4b22      	ldr	r3, [pc, #136]	; (800a158 <HAL_HCD_MspInit+0xbc>)
 800a0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d2:	f003 0301 	and.w	r3, r3, #1
 800a0d6:	613b      	str	r3, [r7, #16]
 800a0d8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a0da:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a0e8:	f107 0314 	add.w	r3, r7, #20
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	481b      	ldr	r0, [pc, #108]	; (800a15c <HAL_HCD_MspInit+0xc0>)
 800a0f0:	f7f8 fad4 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a0f4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a0f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0fa:	2302      	movs	r3, #2
 800a0fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0fe:	2300      	movs	r3, #0
 800a100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a102:	2300      	movs	r3, #0
 800a104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a106:	230a      	movs	r3, #10
 800a108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a10a:	f107 0314 	add.w	r3, r7, #20
 800a10e:	4619      	mov	r1, r3
 800a110:	4812      	ldr	r0, [pc, #72]	; (800a15c <HAL_HCD_MspInit+0xc0>)
 800a112:	f7f8 fac3 	bl	800269c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a116:	4b10      	ldr	r3, [pc, #64]	; (800a158 <HAL_HCD_MspInit+0xbc>)
 800a118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a11a:	4a0f      	ldr	r2, [pc, #60]	; (800a158 <HAL_HCD_MspInit+0xbc>)
 800a11c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a120:	6353      	str	r3, [r2, #52]	; 0x34
 800a122:	2300      	movs	r3, #0
 800a124:	60fb      	str	r3, [r7, #12]
 800a126:	4b0c      	ldr	r3, [pc, #48]	; (800a158 <HAL_HCD_MspInit+0xbc>)
 800a128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a12a:	4a0b      	ldr	r2, [pc, #44]	; (800a158 <HAL_HCD_MspInit+0xbc>)
 800a12c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a130:	6453      	str	r3, [r2, #68]	; 0x44
 800a132:	4b09      	ldr	r3, [pc, #36]	; (800a158 <HAL_HCD_MspInit+0xbc>)
 800a134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a13a:	60fb      	str	r3, [r7, #12]
 800a13c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a13e:	2200      	movs	r2, #0
 800a140:	2100      	movs	r1, #0
 800a142:	2043      	movs	r0, #67	; 0x43
 800a144:	f7f8 fa73 	bl	800262e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a148:	2043      	movs	r0, #67	; 0x43
 800a14a:	f7f8 fa8c 	bl	8002666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a14e:	bf00      	nop
 800a150:	3728      	adds	r7, #40	; 0x28
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	40023800 	.word	0x40023800
 800a15c:	40020000 	.word	0x40020000

0800a160 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a16e:	4618      	mov	r0, r3
 800a170:	f7ff f8db 	bl	800932a <USBH_LL_IncTimer>
}
 800a174:	bf00      	nop
 800a176:	3708      	adds	r7, #8
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7ff f913 	bl	80093b6 <USBH_LL_Connect>
}
 800a190:	bf00      	nop
 800a192:	3708      	adds	r7, #8
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7ff f91c 	bl	80093e4 <USBH_LL_Disconnect>
}
 800a1ac:	bf00      	nop
 800a1ae:	3708      	adds	r7, #8
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b083      	sub	sp, #12
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	460b      	mov	r3, r1
 800a1be:	70fb      	strb	r3, [r7, #3]
 800a1c0:	4613      	mov	r3, r2
 800a1c2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a1c4:	bf00      	nop
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7ff f8cd 	bl	800937e <USBH_LL_PortEnabled>
}
 800a1e4:	bf00      	nop
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7ff f8cd 	bl	800939a <USBH_LL_PortDisabled>
}
 800a200:	bf00      	nop
 800a202:	3708      	adds	r7, #8
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a216:	2b01      	cmp	r3, #1
 800a218:	d12a      	bne.n	800a270 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a21a:	4a18      	ldr	r2, [pc, #96]	; (800a27c <USBH_LL_Init+0x74>)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4a15      	ldr	r2, [pc, #84]	; (800a27c <USBH_LL_Init+0x74>)
 800a226:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a22a:	4b14      	ldr	r3, [pc, #80]	; (800a27c <USBH_LL_Init+0x74>)
 800a22c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a230:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a232:	4b12      	ldr	r3, [pc, #72]	; (800a27c <USBH_LL_Init+0x74>)
 800a234:	2208      	movs	r2, #8
 800a236:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a238:	4b10      	ldr	r3, [pc, #64]	; (800a27c <USBH_LL_Init+0x74>)
 800a23a:	2201      	movs	r2, #1
 800a23c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a23e:	4b0f      	ldr	r3, [pc, #60]	; (800a27c <USBH_LL_Init+0x74>)
 800a240:	2200      	movs	r2, #0
 800a242:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a244:	4b0d      	ldr	r3, [pc, #52]	; (800a27c <USBH_LL_Init+0x74>)
 800a246:	2202      	movs	r2, #2
 800a248:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a24a:	4b0c      	ldr	r3, [pc, #48]	; (800a27c <USBH_LL_Init+0x74>)
 800a24c:	2200      	movs	r2, #0
 800a24e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a250:	480a      	ldr	r0, [pc, #40]	; (800a27c <USBH_LL_Init+0x74>)
 800a252:	f7f8 fc0a 	bl	8002a6a <HAL_HCD_Init>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d001      	beq.n	800a260 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a25c:	f7f7 fd90 	bl	8001d80 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a260:	4806      	ldr	r0, [pc, #24]	; (800a27c <USBH_LL_Init+0x74>)
 800a262:	f7f8 ffe7 	bl	8003234 <HAL_HCD_GetCurrentFrame>
 800a266:	4603      	mov	r3, r0
 800a268:	4619      	mov	r1, r3
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f7ff f84e 	bl	800930c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	200006ac 	.word	0x200006ac

0800a280 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a288:	2300      	movs	r3, #0
 800a28a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a28c:	2300      	movs	r3, #0
 800a28e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a296:	4618      	mov	r0, r3
 800a298:	f7f8 ff56 	bl	8003148 <HAL_HCD_Start>
 800a29c:	4603      	mov	r3, r0
 800a29e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a2a0:	7bfb      	ldrb	r3, [r7, #15]
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f000 f95c 	bl	800a560 <USBH_Get_USB_Status>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b084      	sub	sp, #16
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7f8 ff5e 	bl	800318e <HAL_HCD_Stop>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a2d6:	7bfb      	ldrb	r3, [r7, #15]
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f000 f941 	bl	800a560 <USBH_Get_USB_Status>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3710      	adds	r7, #16
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7f8 ffa6 	bl	8003250 <HAL_HCD_GetCurrentSpeed>
 800a304:	4603      	mov	r3, r0
 800a306:	2b02      	cmp	r3, #2
 800a308:	d00c      	beq.n	800a324 <USBH_LL_GetSpeed+0x38>
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d80d      	bhi.n	800a32a <USBH_LL_GetSpeed+0x3e>
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d002      	beq.n	800a318 <USBH_LL_GetSpeed+0x2c>
 800a312:	2b01      	cmp	r3, #1
 800a314:	d003      	beq.n	800a31e <USBH_LL_GetSpeed+0x32>
 800a316:	e008      	b.n	800a32a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a318:	2300      	movs	r3, #0
 800a31a:	73fb      	strb	r3, [r7, #15]
    break;
 800a31c:	e008      	b.n	800a330 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a31e:	2301      	movs	r3, #1
 800a320:	73fb      	strb	r3, [r7, #15]
    break;
 800a322:	e005      	b.n	800a330 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a324:	2302      	movs	r3, #2
 800a326:	73fb      	strb	r3, [r7, #15]
    break;
 800a328:	e002      	b.n	800a330 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a32a:	2301      	movs	r3, #1
 800a32c:	73fb      	strb	r3, [r7, #15]
    break;
 800a32e:	bf00      	nop
  }
  return  speed;
 800a330:	7bfb      	ldrb	r3, [r7, #15]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}

0800a33a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b084      	sub	sp, #16
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a342:	2300      	movs	r3, #0
 800a344:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a346:	2300      	movs	r3, #0
 800a348:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a350:	4618      	mov	r0, r3
 800a352:	f7f8 ff39 	bl	80031c8 <HAL_HCD_ResetPort>
 800a356:	4603      	mov	r3, r0
 800a358:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a35a:	7bfb      	ldrb	r3, [r7, #15]
 800a35c:	4618      	mov	r0, r3
 800a35e:	f000 f8ff 	bl	800a560 <USBH_Get_USB_Status>
 800a362:	4603      	mov	r3, r0
 800a364:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a366:	7bbb      	ldrb	r3, [r7, #14]
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	460b      	mov	r3, r1
 800a37a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a382:	78fa      	ldrb	r2, [r7, #3]
 800a384:	4611      	mov	r1, r2
 800a386:	4618      	mov	r0, r3
 800a388:	f7f8 ff40 	bl	800320c <HAL_HCD_HC_GetXferCount>
 800a38c:	4603      	mov	r3, r0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a396:	b590      	push	{r4, r7, lr}
 800a398:	b089      	sub	sp, #36	; 0x24
 800a39a:	af04      	add	r7, sp, #16
 800a39c:	6078      	str	r0, [r7, #4]
 800a39e:	4608      	mov	r0, r1
 800a3a0:	4611      	mov	r1, r2
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	70fb      	strb	r3, [r7, #3]
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	70bb      	strb	r3, [r7, #2]
 800a3ac:	4613      	mov	r3, r2
 800a3ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a3be:	787c      	ldrb	r4, [r7, #1]
 800a3c0:	78ba      	ldrb	r2, [r7, #2]
 800a3c2:	78f9      	ldrb	r1, [r7, #3]
 800a3c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a3c6:	9302      	str	r3, [sp, #8]
 800a3c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a3cc:	9301      	str	r3, [sp, #4]
 800a3ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a3d2:	9300      	str	r3, [sp, #0]
 800a3d4:	4623      	mov	r3, r4
 800a3d6:	f7f8 fbaa 	bl	8002b2e <HAL_HCD_HC_Init>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a3de:	7bfb      	ldrb	r3, [r7, #15]
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f000 f8bd 	bl	800a560 <USBH_Get_USB_Status>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3714      	adds	r7, #20
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd90      	pop	{r4, r7, pc}

0800a3f4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a400:	2300      	movs	r3, #0
 800a402:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a404:	2300      	movs	r3, #0
 800a406:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a40e:	78fa      	ldrb	r2, [r7, #3]
 800a410:	4611      	mov	r1, r2
 800a412:	4618      	mov	r0, r3
 800a414:	f7f8 fc1a 	bl	8002c4c <HAL_HCD_HC_Halt>
 800a418:	4603      	mov	r3, r0
 800a41a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a41c:	7bfb      	ldrb	r3, [r7, #15]
 800a41e:	4618      	mov	r0, r3
 800a420:	f000 f89e 	bl	800a560 <USBH_Get_USB_Status>
 800a424:	4603      	mov	r3, r0
 800a426:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a428:	7bbb      	ldrb	r3, [r7, #14]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3710      	adds	r7, #16
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}

0800a432 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a432:	b590      	push	{r4, r7, lr}
 800a434:	b089      	sub	sp, #36	; 0x24
 800a436:	af04      	add	r7, sp, #16
 800a438:	6078      	str	r0, [r7, #4]
 800a43a:	4608      	mov	r0, r1
 800a43c:	4611      	mov	r1, r2
 800a43e:	461a      	mov	r2, r3
 800a440:	4603      	mov	r3, r0
 800a442:	70fb      	strb	r3, [r7, #3]
 800a444:	460b      	mov	r3, r1
 800a446:	70bb      	strb	r3, [r7, #2]
 800a448:	4613      	mov	r3, r2
 800a44a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a44c:	2300      	movs	r3, #0
 800a44e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a450:	2300      	movs	r3, #0
 800a452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a45a:	787c      	ldrb	r4, [r7, #1]
 800a45c:	78ba      	ldrb	r2, [r7, #2]
 800a45e:	78f9      	ldrb	r1, [r7, #3]
 800a460:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a464:	9303      	str	r3, [sp, #12]
 800a466:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a468:	9302      	str	r3, [sp, #8]
 800a46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46c:	9301      	str	r3, [sp, #4]
 800a46e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a472:	9300      	str	r3, [sp, #0]
 800a474:	4623      	mov	r3, r4
 800a476:	f7f8 fc0d 	bl	8002c94 <HAL_HCD_HC_SubmitRequest>
 800a47a:	4603      	mov	r3, r0
 800a47c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a47e:	7bfb      	ldrb	r3, [r7, #15]
 800a480:	4618      	mov	r0, r3
 800a482:	f000 f86d 	bl	800a560 <USBH_Get_USB_Status>
 800a486:	4603      	mov	r3, r0
 800a488:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a48a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3714      	adds	r7, #20
 800a490:	46bd      	mov	sp, r7
 800a492:	bd90      	pop	{r4, r7, pc}

0800a494 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	460b      	mov	r3, r1
 800a49e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a4a6:	78fa      	ldrb	r2, [r7, #3]
 800a4a8:	4611      	mov	r1, r2
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7f8 fe9a 	bl	80031e4 <HAL_HCD_HC_GetURBState>
 800a4b0:	4603      	mov	r3, r0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3708      	adds	r7, #8
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	b082      	sub	sp, #8
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d103      	bne.n	800a4d8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a4d0:	78fb      	ldrb	r3, [r7, #3]
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f000 f870 	bl	800a5b8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a4d8:	20c8      	movs	r0, #200	; 0xc8
 800a4da:	f7f7 ffa9 	bl	8002430 <HAL_Delay>
  return USBH_OK;
 800a4de:	2300      	movs	r3, #0
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3708      	adds	r7, #8
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b085      	sub	sp, #20
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	70fb      	strb	r3, [r7, #3]
 800a4f4:	4613      	mov	r3, r2
 800a4f6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a4fe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a500:	78fb      	ldrb	r3, [r7, #3]
 800a502:	68fa      	ldr	r2, [r7, #12]
 800a504:	212c      	movs	r1, #44	; 0x2c
 800a506:	fb01 f303 	mul.w	r3, r1, r3
 800a50a:	4413      	add	r3, r2
 800a50c:	333b      	adds	r3, #59	; 0x3b
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d009      	beq.n	800a528 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a514:	78fb      	ldrb	r3, [r7, #3]
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	212c      	movs	r1, #44	; 0x2c
 800a51a:	fb01 f303 	mul.w	r3, r1, r3
 800a51e:	4413      	add	r3, r2
 800a520:	3354      	adds	r3, #84	; 0x54
 800a522:	78ba      	ldrb	r2, [r7, #2]
 800a524:	701a      	strb	r2, [r3, #0]
 800a526:	e008      	b.n	800a53a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a528:	78fb      	ldrb	r3, [r7, #3]
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	212c      	movs	r1, #44	; 0x2c
 800a52e:	fb01 f303 	mul.w	r3, r1, r3
 800a532:	4413      	add	r3, r2
 800a534:	3355      	adds	r3, #85	; 0x55
 800a536:	78ba      	ldrb	r2, [r7, #2]
 800a538:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a53a:	2300      	movs	r3, #0
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3714      	adds	r7, #20
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f7f7 ff6d 	bl	8002430 <HAL_Delay>
}
 800a556:	bf00      	nop
 800a558:	3708      	adds	r7, #8
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
	...

0800a560 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a560:	b480      	push	{r7}
 800a562:	b085      	sub	sp, #20
 800a564:	af00      	add	r7, sp, #0
 800a566:	4603      	mov	r3, r0
 800a568:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a56a:	2300      	movs	r3, #0
 800a56c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a56e:	79fb      	ldrb	r3, [r7, #7]
 800a570:	2b03      	cmp	r3, #3
 800a572:	d817      	bhi.n	800a5a4 <USBH_Get_USB_Status+0x44>
 800a574:	a201      	add	r2, pc, #4	; (adr r2, 800a57c <USBH_Get_USB_Status+0x1c>)
 800a576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a57a:	bf00      	nop
 800a57c:	0800a58d 	.word	0x0800a58d
 800a580:	0800a593 	.word	0x0800a593
 800a584:	0800a599 	.word	0x0800a599
 800a588:	0800a59f 	.word	0x0800a59f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a58c:	2300      	movs	r3, #0
 800a58e:	73fb      	strb	r3, [r7, #15]
    break;
 800a590:	e00b      	b.n	800a5aa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a592:	2302      	movs	r3, #2
 800a594:	73fb      	strb	r3, [r7, #15]
    break;
 800a596:	e008      	b.n	800a5aa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a598:	2301      	movs	r3, #1
 800a59a:	73fb      	strb	r3, [r7, #15]
    break;
 800a59c:	e005      	b.n	800a5aa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a59e:	2302      	movs	r3, #2
 800a5a0:	73fb      	strb	r3, [r7, #15]
    break;
 800a5a2:	e002      	b.n	800a5aa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a5a4:	2302      	movs	r3, #2
 800a5a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a5a8:	bf00      	nop
  }
  return usb_status;
 800a5aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3714      	adds	r7, #20
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	4603      	mov	r3, r0
 800a5c0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a5c2:	79fb      	ldrb	r3, [r7, #7]
 800a5c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a5c6:	79fb      	ldrb	r3, [r7, #7]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d102      	bne.n	800a5d2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	73fb      	strb	r3, [r7, #15]
 800a5d0:	e001      	b.n	800a5d6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a5d6:	7bfb      	ldrb	r3, [r7, #15]
 800a5d8:	461a      	mov	r2, r3
 800a5da:	2101      	movs	r1, #1
 800a5dc:	4803      	ldr	r0, [pc, #12]	; (800a5ec <MX_DriverVbusFS+0x34>)
 800a5de:	f7f8 fa11 	bl	8002a04 <HAL_GPIO_WritePin>
}
 800a5e2:	bf00      	nop
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	40020800 	.word	0x40020800

0800a5f0 <__errno>:
 800a5f0:	4b01      	ldr	r3, [pc, #4]	; (800a5f8 <__errno+0x8>)
 800a5f2:	6818      	ldr	r0, [r3, #0]
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop
 800a5f8:	20000034 	.word	0x20000034

0800a5fc <__libc_init_array>:
 800a5fc:	b570      	push	{r4, r5, r6, lr}
 800a5fe:	4d0d      	ldr	r5, [pc, #52]	; (800a634 <__libc_init_array+0x38>)
 800a600:	4c0d      	ldr	r4, [pc, #52]	; (800a638 <__libc_init_array+0x3c>)
 800a602:	1b64      	subs	r4, r4, r5
 800a604:	10a4      	asrs	r4, r4, #2
 800a606:	2600      	movs	r6, #0
 800a608:	42a6      	cmp	r6, r4
 800a60a:	d109      	bne.n	800a620 <__libc_init_array+0x24>
 800a60c:	4d0b      	ldr	r5, [pc, #44]	; (800a63c <__libc_init_array+0x40>)
 800a60e:	4c0c      	ldr	r4, [pc, #48]	; (800a640 <__libc_init_array+0x44>)
 800a610:	f000 fc72 	bl	800aef8 <_init>
 800a614:	1b64      	subs	r4, r4, r5
 800a616:	10a4      	asrs	r4, r4, #2
 800a618:	2600      	movs	r6, #0
 800a61a:	42a6      	cmp	r6, r4
 800a61c:	d105      	bne.n	800a62a <__libc_init_array+0x2e>
 800a61e:	bd70      	pop	{r4, r5, r6, pc}
 800a620:	f855 3b04 	ldr.w	r3, [r5], #4
 800a624:	4798      	blx	r3
 800a626:	3601      	adds	r6, #1
 800a628:	e7ee      	b.n	800a608 <__libc_init_array+0xc>
 800a62a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a62e:	4798      	blx	r3
 800a630:	3601      	adds	r6, #1
 800a632:	e7f2      	b.n	800a61a <__libc_init_array+0x1e>
 800a634:	0800b1c4 	.word	0x0800b1c4
 800a638:	0800b1c4 	.word	0x0800b1c4
 800a63c:	0800b1c4 	.word	0x0800b1c4
 800a640:	0800b1c8 	.word	0x0800b1c8

0800a644 <malloc>:
 800a644:	4b02      	ldr	r3, [pc, #8]	; (800a650 <malloc+0xc>)
 800a646:	4601      	mov	r1, r0
 800a648:	6818      	ldr	r0, [r3, #0]
 800a64a:	f000 b863 	b.w	800a714 <_malloc_r>
 800a64e:	bf00      	nop
 800a650:	20000034 	.word	0x20000034

0800a654 <free>:
 800a654:	4b02      	ldr	r3, [pc, #8]	; (800a660 <free+0xc>)
 800a656:	4601      	mov	r1, r0
 800a658:	6818      	ldr	r0, [r3, #0]
 800a65a:	f000 b80b 	b.w	800a674 <_free_r>
 800a65e:	bf00      	nop
 800a660:	20000034 	.word	0x20000034

0800a664 <memset>:
 800a664:	4402      	add	r2, r0
 800a666:	4603      	mov	r3, r0
 800a668:	4293      	cmp	r3, r2
 800a66a:	d100      	bne.n	800a66e <memset+0xa>
 800a66c:	4770      	bx	lr
 800a66e:	f803 1b01 	strb.w	r1, [r3], #1
 800a672:	e7f9      	b.n	800a668 <memset+0x4>

0800a674 <_free_r>:
 800a674:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a676:	2900      	cmp	r1, #0
 800a678:	d048      	beq.n	800a70c <_free_r+0x98>
 800a67a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a67e:	9001      	str	r0, [sp, #4]
 800a680:	2b00      	cmp	r3, #0
 800a682:	f1a1 0404 	sub.w	r4, r1, #4
 800a686:	bfb8      	it	lt
 800a688:	18e4      	addlt	r4, r4, r3
 800a68a:	f000 f8e1 	bl	800a850 <__malloc_lock>
 800a68e:	4a20      	ldr	r2, [pc, #128]	; (800a710 <_free_r+0x9c>)
 800a690:	9801      	ldr	r0, [sp, #4]
 800a692:	6813      	ldr	r3, [r2, #0]
 800a694:	4615      	mov	r5, r2
 800a696:	b933      	cbnz	r3, 800a6a6 <_free_r+0x32>
 800a698:	6063      	str	r3, [r4, #4]
 800a69a:	6014      	str	r4, [r2, #0]
 800a69c:	b003      	add	sp, #12
 800a69e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6a2:	f000 b8db 	b.w	800a85c <__malloc_unlock>
 800a6a6:	42a3      	cmp	r3, r4
 800a6a8:	d90b      	bls.n	800a6c2 <_free_r+0x4e>
 800a6aa:	6821      	ldr	r1, [r4, #0]
 800a6ac:	1862      	adds	r2, r4, r1
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	bf04      	itt	eq
 800a6b2:	681a      	ldreq	r2, [r3, #0]
 800a6b4:	685b      	ldreq	r3, [r3, #4]
 800a6b6:	6063      	str	r3, [r4, #4]
 800a6b8:	bf04      	itt	eq
 800a6ba:	1852      	addeq	r2, r2, r1
 800a6bc:	6022      	streq	r2, [r4, #0]
 800a6be:	602c      	str	r4, [r5, #0]
 800a6c0:	e7ec      	b.n	800a69c <_free_r+0x28>
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	b10b      	cbz	r3, 800a6cc <_free_r+0x58>
 800a6c8:	42a3      	cmp	r3, r4
 800a6ca:	d9fa      	bls.n	800a6c2 <_free_r+0x4e>
 800a6cc:	6811      	ldr	r1, [r2, #0]
 800a6ce:	1855      	adds	r5, r2, r1
 800a6d0:	42a5      	cmp	r5, r4
 800a6d2:	d10b      	bne.n	800a6ec <_free_r+0x78>
 800a6d4:	6824      	ldr	r4, [r4, #0]
 800a6d6:	4421      	add	r1, r4
 800a6d8:	1854      	adds	r4, r2, r1
 800a6da:	42a3      	cmp	r3, r4
 800a6dc:	6011      	str	r1, [r2, #0]
 800a6de:	d1dd      	bne.n	800a69c <_free_r+0x28>
 800a6e0:	681c      	ldr	r4, [r3, #0]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	6053      	str	r3, [r2, #4]
 800a6e6:	4421      	add	r1, r4
 800a6e8:	6011      	str	r1, [r2, #0]
 800a6ea:	e7d7      	b.n	800a69c <_free_r+0x28>
 800a6ec:	d902      	bls.n	800a6f4 <_free_r+0x80>
 800a6ee:	230c      	movs	r3, #12
 800a6f0:	6003      	str	r3, [r0, #0]
 800a6f2:	e7d3      	b.n	800a69c <_free_r+0x28>
 800a6f4:	6825      	ldr	r5, [r4, #0]
 800a6f6:	1961      	adds	r1, r4, r5
 800a6f8:	428b      	cmp	r3, r1
 800a6fa:	bf04      	itt	eq
 800a6fc:	6819      	ldreq	r1, [r3, #0]
 800a6fe:	685b      	ldreq	r3, [r3, #4]
 800a700:	6063      	str	r3, [r4, #4]
 800a702:	bf04      	itt	eq
 800a704:	1949      	addeq	r1, r1, r5
 800a706:	6021      	streq	r1, [r4, #0]
 800a708:	6054      	str	r4, [r2, #4]
 800a70a:	e7c7      	b.n	800a69c <_free_r+0x28>
 800a70c:	b003      	add	sp, #12
 800a70e:	bd30      	pop	{r4, r5, pc}
 800a710:	200000c0 	.word	0x200000c0

0800a714 <_malloc_r>:
 800a714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a716:	1ccd      	adds	r5, r1, #3
 800a718:	f025 0503 	bic.w	r5, r5, #3
 800a71c:	3508      	adds	r5, #8
 800a71e:	2d0c      	cmp	r5, #12
 800a720:	bf38      	it	cc
 800a722:	250c      	movcc	r5, #12
 800a724:	2d00      	cmp	r5, #0
 800a726:	4606      	mov	r6, r0
 800a728:	db01      	blt.n	800a72e <_malloc_r+0x1a>
 800a72a:	42a9      	cmp	r1, r5
 800a72c:	d903      	bls.n	800a736 <_malloc_r+0x22>
 800a72e:	230c      	movs	r3, #12
 800a730:	6033      	str	r3, [r6, #0]
 800a732:	2000      	movs	r0, #0
 800a734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a736:	f000 f88b 	bl	800a850 <__malloc_lock>
 800a73a:	4921      	ldr	r1, [pc, #132]	; (800a7c0 <_malloc_r+0xac>)
 800a73c:	680a      	ldr	r2, [r1, #0]
 800a73e:	4614      	mov	r4, r2
 800a740:	b99c      	cbnz	r4, 800a76a <_malloc_r+0x56>
 800a742:	4f20      	ldr	r7, [pc, #128]	; (800a7c4 <_malloc_r+0xb0>)
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	b923      	cbnz	r3, 800a752 <_malloc_r+0x3e>
 800a748:	4621      	mov	r1, r4
 800a74a:	4630      	mov	r0, r6
 800a74c:	f000 f83c 	bl	800a7c8 <_sbrk_r>
 800a750:	6038      	str	r0, [r7, #0]
 800a752:	4629      	mov	r1, r5
 800a754:	4630      	mov	r0, r6
 800a756:	f000 f837 	bl	800a7c8 <_sbrk_r>
 800a75a:	1c43      	adds	r3, r0, #1
 800a75c:	d123      	bne.n	800a7a6 <_malloc_r+0x92>
 800a75e:	230c      	movs	r3, #12
 800a760:	6033      	str	r3, [r6, #0]
 800a762:	4630      	mov	r0, r6
 800a764:	f000 f87a 	bl	800a85c <__malloc_unlock>
 800a768:	e7e3      	b.n	800a732 <_malloc_r+0x1e>
 800a76a:	6823      	ldr	r3, [r4, #0]
 800a76c:	1b5b      	subs	r3, r3, r5
 800a76e:	d417      	bmi.n	800a7a0 <_malloc_r+0x8c>
 800a770:	2b0b      	cmp	r3, #11
 800a772:	d903      	bls.n	800a77c <_malloc_r+0x68>
 800a774:	6023      	str	r3, [r4, #0]
 800a776:	441c      	add	r4, r3
 800a778:	6025      	str	r5, [r4, #0]
 800a77a:	e004      	b.n	800a786 <_malloc_r+0x72>
 800a77c:	6863      	ldr	r3, [r4, #4]
 800a77e:	42a2      	cmp	r2, r4
 800a780:	bf0c      	ite	eq
 800a782:	600b      	streq	r3, [r1, #0]
 800a784:	6053      	strne	r3, [r2, #4]
 800a786:	4630      	mov	r0, r6
 800a788:	f000 f868 	bl	800a85c <__malloc_unlock>
 800a78c:	f104 000b 	add.w	r0, r4, #11
 800a790:	1d23      	adds	r3, r4, #4
 800a792:	f020 0007 	bic.w	r0, r0, #7
 800a796:	1ac2      	subs	r2, r0, r3
 800a798:	d0cc      	beq.n	800a734 <_malloc_r+0x20>
 800a79a:	1a1b      	subs	r3, r3, r0
 800a79c:	50a3      	str	r3, [r4, r2]
 800a79e:	e7c9      	b.n	800a734 <_malloc_r+0x20>
 800a7a0:	4622      	mov	r2, r4
 800a7a2:	6864      	ldr	r4, [r4, #4]
 800a7a4:	e7cc      	b.n	800a740 <_malloc_r+0x2c>
 800a7a6:	1cc4      	adds	r4, r0, #3
 800a7a8:	f024 0403 	bic.w	r4, r4, #3
 800a7ac:	42a0      	cmp	r0, r4
 800a7ae:	d0e3      	beq.n	800a778 <_malloc_r+0x64>
 800a7b0:	1a21      	subs	r1, r4, r0
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	f000 f808 	bl	800a7c8 <_sbrk_r>
 800a7b8:	3001      	adds	r0, #1
 800a7ba:	d1dd      	bne.n	800a778 <_malloc_r+0x64>
 800a7bc:	e7cf      	b.n	800a75e <_malloc_r+0x4a>
 800a7be:	bf00      	nop
 800a7c0:	200000c0 	.word	0x200000c0
 800a7c4:	200000c4 	.word	0x200000c4

0800a7c8 <_sbrk_r>:
 800a7c8:	b538      	push	{r3, r4, r5, lr}
 800a7ca:	4d06      	ldr	r5, [pc, #24]	; (800a7e4 <_sbrk_r+0x1c>)
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	4608      	mov	r0, r1
 800a7d2:	602b      	str	r3, [r5, #0]
 800a7d4:	f7f7 fd48 	bl	8002268 <_sbrk>
 800a7d8:	1c43      	adds	r3, r0, #1
 800a7da:	d102      	bne.n	800a7e2 <_sbrk_r+0x1a>
 800a7dc:	682b      	ldr	r3, [r5, #0]
 800a7de:	b103      	cbz	r3, 800a7e2 <_sbrk_r+0x1a>
 800a7e0:	6023      	str	r3, [r4, #0]
 800a7e2:	bd38      	pop	{r3, r4, r5, pc}
 800a7e4:	200009b0 	.word	0x200009b0

0800a7e8 <sniprintf>:
 800a7e8:	b40c      	push	{r2, r3}
 800a7ea:	b530      	push	{r4, r5, lr}
 800a7ec:	4b17      	ldr	r3, [pc, #92]	; (800a84c <sniprintf+0x64>)
 800a7ee:	1e0c      	subs	r4, r1, #0
 800a7f0:	681d      	ldr	r5, [r3, #0]
 800a7f2:	b09d      	sub	sp, #116	; 0x74
 800a7f4:	da08      	bge.n	800a808 <sniprintf+0x20>
 800a7f6:	238b      	movs	r3, #139	; 0x8b
 800a7f8:	602b      	str	r3, [r5, #0]
 800a7fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7fe:	b01d      	add	sp, #116	; 0x74
 800a800:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a804:	b002      	add	sp, #8
 800a806:	4770      	bx	lr
 800a808:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a80c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a810:	bf14      	ite	ne
 800a812:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800a816:	4623      	moveq	r3, r4
 800a818:	9304      	str	r3, [sp, #16]
 800a81a:	9307      	str	r3, [sp, #28]
 800a81c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a820:	9002      	str	r0, [sp, #8]
 800a822:	9006      	str	r0, [sp, #24]
 800a824:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a828:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a82a:	ab21      	add	r3, sp, #132	; 0x84
 800a82c:	a902      	add	r1, sp, #8
 800a82e:	4628      	mov	r0, r5
 800a830:	9301      	str	r3, [sp, #4]
 800a832:	f000 f875 	bl	800a920 <_svfiprintf_r>
 800a836:	1c43      	adds	r3, r0, #1
 800a838:	bfbc      	itt	lt
 800a83a:	238b      	movlt	r3, #139	; 0x8b
 800a83c:	602b      	strlt	r3, [r5, #0]
 800a83e:	2c00      	cmp	r4, #0
 800a840:	d0dd      	beq.n	800a7fe <sniprintf+0x16>
 800a842:	9b02      	ldr	r3, [sp, #8]
 800a844:	2200      	movs	r2, #0
 800a846:	701a      	strb	r2, [r3, #0]
 800a848:	e7d9      	b.n	800a7fe <sniprintf+0x16>
 800a84a:	bf00      	nop
 800a84c:	20000034 	.word	0x20000034

0800a850 <__malloc_lock>:
 800a850:	4801      	ldr	r0, [pc, #4]	; (800a858 <__malloc_lock+0x8>)
 800a852:	f000 baf9 	b.w	800ae48 <__retarget_lock_acquire_recursive>
 800a856:	bf00      	nop
 800a858:	200009b8 	.word	0x200009b8

0800a85c <__malloc_unlock>:
 800a85c:	4801      	ldr	r0, [pc, #4]	; (800a864 <__malloc_unlock+0x8>)
 800a85e:	f000 baf4 	b.w	800ae4a <__retarget_lock_release_recursive>
 800a862:	bf00      	nop
 800a864:	200009b8 	.word	0x200009b8

0800a868 <__ssputs_r>:
 800a868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a86c:	688e      	ldr	r6, [r1, #8]
 800a86e:	429e      	cmp	r6, r3
 800a870:	4682      	mov	sl, r0
 800a872:	460c      	mov	r4, r1
 800a874:	4690      	mov	r8, r2
 800a876:	461f      	mov	r7, r3
 800a878:	d838      	bhi.n	800a8ec <__ssputs_r+0x84>
 800a87a:	898a      	ldrh	r2, [r1, #12]
 800a87c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a880:	d032      	beq.n	800a8e8 <__ssputs_r+0x80>
 800a882:	6825      	ldr	r5, [r4, #0]
 800a884:	6909      	ldr	r1, [r1, #16]
 800a886:	eba5 0901 	sub.w	r9, r5, r1
 800a88a:	6965      	ldr	r5, [r4, #20]
 800a88c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a890:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a894:	3301      	adds	r3, #1
 800a896:	444b      	add	r3, r9
 800a898:	106d      	asrs	r5, r5, #1
 800a89a:	429d      	cmp	r5, r3
 800a89c:	bf38      	it	cc
 800a89e:	461d      	movcc	r5, r3
 800a8a0:	0553      	lsls	r3, r2, #21
 800a8a2:	d531      	bpl.n	800a908 <__ssputs_r+0xa0>
 800a8a4:	4629      	mov	r1, r5
 800a8a6:	f7ff ff35 	bl	800a714 <_malloc_r>
 800a8aa:	4606      	mov	r6, r0
 800a8ac:	b950      	cbnz	r0, 800a8c4 <__ssputs_r+0x5c>
 800a8ae:	230c      	movs	r3, #12
 800a8b0:	f8ca 3000 	str.w	r3, [sl]
 800a8b4:	89a3      	ldrh	r3, [r4, #12]
 800a8b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8ba:	81a3      	strh	r3, [r4, #12]
 800a8bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8c4:	6921      	ldr	r1, [r4, #16]
 800a8c6:	464a      	mov	r2, r9
 800a8c8:	f000 fac0 	bl	800ae4c <memcpy>
 800a8cc:	89a3      	ldrh	r3, [r4, #12]
 800a8ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a8d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8d6:	81a3      	strh	r3, [r4, #12]
 800a8d8:	6126      	str	r6, [r4, #16]
 800a8da:	6165      	str	r5, [r4, #20]
 800a8dc:	444e      	add	r6, r9
 800a8de:	eba5 0509 	sub.w	r5, r5, r9
 800a8e2:	6026      	str	r6, [r4, #0]
 800a8e4:	60a5      	str	r5, [r4, #8]
 800a8e6:	463e      	mov	r6, r7
 800a8e8:	42be      	cmp	r6, r7
 800a8ea:	d900      	bls.n	800a8ee <__ssputs_r+0x86>
 800a8ec:	463e      	mov	r6, r7
 800a8ee:	4632      	mov	r2, r6
 800a8f0:	6820      	ldr	r0, [r4, #0]
 800a8f2:	4641      	mov	r1, r8
 800a8f4:	f000 fab8 	bl	800ae68 <memmove>
 800a8f8:	68a3      	ldr	r3, [r4, #8]
 800a8fa:	6822      	ldr	r2, [r4, #0]
 800a8fc:	1b9b      	subs	r3, r3, r6
 800a8fe:	4432      	add	r2, r6
 800a900:	60a3      	str	r3, [r4, #8]
 800a902:	6022      	str	r2, [r4, #0]
 800a904:	2000      	movs	r0, #0
 800a906:	e7db      	b.n	800a8c0 <__ssputs_r+0x58>
 800a908:	462a      	mov	r2, r5
 800a90a:	f000 fac7 	bl	800ae9c <_realloc_r>
 800a90e:	4606      	mov	r6, r0
 800a910:	2800      	cmp	r0, #0
 800a912:	d1e1      	bne.n	800a8d8 <__ssputs_r+0x70>
 800a914:	6921      	ldr	r1, [r4, #16]
 800a916:	4650      	mov	r0, sl
 800a918:	f7ff feac 	bl	800a674 <_free_r>
 800a91c:	e7c7      	b.n	800a8ae <__ssputs_r+0x46>
	...

0800a920 <_svfiprintf_r>:
 800a920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a924:	4698      	mov	r8, r3
 800a926:	898b      	ldrh	r3, [r1, #12]
 800a928:	061b      	lsls	r3, r3, #24
 800a92a:	b09d      	sub	sp, #116	; 0x74
 800a92c:	4607      	mov	r7, r0
 800a92e:	460d      	mov	r5, r1
 800a930:	4614      	mov	r4, r2
 800a932:	d50e      	bpl.n	800a952 <_svfiprintf_r+0x32>
 800a934:	690b      	ldr	r3, [r1, #16]
 800a936:	b963      	cbnz	r3, 800a952 <_svfiprintf_r+0x32>
 800a938:	2140      	movs	r1, #64	; 0x40
 800a93a:	f7ff feeb 	bl	800a714 <_malloc_r>
 800a93e:	6028      	str	r0, [r5, #0]
 800a940:	6128      	str	r0, [r5, #16]
 800a942:	b920      	cbnz	r0, 800a94e <_svfiprintf_r+0x2e>
 800a944:	230c      	movs	r3, #12
 800a946:	603b      	str	r3, [r7, #0]
 800a948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a94c:	e0d1      	b.n	800aaf2 <_svfiprintf_r+0x1d2>
 800a94e:	2340      	movs	r3, #64	; 0x40
 800a950:	616b      	str	r3, [r5, #20]
 800a952:	2300      	movs	r3, #0
 800a954:	9309      	str	r3, [sp, #36]	; 0x24
 800a956:	2320      	movs	r3, #32
 800a958:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a95c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a960:	2330      	movs	r3, #48	; 0x30
 800a962:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ab0c <_svfiprintf_r+0x1ec>
 800a966:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a96a:	f04f 0901 	mov.w	r9, #1
 800a96e:	4623      	mov	r3, r4
 800a970:	469a      	mov	sl, r3
 800a972:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a976:	b10a      	cbz	r2, 800a97c <_svfiprintf_r+0x5c>
 800a978:	2a25      	cmp	r2, #37	; 0x25
 800a97a:	d1f9      	bne.n	800a970 <_svfiprintf_r+0x50>
 800a97c:	ebba 0b04 	subs.w	fp, sl, r4
 800a980:	d00b      	beq.n	800a99a <_svfiprintf_r+0x7a>
 800a982:	465b      	mov	r3, fp
 800a984:	4622      	mov	r2, r4
 800a986:	4629      	mov	r1, r5
 800a988:	4638      	mov	r0, r7
 800a98a:	f7ff ff6d 	bl	800a868 <__ssputs_r>
 800a98e:	3001      	adds	r0, #1
 800a990:	f000 80aa 	beq.w	800aae8 <_svfiprintf_r+0x1c8>
 800a994:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a996:	445a      	add	r2, fp
 800a998:	9209      	str	r2, [sp, #36]	; 0x24
 800a99a:	f89a 3000 	ldrb.w	r3, [sl]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	f000 80a2 	beq.w	800aae8 <_svfiprintf_r+0x1c8>
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a9aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9ae:	f10a 0a01 	add.w	sl, sl, #1
 800a9b2:	9304      	str	r3, [sp, #16]
 800a9b4:	9307      	str	r3, [sp, #28]
 800a9b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9ba:	931a      	str	r3, [sp, #104]	; 0x68
 800a9bc:	4654      	mov	r4, sl
 800a9be:	2205      	movs	r2, #5
 800a9c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9c4:	4851      	ldr	r0, [pc, #324]	; (800ab0c <_svfiprintf_r+0x1ec>)
 800a9c6:	f7f5 fc03 	bl	80001d0 <memchr>
 800a9ca:	9a04      	ldr	r2, [sp, #16]
 800a9cc:	b9d8      	cbnz	r0, 800aa06 <_svfiprintf_r+0xe6>
 800a9ce:	06d0      	lsls	r0, r2, #27
 800a9d0:	bf44      	itt	mi
 800a9d2:	2320      	movmi	r3, #32
 800a9d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9d8:	0711      	lsls	r1, r2, #28
 800a9da:	bf44      	itt	mi
 800a9dc:	232b      	movmi	r3, #43	; 0x2b
 800a9de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a9e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a9e8:	d015      	beq.n	800aa16 <_svfiprintf_r+0xf6>
 800a9ea:	9a07      	ldr	r2, [sp, #28]
 800a9ec:	4654      	mov	r4, sl
 800a9ee:	2000      	movs	r0, #0
 800a9f0:	f04f 0c0a 	mov.w	ip, #10
 800a9f4:	4621      	mov	r1, r4
 800a9f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9fa:	3b30      	subs	r3, #48	; 0x30
 800a9fc:	2b09      	cmp	r3, #9
 800a9fe:	d94e      	bls.n	800aa9e <_svfiprintf_r+0x17e>
 800aa00:	b1b0      	cbz	r0, 800aa30 <_svfiprintf_r+0x110>
 800aa02:	9207      	str	r2, [sp, #28]
 800aa04:	e014      	b.n	800aa30 <_svfiprintf_r+0x110>
 800aa06:	eba0 0308 	sub.w	r3, r0, r8
 800aa0a:	fa09 f303 	lsl.w	r3, r9, r3
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	9304      	str	r3, [sp, #16]
 800aa12:	46a2      	mov	sl, r4
 800aa14:	e7d2      	b.n	800a9bc <_svfiprintf_r+0x9c>
 800aa16:	9b03      	ldr	r3, [sp, #12]
 800aa18:	1d19      	adds	r1, r3, #4
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	9103      	str	r1, [sp, #12]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	bfbb      	ittet	lt
 800aa22:	425b      	neglt	r3, r3
 800aa24:	f042 0202 	orrlt.w	r2, r2, #2
 800aa28:	9307      	strge	r3, [sp, #28]
 800aa2a:	9307      	strlt	r3, [sp, #28]
 800aa2c:	bfb8      	it	lt
 800aa2e:	9204      	strlt	r2, [sp, #16]
 800aa30:	7823      	ldrb	r3, [r4, #0]
 800aa32:	2b2e      	cmp	r3, #46	; 0x2e
 800aa34:	d10c      	bne.n	800aa50 <_svfiprintf_r+0x130>
 800aa36:	7863      	ldrb	r3, [r4, #1]
 800aa38:	2b2a      	cmp	r3, #42	; 0x2a
 800aa3a:	d135      	bne.n	800aaa8 <_svfiprintf_r+0x188>
 800aa3c:	9b03      	ldr	r3, [sp, #12]
 800aa3e:	1d1a      	adds	r2, r3, #4
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	9203      	str	r2, [sp, #12]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	bfb8      	it	lt
 800aa48:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800aa4c:	3402      	adds	r4, #2
 800aa4e:	9305      	str	r3, [sp, #20]
 800aa50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ab1c <_svfiprintf_r+0x1fc>
 800aa54:	7821      	ldrb	r1, [r4, #0]
 800aa56:	2203      	movs	r2, #3
 800aa58:	4650      	mov	r0, sl
 800aa5a:	f7f5 fbb9 	bl	80001d0 <memchr>
 800aa5e:	b140      	cbz	r0, 800aa72 <_svfiprintf_r+0x152>
 800aa60:	2340      	movs	r3, #64	; 0x40
 800aa62:	eba0 000a 	sub.w	r0, r0, sl
 800aa66:	fa03 f000 	lsl.w	r0, r3, r0
 800aa6a:	9b04      	ldr	r3, [sp, #16]
 800aa6c:	4303      	orrs	r3, r0
 800aa6e:	3401      	adds	r4, #1
 800aa70:	9304      	str	r3, [sp, #16]
 800aa72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa76:	4826      	ldr	r0, [pc, #152]	; (800ab10 <_svfiprintf_r+0x1f0>)
 800aa78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa7c:	2206      	movs	r2, #6
 800aa7e:	f7f5 fba7 	bl	80001d0 <memchr>
 800aa82:	2800      	cmp	r0, #0
 800aa84:	d038      	beq.n	800aaf8 <_svfiprintf_r+0x1d8>
 800aa86:	4b23      	ldr	r3, [pc, #140]	; (800ab14 <_svfiprintf_r+0x1f4>)
 800aa88:	bb1b      	cbnz	r3, 800aad2 <_svfiprintf_r+0x1b2>
 800aa8a:	9b03      	ldr	r3, [sp, #12]
 800aa8c:	3307      	adds	r3, #7
 800aa8e:	f023 0307 	bic.w	r3, r3, #7
 800aa92:	3308      	adds	r3, #8
 800aa94:	9303      	str	r3, [sp, #12]
 800aa96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa98:	4433      	add	r3, r6
 800aa9a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa9c:	e767      	b.n	800a96e <_svfiprintf_r+0x4e>
 800aa9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800aaa2:	460c      	mov	r4, r1
 800aaa4:	2001      	movs	r0, #1
 800aaa6:	e7a5      	b.n	800a9f4 <_svfiprintf_r+0xd4>
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	3401      	adds	r4, #1
 800aaac:	9305      	str	r3, [sp, #20]
 800aaae:	4619      	mov	r1, r3
 800aab0:	f04f 0c0a 	mov.w	ip, #10
 800aab4:	4620      	mov	r0, r4
 800aab6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaba:	3a30      	subs	r2, #48	; 0x30
 800aabc:	2a09      	cmp	r2, #9
 800aabe:	d903      	bls.n	800aac8 <_svfiprintf_r+0x1a8>
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d0c5      	beq.n	800aa50 <_svfiprintf_r+0x130>
 800aac4:	9105      	str	r1, [sp, #20]
 800aac6:	e7c3      	b.n	800aa50 <_svfiprintf_r+0x130>
 800aac8:	fb0c 2101 	mla	r1, ip, r1, r2
 800aacc:	4604      	mov	r4, r0
 800aace:	2301      	movs	r3, #1
 800aad0:	e7f0      	b.n	800aab4 <_svfiprintf_r+0x194>
 800aad2:	ab03      	add	r3, sp, #12
 800aad4:	9300      	str	r3, [sp, #0]
 800aad6:	462a      	mov	r2, r5
 800aad8:	4b0f      	ldr	r3, [pc, #60]	; (800ab18 <_svfiprintf_r+0x1f8>)
 800aada:	a904      	add	r1, sp, #16
 800aadc:	4638      	mov	r0, r7
 800aade:	f3af 8000 	nop.w
 800aae2:	1c42      	adds	r2, r0, #1
 800aae4:	4606      	mov	r6, r0
 800aae6:	d1d6      	bne.n	800aa96 <_svfiprintf_r+0x176>
 800aae8:	89ab      	ldrh	r3, [r5, #12]
 800aaea:	065b      	lsls	r3, r3, #25
 800aaec:	f53f af2c 	bmi.w	800a948 <_svfiprintf_r+0x28>
 800aaf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aaf2:	b01d      	add	sp, #116	; 0x74
 800aaf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf8:	ab03      	add	r3, sp, #12
 800aafa:	9300      	str	r3, [sp, #0]
 800aafc:	462a      	mov	r2, r5
 800aafe:	4b06      	ldr	r3, [pc, #24]	; (800ab18 <_svfiprintf_r+0x1f8>)
 800ab00:	a904      	add	r1, sp, #16
 800ab02:	4638      	mov	r0, r7
 800ab04:	f000 f87a 	bl	800abfc <_printf_i>
 800ab08:	e7eb      	b.n	800aae2 <_svfiprintf_r+0x1c2>
 800ab0a:	bf00      	nop
 800ab0c:	0800b188 	.word	0x0800b188
 800ab10:	0800b192 	.word	0x0800b192
 800ab14:	00000000 	.word	0x00000000
 800ab18:	0800a869 	.word	0x0800a869
 800ab1c:	0800b18e 	.word	0x0800b18e

0800ab20 <_printf_common>:
 800ab20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab24:	4616      	mov	r6, r2
 800ab26:	4699      	mov	r9, r3
 800ab28:	688a      	ldr	r2, [r1, #8]
 800ab2a:	690b      	ldr	r3, [r1, #16]
 800ab2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab30:	4293      	cmp	r3, r2
 800ab32:	bfb8      	it	lt
 800ab34:	4613      	movlt	r3, r2
 800ab36:	6033      	str	r3, [r6, #0]
 800ab38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab3c:	4607      	mov	r7, r0
 800ab3e:	460c      	mov	r4, r1
 800ab40:	b10a      	cbz	r2, 800ab46 <_printf_common+0x26>
 800ab42:	3301      	adds	r3, #1
 800ab44:	6033      	str	r3, [r6, #0]
 800ab46:	6823      	ldr	r3, [r4, #0]
 800ab48:	0699      	lsls	r1, r3, #26
 800ab4a:	bf42      	ittt	mi
 800ab4c:	6833      	ldrmi	r3, [r6, #0]
 800ab4e:	3302      	addmi	r3, #2
 800ab50:	6033      	strmi	r3, [r6, #0]
 800ab52:	6825      	ldr	r5, [r4, #0]
 800ab54:	f015 0506 	ands.w	r5, r5, #6
 800ab58:	d106      	bne.n	800ab68 <_printf_common+0x48>
 800ab5a:	f104 0a19 	add.w	sl, r4, #25
 800ab5e:	68e3      	ldr	r3, [r4, #12]
 800ab60:	6832      	ldr	r2, [r6, #0]
 800ab62:	1a9b      	subs	r3, r3, r2
 800ab64:	42ab      	cmp	r3, r5
 800ab66:	dc26      	bgt.n	800abb6 <_printf_common+0x96>
 800ab68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab6c:	1e13      	subs	r3, r2, #0
 800ab6e:	6822      	ldr	r2, [r4, #0]
 800ab70:	bf18      	it	ne
 800ab72:	2301      	movne	r3, #1
 800ab74:	0692      	lsls	r2, r2, #26
 800ab76:	d42b      	bmi.n	800abd0 <_printf_common+0xb0>
 800ab78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab7c:	4649      	mov	r1, r9
 800ab7e:	4638      	mov	r0, r7
 800ab80:	47c0      	blx	r8
 800ab82:	3001      	adds	r0, #1
 800ab84:	d01e      	beq.n	800abc4 <_printf_common+0xa4>
 800ab86:	6823      	ldr	r3, [r4, #0]
 800ab88:	68e5      	ldr	r5, [r4, #12]
 800ab8a:	6832      	ldr	r2, [r6, #0]
 800ab8c:	f003 0306 	and.w	r3, r3, #6
 800ab90:	2b04      	cmp	r3, #4
 800ab92:	bf08      	it	eq
 800ab94:	1aad      	subeq	r5, r5, r2
 800ab96:	68a3      	ldr	r3, [r4, #8]
 800ab98:	6922      	ldr	r2, [r4, #16]
 800ab9a:	bf0c      	ite	eq
 800ab9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aba0:	2500      	movne	r5, #0
 800aba2:	4293      	cmp	r3, r2
 800aba4:	bfc4      	itt	gt
 800aba6:	1a9b      	subgt	r3, r3, r2
 800aba8:	18ed      	addgt	r5, r5, r3
 800abaa:	2600      	movs	r6, #0
 800abac:	341a      	adds	r4, #26
 800abae:	42b5      	cmp	r5, r6
 800abb0:	d11a      	bne.n	800abe8 <_printf_common+0xc8>
 800abb2:	2000      	movs	r0, #0
 800abb4:	e008      	b.n	800abc8 <_printf_common+0xa8>
 800abb6:	2301      	movs	r3, #1
 800abb8:	4652      	mov	r2, sl
 800abba:	4649      	mov	r1, r9
 800abbc:	4638      	mov	r0, r7
 800abbe:	47c0      	blx	r8
 800abc0:	3001      	adds	r0, #1
 800abc2:	d103      	bne.n	800abcc <_printf_common+0xac>
 800abc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abcc:	3501      	adds	r5, #1
 800abce:	e7c6      	b.n	800ab5e <_printf_common+0x3e>
 800abd0:	18e1      	adds	r1, r4, r3
 800abd2:	1c5a      	adds	r2, r3, #1
 800abd4:	2030      	movs	r0, #48	; 0x30
 800abd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800abda:	4422      	add	r2, r4
 800abdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800abe0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800abe4:	3302      	adds	r3, #2
 800abe6:	e7c7      	b.n	800ab78 <_printf_common+0x58>
 800abe8:	2301      	movs	r3, #1
 800abea:	4622      	mov	r2, r4
 800abec:	4649      	mov	r1, r9
 800abee:	4638      	mov	r0, r7
 800abf0:	47c0      	blx	r8
 800abf2:	3001      	adds	r0, #1
 800abf4:	d0e6      	beq.n	800abc4 <_printf_common+0xa4>
 800abf6:	3601      	adds	r6, #1
 800abf8:	e7d9      	b.n	800abae <_printf_common+0x8e>
	...

0800abfc <_printf_i>:
 800abfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac00:	460c      	mov	r4, r1
 800ac02:	4691      	mov	r9, r2
 800ac04:	7e27      	ldrb	r7, [r4, #24]
 800ac06:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ac08:	2f78      	cmp	r7, #120	; 0x78
 800ac0a:	4680      	mov	r8, r0
 800ac0c:	469a      	mov	sl, r3
 800ac0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac12:	d807      	bhi.n	800ac24 <_printf_i+0x28>
 800ac14:	2f62      	cmp	r7, #98	; 0x62
 800ac16:	d80a      	bhi.n	800ac2e <_printf_i+0x32>
 800ac18:	2f00      	cmp	r7, #0
 800ac1a:	f000 80d8 	beq.w	800adce <_printf_i+0x1d2>
 800ac1e:	2f58      	cmp	r7, #88	; 0x58
 800ac20:	f000 80a3 	beq.w	800ad6a <_printf_i+0x16e>
 800ac24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ac28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac2c:	e03a      	b.n	800aca4 <_printf_i+0xa8>
 800ac2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac32:	2b15      	cmp	r3, #21
 800ac34:	d8f6      	bhi.n	800ac24 <_printf_i+0x28>
 800ac36:	a001      	add	r0, pc, #4	; (adr r0, 800ac3c <_printf_i+0x40>)
 800ac38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ac3c:	0800ac95 	.word	0x0800ac95
 800ac40:	0800aca9 	.word	0x0800aca9
 800ac44:	0800ac25 	.word	0x0800ac25
 800ac48:	0800ac25 	.word	0x0800ac25
 800ac4c:	0800ac25 	.word	0x0800ac25
 800ac50:	0800ac25 	.word	0x0800ac25
 800ac54:	0800aca9 	.word	0x0800aca9
 800ac58:	0800ac25 	.word	0x0800ac25
 800ac5c:	0800ac25 	.word	0x0800ac25
 800ac60:	0800ac25 	.word	0x0800ac25
 800ac64:	0800ac25 	.word	0x0800ac25
 800ac68:	0800adb5 	.word	0x0800adb5
 800ac6c:	0800acd9 	.word	0x0800acd9
 800ac70:	0800ad97 	.word	0x0800ad97
 800ac74:	0800ac25 	.word	0x0800ac25
 800ac78:	0800ac25 	.word	0x0800ac25
 800ac7c:	0800add7 	.word	0x0800add7
 800ac80:	0800ac25 	.word	0x0800ac25
 800ac84:	0800acd9 	.word	0x0800acd9
 800ac88:	0800ac25 	.word	0x0800ac25
 800ac8c:	0800ac25 	.word	0x0800ac25
 800ac90:	0800ad9f 	.word	0x0800ad9f
 800ac94:	680b      	ldr	r3, [r1, #0]
 800ac96:	1d1a      	adds	r2, r3, #4
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	600a      	str	r2, [r1, #0]
 800ac9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aca4:	2301      	movs	r3, #1
 800aca6:	e0a3      	b.n	800adf0 <_printf_i+0x1f4>
 800aca8:	6825      	ldr	r5, [r4, #0]
 800acaa:	6808      	ldr	r0, [r1, #0]
 800acac:	062e      	lsls	r6, r5, #24
 800acae:	f100 0304 	add.w	r3, r0, #4
 800acb2:	d50a      	bpl.n	800acca <_printf_i+0xce>
 800acb4:	6805      	ldr	r5, [r0, #0]
 800acb6:	600b      	str	r3, [r1, #0]
 800acb8:	2d00      	cmp	r5, #0
 800acba:	da03      	bge.n	800acc4 <_printf_i+0xc8>
 800acbc:	232d      	movs	r3, #45	; 0x2d
 800acbe:	426d      	negs	r5, r5
 800acc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acc4:	485e      	ldr	r0, [pc, #376]	; (800ae40 <_printf_i+0x244>)
 800acc6:	230a      	movs	r3, #10
 800acc8:	e019      	b.n	800acfe <_printf_i+0x102>
 800acca:	f015 0f40 	tst.w	r5, #64	; 0x40
 800acce:	6805      	ldr	r5, [r0, #0]
 800acd0:	600b      	str	r3, [r1, #0]
 800acd2:	bf18      	it	ne
 800acd4:	b22d      	sxthne	r5, r5
 800acd6:	e7ef      	b.n	800acb8 <_printf_i+0xbc>
 800acd8:	680b      	ldr	r3, [r1, #0]
 800acda:	6825      	ldr	r5, [r4, #0]
 800acdc:	1d18      	adds	r0, r3, #4
 800acde:	6008      	str	r0, [r1, #0]
 800ace0:	0628      	lsls	r0, r5, #24
 800ace2:	d501      	bpl.n	800ace8 <_printf_i+0xec>
 800ace4:	681d      	ldr	r5, [r3, #0]
 800ace6:	e002      	b.n	800acee <_printf_i+0xf2>
 800ace8:	0669      	lsls	r1, r5, #25
 800acea:	d5fb      	bpl.n	800ace4 <_printf_i+0xe8>
 800acec:	881d      	ldrh	r5, [r3, #0]
 800acee:	4854      	ldr	r0, [pc, #336]	; (800ae40 <_printf_i+0x244>)
 800acf0:	2f6f      	cmp	r7, #111	; 0x6f
 800acf2:	bf0c      	ite	eq
 800acf4:	2308      	moveq	r3, #8
 800acf6:	230a      	movne	r3, #10
 800acf8:	2100      	movs	r1, #0
 800acfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800acfe:	6866      	ldr	r6, [r4, #4]
 800ad00:	60a6      	str	r6, [r4, #8]
 800ad02:	2e00      	cmp	r6, #0
 800ad04:	bfa2      	ittt	ge
 800ad06:	6821      	ldrge	r1, [r4, #0]
 800ad08:	f021 0104 	bicge.w	r1, r1, #4
 800ad0c:	6021      	strge	r1, [r4, #0]
 800ad0e:	b90d      	cbnz	r5, 800ad14 <_printf_i+0x118>
 800ad10:	2e00      	cmp	r6, #0
 800ad12:	d04d      	beq.n	800adb0 <_printf_i+0x1b4>
 800ad14:	4616      	mov	r6, r2
 800ad16:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad1a:	fb03 5711 	mls	r7, r3, r1, r5
 800ad1e:	5dc7      	ldrb	r7, [r0, r7]
 800ad20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad24:	462f      	mov	r7, r5
 800ad26:	42bb      	cmp	r3, r7
 800ad28:	460d      	mov	r5, r1
 800ad2a:	d9f4      	bls.n	800ad16 <_printf_i+0x11a>
 800ad2c:	2b08      	cmp	r3, #8
 800ad2e:	d10b      	bne.n	800ad48 <_printf_i+0x14c>
 800ad30:	6823      	ldr	r3, [r4, #0]
 800ad32:	07df      	lsls	r7, r3, #31
 800ad34:	d508      	bpl.n	800ad48 <_printf_i+0x14c>
 800ad36:	6923      	ldr	r3, [r4, #16]
 800ad38:	6861      	ldr	r1, [r4, #4]
 800ad3a:	4299      	cmp	r1, r3
 800ad3c:	bfde      	ittt	le
 800ad3e:	2330      	movle	r3, #48	; 0x30
 800ad40:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad44:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800ad48:	1b92      	subs	r2, r2, r6
 800ad4a:	6122      	str	r2, [r4, #16]
 800ad4c:	f8cd a000 	str.w	sl, [sp]
 800ad50:	464b      	mov	r3, r9
 800ad52:	aa03      	add	r2, sp, #12
 800ad54:	4621      	mov	r1, r4
 800ad56:	4640      	mov	r0, r8
 800ad58:	f7ff fee2 	bl	800ab20 <_printf_common>
 800ad5c:	3001      	adds	r0, #1
 800ad5e:	d14c      	bne.n	800adfa <_printf_i+0x1fe>
 800ad60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad64:	b004      	add	sp, #16
 800ad66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad6a:	4835      	ldr	r0, [pc, #212]	; (800ae40 <_printf_i+0x244>)
 800ad6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ad70:	6823      	ldr	r3, [r4, #0]
 800ad72:	680e      	ldr	r6, [r1, #0]
 800ad74:	061f      	lsls	r7, r3, #24
 800ad76:	f856 5b04 	ldr.w	r5, [r6], #4
 800ad7a:	600e      	str	r6, [r1, #0]
 800ad7c:	d514      	bpl.n	800ada8 <_printf_i+0x1ac>
 800ad7e:	07d9      	lsls	r1, r3, #31
 800ad80:	bf44      	itt	mi
 800ad82:	f043 0320 	orrmi.w	r3, r3, #32
 800ad86:	6023      	strmi	r3, [r4, #0]
 800ad88:	b91d      	cbnz	r5, 800ad92 <_printf_i+0x196>
 800ad8a:	6823      	ldr	r3, [r4, #0]
 800ad8c:	f023 0320 	bic.w	r3, r3, #32
 800ad90:	6023      	str	r3, [r4, #0]
 800ad92:	2310      	movs	r3, #16
 800ad94:	e7b0      	b.n	800acf8 <_printf_i+0xfc>
 800ad96:	6823      	ldr	r3, [r4, #0]
 800ad98:	f043 0320 	orr.w	r3, r3, #32
 800ad9c:	6023      	str	r3, [r4, #0]
 800ad9e:	2378      	movs	r3, #120	; 0x78
 800ada0:	4828      	ldr	r0, [pc, #160]	; (800ae44 <_printf_i+0x248>)
 800ada2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ada6:	e7e3      	b.n	800ad70 <_printf_i+0x174>
 800ada8:	065e      	lsls	r6, r3, #25
 800adaa:	bf48      	it	mi
 800adac:	b2ad      	uxthmi	r5, r5
 800adae:	e7e6      	b.n	800ad7e <_printf_i+0x182>
 800adb0:	4616      	mov	r6, r2
 800adb2:	e7bb      	b.n	800ad2c <_printf_i+0x130>
 800adb4:	680b      	ldr	r3, [r1, #0]
 800adb6:	6826      	ldr	r6, [r4, #0]
 800adb8:	6960      	ldr	r0, [r4, #20]
 800adba:	1d1d      	adds	r5, r3, #4
 800adbc:	600d      	str	r5, [r1, #0]
 800adbe:	0635      	lsls	r5, r6, #24
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	d501      	bpl.n	800adc8 <_printf_i+0x1cc>
 800adc4:	6018      	str	r0, [r3, #0]
 800adc6:	e002      	b.n	800adce <_printf_i+0x1d2>
 800adc8:	0671      	lsls	r1, r6, #25
 800adca:	d5fb      	bpl.n	800adc4 <_printf_i+0x1c8>
 800adcc:	8018      	strh	r0, [r3, #0]
 800adce:	2300      	movs	r3, #0
 800add0:	6123      	str	r3, [r4, #16]
 800add2:	4616      	mov	r6, r2
 800add4:	e7ba      	b.n	800ad4c <_printf_i+0x150>
 800add6:	680b      	ldr	r3, [r1, #0]
 800add8:	1d1a      	adds	r2, r3, #4
 800adda:	600a      	str	r2, [r1, #0]
 800addc:	681e      	ldr	r6, [r3, #0]
 800adde:	6862      	ldr	r2, [r4, #4]
 800ade0:	2100      	movs	r1, #0
 800ade2:	4630      	mov	r0, r6
 800ade4:	f7f5 f9f4 	bl	80001d0 <memchr>
 800ade8:	b108      	cbz	r0, 800adee <_printf_i+0x1f2>
 800adea:	1b80      	subs	r0, r0, r6
 800adec:	6060      	str	r0, [r4, #4]
 800adee:	6863      	ldr	r3, [r4, #4]
 800adf0:	6123      	str	r3, [r4, #16]
 800adf2:	2300      	movs	r3, #0
 800adf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adf8:	e7a8      	b.n	800ad4c <_printf_i+0x150>
 800adfa:	6923      	ldr	r3, [r4, #16]
 800adfc:	4632      	mov	r2, r6
 800adfe:	4649      	mov	r1, r9
 800ae00:	4640      	mov	r0, r8
 800ae02:	47d0      	blx	sl
 800ae04:	3001      	adds	r0, #1
 800ae06:	d0ab      	beq.n	800ad60 <_printf_i+0x164>
 800ae08:	6823      	ldr	r3, [r4, #0]
 800ae0a:	079b      	lsls	r3, r3, #30
 800ae0c:	d413      	bmi.n	800ae36 <_printf_i+0x23a>
 800ae0e:	68e0      	ldr	r0, [r4, #12]
 800ae10:	9b03      	ldr	r3, [sp, #12]
 800ae12:	4298      	cmp	r0, r3
 800ae14:	bfb8      	it	lt
 800ae16:	4618      	movlt	r0, r3
 800ae18:	e7a4      	b.n	800ad64 <_printf_i+0x168>
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	4632      	mov	r2, r6
 800ae1e:	4649      	mov	r1, r9
 800ae20:	4640      	mov	r0, r8
 800ae22:	47d0      	blx	sl
 800ae24:	3001      	adds	r0, #1
 800ae26:	d09b      	beq.n	800ad60 <_printf_i+0x164>
 800ae28:	3501      	adds	r5, #1
 800ae2a:	68e3      	ldr	r3, [r4, #12]
 800ae2c:	9903      	ldr	r1, [sp, #12]
 800ae2e:	1a5b      	subs	r3, r3, r1
 800ae30:	42ab      	cmp	r3, r5
 800ae32:	dcf2      	bgt.n	800ae1a <_printf_i+0x21e>
 800ae34:	e7eb      	b.n	800ae0e <_printf_i+0x212>
 800ae36:	2500      	movs	r5, #0
 800ae38:	f104 0619 	add.w	r6, r4, #25
 800ae3c:	e7f5      	b.n	800ae2a <_printf_i+0x22e>
 800ae3e:	bf00      	nop
 800ae40:	0800b199 	.word	0x0800b199
 800ae44:	0800b1aa 	.word	0x0800b1aa

0800ae48 <__retarget_lock_acquire_recursive>:
 800ae48:	4770      	bx	lr

0800ae4a <__retarget_lock_release_recursive>:
 800ae4a:	4770      	bx	lr

0800ae4c <memcpy>:
 800ae4c:	440a      	add	r2, r1
 800ae4e:	4291      	cmp	r1, r2
 800ae50:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ae54:	d100      	bne.n	800ae58 <memcpy+0xc>
 800ae56:	4770      	bx	lr
 800ae58:	b510      	push	{r4, lr}
 800ae5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae62:	4291      	cmp	r1, r2
 800ae64:	d1f9      	bne.n	800ae5a <memcpy+0xe>
 800ae66:	bd10      	pop	{r4, pc}

0800ae68 <memmove>:
 800ae68:	4288      	cmp	r0, r1
 800ae6a:	b510      	push	{r4, lr}
 800ae6c:	eb01 0402 	add.w	r4, r1, r2
 800ae70:	d902      	bls.n	800ae78 <memmove+0x10>
 800ae72:	4284      	cmp	r4, r0
 800ae74:	4623      	mov	r3, r4
 800ae76:	d807      	bhi.n	800ae88 <memmove+0x20>
 800ae78:	1e43      	subs	r3, r0, #1
 800ae7a:	42a1      	cmp	r1, r4
 800ae7c:	d008      	beq.n	800ae90 <memmove+0x28>
 800ae7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae86:	e7f8      	b.n	800ae7a <memmove+0x12>
 800ae88:	4402      	add	r2, r0
 800ae8a:	4601      	mov	r1, r0
 800ae8c:	428a      	cmp	r2, r1
 800ae8e:	d100      	bne.n	800ae92 <memmove+0x2a>
 800ae90:	bd10      	pop	{r4, pc}
 800ae92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae9a:	e7f7      	b.n	800ae8c <memmove+0x24>

0800ae9c <_realloc_r>:
 800ae9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae9e:	4607      	mov	r7, r0
 800aea0:	4614      	mov	r4, r2
 800aea2:	460e      	mov	r6, r1
 800aea4:	b921      	cbnz	r1, 800aeb0 <_realloc_r+0x14>
 800aea6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aeaa:	4611      	mov	r1, r2
 800aeac:	f7ff bc32 	b.w	800a714 <_malloc_r>
 800aeb0:	b922      	cbnz	r2, 800aebc <_realloc_r+0x20>
 800aeb2:	f7ff fbdf 	bl	800a674 <_free_r>
 800aeb6:	4625      	mov	r5, r4
 800aeb8:	4628      	mov	r0, r5
 800aeba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aebc:	f000 f814 	bl	800aee8 <_malloc_usable_size_r>
 800aec0:	42a0      	cmp	r0, r4
 800aec2:	d20f      	bcs.n	800aee4 <_realloc_r+0x48>
 800aec4:	4621      	mov	r1, r4
 800aec6:	4638      	mov	r0, r7
 800aec8:	f7ff fc24 	bl	800a714 <_malloc_r>
 800aecc:	4605      	mov	r5, r0
 800aece:	2800      	cmp	r0, #0
 800aed0:	d0f2      	beq.n	800aeb8 <_realloc_r+0x1c>
 800aed2:	4631      	mov	r1, r6
 800aed4:	4622      	mov	r2, r4
 800aed6:	f7ff ffb9 	bl	800ae4c <memcpy>
 800aeda:	4631      	mov	r1, r6
 800aedc:	4638      	mov	r0, r7
 800aede:	f7ff fbc9 	bl	800a674 <_free_r>
 800aee2:	e7e9      	b.n	800aeb8 <_realloc_r+0x1c>
 800aee4:	4635      	mov	r5, r6
 800aee6:	e7e7      	b.n	800aeb8 <_realloc_r+0x1c>

0800aee8 <_malloc_usable_size_r>:
 800aee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aeec:	1f18      	subs	r0, r3, #4
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	bfbc      	itt	lt
 800aef2:	580b      	ldrlt	r3, [r1, r0]
 800aef4:	18c0      	addlt	r0, r0, r3
 800aef6:	4770      	bx	lr

0800aef8 <_init>:
 800aef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aefa:	bf00      	nop
 800aefc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aefe:	bc08      	pop	{r3}
 800af00:	469e      	mov	lr, r3
 800af02:	4770      	bx	lr

0800af04 <_fini>:
 800af04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af06:	bf00      	nop
 800af08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af0a:	bc08      	pop	{r3}
 800af0c:	469e      	mov	lr, r3
 800af0e:	4770      	bx	lr
