
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cce4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800ce6c  0800ce6c  0001ce6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3d0  0800d3d0  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d3d0  0800d3d0  0001d3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3d8  0800d3d8  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3d8  0800d3d8  0001d3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d3dc  0800d3dc  0001d3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800d3e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a6c  200001d8  0800d5b8  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000c44  0800d5b8  00020c44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000265c8  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fda  00000000  00000000  000467d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a80  00000000  00000000  0004b7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001890  00000000  00000000  0004d230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025db2  00000000  00000000  0004eac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000249b5  00000000  00000000  00074872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d796e  00000000  00000000  00099227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00170b95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007170  00000000  00000000  00170be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001d8 	.word	0x200001d8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ce54 	.word	0x0800ce54

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001dc 	.word	0x200001dc
 80001c4:	0800ce54 	.word	0x0800ce54

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <read_digits>:
#include <stdbool.h>


//----------------------------------------------------------------------------------------
void read_digits(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	char digith = 0;;
 80004c6:	2300      	movs	r3, #0
 80004c8:	71fb      	strb	r3, [r7, #7]

	digith = read_one_digit_from_keyboard();
 80004ca:	f000 f853 	bl	8000574 <read_one_digit_from_keyboard>
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
	if(digith == '#')						// Clean buffer
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2b23      	cmp	r3, #35	; 0x23
 80004d6:	d10a      	bne.n	80004ee <read_digits+0x2e>
	{
		memset(keyboard.keyboard_digits_buffer, '\0', sizeof(keyboard.keyboard_digits_buffer));
 80004d8:	221e      	movs	r2, #30
 80004da:	2100      	movs	r1, #0
 80004dc:	4824      	ldr	r0, [pc, #144]	; (8000570 <read_digits+0xb0>)
 80004de:	f00c fbd5 	bl	800cc8c <memset>
		keyboard.read_digits_position = 0;
 80004e2:	4b23      	ldr	r3, [pc, #140]	; (8000570 <read_digits+0xb0>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	625a      	str	r2, [r3, #36]	; 0x24
		keyboard.read_one_digit_status = false;
 80004e8:	4b21      	ldr	r3, [pc, #132]	; (8000570 <read_digits+0xb0>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	77da      	strb	r2, [r3, #31]
	}
	if(digith == '*')						// If pressed enter
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	2b2a      	cmp	r3, #42	; 0x2a
 80004f2:	d109      	bne.n	8000508 <read_digits+0x48>
	{
		keyboard.all_digits_was_read = true;
 80004f4:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <read_digits+0xb0>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	f883 2020 	strb.w	r2, [r3, #32]
		keyboard.read_one_digit_status = false;
 80004fc:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <read_digits+0xb0>)
 80004fe:	2200      	movs	r2, #0
 8000500:	77da      	strb	r2, [r3, #31]
		keyboard.read_digits_position = 0;
 8000502:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <read_digits+0xb0>)
 8000504:	2200      	movs	r2, #0
 8000506:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if((digith != '\0') && (digith != '#')&& (digith != '*'))
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d028      	beq.n	8000560 <read_digits+0xa0>
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	2b23      	cmp	r3, #35	; 0x23
 8000512:	d025      	beq.n	8000560 <read_digits+0xa0>
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	2b2a      	cmp	r3, #42	; 0x2a
 8000518:	d022      	beq.n	8000560 <read_digits+0xa0>
	{
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 800051a:	4b15      	ldr	r3, [pc, #84]	; (8000570 <read_digits+0xb0>)
 800051c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800051e:	4a14      	ldr	r2, [pc, #80]	; (8000570 <read_digits+0xb0>)
 8000520:	7f92      	ldrb	r2, [r2, #30]
 8000522:	4293      	cmp	r3, r2
 8000524:	dc11      	bgt.n	800054a <read_digits+0x8a>
		{
			keyboard.keyboard_digits_buffer[keyboard.read_digits_position] = digith;
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <read_digits+0xb0>)
 8000528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800052a:	4911      	ldr	r1, [pc, #68]	; (8000570 <read_digits+0xb0>)
 800052c:	79fa      	ldrb	r2, [r7, #7]
 800052e:	54ca      	strb	r2, [r1, r3]
			keyboard.read_digits_position++;
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <read_digits+0xb0>)
 8000532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000534:	3301      	adds	r3, #1
 8000536:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <read_digits+0xb0>)
 8000538:	6253      	str	r3, [r2, #36]	; 0x24
			keyboard.all_digits_was_read = false;
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <read_digits+0xb0>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = true;
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <read_digits+0xb0>)
 8000544:	2201      	movs	r2, #1
 8000546:	77da      	strb	r2, [r3, #31]
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000548:	e00e      	b.n	8000568 <read_digits+0xa8>
		}
		else								// If entered all digits
		{
			keyboard.all_digits_was_read = true;
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <read_digits+0xb0>)
 800054c:	2201      	movs	r2, #1
 800054e:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = false;
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <read_digits+0xb0>)
 8000554:	2200      	movs	r2, #0
 8000556:	77da      	strb	r2, [r3, #31]
			keyboard.read_digits_position = 0;
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <read_digits+0xb0>)
 800055a:	2200      	movs	r2, #0
 800055c:	625a      	str	r2, [r3, #36]	; 0x24
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 800055e:	e003      	b.n	8000568 <read_digits+0xa8>
		}
	}
	else									// If didn't enter any key
	{
		keyboard.read_one_digit_status = false;
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <read_digits+0xb0>)
 8000562:	2200      	movs	r2, #0
 8000564:	77da      	strb	r2, [r3, #31]
	}
}
 8000566:	bf00      	nop
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	2000020c 	.word	0x2000020c

08000574 <read_one_digit_from_keyboard>:

//----------------------------------------------------------------------------------------
char read_one_digit_from_keyboard(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
	char digit = '\0';
 800057a:	2300      	movs	r3, #0
 800057c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000584:	48cf      	ldr	r0, [pc, #828]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000586:	f003 fc7f 	bl	8003e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000590:	48cc      	ldr	r0, [pc, #816]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000592:	f003 fc79 	bl	8003e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 7100 	mov.w	r1, #512	; 0x200
 800059c:	48c9      	ldr	r0, [pc, #804]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800059e:	f003 fc73 	bl	8003e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a8:	48c6      	ldr	r0, [pc, #792]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005aa:	f003 fc6d 	bl	8003e88 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80005ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b2:	48c5      	ldr	r0, [pc, #788]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 80005b4:	f003 fc50 	bl	8003e58 <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d169      	bne.n	8000692 <read_one_digit_from_keyboard+0x11e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005c4:	48bf      	ldr	r0, [pc, #764]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005c6:	f003 fc5f 	bl	8003e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d0:	48bc      	ldr	r0, [pc, #752]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005d2:	f003 fc59 	bl	8003e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005dc:	48b9      	ldr	r0, [pc, #740]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005de:	f003 fc53 	bl	8003e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80005e2:	2201      	movs	r2, #1
 80005e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e8:	48b6      	ldr	r0, [pc, #728]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80005ea:	f003 fc4d 	bl	8003e88 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80005ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f2:	48b5      	ldr	r0, [pc, #724]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 80005f4:	f003 fc30 	bl	8003e58 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d101      	bne.n	8000602 <read_one_digit_from_keyboard+0x8e>
		{
			digit = '1';
 80005fe:	2331      	movs	r3, #49	; 0x31
 8000600:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000608:	48ae      	ldr	r0, [pc, #696]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800060a:	f003 fc3d 	bl	8003e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000614:	48ab      	ldr	r0, [pc, #684]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000616:	f003 fc37 	bl	8003e88 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800061a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800061e:	48aa      	ldr	r0, [pc, #680]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000620:	f003 fc1a 	bl	8003e58 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d101      	bne.n	800062e <read_one_digit_from_keyboard+0xba>
		{
			digit = '4';
 800062a:	2334      	movs	r3, #52	; 0x34
 800062c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000634:	48a3      	ldr	r0, [pc, #652]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000636:	f003 fc27 	bl	8003e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000640:	48a0      	ldr	r0, [pc, #640]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000642:	f003 fc21 	bl	8003e88 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000646:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800064a:	489f      	ldr	r0, [pc, #636]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 800064c:	f003 fc04 	bl	8003e58 <HAL_GPIO_ReadPin>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d101      	bne.n	800065a <read_one_digit_from_keyboard+0xe6>
		{
			digit =  '7';
 8000656:	2337      	movs	r3, #55	; 0x37
 8000658:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000660:	4898      	ldr	r0, [pc, #608]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000662:	f003 fc11 	bl	8003e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066c:	4895      	ldr	r0, [pc, #596]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800066e:	f003 fc0b 	bl	8003e88 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000672:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000676:	4894      	ldr	r0, [pc, #592]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000678:	f003 fbee 	bl	8003e58 <HAL_GPIO_ReadPin>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d101      	bne.n	8000686 <read_one_digit_from_keyboard+0x112>
		{
			digit =  '*';
 8000682:	232a      	movs	r3, #42	; 0x2a
 8000684:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8000686:	2201      	movs	r2, #1
 8000688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068c:	488d      	ldr	r0, [pc, #564]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800068e:	f003 fbfb 	bl	8003e88 <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000698:	488a      	ldr	r0, [pc, #552]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800069a:	f003 fbf5 	bl	8003e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a4:	4887      	ldr	r0, [pc, #540]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006a6:	f003 fbef 	bl	8003e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b0:	4884      	ldr	r0, [pc, #528]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006b2:	f003 fbe9 	bl	8003e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006bc:	4881      	ldr	r0, [pc, #516]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006be:	f003 fbe3 	bl	8003e88 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 80006c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c6:	4880      	ldr	r0, [pc, #512]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 80006c8:	f003 fbc6 	bl	8003e58 <HAL_GPIO_ReadPin>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d169      	bne.n	80007a6 <read_one_digit_from_keyboard+0x232>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d8:	487a      	ldr	r0, [pc, #488]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006da:	f003 fbd5 	bl	8003e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e4:	4877      	ldr	r0, [pc, #476]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006e6:	f003 fbcf 	bl	8003e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f0:	4874      	ldr	r0, [pc, #464]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006f2:	f003 fbc9 	bl	8003e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006fc:	4871      	ldr	r0, [pc, #452]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80006fe:	f003 fbc3 	bl	8003e88 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8000702:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000706:	4870      	ldr	r0, [pc, #448]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000708:	f003 fba6 	bl	8003e58 <HAL_GPIO_ReadPin>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d101      	bne.n	8000716 <read_one_digit_from_keyboard+0x1a2>
		{
			digit =  '2';
 8000712:	2332      	movs	r3, #50	; 0x32
 8000714:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800071c:	4869      	ldr	r0, [pc, #420]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800071e:	f003 fbb3 	bl	8003e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000728:	4866      	ldr	r0, [pc, #408]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800072a:	f003 fbad 	bl	8003e88 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800072e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000732:	4865      	ldr	r0, [pc, #404]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000734:	f003 fb90 	bl	8003e58 <HAL_GPIO_ReadPin>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d101      	bne.n	8000742 <read_one_digit_from_keyboard+0x1ce>
		{
			digit =  '5';
 800073e:	2335      	movs	r3, #53	; 0x35
 8000740:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000748:	485e      	ldr	r0, [pc, #376]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800074a:	f003 fb9d 	bl	8003e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000754:	485b      	ldr	r0, [pc, #364]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000756:	f003 fb97 	bl	8003e88 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800075a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800075e:	485a      	ldr	r0, [pc, #360]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 8000760:	f003 fb7a 	bl	8003e58 <HAL_GPIO_ReadPin>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d101      	bne.n	800076e <read_one_digit_from_keyboard+0x1fa>
		{
			digit = '8';
 800076a:	2338      	movs	r3, #56	; 0x38
 800076c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000774:	4853      	ldr	r0, [pc, #332]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000776:	f003 fb87 	bl	8003e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000780:	4850      	ldr	r0, [pc, #320]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000782:	f003 fb81 	bl	8003e88 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8000786:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800078a:	484f      	ldr	r0, [pc, #316]	; (80008c8 <read_one_digit_from_keyboard+0x354>)
 800078c:	f003 fb64 	bl	8003e58 <HAL_GPIO_ReadPin>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d101      	bne.n	800079a <read_one_digit_from_keyboard+0x226>
		{
			digit = '0';
 8000796:	2330      	movs	r3, #48	; 0x30
 8000798:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a0:	4848      	ldr	r0, [pc, #288]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007a2:	f003 fb71 	bl	8003e88 <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ac:	4845      	ldr	r0, [pc, #276]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007ae:	f003 fb6b 	bl	8003e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b8:	4842      	ldr	r0, [pc, #264]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007ba:	f003 fb65 	bl	8003e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c4:	483f      	ldr	r0, [pc, #252]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007c6:	f003 fb5f 	bl	8003e88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d0:	483c      	ldr	r0, [pc, #240]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007d2:	f003 fb59 	bl	8003e88 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №   // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 80007d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007da:	483c      	ldr	r0, [pc, #240]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 80007dc:	f003 fb3c 	bl	8003e58 <HAL_GPIO_ReadPin>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d169      	bne.n	80008ba <read_one_digit_from_keyboard+0x346>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ec:	4835      	ldr	r0, [pc, #212]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007ee:	f003 fb4b 	bl	8003e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007f8:	4832      	ldr	r0, [pc, #200]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80007fa:	f003 fb45 	bl	8003e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000804:	482f      	ldr	r0, [pc, #188]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000806:	f003 fb3f 	bl	8003e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000810:	482c      	ldr	r0, [pc, #176]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000812:	f003 fb39 	bl	8003e88 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8000816:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800081a:	482c      	ldr	r0, [pc, #176]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 800081c:	f003 fb1c 	bl	8003e58 <HAL_GPIO_ReadPin>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d101      	bne.n	800082a <read_one_digit_from_keyboard+0x2b6>
		{
			digit = '3';
 8000826:	2333      	movs	r3, #51	; 0x33
 8000828:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000830:	4824      	ldr	r0, [pc, #144]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000832:	f003 fb29 	bl	8003e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800083c:	4821      	ldr	r0, [pc, #132]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800083e:	f003 fb23 	bl	8003e88 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8000842:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000846:	4821      	ldr	r0, [pc, #132]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 8000848:	f003 fb06 	bl	8003e58 <HAL_GPIO_ReadPin>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d101      	bne.n	8000856 <read_one_digit_from_keyboard+0x2e2>
		{
			digit = '6';
 8000852:	2336      	movs	r3, #54	; 0x36
 8000854:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000856:	2201      	movs	r2, #1
 8000858:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085c:	4819      	ldr	r0, [pc, #100]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800085e:	f003 fb13 	bl	8003e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000868:	4816      	ldr	r0, [pc, #88]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800086a:	f003 fb0d 	bl	8003e88 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800086e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000872:	4816      	ldr	r0, [pc, #88]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 8000874:	f003 faf0 	bl	8003e58 <HAL_GPIO_ReadPin>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d101      	bne.n	8000882 <read_one_digit_from_keyboard+0x30e>
		{
			digit = '9';
 800087e:	2339      	movs	r3, #57	; 0x39
 8000880:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000888:	480e      	ldr	r0, [pc, #56]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 800088a:	f003 fafd 	bl	8003e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000894:	480b      	ldr	r0, [pc, #44]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 8000896:	f003 faf7 	bl	8003e88 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800089a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800089e:	480b      	ldr	r0, [pc, #44]	; (80008cc <read_one_digit_from_keyboard+0x358>)
 80008a0:	f003 fada 	bl	8003e58 <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d101      	bne.n	80008ae <read_one_digit_from_keyboard+0x33a>
		{
			digit = '#';
 80008aa:	2323      	movs	r3, #35	; 0x23
 80008ac:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b4:	4803      	ldr	r0, [pc, #12]	; (80008c4 <read_one_digit_from_keyboard+0x350>)
 80008b6:	f003 fae7 	bl	8003e88 <HAL_GPIO_WritePin>
	}
	return digit;
 80008ba:	79fb      	ldrb	r3, [r7, #7]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40020c00 	.word	0x40020c00
 80008c8:	40020400 	.word	0x40020400
 80008cc:	40021000 	.word	0x40021000

080008d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d6:	f002 ff7b 	bl	80037d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008da:	f000 f841 	bl	8000960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008de:	f000 faf3 	bl	8000ec8 <MX_GPIO_Init>
  MX_I2S3_Init();
 80008e2:	f000 f927 	bl	8000b34 <MX_I2S3_Init>
  MX_SPI1_Init();
 80008e6:	f000 f969 	bl	8000bbc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80008ea:	f00b fe8d 	bl	800c608 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80008ee:	f000 fa29 	bl	8000d44 <MX_TIM2_Init>
  MX_SPI2_Init();
 80008f2:	f000 f999 	bl	8000c28 <MX_SPI2_Init>
  MX_RNG_Init();
 80008f6:	f000 f94d 	bl	8000b94 <MX_RNG_Init>
  MX_TIM3_Init();
 80008fa:	f000 fa71 	bl	8000de0 <MX_TIM3_Init>
  MX_TIM1_Init();
 80008fe:	f000 f9c9 	bl	8000c94 <MX_TIM1_Init>
  MX_I2C3_Init();
 8000902:	f000 f8e9 	bl	8000ad8 <MX_I2C3_Init>
  MX_I2C2_Init();
 8000906:	f000 f8b9 	bl	8000a7c <MX_I2C2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800090a:	f000 f8ab 	bl	8000a64 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 800090e:	f001 fa0b 	bl	8001d28 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 8000912:	2000      	movs	r0, #0
 8000914:	f001 fbae 	bl	8002074 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 8000918:	2003      	movs	r0, #3
 800091a:	f001 f9a7 	bl	8001c6c <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 800091e:	2000      	movs	r0, #0
 8000920:	f001 fba8 	bl	8002074 <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 8000924:	2364      	movs	r3, #100	; 0x64
 8000926:	607b      	str	r3, [r7, #4]
  speed_test_LCD(number_of_tests);
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f002 fa6f 	bl	8002e0c <speed_test_LCD>

  ILI9341_Fill_Screen(BLACK);
 800092e:	2000      	movs	r0, #0
 8000930:	f001 fba0 	bl	8002074 <ILI9341_Fill_Screen>

  // Start scan digits ///////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);			// Start read digits
 8000934:	4808      	ldr	r0, [pc, #32]	; (8000958 <main+0x88>)
 8000936:	f007 ff2d 	bl	8008794 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 800093a:	2100      	movs	r1, #0
 800093c:	4806      	ldr	r0, [pc, #24]	; (8000958 <main+0x88>)
 800093e:	f007 ff99 	bl	8008874 <HAL_TIM_OC_Start_IT>
  keyboard.how_meny_digits_must_be_written = 10;
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <main+0x8c>)
 8000944:	220a      	movs	r2, #10
 8000946:	779a      	strb	r2, [r3, #30]
  // Encoder /////////////////////////////////////////
//  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
//  int32_t prevCounter = 0;
  ////////////////////////////////////////////////////

   detect_all_sensors();			// Detect all devices which connected to i2c2 and i2c3
 8000948:	f002 fd4f 	bl	80033ea <detect_all_sensors>
	  /////////////////////////////////////////////////////////////////


	  //I2C_3_scaner();

	 menu();
 800094c:	f001 fcdc 	bl	8002308 <menu>
//	  HAL_TIM_Base_Stop_IT(&htim3);				// Stop timer measure
//	  ARR_REG = TIM3-> CNT;


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000950:	f00b fe80 	bl	800c654 <MX_USB_HOST_Process>
	 menu();
 8000954:	e7fa      	b.n	800094c <main+0x7c>
 8000956:	bf00      	nop
 8000958:	20000334 	.word	0x20000334
 800095c:	2000020c 	.word	0x2000020c

08000960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b098      	sub	sp, #96	; 0x60
 8000964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000966:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800096a:	2230      	movs	r2, #48	; 0x30
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f00c f98c 	bl	800cc8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	4b31      	ldr	r3, [pc, #196]	; (8000a5c <SystemClock_Config+0xfc>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	4a30      	ldr	r2, [pc, #192]	; (8000a5c <SystemClock_Config+0xfc>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a0:	6413      	str	r3, [r2, #64]	; 0x40
 80009a2:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <SystemClock_Config+0xfc>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b2b      	ldr	r3, [pc, #172]	; (8000a60 <SystemClock_Config+0x100>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a2a      	ldr	r2, [pc, #168]	; (8000a60 <SystemClock_Config+0x100>)
 80009b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009bc:	6013      	str	r3, [r2, #0]
 80009be:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <SystemClock_Config+0x100>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ca:	2301      	movs	r3, #1
 80009cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d4:	2302      	movs	r3, #2
 80009d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009de:	2308      	movs	r3, #8
 80009e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009e2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009e6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009ec:	2307      	movs	r3, #7
 80009ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009f4:	4618      	mov	r0, r3
 80009f6:	f006 fdbf 	bl	8007578 <HAL_RCC_OscConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000a00:	f000 fbca 	bl	8001198 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a04:	230f      	movs	r3, #15
 8000a06:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	2105      	movs	r1, #5
 8000a22:	4618      	mov	r0, r3
 8000a24:	f007 f820 	bl	8007a68 <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a2e:	f000 fbb3 	bl	8001198 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a32:	2301      	movs	r3, #1
 8000a34:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a36:	23c0      	movs	r3, #192	; 0xc0
 8000a38:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a3e:	f107 030c 	add.w	r3, r7, #12
 8000a42:	4618      	mov	r0, r3
 8000a44:	f007 f9f8 	bl	8007e38 <HAL_RCCEx_PeriphCLKConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000a4e:	f000 fba3 	bl	8001198 <Error_Handler>
  }
}
 8000a52:	bf00      	nop
 8000a54:	3760      	adds	r7, #96	; 0x60
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40007000 	.word	0x40007000

08000a64 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	201c      	movs	r0, #28
 8000a6e:	f003 f820 	bl	8003ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a72:	201c      	movs	r0, #28
 8000a74:	f003 f839 	bl	8003aea <HAL_NVIC_EnableIRQ>
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <MX_I2C2_Init+0x50>)
 8000a82:	4a13      	ldr	r2, [pc, #76]	; (8000ad0 <MX_I2C2_Init+0x54>)
 8000a84:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_I2C2_Init+0x50>)
 8000a88:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <MX_I2C2_Init+0x58>)
 8000a8a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <MX_I2C2_Init+0x50>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_I2C2_Init+0x50>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <MX_I2C2_Init+0x50>)
 8000a9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a9e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <MX_I2C2_Init+0x50>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <MX_I2C2_Init+0x50>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <MX_I2C2_Init+0x50>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <MX_I2C2_Init+0x50>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <MX_I2C2_Init+0x50>)
 8000aba:	f004 ff7d 	bl	80059b8 <HAL_I2C_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ac4:	f000 fb68 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	200002e0 	.word	0x200002e0
 8000ad0:	40005800 	.word	0x40005800
 8000ad4:	000186a0 	.word	0x000186a0

08000ad8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <MX_I2C3_Init+0x50>)
 8000ade:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <MX_I2C3_Init+0x54>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_I2C3_Init+0x50>)
 8000ae4:	4a12      	ldr	r2, [pc, #72]	; (8000b30 <MX_I2C3_Init+0x58>)
 8000ae6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_I2C3_Init+0x50>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_I2C3_Init+0x50>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_I2C3_Init+0x50>)
 8000af6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000afa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000afc:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <MX_I2C3_Init+0x50>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_I2C3_Init+0x50>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b08:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <MX_I2C3_Init+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_I2C3_Init+0x50>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b14:	4804      	ldr	r0, [pc, #16]	; (8000b28 <MX_I2C3_Init+0x50>)
 8000b16:	f004 ff4f 	bl	80059b8 <HAL_I2C_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b20:	f000 fb3a 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000234 	.word	0x20000234
 8000b2c:	40005c00 	.word	0x40005c00
 8000b30:	000186a0 	.word	0x000186a0

08000b34 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <MX_I2S3_Init+0x54>)
 8000b3a:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <MX_I2S3_Init+0x58>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_I2S3_Init+0x54>)
 8000b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b44:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <MX_I2S3_Init+0x54>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_I2S3_Init+0x54>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <MX_I2S3_Init+0x54>)
 8000b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b58:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <MX_I2S3_Init+0x54>)
 8000b5c:	4a0c      	ldr	r2, [pc, #48]	; (8000b90 <MX_I2S3_Init+0x5c>)
 8000b5e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_I2S3_Init+0x54>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <MX_I2S3_Init+0x54>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_I2S3_Init+0x54>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_I2S3_Init+0x54>)
 8000b74:	f006 f860 	bl	8006c38 <HAL_I2S_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000b7e:	f000 fb0b 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000474 	.word	0x20000474
 8000b8c:	40003c00 	.word	0x40003c00
 8000b90:	00017700 	.word	0x00017700

08000b94 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <MX_RNG_Init+0x20>)
 8000b9a:	4a07      	ldr	r2, [pc, #28]	; (8000bb8 <MX_RNG_Init+0x24>)
 8000b9c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_RNG_Init+0x20>)
 8000ba0:	f007 fa8a 	bl	80080b8 <HAL_RNG_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000baa:	f000 faf5 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200003c4 	.word	0x200003c4
 8000bb8:	50060800 	.word	0x50060800

08000bbc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bc0:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <MX_SPI1_Init+0x64>)
 8000bc2:	4a18      	ldr	r2, [pc, #96]	; (8000c24 <MX_SPI1_Init+0x68>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bc6:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <MX_SPI1_Init+0x64>)
 8000bc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <MX_SPI1_Init+0x64>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <MX_SPI1_Init+0x64>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <MX_SPI1_Init+0x64>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <MX_SPI1_Init+0x64>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <MX_SPI1_Init+0x64>)
 8000be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <MX_SPI1_Init+0x64>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <MX_SPI1_Init+0x64>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <MX_SPI1_Init+0x64>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c00:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <MX_SPI1_Init+0x64>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <MX_SPI1_Init+0x64>)
 8000c08:	220a      	movs	r2, #10
 8000c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c0c:	4804      	ldr	r0, [pc, #16]	; (8000c20 <MX_SPI1_Init+0x64>)
 8000c0e:	f007 fae1 	bl	80081d4 <HAL_SPI_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c18:	f000 fabe 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	200003d4 	.word	0x200003d4
 8000c24:	40013000 	.word	0x40013000

08000c28 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c2c:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <MX_SPI2_Init+0x64>)
 8000c2e:	4a18      	ldr	r2, [pc, #96]	; (8000c90 <MX_SPI2_Init+0x68>)
 8000c30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c32:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <MX_SPI2_Init+0x64>)
 8000c34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <MX_SPI2_Init+0x64>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <MX_SPI2_Init+0x64>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <MX_SPI2_Init+0x64>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MX_SPI2_Init+0x64>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <MX_SPI2_Init+0x64>)
 8000c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c58:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <MX_SPI2_Init+0x64>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c60:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <MX_SPI2_Init+0x64>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <MX_SPI2_Init+0x64>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c6c:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <MX_SPI2_Init+0x64>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <MX_SPI2_Init+0x64>)
 8000c74:	220a      	movs	r2, #10
 8000c76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c78:	4804      	ldr	r0, [pc, #16]	; (8000c8c <MX_SPI2_Init+0x64>)
 8000c7a:	f007 faab 	bl	80081d4 <HAL_SPI_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c84:	f000 fa88 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000288 	.word	0x20000288
 8000c90:	40003800 	.word	0x40003800

08000c94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08c      	sub	sp, #48	; 0x30
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	2224      	movs	r2, #36	; 0x24
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f00b fff2 	bl	800cc8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cb0:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <MX_TIM1_Init+0xa8>)
 8000cb2:	4a23      	ldr	r2, [pc, #140]	; (8000d40 <MX_TIM1_Init+0xac>)
 8000cb4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cb6:	4b21      	ldr	r3, [pc, #132]	; (8000d3c <MX_TIM1_Init+0xa8>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <MX_TIM1_Init+0xa8>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cc2:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <MX_TIM1_Init+0xa8>)
 8000cc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cc8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <MX_TIM1_Init+0xa8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <MX_TIM1_Init+0xa8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <MX_TIM1_Init+0xa8>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	4619      	mov	r1, r3
 8000d06:	480d      	ldr	r0, [pc, #52]	; (8000d3c <MX_TIM1_Init+0xa8>)
 8000d08:	f007 ff1b 	bl	8008b42 <HAL_TIM_Encoder_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000d12:	f000 fa41 	bl	8001198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	4619      	mov	r1, r3
 8000d22:	4806      	ldr	r0, [pc, #24]	; (8000d3c <MX_TIM1_Init+0xa8>)
 8000d24:	f008 fd80 	bl	8009828 <HAL_TIMEx_MasterConfigSynchronization>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000d2e:	f000 fa33 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	3730      	adds	r7, #48	; 0x30
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2000037c 	.word	0x2000037c
 8000d40:	40010000 	.word	0x40010000

08000d44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4a:	f107 0308 	add.w	r3, r7, #8
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d58:	463b      	mov	r3, r7
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d60:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <MX_TIM2_Init+0x98>)
 8000d62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8000d68:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <MX_TIM2_Init+0x98>)
 8000d6a:	f240 3247 	movw	r2, #839	; 0x347
 8000d6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <MX_TIM2_Init+0x98>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <MX_TIM2_Init+0x98>)
 8000d78:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7e:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <MX_TIM2_Init+0x98>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <MX_TIM2_Init+0x98>)
 8000d86:	2280      	movs	r2, #128	; 0x80
 8000d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d8a:	4814      	ldr	r0, [pc, #80]	; (8000ddc <MX_TIM2_Init+0x98>)
 8000d8c:	f007 fcb2 	bl	80086f4 <HAL_TIM_Base_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d96:	f000 f9ff 	bl	8001198 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000da0:	f107 0308 	add.w	r3, r7, #8
 8000da4:	4619      	mov	r1, r3
 8000da6:	480d      	ldr	r0, [pc, #52]	; (8000ddc <MX_TIM2_Init+0x98>)
 8000da8:	f008 f938 	bl	800901c <HAL_TIM_ConfigClockSource>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000db2:	f000 f9f1 	bl	8001198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000db6:	2310      	movs	r3, #16
 8000db8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4806      	ldr	r0, [pc, #24]	; (8000ddc <MX_TIM2_Init+0x98>)
 8000dc4:	f008 fd30 	bl	8009828 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000dce:	f000 f9e3 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2000042c 	.word	0x2000042c

08000de0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08e      	sub	sp, #56	; 0x38
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df4:	f107 0320 	add.w	r3, r7, #32
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
 8000e0c:	615a      	str	r2, [r3, #20]
 8000e0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e10:	4b2b      	ldr	r3, [pc, #172]	; (8000ec0 <MX_TIM3_Init+0xe0>)
 8000e12:	4a2c      	ldr	r2, [pc, #176]	; (8000ec4 <MX_TIM3_Init+0xe4>)
 8000e14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 8000e16:	4b2a      	ldr	r3, [pc, #168]	; (8000ec0 <MX_TIM3_Init+0xe0>)
 8000e18:	f640 0233 	movw	r2, #2099	; 0x833
 8000e1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1e:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <MX_TIM3_Init+0xe0>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000e24:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <MX_TIM3_Init+0xe0>)
 8000e26:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2c:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <MX_TIM3_Init+0xe0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e32:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <MX_TIM3_Init+0xe0>)
 8000e34:	2280      	movs	r2, #128	; 0x80
 8000e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e38:	4821      	ldr	r0, [pc, #132]	; (8000ec0 <MX_TIM3_Init+0xe0>)
 8000e3a:	f007 fc5b 	bl	80086f4 <HAL_TIM_Base_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000e44:	f000 f9a8 	bl	8001198 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e52:	4619      	mov	r1, r3
 8000e54:	481a      	ldr	r0, [pc, #104]	; (8000ec0 <MX_TIM3_Init+0xe0>)
 8000e56:	f008 f8e1 	bl	800901c <HAL_TIM_ConfigClockSource>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e60:	f000 f99a 	bl	8001198 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e64:	4816      	ldr	r0, [pc, #88]	; (8000ec0 <MX_TIM3_Init+0xe0>)
 8000e66:	f007 fe13 	bl	8008a90 <HAL_TIM_PWM_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e70:	f000 f992 	bl	8001198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e74:	2300      	movs	r3, #0
 8000e76:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e7c:	f107 0320 	add.w	r3, r7, #32
 8000e80:	4619      	mov	r1, r3
 8000e82:	480f      	ldr	r0, [pc, #60]	; (8000ec0 <MX_TIM3_Init+0xe0>)
 8000e84:	f008 fcd0 	bl	8009828 <HAL_TIMEx_MasterConfigSynchronization>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e8e:	f000 f983 	bl	8001198 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e92:	2360      	movs	r3, #96	; 0x60
 8000e94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_TIM3_Init+0xe0>)
 8000eaa:	f007 fff9 	bl	8008ea0 <HAL_TIM_PWM_ConfigChannel>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000eb4:	f000 f970 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	3738      	adds	r7, #56	; 0x38
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000334 	.word	0x20000334
 8000ec4:	40000400 	.word	0x40000400

08000ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08c      	sub	sp, #48	; 0x30
 8000ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
 8000ee2:	4ba6      	ldr	r3, [pc, #664]	; (800117c <MX_GPIO_Init+0x2b4>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4aa5      	ldr	r2, [pc, #660]	; (800117c <MX_GPIO_Init+0x2b4>)
 8000ee8:	f043 0310 	orr.w	r3, r3, #16
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4ba3      	ldr	r3, [pc, #652]	; (800117c <MX_GPIO_Init+0x2b4>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0310 	and.w	r3, r3, #16
 8000ef6:	61bb      	str	r3, [r7, #24]
 8000ef8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	4b9f      	ldr	r3, [pc, #636]	; (800117c <MX_GPIO_Init+0x2b4>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a9e      	ldr	r2, [pc, #632]	; (800117c <MX_GPIO_Init+0x2b4>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b9c      	ldr	r3, [pc, #624]	; (800117c <MX_GPIO_Init+0x2b4>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	4b98      	ldr	r3, [pc, #608]	; (800117c <MX_GPIO_Init+0x2b4>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a97      	ldr	r2, [pc, #604]	; (800117c <MX_GPIO_Init+0x2b4>)
 8000f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b95      	ldr	r3, [pc, #596]	; (800117c <MX_GPIO_Init+0x2b4>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b91      	ldr	r3, [pc, #580]	; (800117c <MX_GPIO_Init+0x2b4>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a90      	ldr	r2, [pc, #576]	; (800117c <MX_GPIO_Init+0x2b4>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b8e      	ldr	r3, [pc, #568]	; (800117c <MX_GPIO_Init+0x2b4>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	4b8a      	ldr	r3, [pc, #552]	; (800117c <MX_GPIO_Init+0x2b4>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a89      	ldr	r2, [pc, #548]	; (800117c <MX_GPIO_Init+0x2b4>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b87      	ldr	r3, [pc, #540]	; (800117c <MX_GPIO_Init+0x2b4>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	4b83      	ldr	r3, [pc, #524]	; (800117c <MX_GPIO_Init+0x2b4>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a82      	ldr	r2, [pc, #520]	; (800117c <MX_GPIO_Init+0x2b4>)
 8000f74:	f043 0308 	orr.w	r3, r3, #8
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b80      	ldr	r3, [pc, #512]	; (800117c <MX_GPIO_Init+0x2b4>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0308 	and.w	r3, r3, #8
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 8000f86:	2200      	movs	r2, #0
 8000f88:	217c      	movs	r1, #124	; 0x7c
 8000f8a:	487d      	ldr	r0, [pc, #500]	; (8001180 <MX_GPIO_Init+0x2b8>)
 8000f8c:	f002 ff7c 	bl	8003e88 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2101      	movs	r1, #1
 8000f94:	487b      	ldr	r0, [pc, #492]	; (8001184 <MX_GPIO_Init+0x2bc>)
 8000f96:	f002 ff77 	bl	8003e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f64f 7110 	movw	r1, #65296	; 0xff10
 8000fa0:	4879      	ldr	r0, [pc, #484]	; (8001188 <MX_GPIO_Init+0x2c0>)
 8000fa2:	f002 ff71 	bl	8003e88 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_mcroSD_Pin|CS_M25Q_Pin, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8000fac:	4875      	ldr	r0, [pc, #468]	; (8001184 <MX_GPIO_Init+0x2bc>)
 8000fae:	f002 ff6b 	bl	8003e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000fb8:	4874      	ldr	r0, [pc, #464]	; (800118c <MX_GPIO_Init+0x2c4>)
 8000fba:	f002 ff65 	bl	8003e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 8000fbe:	2374      	movs	r3, #116	; 0x74
 8000fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	486a      	ldr	r0, [pc, #424]	; (8001180 <MX_GPIO_Init+0x2b8>)
 8000fd6:	f002 fda3 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000fda:	2308      	movs	r3, #8
 8000fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4863      	ldr	r0, [pc, #396]	; (8001180 <MX_GPIO_Init+0x2b8>)
 8000ff2:	f002 fd95 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8000ff6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4619      	mov	r1, r3
 800100a:	485e      	ldr	r0, [pc, #376]	; (8001184 <MX_GPIO_Init+0x2bc>)
 800100c:	f002 fd88 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_mcroSD_Pin CS_M25Q_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_mcroSD_Pin|CS_M25Q_Pin;
 8001010:	f640 0341 	movw	r3, #2113	; 0x841
 8001014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	4619      	mov	r1, r3
 8001028:	4856      	ldr	r0, [pc, #344]	; (8001184 <MX_GPIO_Init+0x2bc>)
 800102a:	f002 fd79 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800102e:	2308      	movs	r3, #8
 8001030:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800103e:	2305      	movs	r3, #5
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	4619      	mov	r1, r3
 8001048:	484e      	ldr	r0, [pc, #312]	; (8001184 <MX_GPIO_Init+0x2bc>)
 800104a:	f002 fd69 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800104e:	2301      	movs	r3, #1
 8001050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001052:	4b4f      	ldr	r3, [pc, #316]	; (8001190 <MX_GPIO_Init+0x2c8>)
 8001054:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	4619      	mov	r1, r3
 8001060:	484c      	ldr	r0, [pc, #304]	; (8001194 <MX_GPIO_Init+0x2cc>)
 8001062:	f002 fd5d 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001066:	2304      	movs	r3, #4
 8001068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106a:	2300      	movs	r3, #0
 800106c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	4619      	mov	r1, r3
 8001078:	4844      	ldr	r0, [pc, #272]	; (800118c <MX_GPIO_Init+0x2c4>)
 800107a:	f002 fd51 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTION_SENSOR_9960_Pin KEYBOARD_COLUMN_3_Pin encoder_button_Pin */
  GPIO_InitStruct.Pin = MOTION_SENSOR_9960_Pin|KEYBOARD_COLUMN_3_Pin|encoder_button_Pin;
 800107e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001084:	2300      	movs	r3, #0
 8001086:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001088:	2301      	movs	r3, #1
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4619      	mov	r1, r3
 8001092:	483b      	ldr	r0, [pc, #236]	; (8001180 <MX_GPIO_Init+0x2b8>)
 8001094:	f002 fd44 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 8001098:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800109c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109e:	2300      	movs	r3, #0
 80010a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	f107 031c 	add.w	r3, r7, #28
 80010aa:	4619      	mov	r1, r3
 80010ac:	4837      	ldr	r0, [pc, #220]	; (800118c <MX_GPIO_Init+0x2c4>)
 80010ae:	f002 fd37 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 80010b2:	f64f 7310 	movw	r3, #65296	; 0xff10
 80010b6:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	4619      	mov	r1, r3
 80010ca:	482f      	ldr	r0, [pc, #188]	; (8001188 <MX_GPIO_Init+0x2c0>)
 80010cc:	f002 fd28 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80010d0:	2320      	movs	r3, #32
 80010d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	4619      	mov	r1, r3
 80010e2:	4829      	ldr	r0, [pc, #164]	; (8001188 <MX_GPIO_Init+0x2c0>)
 80010e4:	f002 fd1c 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010e8:	2340      	movs	r3, #64	; 0x40
 80010ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ec:	2301      	movs	r3, #1
 80010ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	4619      	mov	r1, r3
 80010fe:	4823      	ldr	r0, [pc, #140]	; (800118c <MX_GPIO_Init+0x2c4>)
 8001100:	f002 fd0e 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8001104:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	4619      	mov	r1, r3
 800111c:	481b      	ldr	r0, [pc, #108]	; (800118c <MX_GPIO_Init+0x2c4>)
 800111e:	f002 fcff 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001122:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001126:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001128:	2312      	movs	r3, #18
 800112a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800112c:	2301      	movs	r3, #1
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001134:	2304      	movs	r3, #4
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	4619      	mov	r1, r3
 800113e:	4813      	ldr	r0, [pc, #76]	; (800118c <MX_GPIO_Init+0x2c4>)
 8001140:	f002 fcee 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8001144:	2301      	movs	r3, #1
 8001146:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	480a      	ldr	r0, [pc, #40]	; (8001180 <MX_GPIO_Init+0x2b8>)
 8001158:	f002 fce2 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800115c:	2302      	movs	r3, #2
 800115e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_GPIO_Init+0x2c8>)
 8001162:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	4619      	mov	r1, r3
 800116e:	4804      	ldr	r0, [pc, #16]	; (8001180 <MX_GPIO_Init+0x2b8>)
 8001170:	f002 fcd6 	bl	8003b20 <HAL_GPIO_Init>

}
 8001174:	bf00      	nop
 8001176:	3730      	adds	r7, #48	; 0x30
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40023800 	.word	0x40023800
 8001180:	40021000 	.word	0x40021000
 8001184:	40020800 	.word	0x40020800
 8001188:	40020c00 	.word	0x40020c00
 800118c:	40020400 	.word	0x40020400
 8001190:	10120000 	.word	0x10120000
 8001194:	40020000 	.word	0x40020000

08001198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800119c:	b672      	cpsid	i
}
 800119e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <Error_Handler+0x8>
	...

080011a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_MspInit+0x5c>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	4a13      	ldr	r2, [pc, #76]	; (8001200 <HAL_MspInit+0x5c>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HAL_MspInit+0x5c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <HAL_MspInit+0x5c>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	4a0c      	ldr	r2, [pc, #48]	; (8001200 <HAL_MspInit+0x5c>)
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d4:	6413      	str	r3, [r2, #64]	; 0x40
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_MspInit+0x5c>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011e2:	2007      	movs	r0, #7
 80011e4:	f002 fc5a 	bl	8003a9c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2100      	movs	r1, #0
 80011ec:	2005      	movs	r0, #5
 80011ee:	f002 fc60 	bl	8003ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80011f2:	2005      	movs	r0, #5
 80011f4:	f002 fc79 	bl	8003aea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40023800 	.word	0x40023800

08001204 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08c      	sub	sp, #48	; 0x30
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a42      	ldr	r2, [pc, #264]	; (800132c <HAL_I2C_MspInit+0x128>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d12d      	bne.n	8001282 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
 800122a:	4b41      	ldr	r3, [pc, #260]	; (8001330 <HAL_I2C_MspInit+0x12c>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a40      	ldr	r2, [pc, #256]	; (8001330 <HAL_I2C_MspInit+0x12c>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b3e      	ldr	r3, [pc, #248]	; (8001330 <HAL_I2C_MspInit+0x12c>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	61bb      	str	r3, [r7, #24]
 8001240:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001242:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001248:	2312      	movs	r3, #18
 800124a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800124c:	2301      	movs	r3, #1
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001250:	2303      	movs	r3, #3
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001254:	2304      	movs	r3, #4
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001258:	f107 031c 	add.w	r3, r7, #28
 800125c:	4619      	mov	r1, r3
 800125e:	4835      	ldr	r0, [pc, #212]	; (8001334 <HAL_I2C_MspInit+0x130>)
 8001260:	f002 fc5e 	bl	8003b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	4b31      	ldr	r3, [pc, #196]	; (8001330 <HAL_I2C_MspInit+0x12c>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	4a30      	ldr	r2, [pc, #192]	; (8001330 <HAL_I2C_MspInit+0x12c>)
 800126e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001272:	6413      	str	r3, [r2, #64]	; 0x40
 8001274:	4b2e      	ldr	r3, [pc, #184]	; (8001330 <HAL_I2C_MspInit+0x12c>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001280:	e050      	b.n	8001324 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a2c      	ldr	r2, [pc, #176]	; (8001338 <HAL_I2C_MspInit+0x134>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d14b      	bne.n	8001324 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	4b27      	ldr	r3, [pc, #156]	; (8001330 <HAL_I2C_MspInit+0x12c>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001294:	4a26      	ldr	r2, [pc, #152]	; (8001330 <HAL_I2C_MspInit+0x12c>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	6313      	str	r3, [r2, #48]	; 0x30
 800129c:	4b24      	ldr	r3, [pc, #144]	; (8001330 <HAL_I2C_MspInit+0x12c>)
 800129e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	4b20      	ldr	r3, [pc, #128]	; (8001330 <HAL_I2C_MspInit+0x12c>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	4a1f      	ldr	r2, [pc, #124]	; (8001330 <HAL_I2C_MspInit+0x12c>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	6313      	str	r3, [r2, #48]	; 0x30
 80012b8:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <HAL_I2C_MspInit+0x12c>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ca:	2312      	movs	r3, #18
 80012cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ce:	2301      	movs	r3, #1
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d2:	2303      	movs	r3, #3
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012d6:	2304      	movs	r3, #4
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012da:	f107 031c 	add.w	r3, r7, #28
 80012de:	4619      	mov	r1, r3
 80012e0:	4816      	ldr	r0, [pc, #88]	; (800133c <HAL_I2C_MspInit+0x138>)
 80012e2:	f002 fc1d 	bl	8003b20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ec:	2312      	movs	r3, #18
 80012ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f4:	2303      	movs	r3, #3
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012f8:	2304      	movs	r3, #4
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	4619      	mov	r1, r3
 8001302:	480f      	ldr	r0, [pc, #60]	; (8001340 <HAL_I2C_MspInit+0x13c>)
 8001304:	f002 fc0c 	bl	8003b20 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <HAL_I2C_MspInit+0x12c>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	4a07      	ldr	r2, [pc, #28]	; (8001330 <HAL_I2C_MspInit+0x12c>)
 8001312:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001316:	6413      	str	r3, [r2, #64]	; 0x40
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_I2C_MspInit+0x12c>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
}
 8001324:	bf00      	nop
 8001326:	3730      	adds	r7, #48	; 0x30
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40005800 	.word	0x40005800
 8001330:	40023800 	.word	0x40023800
 8001334:	40020400 	.word	0x40020400
 8001338:	40005c00 	.word	0x40005c00
 800133c:	40020800 	.word	0x40020800
 8001340:	40020000 	.word	0x40020000

08001344 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a28      	ldr	r2, [pc, #160]	; (8001404 <HAL_I2S_MspInit+0xc0>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d14a      	bne.n	80013fc <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	4b27      	ldr	r3, [pc, #156]	; (8001408 <HAL_I2S_MspInit+0xc4>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a26      	ldr	r2, [pc, #152]	; (8001408 <HAL_I2S_MspInit+0xc4>)
 8001370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b24      	ldr	r3, [pc, #144]	; (8001408 <HAL_I2S_MspInit+0xc4>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4b20      	ldr	r3, [pc, #128]	; (8001408 <HAL_I2S_MspInit+0xc4>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a1f      	ldr	r2, [pc, #124]	; (8001408 <HAL_I2S_MspInit+0xc4>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <HAL_I2S_MspInit+0xc4>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <HAL_I2S_MspInit+0xc4>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a18      	ldr	r2, [pc, #96]	; (8001408 <HAL_I2S_MspInit+0xc4>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <HAL_I2S_MspInit+0xc4>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80013ba:	2310      	movs	r3, #16
 80013bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013ca:	2306      	movs	r3, #6
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	480d      	ldr	r0, [pc, #52]	; (800140c <HAL_I2S_MspInit+0xc8>)
 80013d6:	f002 fba3 	bl	8003b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80013da:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80013de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013ec:	2306      	movs	r3, #6
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4619      	mov	r1, r3
 80013f6:	4806      	ldr	r0, [pc, #24]	; (8001410 <HAL_I2S_MspInit+0xcc>)
 80013f8:	f002 fb92 	bl	8003b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80013fc:	bf00      	nop
 80013fe:	3728      	adds	r7, #40	; 0x28
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40003c00 	.word	0x40003c00
 8001408:	40023800 	.word	0x40023800
 800140c:	40020000 	.word	0x40020000
 8001410:	40020800 	.word	0x40020800

08001414 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <HAL_RNG_MspInit+0x3c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d10d      	bne.n	8001442 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_RNG_MspInit+0x40>)
 800142c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800142e:	4a09      	ldr	r2, [pc, #36]	; (8001454 <HAL_RNG_MspInit+0x40>)
 8001430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001434:	6353      	str	r3, [r2, #52]	; 0x34
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <HAL_RNG_MspInit+0x40>)
 8001438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001442:	bf00      	nop
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	50060800 	.word	0x50060800
 8001454:	40023800 	.word	0x40023800

08001458 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08c      	sub	sp, #48	; 0x30
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a41      	ldr	r2, [pc, #260]	; (800157c <HAL_SPI_MspInit+0x124>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d12c      	bne.n	80014d4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
 800147e:	4b40      	ldr	r3, [pc, #256]	; (8001580 <HAL_SPI_MspInit+0x128>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	4a3f      	ldr	r2, [pc, #252]	; (8001580 <HAL_SPI_MspInit+0x128>)
 8001484:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001488:	6453      	str	r3, [r2, #68]	; 0x44
 800148a:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <HAL_SPI_MspInit+0x128>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001492:	61bb      	str	r3, [r7, #24]
 8001494:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	4b39      	ldr	r3, [pc, #228]	; (8001580 <HAL_SPI_MspInit+0x128>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a38      	ldr	r2, [pc, #224]	; (8001580 <HAL_SPI_MspInit+0x128>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b36      	ldr	r3, [pc, #216]	; (8001580 <HAL_SPI_MspInit+0x128>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80014b2:	23e0      	movs	r3, #224	; 0xe0
 80014b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014c2:	2305      	movs	r3, #5
 80014c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	4619      	mov	r1, r3
 80014cc:	482d      	ldr	r0, [pc, #180]	; (8001584 <HAL_SPI_MspInit+0x12c>)
 80014ce:	f002 fb27 	bl	8003b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80014d2:	e04f      	b.n	8001574 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a2b      	ldr	r2, [pc, #172]	; (8001588 <HAL_SPI_MspInit+0x130>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d14a      	bne.n	8001574 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b27      	ldr	r3, [pc, #156]	; (8001580 <HAL_SPI_MspInit+0x128>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	4a26      	ldr	r2, [pc, #152]	; (8001580 <HAL_SPI_MspInit+0x128>)
 80014e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ec:	6413      	str	r3, [r2, #64]	; 0x40
 80014ee:	4b24      	ldr	r3, [pc, #144]	; (8001580 <HAL_SPI_MspInit+0x128>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b20      	ldr	r3, [pc, #128]	; (8001580 <HAL_SPI_MspInit+0x128>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a1f      	ldr	r2, [pc, #124]	; (8001580 <HAL_SPI_MspInit+0x128>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <HAL_SPI_MspInit+0x128>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	4b19      	ldr	r3, [pc, #100]	; (8001580 <HAL_SPI_MspInit+0x128>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a18      	ldr	r2, [pc, #96]	; (8001580 <HAL_SPI_MspInit+0x128>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b16      	ldr	r3, [pc, #88]	; (8001580 <HAL_SPI_MspInit+0x128>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001532:	2304      	movs	r3, #4
 8001534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153e:	2303      	movs	r3, #3
 8001540:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001542:	2305      	movs	r3, #5
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	4619      	mov	r1, r3
 800154c:	480f      	ldr	r0, [pc, #60]	; (800158c <HAL_SPI_MspInit+0x134>)
 800154e:	f002 fae7 	bl	8003b20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001552:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001560:	2303      	movs	r3, #3
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001564:	2305      	movs	r3, #5
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	4619      	mov	r1, r3
 800156e:	4808      	ldr	r0, [pc, #32]	; (8001590 <HAL_SPI_MspInit+0x138>)
 8001570:	f002 fad6 	bl	8003b20 <HAL_GPIO_Init>
}
 8001574:	bf00      	nop
 8001576:	3730      	adds	r7, #48	; 0x30
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40013000 	.word	0x40013000
 8001580:	40023800 	.word	0x40023800
 8001584:	40020000 	.word	0x40020000
 8001588:	40003800 	.word	0x40003800
 800158c:	40020800 	.word	0x40020800
 8001590:	40020400 	.word	0x40020400

08001594 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a19      	ldr	r2, [pc, #100]	; (8001618 <HAL_TIM_Encoder_MspInit+0x84>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d12c      	bne.n	8001610 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b18      	ldr	r3, [pc, #96]	; (800161c <HAL_TIM_Encoder_MspInit+0x88>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	4a17      	ldr	r2, [pc, #92]	; (800161c <HAL_TIM_Encoder_MspInit+0x88>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6453      	str	r3, [r2, #68]	; 0x44
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <HAL_TIM_Encoder_MspInit+0x88>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <HAL_TIM_Encoder_MspInit+0x88>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a10      	ldr	r2, [pc, #64]	; (800161c <HAL_TIM_Encoder_MspInit+0x88>)
 80015dc:	f043 0310 	orr.w	r3, r3, #16
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <HAL_TIM_Encoder_MspInit+0x88>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0310 	and.w	r3, r3, #16
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80015ee:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80015f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001600:	2301      	movs	r3, #1
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	4805      	ldr	r0, [pc, #20]	; (8001620 <HAL_TIM_Encoder_MspInit+0x8c>)
 800160c:	f002 fa88 	bl	8003b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001610:	bf00      	nop
 8001612:	3728      	adds	r7, #40	; 0x28
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40010000 	.word	0x40010000
 800161c:	40023800 	.word	0x40023800
 8001620:	40021000 	.word	0x40021000

08001624 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001634:	d10e      	bne.n	8001654 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b16      	ldr	r3, [pc, #88]	; (8001694 <HAL_TIM_Base_MspInit+0x70>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a15      	ldr	r2, [pc, #84]	; (8001694 <HAL_TIM_Base_MspInit+0x70>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	4b13      	ldr	r3, [pc, #76]	; (8001694 <HAL_TIM_Base_MspInit+0x70>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001652:	e01a      	b.n	800168a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <HAL_TIM_Base_MspInit+0x74>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d115      	bne.n	800168a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <HAL_TIM_Base_MspInit+0x70>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <HAL_TIM_Base_MspInit+0x70>)
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_TIM_Base_MspInit+0x70>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	201d      	movs	r0, #29
 8001680:	f002 fa17 	bl	8003ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001684:	201d      	movs	r0, #29
 8001686:	f002 fa30 	bl	8003aea <HAL_NVIC_EnableIRQ>
}
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800
 8001698:	40000400 	.word	0x40000400

0800169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <NMI_Handler+0x4>

080016a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <HardFault_Handler+0x4>

080016a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <MemManage_Handler+0x4>

080016ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <BusFault_Handler+0x4>

080016b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <UsageFault_Handler+0x4>

080016ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e8:	f002 f8c4 	bl	8003874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 8001704:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001708:	481b      	ldr	r0, [pc, #108]	; (8001778 <TIM2_IRQHandler+0x78>)
 800170a:	f002 fbd6 	bl	8003eba <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 800170e:	4b1b      	ldr	r3, [pc, #108]	; (800177c <TIM2_IRQHandler+0x7c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d111      	bne.n	800173a <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 8001716:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <TIM2_IRQHandler+0x80>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2bc8      	cmp	r3, #200	; 0xc8
 800171c:	dc0a      	bgt.n	8001734 <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <TIM2_IRQHandler+0x80>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4b18      	ldr	r3, [pc, #96]	; (8001784 <TIM2_IRQHandler+0x84>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 8001728:	4b15      	ldr	r3, [pc, #84]	; (8001780 <TIM2_IRQHandler+0x80>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	3301      	adds	r3, #1
 800172e:	4a14      	ldr	r2, [pc, #80]	; (8001780 <TIM2_IRQHandler+0x80>)
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	e002      	b.n	800173a <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <TIM2_IRQHandler+0x7c>)
 8001736:	2201      	movs	r2, #1
 8001738:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <TIM2_IRQHandler+0x7c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d114      	bne.n	800176c <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 8001742:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <TIM2_IRQHandler+0x80>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b63      	cmp	r3, #99	; 0x63
 8001748:	dd0a      	ble.n	8001760 <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 800174a:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <TIM2_IRQHandler+0x80>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <TIM2_IRQHandler+0x84>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 8001754:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <TIM2_IRQHandler+0x80>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	3b01      	subs	r3, #1
 800175a:	4a09      	ldr	r2, [pc, #36]	; (8001780 <TIM2_IRQHandler+0x80>)
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e005      	b.n	800176c <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <TIM2_IRQHandler+0x7c>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
		  i = 100;
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <TIM2_IRQHandler+0x80>)
 8001768:	2264      	movs	r2, #100	; 0x64
 800176a:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <TIM2_IRQHandler+0x84>)
 800176e:	f007 fa8e 	bl	8008c8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40020c00 	.word	0x40020c00
 800177c:	200001f4 	.word	0x200001f4
 8001780:	20000000 	.word	0x20000000
 8001784:	2000042c 	.word	0x2000042c

08001788 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800178c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001790:	4804      	ldr	r0, [pc, #16]	; (80017a4 <TIM3_IRQHandler+0x1c>)
 8001792:	f002 fb92 	bl	8003eba <HAL_GPIO_TogglePin>
  read_digits();
 8001796:	f7fe fe93 	bl	80004c0 <read_digits>

	//keyboard_test();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800179a:	4803      	ldr	r0, [pc, #12]	; (80017a8 <TIM3_IRQHandler+0x20>)
 800179c:	f007 fa77 	bl	8008c8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40020c00 	.word	0x40020c00
 80017a8:	20000334 	.word	0x20000334

080017ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <OTG_FS_IRQHandler+0x10>)
 80017b2:	f002 fe07 	bl	80043c4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000930 	.word	0x20000930

080017c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c8:	4a14      	ldr	r2, [pc, #80]	; (800181c <_sbrk+0x5c>)
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <_sbrk+0x60>)
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <_sbrk+0x64>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d102      	bne.n	80017e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <_sbrk+0x64>)
 80017de:	4a12      	ldr	r2, [pc, #72]	; (8001828 <_sbrk+0x68>)
 80017e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <_sbrk+0x64>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d207      	bcs.n	8001800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f0:	f00b fa12 	bl	800cc18 <__errno>
 80017f4:	4603      	mov	r3, r0
 80017f6:	220c      	movs	r2, #12
 80017f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017fe:	e009      	b.n	8001814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001806:	4b07      	ldr	r3, [pc, #28]	; (8001824 <_sbrk+0x64>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	4a05      	ldr	r2, [pc, #20]	; (8001824 <_sbrk+0x64>)
 8001810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001812:	68fb      	ldr	r3, [r7, #12]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20020000 	.word	0x20020000
 8001820:	00000400 	.word	0x00000400
 8001824:	200001f8 	.word	0x200001f8
 8001828:	20000c48 	.word	0x20000c48

0800182c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <SystemInit+0x20>)
 8001832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001836:	4a05      	ldr	r2, [pc, #20]	; (800184c <SystemInit+0x20>)
 8001838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800183c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b08b      	sub	sp, #44	; 0x2c
 8001854:	af00      	add	r7, sp, #0
 8001856:	4604      	mov	r4, r0
 8001858:	4608      	mov	r0, r1
 800185a:	4611      	mov	r1, r2
 800185c:	461a      	mov	r2, r3
 800185e:	4623      	mov	r3, r4
 8001860:	80fb      	strh	r3, [r7, #6]
 8001862:	4603      	mov	r3, r0
 8001864:	80bb      	strh	r3, [r7, #4]
 8001866:	460b      	mov	r3, r1
 8001868:	807b      	strh	r3, [r7, #2]
 800186a:	4613      	mov	r3, r2
 800186c:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 800186e:	887b      	ldrh	r3, [r7, #2]
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8001876:	887b      	ldrh	r3, [r7, #2]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	f1c3 0301 	rsb	r3, r3, #1
 800187e:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8001888:	e061      	b.n	800194e <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 800188a:	88fa      	ldrh	r2, [r7, #6]
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	e018      	b.n	80018c6 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	b298      	uxth	r0, r3
 8001898:	6a3b      	ldr	r3, [r7, #32]
 800189a:	b29a      	uxth	r2, r3
 800189c:	88bb      	ldrh	r3, [r7, #4]
 800189e:	4413      	add	r3, r2
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	883a      	ldrh	r2, [r7, #0]
 80018a4:	4619      	mov	r1, r3
 80018a6:	f000 fc0b 	bl	80020c0 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	b298      	uxth	r0, r3
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	88ba      	ldrh	r2, [r7, #4]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	883a      	ldrh	r2, [r7, #0]
 80018ba:	4619      	mov	r1, r3
 80018bc:	f000 fc00 	bl	80020c0 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	3301      	adds	r3, #1
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	88fa      	ldrh	r2, [r7, #6]
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	4413      	add	r3, r2
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	dde0      	ble.n	8001894 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 80018d2:	88fa      	ldrh	r2, [r7, #6]
 80018d4:	6a3b      	ldr	r3, [r7, #32]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	e018      	b.n	800190e <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	b298      	uxth	r0, r3
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	88bb      	ldrh	r3, [r7, #4]
 80018e6:	4413      	add	r3, r2
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	883a      	ldrh	r2, [r7, #0]
 80018ec:	4619      	mov	r1, r3
 80018ee:	f000 fbe7 	bl	80020c0 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	b298      	uxth	r0, r3
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	88ba      	ldrh	r2, [r7, #4]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	b29b      	uxth	r3, r3
 8001900:	883a      	ldrh	r2, [r7, #0]
 8001902:	4619      	mov	r1, r3
 8001904:	f000 fbdc 	bl	80020c0 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	3301      	adds	r3, #1
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	88fa      	ldrh	r2, [r7, #6]
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	4413      	add	r3, r2
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	429a      	cmp	r2, r3
 8001918:	dde0      	ble.n	80018dc <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 800191a:	6a3b      	ldr	r3, [r7, #32]
 800191c:	3301      	adds	r3, #1
 800191e:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	4413      	add	r3, r2
 8001926:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	3302      	adds	r3, #2
 800192c:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	005a      	lsls	r2, r3, #1
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	4413      	add	r3, r2
 8001936:	2b00      	cmp	r3, #0
 8001938:	dd09      	ble.n	800194e <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	3b01      	subs	r3, #1
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	4413      	add	r3, r2
 8001946:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	3302      	adds	r3, #2
 800194c:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 800194e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	429a      	cmp	r2, r3
 8001954:	da99      	bge.n	800188a <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8001956:	bf00      	nop
 8001958:	bf00      	nop
 800195a:	372c      	adds	r7, #44	; 0x2c
 800195c:	46bd      	mov	sp, r7
 800195e:	bd90      	pop	{r4, r7, pc}

08001960 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b089      	sub	sp, #36	; 0x24
 8001964:	af02      	add	r7, sp, #8
 8001966:	4604      	mov	r4, r0
 8001968:	4608      	mov	r0, r1
 800196a:	4611      	mov	r1, r2
 800196c:	461a      	mov	r2, r3
 800196e:	4623      	mov	r3, r4
 8001970:	71fb      	strb	r3, [r7, #7]
 8001972:	4603      	mov	r3, r0
 8001974:	80bb      	strh	r3, [r7, #4]
 8001976:	460b      	mov	r3, r1
 8001978:	71bb      	strb	r3, [r7, #6]
 800197a:	4613      	mov	r3, r2
 800197c:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8001982:	7dfb      	ldrb	r3, [r7, #23]
 8001984:	2b1f      	cmp	r3, #31
 8001986:	d902      	bls.n	800198e <ILI9341_Draw_Char+0x2e>
        //Character = 0;
    	//break;
    } else {
        function_char -= 32;
 8001988:	7dfb      	ldrb	r3, [r7, #23]
 800198a:	3b20      	subs	r3, #32
 800198c:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800198e:	2300      	movs	r3, #0
 8001990:	753b      	strb	r3, [r7, #20]
 8001992:	e012      	b.n	80019ba <ILI9341_Draw_Char+0x5a>
		{
		temp[k] = font[function_char][k];
 8001994:	7dfa      	ldrb	r2, [r7, #23]
 8001996:	7d38      	ldrb	r0, [r7, #20]
 8001998:	7d39      	ldrb	r1, [r7, #20]
 800199a:	4c3b      	ldr	r4, [pc, #236]	; (8001a88 <ILI9341_Draw_Char+0x128>)
 800199c:	4613      	mov	r3, r2
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4413      	add	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4423      	add	r3, r4
 80019a6:	4403      	add	r3, r0
 80019a8:	781a      	ldrb	r2, [r3, #0]
 80019aa:	f107 0318 	add.w	r3, r7, #24
 80019ae:	440b      	add	r3, r1
 80019b0:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80019b4:	7d3b      	ldrb	r3, [r7, #20]
 80019b6:	3301      	adds	r3, #1
 80019b8:	753b      	strb	r3, [r7, #20]
 80019ba:	7d3b      	ldrb	r3, [r7, #20]
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d9e9      	bls.n	8001994 <ILI9341_Draw_Char+0x34>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80019c0:	79bb      	ldrb	r3, [r7, #6]
 80019c2:	b299      	uxth	r1, r3
 80019c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019c6:	461a      	mov	r2, r3
 80019c8:	0052      	lsls	r2, r2, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	b29c      	uxth	r4, r3
 80019d6:	88b8      	ldrh	r0, [r7, #4]
 80019d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	4623      	mov	r3, r4
 80019de:	f000 fc37 	bl	8002250 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 80019e2:	2300      	movs	r3, #0
 80019e4:	757b      	strb	r3, [r7, #21]
 80019e6:	e046      	b.n	8001a76 <ILI9341_Draw_Char+0x116>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80019e8:	2300      	movs	r3, #0
 80019ea:	75bb      	strb	r3, [r7, #22]
 80019ec:	e03d      	b.n	8001a6a <ILI9341_Draw_Char+0x10a>
            if (temp[j] & (1<<i)) {			
 80019ee:	7d7b      	ldrb	r3, [r7, #21]
 80019f0:	f107 0218 	add.w	r2, r7, #24
 80019f4:	4413      	add	r3, r2
 80019f6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80019fa:	461a      	mov	r2, r3
 80019fc:	7dbb      	ldrb	r3, [r7, #22]
 80019fe:	fa42 f303 	asr.w	r3, r2, r3
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d02c      	beq.n	8001a64 <ILI9341_Draw_Char+0x104>
							if(Size == 1)
 8001a0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d10f      	bne.n	8001a30 <ILI9341_Draw_Char+0xd0>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8001a10:	7d7b      	ldrb	r3, [r7, #21]
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	88bb      	ldrh	r3, [r7, #4]
 8001a16:	4413      	add	r3, r2
 8001a18:	b298      	uxth	r0, r3
 8001a1a:	79bb      	ldrb	r3, [r7, #6]
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	7dbb      	ldrb	r3, [r7, #22]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	887a      	ldrh	r2, [r7, #2]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f000 fb49 	bl	80020c0 <ILI9341_Draw_Pixel>
 8001a2e:	e019      	b.n	8001a64 <ILI9341_Draw_Char+0x104>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001a30:	7d7b      	ldrb	r3, [r7, #21]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a36:	fb12 f303 	smulbb	r3, r2, r3
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	88bb      	ldrh	r3, [r7, #4]
 8001a3e:	4413      	add	r3, r2
 8001a40:	b298      	uxth	r0, r3
 8001a42:	79bb      	ldrb	r3, [r7, #6]
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	7dbb      	ldrb	r3, [r7, #22]
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001a4c:	fb11 f303 	smulbb	r3, r1, r3
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	b299      	uxth	r1, r3
 8001a56:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8001a58:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a5a:	887b      	ldrh	r3, [r7, #2]
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	4623      	mov	r3, r4
 8001a60:	f000 fbf6 	bl	8002250 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001a64:	7dbb      	ldrb	r3, [r7, #22]
 8001a66:	3301      	adds	r3, #1
 8001a68:	75bb      	strb	r3, [r7, #22]
 8001a6a:	7dbb      	ldrb	r3, [r7, #22]
 8001a6c:	2b07      	cmp	r3, #7
 8001a6e:	d9be      	bls.n	80019ee <ILI9341_Draw_Char+0x8e>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001a70:	7d7b      	ldrb	r3, [r7, #21]
 8001a72:	3301      	adds	r3, #1
 8001a74:	757b      	strb	r3, [r7, #21]
 8001a76:	7d7b      	ldrb	r3, [r7, #21]
 8001a78:	2b05      	cmp	r3, #5
 8001a7a:	d9b5      	bls.n	80019e8 <ILI9341_Draw_Char+0x88>
							}
            }						
        }
    }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	371c      	adds	r7, #28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd90      	pop	{r4, r7, pc}
 8001a86:	bf00      	nop
 8001a88:	0800cf9c 	.word	0x0800cf9c

08001a8c <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af02      	add	r7, sp, #8
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	4608      	mov	r0, r1
 8001a96:	4611      	mov	r1, r2
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	817b      	strh	r3, [r7, #10]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	727b      	strb	r3, [r7, #9]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	80fb      	strh	r3, [r7, #6]
    while (*Text) {
 8001aa6:	e016      	b.n	8001ad6 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	60fa      	str	r2, [r7, #12]
 8001aae:	7818      	ldrb	r0, [r3, #0]
 8001ab0:	88fc      	ldrh	r4, [r7, #6]
 8001ab2:	7a7a      	ldrb	r2, [r7, #9]
 8001ab4:	8979      	ldrh	r1, [r7, #10]
 8001ab6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	8c3b      	ldrh	r3, [r7, #32]
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	4623      	mov	r3, r4
 8001ac0:	f7ff ff4e 	bl	8001960 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8001ac4:	8c3b      	ldrh	r3, [r7, #32]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	0052      	lsls	r2, r2, #1
 8001aca:	4413      	add	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	897b      	ldrh	r3, [r7, #10]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1e4      	bne.n	8001aa8 <ILI9341_Draw_Text+0x1c>
    }
}
 8001ade:	bf00      	nop
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd90      	pop	{r4, r7, pc}

08001ae8 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8001aec:	2200      	movs	r2, #0
 8001aee:	2110      	movs	r1, #16
 8001af0:	4802      	ldr	r0, [pc, #8]	; (8001afc <ILI9341_SPI_Init+0x14>)
 8001af2:	f002 f9c9 	bl	8003e88 <HAL_GPIO_WritePin>
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000

08001b00 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8001b0a:	1df9      	adds	r1, r7, #7
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	2201      	movs	r2, #1
 8001b10:	4803      	ldr	r0, [pc, #12]	; (8001b20 <ILI9341_SPI_Send+0x20>)
 8001b12:	f006 fbe8 	bl	80082e6 <HAL_SPI_Transmit>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000288 	.word	0x20000288

08001b24 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2110      	movs	r1, #16
 8001b32:	480a      	ldr	r0, [pc, #40]	; (8001b5c <ILI9341_Write_Command+0x38>)
 8001b34:	f002 f9a8 	bl	8003e88 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2140      	movs	r1, #64	; 0x40
 8001b3c:	4807      	ldr	r0, [pc, #28]	; (8001b5c <ILI9341_Write_Command+0x38>)
 8001b3e:	f002 f9a3 	bl	8003e88 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ffdb 	bl	8001b00 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	2110      	movs	r1, #16
 8001b4e:	4803      	ldr	r0, [pc, #12]	; (8001b5c <ILI9341_Write_Command+0x38>)
 8001b50:	f002 f99a 	bl	8003e88 <HAL_GPIO_WritePin>
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40021000 	.word	0x40021000

08001b60 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	2140      	movs	r1, #64	; 0x40
 8001b6e:	480a      	ldr	r0, [pc, #40]	; (8001b98 <ILI9341_Write_Data+0x38>)
 8001b70:	f002 f98a 	bl	8003e88 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001b74:	2200      	movs	r2, #0
 8001b76:	2110      	movs	r1, #16
 8001b78:	4807      	ldr	r0, [pc, #28]	; (8001b98 <ILI9341_Write_Data+0x38>)
 8001b7a:	f002 f985 	bl	8003e88 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ffbd 	bl	8001b00 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001b86:	2201      	movs	r2, #1
 8001b88:	2110      	movs	r1, #16
 8001b8a:	4803      	ldr	r0, [pc, #12]	; (8001b98 <ILI9341_Write_Data+0x38>)
 8001b8c:	f002 f97c 	bl	8003e88 <HAL_GPIO_WritePin>
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40021000 	.word	0x40021000

08001b9c <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001b9c:	b590      	push	{r4, r7, lr}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4604      	mov	r4, r0
 8001ba4:	4608      	mov	r0, r1
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4623      	mov	r3, r4
 8001bac:	80fb      	strh	r3, [r7, #6]
 8001bae:	4603      	mov	r3, r0
 8001bb0:	80bb      	strh	r3, [r7, #4]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	807b      	strh	r3, [r7, #2]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8001bba:	202a      	movs	r0, #42	; 0x2a
 8001bbc:	f7ff ffb2 	bl	8001b24 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8001bc0:	88fb      	ldrh	r3, [r7, #6]
 8001bc2:	0a1b      	lsrs	r3, r3, #8
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ffc9 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff ffc4 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8001bd8:	887b      	ldrh	r3, [r7, #2]
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ffbd 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8001be6:	887b      	ldrh	r3, [r7, #2]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff ffb8 	bl	8001b60 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8001bf0:	202b      	movs	r0, #43	; 0x2b
 8001bf2:	f7ff ff97 	bl	8001b24 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8001bf6:	88bb      	ldrh	r3, [r7, #4]
 8001bf8:	0a1b      	lsrs	r3, r3, #8
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff ffae 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8001c04:	88bb      	ldrh	r3, [r7, #4]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ffa9 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8001c0e:	883b      	ldrh	r3, [r7, #0]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ffa2 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8001c1c:	883b      	ldrh	r3, [r7, #0]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff9d 	bl	8001b60 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8001c26:	202c      	movs	r0, #44	; 0x2c
 8001c28:	f7ff ff7c 	bl	8001b24 <ILI9341_Write_Command>
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd90      	pop	{r4, r7, pc}

08001c34 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2120      	movs	r1, #32
 8001c3c:	480a      	ldr	r0, [pc, #40]	; (8001c68 <ILI9341_Reset+0x34>)
 8001c3e:	f002 f923 	bl	8003e88 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001c42:	20c8      	movs	r0, #200	; 0xc8
 8001c44:	f001 fe36 	bl	80038b4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2110      	movs	r1, #16
 8001c4c:	4806      	ldr	r0, [pc, #24]	; (8001c68 <ILI9341_Reset+0x34>)
 8001c4e:	f002 f91b 	bl	8003e88 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001c52:	20c8      	movs	r0, #200	; 0xc8
 8001c54:	f001 fe2e 	bl	80038b4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8001c58:	2201      	movs	r2, #1
 8001c5a:	2120      	movs	r1, #32
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <ILI9341_Reset+0x34>)
 8001c5e:	f002 f913 	bl	8003e88 <HAL_GPIO_WritePin>
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40021000 	.word	0x40021000

08001c6c <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8001c7a:	2036      	movs	r0, #54	; 0x36
 8001c7c:	f7ff ff52 	bl	8001b24 <ILI9341_Write_Command>
HAL_Delay(1);
 8001c80:	2001      	movs	r0, #1
 8001c82:	f001 fe17 	bl	80038b4 <HAL_Delay>
	
switch(screen_rotation) 
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	d837      	bhi.n	8001cfc <ILI9341_Set_Rotation+0x90>
 8001c8c:	a201      	add	r2, pc, #4	; (adr r2, 8001c94 <ILI9341_Set_Rotation+0x28>)
 8001c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c92:	bf00      	nop
 8001c94:	08001ca5 	.word	0x08001ca5
 8001c98:	08001cbb 	.word	0x08001cbb
 8001c9c:	08001cd1 	.word	0x08001cd1
 8001ca0:	08001ce7 	.word	0x08001ce7
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8001ca4:	2048      	movs	r0, #72	; 0x48
 8001ca6:	f7ff ff5b 	bl	8001b60 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8001caa:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <ILI9341_Set_Rotation+0x9c>)
 8001cac:	22f0      	movs	r2, #240	; 0xf0
 8001cae:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001cb0:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <ILI9341_Set_Rotation+0xa0>)
 8001cb2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cb6:	801a      	strh	r2, [r3, #0]
			break;
 8001cb8:	e021      	b.n	8001cfe <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8001cba:	2028      	movs	r0, #40	; 0x28
 8001cbc:	f7ff ff50 	bl	8001b60 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <ILI9341_Set_Rotation+0x9c>)
 8001cc2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cc6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001cc8:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <ILI9341_Set_Rotation+0xa0>)
 8001cca:	22f0      	movs	r2, #240	; 0xf0
 8001ccc:	801a      	strh	r2, [r3, #0]
			break;
 8001cce:	e016      	b.n	8001cfe <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8001cd0:	2088      	movs	r0, #136	; 0x88
 8001cd2:	f7ff ff45 	bl	8001b60 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <ILI9341_Set_Rotation+0x9c>)
 8001cd8:	22f0      	movs	r2, #240	; 0xf0
 8001cda:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <ILI9341_Set_Rotation+0xa0>)
 8001cde:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ce2:	801a      	strh	r2, [r3, #0]
			break;
 8001ce4:	e00b      	b.n	8001cfe <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8001ce6:	20e8      	movs	r0, #232	; 0xe8
 8001ce8:	f7ff ff3a 	bl	8001b60 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <ILI9341_Set_Rotation+0x9c>)
 8001cee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cf2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <ILI9341_Set_Rotation+0xa0>)
 8001cf6:	22f0      	movs	r2, #240	; 0xf0
 8001cf8:	801a      	strh	r2, [r3, #0]
			break;
 8001cfa:	e000      	b.n	8001cfe <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8001cfc:	bf00      	nop
	}
}
 8001cfe:	bf00      	nop
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	2000000a 	.word	0x2000000a
 8001d0c:	20000008 	.word	0x20000008

08001d10 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001d14:	2201      	movs	r2, #1
 8001d16:	2120      	movs	r1, #32
 8001d18:	4802      	ldr	r0, [pc, #8]	; (8001d24 <ILI9341_Enable+0x14>)
 8001d1a:	f002 f8b5 	bl	8003e88 <HAL_GPIO_WritePin>
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40021000 	.word	0x40021000

08001d28 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8001d2c:	f7ff fff0 	bl	8001d10 <ILI9341_Enable>
ILI9341_SPI_Init();
 8001d30:	f7ff feda 	bl	8001ae8 <ILI9341_SPI_Init>
ILI9341_Reset();
 8001d34:	f7ff ff7e 	bl	8001c34 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8001d38:	2001      	movs	r0, #1
 8001d3a:	f7ff fef3 	bl	8001b24 <ILI9341_Write_Command>
HAL_Delay(1000);
 8001d3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d42:	f001 fdb7 	bl	80038b4 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8001d46:	20cb      	movs	r0, #203	; 0xcb
 8001d48:	f7ff feec 	bl	8001b24 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8001d4c:	2039      	movs	r0, #57	; 0x39
 8001d4e:	f7ff ff07 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8001d52:	202c      	movs	r0, #44	; 0x2c
 8001d54:	f7ff ff04 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f7ff ff01 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8001d5e:	2034      	movs	r0, #52	; 0x34
 8001d60:	f7ff fefe 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8001d64:	2002      	movs	r0, #2
 8001d66:	f7ff fefb 	bl	8001b60 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8001d6a:	20cf      	movs	r0, #207	; 0xcf
 8001d6c:	f7ff feda 	bl	8001b24 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001d70:	2000      	movs	r0, #0
 8001d72:	f7ff fef5 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001d76:	20c1      	movs	r0, #193	; 0xc1
 8001d78:	f7ff fef2 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8001d7c:	2030      	movs	r0, #48	; 0x30
 8001d7e:	f7ff feef 	bl	8001b60 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8001d82:	20e8      	movs	r0, #232	; 0xe8
 8001d84:	f7ff fece 	bl	8001b24 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8001d88:	2085      	movs	r0, #133	; 0x85
 8001d8a:	f7ff fee9 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f7ff fee6 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8001d94:	2078      	movs	r0, #120	; 0x78
 8001d96:	f7ff fee3 	bl	8001b60 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8001d9a:	20ea      	movs	r0, #234	; 0xea
 8001d9c:	f7ff fec2 	bl	8001b24 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001da0:	2000      	movs	r0, #0
 8001da2:	f7ff fedd 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001da6:	2000      	movs	r0, #0
 8001da8:	f7ff feda 	bl	8001b60 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8001dac:	20ed      	movs	r0, #237	; 0xed
 8001dae:	f7ff feb9 	bl	8001b24 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8001db2:	2064      	movs	r0, #100	; 0x64
 8001db4:	f7ff fed4 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001db8:	2003      	movs	r0, #3
 8001dba:	f7ff fed1 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8001dbe:	2012      	movs	r0, #18
 8001dc0:	f7ff fece 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8001dc4:	2081      	movs	r0, #129	; 0x81
 8001dc6:	f7ff fecb 	bl	8001b60 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8001dca:	20f7      	movs	r0, #247	; 0xf7
 8001dcc:	f7ff feaa 	bl	8001b24 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8001dd0:	2020      	movs	r0, #32
 8001dd2:	f7ff fec5 	bl	8001b60 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8001dd6:	20c0      	movs	r0, #192	; 0xc0
 8001dd8:	f7ff fea4 	bl	8001b24 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001ddc:	2023      	movs	r0, #35	; 0x23
 8001dde:	f7ff febf 	bl	8001b60 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8001de2:	20c1      	movs	r0, #193	; 0xc1
 8001de4:	f7ff fe9e 	bl	8001b24 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8001de8:	2010      	movs	r0, #16
 8001dea:	f7ff feb9 	bl	8001b60 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8001dee:	20c5      	movs	r0, #197	; 0xc5
 8001df0:	f7ff fe98 	bl	8001b24 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8001df4:	203e      	movs	r0, #62	; 0x3e
 8001df6:	f7ff feb3 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8001dfa:	2028      	movs	r0, #40	; 0x28
 8001dfc:	f7ff feb0 	bl	8001b60 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8001e00:	20c7      	movs	r0, #199	; 0xc7
 8001e02:	f7ff fe8f 	bl	8001b24 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8001e06:	2086      	movs	r0, #134	; 0x86
 8001e08:	f7ff feaa 	bl	8001b60 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8001e0c:	2036      	movs	r0, #54	; 0x36
 8001e0e:	f7ff fe89 	bl	8001b24 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8001e12:	2048      	movs	r0, #72	; 0x48
 8001e14:	f7ff fea4 	bl	8001b60 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8001e18:	203a      	movs	r0, #58	; 0x3a
 8001e1a:	f7ff fe83 	bl	8001b24 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8001e1e:	2055      	movs	r0, #85	; 0x55
 8001e20:	f7ff fe9e 	bl	8001b60 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8001e24:	20b1      	movs	r0, #177	; 0xb1
 8001e26:	f7ff fe7d 	bl	8001b24 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f7ff fe98 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001e30:	2018      	movs	r0, #24
 8001e32:	f7ff fe95 	bl	8001b60 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8001e36:	20b6      	movs	r0, #182	; 0xb6
 8001e38:	f7ff fe74 	bl	8001b24 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8001e3c:	2008      	movs	r0, #8
 8001e3e:	f7ff fe8f 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8001e42:	2082      	movs	r0, #130	; 0x82
 8001e44:	f7ff fe8c 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8001e48:	2027      	movs	r0, #39	; 0x27
 8001e4a:	f7ff fe89 	bl	8001b60 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8001e4e:	20f2      	movs	r0, #242	; 0xf2
 8001e50:	f7ff fe68 	bl	8001b24 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001e54:	2000      	movs	r0, #0
 8001e56:	f7ff fe83 	bl	8001b60 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8001e5a:	2026      	movs	r0, #38	; 0x26
 8001e5c:	f7ff fe62 	bl	8001b24 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8001e60:	2001      	movs	r0, #1
 8001e62:	f7ff fe7d 	bl	8001b60 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8001e66:	20e0      	movs	r0, #224	; 0xe0
 8001e68:	f7ff fe5c 	bl	8001b24 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8001e6c:	200f      	movs	r0, #15
 8001e6e:	f7ff fe77 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001e72:	2031      	movs	r0, #49	; 0x31
 8001e74:	f7ff fe74 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8001e78:	202b      	movs	r0, #43	; 0x2b
 8001e7a:	f7ff fe71 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001e7e:	200c      	movs	r0, #12
 8001e80:	f7ff fe6e 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001e84:	200e      	movs	r0, #14
 8001e86:	f7ff fe6b 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001e8a:	2008      	movs	r0, #8
 8001e8c:	f7ff fe68 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8001e90:	204e      	movs	r0, #78	; 0x4e
 8001e92:	f7ff fe65 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8001e96:	20f1      	movs	r0, #241	; 0xf1
 8001e98:	f7ff fe62 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8001e9c:	2037      	movs	r0, #55	; 0x37
 8001e9e:	f7ff fe5f 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001ea2:	2007      	movs	r0, #7
 8001ea4:	f7ff fe5c 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001ea8:	2010      	movs	r0, #16
 8001eaa:	f7ff fe59 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001eae:	2003      	movs	r0, #3
 8001eb0:	f7ff fe56 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001eb4:	200e      	movs	r0, #14
 8001eb6:	f7ff fe53 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8001eba:	2009      	movs	r0, #9
 8001ebc:	f7ff fe50 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f7ff fe4d 	bl	8001b60 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8001ec6:	20e1      	movs	r0, #225	; 0xe1
 8001ec8:	f7ff fe2c 	bl	8001b24 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f7ff fe47 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001ed2:	200e      	movs	r0, #14
 8001ed4:	f7ff fe44 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8001ed8:	2014      	movs	r0, #20
 8001eda:	f7ff fe41 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001ede:	2003      	movs	r0, #3
 8001ee0:	f7ff fe3e 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8001ee4:	2011      	movs	r0, #17
 8001ee6:	f7ff fe3b 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001eea:	2007      	movs	r0, #7
 8001eec:	f7ff fe38 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001ef0:	2031      	movs	r0, #49	; 0x31
 8001ef2:	f7ff fe35 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001ef6:	20c1      	movs	r0, #193	; 0xc1
 8001ef8:	f7ff fe32 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8001efc:	2048      	movs	r0, #72	; 0x48
 8001efe:	f7ff fe2f 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001f02:	2008      	movs	r0, #8
 8001f04:	f7ff fe2c 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001f08:	200f      	movs	r0, #15
 8001f0a:	f7ff fe29 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001f0e:	200c      	movs	r0, #12
 8001f10:	f7ff fe26 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001f14:	2031      	movs	r0, #49	; 0x31
 8001f16:	f7ff fe23 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8001f1a:	2036      	movs	r0, #54	; 0x36
 8001f1c:	f7ff fe20 	bl	8001b60 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001f20:	200f      	movs	r0, #15
 8001f22:	f7ff fe1d 	bl	8001b60 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8001f26:	2011      	movs	r0, #17
 8001f28:	f7ff fdfc 	bl	8001b24 <ILI9341_Write_Command>
HAL_Delay(120);
 8001f2c:	2078      	movs	r0, #120	; 0x78
 8001f2e:	f001 fcc1 	bl	80038b4 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8001f32:	2029      	movs	r0, #41	; 0x29
 8001f34:	f7ff fdf6 	bl	8001b24 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001f38:	2003      	movs	r0, #3
 8001f3a:	f7ff fe97 	bl	8001c6c <ILI9341_Set_Rotation>

HAL_Delay(10);
 8001f3e:	200a      	movs	r0, #10
 8001f40:	f001 fcb8 	bl	80038b4 <HAL_Delay>
//
}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001f48:	b5b0      	push	{r4, r5, r7, lr}
 8001f4a:	b08c      	sub	sp, #48	; 0x30
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	6039      	str	r1, [r7, #0]
 8001f52:	80fb      	strh	r3, [r7, #6]
 8001f54:	466b      	mov	r3, sp
 8001f56:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f64:	d202      	bcs.n	8001f6c <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6a:	e002      	b.n	8001f72 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8001f6c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001f72:	2201      	movs	r2, #1
 8001f74:	2140      	movs	r1, #64	; 0x40
 8001f76:	483d      	ldr	r0, [pc, #244]	; (800206c <ILI9341_Draw_Colour_Burst+0x124>)
 8001f78:	f001 ff86 	bl	8003e88 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2110      	movs	r1, #16
 8001f80:	483a      	ldr	r0, [pc, #232]	; (800206c <ILI9341_Draw_Colour_Burst+0x124>)
 8001f82:	f001 ff81 	bl	8003e88 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8001f86:	88fb      	ldrh	r3, [r7, #6]
 8001f88:	0a1b      	lsrs	r3, r3, #8
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8001f90:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001f92:	4623      	mov	r3, r4
 8001f94:	3b01      	subs	r3, #1
 8001f96:	61fb      	str	r3, [r7, #28]
 8001f98:	4620      	mov	r0, r4
 8001f9a:	f04f 0100 	mov.w	r1, #0
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	00cb      	lsls	r3, r1, #3
 8001fa8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001fac:	00c2      	lsls	r2, r0, #3
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f04f 0100 	mov.w	r1, #0
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	f04f 0300 	mov.w	r3, #0
 8001fbc:	00cb      	lsls	r3, r1, #3
 8001fbe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001fc2:	00c2      	lsls	r2, r0, #3
 8001fc4:	1de3      	adds	r3, r4, #7
 8001fc6:	08db      	lsrs	r3, r3, #3
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	ebad 0d03 	sub.w	sp, sp, r3
 8001fce:	466b      	mov	r3, sp
 8001fd0:	3300      	adds	r3, #0
 8001fd2:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fd8:	e00e      	b.n	8001ff8 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fde:	4413      	add	r3, r2
 8001fe0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001fe4:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8001fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe8:	3301      	adds	r3, #1
 8001fea:	88fa      	ldrh	r2, [r7, #6]
 8001fec:	b2d1      	uxtb	r1, r2
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ff8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d3ec      	bcc.n	8001fda <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	fbb2 f3f3 	udiv	r3, r2, r3
 800200e:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002014:	fbb3 f2f2 	udiv	r2, r3, r2
 8002018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800201a:	fb01 f202 	mul.w	r2, r1, r2
 800201e:	1a9b      	subs	r3, r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d010      	beq.n	800204a <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002028:	2300      	movs	r3, #0
 800202a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800202c:	e009      	b.n	8002042 <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 800202e:	69b9      	ldr	r1, [r7, #24]
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	b29a      	uxth	r2, r3
 8002034:	230a      	movs	r3, #10
 8002036:	480e      	ldr	r0, [pc, #56]	; (8002070 <ILI9341_Draw_Colour_Burst+0x128>)
 8002038:	f006 f955 	bl	80082e6 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800203c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203e:	3301      	adds	r3, #1
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	429a      	cmp	r2, r3
 8002048:	d3f1      	bcc.n	800202e <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 800204a:	69b9      	ldr	r1, [r7, #24]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	b29a      	uxth	r2, r3
 8002050:	230a      	movs	r3, #10
 8002052:	4807      	ldr	r0, [pc, #28]	; (8002070 <ILI9341_Draw_Colour_Burst+0x128>)
 8002054:	f006 f947 	bl	80082e6 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002058:	2201      	movs	r2, #1
 800205a:	2110      	movs	r1, #16
 800205c:	4803      	ldr	r0, [pc, #12]	; (800206c <ILI9341_Draw_Colour_Burst+0x124>)
 800205e:	f001 ff13 	bl	8003e88 <HAL_GPIO_WritePin>
 8002062:	46ad      	mov	sp, r5
}
 8002064:	bf00      	nop
 8002066:	3730      	adds	r7, #48	; 0x30
 8002068:	46bd      	mov	sp, r7
 800206a:	bdb0      	pop	{r4, r5, r7, pc}
 800206c:	40021000 	.word	0x40021000
 8002070:	20000288 	.word	0x20000288

08002074 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 800207e:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <ILI9341_Fill_Screen+0x44>)
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	b29a      	uxth	r2, r3
 8002084:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <ILI9341_Fill_Screen+0x48>)
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	b29b      	uxth	r3, r3
 800208a:	2100      	movs	r1, #0
 800208c:	2000      	movs	r0, #0
 800208e:	f7ff fd85 	bl	8001b9c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8002092:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <ILI9341_Fill_Screen+0x44>)
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	b29b      	uxth	r3, r3
 8002098:	461a      	mov	r2, r3
 800209a:	4b08      	ldr	r3, [pc, #32]	; (80020bc <ILI9341_Fill_Screen+0x48>)
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	fb03 f302 	mul.w	r3, r3, r2
 80020a4:	461a      	mov	r2, r3
 80020a6:	88fb      	ldrh	r3, [r7, #6]
 80020a8:	4611      	mov	r1, r2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff ff4c 	bl	8001f48 <ILI9341_Draw_Colour_Burst>
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	2000000a 	.word	0x2000000a
 80020bc:	20000008 	.word	0x20000008

080020c0 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	80fb      	strh	r3, [r7, #6]
 80020ca:	460b      	mov	r3, r1
 80020cc:	80bb      	strh	r3, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80020d2:	4b5b      	ldr	r3, [pc, #364]	; (8002240 <ILI9341_Draw_Pixel+0x180>)
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	88fa      	ldrh	r2, [r7, #6]
 80020da:	429a      	cmp	r2, r3
 80020dc:	f080 80ac 	bcs.w	8002238 <ILI9341_Draw_Pixel+0x178>
 80020e0:	4b58      	ldr	r3, [pc, #352]	; (8002244 <ILI9341_Draw_Pixel+0x184>)
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	88ba      	ldrh	r2, [r7, #4]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	f080 80a5 	bcs.w	8002238 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80020ee:	2200      	movs	r2, #0
 80020f0:	2140      	movs	r1, #64	; 0x40
 80020f2:	4855      	ldr	r0, [pc, #340]	; (8002248 <ILI9341_Draw_Pixel+0x188>)
 80020f4:	f001 fec8 	bl	8003e88 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80020f8:	2200      	movs	r2, #0
 80020fa:	2110      	movs	r1, #16
 80020fc:	4852      	ldr	r0, [pc, #328]	; (8002248 <ILI9341_Draw_Pixel+0x188>)
 80020fe:	f001 fec3 	bl	8003e88 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002102:	202a      	movs	r0, #42	; 0x2a
 8002104:	f7ff fcfc 	bl	8001b00 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002108:	2201      	movs	r2, #1
 800210a:	2140      	movs	r1, #64	; 0x40
 800210c:	484e      	ldr	r0, [pc, #312]	; (8002248 <ILI9341_Draw_Pixel+0x188>)
 800210e:	f001 febb 	bl	8003e88 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002112:	2201      	movs	r2, #1
 8002114:	2110      	movs	r1, #16
 8002116:	484c      	ldr	r0, [pc, #304]	; (8002248 <ILI9341_Draw_Pixel+0x188>)
 8002118:	f001 feb6 	bl	8003e88 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800211c:	2200      	movs	r2, #0
 800211e:	2110      	movs	r1, #16
 8002120:	4849      	ldr	r0, [pc, #292]	; (8002248 <ILI9341_Draw_Pixel+0x188>)
 8002122:	f001 feb1 	bl	8003e88 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	b29b      	uxth	r3, r3
 800212c:	b2db      	uxtb	r3, r3
 800212e:	753b      	strb	r3, [r7, #20]
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	757b      	strb	r3, [r7, #21]
 8002136:	88fb      	ldrh	r3, [r7, #6]
 8002138:	3301      	adds	r3, #1
 800213a:	121b      	asrs	r3, r3, #8
 800213c:	b2db      	uxtb	r3, r3
 800213e:	75bb      	strb	r3, [r7, #22]
 8002140:	88fb      	ldrh	r3, [r7, #6]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	3301      	adds	r3, #1
 8002146:	b2db      	uxtb	r3, r3
 8002148:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 800214a:	f107 0114 	add.w	r1, r7, #20
 800214e:	2301      	movs	r3, #1
 8002150:	2204      	movs	r2, #4
 8002152:	483e      	ldr	r0, [pc, #248]	; (800224c <ILI9341_Draw_Pixel+0x18c>)
 8002154:	f006 f8c7 	bl	80082e6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002158:	2201      	movs	r2, #1
 800215a:	2110      	movs	r1, #16
 800215c:	483a      	ldr	r0, [pc, #232]	; (8002248 <ILI9341_Draw_Pixel+0x188>)
 800215e:	f001 fe93 	bl	8003e88 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002162:	2200      	movs	r2, #0
 8002164:	2140      	movs	r1, #64	; 0x40
 8002166:	4838      	ldr	r0, [pc, #224]	; (8002248 <ILI9341_Draw_Pixel+0x188>)
 8002168:	f001 fe8e 	bl	8003e88 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800216c:	2200      	movs	r2, #0
 800216e:	2110      	movs	r1, #16
 8002170:	4835      	ldr	r0, [pc, #212]	; (8002248 <ILI9341_Draw_Pixel+0x188>)
 8002172:	f001 fe89 	bl	8003e88 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8002176:	202b      	movs	r0, #43	; 0x2b
 8002178:	f7ff fcc2 	bl	8001b00 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 800217c:	2201      	movs	r2, #1
 800217e:	2140      	movs	r1, #64	; 0x40
 8002180:	4831      	ldr	r0, [pc, #196]	; (8002248 <ILI9341_Draw_Pixel+0x188>)
 8002182:	f001 fe81 	bl	8003e88 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002186:	2201      	movs	r2, #1
 8002188:	2110      	movs	r1, #16
 800218a:	482f      	ldr	r0, [pc, #188]	; (8002248 <ILI9341_Draw_Pixel+0x188>)
 800218c:	f001 fe7c 	bl	8003e88 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002190:	2200      	movs	r2, #0
 8002192:	2110      	movs	r1, #16
 8002194:	482c      	ldr	r0, [pc, #176]	; (8002248 <ILI9341_Draw_Pixel+0x188>)
 8002196:	f001 fe77 	bl	8003e88 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 800219a:	88bb      	ldrh	r3, [r7, #4]
 800219c:	0a1b      	lsrs	r3, r3, #8
 800219e:	b29b      	uxth	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	743b      	strb	r3, [r7, #16]
 80021a4:	88bb      	ldrh	r3, [r7, #4]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	747b      	strb	r3, [r7, #17]
 80021aa:	88bb      	ldrh	r3, [r7, #4]
 80021ac:	3301      	adds	r3, #1
 80021ae:	121b      	asrs	r3, r3, #8
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	74bb      	strb	r3, [r7, #18]
 80021b4:	88bb      	ldrh	r3, [r7, #4]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	3301      	adds	r3, #1
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80021be:	f107 0110 	add.w	r1, r7, #16
 80021c2:	2301      	movs	r3, #1
 80021c4:	2204      	movs	r2, #4
 80021c6:	4821      	ldr	r0, [pc, #132]	; (800224c <ILI9341_Draw_Pixel+0x18c>)
 80021c8:	f006 f88d 	bl	80082e6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80021cc:	2201      	movs	r2, #1
 80021ce:	2110      	movs	r1, #16
 80021d0:	481d      	ldr	r0, [pc, #116]	; (8002248 <ILI9341_Draw_Pixel+0x188>)
 80021d2:	f001 fe59 	bl	8003e88 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80021d6:	2200      	movs	r2, #0
 80021d8:	2140      	movs	r1, #64	; 0x40
 80021da:	481b      	ldr	r0, [pc, #108]	; (8002248 <ILI9341_Draw_Pixel+0x188>)
 80021dc:	f001 fe54 	bl	8003e88 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80021e0:	2200      	movs	r2, #0
 80021e2:	2110      	movs	r1, #16
 80021e4:	4818      	ldr	r0, [pc, #96]	; (8002248 <ILI9341_Draw_Pixel+0x188>)
 80021e6:	f001 fe4f 	bl	8003e88 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80021ea:	202c      	movs	r0, #44	; 0x2c
 80021ec:	f7ff fc88 	bl	8001b00 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80021f0:	2201      	movs	r2, #1
 80021f2:	2140      	movs	r1, #64	; 0x40
 80021f4:	4814      	ldr	r0, [pc, #80]	; (8002248 <ILI9341_Draw_Pixel+0x188>)
 80021f6:	f001 fe47 	bl	8003e88 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80021fa:	2201      	movs	r2, #1
 80021fc:	2110      	movs	r1, #16
 80021fe:	4812      	ldr	r0, [pc, #72]	; (8002248 <ILI9341_Draw_Pixel+0x188>)
 8002200:	f001 fe42 	bl	8003e88 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002204:	2200      	movs	r2, #0
 8002206:	2110      	movs	r1, #16
 8002208:	480f      	ldr	r0, [pc, #60]	; (8002248 <ILI9341_Draw_Pixel+0x188>)
 800220a:	f001 fe3d 	bl	8003e88 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 800220e:	887b      	ldrh	r3, [r7, #2]
 8002210:	0a1b      	lsrs	r3, r3, #8
 8002212:	b29b      	uxth	r3, r3
 8002214:	b2db      	uxtb	r3, r3
 8002216:	733b      	strb	r3, [r7, #12]
 8002218:	887b      	ldrh	r3, [r7, #2]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 800221e:	f107 010c 	add.w	r1, r7, #12
 8002222:	2301      	movs	r3, #1
 8002224:	2202      	movs	r2, #2
 8002226:	4809      	ldr	r0, [pc, #36]	; (800224c <ILI9341_Draw_Pixel+0x18c>)
 8002228:	f006 f85d 	bl	80082e6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800222c:	2201      	movs	r2, #1
 800222e:	2110      	movs	r1, #16
 8002230:	4805      	ldr	r0, [pc, #20]	; (8002248 <ILI9341_Draw_Pixel+0x188>)
 8002232:	f001 fe29 	bl	8003e88 <HAL_GPIO_WritePin>
 8002236:	e000      	b.n	800223a <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002238:	bf00      	nop
	
}
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	2000000a 	.word	0x2000000a
 8002244:	20000008 	.word	0x20000008
 8002248:	40021000 	.word	0x40021000
 800224c:	20000288 	.word	0x20000288

08002250 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4604      	mov	r4, r0
 8002258:	4608      	mov	r0, r1
 800225a:	4611      	mov	r1, r2
 800225c:	461a      	mov	r2, r3
 800225e:	4623      	mov	r3, r4
 8002260:	80fb      	strh	r3, [r7, #6]
 8002262:	4603      	mov	r3, r0
 8002264:	80bb      	strh	r3, [r7, #4]
 8002266:	460b      	mov	r3, r1
 8002268:	807b      	strh	r3, [r7, #2]
 800226a:	4613      	mov	r3, r2
 800226c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800226e:	4b24      	ldr	r3, [pc, #144]	; (8002300 <ILI9341_Draw_Rectangle+0xb0>)
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	b29b      	uxth	r3, r3
 8002274:	88fa      	ldrh	r2, [r7, #6]
 8002276:	429a      	cmp	r2, r3
 8002278:	d23d      	bcs.n	80022f6 <ILI9341_Draw_Rectangle+0xa6>
 800227a:	4b22      	ldr	r3, [pc, #136]	; (8002304 <ILI9341_Draw_Rectangle+0xb4>)
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	b29b      	uxth	r3, r3
 8002280:	88ba      	ldrh	r2, [r7, #4]
 8002282:	429a      	cmp	r2, r3
 8002284:	d237      	bcs.n	80022f6 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8002286:	88fa      	ldrh	r2, [r7, #6]
 8002288:	887b      	ldrh	r3, [r7, #2]
 800228a:	4413      	add	r3, r2
 800228c:	4a1c      	ldr	r2, [pc, #112]	; (8002300 <ILI9341_Draw_Rectangle+0xb0>)
 800228e:	8812      	ldrh	r2, [r2, #0]
 8002290:	b292      	uxth	r2, r2
 8002292:	4293      	cmp	r3, r2
 8002294:	dd05      	ble.n	80022a2 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8002296:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <ILI9341_Draw_Rectangle+0xb0>)
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	b29a      	uxth	r2, r3
 800229c:	88fb      	ldrh	r3, [r7, #6]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80022a2:	88ba      	ldrh	r2, [r7, #4]
 80022a4:	883b      	ldrh	r3, [r7, #0]
 80022a6:	4413      	add	r3, r2
 80022a8:	4a16      	ldr	r2, [pc, #88]	; (8002304 <ILI9341_Draw_Rectangle+0xb4>)
 80022aa:	8812      	ldrh	r2, [r2, #0]
 80022ac:	b292      	uxth	r2, r2
 80022ae:	4293      	cmp	r3, r2
 80022b0:	dd05      	ble.n	80022be <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 80022b2:	4b14      	ldr	r3, [pc, #80]	; (8002304 <ILI9341_Draw_Rectangle+0xb4>)
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	88bb      	ldrh	r3, [r7, #4]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 80022be:	88fa      	ldrh	r2, [r7, #6]
 80022c0:	887b      	ldrh	r3, [r7, #2]
 80022c2:	4413      	add	r3, r2
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b29c      	uxth	r4, r3
 80022ca:	88ba      	ldrh	r2, [r7, #4]
 80022cc:	883b      	ldrh	r3, [r7, #0]
 80022ce:	4413      	add	r3, r2
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	88b9      	ldrh	r1, [r7, #4]
 80022d8:	88f8      	ldrh	r0, [r7, #6]
 80022da:	4622      	mov	r2, r4
 80022dc:	f7ff fc5e 	bl	8001b9c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80022e0:	883b      	ldrh	r3, [r7, #0]
 80022e2:	887a      	ldrh	r2, [r7, #2]
 80022e4:	fb02 f303 	mul.w	r3, r2, r3
 80022e8:	461a      	mov	r2, r3
 80022ea:	8b3b      	ldrh	r3, [r7, #24]
 80022ec:	4611      	mov	r1, r2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fe2a 	bl	8001f48 <ILI9341_Draw_Colour_Burst>
 80022f4:	e000      	b.n	80022f8 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80022f6:	bf00      	nop
}
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd90      	pop	{r4, r7, pc}
 80022fe:	bf00      	nop
 8002300:	2000000a 	.word	0x2000000a
 8002304:	20000008 	.word	0x20000008

08002308 <menu>:
uint8_t pointer_on_selected_menu =1;
//uint8_t p =0;
//void print_sign(p);

void menu()
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
	Menu_SetGenericWriteCallback(Generic_Write);  //передача показника на Generic_Write функцію  point in Menu_SetGenericWriteCallback
 800230e:	4832      	ldr	r0, [pc, #200]	; (80023d8 <menu+0xd0>)
 8002310:	f000 fd4a 	bl	8002da8 <Menu_SetGenericWriteCallback>

	//print_all_top_menu();
	Menu_Navigate(&Menu_1);
 8002314:	4831      	ldr	r0, [pc, #196]	; (80023dc <menu+0xd4>)
 8002316:	f000 fd19 	bl	8002d4c <Menu_Navigate>
//	print_sign(p);
//	Menu_Navigate(&Menu_2);
//	Menu_Navigate(&Menu_3);
	while (1)
	  {
	   uint8_t pressed_key = getPressKey();
 800231a:	f000 fc4f 	bl	8002bbc <getPressKey>
 800231e:	4603      	mov	r3, r0
 8002320:	71fb      	strb	r3, [r7, #7]

	   if (pressed_key != BUTTON_NOTHING && !flagPressed)
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	2bff      	cmp	r3, #255	; 0xff
 8002326:	d04a      	beq.n	80023be <menu+0xb6>
 8002328:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <menu+0xd8>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	f083 0301 	eor.w	r3, r3, #1
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d043      	beq.n	80023be <menu+0xb6>
	   {
			flagPressed = true;
 8002336:	4b2a      	ldr	r3, [pc, #168]	; (80023e0 <menu+0xd8>)
 8002338:	2201      	movs	r2, #1
 800233a:	701a      	strb	r2, [r3, #0]
			switch(pressed_key)
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	2b04      	cmp	r3, #4
 8002340:	d83b      	bhi.n	80023ba <menu+0xb2>
 8002342:	a201      	add	r2, pc, #4	; (adr r2, 8002348 <menu+0x40>)
 8002344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002348:	0800235d 	.word	0x0800235d
 800234c:	0800236d 	.word	0x0800236d
 8002350:	08002389 	.word	0x08002389
 8002354:	080023a5 	.word	0x080023a5
 8002358:	080023b5 	.word	0x080023b5
			{
				case BUTTON_LEFT:
					Menu_Navigate(MENU_PARENT);
 800235c:	f000 fcea 	bl	8002d34 <Menu_GetCurrentMenu>
 8002360:	4603      	mov	r3, r0
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4618      	mov	r0, r3
 8002366:	f000 fcf1 	bl	8002d4c <Menu_Navigate>
					break;
 800236a:	e027      	b.n	80023bc <menu+0xb4>

				case BUTTON_UP:
					pointer_on_selected_menu--;			// <<<<<<<<<<<<<<<<
 800236c:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <menu+0xdc>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	3b01      	subs	r3, #1
 8002372:	b2da      	uxtb	r2, r3
 8002374:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <menu+0xdc>)
 8002376:	701a      	strb	r2, [r3, #0]
					Menu_Navigate(MENU_PREVIOUS);
 8002378:	f000 fcdc 	bl	8002d34 <Menu_GetCurrentMenu>
 800237c:	4603      	mov	r3, r0
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	4618      	mov	r0, r3
 8002382:	f000 fce3 	bl	8002d4c <Menu_Navigate>
					break;
 8002386:	e019      	b.n	80023bc <menu+0xb4>

				case BUTTON_DOWN:
					pointer_on_selected_menu++;			// <<<<<<<<<<<<<<<<
 8002388:	4b16      	ldr	r3, [pc, #88]	; (80023e4 <menu+0xdc>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	3301      	adds	r3, #1
 800238e:	b2da      	uxtb	r2, r3
 8002390:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <menu+0xdc>)
 8002392:	701a      	strb	r2, [r3, #0]
					Menu_Navigate(MENU_NEXT);
 8002394:	f000 fcce 	bl	8002d34 <Menu_GetCurrentMenu>
 8002398:	4603      	mov	r3, r0
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f000 fcd5 	bl	8002d4c <Menu_Navigate>
					break;
 80023a2:	e00b      	b.n	80023bc <menu+0xb4>

				case BUTTON_RIGHT:
					Menu_Navigate(MENU_CHILD);
 80023a4:	f000 fcc6 	bl	8002d34 <Menu_GetCurrentMenu>
 80023a8:	4603      	mov	r3, r0
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 fccd 	bl	8002d4c <Menu_Navigate>
					break;
 80023b2:	e003      	b.n	80023bc <menu+0xb4>

				case BUTTON_SELECT:
					Menu_EnterCurrentItem();
 80023b4:	f000 fd0c 	bl	8002dd0 <Menu_EnterCurrentItem>
					break;
 80023b8:	e000      	b.n	80023bc <menu+0xb4>

			 default:
			  break;
 80023ba:	bf00      	nop
			switch(pressed_key)
 80023bc:	e00b      	b.n	80023d6 <menu+0xce>
			}
	   }
	   else if (getPressKey() == BUTTON_NOTHING && flagPressed)
 80023be:	f000 fbfd 	bl	8002bbc <getPressKey>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2bff      	cmp	r3, #255	; 0xff
 80023c6:	d1a8      	bne.n	800231a <menu+0x12>
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <menu+0xd8>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0a4      	beq.n	800231a <menu+0x12>
	   {
		   flagPressed = false;
 80023d0:	4b03      	ldr	r3, [pc, #12]	; (80023e0 <menu+0xd8>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
	  {
 80023d6:	e7a0      	b.n	800231a <menu+0x12>
 80023d8:	08002ced 	.word	0x08002ced
 80023dc:	0800d1f4 	.word	0x0800d1f4
 80023e0:	20000200 	.word	0x20000200
 80023e4:	20000148 	.word	0x20000148

080023e8 <print_all_top_menu>:
	  }
}
// -----------------------------------------------------------------------
//// TEST PRINT FUNCTION <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
void print_all_top_menu(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 80023ee:	2300      	movs	r3, #0
 80023f0:	9301      	str	r3, [sp, #4]
 80023f2:	2302      	movs	r3, #2
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023fa:	226e      	movs	r2, #110	; 0x6e
 80023fc:	211e      	movs	r1, #30
 80023fe:	4884      	ldr	r0, [pc, #528]	; (8002610 <print_all_top_menu+0x228>)
 8002400:	f7ff fb44 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 8002404:	2300      	movs	r3, #0
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	2302      	movs	r3, #2
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002410:	2282      	movs	r2, #130	; 0x82
 8002412:	211e      	movs	r1, #30
 8002414:	487e      	ldr	r0, [pc, #504]	; (8002610 <print_all_top_menu+0x228>)
 8002416:	f7ff fb39 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 800241a:	2300      	movs	r3, #0
 800241c:	9301      	str	r3, [sp, #4]
 800241e:	2302      	movs	r3, #2
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002426:	2296      	movs	r2, #150	; 0x96
 8002428:	211e      	movs	r1, #30
 800242a:	4879      	ldr	r0, [pc, #484]	; (8002610 <print_all_top_menu+0x228>)
 800242c:	f7ff fb2e 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 8002430:	2300      	movs	r3, #0
 8002432:	9301      	str	r3, [sp, #4]
 8002434:	2302      	movs	r3, #2
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800243c:	22aa      	movs	r2, #170	; 0xaa
 800243e:	211e      	movs	r1, #30
 8002440:	4873      	ldr	r0, [pc, #460]	; (8002610 <print_all_top_menu+0x228>)
 8002442:	f7ff fb23 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 8002446:	2300      	movs	r3, #0
 8002448:	9301      	str	r3, [sp, #4]
 800244a:	2302      	movs	r3, #2
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002452:	22be      	movs	r2, #190	; 0xbe
 8002454:	211e      	movs	r1, #30
 8002456:	486e      	ldr	r0, [pc, #440]	; (8002610 <print_all_top_menu+0x228>)
 8002458:	f7ff fb18 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 800245c:	2300      	movs	r3, #0
 800245e:	9301      	str	r3, [sp, #4]
 8002460:	2302      	movs	r3, #2
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002468:	22d2      	movs	r2, #210	; 0xd2
 800246a:	211e      	movs	r1, #30
 800246c:	4868      	ldr	r0, [pc, #416]	; (8002610 <print_all_top_menu+0x228>)
 800246e:	f7ff fb0d 	bl	8001a8c <ILI9341_Draw_Text>

	// Print all main menus
	ILI9341_Draw_Text(main_menus[0], 30, 110, WHITE, 2, BLACK);
 8002472:	2300      	movs	r3, #0
 8002474:	9301      	str	r3, [sp, #4]
 8002476:	2302      	movs	r3, #2
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800247e:	226e      	movs	r2, #110	; 0x6e
 8002480:	211e      	movs	r1, #30
 8002482:	4864      	ldr	r0, [pc, #400]	; (8002614 <print_all_top_menu+0x22c>)
 8002484:	f7ff fb02 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[1], 30, 130, WHITE, 2, BLACK);
 8002488:	2300      	movs	r3, #0
 800248a:	9301      	str	r3, [sp, #4]
 800248c:	2302      	movs	r3, #2
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002494:	2282      	movs	r2, #130	; 0x82
 8002496:	211e      	movs	r1, #30
 8002498:	485f      	ldr	r0, [pc, #380]	; (8002618 <print_all_top_menu+0x230>)
 800249a:	f7ff faf7 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[2], 30, 150, WHITE, 2, BLACK);
 800249e:	2300      	movs	r3, #0
 80024a0:	9301      	str	r3, [sp, #4]
 80024a2:	2302      	movs	r3, #2
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024aa:	2296      	movs	r2, #150	; 0x96
 80024ac:	211e      	movs	r1, #30
 80024ae:	485b      	ldr	r0, [pc, #364]	; (800261c <print_all_top_menu+0x234>)
 80024b0:	f7ff faec 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[3], 30, 170, WHITE, 2, BLACK);
 80024b4:	2300      	movs	r3, #0
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	2302      	movs	r3, #2
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024c0:	22aa      	movs	r2, #170	; 0xaa
 80024c2:	211e      	movs	r1, #30
 80024c4:	4856      	ldr	r0, [pc, #344]	; (8002620 <print_all_top_menu+0x238>)
 80024c6:	f7ff fae1 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[4], 30, 190, WHITE, 2, BLACK);
 80024ca:	2300      	movs	r3, #0
 80024cc:	9301      	str	r3, [sp, #4]
 80024ce:	2302      	movs	r3, #2
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024d6:	22be      	movs	r2, #190	; 0xbe
 80024d8:	211e      	movs	r1, #30
 80024da:	4852      	ldr	r0, [pc, #328]	; (8002624 <print_all_top_menu+0x23c>)
 80024dc:	f7ff fad6 	bl	8001a8c <ILI9341_Draw_Text>

	//
	if(pointer_on_selected_menu <= 0)
 80024e0:	4b51      	ldr	r3, [pc, #324]	; (8002628 <print_all_top_menu+0x240>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d102      	bne.n	80024ee <print_all_top_menu+0x106>
	{
		pointer_on_selected_menu = 5;
 80024e8:	4b4f      	ldr	r3, [pc, #316]	; (8002628 <print_all_top_menu+0x240>)
 80024ea:	2205      	movs	r2, #5
 80024ec:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 6)
 80024ee:	4b4e      	ldr	r3, [pc, #312]	; (8002628 <print_all_top_menu+0x240>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b05      	cmp	r3, #5
 80024f4:	d902      	bls.n	80024fc <print_all_top_menu+0x114>
	{
		pointer_on_selected_menu = 1;
 80024f6:	4b4c      	ldr	r3, [pc, #304]	; (8002628 <print_all_top_menu+0x240>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	701a      	strb	r2, [r3, #0]
	}
	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 80024fc:	2300      	movs	r3, #0
 80024fe:	9301      	str	r3, [sp, #4]
 8002500:	2302      	movs	r3, #2
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002508:	226e      	movs	r2, #110	; 0x6e
 800250a:	2105      	movs	r1, #5
 800250c:	4847      	ldr	r0, [pc, #284]	; (800262c <print_all_top_menu+0x244>)
 800250e:	f7ff fabd 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 8002512:	2300      	movs	r3, #0
 8002514:	9301      	str	r3, [sp, #4]
 8002516:	2302      	movs	r3, #2
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800251e:	2282      	movs	r2, #130	; 0x82
 8002520:	2105      	movs	r1, #5
 8002522:	4842      	ldr	r0, [pc, #264]	; (800262c <print_all_top_menu+0x244>)
 8002524:	f7ff fab2 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 8002528:	2300      	movs	r3, #0
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	2302      	movs	r3, #2
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002534:	2296      	movs	r2, #150	; 0x96
 8002536:	2105      	movs	r1, #5
 8002538:	483c      	ldr	r0, [pc, #240]	; (800262c <print_all_top_menu+0x244>)
 800253a:	f7ff faa7 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 800253e:	2300      	movs	r3, #0
 8002540:	9301      	str	r3, [sp, #4]
 8002542:	2302      	movs	r3, #2
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800254a:	22aa      	movs	r2, #170	; 0xaa
 800254c:	2105      	movs	r1, #5
 800254e:	4837      	ldr	r0, [pc, #220]	; (800262c <print_all_top_menu+0x244>)
 8002550:	f7ff fa9c 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 8002554:	2300      	movs	r3, #0
 8002556:	9301      	str	r3, [sp, #4]
 8002558:	2302      	movs	r3, #2
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002560:	22be      	movs	r2, #190	; 0xbe
 8002562:	2105      	movs	r1, #5
 8002564:	4831      	ldr	r0, [pc, #196]	; (800262c <print_all_top_menu+0x244>)
 8002566:	f7ff fa91 	bl	8001a8c <ILI9341_Draw_Text>

	// Point pointer on menu
	switch (pointer_on_selected_menu)
 800256a:	4b2f      	ldr	r3, [pc, #188]	; (8002628 <print_all_top_menu+0x240>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	3b01      	subs	r3, #1
 8002570:	2b04      	cmp	r3, #4
 8002572:	d849      	bhi.n	8002608 <print_all_top_menu+0x220>
 8002574:	a201      	add	r2, pc, #4	; (adr r2, 800257c <print_all_top_menu+0x194>)
 8002576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257a:	bf00      	nop
 800257c:	08002591 	.word	0x08002591
 8002580:	080025a9 	.word	0x080025a9
 8002584:	080025c1 	.word	0x080025c1
 8002588:	080025d9 	.word	0x080025d9
 800258c:	080025f1 	.word	0x080025f1
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 8002590:	2300      	movs	r3, #0
 8002592:	9301      	str	r3, [sp, #4]
 8002594:	2302      	movs	r3, #2
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800259c:	226e      	movs	r2, #110	; 0x6e
 800259e:	2105      	movs	r1, #5
 80025a0:	4823      	ldr	r0, [pc, #140]	; (8002630 <print_all_top_menu+0x248>)
 80025a2:	f7ff fa73 	bl	8001a8c <ILI9341_Draw_Text>
			break;
 80025a6:	e02f      	b.n	8002608 <print_all_top_menu+0x220>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 80025a8:	2300      	movs	r3, #0
 80025aa:	9301      	str	r3, [sp, #4]
 80025ac:	2302      	movs	r3, #2
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025b4:	2282      	movs	r2, #130	; 0x82
 80025b6:	2105      	movs	r1, #5
 80025b8:	481d      	ldr	r0, [pc, #116]	; (8002630 <print_all_top_menu+0x248>)
 80025ba:	f7ff fa67 	bl	8001a8c <ILI9341_Draw_Text>
			break;
 80025be:	e023      	b.n	8002608 <print_all_top_menu+0x220>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 80025c0:	2300      	movs	r3, #0
 80025c2:	9301      	str	r3, [sp, #4]
 80025c4:	2302      	movs	r3, #2
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025cc:	2296      	movs	r2, #150	; 0x96
 80025ce:	2105      	movs	r1, #5
 80025d0:	4817      	ldr	r0, [pc, #92]	; (8002630 <print_all_top_menu+0x248>)
 80025d2:	f7ff fa5b 	bl	8001a8c <ILI9341_Draw_Text>
			break;
 80025d6:	e017      	b.n	8002608 <print_all_top_menu+0x220>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 80025d8:	2300      	movs	r3, #0
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	2302      	movs	r3, #2
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025e4:	22aa      	movs	r2, #170	; 0xaa
 80025e6:	2105      	movs	r1, #5
 80025e8:	4811      	ldr	r0, [pc, #68]	; (8002630 <print_all_top_menu+0x248>)
 80025ea:	f7ff fa4f 	bl	8001a8c <ILI9341_Draw_Text>
			break;
 80025ee:	e00b      	b.n	8002608 <print_all_top_menu+0x220>
		case 5:
			ILI9341_Draw_Text( "->", 5, 190, RED, 2, BLACK);
 80025f0:	2300      	movs	r3, #0
 80025f2:	9301      	str	r3, [sp, #4]
 80025f4:	2302      	movs	r3, #2
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025fc:	22be      	movs	r2, #190	; 0xbe
 80025fe:	2105      	movs	r1, #5
 8002600:	480b      	ldr	r0, [pc, #44]	; (8002630 <print_all_top_menu+0x248>)
 8002602:	f7ff fa43 	bl	8001a8c <ILI9341_Draw_Text>
			break;
 8002606:	bf00      	nop
	}

}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	0800ce6c 	.word	0x0800ce6c
 8002614:	20000010 	.word	0x20000010
 8002618:	2000002e 	.word	0x2000002e
 800261c:	2000004c 	.word	0x2000004c
 8002620:	2000006a 	.word	0x2000006a
 8002624:	20000088 	.word	0x20000088
 8002628:	20000148 	.word	0x20000148
 800262c:	0800ce90 	.word	0x0800ce90
 8002630:	0800ce94 	.word	0x0800ce94

08002634 <print_all_menu_1_menus>:
// -----------------------------------------------------------------------
void print_all_menu_1_menus(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 800263a:	2300      	movs	r3, #0
 800263c:	9301      	str	r3, [sp, #4]
 800263e:	2302      	movs	r3, #2
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002646:	226e      	movs	r2, #110	; 0x6e
 8002648:	211e      	movs	r1, #30
 800264a:	4877      	ldr	r0, [pc, #476]	; (8002828 <print_all_menu_1_menus+0x1f4>)
 800264c:	f7ff fa1e 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 8002650:	2300      	movs	r3, #0
 8002652:	9301      	str	r3, [sp, #4]
 8002654:	2302      	movs	r3, #2
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800265c:	2282      	movs	r2, #130	; 0x82
 800265e:	211e      	movs	r1, #30
 8002660:	4871      	ldr	r0, [pc, #452]	; (8002828 <print_all_menu_1_menus+0x1f4>)
 8002662:	f7ff fa13 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 8002666:	2300      	movs	r3, #0
 8002668:	9301      	str	r3, [sp, #4]
 800266a:	2302      	movs	r3, #2
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002672:	2296      	movs	r2, #150	; 0x96
 8002674:	211e      	movs	r1, #30
 8002676:	486c      	ldr	r0, [pc, #432]	; (8002828 <print_all_menu_1_menus+0x1f4>)
 8002678:	f7ff fa08 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 800267c:	2300      	movs	r3, #0
 800267e:	9301      	str	r3, [sp, #4]
 8002680:	2302      	movs	r3, #2
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002688:	22aa      	movs	r2, #170	; 0xaa
 800268a:	211e      	movs	r1, #30
 800268c:	4866      	ldr	r0, [pc, #408]	; (8002828 <print_all_menu_1_menus+0x1f4>)
 800268e:	f7ff f9fd 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 8002692:	2300      	movs	r3, #0
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	2302      	movs	r3, #2
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800269e:	22be      	movs	r2, #190	; 0xbe
 80026a0:	211e      	movs	r1, #30
 80026a2:	4861      	ldr	r0, [pc, #388]	; (8002828 <print_all_menu_1_menus+0x1f4>)
 80026a4:	f7ff f9f2 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 80026a8:	2300      	movs	r3, #0
 80026aa:	9301      	str	r3, [sp, #4]
 80026ac:	2302      	movs	r3, #2
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026b4:	22d2      	movs	r2, #210	; 0xd2
 80026b6:	211e      	movs	r1, #30
 80026b8:	485b      	ldr	r0, [pc, #364]	; (8002828 <print_all_menu_1_menus+0x1f4>)
 80026ba:	f7ff f9e7 	bl	8001a8c <ILI9341_Draw_Text>

	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 80026be:	2300      	movs	r3, #0
 80026c0:	9301      	str	r3, [sp, #4]
 80026c2:	2302      	movs	r3, #2
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ca:	226e      	movs	r2, #110	; 0x6e
 80026cc:	2105      	movs	r1, #5
 80026ce:	4857      	ldr	r0, [pc, #348]	; (800282c <print_all_menu_1_menus+0x1f8>)
 80026d0:	f7ff f9dc 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 80026d4:	2300      	movs	r3, #0
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	2302      	movs	r3, #2
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026e0:	2282      	movs	r2, #130	; 0x82
 80026e2:	2105      	movs	r1, #5
 80026e4:	4851      	ldr	r0, [pc, #324]	; (800282c <print_all_menu_1_menus+0x1f8>)
 80026e6:	f7ff f9d1 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 80026ea:	2300      	movs	r3, #0
 80026ec:	9301      	str	r3, [sp, #4]
 80026ee:	2302      	movs	r3, #2
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026f6:	2296      	movs	r2, #150	; 0x96
 80026f8:	2105      	movs	r1, #5
 80026fa:	484c      	ldr	r0, [pc, #304]	; (800282c <print_all_menu_1_menus+0x1f8>)
 80026fc:	f7ff f9c6 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 8002700:	2300      	movs	r3, #0
 8002702:	9301      	str	r3, [sp, #4]
 8002704:	2302      	movs	r3, #2
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800270c:	22aa      	movs	r2, #170	; 0xaa
 800270e:	2105      	movs	r1, #5
 8002710:	4846      	ldr	r0, [pc, #280]	; (800282c <print_all_menu_1_menus+0x1f8>)
 8002712:	f7ff f9bb 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 8002716:	2300      	movs	r3, #0
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	2302      	movs	r3, #2
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002722:	22be      	movs	r2, #190	; 0xbe
 8002724:	2105      	movs	r1, #5
 8002726:	4841      	ldr	r0, [pc, #260]	; (800282c <print_all_menu_1_menus+0x1f8>)
 8002728:	f7ff f9b0 	bl	8001a8c <ILI9341_Draw_Text>

	ILI9341_Draw_Text(menu_1[0], 30, 110, WHITE, 2, BLACK);
 800272c:	2300      	movs	r3, #0
 800272e:	9301      	str	r3, [sp, #4]
 8002730:	2302      	movs	r3, #2
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002738:	226e      	movs	r2, #110	; 0x6e
 800273a:	211e      	movs	r1, #30
 800273c:	483c      	ldr	r0, [pc, #240]	; (8002830 <print_all_menu_1_menus+0x1fc>)
 800273e:	f7ff f9a5 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[1], 30, 130, WHITE, 2, BLACK);
 8002742:	2300      	movs	r3, #0
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	2302      	movs	r3, #2
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800274e:	2282      	movs	r2, #130	; 0x82
 8002750:	211e      	movs	r1, #30
 8002752:	4838      	ldr	r0, [pc, #224]	; (8002834 <print_all_menu_1_menus+0x200>)
 8002754:	f7ff f99a 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[2], 30, 150, WHITE, 2, BLACK);
 8002758:	2300      	movs	r3, #0
 800275a:	9301      	str	r3, [sp, #4]
 800275c:	2302      	movs	r3, #2
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002764:	2296      	movs	r2, #150	; 0x96
 8002766:	211e      	movs	r1, #30
 8002768:	4833      	ldr	r0, [pc, #204]	; (8002838 <print_all_menu_1_menus+0x204>)
 800276a:	f7ff f98f 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[3], 30, 170, WHITE, 2, BLACK);
 800276e:	2300      	movs	r3, #0
 8002770:	9301      	str	r3, [sp, #4]
 8002772:	2302      	movs	r3, #2
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800277a:	22aa      	movs	r2, #170	; 0xaa
 800277c:	211e      	movs	r1, #30
 800277e:	482f      	ldr	r0, [pc, #188]	; (800283c <print_all_menu_1_menus+0x208>)
 8002780:	f7ff f984 	bl	8001a8c <ILI9341_Draw_Text>

	if(pointer_on_selected_menu <= 0)
 8002784:	4b2e      	ldr	r3, [pc, #184]	; (8002840 <print_all_menu_1_menus+0x20c>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d102      	bne.n	8002792 <print_all_menu_1_menus+0x15e>
	{
		pointer_on_selected_menu = 4;
 800278c:	4b2c      	ldr	r3, [pc, #176]	; (8002840 <print_all_menu_1_menus+0x20c>)
 800278e:	2204      	movs	r2, #4
 8002790:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 5)
 8002792:	4b2b      	ldr	r3, [pc, #172]	; (8002840 <print_all_menu_1_menus+0x20c>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b04      	cmp	r3, #4
 8002798:	d902      	bls.n	80027a0 <print_all_menu_1_menus+0x16c>
	{
		pointer_on_selected_menu = 1;
 800279a:	4b29      	ldr	r3, [pc, #164]	; (8002840 <print_all_menu_1_menus+0x20c>)
 800279c:	2201      	movs	r2, #1
 800279e:	701a      	strb	r2, [r3, #0]
	}

	switch (pointer_on_selected_menu)
 80027a0:	4b27      	ldr	r3, [pc, #156]	; (8002840 <print_all_menu_1_menus+0x20c>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	2b03      	cmp	r3, #3
 80027a8:	d83a      	bhi.n	8002820 <print_all_menu_1_menus+0x1ec>
 80027aa:	a201      	add	r2, pc, #4	; (adr r2, 80027b0 <print_all_menu_1_menus+0x17c>)
 80027ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b0:	080027c1 	.word	0x080027c1
 80027b4:	080027d9 	.word	0x080027d9
 80027b8:	080027f1 	.word	0x080027f1
 80027bc:	08002809 	.word	0x08002809
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 80027c0:	2300      	movs	r3, #0
 80027c2:	9301      	str	r3, [sp, #4]
 80027c4:	2302      	movs	r3, #2
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80027cc:	226e      	movs	r2, #110	; 0x6e
 80027ce:	2105      	movs	r1, #5
 80027d0:	481c      	ldr	r0, [pc, #112]	; (8002844 <print_all_menu_1_menus+0x210>)
 80027d2:	f7ff f95b 	bl	8001a8c <ILI9341_Draw_Text>
			break;
 80027d6:	e023      	b.n	8002820 <print_all_menu_1_menus+0x1ec>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 80027d8:	2300      	movs	r3, #0
 80027da:	9301      	str	r3, [sp, #4]
 80027dc:	2302      	movs	r3, #2
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80027e4:	2282      	movs	r2, #130	; 0x82
 80027e6:	2105      	movs	r1, #5
 80027e8:	4816      	ldr	r0, [pc, #88]	; (8002844 <print_all_menu_1_menus+0x210>)
 80027ea:	f7ff f94f 	bl	8001a8c <ILI9341_Draw_Text>
			break;
 80027ee:	e017      	b.n	8002820 <print_all_menu_1_menus+0x1ec>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 80027f0:	2300      	movs	r3, #0
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	2302      	movs	r3, #2
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80027fc:	2296      	movs	r2, #150	; 0x96
 80027fe:	2105      	movs	r1, #5
 8002800:	4810      	ldr	r0, [pc, #64]	; (8002844 <print_all_menu_1_menus+0x210>)
 8002802:	f7ff f943 	bl	8001a8c <ILI9341_Draw_Text>
			break;
 8002806:	e00b      	b.n	8002820 <print_all_menu_1_menus+0x1ec>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 8002808:	2300      	movs	r3, #0
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	2302      	movs	r3, #2
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002814:	22aa      	movs	r2, #170	; 0xaa
 8002816:	2105      	movs	r1, #5
 8002818:	480a      	ldr	r0, [pc, #40]	; (8002844 <print_all_menu_1_menus+0x210>)
 800281a:	f7ff f937 	bl	8001a8c <ILI9341_Draw_Text>
			break;
 800281e:	bf00      	nop
	}
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	0800ce6c 	.word	0x0800ce6c
 800282c:	0800ce90 	.word	0x0800ce90
 8002830:	200000a8 	.word	0x200000a8
 8002834:	200000bc 	.word	0x200000bc
 8002838:	200000d0 	.word	0x200000d0
 800283c:	200000e4 	.word	0x200000e4
 8002840:	20000148 	.word	0x20000148
 8002844:	0800ce94 	.word	0x0800ce94

08002848 <print_all_menu_1_1_menus>:
// -----------------------------------------------------------------------
void print_all_menu_1_1_menus(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 800284e:	2300      	movs	r3, #0
 8002850:	9301      	str	r3, [sp, #4]
 8002852:	2302      	movs	r3, #2
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800285a:	226e      	movs	r2, #110	; 0x6e
 800285c:	211e      	movs	r1, #30
 800285e:	4877      	ldr	r0, [pc, #476]	; (8002a3c <print_all_menu_1_1_menus+0x1f4>)
 8002860:	f7ff f914 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 8002864:	2300      	movs	r3, #0
 8002866:	9301      	str	r3, [sp, #4]
 8002868:	2302      	movs	r3, #2
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002870:	2282      	movs	r2, #130	; 0x82
 8002872:	211e      	movs	r1, #30
 8002874:	4871      	ldr	r0, [pc, #452]	; (8002a3c <print_all_menu_1_1_menus+0x1f4>)
 8002876:	f7ff f909 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 800287a:	2300      	movs	r3, #0
 800287c:	9301      	str	r3, [sp, #4]
 800287e:	2302      	movs	r3, #2
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002886:	2296      	movs	r2, #150	; 0x96
 8002888:	211e      	movs	r1, #30
 800288a:	486c      	ldr	r0, [pc, #432]	; (8002a3c <print_all_menu_1_1_menus+0x1f4>)
 800288c:	f7ff f8fe 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 8002890:	2300      	movs	r3, #0
 8002892:	9301      	str	r3, [sp, #4]
 8002894:	2302      	movs	r3, #2
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800289c:	22aa      	movs	r2, #170	; 0xaa
 800289e:	211e      	movs	r1, #30
 80028a0:	4866      	ldr	r0, [pc, #408]	; (8002a3c <print_all_menu_1_1_menus+0x1f4>)
 80028a2:	f7ff f8f3 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 80028a6:	2300      	movs	r3, #0
 80028a8:	9301      	str	r3, [sp, #4]
 80028aa:	2302      	movs	r3, #2
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028b2:	22be      	movs	r2, #190	; 0xbe
 80028b4:	211e      	movs	r1, #30
 80028b6:	4861      	ldr	r0, [pc, #388]	; (8002a3c <print_all_menu_1_1_menus+0x1f4>)
 80028b8:	f7ff f8e8 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 80028bc:	2300      	movs	r3, #0
 80028be:	9301      	str	r3, [sp, #4]
 80028c0:	2302      	movs	r3, #2
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028c8:	22d2      	movs	r2, #210	; 0xd2
 80028ca:	211e      	movs	r1, #30
 80028cc:	485b      	ldr	r0, [pc, #364]	; (8002a3c <print_all_menu_1_1_menus+0x1f4>)
 80028ce:	f7ff f8dd 	bl	8001a8c <ILI9341_Draw_Text>

	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 80028d2:	2300      	movs	r3, #0
 80028d4:	9301      	str	r3, [sp, #4]
 80028d6:	2302      	movs	r3, #2
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028de:	226e      	movs	r2, #110	; 0x6e
 80028e0:	2105      	movs	r1, #5
 80028e2:	4857      	ldr	r0, [pc, #348]	; (8002a40 <print_all_menu_1_1_menus+0x1f8>)
 80028e4:	f7ff f8d2 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 80028e8:	2300      	movs	r3, #0
 80028ea:	9301      	str	r3, [sp, #4]
 80028ec:	2302      	movs	r3, #2
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028f4:	2282      	movs	r2, #130	; 0x82
 80028f6:	2105      	movs	r1, #5
 80028f8:	4851      	ldr	r0, [pc, #324]	; (8002a40 <print_all_menu_1_1_menus+0x1f8>)
 80028fa:	f7ff f8c7 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 80028fe:	2300      	movs	r3, #0
 8002900:	9301      	str	r3, [sp, #4]
 8002902:	2302      	movs	r3, #2
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800290a:	2296      	movs	r2, #150	; 0x96
 800290c:	2105      	movs	r1, #5
 800290e:	484c      	ldr	r0, [pc, #304]	; (8002a40 <print_all_menu_1_1_menus+0x1f8>)
 8002910:	f7ff f8bc 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 8002914:	2300      	movs	r3, #0
 8002916:	9301      	str	r3, [sp, #4]
 8002918:	2302      	movs	r3, #2
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002920:	22aa      	movs	r2, #170	; 0xaa
 8002922:	2105      	movs	r1, #5
 8002924:	4846      	ldr	r0, [pc, #280]	; (8002a40 <print_all_menu_1_1_menus+0x1f8>)
 8002926:	f7ff f8b1 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 800292a:	2300      	movs	r3, #0
 800292c:	9301      	str	r3, [sp, #4]
 800292e:	2302      	movs	r3, #2
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002936:	22be      	movs	r2, #190	; 0xbe
 8002938:	2105      	movs	r1, #5
 800293a:	4841      	ldr	r0, [pc, #260]	; (8002a40 <print_all_menu_1_1_menus+0x1f8>)
 800293c:	f7ff f8a6 	bl	8001a8c <ILI9341_Draw_Text>

	ILI9341_Draw_Text(menu_1_1[0], 30, 110, WHITE, 2, BLACK);
 8002940:	2300      	movs	r3, #0
 8002942:	9301      	str	r3, [sp, #4]
 8002944:	2302      	movs	r3, #2
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800294c:	226e      	movs	r2, #110	; 0x6e
 800294e:	211e      	movs	r1, #30
 8002950:	483c      	ldr	r0, [pc, #240]	; (8002a44 <print_all_menu_1_1_menus+0x1fc>)
 8002952:	f7ff f89b 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[1], 30, 130, WHITE, 2, BLACK);
 8002956:	2300      	movs	r3, #0
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	2302      	movs	r3, #2
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002962:	2282      	movs	r2, #130	; 0x82
 8002964:	211e      	movs	r1, #30
 8002966:	4838      	ldr	r0, [pc, #224]	; (8002a48 <print_all_menu_1_1_menus+0x200>)
 8002968:	f7ff f890 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[2], 30, 150, WHITE, 2, BLACK);
 800296c:	2300      	movs	r3, #0
 800296e:	9301      	str	r3, [sp, #4]
 8002970:	2302      	movs	r3, #2
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002978:	2296      	movs	r2, #150	; 0x96
 800297a:	211e      	movs	r1, #30
 800297c:	4833      	ldr	r0, [pc, #204]	; (8002a4c <print_all_menu_1_1_menus+0x204>)
 800297e:	f7ff f885 	bl	8001a8c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[3], 30, 170, WHITE, 2, BLACK);
 8002982:	2300      	movs	r3, #0
 8002984:	9301      	str	r3, [sp, #4]
 8002986:	2302      	movs	r3, #2
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800298e:	22aa      	movs	r2, #170	; 0xaa
 8002990:	211e      	movs	r1, #30
 8002992:	482f      	ldr	r0, [pc, #188]	; (8002a50 <print_all_menu_1_1_menus+0x208>)
 8002994:	f7ff f87a 	bl	8001a8c <ILI9341_Draw_Text>

	if(pointer_on_selected_menu <= 0)
 8002998:	4b2e      	ldr	r3, [pc, #184]	; (8002a54 <print_all_menu_1_1_menus+0x20c>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d102      	bne.n	80029a6 <print_all_menu_1_1_menus+0x15e>
	{
		pointer_on_selected_menu = 4;
 80029a0:	4b2c      	ldr	r3, [pc, #176]	; (8002a54 <print_all_menu_1_1_menus+0x20c>)
 80029a2:	2204      	movs	r2, #4
 80029a4:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 5)
 80029a6:	4b2b      	ldr	r3, [pc, #172]	; (8002a54 <print_all_menu_1_1_menus+0x20c>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d902      	bls.n	80029b4 <print_all_menu_1_1_menus+0x16c>
	{
		pointer_on_selected_menu = 1;
 80029ae:	4b29      	ldr	r3, [pc, #164]	; (8002a54 <print_all_menu_1_1_menus+0x20c>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	701a      	strb	r2, [r3, #0]
	}

	switch (pointer_on_selected_menu)
 80029b4:	4b27      	ldr	r3, [pc, #156]	; (8002a54 <print_all_menu_1_1_menus+0x20c>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	3b01      	subs	r3, #1
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d83a      	bhi.n	8002a34 <print_all_menu_1_1_menus+0x1ec>
 80029be:	a201      	add	r2, pc, #4	; (adr r2, 80029c4 <print_all_menu_1_1_menus+0x17c>)
 80029c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c4:	080029d5 	.word	0x080029d5
 80029c8:	080029ed 	.word	0x080029ed
 80029cc:	08002a05 	.word	0x08002a05
 80029d0:	08002a1d 	.word	0x08002a1d
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 80029d4:	2300      	movs	r3, #0
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	2302      	movs	r3, #2
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80029e0:	226e      	movs	r2, #110	; 0x6e
 80029e2:	2105      	movs	r1, #5
 80029e4:	481c      	ldr	r0, [pc, #112]	; (8002a58 <print_all_menu_1_1_menus+0x210>)
 80029e6:	f7ff f851 	bl	8001a8c <ILI9341_Draw_Text>
			break;
 80029ea:	e023      	b.n	8002a34 <print_all_menu_1_1_menus+0x1ec>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 80029ec:	2300      	movs	r3, #0
 80029ee:	9301      	str	r3, [sp, #4]
 80029f0:	2302      	movs	r3, #2
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80029f8:	2282      	movs	r2, #130	; 0x82
 80029fa:	2105      	movs	r1, #5
 80029fc:	4816      	ldr	r0, [pc, #88]	; (8002a58 <print_all_menu_1_1_menus+0x210>)
 80029fe:	f7ff f845 	bl	8001a8c <ILI9341_Draw_Text>
			break;
 8002a02:	e017      	b.n	8002a34 <print_all_menu_1_1_menus+0x1ec>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 8002a04:	2300      	movs	r3, #0
 8002a06:	9301      	str	r3, [sp, #4]
 8002a08:	2302      	movs	r3, #2
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a10:	2296      	movs	r2, #150	; 0x96
 8002a12:	2105      	movs	r1, #5
 8002a14:	4810      	ldr	r0, [pc, #64]	; (8002a58 <print_all_menu_1_1_menus+0x210>)
 8002a16:	f7ff f839 	bl	8001a8c <ILI9341_Draw_Text>
			break;
 8002a1a:	e00b      	b.n	8002a34 <print_all_menu_1_1_menus+0x1ec>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	9301      	str	r3, [sp, #4]
 8002a20:	2302      	movs	r3, #2
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a28:	22aa      	movs	r2, #170	; 0xaa
 8002a2a:	2105      	movs	r1, #5
 8002a2c:	480a      	ldr	r0, [pc, #40]	; (8002a58 <print_all_menu_1_1_menus+0x210>)
 8002a2e:	f7ff f82d 	bl	8001a8c <ILI9341_Draw_Text>
			break;
 8002a32:	bf00      	nop
	}
}
 8002a34:	bf00      	nop
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	0800ce6c 	.word	0x0800ce6c
 8002a40:	0800ce90 	.word	0x0800ce90
 8002a44:	200000f8 	.word	0x200000f8
 8002a48:	2000010c 	.word	0x2000010c
 8002a4c:	20000120 	.word	0x20000120
 8002a50:	20000134 	.word	0x20000134
 8002a54:	20000148 	.word	0x20000148
 8002a58:	0800ce94 	.word	0x0800ce94

08002a5c <tongle_green_led>:
// -----------------------------------------------------------------------
void tongle_green_led(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin( GPIOD, GPIO_PIN_12);
 8002a60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a64:	4802      	ldr	r0, [pc, #8]	; (8002a70 <tongle_green_led+0x14>)
 8002a66:	f001 fa28 	bl	8003eba <HAL_GPIO_TogglePin>
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40020c00 	.word	0x40020c00

08002a74 <RED_LED_ON>:
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// -----------------------------------------------------------------------
void RED_LED_ON(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a7e:	4802      	ldr	r0, [pc, #8]	; (8002a88 <RED_LED_ON+0x14>)
 8002a80:	f001 fa02 	bl	8003e88 <HAL_GPIO_WritePin>
}
 8002a84:	bf00      	nop
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40020c00 	.word	0x40020c00

08002a8c <RED_LED_OFF>:
// -----------------------------------------------------------------------
void RED_LED_OFF(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8002a90:	2200      	movs	r2, #0
 8002a92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a96:	4802      	ldr	r0, [pc, #8]	; (8002aa0 <RED_LED_OFF+0x14>)
 8002a98:	f001 f9f6 	bl	8003e88 <HAL_GPIO_WritePin>
}
 8002a9c:	bf00      	nop
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40020c00 	.word	0x40020c00

08002aa4 <Level1Item3_Enter>:
// -----------------------------------------------------------------------
static void Level1Item3_Enter(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af02      	add	r7, sp, #8
 bool flagPressed = false;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	71fb      	strb	r3, [r7, #7]

 ILI9341_Draw_Text( "                          ", 10, 60, WHITE, 2, BLACK);   // Clearn lcd
 8002aae:	2300      	movs	r3, #0
 8002ab0:	9301      	str	r3, [sp, #4]
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aba:	223c      	movs	r2, #60	; 0x3c
 8002abc:	210a      	movs	r1, #10
 8002abe:	4838      	ldr	r0, [pc, #224]	; (8002ba0 <Level1Item3_Enter+0xfc>)
 8002ac0:	f7fe ffe4 	bl	8001a8c <ILI9341_Draw_Text>

 ILI9341_Draw_Text( "Red LED is:", 10, 60, WHITE, 2, BLACK);
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	9301      	str	r3, [sp, #4]
 8002ac8:	2302      	movs	r3, #2
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ad0:	223c      	movs	r2, #60	; 0x3c
 8002ad2:	210a      	movs	r1, #10
 8002ad4:	4833      	ldr	r0, [pc, #204]	; (8002ba4 <Level1Item3_Enter+0x100>)
 8002ad6:	f7fe ffd9 	bl	8001a8c <ILI9341_Draw_Text>

 while(getPressKey() != BUTTON_LEFT)
 8002ada:	e049      	b.n	8002b70 <Level1Item3_Enter+0xcc>
 {
	 // Read PIN
	 int led_status =  HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_14);
 8002adc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ae0:	4831      	ldr	r0, [pc, #196]	; (8002ba8 <Level1Item3_Enter+0x104>)
 8002ae2:	f001 f9b9 	bl	8003e58 <HAL_GPIO_ReadPin>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	603b      	str	r3, [r7, #0]

	 if(flagPressed == true)
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d019      	beq.n	8002b24 <Level1Item3_Enter+0x80>
	 {
		 if(led_status == GPIO_PIN_SET)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d10b      	bne.n	8002b0e <Level1Item3_Enter+0x6a>
		 {
			 ILI9341_Draw_Text( "ON ", 150, 60, WHITE, 2, BLACK);
 8002af6:	2300      	movs	r3, #0
 8002af8:	9301      	str	r3, [sp, #4]
 8002afa:	2302      	movs	r3, #2
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b02:	223c      	movs	r2, #60	; 0x3c
 8002b04:	2196      	movs	r1, #150	; 0x96
 8002b06:	4829      	ldr	r0, [pc, #164]	; (8002bac <Level1Item3_Enter+0x108>)
 8002b08:	f7fe ffc0 	bl	8001a8c <ILI9341_Draw_Text>
 8002b0c:	e00a      	b.n	8002b24 <Level1Item3_Enter+0x80>
		 }
		 else
		 {
		 	 ILI9341_Draw_Text( "OFF", 150, 60, WHITE, 2, BLACK);
 8002b0e:	2300      	movs	r3, #0
 8002b10:	9301      	str	r3, [sp, #4]
 8002b12:	2302      	movs	r3, #2
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b1a:	223c      	movs	r2, #60	; 0x3c
 8002b1c:	2196      	movs	r1, #150	; 0x96
 8002b1e:	4824      	ldr	r0, [pc, #144]	; (8002bb0 <Level1Item3_Enter+0x10c>)
 8002b20:	f7fe ffb4 	bl	8001a8c <ILI9341_Draw_Text>
		 }
	 }


	 if(getPressKey() != BUTTON_NOTHING && !flagPressed)
 8002b24:	f000 f84a 	bl	8002bbc <getPressKey>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2bff      	cmp	r3, #255	; 0xff
 8002b2c:	d016      	beq.n	8002b5c <Level1Item3_Enter+0xb8>
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	f083 0301 	eor.w	r3, r3, #1
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d010      	beq.n	8002b5c <Level1Item3_Enter+0xb8>
	 {
		 flagPressed = true;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	71fb      	strb	r3, [r7, #7]

		 switch(getPressKey())  // If press any key
 8002b3e:	f000 f83d 	bl	8002bbc <getPressKey>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d002      	beq.n	8002b4e <Level1Item3_Enter+0xaa>
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d003      	beq.n	8002b54 <Level1Item3_Enter+0xb0>
	  	  		  break;
	  	  	  case BUTTON_DOWN:
	  	  		  RED_LED_OFF();
	  	  		  break;
	  	  	  default:
	  	  		  break;
 8002b4c:	e005      	b.n	8002b5a <Level1Item3_Enter+0xb6>
	  	  		  RED_LED_ON();
 8002b4e:	f7ff ff91 	bl	8002a74 <RED_LED_ON>
	  	  		  break;
 8002b52:	e002      	b.n	8002b5a <Level1Item3_Enter+0xb6>
	  	  		  RED_LED_OFF();
 8002b54:	f7ff ff9a 	bl	8002a8c <RED_LED_OFF>
	  	  		  break;
 8002b58:	bf00      	nop
		 switch(getPressKey())  // If press any key
 8002b5a:	e009      	b.n	8002b70 <Level1Item3_Enter+0xcc>
		 }
	 }
	 else if(getPressKey() == BUTTON_NOTHING && flagPressed)
 8002b5c:	f000 f82e 	bl	8002bbc <getPressKey>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2bff      	cmp	r3, #255	; 0xff
 8002b64:	d104      	bne.n	8002b70 <Level1Item3_Enter+0xcc>
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <Level1Item3_Enter+0xcc>
	 {
		 flagPressed = false; 	// if button was release
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	71fb      	strb	r3, [r7, #7]
 while(getPressKey() != BUTTON_LEFT)
 8002b70:	f000 f824 	bl	8002bbc <getPressKey>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1b0      	bne.n	8002adc <Level1Item3_Enter+0x38>
	 }
 }

 ILI9341_Draw_Text( "                           ", 10, 60, WHITE, 2, BLACK); // Cleaning one row LCD
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	9301      	str	r3, [sp, #4]
 8002b7e:	2302      	movs	r3, #2
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b86:	223c      	movs	r2, #60	; 0x3c
 8002b88:	210a      	movs	r1, #10
 8002b8a:	480a      	ldr	r0, [pc, #40]	; (8002bb4 <Level1Item3_Enter+0x110>)
 8002b8c:	f7fe ff7e 	bl	8001a8c <ILI9341_Draw_Text>
 Menu_Navigate(&Menu_3);  // Back to menu 3
 8002b90:	4809      	ldr	r0, [pc, #36]	; (8002bb8 <Level1Item3_Enter+0x114>)
 8002b92:	f000 f8db 	bl	8002d4c <Menu_Navigate>
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	0800ce98 	.word	0x0800ce98
 8002ba4:	0800ceb4 	.word	0x0800ceb4
 8002ba8:	40020c00 	.word	0x40020c00
 8002bac:	0800cec0 	.word	0x0800cec0
 8002bb0:	0800cec4 	.word	0x0800cec4
 8002bb4:	0800cec8 	.word	0x0800cec8
 8002bb8:	0800d24c 	.word	0x0800d24c

08002bbc <getPressKey>:
// -----------------------------------------------------------------------
static uint8_t getPressKey()		// 3x4 keyboard
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af02      	add	r7, sp, #8
	char digit = '\0';
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	75fb      	strb	r3, [r7, #23]
	char buff_lcd[20] = "KEY: ";
 8002bc6:	4a48      	ldr	r2, [pc, #288]	; (8002ce8 <getPressKey+0x12c>)
 8002bc8:	463b      	mov	r3, r7
 8002bca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bce:	6018      	str	r0, [r3, #0]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	8019      	strh	r1, [r3, #0]
 8002bd4:	1dbb      	adds	r3, r7, #6
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	609a      	str	r2, [r3, #8]
 8002bde:	819a      	strh	r2, [r3, #12]
	digit = read_one_digit_from_keyboard();
 8002be0:	f7fd fcc8 	bl	8000574 <read_one_digit_from_keyboard>
 8002be4:	4603      	mov	r3, r0
 8002be6:	75fb      	strb	r3, [r7, #23]
	switch(digit)
 8002be8:	7dfb      	ldrb	r3, [r7, #23]
 8002bea:	3b32      	subs	r3, #50	; 0x32
 8002bec:	2b06      	cmp	r3, #6
 8002bee:	d875      	bhi.n	8002cdc <getPressKey+0x120>
 8002bf0:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <getPressKey+0x3c>)
 8002bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf6:	bf00      	nop
 8002bf8:	08002c3d 	.word	0x08002c3d
 8002bfc:	08002cdd 	.word	0x08002cdd
 8002c00:	08002c15 	.word	0x08002c15
 8002c04:	08002cb5 	.word	0x08002cb5
 8002c08:	08002c8d 	.word	0x08002c8d
 8002c0c:	08002cdd 	.word	0x08002cdd
 8002c10:	08002c65 	.word	0x08002c65
	{
		case '4':
		{
			strncat(buff_lcd, &digit, 1);
 8002c14:	f107 0117 	add.w	r1, r7, #23
 8002c18:	463b      	mov	r3, r7
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f00a f8f7 	bl	800ce10 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8002c22:	4638      	mov	r0, r7
 8002c24:	2300      	movs	r3, #0
 8002c26:	9301      	str	r3, [sp, #4]
 8002c28:	2302      	movs	r3, #2
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c30:	2200      	movs	r2, #0
 8002c32:	2100      	movs	r1, #0
 8002c34:	f7fe ff2a 	bl	8001a8c <ILI9341_Draw_Text>
			return BUTTON_LEFT;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	e050      	b.n	8002cde <getPressKey+0x122>
		}
		case '2':
		{
			strncat(buff_lcd, &digit, 1);
 8002c3c:	f107 0117 	add.w	r1, r7, #23
 8002c40:	463b      	mov	r3, r7
 8002c42:	2201      	movs	r2, #1
 8002c44:	4618      	mov	r0, r3
 8002c46:	f00a f8e3 	bl	800ce10 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8002c4a:	4638      	mov	r0, r7
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	9301      	str	r3, [sp, #4]
 8002c50:	2302      	movs	r3, #2
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	f7fe ff16 	bl	8001a8c <ILI9341_Draw_Text>
			return BUTTON_UP;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e03c      	b.n	8002cde <getPressKey+0x122>
		}
		case '8':
		{
			strncat(buff_lcd, &digit, 1);
 8002c64:	f107 0117 	add.w	r1, r7, #23
 8002c68:	463b      	mov	r3, r7
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f00a f8cf 	bl	800ce10 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8002c72:	4638      	mov	r0, r7
 8002c74:	2300      	movs	r3, #0
 8002c76:	9301      	str	r3, [sp, #4]
 8002c78:	2302      	movs	r3, #2
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c80:	2200      	movs	r2, #0
 8002c82:	2100      	movs	r1, #0
 8002c84:	f7fe ff02 	bl	8001a8c <ILI9341_Draw_Text>
			return BUTTON_DOWN;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e028      	b.n	8002cde <getPressKey+0x122>
		}
		case '6':
		{
			strncat(buff_lcd, &digit, 1);
 8002c8c:	f107 0117 	add.w	r1, r7, #23
 8002c90:	463b      	mov	r3, r7
 8002c92:	2201      	movs	r2, #1
 8002c94:	4618      	mov	r0, r3
 8002c96:	f00a f8bb 	bl	800ce10 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8002c9a:	4638      	mov	r0, r7
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	9301      	str	r3, [sp, #4]
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2100      	movs	r1, #0
 8002cac:	f7fe feee 	bl	8001a8c <ILI9341_Draw_Text>
			return BUTTON_RIGHT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e014      	b.n	8002cde <getPressKey+0x122>
		}
		case '5':
		{
			strncat(buff_lcd, &digit, 1);
 8002cb4:	f107 0117 	add.w	r1, r7, #23
 8002cb8:	463b      	mov	r3, r7
 8002cba:	2201      	movs	r2, #1
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f00a f8a7 	bl	800ce10 <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8002cc2:	4638      	mov	r0, r7
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	9301      	str	r3, [sp, #4]
 8002cc8:	2302      	movs	r3, #2
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	f7fe feda 	bl	8001a8c <ILI9341_Draw_Text>
			return BUTTON_SELECT;
 8002cd8:	2304      	movs	r3, #4
 8002cda:	e000      	b.n	8002cde <getPressKey+0x122>
		}
		default:
			return BUTTON_NOTHING;
 8002cdc:	23ff      	movs	r3, #255	; 0xff
			break;


	}
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	0800cee4 	.word	0x0800cee4

08002cec <Generic_Write>:
// -----------------------------------------------------------------------
void Generic_Write(const char* Text)		// Print "Text" data on LCD
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af02      	add	r7, sp, #8
 8002cf2:	6078      	str	r0, [r7, #4]
	if (Text)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d015      	beq.n	8002d26 <Generic_Write+0x3a>
	{
		ILI9341_Draw_Text( "                                 ", 10, 100, WHITE, 1, BLACK);
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	9301      	str	r3, [sp, #4]
 8002cfe:	2301      	movs	r3, #1
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d06:	2264      	movs	r2, #100	; 0x64
 8002d08:	210a      	movs	r1, #10
 8002d0a:	4809      	ldr	r0, [pc, #36]	; (8002d30 <Generic_Write+0x44>)
 8002d0c:	f7fe febe 	bl	8001a8c <ILI9341_Draw_Text>
		ILI9341_Draw_Text( Text, 10, 100, WHITE, 1, BLACK);
 8002d10:	2300      	movs	r3, #0
 8002d12:	9301      	str	r3, [sp, #4]
 8002d14:	2301      	movs	r3, #1
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d1c:	2264      	movs	r2, #100	; 0x64
 8002d1e:	210a      	movs	r1, #10
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7fe feb3 	bl	8001a8c <ILI9341_Draw_Text>
	}
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	0800cef8 	.word	0x0800cef8

08002d34 <Menu_GetCurrentMenu>:
// -----------------------------------------------------------------------
Menu_Item_t* Menu_GetCurrentMenu(void)		// Повертає поточни вибраний пункт меню
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
	return CurrentMenuItem;
 8002d38:	4b03      	ldr	r3, [pc, #12]	; (8002d48 <Menu_GetCurrentMenu+0x14>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	2000000c 	.word	0x2000000c

08002d4c <Menu_Navigate>:
// -----------------------------------------------------------------------
// Переходи по меню
// in: ПОказник на апсолютний пункт меню, для вибору
// MENU_PARENT, MENU_CHILD, MENU_NEXT або  MENU_PREVIOUS
void Menu_Navigate(Menu_Item_t* const NewMenu)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
	if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))  // What it mean???
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a11      	ldr	r2, [pc, #68]	; (8002d9c <Menu_Navigate+0x50>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d01a      	beq.n	8002d92 <Menu_Navigate+0x46>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d017      	beq.n	8002d92 <Menu_Navigate+0x46>
	{
		return;		// Exit
	}

	CurrentMenuItem = NewMenu;    // Передане маню стає вибране
 8002d62:	4a0f      	ldr	r2, [pc, #60]	; (8002da0 <Menu_Navigate+0x54>)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6013      	str	r3, [r2, #0]

	if (MenuWriteFunc)    // If   MenuWriteFunc  != NULL  ???????
 8002d68:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <Menu_Navigate+0x58>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d006      	beq.n	8002d7e <Menu_Navigate+0x32>
	{
		MenuWriteFunc(CurrentMenuItem->Text);			// Print Text string on LCD
 8002d70:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <Menu_Navigate+0x58>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a0a      	ldr	r2, [pc, #40]	; (8002da0 <Menu_Navigate+0x54>)
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	3218      	adds	r2, #24
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	4798      	blx	r3
	}

	//   void (*SelectCallback)(void) - Creating pointer on function
	// Write  CurrentMenuItem->SelectCallback in  void (*SelectCallback)(void) pinter
	void (*SelectCallback)(void) = CurrentMenuItem->SelectCallback;
 8002d7e:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <Menu_Navigate+0x54>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	60fb      	str	r3, [r7, #12]

	if (SelectCallback)		// If SelectCallback != NULL
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <Menu_Navigate+0x48>
	{
		SelectCallback();   // It does - CurrentMenuItem->SelectCallback;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4798      	blx	r3
 8002d90:	e000      	b.n	8002d94 <Menu_Navigate+0x48>
		return;		// Exit
 8002d92:	bf00      	nop
	}
}
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	0800d1dc 	.word	0x0800d1dc
 8002da0:	2000000c 	.word	0x2000000c
 8002da4:	200001fc 	.word	0x200001fc

08002da8 <Menu_SetGenericWriteCallback>:
 пунктів меню. В рамках цієї функції зворотного виклику користувач повинен
 реалізувати код для відображення поточного тексту меню, що зберігається
 в  ref MENU_ITEM_STORAGE пам'яті.. */
// In: вказівник на функцію зворотного виклику для виконання кожного вибраного пункту меню.
void Menu_SetGenericWriteCallback(void (*WriteFunc)(const char* Text))    //  What doing this function??????? <<<<<<<<<<<
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
	MenuWriteFunc = WriteFunc;  		// Запис показника функції WriteFunc в
 8002db0:	4a05      	ldr	r2, [pc, #20]	; (8002dc8 <Menu_SetGenericWriteCallback+0x20>)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6013      	str	r3, [r2, #0]
	//  показник на функцію під назвою MenuWriteFunc
	Menu_Navigate(CurrentMenuItem);      // Передача цього показника в функцію Menu_Navigate
 8002db6:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <Menu_SetGenericWriteCallback+0x24>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff ffc6 	bl	8002d4c <Menu_Navigate>
}
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	200001fc 	.word	0x200001fc
 8002dcc:	2000000c 	.word	0x2000000c

08002dd0 <Menu_EnterCurrentItem>:
// -----------------------------------------------------------------------
/* Функція входить у вибраний на даний момент пункт меню, виконуючи налаштовану
   функцію зворотного дзвінка (якщо така є) */
void Menu_EnterCurrentItem(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
	if ((CurrentMenuItem == &NULL_MENU) || (CurrentMenuItem == NULL))
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <Menu_EnterCurrentItem+0x34>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a0b      	ldr	r2, [pc, #44]	; (8002e08 <Menu_EnterCurrentItem+0x38>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d00d      	beq.n	8002dfc <Menu_EnterCurrentItem+0x2c>
 8002de0:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <Menu_EnterCurrentItem+0x34>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d009      	beq.n	8002dfc <Menu_EnterCurrentItem+0x2c>
	{
		return;
	}

	void (*EnterCallback)(void) = CurrentMenuItem->EnterCallback;
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <Menu_EnterCurrentItem+0x34>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	607b      	str	r3, [r7, #4]
	if (EnterCallback)		// If EnterCallback != NULL
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <Menu_EnterCurrentItem+0x2e>
	{
		EnterCallback();
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4798      	blx	r3
 8002dfa:	e000      	b.n	8002dfe <Menu_EnterCurrentItem+0x2e>
		return;
 8002dfc:	bf00      	nop
	}

}// -----------------------------------------------------------------------
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	2000000c 	.word	0x2000000c
 8002e08:	0800d1dc 	.word	0x0800d1dc

08002e0c <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
	int i =0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 8002e18:	e036      	b.n	8002e88 <speed_test_LCD+0x7c>
	{
		i ++;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8002e34:	4819      	ldr	r0, [pc, #100]	; (8002e9c <speed_test_LCD+0x90>)
 8002e36:	f005 f9b8 	bl	80081aa <HAL_RNG_GetRandomNumber>
 8002e3a:	6138      	str	r0, [r7, #16]
		xr = random_num;
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8002e40:	4816      	ldr	r0, [pc, #88]	; (8002e9c <speed_test_LCD+0x90>)
 8002e42:	f005 f9b2 	bl	80081aa <HAL_RNG_GetRandomNumber>
 8002e46:	6138      	str	r0, [r7, #16]
		yr = random_num;
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8002e4c:	4813      	ldr	r0, [pc, #76]	; (8002e9c <speed_test_LCD+0x90>)
 8002e4e:	f005 f9ac 	bl	80081aa <HAL_RNG_GetRandomNumber>
 8002e52:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8002e58:	4810      	ldr	r0, [pc, #64]	; (8002e9c <speed_test_LCD+0x90>)
 8002e5a:	f005 f9a6 	bl	80081aa <HAL_RNG_GetRandomNumber>
 8002e5e:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 8002e64:	89fb      	ldrh	r3, [r7, #14]
 8002e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e6a:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 8002e6c:	89bb      	ldrh	r3, [r7, #12]
 8002e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e72:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 8002e74:	897b      	ldrh	r3, [r7, #10]
 8002e76:	f003 031f 	and.w	r3, r3, #31
 8002e7a:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 8002e7c:	893b      	ldrh	r3, [r7, #8]
 8002e7e:	897a      	ldrh	r2, [r7, #10]
 8002e80:	89b9      	ldrh	r1, [r7, #12]
 8002e82:	89f8      	ldrh	r0, [r7, #14]
 8002e84:	f7fe fce4 	bl	8001850 <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	ddc4      	ble.n	8002e1a <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	200003c4 	.word	0x200003c4

08002ea0 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8002ea8:	2305      	movs	r3, #5
 8002eaa:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fa7a 	bl	80033aa <null_ptr_check>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8002eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d133      	bne.n	8002f2a <bme280_init+0x8a>
		while (try_count) {
 8002ec2:	e028      	b.n	8002f16 <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8002ec4:	f107 010d 	add.w	r1, r7, #13
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	20d0      	movs	r0, #208	; 0xd0
 8002ece:	f000 f832 	bl	8002f36 <bme280_get_regs>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8002ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d114      	bne.n	8002f08 <bme280_init+0x68>
 8002ede:	7b7b      	ldrb	r3, [r7, #13]
 8002ee0:	2b60      	cmp	r3, #96	; 0x60
 8002ee2:	d111      	bne.n	8002f08 <bme280_init+0x68>
				dev->chip_id = chip_id;
 8002ee4:	7b7a      	ldrb	r2, [r7, #13]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f8ca 	bl	8003084 <bme280_soft_reset>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8002ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d110      	bne.n	8002f1e <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f8e6 	bl	80030ce <get_calib_data>
 8002f02:	4603      	mov	r3, r0
 8002f04:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8002f06:	e00a      	b.n	8002f1e <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	4798      	blx	r3
			--try_count;
 8002f10:	7bbb      	ldrb	r3, [r7, #14]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8002f16:	7bbb      	ldrb	r3, [r7, #14]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1d3      	bne.n	8002ec4 <bme280_init+0x24>
 8002f1c:	e000      	b.n	8002f20 <bme280_init+0x80>
				break;
 8002f1e:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8002f20:	7bbb      	ldrb	r3, [r7, #14]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8002f26:	23fe      	movs	r3, #254	; 0xfe
 8002f28:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8002f36:	b590      	push	{r4, r7, lr}
 8002f38:	b087      	sub	sp, #28
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607b      	str	r3, [r7, #4]
 8002f40:	4603      	mov	r3, r0
 8002f42:	73fb      	strb	r3, [r7, #15]
 8002f44:	4613      	mov	r3, r2
 8002f46:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 fa2e 	bl	80033aa <null_ptr_check>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8002f52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d117      	bne.n	8002f8a <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	789b      	ldrb	r3, [r3, #2]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d003      	beq.n	8002f6a <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
 8002f64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f68:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685c      	ldr	r4, [r3, #4]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	7858      	ldrb	r0, [r3, #1]
 8002f72:	89bb      	ldrh	r3, [r7, #12]
 8002f74:	7bf9      	ldrb	r1, [r7, #15]
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	47a0      	blx	r4
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8002f7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 8002f86:	23fc      	movs	r3, #252	; 0xfc
 8002f88:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8002f8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	371c      	adds	r7, #28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd90      	pop	{r4, r7, pc}

08002f96 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8002f96:	b590      	push	{r4, r7, lr}
 8002f98:	b08d      	sub	sp, #52	; 0x34
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	603b      	str	r3, [r7, #0]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	2b0a      	cmp	r3, #10
 8002faa:	d901      	bls.n	8002fb0 <bme280_set_regs+0x1a>
		len = 10;
 8002fac:	230a      	movs	r3, #10
 8002fae:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002fb0:	6838      	ldr	r0, [r7, #0]
 8002fb2:	f000 f9fa 	bl	80033aa <null_ptr_check>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8002fbc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d154      	bne.n	800306e <bme280_set_regs+0xd8>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d051      	beq.n	800306e <bme280_set_regs+0xd8>
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d04e      	beq.n	800306e <bme280_set_regs+0xd8>
		if (len != 0) {
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d047      	beq.n	8003066 <bme280_set_regs+0xd0>
			temp_buff[0] = reg_data[0];
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	789b      	ldrb	r3, [r3, #2]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d01a      	beq.n	800301a <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fea:	e011      	b.n	8003010 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8002fec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	781a      	ldrb	r2, [r3, #0]
 8002ff6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ffa:	68f9      	ldr	r1, [r7, #12]
 8002ffc:	440b      	add	r3, r1
 8002ffe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003006:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800300a:	3301      	adds	r3, #1
 800300c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003010:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	429a      	cmp	r2, r3
 8003018:	d3e8      	bcc.n	8002fec <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d90b      	bls.n	8003038 <bme280_set_regs+0xa2>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	f107 0114 	add.w	r1, r7, #20
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 f895 	bl	8003158 <interleave_reg_addr>
				temp_len = len * 2;
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	b29b      	uxth	r3, r3
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003036:	e001      	b.n	800303c <bme280_set_regs+0xa6>
			} else {
				temp_len = len;
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	689c      	ldr	r4, [r3, #8]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	7858      	ldrb	r0, [r3, #1]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	7819      	ldrb	r1, [r3, #0]
 8003048:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800304a:	f107 0214 	add.w	r2, r7, #20
 800304e:	47a0      	blx	r4
 8003050:	4603      	mov	r3, r0
 8003052:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 8003056:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00b      	beq.n	8003076 <bme280_set_regs+0xe0>
				rslt = BME280_E_COMM_FAIL;
 800305e:	23fc      	movs	r3, #252	; 0xfc
 8003060:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8003064:	e007      	b.n	8003076 <bme280_set_regs+0xe0>
		} else {
			rslt = BME280_E_INVALID_LEN;
 8003066:	23fd      	movs	r3, #253	; 0xfd
 8003068:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 800306c:	e003      	b.n	8003076 <bme280_set_regs+0xe0>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800306e:	23ff      	movs	r3, #255	; 0xff
 8003070:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003074:	e000      	b.n	8003078 <bme280_set_regs+0xe2>
		if (len != 0) {
 8003076:	bf00      	nop
	}


	return rslt;
 8003078:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800307c:	4618      	mov	r0, r3
 800307e:	3734      	adds	r7, #52	; 0x34
 8003080:	46bd      	mov	sp, r7
 8003082:	bd90      	pop	{r4, r7, pc}

08003084 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 800308c:	23e0      	movs	r3, #224	; 0xe0
 800308e:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8003090:	23b6      	movs	r3, #182	; 0xb6
 8003092:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f988 	bl	80033aa <null_ptr_check>
 800309a:	4603      	mov	r3, r0
 800309c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800309e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10d      	bne.n	80030c2 <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80030a6:	f107 010d 	add.w	r1, r7, #13
 80030aa:	f107 000e 	add.w	r0, r7, #14
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f7ff ff70 	bl	8002f96 <bme280_set_regs>
 80030b6:	4603      	mov	r3, r0
 80030b8:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	2002      	movs	r0, #2
 80030c0:	4798      	blx	r3
	}

	return rslt;
 80030c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b08a      	sub	sp, #40	; 0x28
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 80030d6:	2388      	movs	r3, #136	; 0x88
 80030d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 80030dc:	2300      	movs	r3, #0
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	f107 0310 	add.w	r3, r7, #16
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	611a      	str	r2, [r3, #16]
 80030f0:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 80030f2:	f107 010c 	add.w	r1, r7, #12
 80030f6:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	221a      	movs	r2, #26
 80030fe:	f7ff ff1a 	bl	8002f36 <bme280_get_regs>
 8003102:	4603      	mov	r3, r0
 8003104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 8003108:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800310c:	2b00      	cmp	r3, #0
 800310e:	d11d      	bne.n	800314c <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 8003110:	f107 030c 	add.w	r3, r7, #12
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	4618      	mov	r0, r3
 8003118:	f000 f84a 	bl	80031b0 <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 800311c:	23e1      	movs	r3, #225	; 0xe1
 800311e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8003122:	f107 010c 	add.w	r1, r7, #12
 8003126:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2207      	movs	r2, #7
 800312e:	f7ff ff02 	bl	8002f36 <bme280_get_regs>
 8003132:	4603      	mov	r3, r0
 8003134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8003138:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800313c:	2b00      	cmp	r3, #0
 800313e:	d105      	bne.n	800314c <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 8003140:	f107 030c 	add.w	r3, r7, #12
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4618      	mov	r0, r3
 8003148:	f000 f8e1 	bl	800330e <parse_humidity_calib_data>
		}
	}

	return rslt;
 800314c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003150:	4618      	mov	r0, r3
 8003152:	3728      	adds	r7, #40	; 0x28
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 8003166:	2301      	movs	r3, #1
 8003168:	75fb      	strb	r3, [r7, #23]
 800316a:	e016      	b.n	800319a <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 800316c:	7dfb      	ldrb	r3, [r7, #23]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	441a      	add	r2, r3
 8003172:	7dfb      	ldrb	r3, [r7, #23]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	3b01      	subs	r3, #1
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	440b      	add	r3, r1
 800317c:	7812      	ldrb	r2, [r2, #0]
 800317e:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 8003180:	7dfb      	ldrb	r3, [r7, #23]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	441a      	add	r2, r3
 8003186:	7dfb      	ldrb	r3, [r7, #23]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	4619      	mov	r1, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	440b      	add	r3, r1
 8003190:	7812      	ldrb	r2, [r2, #0]
 8003192:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 8003194:	7dfb      	ldrb	r3, [r7, #23]
 8003196:	3301      	adds	r3, #1
 8003198:	75fb      	strb	r3, [r7, #23]
 800319a:	7dfa      	ldrb	r2, [r7, #23]
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d3e4      	bcc.n	800316c <interleave_reg_addr+0x14>
	}
}
 80031a2:	bf00      	nop
 80031a4:	bf00      	nop
 80031a6:	371c      	adds	r7, #28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	3310      	adds	r3, #16
 80031be:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3301      	adds	r3, #1
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	b21a      	sxth	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	b21b      	sxth	r3, r3
 80031d0:	4313      	orrs	r3, r2
 80031d2:	b21b      	sxth	r3, r3
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3303      	adds	r3, #3
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	021b      	lsls	r3, r3, #8
 80031e2:	b21a      	sxth	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3302      	adds	r3, #2
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	b21b      	sxth	r3, r3
 80031ec:	4313      	orrs	r3, r2
 80031ee:	b21a      	sxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3305      	adds	r3, #5
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	021b      	lsls	r3, r3, #8
 80031fc:	b21a      	sxth	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3304      	adds	r3, #4
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	b21b      	sxth	r3, r3
 8003206:	4313      	orrs	r3, r2
 8003208:	b21a      	sxth	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3307      	adds	r3, #7
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	021b      	lsls	r3, r3, #8
 8003216:	b21a      	sxth	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3306      	adds	r3, #6
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	b21b      	sxth	r3, r3
 8003220:	4313      	orrs	r3, r2
 8003222:	b21b      	sxth	r3, r3
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3309      	adds	r3, #9
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	021b      	lsls	r3, r3, #8
 8003232:	b21a      	sxth	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3308      	adds	r3, #8
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	b21b      	sxth	r3, r3
 800323c:	4313      	orrs	r3, r2
 800323e:	b21a      	sxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	330b      	adds	r3, #11
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	b21a      	sxth	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	330a      	adds	r3, #10
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	b21b      	sxth	r3, r3
 8003256:	4313      	orrs	r3, r2
 8003258:	b21a      	sxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	330d      	adds	r3, #13
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	b21a      	sxth	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	330c      	adds	r3, #12
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	b21b      	sxth	r3, r3
 8003270:	4313      	orrs	r3, r2
 8003272:	b21a      	sxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	330f      	adds	r3, #15
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	021b      	lsls	r3, r3, #8
 8003280:	b21a      	sxth	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	330e      	adds	r3, #14
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	b21b      	sxth	r3, r3
 800328a:	4313      	orrs	r3, r2
 800328c:	b21a      	sxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3311      	adds	r3, #17
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	021b      	lsls	r3, r3, #8
 800329a:	b21a      	sxth	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3310      	adds	r3, #16
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	b21b      	sxth	r3, r3
 80032a4:	4313      	orrs	r3, r2
 80032a6:	b21a      	sxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3313      	adds	r3, #19
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	b21a      	sxth	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	3312      	adds	r3, #18
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	b21b      	sxth	r3, r3
 80032be:	4313      	orrs	r3, r2
 80032c0:	b21a      	sxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3315      	adds	r3, #21
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	021b      	lsls	r3, r3, #8
 80032ce:	b21a      	sxth	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3314      	adds	r3, #20
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	b21b      	sxth	r3, r3
 80032d8:	4313      	orrs	r3, r2
 80032da:	b21a      	sxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3317      	adds	r3, #23
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	021b      	lsls	r3, r3, #8
 80032e8:	b21a      	sxth	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3316      	adds	r3, #22
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	b21b      	sxth	r3, r3
 80032f2:	4313      	orrs	r3, r2
 80032f4:	b21a      	sxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	7e5a      	ldrb	r2, [r3, #25]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	761a      	strb	r2, [r3, #24]

}
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800330e:	b480      	push	{r7}
 8003310:	b087      	sub	sp, #28
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	3310      	adds	r3, #16
 800331c:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3301      	adds	r3, #1
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	021b      	lsls	r3, r3, #8
 8003326:	b21a      	sxth	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	b21b      	sxth	r3, r3
 800332e:	4313      	orrs	r3, r2
 8003330:	b21a      	sxth	r2, r3
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	789a      	ldrb	r2, [r3, #2]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3303      	adds	r3, #3
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	b25b      	sxtb	r3, r3
 8003346:	b29b      	uxth	r3, r3
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	b29b      	uxth	r3, r3
 800334c:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3304      	adds	r3, #4
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	b21b      	sxth	r3, r3
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 800335c:	8a7a      	ldrh	r2, [r7, #18]
 800335e:	8a3b      	ldrh	r3, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	b21a      	sxth	r2, r3
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3305      	adds	r3, #5
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	b25b      	sxtb	r3, r3
 8003370:	b29b      	uxth	r3, r3
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	b29b      	uxth	r3, r3
 8003376:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3304      	adds	r3, #4
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	091b      	lsrs	r3, r3, #4
 8003380:	b2db      	uxtb	r3, r3
 8003382:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8003384:	89fa      	ldrh	r2, [r7, #14]
 8003386:	89bb      	ldrh	r3, [r7, #12]
 8003388:	4313      	orrs	r3, r2
 800338a:	b21a      	sxth	r2, r3
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3306      	adds	r3, #6
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	b25a      	sxtb	r2, r3
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800339e:	bf00      	nop
 80033a0:	371c      	adds	r7, #28
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b085      	sub	sp, #20
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00b      	beq.n	80033d0 <null_ptr_check+0x26>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d007      	beq.n	80033d0 <null_ptr_check+0x26>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <null_ptr_check+0x26>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d102      	bne.n	80033d6 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 80033d0:	23ff      	movs	r3, #255	; 0xff
 80033d2:	73fb      	strb	r3, [r7, #15]
 80033d4:	e001      	b.n	80033da <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80033da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <detect_all_sensors>:
}i2c_device;


//----------------------------------------------------------------------------------------
void detect_all_sensors(void)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	af00      	add	r7, sp, #0
	detect_bme280();
 80033ee:	f000 f827 	bl	8003440 <detect_bme280>
	detect_mpu6050();
 80033f2:	f000 f85b 	bl	80034ac <detect_mpu6050>
	detect_apds9960();
 80033f6:	f000 f937 	bl	8003668 <detect_apds9960>
	denect_hmc5883l();
 80033fa:	f000 f8d9 	bl	80035b0 <denect_hmc5883l>
	detect_ms5611();
 80033fe:	f000 f905 	bl	800360c <detect_ms5611>
	detect_oled_screen();
 8003402:	f000 f967 	bl	80036d4 <detect_oled_screen>
	detect_ds3231();
 8003406:	f000 f98b 	bl	8003720 <detect_ds3231>

	measure();
 800340a:	f000 f802 	bl	8003412 <measure>
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}

08003412 <measure>:
//----------------------------------------------------------------------------------------
void measure(void)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	af00      	add	r7, sp, #0
	bme280_measure();
 8003416:	f000 f803 	bl	8003420 <bme280_measure>
//	mpu6050();
//	hmc5883l();
//	ms5611();
//	apds9960();
}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <bme280_measure>:
//----------------------------------------------------------------------------------------
void bme280_measure(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
	int8_t data =0;
 8003426:	2300      	movs	r3, #0
 8003428:	71fb      	strb	r3, [r7, #7]
	data = bme280_init(&dev);
 800342a:	4804      	ldr	r0, [pc, #16]	; (800343c <bme280_measure+0x1c>)
 800342c:	f7ff fd38 	bl	8002ea0 <bme280_init>
 8003430:	4603      	mov	r3, r0
 8003432:	71fb      	strb	r3, [r7, #7]
	//rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
}
 8003434:	bf00      	nop
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	200004c0 	.word	0x200004c0

08003440 <detect_bme280>:
//----------------------------------------------------------------------------------------
void detect_bme280(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af04      	add	r7, sp, #16
	uint16_t STATUS=0;
 8003446:	2300      	movs	r3, #0
 8003448:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x76;  		 	// BME280
 800344a:	2376      	movs	r3, #118	; 0x76
 800344c:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0xD0;
 800344e:	23d0      	movs	r3, #208	; 0xd0
 8003450:	807b      	strh	r3, [r7, #2]
	uint8_t id = 96;							// in hex form
 8003452:	2360      	movs	r3, #96	; 0x60
 8003454:	707b      	strb	r3, [r7, #1]
	uint8_t buff=0;        						// Return 0x96 -> Dec 60
 8003456:	2300      	movs	r3, #0
 8003458:	703b      	strb	r3, [r7, #0]

	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 800345a:	88bb      	ldrh	r3, [r7, #4]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	b299      	uxth	r1, r3
 8003460:	887a      	ldrh	r2, [r7, #2]
 8003462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003466:	9302      	str	r3, [sp, #8]
 8003468:	2301      	movs	r3, #1
 800346a:	9301      	str	r3, [sp, #4]
 800346c:	463b      	mov	r3, r7
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	2301      	movs	r3, #1
 8003472:	480c      	ldr	r0, [pc, #48]	; (80034a4 <detect_bme280+0x64>)
 8003474:	f002 fddc 	bl	8006030 <HAL_I2C_Mem_Read>
 8003478:	4603      	mov	r3, r0
 800347a:	80fb      	strh	r3, [r7, #6]
	//HAL_OK == 0
	if((buff == id) && (STATUS == 0))
 800347c:	783b      	ldrb	r3, [r7, #0]
 800347e:	787a      	ldrb	r2, [r7, #1]
 8003480:	429a      	cmp	r2, r3
 8003482:	d106      	bne.n	8003492 <detect_bme280+0x52>
 8003484:	88fb      	ldrh	r3, [r7, #6]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d103      	bne.n	8003492 <detect_bme280+0x52>
	{
		i2c_device.BME280_ready_status = true;
 800348a:	4b07      	ldr	r3, [pc, #28]	; (80034a8 <detect_bme280+0x68>)
 800348c:	2201      	movs	r2, #1
 800348e:	701a      	strb	r2, [r3, #0]
 8003490:	e003      	b.n	800349a <detect_bme280+0x5a>
	}
	else
	{
		i2c_device.BME280_ready_status = false;
 8003492:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <detect_bme280+0x68>)
 8003494:	2200      	movs	r2, #0
 8003496:	701a      	strb	r2, [r3, #0]
	}
}
 8003498:	bf00      	nop
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000234 	.word	0x20000234
 80034a8:	20000524 	.word	0x20000524

080034ac <detect_mpu6050>:
//----------------------------------------------------------------------------------------
void detect_mpu6050(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 80034b2:	2300      	movs	r3, #0
 80034b4:	81fb      	strh	r3, [r7, #14]
	uint16_t addres_device = 0xD0;
 80034b6:	23d0      	movs	r3, #208	; 0xd0
 80034b8:	81bb      	strh	r3, [r7, #12]
	uint16_t id_addr = 0x75;
 80034ba:	2375      	movs	r3, #117	; 0x75
 80034bc:	817b      	strh	r3, [r7, #10]
	uint8_t id = 104;							// in hex form
 80034be:	2368      	movs	r3, #104	; 0x68
 80034c0:	727b      	strb	r3, [r7, #9]
	uint8_t buff = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	723b      	strb	r3, [r7, #8]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, id_addr, 1, &buff, 1, 1000);
 80034c6:	897a      	ldrh	r2, [r7, #10]
 80034c8:	89b9      	ldrh	r1, [r7, #12]
 80034ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034ce:	9302      	str	r3, [sp, #8]
 80034d0:	2301      	movs	r3, #1
 80034d2:	9301      	str	r3, [sp, #4]
 80034d4:	f107 0308 	add.w	r3, r7, #8
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	2301      	movs	r3, #1
 80034dc:	4832      	ldr	r0, [pc, #200]	; (80035a8 <detect_mpu6050+0xfc>)
 80034de:	f002 fda7 	bl	8006030 <HAL_I2C_Mem_Read>
 80034e2:	4603      	mov	r3, r0
 80034e4:	81fb      	strh	r3, [r7, #14]

	if((buff == id) && (STATUS == 0))
 80034e6:	7a3b      	ldrb	r3, [r7, #8]
 80034e8:	7a7a      	ldrb	r2, [r7, #9]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d106      	bne.n	80034fc <detect_mpu6050+0x50>
 80034ee:	89fb      	ldrh	r3, [r7, #14]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d103      	bne.n	80034fc <detect_mpu6050+0x50>
	{
		i2c_device.MPU6050_ready_status = true;
 80034f4:	4b2d      	ldr	r3, [pc, #180]	; (80035ac <detect_mpu6050+0x100>)
 80034f6:	2201      	movs	r2, #1
 80034f8:	705a      	strb	r2, [r3, #1]
 80034fa:	e002      	b.n	8003502 <detect_mpu6050+0x56>
	}
	else
	{
		i2c_device.MPU6050_ready_status = false;
 80034fc:	4b2b      	ldr	r3, [pc, #172]	; (80035ac <detect_mpu6050+0x100>)
 80034fe:	2200      	movs	r2, #0
 8003500:	705a      	strb	r2, [r3, #1]
	}

	// turn on direct i2c communication with hmc5883l
	if(i2c_device.MPU6050_ready_status == true)
 8003502:	4b2a      	ldr	r3, [pc, #168]	; (80035ac <detect_mpu6050+0x100>)
 8003504:	785b      	ldrb	r3, [r3, #1]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d04a      	beq.n	80035a0 <detect_mpu6050+0xf4>
	{
		uint8_t data = 0x00;
 800350a:	2300      	movs	r3, #0
 800350c:	71fb      	strb	r3, [r7, #7]
		STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x6A, 1, &data, 1, 1000);		// Disable i2c master mode
 800350e:	89b9      	ldrh	r1, [r7, #12]
 8003510:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003514:	9302      	str	r3, [sp, #8]
 8003516:	2301      	movs	r3, #1
 8003518:	9301      	str	r3, [sp, #4]
 800351a:	1dfb      	adds	r3, r7, #7
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	2301      	movs	r3, #1
 8003520:	226a      	movs	r2, #106	; 0x6a
 8003522:	4821      	ldr	r0, [pc, #132]	; (80035a8 <detect_mpu6050+0xfc>)
 8003524:	f002 fc8a 	bl	8005e3c <HAL_I2C_Mem_Write>
 8003528:	4603      	mov	r3, r0
 800352a:	81fb      	strh	r3, [r7, #14]
		data = 0x02;
 800352c:	2302      	movs	r3, #2
 800352e:	71fb      	strb	r3, [r7, #7]
		STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x37, 1, &data, 1, 1000);		// Enable i2c master bypass mode
 8003530:	89b9      	ldrh	r1, [r7, #12]
 8003532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003536:	9302      	str	r3, [sp, #8]
 8003538:	2301      	movs	r3, #1
 800353a:	9301      	str	r3, [sp, #4]
 800353c:	1dfb      	adds	r3, r7, #7
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	2301      	movs	r3, #1
 8003542:	2237      	movs	r2, #55	; 0x37
 8003544:	4818      	ldr	r0, [pc, #96]	; (80035a8 <detect_mpu6050+0xfc>)
 8003546:	f002 fc79 	bl	8005e3c <HAL_I2C_Mem_Write>
 800354a:	4603      	mov	r3, r0
 800354c:	81fb      	strh	r3, [r7, #14]

		// Check waited registers
		buff = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	723b      	strb	r3, [r7, #8]
		STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, 0x6A, 1, &buff, 1, 1000);
 8003552:	89b9      	ldrh	r1, [r7, #12]
 8003554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003558:	9302      	str	r3, [sp, #8]
 800355a:	2301      	movs	r3, #1
 800355c:	9301      	str	r3, [sp, #4]
 800355e:	f107 0308 	add.w	r3, r7, #8
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	2301      	movs	r3, #1
 8003566:	226a      	movs	r2, #106	; 0x6a
 8003568:	480f      	ldr	r0, [pc, #60]	; (80035a8 <detect_mpu6050+0xfc>)
 800356a:	f002 fd61 	bl	8006030 <HAL_I2C_Mem_Read>
 800356e:	4603      	mov	r3, r0
 8003570:	81fb      	strh	r3, [r7, #14]
		buff = 0;
 8003572:	2300      	movs	r3, #0
 8003574:	723b      	strb	r3, [r7, #8]
		STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, 0x37, 1, &buff, 1, 1000);
 8003576:	89b9      	ldrh	r1, [r7, #12]
 8003578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800357c:	9302      	str	r3, [sp, #8]
 800357e:	2301      	movs	r3, #1
 8003580:	9301      	str	r3, [sp, #4]
 8003582:	f107 0308 	add.w	r3, r7, #8
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	2301      	movs	r3, #1
 800358a:	2237      	movs	r2, #55	; 0x37
 800358c:	4806      	ldr	r0, [pc, #24]	; (80035a8 <detect_mpu6050+0xfc>)
 800358e:	f002 fd4f 	bl	8006030 <HAL_I2C_Mem_Read>
 8003592:	4603      	mov	r3, r0
 8003594:	81fb      	strh	r3, [r7, #14]

		if(STATUS == 0)
 8003596:	89fb      	ldrh	r3, [r7, #14]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <detect_mpu6050+0xf4>
		{
			denect_hmc5883l();     // Don't work  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 800359c:	f000 f808 	bl	80035b0 <denect_hmc5883l>
		}
	}
}
 80035a0:	bf00      	nop
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	200002e0 	.word	0x200002e0
 80035ac:	20000524 	.word	0x20000524

080035b0 <denect_hmc5883l>:
//----------------------------------------------------------------------------------------
void denect_hmc5883l(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 80035b6:	2300      	movs	r3, #0
 80035b8:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x1E;       //0x1E                		 ///// 0x3C
 80035ba:	231e      	movs	r3, #30
 80035bc:	80bb      	strh	r3, [r7, #4]
	uint16_t addr = 0x0A;				// HMC5883L_REG_IDENT_A      ///// 0xA0
 80035be:	230a      	movs	r3, #10
 80035c0:	807b      	strh	r3, [r7, #2]
	//uint8_t id = 0xa8;							// in hex form
	uint8_t buff = 0;
 80035c2:	2300      	movs	r3, #0
 80035c4:	707b      	strb	r3, [r7, #1]

	//STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x37, 1, &data, 1, 1000);

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1 , addr, 1, &buff, 1, 1000);
 80035c6:	88bb      	ldrh	r3, [r7, #4]
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	b299      	uxth	r1, r3
 80035cc:	887a      	ldrh	r2, [r7, #2]
 80035ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035d2:	9302      	str	r3, [sp, #8]
 80035d4:	2301      	movs	r3, #1
 80035d6:	9301      	str	r3, [sp, #4]
 80035d8:	1c7b      	adds	r3, r7, #1
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	2301      	movs	r3, #1
 80035de:	4809      	ldr	r0, [pc, #36]	; (8003604 <denect_hmc5883l+0x54>)
 80035e0:	f002 fd26 	bl	8006030 <HAL_I2C_Mem_Read>
 80035e4:	4603      	mov	r3, r0
 80035e6:	80fb      	strh	r3, [r7, #6]
	if(STATUS == 0)
 80035e8:	88fb      	ldrh	r3, [r7, #6]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d103      	bne.n	80035f6 <denect_hmc5883l+0x46>
	{
		i2c_device.HMC5883L_ready_status = true;
 80035ee:	4b06      	ldr	r3, [pc, #24]	; (8003608 <denect_hmc5883l+0x58>)
 80035f0:	2201      	movs	r2, #1
 80035f2:	709a      	strb	r2, [r3, #2]
//	HMC5883L_setDataRate(HMC5883L_DATARATE_15HZ);
//	HMC5883L_setSamples(HMC5883L_SAMPLES_1); HMC5883L_setOffset(0, 0);
//
//	Vector mag = HMC5883L_readRaw();

}
 80035f4:	e002      	b.n	80035fc <denect_hmc5883l+0x4c>
		i2c_device.HMC5883L_ready_status = false;
 80035f6:	4b04      	ldr	r3, [pc, #16]	; (8003608 <denect_hmc5883l+0x58>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	709a      	strb	r2, [r3, #2]
}
 80035fc:	bf00      	nop
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	200002e0 	.word	0x200002e0
 8003608:	20000524 	.word	0x20000524

0800360c <detect_ms5611>:
//----------------------------------------------------------------------------------------
void detect_ms5611(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 8003612:	2300      	movs	r3, #0
 8003614:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x77;
 8003616:	2377      	movs	r3, #119	; 0x77
 8003618:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x00 ;
 800361a:	2300      	movs	r3, #0
 800361c:	807b      	strh	r3, [r7, #2]
	uint8_t buff = 0;
 800361e:	2300      	movs	r3, #0
 8003620:	707b      	strb	r3, [r7, #1]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 8003622:	88bb      	ldrh	r3, [r7, #4]
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	b299      	uxth	r1, r3
 8003628:	887a      	ldrh	r2, [r7, #2]
 800362a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800362e:	9302      	str	r3, [sp, #8]
 8003630:	2301      	movs	r3, #1
 8003632:	9301      	str	r3, [sp, #4]
 8003634:	1c7b      	adds	r3, r7, #1
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	2301      	movs	r3, #1
 800363a:	4809      	ldr	r0, [pc, #36]	; (8003660 <detect_ms5611+0x54>)
 800363c:	f002 fcf8 	bl	8006030 <HAL_I2C_Mem_Read>
 8003640:	4603      	mov	r3, r0
 8003642:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 8003644:	88fb      	ldrh	r3, [r7, #6]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d103      	bne.n	8003652 <detect_ms5611+0x46>
	{
		i2c_device.MS5611_ready_status = true;
 800364a:	4b06      	ldr	r3, [pc, #24]	; (8003664 <detect_ms5611+0x58>)
 800364c:	2201      	movs	r2, #1
 800364e:	70da      	strb	r2, [r3, #3]
	}
	else
	{
		i2c_device.MS5611_ready_status = false;
	}
}
 8003650:	e002      	b.n	8003658 <detect_ms5611+0x4c>
		i2c_device.MS5611_ready_status = false;
 8003652:	4b04      	ldr	r3, [pc, #16]	; (8003664 <detect_ms5611+0x58>)
 8003654:	2200      	movs	r2, #0
 8003656:	70da      	strb	r2, [r3, #3]
}
 8003658:	bf00      	nop
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	200002e0 	.word	0x200002e0
 8003664:	20000524 	.word	0x20000524

08003668 <detect_apds9960>:
//----------------------------------------------------------------------------------------
void detect_apds9960(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x39;
 8003672:	2339      	movs	r3, #57	; 0x39
 8003674:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x92;
 8003676:	2392      	movs	r3, #146	; 0x92
 8003678:	807b      	strh	r3, [r7, #2]
	uint8_t id = 0xa8;							// in hex form
 800367a:	23a8      	movs	r3, #168	; 0xa8
 800367c:	707b      	strb	r3, [r7, #1]
	uint8_t buff = 0;
 800367e:	2300      	movs	r3, #0
 8003680:	703b      	strb	r3, [r7, #0]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 8003682:	88bb      	ldrh	r3, [r7, #4]
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	b299      	uxth	r1, r3
 8003688:	887a      	ldrh	r2, [r7, #2]
 800368a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800368e:	9302      	str	r3, [sp, #8]
 8003690:	2301      	movs	r3, #1
 8003692:	9301      	str	r3, [sp, #4]
 8003694:	463b      	mov	r3, r7
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	2301      	movs	r3, #1
 800369a:	480c      	ldr	r0, [pc, #48]	; (80036cc <detect_apds9960+0x64>)
 800369c:	f002 fcc8 	bl	8006030 <HAL_I2C_Mem_Read>
 80036a0:	4603      	mov	r3, r0
 80036a2:	80fb      	strh	r3, [r7, #6]

	if((buff == id) && (STATUS == 0))
 80036a4:	783b      	ldrb	r3, [r7, #0]
 80036a6:	787a      	ldrb	r2, [r7, #1]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d106      	bne.n	80036ba <detect_apds9960+0x52>
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d103      	bne.n	80036ba <detect_apds9960+0x52>
	{
		i2c_device.APDS9960_ready_status = true;
 80036b2:	4b07      	ldr	r3, [pc, #28]	; (80036d0 <detect_apds9960+0x68>)
 80036b4:	2201      	movs	r2, #1
 80036b6:	711a      	strb	r2, [r3, #4]
 80036b8:	e003      	b.n	80036c2 <detect_apds9960+0x5a>
	}
	else
	{
		i2c_device.APDS9960_ready_status = false;
 80036ba:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <detect_apds9960+0x68>)
 80036bc:	2200      	movs	r2, #0
 80036be:	711a      	strb	r2, [r3, #4]
	}
}
 80036c0:	bf00      	nop
 80036c2:	bf00      	nop
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	200002e0 	.word	0x200002e0
 80036d0:	20000524 	.word	0x20000524

080036d4 <detect_oled_screen>:
//----------------------------------------------------------------------------------------
void detect_oled_screen(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af02      	add	r7, sp, #8
	uint16_t STATUS = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[2];
	buffer[0] = 0x00;
 80036de:	2300      	movs	r3, #0
 80036e0:	713b      	strb	r3, [r7, #4]
	buffer[1] = 0xAE;
 80036e2:	23ae      	movs	r3, #174	; 0xae
 80036e4:	717b      	strb	r3, [r7, #5]

	STATUS = HAL_I2C_Master_Transmit(&hi2c3, 0x78,buffer, 2, 1000);
 80036e6:	1d3a      	adds	r2, r7, #4
 80036e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	2302      	movs	r3, #2
 80036f0:	2178      	movs	r1, #120	; 0x78
 80036f2:	4809      	ldr	r0, [pc, #36]	; (8003718 <detect_oled_screen+0x44>)
 80036f4:	f002 faa4 	bl	8005c40 <HAL_I2C_Master_Transmit>
 80036f8:	4603      	mov	r3, r0
 80036fa:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 80036fc:	88fb      	ldrh	r3, [r7, #6]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d103      	bne.n	800370a <detect_oled_screen+0x36>
	{
		i2c_device.OLED_ready_status = true;
 8003702:	4b06      	ldr	r3, [pc, #24]	; (800371c <detect_oled_screen+0x48>)
 8003704:	2201      	movs	r2, #1
 8003706:	715a      	strb	r2, [r3, #5]
	}
	else
	{
		i2c_device.OLED_ready_status = false;
	}
}
 8003708:	e002      	b.n	8003710 <detect_oled_screen+0x3c>
		i2c_device.OLED_ready_status = false;
 800370a:	4b04      	ldr	r3, [pc, #16]	; (800371c <detect_oled_screen+0x48>)
 800370c:	2200      	movs	r2, #0
 800370e:	715a      	strb	r2, [r3, #5]
}
 8003710:	bf00      	nop
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	20000234 	.word	0x20000234
 800371c:	20000524 	.word	0x20000524

08003720 <detect_ds3231>:
//----------------------------------------------------------------------------------------
void detect_ds3231(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 8003726:	2300      	movs	r3, #0
 8003728:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x68;
 800372a:	2368      	movs	r3, #104	; 0x68
 800372c:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x00;						// Read seconds
 800372e:	2300      	movs	r3, #0
 8003730:	807b      	strh	r3, [r7, #2]
	uint8_t buff = 0;
 8003732:	2300      	movs	r3, #0
 8003734:	707b      	strb	r3, [r7, #1]

	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 8003736:	88bb      	ldrh	r3, [r7, #4]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	b299      	uxth	r1, r3
 800373c:	887a      	ldrh	r2, [r7, #2]
 800373e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003742:	9302      	str	r3, [sp, #8]
 8003744:	2301      	movs	r3, #1
 8003746:	9301      	str	r3, [sp, #4]
 8003748:	1c7b      	adds	r3, r7, #1
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	2301      	movs	r3, #1
 800374e:	4809      	ldr	r0, [pc, #36]	; (8003774 <detect_ds3231+0x54>)
 8003750:	f002 fc6e 	bl	8006030 <HAL_I2C_Mem_Read>
 8003754:	4603      	mov	r3, r0
 8003756:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 8003758:	88fb      	ldrh	r3, [r7, #6]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d103      	bne.n	8003766 <detect_ds3231+0x46>
	{
		i2c_device.DS3231_ready_status = true;
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <detect_ds3231+0x58>)
 8003760:	2201      	movs	r2, #1
 8003762:	719a      	strb	r2, [r3, #6]
	}
	else
	{
		i2c_device.DS3231_ready_status = false;
	}
}
 8003764:	e002      	b.n	800376c <detect_ds3231+0x4c>
		i2c_device.DS3231_ready_status = false;
 8003766:	4b04      	ldr	r3, [pc, #16]	; (8003778 <detect_ds3231+0x58>)
 8003768:	2200      	movs	r2, #0
 800376a:	719a      	strb	r2, [r3, #6]
}
 800376c:	bf00      	nop
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	20000234 	.word	0x20000234
 8003778:	20000524 	.word	0x20000524

0800377c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800377c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003780:	480d      	ldr	r0, [pc, #52]	; (80037b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003782:	490e      	ldr	r1, [pc, #56]	; (80037bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003784:	4a0e      	ldr	r2, [pc, #56]	; (80037c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003788:	e002      	b.n	8003790 <LoopCopyDataInit>

0800378a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800378a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800378c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800378e:	3304      	adds	r3, #4

08003790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003794:	d3f9      	bcc.n	800378a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003796:	4a0b      	ldr	r2, [pc, #44]	; (80037c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003798:	4c0b      	ldr	r4, [pc, #44]	; (80037c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800379a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800379c:	e001      	b.n	80037a2 <LoopFillZerobss>

0800379e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800379e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037a0:	3204      	adds	r2, #4

080037a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037a4:	d3fb      	bcc.n	800379e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80037a6:	f7fe f841 	bl	800182c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037aa:	f009 fa3b 	bl	800cc24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037ae:	f7fd f88f 	bl	80008d0 <main>
  bx  lr    
 80037b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80037b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80037b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037bc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80037c0:	0800d3e0 	.word	0x0800d3e0
  ldr r2, =_sbss
 80037c4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80037c8:	20000c44 	.word	0x20000c44

080037cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037cc:	e7fe      	b.n	80037cc <ADC_IRQHandler>
	...

080037d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037d4:	4b0e      	ldr	r3, [pc, #56]	; (8003810 <HAL_Init+0x40>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a0d      	ldr	r2, [pc, #52]	; (8003810 <HAL_Init+0x40>)
 80037da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037e0:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <HAL_Init+0x40>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a0a      	ldr	r2, [pc, #40]	; (8003810 <HAL_Init+0x40>)
 80037e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037ec:	4b08      	ldr	r3, [pc, #32]	; (8003810 <HAL_Init+0x40>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a07      	ldr	r2, [pc, #28]	; (8003810 <HAL_Init+0x40>)
 80037f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037f8:	2003      	movs	r0, #3
 80037fa:	f000 f94f 	bl	8003a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037fe:	2000      	movs	r0, #0
 8003800:	f000 f808 	bl	8003814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003804:	f7fd fcce 	bl	80011a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40023c00 	.word	0x40023c00

08003814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800381c:	4b12      	ldr	r3, [pc, #72]	; (8003868 <HAL_InitTick+0x54>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4b12      	ldr	r3, [pc, #72]	; (800386c <HAL_InitTick+0x58>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	4619      	mov	r1, r3
 8003826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800382a:	fbb3 f3f1 	udiv	r3, r3, r1
 800382e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003832:	4618      	mov	r0, r3
 8003834:	f000 f967 	bl	8003b06 <HAL_SYSTICK_Config>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e00e      	b.n	8003860 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b0f      	cmp	r3, #15
 8003846:	d80a      	bhi.n	800385e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003848:	2200      	movs	r2, #0
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003850:	f000 f92f 	bl	8003ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003854:	4a06      	ldr	r2, [pc, #24]	; (8003870 <HAL_InitTick+0x5c>)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800385a:	2300      	movs	r3, #0
 800385c:	e000      	b.n	8003860 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
}
 8003860:	4618      	mov	r0, r3
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20000004 	.word	0x20000004
 800386c:	20000150 	.word	0x20000150
 8003870:	2000014c 	.word	0x2000014c

08003874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003878:	4b06      	ldr	r3, [pc, #24]	; (8003894 <HAL_IncTick+0x20>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	4b06      	ldr	r3, [pc, #24]	; (8003898 <HAL_IncTick+0x24>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4413      	add	r3, r2
 8003884:	4a04      	ldr	r2, [pc, #16]	; (8003898 <HAL_IncTick+0x24>)
 8003886:	6013      	str	r3, [r2, #0]
}
 8003888:	bf00      	nop
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20000150 	.word	0x20000150
 8003898:	20000554 	.word	0x20000554

0800389c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return uwTick;
 80038a0:	4b03      	ldr	r3, [pc, #12]	; (80038b0 <HAL_GetTick+0x14>)
 80038a2:	681b      	ldr	r3, [r3, #0]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	20000554 	.word	0x20000554

080038b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038bc:	f7ff ffee 	bl	800389c <HAL_GetTick>
 80038c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038cc:	d005      	beq.n	80038da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038ce:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <HAL_Delay+0x44>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4413      	add	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038da:	bf00      	nop
 80038dc:	f7ff ffde 	bl	800389c <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d8f7      	bhi.n	80038dc <HAL_Delay+0x28>
  {
  }
}
 80038ec:	bf00      	nop
 80038ee:	bf00      	nop
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000150 	.word	0x20000150

080038fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800390c:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <__NVIC_SetPriorityGrouping+0x44>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003918:	4013      	ands	r3, r2
 800391a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800392c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800392e:	4a04      	ldr	r2, [pc, #16]	; (8003940 <__NVIC_SetPriorityGrouping+0x44>)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	60d3      	str	r3, [r2, #12]
}
 8003934:	bf00      	nop
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	e000ed00 	.word	0xe000ed00

08003944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003948:	4b04      	ldr	r3, [pc, #16]	; (800395c <__NVIC_GetPriorityGrouping+0x18>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	0a1b      	lsrs	r3, r3, #8
 800394e:	f003 0307 	and.w	r3, r3, #7
}
 8003952:	4618      	mov	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	e000ed00 	.word	0xe000ed00

08003960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800396a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396e:	2b00      	cmp	r3, #0
 8003970:	db0b      	blt.n	800398a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	f003 021f 	and.w	r2, r3, #31
 8003978:	4907      	ldr	r1, [pc, #28]	; (8003998 <__NVIC_EnableIRQ+0x38>)
 800397a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	2001      	movs	r0, #1
 8003982:	fa00 f202 	lsl.w	r2, r0, r2
 8003986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	e000e100 	.word	0xe000e100

0800399c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	6039      	str	r1, [r7, #0]
 80039a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	db0a      	blt.n	80039c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	490c      	ldr	r1, [pc, #48]	; (80039e8 <__NVIC_SetPriority+0x4c>)
 80039b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ba:	0112      	lsls	r2, r2, #4
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	440b      	add	r3, r1
 80039c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039c4:	e00a      	b.n	80039dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	4908      	ldr	r1, [pc, #32]	; (80039ec <__NVIC_SetPriority+0x50>)
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	3b04      	subs	r3, #4
 80039d4:	0112      	lsls	r2, r2, #4
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	440b      	add	r3, r1
 80039da:	761a      	strb	r2, [r3, #24]
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	e000e100 	.word	0xe000e100
 80039ec:	e000ed00 	.word	0xe000ed00

080039f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b089      	sub	sp, #36	; 0x24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f1c3 0307 	rsb	r3, r3, #7
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	bf28      	it	cs
 8003a0e:	2304      	movcs	r3, #4
 8003a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	3304      	adds	r3, #4
 8003a16:	2b06      	cmp	r3, #6
 8003a18:	d902      	bls.n	8003a20 <NVIC_EncodePriority+0x30>
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	3b03      	subs	r3, #3
 8003a1e:	e000      	b.n	8003a22 <NVIC_EncodePriority+0x32>
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43da      	mvns	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	401a      	ands	r2, r3
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a42:	43d9      	mvns	r1, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a48:	4313      	orrs	r3, r2
         );
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3724      	adds	r7, #36	; 0x24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
	...

08003a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a68:	d301      	bcc.n	8003a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e00f      	b.n	8003a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a6e:	4a0a      	ldr	r2, [pc, #40]	; (8003a98 <SysTick_Config+0x40>)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a76:	210f      	movs	r1, #15
 8003a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a7c:	f7ff ff8e 	bl	800399c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a80:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <SysTick_Config+0x40>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a86:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <SysTick_Config+0x40>)
 8003a88:	2207      	movs	r2, #7
 8003a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	e000e010 	.word	0xe000e010

08003a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7ff ff29 	bl	80038fc <__NVIC_SetPriorityGrouping>
}
 8003aaa:	bf00      	nop
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b086      	sub	sp, #24
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	4603      	mov	r3, r0
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	607a      	str	r2, [r7, #4]
 8003abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ac4:	f7ff ff3e 	bl	8003944 <__NVIC_GetPriorityGrouping>
 8003ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	68b9      	ldr	r1, [r7, #8]
 8003ace:	6978      	ldr	r0, [r7, #20]
 8003ad0:	f7ff ff8e 	bl	80039f0 <NVIC_EncodePriority>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ada:	4611      	mov	r1, r2
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff ff5d 	bl	800399c <__NVIC_SetPriority>
}
 8003ae2:	bf00      	nop
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b082      	sub	sp, #8
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	4603      	mov	r3, r0
 8003af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff ff31 	bl	8003960 <__NVIC_EnableIRQ>
}
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b082      	sub	sp, #8
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7ff ffa2 	bl	8003a58 <SysTick_Config>
 8003b14:	4603      	mov	r3, r0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b089      	sub	sp, #36	; 0x24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
 8003b3a:	e16b      	b.n	8003e14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	f040 815a 	bne.w	8003e0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d005      	beq.n	8003b72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d130      	bne.n	8003bd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	2203      	movs	r2, #3
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	43db      	mvns	r3, r3
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4013      	ands	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ba8:	2201      	movs	r2, #1
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	091b      	lsrs	r3, r3, #4
 8003bbe:	f003 0201 	and.w	r2, r3, #1
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f003 0303 	and.w	r3, r3, #3
 8003bdc:	2b03      	cmp	r3, #3
 8003bde:	d017      	beq.n	8003c10 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	2203      	movs	r2, #3
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 0303 	and.w	r3, r3, #3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d123      	bne.n	8003c64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	08da      	lsrs	r2, r3, #3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3208      	adds	r2, #8
 8003c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	220f      	movs	r2, #15
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	08da      	lsrs	r2, r3, #3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3208      	adds	r2, #8
 8003c5e:	69b9      	ldr	r1, [r7, #24]
 8003c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	2203      	movs	r2, #3
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	43db      	mvns	r3, r3
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 0203 	and.w	r2, r3, #3
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 80b4 	beq.w	8003e0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	4b60      	ldr	r3, [pc, #384]	; (8003e2c <HAL_GPIO_Init+0x30c>)
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	4a5f      	ldr	r2, [pc, #380]	; (8003e2c <HAL_GPIO_Init+0x30c>)
 8003cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cb6:	4b5d      	ldr	r3, [pc, #372]	; (8003e2c <HAL_GPIO_Init+0x30c>)
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cc2:	4a5b      	ldr	r2, [pc, #364]	; (8003e30 <HAL_GPIO_Init+0x310>)
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	089b      	lsrs	r3, r3, #2
 8003cc8:	3302      	adds	r3, #2
 8003cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	220f      	movs	r2, #15
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a52      	ldr	r2, [pc, #328]	; (8003e34 <HAL_GPIO_Init+0x314>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d02b      	beq.n	8003d46 <HAL_GPIO_Init+0x226>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a51      	ldr	r2, [pc, #324]	; (8003e38 <HAL_GPIO_Init+0x318>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d025      	beq.n	8003d42 <HAL_GPIO_Init+0x222>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a50      	ldr	r2, [pc, #320]	; (8003e3c <HAL_GPIO_Init+0x31c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d01f      	beq.n	8003d3e <HAL_GPIO_Init+0x21e>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a4f      	ldr	r2, [pc, #316]	; (8003e40 <HAL_GPIO_Init+0x320>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d019      	beq.n	8003d3a <HAL_GPIO_Init+0x21a>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a4e      	ldr	r2, [pc, #312]	; (8003e44 <HAL_GPIO_Init+0x324>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d013      	beq.n	8003d36 <HAL_GPIO_Init+0x216>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a4d      	ldr	r2, [pc, #308]	; (8003e48 <HAL_GPIO_Init+0x328>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00d      	beq.n	8003d32 <HAL_GPIO_Init+0x212>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a4c      	ldr	r2, [pc, #304]	; (8003e4c <HAL_GPIO_Init+0x32c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d007      	beq.n	8003d2e <HAL_GPIO_Init+0x20e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a4b      	ldr	r2, [pc, #300]	; (8003e50 <HAL_GPIO_Init+0x330>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d101      	bne.n	8003d2a <HAL_GPIO_Init+0x20a>
 8003d26:	2307      	movs	r3, #7
 8003d28:	e00e      	b.n	8003d48 <HAL_GPIO_Init+0x228>
 8003d2a:	2308      	movs	r3, #8
 8003d2c:	e00c      	b.n	8003d48 <HAL_GPIO_Init+0x228>
 8003d2e:	2306      	movs	r3, #6
 8003d30:	e00a      	b.n	8003d48 <HAL_GPIO_Init+0x228>
 8003d32:	2305      	movs	r3, #5
 8003d34:	e008      	b.n	8003d48 <HAL_GPIO_Init+0x228>
 8003d36:	2304      	movs	r3, #4
 8003d38:	e006      	b.n	8003d48 <HAL_GPIO_Init+0x228>
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e004      	b.n	8003d48 <HAL_GPIO_Init+0x228>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e002      	b.n	8003d48 <HAL_GPIO_Init+0x228>
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <HAL_GPIO_Init+0x228>
 8003d46:	2300      	movs	r3, #0
 8003d48:	69fa      	ldr	r2, [r7, #28]
 8003d4a:	f002 0203 	and.w	r2, r2, #3
 8003d4e:	0092      	lsls	r2, r2, #2
 8003d50:	4093      	lsls	r3, r2
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d58:	4935      	ldr	r1, [pc, #212]	; (8003e30 <HAL_GPIO_Init+0x310>)
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	089b      	lsrs	r3, r3, #2
 8003d5e:	3302      	adds	r3, #2
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d66:	4b3b      	ldr	r3, [pc, #236]	; (8003e54 <HAL_GPIO_Init+0x334>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	4013      	ands	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d8a:	4a32      	ldr	r2, [pc, #200]	; (8003e54 <HAL_GPIO_Init+0x334>)
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d90:	4b30      	ldr	r3, [pc, #192]	; (8003e54 <HAL_GPIO_Init+0x334>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003db4:	4a27      	ldr	r2, [pc, #156]	; (8003e54 <HAL_GPIO_Init+0x334>)
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dba:	4b26      	ldr	r3, [pc, #152]	; (8003e54 <HAL_GPIO_Init+0x334>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dde:	4a1d      	ldr	r2, [pc, #116]	; (8003e54 <HAL_GPIO_Init+0x334>)
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003de4:	4b1b      	ldr	r3, [pc, #108]	; (8003e54 <HAL_GPIO_Init+0x334>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	43db      	mvns	r3, r3
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4013      	ands	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e08:	4a12      	ldr	r2, [pc, #72]	; (8003e54 <HAL_GPIO_Init+0x334>)
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	3301      	adds	r3, #1
 8003e12:	61fb      	str	r3, [r7, #28]
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	2b0f      	cmp	r3, #15
 8003e18:	f67f ae90 	bls.w	8003b3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e1c:	bf00      	nop
 8003e1e:	bf00      	nop
 8003e20:	3724      	adds	r7, #36	; 0x24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	40013800 	.word	0x40013800
 8003e34:	40020000 	.word	0x40020000
 8003e38:	40020400 	.word	0x40020400
 8003e3c:	40020800 	.word	0x40020800
 8003e40:	40020c00 	.word	0x40020c00
 8003e44:	40021000 	.word	0x40021000
 8003e48:	40021400 	.word	0x40021400
 8003e4c:	40021800 	.word	0x40021800
 8003e50:	40021c00 	.word	0x40021c00
 8003e54:	40013c00 	.word	0x40013c00

08003e58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	460b      	mov	r3, r1
 8003e62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691a      	ldr	r2, [r3, #16]
 8003e68:	887b      	ldrh	r3, [r7, #2]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e70:	2301      	movs	r3, #1
 8003e72:	73fb      	strb	r3, [r7, #15]
 8003e74:	e001      	b.n	8003e7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e76:	2300      	movs	r3, #0
 8003e78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	460b      	mov	r3, r1
 8003e92:	807b      	strh	r3, [r7, #2]
 8003e94:	4613      	mov	r3, r2
 8003e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e98:	787b      	ldrb	r3, [r7, #1]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e9e:	887a      	ldrh	r2, [r7, #2]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ea4:	e003      	b.n	8003eae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ea6:	887b      	ldrh	r3, [r7, #2]
 8003ea8:	041a      	lsls	r2, r3, #16
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	619a      	str	r2, [r3, #24]
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b085      	sub	sp, #20
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ecc:	887a      	ldrh	r2, [r7, #2]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	041a      	lsls	r2, r3, #16
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	43d9      	mvns	r1, r3
 8003ed8:	887b      	ldrh	r3, [r7, #2]
 8003eda:	400b      	ands	r3, r1
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	619a      	str	r2, [r3, #24]
}
 8003ee2:	bf00      	nop
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003eee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ef0:	b08f      	sub	sp, #60	; 0x3c
 8003ef2:	af0a      	add	r7, sp, #40	; 0x28
 8003ef4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e054      	b.n	8003faa <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f008 fbd2 	bl	800c6c4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2203      	movs	r2, #3
 8003f24:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d102      	bne.n	8003f3a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f005 fd74 	bl	8009a2c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	603b      	str	r3, [r7, #0]
 8003f4a:	687e      	ldr	r6, [r7, #4]
 8003f4c:	466d      	mov	r5, sp
 8003f4e:	f106 0410 	add.w	r4, r6, #16
 8003f52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f62:	1d33      	adds	r3, r6, #4
 8003f64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f66:	6838      	ldr	r0, [r7, #0]
 8003f68:	f005 fcee 	bl	8009948 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2101      	movs	r1, #1
 8003f72:	4618      	mov	r0, r3
 8003f74:	f005 fd6b 	bl	8009a4e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	603b      	str	r3, [r7, #0]
 8003f7e:	687e      	ldr	r6, [r7, #4]
 8003f80:	466d      	mov	r5, sp
 8003f82:	f106 0410 	add.w	r4, r6, #16
 8003f86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f92:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f96:	1d33      	adds	r3, r6, #4
 8003f98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f9a:	6838      	ldr	r0, [r7, #0]
 8003f9c:	f005 fe7e 	bl	8009c9c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fb2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003fb2:	b590      	push	{r4, r7, lr}
 8003fb4:	b089      	sub	sp, #36	; 0x24
 8003fb6:	af04      	add	r7, sp, #16
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	4608      	mov	r0, r1
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	70fb      	strb	r3, [r7, #3]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	70bb      	strb	r3, [r7, #2]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d101      	bne.n	8003fda <HAL_HCD_HC_Init+0x28>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	e076      	b.n	80040c8 <HAL_HCD_HC_Init+0x116>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003fe2:	78fb      	ldrb	r3, [r7, #3]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	212c      	movs	r1, #44	; 0x2c
 8003fe8:	fb01 f303 	mul.w	r3, r1, r3
 8003fec:	4413      	add	r3, r2
 8003fee:	333d      	adds	r3, #61	; 0x3d
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003ff4:	78fb      	ldrb	r3, [r7, #3]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	212c      	movs	r1, #44	; 0x2c
 8003ffa:	fb01 f303 	mul.w	r3, r1, r3
 8003ffe:	4413      	add	r3, r2
 8004000:	3338      	adds	r3, #56	; 0x38
 8004002:	787a      	ldrb	r2, [r7, #1]
 8004004:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004006:	78fb      	ldrb	r3, [r7, #3]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	212c      	movs	r1, #44	; 0x2c
 800400c:	fb01 f303 	mul.w	r3, r1, r3
 8004010:	4413      	add	r3, r2
 8004012:	3340      	adds	r3, #64	; 0x40
 8004014:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004016:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	212c      	movs	r1, #44	; 0x2c
 800401e:	fb01 f303 	mul.w	r3, r1, r3
 8004022:	4413      	add	r3, r2
 8004024:	3339      	adds	r3, #57	; 0x39
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	212c      	movs	r1, #44	; 0x2c
 8004030:	fb01 f303 	mul.w	r3, r1, r3
 8004034:	4413      	add	r3, r2
 8004036:	333f      	adds	r3, #63	; 0x3f
 8004038:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800403c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800403e:	78fb      	ldrb	r3, [r7, #3]
 8004040:	78ba      	ldrb	r2, [r7, #2]
 8004042:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004046:	b2d0      	uxtb	r0, r2
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	212c      	movs	r1, #44	; 0x2c
 800404c:	fb01 f303 	mul.w	r3, r1, r3
 8004050:	4413      	add	r3, r2
 8004052:	333a      	adds	r3, #58	; 0x3a
 8004054:	4602      	mov	r2, r0
 8004056:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004058:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800405c:	2b00      	cmp	r3, #0
 800405e:	da09      	bge.n	8004074 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004060:	78fb      	ldrb	r3, [r7, #3]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	212c      	movs	r1, #44	; 0x2c
 8004066:	fb01 f303 	mul.w	r3, r1, r3
 800406a:	4413      	add	r3, r2
 800406c:	333b      	adds	r3, #59	; 0x3b
 800406e:	2201      	movs	r2, #1
 8004070:	701a      	strb	r2, [r3, #0]
 8004072:	e008      	b.n	8004086 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	212c      	movs	r1, #44	; 0x2c
 800407a:	fb01 f303 	mul.w	r3, r1, r3
 800407e:	4413      	add	r3, r2
 8004080:	333b      	adds	r3, #59	; 0x3b
 8004082:	2200      	movs	r2, #0
 8004084:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004086:	78fb      	ldrb	r3, [r7, #3]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	212c      	movs	r1, #44	; 0x2c
 800408c:	fb01 f303 	mul.w	r3, r1, r3
 8004090:	4413      	add	r3, r2
 8004092:	333c      	adds	r3, #60	; 0x3c
 8004094:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004098:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	787c      	ldrb	r4, [r7, #1]
 80040a0:	78ba      	ldrb	r2, [r7, #2]
 80040a2:	78f9      	ldrb	r1, [r7, #3]
 80040a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80040a6:	9302      	str	r3, [sp, #8]
 80040a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80040ac:	9301      	str	r3, [sp, #4]
 80040ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	4623      	mov	r3, r4
 80040b6:	f005 ff73 	bl	8009fa0 <USB_HC_Init>
 80040ba:	4603      	mov	r3, r0
 80040bc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd90      	pop	{r4, r7, pc}

080040d0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d101      	bne.n	80040ee <HAL_HCD_HC_Halt+0x1e>
 80040ea:	2302      	movs	r3, #2
 80040ec:	e00f      	b.n	800410e <HAL_HCD_HC_Halt+0x3e>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	78fa      	ldrb	r2, [r7, #3]
 80040fc:	4611      	mov	r1, r2
 80040fe:	4618      	mov	r0, r3
 8004100:	f006 f9af 	bl	800a462 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800410c:	7bfb      	ldrb	r3, [r7, #15]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	4608      	mov	r0, r1
 8004122:	4611      	mov	r1, r2
 8004124:	461a      	mov	r2, r3
 8004126:	4603      	mov	r3, r0
 8004128:	70fb      	strb	r3, [r7, #3]
 800412a:	460b      	mov	r3, r1
 800412c:	70bb      	strb	r3, [r7, #2]
 800412e:	4613      	mov	r3, r2
 8004130:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004132:	78fb      	ldrb	r3, [r7, #3]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	212c      	movs	r1, #44	; 0x2c
 8004138:	fb01 f303 	mul.w	r3, r1, r3
 800413c:	4413      	add	r3, r2
 800413e:	333b      	adds	r3, #59	; 0x3b
 8004140:	78ba      	ldrb	r2, [r7, #2]
 8004142:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004144:	78fb      	ldrb	r3, [r7, #3]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	212c      	movs	r1, #44	; 0x2c
 800414a:	fb01 f303 	mul.w	r3, r1, r3
 800414e:	4413      	add	r3, r2
 8004150:	333f      	adds	r3, #63	; 0x3f
 8004152:	787a      	ldrb	r2, [r7, #1]
 8004154:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004156:	7c3b      	ldrb	r3, [r7, #16]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d112      	bne.n	8004182 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	212c      	movs	r1, #44	; 0x2c
 8004162:	fb01 f303 	mul.w	r3, r1, r3
 8004166:	4413      	add	r3, r2
 8004168:	3342      	adds	r3, #66	; 0x42
 800416a:	2203      	movs	r2, #3
 800416c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800416e:	78fb      	ldrb	r3, [r7, #3]
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	212c      	movs	r1, #44	; 0x2c
 8004174:	fb01 f303 	mul.w	r3, r1, r3
 8004178:	4413      	add	r3, r2
 800417a:	333d      	adds	r3, #61	; 0x3d
 800417c:	7f3a      	ldrb	r2, [r7, #28]
 800417e:	701a      	strb	r2, [r3, #0]
 8004180:	e008      	b.n	8004194 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004182:	78fb      	ldrb	r3, [r7, #3]
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	212c      	movs	r1, #44	; 0x2c
 8004188:	fb01 f303 	mul.w	r3, r1, r3
 800418c:	4413      	add	r3, r2
 800418e:	3342      	adds	r3, #66	; 0x42
 8004190:	2202      	movs	r2, #2
 8004192:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004194:	787b      	ldrb	r3, [r7, #1]
 8004196:	2b03      	cmp	r3, #3
 8004198:	f200 80c6 	bhi.w	8004328 <HAL_HCD_HC_SubmitRequest+0x210>
 800419c:	a201      	add	r2, pc, #4	; (adr r2, 80041a4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800419e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a2:	bf00      	nop
 80041a4:	080041b5 	.word	0x080041b5
 80041a8:	08004315 	.word	0x08004315
 80041ac:	08004219 	.word	0x08004219
 80041b0:	08004297 	.word	0x08004297
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80041b4:	7c3b      	ldrb	r3, [r7, #16]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	f040 80b8 	bne.w	800432c <HAL_HCD_HC_SubmitRequest+0x214>
 80041bc:	78bb      	ldrb	r3, [r7, #2]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f040 80b4 	bne.w	800432c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80041c4:	8b3b      	ldrh	r3, [r7, #24]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d108      	bne.n	80041dc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80041ca:	78fb      	ldrb	r3, [r7, #3]
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	212c      	movs	r1, #44	; 0x2c
 80041d0:	fb01 f303 	mul.w	r3, r1, r3
 80041d4:	4413      	add	r3, r2
 80041d6:	3355      	adds	r3, #85	; 0x55
 80041d8:	2201      	movs	r2, #1
 80041da:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	212c      	movs	r1, #44	; 0x2c
 80041e2:	fb01 f303 	mul.w	r3, r1, r3
 80041e6:	4413      	add	r3, r2
 80041e8:	3355      	adds	r3, #85	; 0x55
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d109      	bne.n	8004204 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	212c      	movs	r1, #44	; 0x2c
 80041f6:	fb01 f303 	mul.w	r3, r1, r3
 80041fa:	4413      	add	r3, r2
 80041fc:	3342      	adds	r3, #66	; 0x42
 80041fe:	2200      	movs	r2, #0
 8004200:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004202:	e093      	b.n	800432c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004204:	78fb      	ldrb	r3, [r7, #3]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	212c      	movs	r1, #44	; 0x2c
 800420a:	fb01 f303 	mul.w	r3, r1, r3
 800420e:	4413      	add	r3, r2
 8004210:	3342      	adds	r3, #66	; 0x42
 8004212:	2202      	movs	r2, #2
 8004214:	701a      	strb	r2, [r3, #0]
      break;
 8004216:	e089      	b.n	800432c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004218:	78bb      	ldrb	r3, [r7, #2]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d11d      	bne.n	800425a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800421e:	78fb      	ldrb	r3, [r7, #3]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	212c      	movs	r1, #44	; 0x2c
 8004224:	fb01 f303 	mul.w	r3, r1, r3
 8004228:	4413      	add	r3, r2
 800422a:	3355      	adds	r3, #85	; 0x55
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d109      	bne.n	8004246 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004232:	78fb      	ldrb	r3, [r7, #3]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	212c      	movs	r1, #44	; 0x2c
 8004238:	fb01 f303 	mul.w	r3, r1, r3
 800423c:	4413      	add	r3, r2
 800423e:	3342      	adds	r3, #66	; 0x42
 8004240:	2200      	movs	r2, #0
 8004242:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004244:	e073      	b.n	800432e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004246:	78fb      	ldrb	r3, [r7, #3]
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	212c      	movs	r1, #44	; 0x2c
 800424c:	fb01 f303 	mul.w	r3, r1, r3
 8004250:	4413      	add	r3, r2
 8004252:	3342      	adds	r3, #66	; 0x42
 8004254:	2202      	movs	r2, #2
 8004256:	701a      	strb	r2, [r3, #0]
      break;
 8004258:	e069      	b.n	800432e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800425a:	78fb      	ldrb	r3, [r7, #3]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	212c      	movs	r1, #44	; 0x2c
 8004260:	fb01 f303 	mul.w	r3, r1, r3
 8004264:	4413      	add	r3, r2
 8004266:	3354      	adds	r3, #84	; 0x54
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d109      	bne.n	8004282 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800426e:	78fb      	ldrb	r3, [r7, #3]
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	212c      	movs	r1, #44	; 0x2c
 8004274:	fb01 f303 	mul.w	r3, r1, r3
 8004278:	4413      	add	r3, r2
 800427a:	3342      	adds	r3, #66	; 0x42
 800427c:	2200      	movs	r2, #0
 800427e:	701a      	strb	r2, [r3, #0]
      break;
 8004280:	e055      	b.n	800432e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004282:	78fb      	ldrb	r3, [r7, #3]
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	212c      	movs	r1, #44	; 0x2c
 8004288:	fb01 f303 	mul.w	r3, r1, r3
 800428c:	4413      	add	r3, r2
 800428e:	3342      	adds	r3, #66	; 0x42
 8004290:	2202      	movs	r2, #2
 8004292:	701a      	strb	r2, [r3, #0]
      break;
 8004294:	e04b      	b.n	800432e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004296:	78bb      	ldrb	r3, [r7, #2]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d11d      	bne.n	80042d8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800429c:	78fb      	ldrb	r3, [r7, #3]
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	212c      	movs	r1, #44	; 0x2c
 80042a2:	fb01 f303 	mul.w	r3, r1, r3
 80042a6:	4413      	add	r3, r2
 80042a8:	3355      	adds	r3, #85	; 0x55
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d109      	bne.n	80042c4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80042b0:	78fb      	ldrb	r3, [r7, #3]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	212c      	movs	r1, #44	; 0x2c
 80042b6:	fb01 f303 	mul.w	r3, r1, r3
 80042ba:	4413      	add	r3, r2
 80042bc:	3342      	adds	r3, #66	; 0x42
 80042be:	2200      	movs	r2, #0
 80042c0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80042c2:	e034      	b.n	800432e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80042c4:	78fb      	ldrb	r3, [r7, #3]
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	212c      	movs	r1, #44	; 0x2c
 80042ca:	fb01 f303 	mul.w	r3, r1, r3
 80042ce:	4413      	add	r3, r2
 80042d0:	3342      	adds	r3, #66	; 0x42
 80042d2:	2202      	movs	r2, #2
 80042d4:	701a      	strb	r2, [r3, #0]
      break;
 80042d6:	e02a      	b.n	800432e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	212c      	movs	r1, #44	; 0x2c
 80042de:	fb01 f303 	mul.w	r3, r1, r3
 80042e2:	4413      	add	r3, r2
 80042e4:	3354      	adds	r3, #84	; 0x54
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d109      	bne.n	8004300 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80042ec:	78fb      	ldrb	r3, [r7, #3]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	212c      	movs	r1, #44	; 0x2c
 80042f2:	fb01 f303 	mul.w	r3, r1, r3
 80042f6:	4413      	add	r3, r2
 80042f8:	3342      	adds	r3, #66	; 0x42
 80042fa:	2200      	movs	r2, #0
 80042fc:	701a      	strb	r2, [r3, #0]
      break;
 80042fe:	e016      	b.n	800432e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	212c      	movs	r1, #44	; 0x2c
 8004306:	fb01 f303 	mul.w	r3, r1, r3
 800430a:	4413      	add	r3, r2
 800430c:	3342      	adds	r3, #66	; 0x42
 800430e:	2202      	movs	r2, #2
 8004310:	701a      	strb	r2, [r3, #0]
      break;
 8004312:	e00c      	b.n	800432e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004314:	78fb      	ldrb	r3, [r7, #3]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	212c      	movs	r1, #44	; 0x2c
 800431a:	fb01 f303 	mul.w	r3, r1, r3
 800431e:	4413      	add	r3, r2
 8004320:	3342      	adds	r3, #66	; 0x42
 8004322:	2200      	movs	r2, #0
 8004324:	701a      	strb	r2, [r3, #0]
      break;
 8004326:	e002      	b.n	800432e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004328:	bf00      	nop
 800432a:	e000      	b.n	800432e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800432c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800432e:	78fb      	ldrb	r3, [r7, #3]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	212c      	movs	r1, #44	; 0x2c
 8004334:	fb01 f303 	mul.w	r3, r1, r3
 8004338:	4413      	add	r3, r2
 800433a:	3344      	adds	r3, #68	; 0x44
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	8b3a      	ldrh	r2, [r7, #24]
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	202c      	movs	r0, #44	; 0x2c
 8004348:	fb00 f303 	mul.w	r3, r0, r3
 800434c:	440b      	add	r3, r1
 800434e:	334c      	adds	r3, #76	; 0x4c
 8004350:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004352:	78fb      	ldrb	r3, [r7, #3]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	212c      	movs	r1, #44	; 0x2c
 8004358:	fb01 f303 	mul.w	r3, r1, r3
 800435c:	4413      	add	r3, r2
 800435e:	3360      	adds	r3, #96	; 0x60
 8004360:	2200      	movs	r2, #0
 8004362:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004364:	78fb      	ldrb	r3, [r7, #3]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	212c      	movs	r1, #44	; 0x2c
 800436a:	fb01 f303 	mul.w	r3, r1, r3
 800436e:	4413      	add	r3, r2
 8004370:	3350      	adds	r3, #80	; 0x50
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004376:	78fb      	ldrb	r3, [r7, #3]
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	212c      	movs	r1, #44	; 0x2c
 800437c:	fb01 f303 	mul.w	r3, r1, r3
 8004380:	4413      	add	r3, r2
 8004382:	3339      	adds	r3, #57	; 0x39
 8004384:	78fa      	ldrb	r2, [r7, #3]
 8004386:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	212c      	movs	r1, #44	; 0x2c
 800438e:	fb01 f303 	mul.w	r3, r1, r3
 8004392:	4413      	add	r3, r2
 8004394:	3361      	adds	r3, #97	; 0x61
 8004396:	2200      	movs	r2, #0
 8004398:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	78fb      	ldrb	r3, [r7, #3]
 80043a0:	222c      	movs	r2, #44	; 0x2c
 80043a2:	fb02 f303 	mul.w	r3, r2, r3
 80043a6:	3338      	adds	r3, #56	; 0x38
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	18d1      	adds	r1, r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	461a      	mov	r2, r3
 80043b4:	f005 ff02 	bl	800a1bc <USB_HC_StartXfer>
 80043b8:	4603      	mov	r3, r0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop

080043c4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f005 fc1b 	bl	8009c16 <USB_GetMode>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	f040 80ef 	bne.w	80045c6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f005 fbff 	bl	8009bf0 <USB_ReadInterrupts>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 80e5 	beq.w	80045c4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f005 fbf6 	bl	8009bf0 <USB_ReadInterrupts>
 8004404:	4603      	mov	r3, r0
 8004406:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800440a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800440e:	d104      	bne.n	800441a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004418:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f005 fbe6 	bl	8009bf0 <USB_ReadInterrupts>
 8004424:	4603      	mov	r3, r0
 8004426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800442a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800442e:	d104      	bne.n	800443a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004438:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f005 fbd6 	bl	8009bf0 <USB_ReadInterrupts>
 8004444:	4603      	mov	r3, r0
 8004446:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800444a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800444e:	d104      	bne.n	800445a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004458:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f005 fbc6 	bl	8009bf0 <USB_ReadInterrupts>
 8004464:	4603      	mov	r3, r0
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b02      	cmp	r3, #2
 800446c:	d103      	bne.n	8004476 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2202      	movs	r2, #2
 8004474:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f005 fbb8 	bl	8009bf0 <USB_ReadInterrupts>
 8004480:	4603      	mov	r3, r0
 8004482:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004486:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800448a:	d115      	bne.n	80044b8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004494:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d108      	bne.n	80044b8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f008 f98a 	bl	800c7c0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2101      	movs	r1, #1
 80044b2:	4618      	mov	r0, r3
 80044b4:	f005 fcae 	bl	8009e14 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f005 fb97 	bl	8009bf0 <USB_ReadInterrupts>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044cc:	d102      	bne.n	80044d4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f001 f9ff 	bl	80058d2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4618      	mov	r0, r3
 80044da:	f005 fb89 	bl	8009bf0 <USB_ReadInterrupts>
 80044de:	4603      	mov	r3, r0
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d106      	bne.n	80044f6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f008 f94d 	bl	800c788 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2208      	movs	r2, #8
 80044f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f005 fb78 	bl	8009bf0 <USB_ReadInterrupts>
 8004500:	4603      	mov	r3, r0
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	2b10      	cmp	r3, #16
 8004508:	d101      	bne.n	800450e <HAL_HCD_IRQHandler+0x14a>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <HAL_HCD_IRQHandler+0x14c>
 800450e:	2300      	movs	r3, #0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d012      	beq.n	800453a <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0210 	bic.w	r2, r2, #16
 8004522:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f001 f902 	bl	800572e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699a      	ldr	r2, [r3, #24]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f042 0210 	orr.w	r2, r2, #16
 8004538:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f005 fb56 	bl	8009bf0 <USB_ReadInterrupts>
 8004544:	4603      	mov	r3, r0
 8004546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800454e:	d13a      	bne.n	80045c6 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f005 ff73 	bl	800a440 <USB_HC_ReadInterrupt>
 800455a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800455c:	2300      	movs	r3, #0
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	e025      	b.n	80045ae <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f003 030f 	and.w	r3, r3, #15
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	fa22 f303 	lsr.w	r3, r2, r3
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d018      	beq.n	80045a8 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4413      	add	r3, r2
 800457e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800458c:	d106      	bne.n	800459c <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	4619      	mov	r1, r3
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f8ab 	bl	80046f0 <HCD_HC_IN_IRQHandler>
 800459a:	e005      	b.n	80045a8 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	4619      	mov	r1, r3
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fcc6 	bl	8004f34 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	3301      	adds	r3, #1
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d3d4      	bcc.n	8004562 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045c0:	615a      	str	r2, [r3, #20]
 80045c2:	e000      	b.n	80045c6 <HAL_HCD_IRQHandler+0x202>
      return;
 80045c4:	bf00      	nop
    }
  }
}
 80045c6:	3718      	adds	r7, #24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <HAL_HCD_Start+0x16>
 80045de:	2302      	movs	r3, #2
 80045e0:	e013      	b.n	800460a <HAL_HCD_Start+0x3e>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f005 fa0b 	bl	8009a0a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2101      	movs	r1, #1
 80045fa:	4618      	mov	r0, r3
 80045fc:	f005 fc6e 	bl	8009edc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004620:	2b01      	cmp	r3, #1
 8004622:	d101      	bne.n	8004628 <HAL_HCD_Stop+0x16>
 8004624:	2302      	movs	r3, #2
 8004626:	e00d      	b.n	8004644 <HAL_HCD_Stop+0x32>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4618      	mov	r0, r3
 8004636:	f006 f86d 	bl	800a714 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4618      	mov	r0, r3
 800465a:	f005 fc15 	bl	8009e88 <USB_ResetPort>
 800465e:	4603      	mov	r3, r0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	460b      	mov	r3, r1
 8004672:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004674:	78fb      	ldrb	r3, [r7, #3]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	212c      	movs	r1, #44	; 0x2c
 800467a:	fb01 f303 	mul.w	r3, r1, r3
 800467e:	4413      	add	r3, r2
 8004680:	3360      	adds	r3, #96	; 0x60
 8004682:	781b      	ldrb	r3, [r3, #0]
}
 8004684:	4618      	mov	r0, r3
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800469c:	78fb      	ldrb	r3, [r7, #3]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	212c      	movs	r1, #44	; 0x2c
 80046a2:	fb01 f303 	mul.w	r3, r1, r3
 80046a6:	4413      	add	r3, r2
 80046a8:	3350      	adds	r3, #80	; 0x50
 80046aa:	681b      	ldr	r3, [r3, #0]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f005 fc59 	bl	8009f7c <USB_GetCurrentFrame>
 80046ca:	4603      	mov	r3, r0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f005 fc34 	bl	8009f4e <USB_GetHostSpeed>
 80046e6:	4603      	mov	r3, r0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004706:	78fb      	ldrb	r3, [r7, #3]
 8004708:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	4413      	add	r3, r2
 8004712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b04      	cmp	r3, #4
 800471e:	d119      	bne.n	8004754 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	4413      	add	r3, r2
 8004728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800472c:	461a      	mov	r2, r3
 800472e:	2304      	movs	r3, #4
 8004730:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	4413      	add	r3, r2
 800473a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	0151      	lsls	r1, r2, #5
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	440a      	add	r2, r1
 8004748:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800474c:	f043 0302 	orr.w	r3, r3, #2
 8004750:	60d3      	str	r3, [r2, #12]
 8004752:	e101      	b.n	8004958 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	4413      	add	r3, r2
 800475c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800476a:	d12b      	bne.n	80047c4 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	4413      	add	r3, r2
 8004774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004778:	461a      	mov	r2, r3
 800477a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800477e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	212c      	movs	r1, #44	; 0x2c
 8004786:	fb01 f303 	mul.w	r3, r1, r3
 800478a:	4413      	add	r3, r2
 800478c:	3361      	adds	r3, #97	; 0x61
 800478e:	2207      	movs	r2, #7
 8004790:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	4413      	add	r3, r2
 800479a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	0151      	lsls	r1, r2, #5
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	440a      	add	r2, r1
 80047a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047ac:	f043 0302 	orr.w	r3, r3, #2
 80047b0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	4611      	mov	r1, r2
 80047bc:	4618      	mov	r0, r3
 80047be:	f005 fe50 	bl	800a462 <USB_HC_Halt>
 80047c2:	e0c9      	b.n	8004958 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 0320 	and.w	r3, r3, #32
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	d109      	bne.n	80047ee <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e6:	461a      	mov	r2, r3
 80047e8:	2320      	movs	r3, #32
 80047ea:	6093      	str	r3, [r2, #8]
 80047ec:	e0b4      	b.n	8004958 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b08      	cmp	r3, #8
 8004802:	d133      	bne.n	800486c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	4413      	add	r3, r2
 800480c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	0151      	lsls	r1, r2, #5
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	440a      	add	r2, r1
 800481a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800481e:	f043 0302 	orr.w	r3, r3, #2
 8004822:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	212c      	movs	r1, #44	; 0x2c
 800482a:	fb01 f303 	mul.w	r3, r1, r3
 800482e:	4413      	add	r3, r2
 8004830:	3361      	adds	r3, #97	; 0x61
 8004832:	2205      	movs	r2, #5
 8004834:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	4413      	add	r3, r2
 800483e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004842:	461a      	mov	r2, r3
 8004844:	2310      	movs	r3, #16
 8004846:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	4413      	add	r3, r2
 8004850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004854:	461a      	mov	r2, r3
 8004856:	2308      	movs	r3, #8
 8004858:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	4611      	mov	r1, r2
 8004864:	4618      	mov	r0, r3
 8004866:	f005 fdfc 	bl	800a462 <USB_HC_Halt>
 800486a:	e075      	b.n	8004958 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	4413      	add	r3, r2
 8004874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800487e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004882:	d134      	bne.n	80048ee <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	4413      	add	r3, r2
 800488c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	0151      	lsls	r1, r2, #5
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	440a      	add	r2, r1
 800489a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800489e:	f043 0302 	orr.w	r3, r3, #2
 80048a2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	212c      	movs	r1, #44	; 0x2c
 80048aa:	fb01 f303 	mul.w	r3, r1, r3
 80048ae:	4413      	add	r3, r2
 80048b0:	3361      	adds	r3, #97	; 0x61
 80048b2:	2208      	movs	r2, #8
 80048b4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c2:	461a      	mov	r2, r3
 80048c4:	2310      	movs	r3, #16
 80048c6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d4:	461a      	mov	r2, r3
 80048d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048da:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	4611      	mov	r1, r2
 80048e6:	4618      	mov	r0, r3
 80048e8:	f005 fdbb 	bl	800a462 <USB_HC_Halt>
 80048ec:	e034      	b.n	8004958 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004900:	2b80      	cmp	r3, #128	; 0x80
 8004902:	d129      	bne.n	8004958 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4413      	add	r3, r2
 800490c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	0151      	lsls	r1, r2, #5
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	440a      	add	r2, r1
 800491a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800491e:	f043 0302 	orr.w	r3, r3, #2
 8004922:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	212c      	movs	r1, #44	; 0x2c
 800492a:	fb01 f303 	mul.w	r3, r1, r3
 800492e:	4413      	add	r3, r2
 8004930:	3361      	adds	r3, #97	; 0x61
 8004932:	2206      	movs	r2, #6
 8004934:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	b2d2      	uxtb	r2, r2
 800493e:	4611      	mov	r1, r2
 8004940:	4618      	mov	r0, r3
 8004942:	f005 fd8e 	bl	800a462 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	4413      	add	r3, r2
 800494e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004952:	461a      	mov	r2, r3
 8004954:	2380      	movs	r3, #128	; 0x80
 8004956:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	4413      	add	r3, r2
 8004960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800496a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800496e:	d122      	bne.n	80049b6 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	4413      	add	r3, r2
 8004978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	0151      	lsls	r1, r2, #5
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	440a      	add	r2, r1
 8004986:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800498a:	f043 0302 	orr.w	r3, r3, #2
 800498e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	4611      	mov	r1, r2
 800499a:	4618      	mov	r0, r3
 800499c:	f005 fd61 	bl	800a462 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ac:	461a      	mov	r2, r3
 80049ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049b2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80049b4:	e2ba      	b.n	8004f2c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	f040 811b 	bne.w	8004c04 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d019      	beq.n	8004a0a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	212c      	movs	r1, #44	; 0x2c
 80049dc:	fb01 f303 	mul.w	r3, r1, r3
 80049e0:	4413      	add	r3, r2
 80049e2:	3348      	adds	r3, #72	; 0x48
 80049e4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	0159      	lsls	r1, r3, #5
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	440b      	add	r3, r1
 80049ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80049f8:	1ad2      	subs	r2, r2, r3
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	202c      	movs	r0, #44	; 0x2c
 8004a00:	fb00 f303 	mul.w	r3, r0, r3
 8004a04:	440b      	add	r3, r1
 8004a06:	3350      	adds	r3, #80	; 0x50
 8004a08:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	212c      	movs	r1, #44	; 0x2c
 8004a10:	fb01 f303 	mul.w	r3, r1, r3
 8004a14:	4413      	add	r3, r2
 8004a16:	3361      	adds	r3, #97	; 0x61
 8004a18:	2201      	movs	r2, #1
 8004a1a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	212c      	movs	r1, #44	; 0x2c
 8004a22:	fb01 f303 	mul.w	r3, r1, r3
 8004a26:	4413      	add	r3, r2
 8004a28:	335c      	adds	r3, #92	; 0x5c
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	212c      	movs	r1, #44	; 0x2c
 8004a46:	fb01 f303 	mul.w	r3, r1, r3
 8004a4a:	4413      	add	r3, r2
 8004a4c:	333f      	adds	r3, #63	; 0x3f
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d009      	beq.n	8004a68 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	212c      	movs	r1, #44	; 0x2c
 8004a5a:	fb01 f303 	mul.w	r3, r1, r3
 8004a5e:	4413      	add	r3, r2
 8004a60:	333f      	adds	r3, #63	; 0x3f
 8004a62:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d121      	bne.n	8004aac <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	0151      	lsls	r1, r2, #5
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	440a      	add	r2, r1
 8004a7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a82:	f043 0302 	orr.w	r3, r3, #2
 8004a86:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	4611      	mov	r1, r2
 8004a92:	4618      	mov	r0, r3
 8004a94:	f005 fce5 	bl	800a462 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	2310      	movs	r3, #16
 8004aa8:	6093      	str	r3, [r2, #8]
 8004aaa:	e066      	b.n	8004b7a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	212c      	movs	r1, #44	; 0x2c
 8004ab2:	fb01 f303 	mul.w	r3, r1, r3
 8004ab6:	4413      	add	r3, r2
 8004ab8:	333f      	adds	r3, #63	; 0x3f
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d127      	bne.n	8004b10 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	0151      	lsls	r1, r2, #5
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	440a      	add	r2, r1
 8004ad6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ada:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ade:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	212c      	movs	r1, #44	; 0x2c
 8004ae6:	fb01 f303 	mul.w	r3, r1, r3
 8004aea:	4413      	add	r3, r2
 8004aec:	3360      	adds	r3, #96	; 0x60
 8004aee:	2201      	movs	r2, #1
 8004af0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	b2d9      	uxtb	r1, r3
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	202c      	movs	r0, #44	; 0x2c
 8004afc:	fb00 f303 	mul.w	r3, r0, r3
 8004b00:	4413      	add	r3, r2
 8004b02:	3360      	adds	r3, #96	; 0x60
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	461a      	mov	r2, r3
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f007 fe67 	bl	800c7dc <HAL_HCD_HC_NotifyURBChange_Callback>
 8004b0e:	e034      	b.n	8004b7a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	212c      	movs	r1, #44	; 0x2c
 8004b16:	fb01 f303 	mul.w	r3, r1, r3
 8004b1a:	4413      	add	r3, r2
 8004b1c:	333f      	adds	r3, #63	; 0x3f
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d12a      	bne.n	8004b7a <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	212c      	movs	r1, #44	; 0x2c
 8004b2a:	fb01 f303 	mul.w	r3, r1, r3
 8004b2e:	4413      	add	r3, r2
 8004b30:	3360      	adds	r3, #96	; 0x60
 8004b32:	2201      	movs	r2, #1
 8004b34:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	212c      	movs	r1, #44	; 0x2c
 8004b3c:	fb01 f303 	mul.w	r3, r1, r3
 8004b40:	4413      	add	r3, r2
 8004b42:	3354      	adds	r3, #84	; 0x54
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	f083 0301 	eor.w	r3, r3, #1
 8004b4a:	b2d8      	uxtb	r0, r3
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	212c      	movs	r1, #44	; 0x2c
 8004b52:	fb01 f303 	mul.w	r3, r1, r3
 8004b56:	4413      	add	r3, r2
 8004b58:	3354      	adds	r3, #84	; 0x54
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	b2d9      	uxtb	r1, r3
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	202c      	movs	r0, #44	; 0x2c
 8004b68:	fb00 f303 	mul.w	r3, r0, r3
 8004b6c:	4413      	add	r3, r2
 8004b6e:	3360      	adds	r3, #96	; 0x60
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	461a      	mov	r2, r3
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f007 fe31 	bl	800c7dc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d12b      	bne.n	8004bda <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	212c      	movs	r1, #44	; 0x2c
 8004b88:	fb01 f303 	mul.w	r3, r1, r3
 8004b8c:	4413      	add	r3, r2
 8004b8e:	3348      	adds	r3, #72	; 0x48
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	202c      	movs	r0, #44	; 0x2c
 8004b98:	fb00 f202 	mul.w	r2, r0, r2
 8004b9c:	440a      	add	r2, r1
 8004b9e:	3240      	adds	r2, #64	; 0x40
 8004ba0:	8812      	ldrh	r2, [r2, #0]
 8004ba2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 81be 	beq.w	8004f2c <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	212c      	movs	r1, #44	; 0x2c
 8004bb6:	fb01 f303 	mul.w	r3, r1, r3
 8004bba:	4413      	add	r3, r2
 8004bbc:	3354      	adds	r3, #84	; 0x54
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	f083 0301 	eor.w	r3, r3, #1
 8004bc4:	b2d8      	uxtb	r0, r3
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	212c      	movs	r1, #44	; 0x2c
 8004bcc:	fb01 f303 	mul.w	r3, r1, r3
 8004bd0:	4413      	add	r3, r2
 8004bd2:	3354      	adds	r3, #84	; 0x54
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	701a      	strb	r2, [r3, #0]
}
 8004bd8:	e1a8      	b.n	8004f2c <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	212c      	movs	r1, #44	; 0x2c
 8004be0:	fb01 f303 	mul.w	r3, r1, r3
 8004be4:	4413      	add	r3, r2
 8004be6:	3354      	adds	r3, #84	; 0x54
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	f083 0301 	eor.w	r3, r3, #1
 8004bee:	b2d8      	uxtb	r0, r3
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	212c      	movs	r1, #44	; 0x2c
 8004bf6:	fb01 f303 	mul.w	r3, r1, r3
 8004bfa:	4413      	add	r3, r2
 8004bfc:	3354      	adds	r3, #84	; 0x54
 8004bfe:	4602      	mov	r2, r0
 8004c00:	701a      	strb	r2, [r3, #0]
}
 8004c02:	e193      	b.n	8004f2c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	f040 8106 	bne.w	8004e28 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	0151      	lsls	r1, r2, #5
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	440a      	add	r2, r1
 8004c32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c36:	f023 0302 	bic.w	r3, r3, #2
 8004c3a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	212c      	movs	r1, #44	; 0x2c
 8004c42:	fb01 f303 	mul.w	r3, r1, r3
 8004c46:	4413      	add	r3, r2
 8004c48:	3361      	adds	r3, #97	; 0x61
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d109      	bne.n	8004c64 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	212c      	movs	r1, #44	; 0x2c
 8004c56:	fb01 f303 	mul.w	r3, r1, r3
 8004c5a:	4413      	add	r3, r2
 8004c5c:	3360      	adds	r3, #96	; 0x60
 8004c5e:	2201      	movs	r2, #1
 8004c60:	701a      	strb	r2, [r3, #0]
 8004c62:	e0c9      	b.n	8004df8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	212c      	movs	r1, #44	; 0x2c
 8004c6a:	fb01 f303 	mul.w	r3, r1, r3
 8004c6e:	4413      	add	r3, r2
 8004c70:	3361      	adds	r3, #97	; 0x61
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b05      	cmp	r3, #5
 8004c76:	d109      	bne.n	8004c8c <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	212c      	movs	r1, #44	; 0x2c
 8004c7e:	fb01 f303 	mul.w	r3, r1, r3
 8004c82:	4413      	add	r3, r2
 8004c84:	3360      	adds	r3, #96	; 0x60
 8004c86:	2205      	movs	r2, #5
 8004c88:	701a      	strb	r2, [r3, #0]
 8004c8a:	e0b5      	b.n	8004df8 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	212c      	movs	r1, #44	; 0x2c
 8004c92:	fb01 f303 	mul.w	r3, r1, r3
 8004c96:	4413      	add	r3, r2
 8004c98:	3361      	adds	r3, #97	; 0x61
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2b06      	cmp	r3, #6
 8004c9e:	d009      	beq.n	8004cb4 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	212c      	movs	r1, #44	; 0x2c
 8004ca6:	fb01 f303 	mul.w	r3, r1, r3
 8004caa:	4413      	add	r3, r2
 8004cac:	3361      	adds	r3, #97	; 0x61
 8004cae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d150      	bne.n	8004d56 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	212c      	movs	r1, #44	; 0x2c
 8004cba:	fb01 f303 	mul.w	r3, r1, r3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	335c      	adds	r3, #92	; 0x5c
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	1c5a      	adds	r2, r3, #1
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	202c      	movs	r0, #44	; 0x2c
 8004ccc:	fb00 f303 	mul.w	r3, r0, r3
 8004cd0:	440b      	add	r3, r1
 8004cd2:	335c      	adds	r3, #92	; 0x5c
 8004cd4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	212c      	movs	r1, #44	; 0x2c
 8004cdc:	fb01 f303 	mul.w	r3, r1, r3
 8004ce0:	4413      	add	r3, r2
 8004ce2:	335c      	adds	r3, #92	; 0x5c
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d912      	bls.n	8004d10 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	212c      	movs	r1, #44	; 0x2c
 8004cf0:	fb01 f303 	mul.w	r3, r1, r3
 8004cf4:	4413      	add	r3, r2
 8004cf6:	335c      	adds	r3, #92	; 0x5c
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	212c      	movs	r1, #44	; 0x2c
 8004d02:	fb01 f303 	mul.w	r3, r1, r3
 8004d06:	4413      	add	r3, r2
 8004d08:	3360      	adds	r3, #96	; 0x60
 8004d0a:	2204      	movs	r2, #4
 8004d0c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d0e:	e073      	b.n	8004df8 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	212c      	movs	r1, #44	; 0x2c
 8004d16:	fb01 f303 	mul.w	r3, r1, r3
 8004d1a:	4413      	add	r3, r2
 8004d1c:	3360      	adds	r3, #96	; 0x60
 8004d1e:	2202      	movs	r2, #2
 8004d20:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d38:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d40:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d4e:	461a      	mov	r2, r3
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d54:	e050      	b.n	8004df8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	212c      	movs	r1, #44	; 0x2c
 8004d5c:	fb01 f303 	mul.w	r3, r1, r3
 8004d60:	4413      	add	r3, r2
 8004d62:	3361      	adds	r3, #97	; 0x61
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d122      	bne.n	8004db0 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	212c      	movs	r1, #44	; 0x2c
 8004d70:	fb01 f303 	mul.w	r3, r1, r3
 8004d74:	4413      	add	r3, r2
 8004d76:	3360      	adds	r3, #96	; 0x60
 8004d78:	2202      	movs	r2, #2
 8004d7a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d92:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d9a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da8:	461a      	mov	r2, r3
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	e023      	b.n	8004df8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	212c      	movs	r1, #44	; 0x2c
 8004db6:	fb01 f303 	mul.w	r3, r1, r3
 8004dba:	4413      	add	r3, r2
 8004dbc:	3361      	adds	r3, #97	; 0x61
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	2b07      	cmp	r3, #7
 8004dc2:	d119      	bne.n	8004df8 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	212c      	movs	r1, #44	; 0x2c
 8004dca:	fb01 f303 	mul.w	r3, r1, r3
 8004dce:	4413      	add	r3, r2
 8004dd0:	335c      	adds	r3, #92	; 0x5c
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	202c      	movs	r0, #44	; 0x2c
 8004ddc:	fb00 f303 	mul.w	r3, r0, r3
 8004de0:	440b      	add	r3, r1
 8004de2:	335c      	adds	r3, #92	; 0x5c
 8004de4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	212c      	movs	r1, #44	; 0x2c
 8004dec:	fb01 f303 	mul.w	r3, r1, r3
 8004df0:	4413      	add	r3, r2
 8004df2:	3360      	adds	r3, #96	; 0x60
 8004df4:	2204      	movs	r2, #4
 8004df6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e04:	461a      	mov	r2, r3
 8004e06:	2302      	movs	r3, #2
 8004e08:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	b2d9      	uxtb	r1, r3
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	202c      	movs	r0, #44	; 0x2c
 8004e14:	fb00 f303 	mul.w	r3, r0, r3
 8004e18:	4413      	add	r3, r2
 8004e1a:	3360      	adds	r3, #96	; 0x60
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f007 fcdb 	bl	800c7dc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004e26:	e081      	b.n	8004f2c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 0310 	and.w	r3, r3, #16
 8004e3a:	2b10      	cmp	r3, #16
 8004e3c:	d176      	bne.n	8004f2c <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	212c      	movs	r1, #44	; 0x2c
 8004e44:	fb01 f303 	mul.w	r3, r1, r3
 8004e48:	4413      	add	r3, r2
 8004e4a:	333f      	adds	r3, #63	; 0x3f
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b03      	cmp	r3, #3
 8004e50:	d121      	bne.n	8004e96 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	212c      	movs	r1, #44	; 0x2c
 8004e58:	fb01 f303 	mul.w	r3, r1, r3
 8004e5c:	4413      	add	r3, r2
 8004e5e:	335c      	adds	r3, #92	; 0x5c
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	0151      	lsls	r1, r2, #5
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	440a      	add	r2, r1
 8004e7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e7e:	f043 0302 	orr.w	r3, r3, #2
 8004e82:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	b2d2      	uxtb	r2, r2
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f005 fae7 	bl	800a462 <USB_HC_Halt>
 8004e94:	e041      	b.n	8004f1a <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	212c      	movs	r1, #44	; 0x2c
 8004e9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ea0:	4413      	add	r3, r2
 8004ea2:	333f      	adds	r3, #63	; 0x3f
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d009      	beq.n	8004ebe <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	212c      	movs	r1, #44	; 0x2c
 8004eb0:	fb01 f303 	mul.w	r3, r1, r3
 8004eb4:	4413      	add	r3, r2
 8004eb6:	333f      	adds	r3, #63	; 0x3f
 8004eb8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d12d      	bne.n	8004f1a <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	212c      	movs	r1, #44	; 0x2c
 8004ec4:	fb01 f303 	mul.w	r3, r1, r3
 8004ec8:	4413      	add	r3, r2
 8004eca:	335c      	adds	r3, #92	; 0x5c
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d120      	bne.n	8004f1a <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	212c      	movs	r1, #44	; 0x2c
 8004ede:	fb01 f303 	mul.w	r3, r1, r3
 8004ee2:	4413      	add	r3, r2
 8004ee4:	3361      	adds	r3, #97	; 0x61
 8004ee6:	2203      	movs	r2, #3
 8004ee8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	0151      	lsls	r1, r2, #5
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	440a      	add	r2, r1
 8004f00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f04:	f043 0302 	orr.w	r3, r3, #2
 8004f08:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	4611      	mov	r1, r2
 8004f14:	4618      	mov	r0, r3
 8004f16:	f005 faa4 	bl	800a462 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f26:	461a      	mov	r2, r3
 8004f28:	2310      	movs	r3, #16
 8004f2a:	6093      	str	r3, [r2, #8]
}
 8004f2c:	bf00      	nop
 8004f2e:	3718      	adds	r7, #24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b088      	sub	sp, #32
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004f4a:	78fb      	ldrb	r3, [r7, #3]
 8004f4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d119      	bne.n	8004f98 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f70:	461a      	mov	r2, r3
 8004f72:	2304      	movs	r3, #4
 8004f74:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	0151      	lsls	r1, r2, #5
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	440a      	add	r2, r1
 8004f8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f90:	f043 0302 	orr.w	r3, r3, #2
 8004f94:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004f96:	e3c6      	b.n	8005726 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 0320 	and.w	r3, r3, #32
 8004faa:	2b20      	cmp	r3, #32
 8004fac:	d13e      	bne.n	800502c <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fba:	461a      	mov	r2, r3
 8004fbc:	2320      	movs	r3, #32
 8004fbe:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	212c      	movs	r1, #44	; 0x2c
 8004fc6:	fb01 f303 	mul.w	r3, r1, r3
 8004fca:	4413      	add	r3, r2
 8004fcc:	333d      	adds	r3, #61	; 0x3d
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	f040 83a8 	bne.w	8005726 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	212c      	movs	r1, #44	; 0x2c
 8004fdc:	fb01 f303 	mul.w	r3, r1, r3
 8004fe0:	4413      	add	r3, r2
 8004fe2:	333d      	adds	r3, #61	; 0x3d
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	212c      	movs	r1, #44	; 0x2c
 8004fee:	fb01 f303 	mul.w	r3, r1, r3
 8004ff2:	4413      	add	r3, r2
 8004ff4:	3360      	adds	r3, #96	; 0x60
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	4413      	add	r3, r2
 8005002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	0151      	lsls	r1, r2, #5
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	440a      	add	r2, r1
 8005010:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005014:	f043 0302 	orr.w	r3, r3, #2
 8005018:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	4611      	mov	r1, r2
 8005024:	4618      	mov	r0, r3
 8005026:	f005 fa1c 	bl	800a462 <USB_HC_Halt>
}
 800502a:	e37c      	b.n	8005726 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	4413      	add	r3, r2
 8005034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800503e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005042:	d122      	bne.n	800508a <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	4413      	add	r3, r2
 800504c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	0151      	lsls	r1, r2, #5
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	440a      	add	r2, r1
 800505a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800505e:	f043 0302 	orr.w	r3, r3, #2
 8005062:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	b2d2      	uxtb	r2, r2
 800506c:	4611      	mov	r1, r2
 800506e:	4618      	mov	r0, r3
 8005070:	f005 f9f7 	bl	800a462 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	4413      	add	r3, r2
 800507c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005080:	461a      	mov	r2, r3
 8005082:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005086:	6093      	str	r3, [r2, #8]
}
 8005088:	e34d      	b.n	8005726 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	4413      	add	r3, r2
 8005092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b01      	cmp	r3, #1
 800509e:	d150      	bne.n	8005142 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	212c      	movs	r1, #44	; 0x2c
 80050a6:	fb01 f303 	mul.w	r3, r1, r3
 80050aa:	4413      	add	r3, r2
 80050ac:	335c      	adds	r3, #92	; 0x5c
 80050ae:	2200      	movs	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c4:	2b40      	cmp	r3, #64	; 0x40
 80050c6:	d111      	bne.n	80050ec <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	212c      	movs	r1, #44	; 0x2c
 80050ce:	fb01 f303 	mul.w	r3, r1, r3
 80050d2:	4413      	add	r3, r2
 80050d4:	333d      	adds	r3, #61	; 0x3d
 80050d6:	2201      	movs	r2, #1
 80050d8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e6:	461a      	mov	r2, r3
 80050e8:	2340      	movs	r3, #64	; 0x40
 80050ea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	0151      	lsls	r1, r2, #5
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	440a      	add	r2, r1
 8005102:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005106:	f043 0302 	orr.w	r3, r3, #2
 800510a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	4611      	mov	r1, r2
 8005116:	4618      	mov	r0, r3
 8005118:	f005 f9a3 	bl	800a462 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	4413      	add	r3, r2
 8005124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005128:	461a      	mov	r2, r3
 800512a:	2301      	movs	r3, #1
 800512c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	212c      	movs	r1, #44	; 0x2c
 8005134:	fb01 f303 	mul.w	r3, r1, r3
 8005138:	4413      	add	r3, r2
 800513a:	3361      	adds	r3, #97	; 0x61
 800513c:	2201      	movs	r2, #1
 800513e:	701a      	strb	r2, [r3, #0]
}
 8005140:	e2f1      	b.n	8005726 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	4413      	add	r3, r2
 800514a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005154:	2b40      	cmp	r3, #64	; 0x40
 8005156:	d13c      	bne.n	80051d2 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	212c      	movs	r1, #44	; 0x2c
 800515e:	fb01 f303 	mul.w	r3, r1, r3
 8005162:	4413      	add	r3, r2
 8005164:	3361      	adds	r3, #97	; 0x61
 8005166:	2204      	movs	r2, #4
 8005168:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	212c      	movs	r1, #44	; 0x2c
 8005170:	fb01 f303 	mul.w	r3, r1, r3
 8005174:	4413      	add	r3, r2
 8005176:	333d      	adds	r3, #61	; 0x3d
 8005178:	2201      	movs	r2, #1
 800517a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	212c      	movs	r1, #44	; 0x2c
 8005182:	fb01 f303 	mul.w	r3, r1, r3
 8005186:	4413      	add	r3, r2
 8005188:	335c      	adds	r3, #92	; 0x5c
 800518a:	2200      	movs	r2, #0
 800518c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	4413      	add	r3, r2
 8005196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	0151      	lsls	r1, r2, #5
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	440a      	add	r2, r1
 80051a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051a8:	f043 0302 	orr.w	r3, r3, #2
 80051ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	4611      	mov	r1, r2
 80051b8:	4618      	mov	r0, r3
 80051ba:	f005 f952 	bl	800a462 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ca:	461a      	mov	r2, r3
 80051cc:	2340      	movs	r3, #64	; 0x40
 80051ce:	6093      	str	r3, [r2, #8]
}
 80051d0:	e2a9      	b.n	8005726 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d12a      	bne.n	800523e <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f4:	461a      	mov	r2, r3
 80051f6:	2308      	movs	r3, #8
 80051f8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	4413      	add	r3, r2
 8005202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	0151      	lsls	r1, r2, #5
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	440a      	add	r2, r1
 8005210:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005214:	f043 0302 	orr.w	r3, r3, #2
 8005218:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	4611      	mov	r1, r2
 8005224:	4618      	mov	r0, r3
 8005226:	f005 f91c 	bl	800a462 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	212c      	movs	r1, #44	; 0x2c
 8005230:	fb01 f303 	mul.w	r3, r1, r3
 8005234:	4413      	add	r3, r2
 8005236:	3361      	adds	r3, #97	; 0x61
 8005238:	2205      	movs	r2, #5
 800523a:	701a      	strb	r2, [r3, #0]
}
 800523c:	e273      	b.n	8005726 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	4413      	add	r3, r2
 8005246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f003 0310 	and.w	r3, r3, #16
 8005250:	2b10      	cmp	r3, #16
 8005252:	d150      	bne.n	80052f6 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	212c      	movs	r1, #44	; 0x2c
 800525a:	fb01 f303 	mul.w	r3, r1, r3
 800525e:	4413      	add	r3, r2
 8005260:	335c      	adds	r3, #92	; 0x5c
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	212c      	movs	r1, #44	; 0x2c
 800526c:	fb01 f303 	mul.w	r3, r1, r3
 8005270:	4413      	add	r3, r2
 8005272:	3361      	adds	r3, #97	; 0x61
 8005274:	2203      	movs	r2, #3
 8005276:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	212c      	movs	r1, #44	; 0x2c
 800527e:	fb01 f303 	mul.w	r3, r1, r3
 8005282:	4413      	add	r3, r2
 8005284:	333d      	adds	r3, #61	; 0x3d
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d112      	bne.n	80052b2 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	212c      	movs	r1, #44	; 0x2c
 8005292:	fb01 f303 	mul.w	r3, r1, r3
 8005296:	4413      	add	r3, r2
 8005298:	333c      	adds	r3, #60	; 0x3c
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d108      	bne.n	80052b2 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	212c      	movs	r1, #44	; 0x2c
 80052a6:	fb01 f303 	mul.w	r3, r1, r3
 80052aa:	4413      	add	r3, r2
 80052ac:	333d      	adds	r3, #61	; 0x3d
 80052ae:	2201      	movs	r2, #1
 80052b0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	0151      	lsls	r1, r2, #5
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	440a      	add	r2, r1
 80052c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052cc:	f043 0302 	orr.w	r3, r3, #2
 80052d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	4611      	mov	r1, r2
 80052dc:	4618      	mov	r0, r3
 80052de:	f005 f8c0 	bl	800a462 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ee:	461a      	mov	r2, r3
 80052f0:	2310      	movs	r3, #16
 80052f2:	6093      	str	r3, [r2, #8]
}
 80052f4:	e217      	b.n	8005726 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005308:	2b80      	cmp	r3, #128	; 0x80
 800530a:	d174      	bne.n	80053f6 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d121      	bne.n	8005358 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	212c      	movs	r1, #44	; 0x2c
 800531a:	fb01 f303 	mul.w	r3, r1, r3
 800531e:	4413      	add	r3, r2
 8005320:	3361      	adds	r3, #97	; 0x61
 8005322:	2206      	movs	r2, #6
 8005324:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	4413      	add	r3, r2
 800532e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	0151      	lsls	r1, r2, #5
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	440a      	add	r2, r1
 800533c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005340:	f043 0302 	orr.w	r3, r3, #2
 8005344:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	b2d2      	uxtb	r2, r2
 800534e:	4611      	mov	r1, r2
 8005350:	4618      	mov	r0, r3
 8005352:	f005 f886 	bl	800a462 <USB_HC_Halt>
 8005356:	e044      	b.n	80053e2 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	212c      	movs	r1, #44	; 0x2c
 800535e:	fb01 f303 	mul.w	r3, r1, r3
 8005362:	4413      	add	r3, r2
 8005364:	335c      	adds	r3, #92	; 0x5c
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	6879      	ldr	r1, [r7, #4]
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	202c      	movs	r0, #44	; 0x2c
 8005370:	fb00 f303 	mul.w	r3, r0, r3
 8005374:	440b      	add	r3, r1
 8005376:	335c      	adds	r3, #92	; 0x5c
 8005378:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	212c      	movs	r1, #44	; 0x2c
 8005380:	fb01 f303 	mul.w	r3, r1, r3
 8005384:	4413      	add	r3, r2
 8005386:	335c      	adds	r3, #92	; 0x5c
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d920      	bls.n	80053d0 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	212c      	movs	r1, #44	; 0x2c
 8005394:	fb01 f303 	mul.w	r3, r1, r3
 8005398:	4413      	add	r3, r2
 800539a:	335c      	adds	r3, #92	; 0x5c
 800539c:	2200      	movs	r2, #0
 800539e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	212c      	movs	r1, #44	; 0x2c
 80053a6:	fb01 f303 	mul.w	r3, r1, r3
 80053aa:	4413      	add	r3, r2
 80053ac:	3360      	adds	r3, #96	; 0x60
 80053ae:	2204      	movs	r2, #4
 80053b0:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	b2d9      	uxtb	r1, r3
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	202c      	movs	r0, #44	; 0x2c
 80053bc:	fb00 f303 	mul.w	r3, r0, r3
 80053c0:	4413      	add	r3, r2
 80053c2:	3360      	adds	r3, #96	; 0x60
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	461a      	mov	r2, r3
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f007 fa07 	bl	800c7dc <HAL_HCD_HC_NotifyURBChange_Callback>
 80053ce:	e008      	b.n	80053e2 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	212c      	movs	r1, #44	; 0x2c
 80053d6:	fb01 f303 	mul.w	r3, r1, r3
 80053da:	4413      	add	r3, r2
 80053dc:	3360      	adds	r3, #96	; 0x60
 80053de:	2202      	movs	r2, #2
 80053e0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ee:	461a      	mov	r2, r3
 80053f0:	2380      	movs	r3, #128	; 0x80
 80053f2:	6093      	str	r3, [r2, #8]
}
 80053f4:	e197      	b.n	8005726 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540c:	d134      	bne.n	8005478 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	4413      	add	r3, r2
 8005416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	0151      	lsls	r1, r2, #5
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	440a      	add	r2, r1
 8005424:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005428:	f043 0302 	orr.w	r3, r3, #2
 800542c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	b2d2      	uxtb	r2, r2
 8005436:	4611      	mov	r1, r2
 8005438:	4618      	mov	r0, r3
 800543a:	f005 f812 	bl	800a462 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	4413      	add	r3, r2
 8005446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544a:	461a      	mov	r2, r3
 800544c:	2310      	movs	r3, #16
 800544e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	4413      	add	r3, r2
 8005458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800545c:	461a      	mov	r2, r3
 800545e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005462:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	212c      	movs	r1, #44	; 0x2c
 800546a:	fb01 f303 	mul.w	r3, r1, r3
 800546e:	4413      	add	r3, r2
 8005470:	3361      	adds	r3, #97	; 0x61
 8005472:	2208      	movs	r2, #8
 8005474:	701a      	strb	r2, [r3, #0]
}
 8005476:	e156      	b.n	8005726 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	4413      	add	r3, r2
 8005480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b02      	cmp	r3, #2
 800548c:	f040 814b 	bne.w	8005726 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	4413      	add	r3, r2
 8005498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	0151      	lsls	r1, r2, #5
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	440a      	add	r2, r1
 80054a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054aa:	f023 0302 	bic.w	r3, r3, #2
 80054ae:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	212c      	movs	r1, #44	; 0x2c
 80054b6:	fb01 f303 	mul.w	r3, r1, r3
 80054ba:	4413      	add	r3, r2
 80054bc:	3361      	adds	r3, #97	; 0x61
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d179      	bne.n	80055b8 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	212c      	movs	r1, #44	; 0x2c
 80054ca:	fb01 f303 	mul.w	r3, r1, r3
 80054ce:	4413      	add	r3, r2
 80054d0:	3360      	adds	r3, #96	; 0x60
 80054d2:	2201      	movs	r2, #1
 80054d4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	212c      	movs	r1, #44	; 0x2c
 80054dc:	fb01 f303 	mul.w	r3, r1, r3
 80054e0:	4413      	add	r3, r2
 80054e2:	333f      	adds	r3, #63	; 0x3f
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d00a      	beq.n	8005500 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	212c      	movs	r1, #44	; 0x2c
 80054f0:	fb01 f303 	mul.w	r3, r1, r3
 80054f4:	4413      	add	r3, r2
 80054f6:	333f      	adds	r3, #63	; 0x3f
 80054f8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80054fa:	2b03      	cmp	r3, #3
 80054fc:	f040 80fc 	bne.w	80056f8 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d142      	bne.n	800558e <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	212c      	movs	r1, #44	; 0x2c
 800550e:	fb01 f303 	mul.w	r3, r1, r3
 8005512:	4413      	add	r3, r2
 8005514:	334c      	adds	r3, #76	; 0x4c
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 80ed 	beq.w	80056f8 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	212c      	movs	r1, #44	; 0x2c
 8005524:	fb01 f303 	mul.w	r3, r1, r3
 8005528:	4413      	add	r3, r2
 800552a:	334c      	adds	r3, #76	; 0x4c
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	202c      	movs	r0, #44	; 0x2c
 8005534:	fb00 f202 	mul.w	r2, r0, r2
 8005538:	440a      	add	r2, r1
 800553a:	3240      	adds	r2, #64	; 0x40
 800553c:	8812      	ldrh	r2, [r2, #0]
 800553e:	4413      	add	r3, r2
 8005540:	3b01      	subs	r3, #1
 8005542:	6879      	ldr	r1, [r7, #4]
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	202c      	movs	r0, #44	; 0x2c
 8005548:	fb00 f202 	mul.w	r2, r0, r2
 800554c:	440a      	add	r2, r1
 800554e:	3240      	adds	r2, #64	; 0x40
 8005550:	8812      	ldrh	r2, [r2, #0]
 8005552:	fbb3 f3f2 	udiv	r3, r3, r2
 8005556:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 80ca 	beq.w	80056f8 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	212c      	movs	r1, #44	; 0x2c
 800556a:	fb01 f303 	mul.w	r3, r1, r3
 800556e:	4413      	add	r3, r2
 8005570:	3355      	adds	r3, #85	; 0x55
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	f083 0301 	eor.w	r3, r3, #1
 8005578:	b2d8      	uxtb	r0, r3
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	212c      	movs	r1, #44	; 0x2c
 8005580:	fb01 f303 	mul.w	r3, r1, r3
 8005584:	4413      	add	r3, r2
 8005586:	3355      	adds	r3, #85	; 0x55
 8005588:	4602      	mov	r2, r0
 800558a:	701a      	strb	r2, [r3, #0]
 800558c:	e0b4      	b.n	80056f8 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	212c      	movs	r1, #44	; 0x2c
 8005594:	fb01 f303 	mul.w	r3, r1, r3
 8005598:	4413      	add	r3, r2
 800559a:	3355      	adds	r3, #85	; 0x55
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	f083 0301 	eor.w	r3, r3, #1
 80055a2:	b2d8      	uxtb	r0, r3
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	212c      	movs	r1, #44	; 0x2c
 80055aa:	fb01 f303 	mul.w	r3, r1, r3
 80055ae:	4413      	add	r3, r2
 80055b0:	3355      	adds	r3, #85	; 0x55
 80055b2:	4602      	mov	r2, r0
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	e09f      	b.n	80056f8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	212c      	movs	r1, #44	; 0x2c
 80055be:	fb01 f303 	mul.w	r3, r1, r3
 80055c2:	4413      	add	r3, r2
 80055c4:	3361      	adds	r3, #97	; 0x61
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	d109      	bne.n	80055e0 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	212c      	movs	r1, #44	; 0x2c
 80055d2:	fb01 f303 	mul.w	r3, r1, r3
 80055d6:	4413      	add	r3, r2
 80055d8:	3360      	adds	r3, #96	; 0x60
 80055da:	2202      	movs	r2, #2
 80055dc:	701a      	strb	r2, [r3, #0]
 80055de:	e08b      	b.n	80056f8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	212c      	movs	r1, #44	; 0x2c
 80055e6:	fb01 f303 	mul.w	r3, r1, r3
 80055ea:	4413      	add	r3, r2
 80055ec:	3361      	adds	r3, #97	; 0x61
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b04      	cmp	r3, #4
 80055f2:	d109      	bne.n	8005608 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	212c      	movs	r1, #44	; 0x2c
 80055fa:	fb01 f303 	mul.w	r3, r1, r3
 80055fe:	4413      	add	r3, r2
 8005600:	3360      	adds	r3, #96	; 0x60
 8005602:	2202      	movs	r2, #2
 8005604:	701a      	strb	r2, [r3, #0]
 8005606:	e077      	b.n	80056f8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	212c      	movs	r1, #44	; 0x2c
 800560e:	fb01 f303 	mul.w	r3, r1, r3
 8005612:	4413      	add	r3, r2
 8005614:	3361      	adds	r3, #97	; 0x61
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b05      	cmp	r3, #5
 800561a:	d109      	bne.n	8005630 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	212c      	movs	r1, #44	; 0x2c
 8005622:	fb01 f303 	mul.w	r3, r1, r3
 8005626:	4413      	add	r3, r2
 8005628:	3360      	adds	r3, #96	; 0x60
 800562a:	2205      	movs	r2, #5
 800562c:	701a      	strb	r2, [r3, #0]
 800562e:	e063      	b.n	80056f8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	212c      	movs	r1, #44	; 0x2c
 8005636:	fb01 f303 	mul.w	r3, r1, r3
 800563a:	4413      	add	r3, r2
 800563c:	3361      	adds	r3, #97	; 0x61
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	2b06      	cmp	r3, #6
 8005642:	d009      	beq.n	8005658 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	212c      	movs	r1, #44	; 0x2c
 800564a:	fb01 f303 	mul.w	r3, r1, r3
 800564e:	4413      	add	r3, r2
 8005650:	3361      	adds	r3, #97	; 0x61
 8005652:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005654:	2b08      	cmp	r3, #8
 8005656:	d14f      	bne.n	80056f8 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	212c      	movs	r1, #44	; 0x2c
 800565e:	fb01 f303 	mul.w	r3, r1, r3
 8005662:	4413      	add	r3, r2
 8005664:	335c      	adds	r3, #92	; 0x5c
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	6879      	ldr	r1, [r7, #4]
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	202c      	movs	r0, #44	; 0x2c
 8005670:	fb00 f303 	mul.w	r3, r0, r3
 8005674:	440b      	add	r3, r1
 8005676:	335c      	adds	r3, #92	; 0x5c
 8005678:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	212c      	movs	r1, #44	; 0x2c
 8005680:	fb01 f303 	mul.w	r3, r1, r3
 8005684:	4413      	add	r3, r2
 8005686:	335c      	adds	r3, #92	; 0x5c
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b02      	cmp	r3, #2
 800568c:	d912      	bls.n	80056b4 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	212c      	movs	r1, #44	; 0x2c
 8005694:	fb01 f303 	mul.w	r3, r1, r3
 8005698:	4413      	add	r3, r2
 800569a:	335c      	adds	r3, #92	; 0x5c
 800569c:	2200      	movs	r2, #0
 800569e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	212c      	movs	r1, #44	; 0x2c
 80056a6:	fb01 f303 	mul.w	r3, r1, r3
 80056aa:	4413      	add	r3, r2
 80056ac:	3360      	adds	r3, #96	; 0x60
 80056ae:	2204      	movs	r2, #4
 80056b0:	701a      	strb	r2, [r3, #0]
 80056b2:	e021      	b.n	80056f8 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	212c      	movs	r1, #44	; 0x2c
 80056ba:	fb01 f303 	mul.w	r3, r1, r3
 80056be:	4413      	add	r3, r2
 80056c0:	3360      	adds	r3, #96	; 0x60
 80056c2:	2202      	movs	r2, #2
 80056c4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056dc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056e4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f2:	461a      	mov	r2, r3
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005704:	461a      	mov	r2, r3
 8005706:	2302      	movs	r3, #2
 8005708:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	b2d9      	uxtb	r1, r3
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	202c      	movs	r0, #44	; 0x2c
 8005714:	fb00 f303 	mul.w	r3, r0, r3
 8005718:	4413      	add	r3, r2
 800571a:	3360      	adds	r3, #96	; 0x60
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f007 f85b 	bl	800c7dc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005726:	bf00      	nop
 8005728:	3720      	adds	r7, #32
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b08a      	sub	sp, #40	; 0x28
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	f003 030f 	and.w	r3, r3, #15
 800574e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	0c5b      	lsrs	r3, r3, #17
 8005754:	f003 030f 	and.w	r3, r3, #15
 8005758:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	091b      	lsrs	r3, r3, #4
 800575e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005762:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2b02      	cmp	r3, #2
 8005768:	d004      	beq.n	8005774 <HCD_RXQLVL_IRQHandler+0x46>
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b05      	cmp	r3, #5
 800576e:	f000 80a9 	beq.w	80058c4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005772:	e0aa      	b.n	80058ca <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 80a6 	beq.w	80058c8 <HCD_RXQLVL_IRQHandler+0x19a>
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	212c      	movs	r1, #44	; 0x2c
 8005782:	fb01 f303 	mul.w	r3, r1, r3
 8005786:	4413      	add	r3, r2
 8005788:	3344      	adds	r3, #68	; 0x44
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 809b 	beq.w	80058c8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	212c      	movs	r1, #44	; 0x2c
 8005798:	fb01 f303 	mul.w	r3, r1, r3
 800579c:	4413      	add	r3, r2
 800579e:	3350      	adds	r3, #80	; 0x50
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	441a      	add	r2, r3
 80057a6:	6879      	ldr	r1, [r7, #4]
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	202c      	movs	r0, #44	; 0x2c
 80057ac:	fb00 f303 	mul.w	r3, r0, r3
 80057b0:	440b      	add	r3, r1
 80057b2:	334c      	adds	r3, #76	; 0x4c
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d87a      	bhi.n	80058b0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6818      	ldr	r0, [r3, #0]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	212c      	movs	r1, #44	; 0x2c
 80057c4:	fb01 f303 	mul.w	r3, r1, r3
 80057c8:	4413      	add	r3, r2
 80057ca:	3344      	adds	r3, #68	; 0x44
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	b292      	uxth	r2, r2
 80057d2:	4619      	mov	r1, r3
 80057d4:	f004 f9e3 	bl	8009b9e <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	212c      	movs	r1, #44	; 0x2c
 80057de:	fb01 f303 	mul.w	r3, r1, r3
 80057e2:	4413      	add	r3, r2
 80057e4:	3344      	adds	r3, #68	; 0x44
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	441a      	add	r2, r3
 80057ec:	6879      	ldr	r1, [r7, #4]
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	202c      	movs	r0, #44	; 0x2c
 80057f2:	fb00 f303 	mul.w	r3, r0, r3
 80057f6:	440b      	add	r3, r1
 80057f8:	3344      	adds	r3, #68	; 0x44
 80057fa:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	212c      	movs	r1, #44	; 0x2c
 8005802:	fb01 f303 	mul.w	r3, r1, r3
 8005806:	4413      	add	r3, r2
 8005808:	3350      	adds	r3, #80	; 0x50
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	441a      	add	r2, r3
 8005810:	6879      	ldr	r1, [r7, #4]
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	202c      	movs	r0, #44	; 0x2c
 8005816:	fb00 f303 	mul.w	r3, r0, r3
 800581a:	440b      	add	r3, r1
 800581c:	3350      	adds	r3, #80	; 0x50
 800581e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	4413      	add	r3, r2
 8005828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	0cdb      	lsrs	r3, r3, #19
 8005830:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005834:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	212c      	movs	r1, #44	; 0x2c
 800583c:	fb01 f303 	mul.w	r3, r1, r3
 8005840:	4413      	add	r3, r2
 8005842:	3340      	adds	r3, #64	; 0x40
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	461a      	mov	r2, r3
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	4293      	cmp	r3, r2
 800584c:	d13c      	bne.n	80058c8 <HCD_RXQLVL_IRQHandler+0x19a>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d039      	beq.n	80058c8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	4413      	add	r3, r2
 800585c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800586a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005872:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	4413      	add	r3, r2
 800587c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005880:	461a      	mov	r2, r3
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	212c      	movs	r1, #44	; 0x2c
 800588c:	fb01 f303 	mul.w	r3, r1, r3
 8005890:	4413      	add	r3, r2
 8005892:	3354      	adds	r3, #84	; 0x54
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	f083 0301 	eor.w	r3, r3, #1
 800589a:	b2d8      	uxtb	r0, r3
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	212c      	movs	r1, #44	; 0x2c
 80058a2:	fb01 f303 	mul.w	r3, r1, r3
 80058a6:	4413      	add	r3, r2
 80058a8:	3354      	adds	r3, #84	; 0x54
 80058aa:	4602      	mov	r2, r0
 80058ac:	701a      	strb	r2, [r3, #0]
      break;
 80058ae:	e00b      	b.n	80058c8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	212c      	movs	r1, #44	; 0x2c
 80058b6:	fb01 f303 	mul.w	r3, r1, r3
 80058ba:	4413      	add	r3, r2
 80058bc:	3360      	adds	r3, #96	; 0x60
 80058be:	2204      	movs	r2, #4
 80058c0:	701a      	strb	r2, [r3, #0]
      break;
 80058c2:	e001      	b.n	80058c8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80058c4:	bf00      	nop
 80058c6:	e000      	b.n	80058ca <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80058c8:	bf00      	nop
  }
}
 80058ca:	bf00      	nop
 80058cc:	3728      	adds	r7, #40	; 0x28
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b086      	sub	sp, #24
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80058fe:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b02      	cmp	r3, #2
 8005908:	d10b      	bne.n	8005922 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b01      	cmp	r3, #1
 8005912:	d102      	bne.n	800591a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f006 ff45 	bl	800c7a4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	f043 0302 	orr.w	r3, r3, #2
 8005920:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f003 0308 	and.w	r3, r3, #8
 8005928:	2b08      	cmp	r3, #8
 800592a:	d132      	bne.n	8005992 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f043 0308 	orr.w	r3, r3, #8
 8005932:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f003 0304 	and.w	r3, r3, #4
 800593a:	2b04      	cmp	r3, #4
 800593c:	d126      	bne.n	800598c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	2b02      	cmp	r3, #2
 8005944:	d113      	bne.n	800596e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800594c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005950:	d106      	bne.n	8005960 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2102      	movs	r1, #2
 8005958:	4618      	mov	r0, r3
 800595a:	f004 fa5b 	bl	8009e14 <USB_InitFSLSPClkSel>
 800595e:	e011      	b.n	8005984 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2101      	movs	r1, #1
 8005966:	4618      	mov	r0, r3
 8005968:	f004 fa54 	bl	8009e14 <USB_InitFSLSPClkSel>
 800596c:	e00a      	b.n	8005984 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d106      	bne.n	8005984 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800597c:	461a      	mov	r2, r3
 800597e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005982:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f006 ff37 	bl	800c7f8 <HAL_HCD_PortEnabled_Callback>
 800598a:	e002      	b.n	8005992 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f006 ff41 	bl	800c814 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f003 0320 	and.w	r3, r3, #32
 8005998:	2b20      	cmp	r3, #32
 800599a:	d103      	bne.n	80059a4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f043 0320 	orr.w	r3, r3, #32
 80059a2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059aa:	461a      	mov	r2, r3
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	6013      	str	r3, [r2, #0]
}
 80059b0:	bf00      	nop
 80059b2:	3718      	adds	r7, #24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e12b      	b.n	8005c22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d106      	bne.n	80059e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7fb fc10 	bl	8001204 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2224      	movs	r2, #36	; 0x24
 80059e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 0201 	bic.w	r2, r2, #1
 80059fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a1c:	f002 f9f8 	bl	8007e10 <HAL_RCC_GetPCLK1Freq>
 8005a20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	4a81      	ldr	r2, [pc, #516]	; (8005c2c <HAL_I2C_Init+0x274>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d807      	bhi.n	8005a3c <HAL_I2C_Init+0x84>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4a80      	ldr	r2, [pc, #512]	; (8005c30 <HAL_I2C_Init+0x278>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	bf94      	ite	ls
 8005a34:	2301      	movls	r3, #1
 8005a36:	2300      	movhi	r3, #0
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	e006      	b.n	8005a4a <HAL_I2C_Init+0x92>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4a7d      	ldr	r2, [pc, #500]	; (8005c34 <HAL_I2C_Init+0x27c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	bf94      	ite	ls
 8005a44:	2301      	movls	r3, #1
 8005a46:	2300      	movhi	r3, #0
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e0e7      	b.n	8005c22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4a78      	ldr	r2, [pc, #480]	; (8005c38 <HAL_I2C_Init+0x280>)
 8005a56:	fba2 2303 	umull	r2, r3, r2, r3
 8005a5a:	0c9b      	lsrs	r3, r3, #18
 8005a5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	4a6a      	ldr	r2, [pc, #424]	; (8005c2c <HAL_I2C_Init+0x274>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d802      	bhi.n	8005a8c <HAL_I2C_Init+0xd4>
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	e009      	b.n	8005aa0 <HAL_I2C_Init+0xe8>
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005a92:	fb02 f303 	mul.w	r3, r2, r3
 8005a96:	4a69      	ldr	r2, [pc, #420]	; (8005c3c <HAL_I2C_Init+0x284>)
 8005a98:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9c:	099b      	lsrs	r3, r3, #6
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6812      	ldr	r2, [r2, #0]
 8005aa4:	430b      	orrs	r3, r1
 8005aa6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005ab2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	495c      	ldr	r1, [pc, #368]	; (8005c2c <HAL_I2C_Init+0x274>)
 8005abc:	428b      	cmp	r3, r1
 8005abe:	d819      	bhi.n	8005af4 <HAL_I2C_Init+0x13c>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	1e59      	subs	r1, r3, #1
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ace:	1c59      	adds	r1, r3, #1
 8005ad0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005ad4:	400b      	ands	r3, r1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <HAL_I2C_Init+0x138>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	1e59      	subs	r1, r3, #1
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ae8:	3301      	adds	r3, #1
 8005aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aee:	e051      	b.n	8005b94 <HAL_I2C_Init+0x1dc>
 8005af0:	2304      	movs	r3, #4
 8005af2:	e04f      	b.n	8005b94 <HAL_I2C_Init+0x1dc>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d111      	bne.n	8005b20 <HAL_I2C_Init+0x168>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	1e58      	subs	r0, r3, #1
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6859      	ldr	r1, [r3, #4]
 8005b04:	460b      	mov	r3, r1
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	440b      	add	r3, r1
 8005b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b0e:	3301      	adds	r3, #1
 8005b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	bf0c      	ite	eq
 8005b18:	2301      	moveq	r3, #1
 8005b1a:	2300      	movne	r3, #0
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	e012      	b.n	8005b46 <HAL_I2C_Init+0x18e>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	1e58      	subs	r0, r3, #1
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6859      	ldr	r1, [r3, #4]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	440b      	add	r3, r1
 8005b2e:	0099      	lsls	r1, r3, #2
 8005b30:	440b      	add	r3, r1
 8005b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b36:	3301      	adds	r3, #1
 8005b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	bf0c      	ite	eq
 8005b40:	2301      	moveq	r3, #1
 8005b42:	2300      	movne	r3, #0
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <HAL_I2C_Init+0x196>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e022      	b.n	8005b94 <HAL_I2C_Init+0x1dc>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10e      	bne.n	8005b74 <HAL_I2C_Init+0x1bc>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	1e58      	subs	r0, r3, #1
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6859      	ldr	r1, [r3, #4]
 8005b5e:	460b      	mov	r3, r1
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	440b      	add	r3, r1
 8005b64:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b68:	3301      	adds	r3, #1
 8005b6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b72:	e00f      	b.n	8005b94 <HAL_I2C_Init+0x1dc>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	1e58      	subs	r0, r3, #1
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6859      	ldr	r1, [r3, #4]
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	440b      	add	r3, r1
 8005b82:	0099      	lsls	r1, r3, #2
 8005b84:	440b      	add	r3, r1
 8005b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b94:	6879      	ldr	r1, [r7, #4]
 8005b96:	6809      	ldr	r1, [r1, #0]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	69da      	ldr	r2, [r3, #28]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005bc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	6911      	ldr	r1, [r2, #16]
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	68d2      	ldr	r2, [r2, #12]
 8005bce:	4311      	orrs	r1, r2
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6812      	ldr	r2, [r2, #0]
 8005bd4:	430b      	orrs	r3, r1
 8005bd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	695a      	ldr	r2, [r3, #20]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	431a      	orrs	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f042 0201 	orr.w	r2, r2, #1
 8005c02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	000186a0 	.word	0x000186a0
 8005c30:	001e847f 	.word	0x001e847f
 8005c34:	003d08ff 	.word	0x003d08ff
 8005c38:	431bde83 	.word	0x431bde83
 8005c3c:	10624dd3 	.word	0x10624dd3

08005c40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b088      	sub	sp, #32
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	607a      	str	r2, [r7, #4]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	817b      	strh	r3, [r7, #10]
 8005c50:	4613      	mov	r3, r2
 8005c52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c54:	f7fd fe22 	bl	800389c <HAL_GetTick>
 8005c58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b20      	cmp	r3, #32
 8005c64:	f040 80e0 	bne.w	8005e28 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	2319      	movs	r3, #25
 8005c6e:	2201      	movs	r2, #1
 8005c70:	4970      	ldr	r1, [pc, #448]	; (8005e34 <HAL_I2C_Master_Transmit+0x1f4>)
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 fe02 	bl	800687c <I2C_WaitOnFlagUntilTimeout>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e0d3      	b.n	8005e2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d101      	bne.n	8005c90 <HAL_I2C_Master_Transmit+0x50>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	e0cc      	b.n	8005e2a <HAL_I2C_Master_Transmit+0x1ea>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d007      	beq.n	8005cb6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f042 0201 	orr.w	r2, r2, #1
 8005cb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cc4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2221      	movs	r2, #33	; 0x21
 8005cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2210      	movs	r2, #16
 8005cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	893a      	ldrh	r2, [r7, #8]
 8005ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4a50      	ldr	r2, [pc, #320]	; (8005e38 <HAL_I2C_Master_Transmit+0x1f8>)
 8005cf6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005cf8:	8979      	ldrh	r1, [r7, #10]
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	6a3a      	ldr	r2, [r7, #32]
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f000 fbbc 	bl	800647c <I2C_MasterRequestWrite>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e08d      	b.n	8005e2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d0e:	2300      	movs	r3, #0
 8005d10:	613b      	str	r3, [r7, #16]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	613b      	str	r3, [r7, #16]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	613b      	str	r3, [r7, #16]
 8005d22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005d24:	e066      	b.n	8005df4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	6a39      	ldr	r1, [r7, #32]
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 fe7c 	bl	8006a28 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00d      	beq.n	8005d52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	d107      	bne.n	8005d4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e06b      	b.n	8005e2a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	781a      	ldrb	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	f003 0304 	and.w	r3, r3, #4
 8005d8c:	2b04      	cmp	r3, #4
 8005d8e:	d11b      	bne.n	8005dc8 <HAL_I2C_Master_Transmit+0x188>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d017      	beq.n	8005dc8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	781a      	ldrb	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	6a39      	ldr	r1, [r7, #32]
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 fe6c 	bl	8006aaa <I2C_WaitOnBTFFlagUntilTimeout>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00d      	beq.n	8005df4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ddc:	2b04      	cmp	r3, #4
 8005dde:	d107      	bne.n	8005df0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e01a      	b.n	8005e2a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d194      	bne.n	8005d26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e24:	2300      	movs	r3, #0
 8005e26:	e000      	b.n	8005e2a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005e28:	2302      	movs	r3, #2
  }
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	00100002 	.word	0x00100002
 8005e38:	ffff0000 	.word	0xffff0000

08005e3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b088      	sub	sp, #32
 8005e40:	af02      	add	r7, sp, #8
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	4608      	mov	r0, r1
 8005e46:	4611      	mov	r1, r2
 8005e48:	461a      	mov	r2, r3
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	817b      	strh	r3, [r7, #10]
 8005e4e:	460b      	mov	r3, r1
 8005e50:	813b      	strh	r3, [r7, #8]
 8005e52:	4613      	mov	r3, r2
 8005e54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e56:	f7fd fd21 	bl	800389c <HAL_GetTick>
 8005e5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b20      	cmp	r3, #32
 8005e66:	f040 80d9 	bne.w	800601c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	2319      	movs	r3, #25
 8005e70:	2201      	movs	r2, #1
 8005e72:	496d      	ldr	r1, [pc, #436]	; (8006028 <HAL_I2C_Mem_Write+0x1ec>)
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 fd01 	bl	800687c <I2C_WaitOnFlagUntilTimeout>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005e80:	2302      	movs	r3, #2
 8005e82:	e0cc      	b.n	800601e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d101      	bne.n	8005e92 <HAL_I2C_Mem_Write+0x56>
 8005e8e:	2302      	movs	r3, #2
 8005e90:	e0c5      	b.n	800601e <HAL_I2C_Mem_Write+0x1e2>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d007      	beq.n	8005eb8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f042 0201 	orr.w	r2, r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ec6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2221      	movs	r2, #33	; 0x21
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2240      	movs	r2, #64	; 0x40
 8005ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a3a      	ldr	r2, [r7, #32]
 8005ee2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4a4d      	ldr	r2, [pc, #308]	; (800602c <HAL_I2C_Mem_Write+0x1f0>)
 8005ef8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005efa:	88f8      	ldrh	r0, [r7, #6]
 8005efc:	893a      	ldrh	r2, [r7, #8]
 8005efe:	8979      	ldrh	r1, [r7, #10]
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	9301      	str	r3, [sp, #4]
 8005f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f06:	9300      	str	r3, [sp, #0]
 8005f08:	4603      	mov	r3, r0
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 fb38 	bl	8006580 <I2C_RequestMemoryWrite>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d052      	beq.n	8005fbc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e081      	b.n	800601e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 fd82 	bl	8006a28 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00d      	beq.n	8005f46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	2b04      	cmp	r3, #4
 8005f30:	d107      	bne.n	8005f42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e06b      	b.n	800601e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	781a      	ldrb	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	1c5a      	adds	r2, r3, #1
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f60:	3b01      	subs	r3, #1
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d11b      	bne.n	8005fbc <HAL_I2C_Mem_Write+0x180>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d017      	beq.n	8005fbc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f90:	781a      	ldrb	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9c:	1c5a      	adds	r2, r3, #1
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1aa      	bne.n	8005f1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 fd6e 	bl	8006aaa <I2C_WaitOnBTFFlagUntilTimeout>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00d      	beq.n	8005ff0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	d107      	bne.n	8005fec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e016      	b.n	800601e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ffe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2220      	movs	r2, #32
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	e000      	b.n	800601e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800601c:	2302      	movs	r3, #2
  }
}
 800601e:	4618      	mov	r0, r3
 8006020:	3718      	adds	r7, #24
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	00100002 	.word	0x00100002
 800602c:	ffff0000 	.word	0xffff0000

08006030 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b08c      	sub	sp, #48	; 0x30
 8006034:	af02      	add	r7, sp, #8
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	4608      	mov	r0, r1
 800603a:	4611      	mov	r1, r2
 800603c:	461a      	mov	r2, r3
 800603e:	4603      	mov	r3, r0
 8006040:	817b      	strh	r3, [r7, #10]
 8006042:	460b      	mov	r3, r1
 8006044:	813b      	strh	r3, [r7, #8]
 8006046:	4613      	mov	r3, r2
 8006048:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800604a:	f7fd fc27 	bl	800389c <HAL_GetTick>
 800604e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b20      	cmp	r3, #32
 800605a:	f040 8208 	bne.w	800646e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	2319      	movs	r3, #25
 8006064:	2201      	movs	r2, #1
 8006066:	497b      	ldr	r1, [pc, #492]	; (8006254 <HAL_I2C_Mem_Read+0x224>)
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 fc07 	bl	800687c <I2C_WaitOnFlagUntilTimeout>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006074:	2302      	movs	r3, #2
 8006076:	e1fb      	b.n	8006470 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800607e:	2b01      	cmp	r3, #1
 8006080:	d101      	bne.n	8006086 <HAL_I2C_Mem_Read+0x56>
 8006082:	2302      	movs	r3, #2
 8006084:	e1f4      	b.n	8006470 <HAL_I2C_Mem_Read+0x440>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	2b01      	cmp	r3, #1
 800609a:	d007      	beq.n	80060ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f042 0201 	orr.w	r2, r2, #1
 80060aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2222      	movs	r2, #34	; 0x22
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2240      	movs	r2, #64	; 0x40
 80060c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80060dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4a5b      	ldr	r2, [pc, #364]	; (8006258 <HAL_I2C_Mem_Read+0x228>)
 80060ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060ee:	88f8      	ldrh	r0, [r7, #6]
 80060f0:	893a      	ldrh	r2, [r7, #8]
 80060f2:	8979      	ldrh	r1, [r7, #10]
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	9301      	str	r3, [sp, #4]
 80060f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	4603      	mov	r3, r0
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f000 fad4 	bl	80066ac <I2C_RequestMemoryRead>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e1b0      	b.n	8006470 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006112:	2b00      	cmp	r3, #0
 8006114:	d113      	bne.n	800613e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006116:	2300      	movs	r3, #0
 8006118:	623b      	str	r3, [r7, #32]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	623b      	str	r3, [r7, #32]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	623b      	str	r3, [r7, #32]
 800612a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800613a:	601a      	str	r2, [r3, #0]
 800613c:	e184      	b.n	8006448 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006142:	2b01      	cmp	r3, #1
 8006144:	d11b      	bne.n	800617e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006154:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006156:	2300      	movs	r3, #0
 8006158:	61fb      	str	r3, [r7, #28]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	61fb      	str	r3, [r7, #28]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	61fb      	str	r3, [r7, #28]
 800616a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800617a:	601a      	str	r2, [r3, #0]
 800617c:	e164      	b.n	8006448 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006182:	2b02      	cmp	r3, #2
 8006184:	d11b      	bne.n	80061be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006194:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061a6:	2300      	movs	r3, #0
 80061a8:	61bb      	str	r3, [r7, #24]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	61bb      	str	r3, [r7, #24]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	61bb      	str	r3, [r7, #24]
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	e144      	b.n	8006448 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061be:	2300      	movs	r3, #0
 80061c0:	617b      	str	r3, [r7, #20]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	695b      	ldr	r3, [r3, #20]
 80061c8:	617b      	str	r3, [r7, #20]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	617b      	str	r3, [r7, #20]
 80061d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80061d4:	e138      	b.n	8006448 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061da:	2b03      	cmp	r3, #3
 80061dc:	f200 80f1 	bhi.w	80063c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d123      	bne.n	8006230 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 fc9d 	bl	8006b2c <I2C_WaitOnRXNEFlagUntilTimeout>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e139      	b.n	8006470 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691a      	ldr	r2, [r3, #16]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620e:	1c5a      	adds	r2, r3, #1
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006218:	3b01      	subs	r3, #1
 800621a:	b29a      	uxth	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006224:	b29b      	uxth	r3, r3
 8006226:	3b01      	subs	r3, #1
 8006228:	b29a      	uxth	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800622e:	e10b      	b.n	8006448 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006234:	2b02      	cmp	r3, #2
 8006236:	d14e      	bne.n	80062d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623e:	2200      	movs	r2, #0
 8006240:	4906      	ldr	r1, [pc, #24]	; (800625c <HAL_I2C_Mem_Read+0x22c>)
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f000 fb1a 	bl	800687c <I2C_WaitOnFlagUntilTimeout>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d008      	beq.n	8006260 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e10e      	b.n	8006470 <HAL_I2C_Mem_Read+0x440>
 8006252:	bf00      	nop
 8006254:	00100002 	.word	0x00100002
 8006258:	ffff0000 	.word	0xffff0000
 800625c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800626e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	691a      	ldr	r2, [r3, #16]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627a:	b2d2      	uxtb	r2, r2
 800627c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800628c:	3b01      	subs	r3, #1
 800628e:	b29a      	uxth	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006298:	b29b      	uxth	r3, r3
 800629a:	3b01      	subs	r3, #1
 800629c:	b29a      	uxth	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	691a      	ldr	r2, [r3, #16]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	b2d2      	uxtb	r2, r2
 80062ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062be:	3b01      	subs	r3, #1
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	3b01      	subs	r3, #1
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062d4:	e0b8      	b.n	8006448 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062dc:	2200      	movs	r2, #0
 80062de:	4966      	ldr	r1, [pc, #408]	; (8006478 <HAL_I2C_Mem_Read+0x448>)
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 facb 	bl	800687c <I2C_WaitOnFlagUntilTimeout>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d001      	beq.n	80062f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e0bf      	b.n	8006470 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	691a      	ldr	r2, [r3, #16]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	b2d2      	uxtb	r2, r2
 800630c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800631c:	3b01      	subs	r3, #1
 800631e:	b29a      	uxth	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006328:	b29b      	uxth	r3, r3
 800632a:	3b01      	subs	r3, #1
 800632c:	b29a      	uxth	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006338:	2200      	movs	r2, #0
 800633a:	494f      	ldr	r1, [pc, #316]	; (8006478 <HAL_I2C_Mem_Read+0x448>)
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 fa9d 	bl	800687c <I2C_WaitOnFlagUntilTimeout>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e091      	b.n	8006470 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800635a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	691a      	ldr	r2, [r3, #16]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006378:	3b01      	subs	r3, #1
 800637a:	b29a      	uxth	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006384:	b29b      	uxth	r3, r3
 8006386:	3b01      	subs	r3, #1
 8006388:	b29a      	uxth	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	691a      	ldr	r2, [r3, #16]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	b2d2      	uxtb	r2, r2
 800639a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063aa:	3b01      	subs	r3, #1
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	3b01      	subs	r3, #1
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063c0:	e042      	b.n	8006448 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 fbb0 	bl	8006b2c <I2C_WaitOnRXNEFlagUntilTimeout>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e04c      	b.n	8006470 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	691a      	ldr	r2, [r3, #16]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e0:	b2d2      	uxtb	r2, r2
 80063e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f2:	3b01      	subs	r3, #1
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063fe:	b29b      	uxth	r3, r3
 8006400:	3b01      	subs	r3, #1
 8006402:	b29a      	uxth	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	f003 0304 	and.w	r3, r3, #4
 8006412:	2b04      	cmp	r3, #4
 8006414:	d118      	bne.n	8006448 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	691a      	ldr	r2, [r3, #16]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	b2d2      	uxtb	r2, r2
 8006422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	1c5a      	adds	r2, r3, #1
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006432:	3b01      	subs	r3, #1
 8006434:	b29a      	uxth	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800643e:	b29b      	uxth	r3, r3
 8006440:	3b01      	subs	r3, #1
 8006442:	b29a      	uxth	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800644c:	2b00      	cmp	r3, #0
 800644e:	f47f aec2 	bne.w	80061d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2220      	movs	r2, #32
 8006456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	e000      	b.n	8006470 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800646e:	2302      	movs	r3, #2
  }
}
 8006470:	4618      	mov	r0, r3
 8006472:	3728      	adds	r7, #40	; 0x28
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	00010004 	.word	0x00010004

0800647c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b088      	sub	sp, #32
 8006480:	af02      	add	r7, sp, #8
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	607a      	str	r2, [r7, #4]
 8006486:	603b      	str	r3, [r7, #0]
 8006488:	460b      	mov	r3, r1
 800648a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006490:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2b08      	cmp	r3, #8
 8006496:	d006      	beq.n	80064a6 <I2C_MasterRequestWrite+0x2a>
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d003      	beq.n	80064a6 <I2C_MasterRequestWrite+0x2a>
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80064a4:	d108      	bne.n	80064b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064b4:	601a      	str	r2, [r3, #0]
 80064b6:	e00b      	b.n	80064d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064bc:	2b12      	cmp	r3, #18
 80064be:	d107      	bne.n	80064d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 f9cd 	bl	800687c <I2C_WaitOnFlagUntilTimeout>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00d      	beq.n	8006504 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064f6:	d103      	bne.n	8006500 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e035      	b.n	8006570 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800650c:	d108      	bne.n	8006520 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800650e:	897b      	ldrh	r3, [r7, #10]
 8006510:	b2db      	uxtb	r3, r3
 8006512:	461a      	mov	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800651c:	611a      	str	r2, [r3, #16]
 800651e:	e01b      	b.n	8006558 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006520:	897b      	ldrh	r3, [r7, #10]
 8006522:	11db      	asrs	r3, r3, #7
 8006524:	b2db      	uxtb	r3, r3
 8006526:	f003 0306 	and.w	r3, r3, #6
 800652a:	b2db      	uxtb	r3, r3
 800652c:	f063 030f 	orn	r3, r3, #15
 8006530:	b2da      	uxtb	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	490e      	ldr	r1, [pc, #56]	; (8006578 <I2C_MasterRequestWrite+0xfc>)
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 f9f3 	bl	800692a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e010      	b.n	8006570 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800654e:	897b      	ldrh	r3, [r7, #10]
 8006550:	b2da      	uxtb	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	4907      	ldr	r1, [pc, #28]	; (800657c <I2C_MasterRequestWrite+0x100>)
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 f9e3 	bl	800692a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e000      	b.n	8006570 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3718      	adds	r7, #24
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	00010008 	.word	0x00010008
 800657c:	00010002 	.word	0x00010002

08006580 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b088      	sub	sp, #32
 8006584:	af02      	add	r7, sp, #8
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	4608      	mov	r0, r1
 800658a:	4611      	mov	r1, r2
 800658c:	461a      	mov	r2, r3
 800658e:	4603      	mov	r3, r0
 8006590:	817b      	strh	r3, [r7, #10]
 8006592:	460b      	mov	r3, r1
 8006594:	813b      	strh	r3, [r7, #8]
 8006596:	4613      	mov	r3, r2
 8006598:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f000 f960 	bl	800687c <I2C_WaitOnFlagUntilTimeout>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00d      	beq.n	80065de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065d0:	d103      	bne.n	80065da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e05f      	b.n	800669e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065de:	897b      	ldrh	r3, [r7, #10]
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	461a      	mov	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	6a3a      	ldr	r2, [r7, #32]
 80065f2:	492d      	ldr	r1, [pc, #180]	; (80066a8 <I2C_RequestMemoryWrite+0x128>)
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 f998 	bl	800692a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e04c      	b.n	800669e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006604:	2300      	movs	r3, #0
 8006606:	617b      	str	r3, [r7, #20]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	617b      	str	r3, [r7, #20]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	617b      	str	r3, [r7, #20]
 8006618:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800661a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800661c:	6a39      	ldr	r1, [r7, #32]
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f000 fa02 	bl	8006a28 <I2C_WaitOnTXEFlagUntilTimeout>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00d      	beq.n	8006646 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662e:	2b04      	cmp	r3, #4
 8006630:	d107      	bne.n	8006642 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006640:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e02b      	b.n	800669e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006646:	88fb      	ldrh	r3, [r7, #6]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d105      	bne.n	8006658 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800664c:	893b      	ldrh	r3, [r7, #8]
 800664e:	b2da      	uxtb	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	611a      	str	r2, [r3, #16]
 8006656:	e021      	b.n	800669c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006658:	893b      	ldrh	r3, [r7, #8]
 800665a:	0a1b      	lsrs	r3, r3, #8
 800665c:	b29b      	uxth	r3, r3
 800665e:	b2da      	uxtb	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006668:	6a39      	ldr	r1, [r7, #32]
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 f9dc 	bl	8006a28 <I2C_WaitOnTXEFlagUntilTimeout>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00d      	beq.n	8006692 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667a:	2b04      	cmp	r3, #4
 800667c:	d107      	bne.n	800668e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800668c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e005      	b.n	800669e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006692:	893b      	ldrh	r3, [r7, #8]
 8006694:	b2da      	uxtb	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3718      	adds	r7, #24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	00010002 	.word	0x00010002

080066ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b088      	sub	sp, #32
 80066b0:	af02      	add	r7, sp, #8
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	4608      	mov	r0, r1
 80066b6:	4611      	mov	r1, r2
 80066b8:	461a      	mov	r2, r3
 80066ba:	4603      	mov	r3, r0
 80066bc:	817b      	strh	r3, [r7, #10]
 80066be:	460b      	mov	r3, r1
 80066c0:	813b      	strh	r3, [r7, #8]
 80066c2:	4613      	mov	r3, r2
 80066c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	6a3b      	ldr	r3, [r7, #32]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f000 f8c2 	bl	800687c <I2C_WaitOnFlagUntilTimeout>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00d      	beq.n	800671a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800670c:	d103      	bne.n	8006716 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006714:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e0aa      	b.n	8006870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800671a:	897b      	ldrh	r3, [r7, #10]
 800671c:	b2db      	uxtb	r3, r3
 800671e:	461a      	mov	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006728:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	6a3a      	ldr	r2, [r7, #32]
 800672e:	4952      	ldr	r1, [pc, #328]	; (8006878 <I2C_RequestMemoryRead+0x1cc>)
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 f8fa 	bl	800692a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e097      	b.n	8006870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006740:	2300      	movs	r3, #0
 8006742:	617b      	str	r3, [r7, #20]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	617b      	str	r3, [r7, #20]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	617b      	str	r3, [r7, #20]
 8006754:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006758:	6a39      	ldr	r1, [r7, #32]
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f000 f964 	bl	8006a28 <I2C_WaitOnTXEFlagUntilTimeout>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00d      	beq.n	8006782 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	2b04      	cmp	r3, #4
 800676c:	d107      	bne.n	800677e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800677c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e076      	b.n	8006870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006782:	88fb      	ldrh	r3, [r7, #6]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d105      	bne.n	8006794 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006788:	893b      	ldrh	r3, [r7, #8]
 800678a:	b2da      	uxtb	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	611a      	str	r2, [r3, #16]
 8006792:	e021      	b.n	80067d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006794:	893b      	ldrh	r3, [r7, #8]
 8006796:	0a1b      	lsrs	r3, r3, #8
 8006798:	b29b      	uxth	r3, r3
 800679a:	b2da      	uxtb	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067a4:	6a39      	ldr	r1, [r7, #32]
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 f93e 	bl	8006a28 <I2C_WaitOnTXEFlagUntilTimeout>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00d      	beq.n	80067ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b6:	2b04      	cmp	r3, #4
 80067b8:	d107      	bne.n	80067ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e050      	b.n	8006870 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067ce:	893b      	ldrh	r3, [r7, #8]
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067da:	6a39      	ldr	r1, [r7, #32]
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 f923 	bl	8006a28 <I2C_WaitOnTXEFlagUntilTimeout>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00d      	beq.n	8006804 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ec:	2b04      	cmp	r3, #4
 80067ee:	d107      	bne.n	8006800 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e035      	b.n	8006870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006812:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	2200      	movs	r2, #0
 800681c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f000 f82b 	bl	800687c <I2C_WaitOnFlagUntilTimeout>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00d      	beq.n	8006848 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800683a:	d103      	bne.n	8006844 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006842:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e013      	b.n	8006870 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006848:	897b      	ldrh	r3, [r7, #10]
 800684a:	b2db      	uxtb	r3, r3
 800684c:	f043 0301 	orr.w	r3, r3, #1
 8006850:	b2da      	uxtb	r2, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	6a3a      	ldr	r2, [r7, #32]
 800685c:	4906      	ldr	r1, [pc, #24]	; (8006878 <I2C_RequestMemoryRead+0x1cc>)
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f000 f863 	bl	800692a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e000      	b.n	8006870 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3718      	adds	r7, #24
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	00010002 	.word	0x00010002

0800687c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	603b      	str	r3, [r7, #0]
 8006888:	4613      	mov	r3, r2
 800688a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800688c:	e025      	b.n	80068da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006894:	d021      	beq.n	80068da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006896:	f7fd f801 	bl	800389c <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	683a      	ldr	r2, [r7, #0]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d302      	bcc.n	80068ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d116      	bne.n	80068da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2220      	movs	r2, #32
 80068b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	f043 0220 	orr.w	r2, r3, #32
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e023      	b.n	8006922 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	0c1b      	lsrs	r3, r3, #16
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d10d      	bne.n	8006900 <I2C_WaitOnFlagUntilTimeout+0x84>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	43da      	mvns	r2, r3
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	4013      	ands	r3, r2
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	bf0c      	ite	eq
 80068f6:	2301      	moveq	r3, #1
 80068f8:	2300      	movne	r3, #0
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	461a      	mov	r2, r3
 80068fe:	e00c      	b.n	800691a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	43da      	mvns	r2, r3
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	4013      	ands	r3, r2
 800690c:	b29b      	uxth	r3, r3
 800690e:	2b00      	cmp	r3, #0
 8006910:	bf0c      	ite	eq
 8006912:	2301      	moveq	r3, #1
 8006914:	2300      	movne	r3, #0
 8006916:	b2db      	uxtb	r3, r3
 8006918:	461a      	mov	r2, r3
 800691a:	79fb      	ldrb	r3, [r7, #7]
 800691c:	429a      	cmp	r2, r3
 800691e:	d0b6      	beq.n	800688e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b084      	sub	sp, #16
 800692e:	af00      	add	r7, sp, #0
 8006930:	60f8      	str	r0, [r7, #12]
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	607a      	str	r2, [r7, #4]
 8006936:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006938:	e051      	b.n	80069de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006948:	d123      	bne.n	8006992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006958:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006962:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2220      	movs	r2, #32
 800696e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	f043 0204 	orr.w	r2, r3, #4
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e046      	b.n	8006a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006998:	d021      	beq.n	80069de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800699a:	f7fc ff7f 	bl	800389c <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d302      	bcc.n	80069b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d116      	bne.n	80069de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2220      	movs	r2, #32
 80069ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	f043 0220 	orr.w	r2, r3, #32
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e020      	b.n	8006a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	0c1b      	lsrs	r3, r3, #16
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d10c      	bne.n	8006a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	43da      	mvns	r2, r3
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	4013      	ands	r3, r2
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	bf14      	ite	ne
 80069fa:	2301      	movne	r3, #1
 80069fc:	2300      	moveq	r3, #0
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	e00b      	b.n	8006a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	43da      	mvns	r2, r3
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	bf14      	ite	ne
 8006a14:	2301      	movne	r3, #1
 8006a16:	2300      	moveq	r3, #0
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d18d      	bne.n	800693a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a34:	e02d      	b.n	8006a92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f000 f8ce 	bl	8006bd8 <I2C_IsAcknowledgeFailed>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e02d      	b.n	8006aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a4c:	d021      	beq.n	8006a92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a4e:	f7fc ff25 	bl	800389c <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d302      	bcc.n	8006a64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d116      	bne.n	8006a92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	f043 0220 	orr.w	r2, r3, #32
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e007      	b.n	8006aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9c:	2b80      	cmp	r3, #128	; 0x80
 8006a9e:	d1ca      	bne.n	8006a36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b084      	sub	sp, #16
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	60f8      	str	r0, [r7, #12]
 8006ab2:	60b9      	str	r1, [r7, #8]
 8006ab4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ab6:	e02d      	b.n	8006b14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 f88d 	bl	8006bd8 <I2C_IsAcknowledgeFailed>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e02d      	b.n	8006b24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ace:	d021      	beq.n	8006b14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ad0:	f7fc fee4 	bl	800389c <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d302      	bcc.n	8006ae6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d116      	bne.n	8006b14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2220      	movs	r2, #32
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b00:	f043 0220 	orr.w	r2, r3, #32
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e007      	b.n	8006b24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	695b      	ldr	r3, [r3, #20]
 8006b1a:	f003 0304 	and.w	r3, r3, #4
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	d1ca      	bne.n	8006ab8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b38:	e042      	b.n	8006bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	f003 0310 	and.w	r3, r3, #16
 8006b44:	2b10      	cmp	r3, #16
 8006b46:	d119      	bne.n	8006b7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f06f 0210 	mvn.w	r2, #16
 8006b50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e029      	b.n	8006bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b7c:	f7fc fe8e 	bl	800389c <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d302      	bcc.n	8006b92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d116      	bne.n	8006bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2220      	movs	r2, #32
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bac:	f043 0220 	orr.w	r2, r3, #32
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e007      	b.n	8006bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bca:	2b40      	cmp	r3, #64	; 0x40
 8006bcc:	d1b5      	bne.n	8006b3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bee:	d11b      	bne.n	8006c28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006bf8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2220      	movs	r2, #32
 8006c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c14:	f043 0204 	orr.w	r2, r3, #4
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e000      	b.n	8006c2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
	...

08006c38 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b088      	sub	sp, #32
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e128      	b.n	8006e9c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d109      	bne.n	8006c6a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a90      	ldr	r2, [pc, #576]	; (8006ea4 <HAL_I2S_Init+0x26c>)
 8006c62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7fa fb6d 	bl	8001344 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	6812      	ldr	r2, [r2, #0]
 8006c7c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006c80:	f023 030f 	bic.w	r3, r3, #15
 8006c84:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d060      	beq.n	8006d58 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d102      	bne.n	8006ca4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006c9e:	2310      	movs	r3, #16
 8006ca0:	617b      	str	r3, [r7, #20]
 8006ca2:	e001      	b.n	8006ca8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006ca4:	2320      	movs	r3, #32
 8006ca6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	2b20      	cmp	r3, #32
 8006cae:	d802      	bhi.n	8006cb6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	005b      	lsls	r3, r3, #1
 8006cb4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006cb6:	2001      	movs	r0, #1
 8006cb8:	f001 f9a0 	bl	8007ffc <HAL_RCCEx_GetPeriphCLKFreq>
 8006cbc:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cc6:	d125      	bne.n	8006d14 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d010      	beq.n	8006cf2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8006cda:	4613      	mov	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4413      	add	r3, r2
 8006ce0:	005b      	lsls	r3, r3, #1
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	695b      	ldr	r3, [r3, #20]
 8006ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cec:	3305      	adds	r3, #5
 8006cee:	613b      	str	r3, [r7, #16]
 8006cf0:	e01f      	b.n	8006d32 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	00db      	lsls	r3, r3, #3
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	4413      	add	r3, r2
 8006d02:	005b      	lsls	r3, r3, #1
 8006d04:	461a      	mov	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d0e:	3305      	adds	r3, #5
 8006d10:	613b      	str	r3, [r7, #16]
 8006d12:	e00e      	b.n	8006d32 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	005b      	lsls	r3, r3, #1
 8006d24:	461a      	mov	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d2e:	3305      	adds	r3, #5
 8006d30:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	4a5c      	ldr	r2, [pc, #368]	; (8006ea8 <HAL_I2S_Init+0x270>)
 8006d36:	fba2 2303 	umull	r2, r3, r2, r3
 8006d3a:	08db      	lsrs	r3, r3, #3
 8006d3c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	085b      	lsrs	r3, r3, #1
 8006d4e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	021b      	lsls	r3, r3, #8
 8006d54:	61bb      	str	r3, [r7, #24]
 8006d56:	e003      	b.n	8006d60 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006d58:	2302      	movs	r3, #2
 8006d5a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d902      	bls.n	8006d6c <HAL_I2S_Init+0x134>
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	2bff      	cmp	r3, #255	; 0xff
 8006d6a:	d907      	bls.n	8006d7c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d70:	f043 0210 	orr.w	r2, r3, #16
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e08f      	b.n	8006e9c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	691a      	ldr	r2, [r3, #16]
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	ea42 0103 	orr.w	r1, r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	69fa      	ldr	r2, [r7, #28]
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006d9a:	f023 030f 	bic.w	r3, r3, #15
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	6851      	ldr	r1, [r2, #4]
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	6892      	ldr	r2, [r2, #8]
 8006da6:	4311      	orrs	r1, r2
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	68d2      	ldr	r2, [r2, #12]
 8006dac:	4311      	orrs	r1, r2
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	6992      	ldr	r2, [r2, #24]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	431a      	orrs	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dbe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a1b      	ldr	r3, [r3, #32]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d161      	bne.n	8006e8c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a38      	ldr	r2, [pc, #224]	; (8006eac <HAL_I2S_Init+0x274>)
 8006dcc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a37      	ldr	r2, [pc, #220]	; (8006eb0 <HAL_I2S_Init+0x278>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d101      	bne.n	8006ddc <HAL_I2S_Init+0x1a4>
 8006dd8:	4b36      	ldr	r3, [pc, #216]	; (8006eb4 <HAL_I2S_Init+0x27c>)
 8006dda:	e001      	b.n	8006de0 <HAL_I2S_Init+0x1a8>
 8006ddc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	6812      	ldr	r2, [r2, #0]
 8006de6:	4932      	ldr	r1, [pc, #200]	; (8006eb0 <HAL_I2S_Init+0x278>)
 8006de8:	428a      	cmp	r2, r1
 8006dea:	d101      	bne.n	8006df0 <HAL_I2S_Init+0x1b8>
 8006dec:	4a31      	ldr	r2, [pc, #196]	; (8006eb4 <HAL_I2S_Init+0x27c>)
 8006dee:	e001      	b.n	8006df4 <HAL_I2S_Init+0x1bc>
 8006df0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006df4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006df8:	f023 030f 	bic.w	r3, r3, #15
 8006dfc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a2b      	ldr	r2, [pc, #172]	; (8006eb0 <HAL_I2S_Init+0x278>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d101      	bne.n	8006e0c <HAL_I2S_Init+0x1d4>
 8006e08:	4b2a      	ldr	r3, [pc, #168]	; (8006eb4 <HAL_I2S_Init+0x27c>)
 8006e0a:	e001      	b.n	8006e10 <HAL_I2S_Init+0x1d8>
 8006e0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e10:	2202      	movs	r2, #2
 8006e12:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a25      	ldr	r2, [pc, #148]	; (8006eb0 <HAL_I2S_Init+0x278>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d101      	bne.n	8006e22 <HAL_I2S_Init+0x1ea>
 8006e1e:	4b25      	ldr	r3, [pc, #148]	; (8006eb4 <HAL_I2S_Init+0x27c>)
 8006e20:	e001      	b.n	8006e26 <HAL_I2S_Init+0x1ee>
 8006e22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e26:	69db      	ldr	r3, [r3, #28]
 8006e28:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e32:	d003      	beq.n	8006e3c <HAL_I2S_Init+0x204>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d103      	bne.n	8006e44 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006e3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e40:	613b      	str	r3, [r7, #16]
 8006e42:	e001      	b.n	8006e48 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006e44:	2300      	movs	r3, #0
 8006e46:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006e52:	4313      	orrs	r3, r2
 8006e54:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006e66:	4313      	orrs	r3, r2
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	897b      	ldrh	r3, [r7, #10]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006e74:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a0d      	ldr	r2, [pc, #52]	; (8006eb0 <HAL_I2S_Init+0x278>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d101      	bne.n	8006e84 <HAL_I2S_Init+0x24c>
 8006e80:	4b0c      	ldr	r3, [pc, #48]	; (8006eb4 <HAL_I2S_Init+0x27c>)
 8006e82:	e001      	b.n	8006e88 <HAL_I2S_Init+0x250>
 8006e84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e88:	897a      	ldrh	r2, [r7, #10]
 8006e8a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3720      	adds	r7, #32
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	08006faf 	.word	0x08006faf
 8006ea8:	cccccccd 	.word	0xcccccccd
 8006eac:	080070c5 	.word	0x080070c5
 8006eb0:	40003800 	.word	0x40003800
 8006eb4:	40003400 	.word	0x40003400

08006eb8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f00:	881a      	ldrh	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	1c9a      	adds	r2, r3, #2
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10e      	bne.n	8006f48 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685a      	ldr	r2, [r3, #4]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006f38:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7ff ffb8 	bl	8006eb8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006f48:	bf00      	nop
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68da      	ldr	r2, [r3, #12]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f62:	b292      	uxth	r2, r2
 8006f64:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6a:	1c9a      	adds	r2, r3, #2
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	3b01      	subs	r3, #1
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10e      	bne.n	8006fa6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	685a      	ldr	r2, [r3, #4]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f96:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f7ff ff93 	bl	8006ecc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006fa6:	bf00      	nop
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b086      	sub	sp, #24
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b04      	cmp	r3, #4
 8006fc8:	d13a      	bne.n	8007040 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d109      	bne.n	8006fe8 <I2S_IRQHandler+0x3a>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fde:	2b40      	cmp	r3, #64	; 0x40
 8006fe0:	d102      	bne.n	8006fe8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7ff ffb4 	bl	8006f50 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fee:	2b40      	cmp	r3, #64	; 0x40
 8006ff0:	d126      	bne.n	8007040 <I2S_IRQHandler+0x92>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	f003 0320 	and.w	r3, r3, #32
 8006ffc:	2b20      	cmp	r3, #32
 8006ffe:	d11f      	bne.n	8007040 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800700e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007010:	2300      	movs	r3, #0
 8007012:	613b      	str	r3, [r7, #16]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	613b      	str	r3, [r7, #16]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	613b      	str	r3, [r7, #16]
 8007024:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007032:	f043 0202 	orr.w	r2, r3, #2
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7ff ff50 	bl	8006ee0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2b03      	cmp	r3, #3
 800704a:	d136      	bne.n	80070ba <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b02      	cmp	r3, #2
 8007054:	d109      	bne.n	800706a <I2S_IRQHandler+0xbc>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007060:	2b80      	cmp	r3, #128	; 0x80
 8007062:	d102      	bne.n	800706a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f7ff ff45 	bl	8006ef4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	f003 0308 	and.w	r3, r3, #8
 8007070:	2b08      	cmp	r3, #8
 8007072:	d122      	bne.n	80070ba <I2S_IRQHandler+0x10c>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f003 0320 	and.w	r3, r3, #32
 800707e:	2b20      	cmp	r3, #32
 8007080:	d11b      	bne.n	80070ba <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007090:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007092:	2300      	movs	r3, #0
 8007094:	60fb      	str	r3, [r7, #12]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	60fb      	str	r3, [r7, #12]
 800709e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ac:	f043 0204 	orr.w	r2, r3, #4
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7ff ff13 	bl	8006ee0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80070ba:	bf00      	nop
 80070bc:	3718      	adds	r7, #24
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
	...

080070c4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b088      	sub	sp, #32
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4aa2      	ldr	r2, [pc, #648]	; (8007364 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d101      	bne.n	80070e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80070de:	4ba2      	ldr	r3, [pc, #648]	; (8007368 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80070e0:	e001      	b.n	80070e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80070e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a9b      	ldr	r2, [pc, #620]	; (8007364 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d101      	bne.n	8007100 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80070fc:	4b9a      	ldr	r3, [pc, #616]	; (8007368 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80070fe:	e001      	b.n	8007104 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007100:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007110:	d004      	beq.n	800711c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	f040 8099 	bne.w	800724e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	f003 0302 	and.w	r3, r3, #2
 8007122:	2b02      	cmp	r3, #2
 8007124:	d107      	bne.n	8007136 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800712c:	2b00      	cmp	r3, #0
 800712e:	d002      	beq.n	8007136 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f925 	bl	8007380 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	2b01      	cmp	r3, #1
 800713e:	d107      	bne.n	8007150 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007146:	2b00      	cmp	r3, #0
 8007148:	d002      	beq.n	8007150 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f9c8 	bl	80074e0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007156:	2b40      	cmp	r3, #64	; 0x40
 8007158:	d13a      	bne.n	80071d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	f003 0320 	and.w	r3, r3, #32
 8007160:	2b00      	cmp	r3, #0
 8007162:	d035      	beq.n	80071d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a7e      	ldr	r2, [pc, #504]	; (8007364 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d101      	bne.n	8007172 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800716e:	4b7e      	ldr	r3, [pc, #504]	; (8007368 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007170:	e001      	b.n	8007176 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8007172:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4979      	ldr	r1, [pc, #484]	; (8007364 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800717e:	428b      	cmp	r3, r1
 8007180:	d101      	bne.n	8007186 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8007182:	4b79      	ldr	r3, [pc, #484]	; (8007368 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007184:	e001      	b.n	800718a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8007186:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800718a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800718e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	685a      	ldr	r2, [r3, #4]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800719e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80071a0:	2300      	movs	r3, #0
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	60fb      	str	r3, [r7, #12]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	60fb      	str	r3, [r7, #12]
 80071b4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c2:	f043 0202 	orr.w	r2, r3, #2
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7ff fe88 	bl	8006ee0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	f003 0308 	and.w	r3, r3, #8
 80071d6:	2b08      	cmp	r3, #8
 80071d8:	f040 80be 	bne.w	8007358 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	f003 0320 	and.w	r3, r3, #32
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f000 80b8 	beq.w	8007358 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80071f6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a59      	ldr	r2, [pc, #356]	; (8007364 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d101      	bne.n	8007206 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8007202:	4b59      	ldr	r3, [pc, #356]	; (8007368 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007204:	e001      	b.n	800720a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8007206:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4954      	ldr	r1, [pc, #336]	; (8007364 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007212:	428b      	cmp	r3, r1
 8007214:	d101      	bne.n	800721a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007216:	4b54      	ldr	r3, [pc, #336]	; (8007368 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007218:	e001      	b.n	800721e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800721a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800721e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007222:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007224:	2300      	movs	r3, #0
 8007226:	60bb      	str	r3, [r7, #8]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	60bb      	str	r3, [r7, #8]
 8007230:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800723e:	f043 0204 	orr.w	r2, r3, #4
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f7ff fe4a 	bl	8006ee0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800724c:	e084      	b.n	8007358 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b02      	cmp	r3, #2
 8007256:	d107      	bne.n	8007268 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800725e:	2b00      	cmp	r3, #0
 8007260:	d002      	beq.n	8007268 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f8be 	bl	80073e4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	2b01      	cmp	r3, #1
 8007270:	d107      	bne.n	8007282 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f8fd 	bl	800747c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007288:	2b40      	cmp	r3, #64	; 0x40
 800728a:	d12f      	bne.n	80072ec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f003 0320 	and.w	r3, r3, #32
 8007292:	2b00      	cmp	r3, #0
 8007294:	d02a      	beq.n	80072ec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80072a4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a2e      	ldr	r2, [pc, #184]	; (8007364 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d101      	bne.n	80072b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80072b0:	4b2d      	ldr	r3, [pc, #180]	; (8007368 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80072b2:	e001      	b.n	80072b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80072b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4929      	ldr	r1, [pc, #164]	; (8007364 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80072c0:	428b      	cmp	r3, r1
 80072c2:	d101      	bne.n	80072c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80072c4:	4b28      	ldr	r3, [pc, #160]	; (8007368 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80072c6:	e001      	b.n	80072cc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80072c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80072d0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072de:	f043 0202 	orr.w	r2, r3, #2
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f7ff fdfa 	bl	8006ee0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	f003 0308 	and.w	r3, r3, #8
 80072f2:	2b08      	cmp	r3, #8
 80072f4:	d131      	bne.n	800735a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	f003 0320 	and.w	r3, r3, #32
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d02c      	beq.n	800735a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a17      	ldr	r2, [pc, #92]	; (8007364 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d101      	bne.n	800730e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800730a:	4b17      	ldr	r3, [pc, #92]	; (8007368 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800730c:	e001      	b.n	8007312 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800730e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4912      	ldr	r1, [pc, #72]	; (8007364 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800731a:	428b      	cmp	r3, r1
 800731c:	d101      	bne.n	8007322 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800731e:	4b12      	ldr	r3, [pc, #72]	; (8007368 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007320:	e001      	b.n	8007326 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8007322:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007326:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800732a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	685a      	ldr	r2, [r3, #4]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800733a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007348:	f043 0204 	orr.w	r2, r3, #4
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f7ff fdc5 	bl	8006ee0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007356:	e000      	b.n	800735a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007358:	bf00      	nop
}
 800735a:	bf00      	nop
 800735c:	3720      	adds	r7, #32
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	40003800 	.word	0x40003800
 8007368:	40003400 	.word	0x40003400

0800736c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738c:	1c99      	adds	r1, r3, #2
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	6251      	str	r1, [r2, #36]	; 0x24
 8007392:	881a      	ldrh	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800739e:	b29b      	uxth	r3, r3
 80073a0:	3b01      	subs	r3, #1
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d113      	bne.n	80073da <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80073c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d106      	bne.n	80073da <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f7ff ffc9 	bl	800736c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80073da:	bf00      	nop
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
	...

080073e4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	1c99      	adds	r1, r3, #2
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	6251      	str	r1, [r2, #36]	; 0x24
 80073f6:	8819      	ldrh	r1, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a1d      	ldr	r2, [pc, #116]	; (8007474 <I2SEx_TxISR_I2SExt+0x90>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d101      	bne.n	8007406 <I2SEx_TxISR_I2SExt+0x22>
 8007402:	4b1d      	ldr	r3, [pc, #116]	; (8007478 <I2SEx_TxISR_I2SExt+0x94>)
 8007404:	e001      	b.n	800740a <I2SEx_TxISR_I2SExt+0x26>
 8007406:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800740a:	460a      	mov	r2, r1
 800740c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007412:	b29b      	uxth	r3, r3
 8007414:	3b01      	subs	r3, #1
 8007416:	b29a      	uxth	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007420:	b29b      	uxth	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d121      	bne.n	800746a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a12      	ldr	r2, [pc, #72]	; (8007474 <I2SEx_TxISR_I2SExt+0x90>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d101      	bne.n	8007434 <I2SEx_TxISR_I2SExt+0x50>
 8007430:	4b11      	ldr	r3, [pc, #68]	; (8007478 <I2SEx_TxISR_I2SExt+0x94>)
 8007432:	e001      	b.n	8007438 <I2SEx_TxISR_I2SExt+0x54>
 8007434:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007438:	685a      	ldr	r2, [r3, #4]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	490d      	ldr	r1, [pc, #52]	; (8007474 <I2SEx_TxISR_I2SExt+0x90>)
 8007440:	428b      	cmp	r3, r1
 8007442:	d101      	bne.n	8007448 <I2SEx_TxISR_I2SExt+0x64>
 8007444:	4b0c      	ldr	r3, [pc, #48]	; (8007478 <I2SEx_TxISR_I2SExt+0x94>)
 8007446:	e001      	b.n	800744c <I2SEx_TxISR_I2SExt+0x68>
 8007448:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800744c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007450:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007456:	b29b      	uxth	r3, r3
 8007458:	2b00      	cmp	r3, #0
 800745a:	d106      	bne.n	800746a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f7ff ff81 	bl	800736c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800746a:	bf00      	nop
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	40003800 	.word	0x40003800
 8007478:	40003400 	.word	0x40003400

0800747c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68d8      	ldr	r0, [r3, #12]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748e:	1c99      	adds	r1, r3, #2
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007494:	b282      	uxth	r2, r0
 8007496:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800749c:	b29b      	uxth	r3, r3
 800749e:	3b01      	subs	r3, #1
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d113      	bne.n	80074d8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80074be:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d106      	bne.n	80074d8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f7ff ff4a 	bl	800736c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80074d8:	bf00      	nop
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a20      	ldr	r2, [pc, #128]	; (8007570 <I2SEx_RxISR_I2SExt+0x90>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d101      	bne.n	80074f6 <I2SEx_RxISR_I2SExt+0x16>
 80074f2:	4b20      	ldr	r3, [pc, #128]	; (8007574 <I2SEx_RxISR_I2SExt+0x94>)
 80074f4:	e001      	b.n	80074fa <I2SEx_RxISR_I2SExt+0x1a>
 80074f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074fa:	68d8      	ldr	r0, [r3, #12]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007500:	1c99      	adds	r1, r3, #2
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007506:	b282      	uxth	r2, r0
 8007508:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800750e:	b29b      	uxth	r3, r3
 8007510:	3b01      	subs	r3, #1
 8007512:	b29a      	uxth	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800751c:	b29b      	uxth	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d121      	bne.n	8007566 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a12      	ldr	r2, [pc, #72]	; (8007570 <I2SEx_RxISR_I2SExt+0x90>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d101      	bne.n	8007530 <I2SEx_RxISR_I2SExt+0x50>
 800752c:	4b11      	ldr	r3, [pc, #68]	; (8007574 <I2SEx_RxISR_I2SExt+0x94>)
 800752e:	e001      	b.n	8007534 <I2SEx_RxISR_I2SExt+0x54>
 8007530:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007534:	685a      	ldr	r2, [r3, #4]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	490d      	ldr	r1, [pc, #52]	; (8007570 <I2SEx_RxISR_I2SExt+0x90>)
 800753c:	428b      	cmp	r3, r1
 800753e:	d101      	bne.n	8007544 <I2SEx_RxISR_I2SExt+0x64>
 8007540:	4b0c      	ldr	r3, [pc, #48]	; (8007574 <I2SEx_RxISR_I2SExt+0x94>)
 8007542:	e001      	b.n	8007548 <I2SEx_RxISR_I2SExt+0x68>
 8007544:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007548:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800754c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007552:	b29b      	uxth	r3, r3
 8007554:	2b00      	cmp	r3, #0
 8007556:	d106      	bne.n	8007566 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7ff ff03 	bl	800736c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007566:	bf00      	nop
 8007568:	3708      	adds	r7, #8
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	40003800 	.word	0x40003800
 8007574:	40003400 	.word	0x40003400

08007578 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e264      	b.n	8007a54 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	d075      	beq.n	8007682 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007596:	4ba3      	ldr	r3, [pc, #652]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	f003 030c 	and.w	r3, r3, #12
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d00c      	beq.n	80075bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075a2:	4ba0      	ldr	r3, [pc, #640]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80075aa:	2b08      	cmp	r3, #8
 80075ac:	d112      	bne.n	80075d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075ae:	4b9d      	ldr	r3, [pc, #628]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075ba:	d10b      	bne.n	80075d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075bc:	4b99      	ldr	r3, [pc, #612]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d05b      	beq.n	8007680 <HAL_RCC_OscConfig+0x108>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d157      	bne.n	8007680 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e23f      	b.n	8007a54 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075dc:	d106      	bne.n	80075ec <HAL_RCC_OscConfig+0x74>
 80075de:	4b91      	ldr	r3, [pc, #580]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a90      	ldr	r2, [pc, #576]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 80075e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075e8:	6013      	str	r3, [r2, #0]
 80075ea:	e01d      	b.n	8007628 <HAL_RCC_OscConfig+0xb0>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075f4:	d10c      	bne.n	8007610 <HAL_RCC_OscConfig+0x98>
 80075f6:	4b8b      	ldr	r3, [pc, #556]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a8a      	ldr	r2, [pc, #552]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 80075fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007600:	6013      	str	r3, [r2, #0]
 8007602:	4b88      	ldr	r3, [pc, #544]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a87      	ldr	r2, [pc, #540]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 8007608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800760c:	6013      	str	r3, [r2, #0]
 800760e:	e00b      	b.n	8007628 <HAL_RCC_OscConfig+0xb0>
 8007610:	4b84      	ldr	r3, [pc, #528]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a83      	ldr	r2, [pc, #524]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 8007616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800761a:	6013      	str	r3, [r2, #0]
 800761c:	4b81      	ldr	r3, [pc, #516]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a80      	ldr	r2, [pc, #512]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 8007622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d013      	beq.n	8007658 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007630:	f7fc f934 	bl	800389c <HAL_GetTick>
 8007634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007636:	e008      	b.n	800764a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007638:	f7fc f930 	bl	800389c <HAL_GetTick>
 800763c:	4602      	mov	r2, r0
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	2b64      	cmp	r3, #100	; 0x64
 8007644:	d901      	bls.n	800764a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e204      	b.n	8007a54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800764a:	4b76      	ldr	r3, [pc, #472]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d0f0      	beq.n	8007638 <HAL_RCC_OscConfig+0xc0>
 8007656:	e014      	b.n	8007682 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007658:	f7fc f920 	bl	800389c <HAL_GetTick>
 800765c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800765e:	e008      	b.n	8007672 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007660:	f7fc f91c 	bl	800389c <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	2b64      	cmp	r3, #100	; 0x64
 800766c:	d901      	bls.n	8007672 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e1f0      	b.n	8007a54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007672:	4b6c      	ldr	r3, [pc, #432]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1f0      	bne.n	8007660 <HAL_RCC_OscConfig+0xe8>
 800767e:	e000      	b.n	8007682 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0302 	and.w	r3, r3, #2
 800768a:	2b00      	cmp	r3, #0
 800768c:	d063      	beq.n	8007756 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800768e:	4b65      	ldr	r3, [pc, #404]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f003 030c 	and.w	r3, r3, #12
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00b      	beq.n	80076b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800769a:	4b62      	ldr	r3, [pc, #392]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80076a2:	2b08      	cmp	r3, #8
 80076a4:	d11c      	bne.n	80076e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076a6:	4b5f      	ldr	r3, [pc, #380]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d116      	bne.n	80076e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076b2:	4b5c      	ldr	r3, [pc, #368]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0302 	and.w	r3, r3, #2
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d005      	beq.n	80076ca <HAL_RCC_OscConfig+0x152>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d001      	beq.n	80076ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e1c4      	b.n	8007a54 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076ca:	4b56      	ldr	r3, [pc, #344]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	00db      	lsls	r3, r3, #3
 80076d8:	4952      	ldr	r1, [pc, #328]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076de:	e03a      	b.n	8007756 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d020      	beq.n	800772a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076e8:	4b4f      	ldr	r3, [pc, #316]	; (8007828 <HAL_RCC_OscConfig+0x2b0>)
 80076ea:	2201      	movs	r2, #1
 80076ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ee:	f7fc f8d5 	bl	800389c <HAL_GetTick>
 80076f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076f4:	e008      	b.n	8007708 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076f6:	f7fc f8d1 	bl	800389c <HAL_GetTick>
 80076fa:	4602      	mov	r2, r0
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	1ad3      	subs	r3, r2, r3
 8007700:	2b02      	cmp	r3, #2
 8007702:	d901      	bls.n	8007708 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007704:	2303      	movs	r3, #3
 8007706:	e1a5      	b.n	8007a54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007708:	4b46      	ldr	r3, [pc, #280]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0302 	and.w	r3, r3, #2
 8007710:	2b00      	cmp	r3, #0
 8007712:	d0f0      	beq.n	80076f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007714:	4b43      	ldr	r3, [pc, #268]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	00db      	lsls	r3, r3, #3
 8007722:	4940      	ldr	r1, [pc, #256]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 8007724:	4313      	orrs	r3, r2
 8007726:	600b      	str	r3, [r1, #0]
 8007728:	e015      	b.n	8007756 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800772a:	4b3f      	ldr	r3, [pc, #252]	; (8007828 <HAL_RCC_OscConfig+0x2b0>)
 800772c:	2200      	movs	r2, #0
 800772e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007730:	f7fc f8b4 	bl	800389c <HAL_GetTick>
 8007734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007736:	e008      	b.n	800774a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007738:	f7fc f8b0 	bl	800389c <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	2b02      	cmp	r3, #2
 8007744:	d901      	bls.n	800774a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e184      	b.n	8007a54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800774a:	4b36      	ldr	r3, [pc, #216]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 0302 	and.w	r3, r3, #2
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1f0      	bne.n	8007738 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0308 	and.w	r3, r3, #8
 800775e:	2b00      	cmp	r3, #0
 8007760:	d030      	beq.n	80077c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d016      	beq.n	8007798 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800776a:	4b30      	ldr	r3, [pc, #192]	; (800782c <HAL_RCC_OscConfig+0x2b4>)
 800776c:	2201      	movs	r2, #1
 800776e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007770:	f7fc f894 	bl	800389c <HAL_GetTick>
 8007774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007776:	e008      	b.n	800778a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007778:	f7fc f890 	bl	800389c <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	2b02      	cmp	r3, #2
 8007784:	d901      	bls.n	800778a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e164      	b.n	8007a54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800778a:	4b26      	ldr	r3, [pc, #152]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 800778c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800778e:	f003 0302 	and.w	r3, r3, #2
 8007792:	2b00      	cmp	r3, #0
 8007794:	d0f0      	beq.n	8007778 <HAL_RCC_OscConfig+0x200>
 8007796:	e015      	b.n	80077c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007798:	4b24      	ldr	r3, [pc, #144]	; (800782c <HAL_RCC_OscConfig+0x2b4>)
 800779a:	2200      	movs	r2, #0
 800779c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800779e:	f7fc f87d 	bl	800389c <HAL_GetTick>
 80077a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077a4:	e008      	b.n	80077b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077a6:	f7fc f879 	bl	800389c <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d901      	bls.n	80077b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e14d      	b.n	8007a54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077b8:	4b1a      	ldr	r3, [pc, #104]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 80077ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077bc:	f003 0302 	and.w	r3, r3, #2
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1f0      	bne.n	80077a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 80a0 	beq.w	8007912 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077d2:	2300      	movs	r3, #0
 80077d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077d6:	4b13      	ldr	r3, [pc, #76]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 80077d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10f      	bne.n	8007802 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077e2:	2300      	movs	r3, #0
 80077e4:	60bb      	str	r3, [r7, #8]
 80077e6:	4b0f      	ldr	r3, [pc, #60]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 80077e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ea:	4a0e      	ldr	r2, [pc, #56]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 80077ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077f0:	6413      	str	r3, [r2, #64]	; 0x40
 80077f2:	4b0c      	ldr	r3, [pc, #48]	; (8007824 <HAL_RCC_OscConfig+0x2ac>)
 80077f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077fa:	60bb      	str	r3, [r7, #8]
 80077fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077fe:	2301      	movs	r3, #1
 8007800:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007802:	4b0b      	ldr	r3, [pc, #44]	; (8007830 <HAL_RCC_OscConfig+0x2b8>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800780a:	2b00      	cmp	r3, #0
 800780c:	d121      	bne.n	8007852 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800780e:	4b08      	ldr	r3, [pc, #32]	; (8007830 <HAL_RCC_OscConfig+0x2b8>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a07      	ldr	r2, [pc, #28]	; (8007830 <HAL_RCC_OscConfig+0x2b8>)
 8007814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007818:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800781a:	f7fc f83f 	bl	800389c <HAL_GetTick>
 800781e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007820:	e011      	b.n	8007846 <HAL_RCC_OscConfig+0x2ce>
 8007822:	bf00      	nop
 8007824:	40023800 	.word	0x40023800
 8007828:	42470000 	.word	0x42470000
 800782c:	42470e80 	.word	0x42470e80
 8007830:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007834:	f7fc f832 	bl	800389c <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	2b02      	cmp	r3, #2
 8007840:	d901      	bls.n	8007846 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e106      	b.n	8007a54 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007846:	4b85      	ldr	r3, [pc, #532]	; (8007a5c <HAL_RCC_OscConfig+0x4e4>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800784e:	2b00      	cmp	r3, #0
 8007850:	d0f0      	beq.n	8007834 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	2b01      	cmp	r3, #1
 8007858:	d106      	bne.n	8007868 <HAL_RCC_OscConfig+0x2f0>
 800785a:	4b81      	ldr	r3, [pc, #516]	; (8007a60 <HAL_RCC_OscConfig+0x4e8>)
 800785c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800785e:	4a80      	ldr	r2, [pc, #512]	; (8007a60 <HAL_RCC_OscConfig+0x4e8>)
 8007860:	f043 0301 	orr.w	r3, r3, #1
 8007864:	6713      	str	r3, [r2, #112]	; 0x70
 8007866:	e01c      	b.n	80078a2 <HAL_RCC_OscConfig+0x32a>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	2b05      	cmp	r3, #5
 800786e:	d10c      	bne.n	800788a <HAL_RCC_OscConfig+0x312>
 8007870:	4b7b      	ldr	r3, [pc, #492]	; (8007a60 <HAL_RCC_OscConfig+0x4e8>)
 8007872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007874:	4a7a      	ldr	r2, [pc, #488]	; (8007a60 <HAL_RCC_OscConfig+0x4e8>)
 8007876:	f043 0304 	orr.w	r3, r3, #4
 800787a:	6713      	str	r3, [r2, #112]	; 0x70
 800787c:	4b78      	ldr	r3, [pc, #480]	; (8007a60 <HAL_RCC_OscConfig+0x4e8>)
 800787e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007880:	4a77      	ldr	r2, [pc, #476]	; (8007a60 <HAL_RCC_OscConfig+0x4e8>)
 8007882:	f043 0301 	orr.w	r3, r3, #1
 8007886:	6713      	str	r3, [r2, #112]	; 0x70
 8007888:	e00b      	b.n	80078a2 <HAL_RCC_OscConfig+0x32a>
 800788a:	4b75      	ldr	r3, [pc, #468]	; (8007a60 <HAL_RCC_OscConfig+0x4e8>)
 800788c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800788e:	4a74      	ldr	r2, [pc, #464]	; (8007a60 <HAL_RCC_OscConfig+0x4e8>)
 8007890:	f023 0301 	bic.w	r3, r3, #1
 8007894:	6713      	str	r3, [r2, #112]	; 0x70
 8007896:	4b72      	ldr	r3, [pc, #456]	; (8007a60 <HAL_RCC_OscConfig+0x4e8>)
 8007898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800789a:	4a71      	ldr	r2, [pc, #452]	; (8007a60 <HAL_RCC_OscConfig+0x4e8>)
 800789c:	f023 0304 	bic.w	r3, r3, #4
 80078a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d015      	beq.n	80078d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078aa:	f7fb fff7 	bl	800389c <HAL_GetTick>
 80078ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078b0:	e00a      	b.n	80078c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078b2:	f7fb fff3 	bl	800389c <HAL_GetTick>
 80078b6:	4602      	mov	r2, r0
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d901      	bls.n	80078c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e0c5      	b.n	8007a54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078c8:	4b65      	ldr	r3, [pc, #404]	; (8007a60 <HAL_RCC_OscConfig+0x4e8>)
 80078ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078cc:	f003 0302 	and.w	r3, r3, #2
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d0ee      	beq.n	80078b2 <HAL_RCC_OscConfig+0x33a>
 80078d4:	e014      	b.n	8007900 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078d6:	f7fb ffe1 	bl	800389c <HAL_GetTick>
 80078da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078dc:	e00a      	b.n	80078f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078de:	f7fb ffdd 	bl	800389c <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d901      	bls.n	80078f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e0af      	b.n	8007a54 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078f4:	4b5a      	ldr	r3, [pc, #360]	; (8007a60 <HAL_RCC_OscConfig+0x4e8>)
 80078f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1ee      	bne.n	80078de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007900:	7dfb      	ldrb	r3, [r7, #23]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d105      	bne.n	8007912 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007906:	4b56      	ldr	r3, [pc, #344]	; (8007a60 <HAL_RCC_OscConfig+0x4e8>)
 8007908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790a:	4a55      	ldr	r2, [pc, #340]	; (8007a60 <HAL_RCC_OscConfig+0x4e8>)
 800790c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007910:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	2b00      	cmp	r3, #0
 8007918:	f000 809b 	beq.w	8007a52 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800791c:	4b50      	ldr	r3, [pc, #320]	; (8007a60 <HAL_RCC_OscConfig+0x4e8>)
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f003 030c 	and.w	r3, r3, #12
 8007924:	2b08      	cmp	r3, #8
 8007926:	d05c      	beq.n	80079e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	2b02      	cmp	r3, #2
 800792e:	d141      	bne.n	80079b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007930:	4b4c      	ldr	r3, [pc, #304]	; (8007a64 <HAL_RCC_OscConfig+0x4ec>)
 8007932:	2200      	movs	r2, #0
 8007934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007936:	f7fb ffb1 	bl	800389c <HAL_GetTick>
 800793a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800793c:	e008      	b.n	8007950 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800793e:	f7fb ffad 	bl	800389c <HAL_GetTick>
 8007942:	4602      	mov	r2, r0
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	1ad3      	subs	r3, r2, r3
 8007948:	2b02      	cmp	r3, #2
 800794a:	d901      	bls.n	8007950 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800794c:	2303      	movs	r3, #3
 800794e:	e081      	b.n	8007a54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007950:	4b43      	ldr	r3, [pc, #268]	; (8007a60 <HAL_RCC_OscConfig+0x4e8>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1f0      	bne.n	800793e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	69da      	ldr	r2, [r3, #28]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a1b      	ldr	r3, [r3, #32]
 8007964:	431a      	orrs	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796a:	019b      	lsls	r3, r3, #6
 800796c:	431a      	orrs	r2, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007972:	085b      	lsrs	r3, r3, #1
 8007974:	3b01      	subs	r3, #1
 8007976:	041b      	lsls	r3, r3, #16
 8007978:	431a      	orrs	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797e:	061b      	lsls	r3, r3, #24
 8007980:	4937      	ldr	r1, [pc, #220]	; (8007a60 <HAL_RCC_OscConfig+0x4e8>)
 8007982:	4313      	orrs	r3, r2
 8007984:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007986:	4b37      	ldr	r3, [pc, #220]	; (8007a64 <HAL_RCC_OscConfig+0x4ec>)
 8007988:	2201      	movs	r2, #1
 800798a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800798c:	f7fb ff86 	bl	800389c <HAL_GetTick>
 8007990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007992:	e008      	b.n	80079a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007994:	f7fb ff82 	bl	800389c <HAL_GetTick>
 8007998:	4602      	mov	r2, r0
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d901      	bls.n	80079a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80079a2:	2303      	movs	r3, #3
 80079a4:	e056      	b.n	8007a54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079a6:	4b2e      	ldr	r3, [pc, #184]	; (8007a60 <HAL_RCC_OscConfig+0x4e8>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d0f0      	beq.n	8007994 <HAL_RCC_OscConfig+0x41c>
 80079b2:	e04e      	b.n	8007a52 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079b4:	4b2b      	ldr	r3, [pc, #172]	; (8007a64 <HAL_RCC_OscConfig+0x4ec>)
 80079b6:	2200      	movs	r2, #0
 80079b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079ba:	f7fb ff6f 	bl	800389c <HAL_GetTick>
 80079be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079c0:	e008      	b.n	80079d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079c2:	f7fb ff6b 	bl	800389c <HAL_GetTick>
 80079c6:	4602      	mov	r2, r0
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d901      	bls.n	80079d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e03f      	b.n	8007a54 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079d4:	4b22      	ldr	r3, [pc, #136]	; (8007a60 <HAL_RCC_OscConfig+0x4e8>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1f0      	bne.n	80079c2 <HAL_RCC_OscConfig+0x44a>
 80079e0:	e037      	b.n	8007a52 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d101      	bne.n	80079ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e032      	b.n	8007a54 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80079ee:	4b1c      	ldr	r3, [pc, #112]	; (8007a60 <HAL_RCC_OscConfig+0x4e8>)
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d028      	beq.n	8007a4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d121      	bne.n	8007a4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d11a      	bne.n	8007a4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a1e:	4013      	ands	r3, r2
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a24:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d111      	bne.n	8007a4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a34:	085b      	lsrs	r3, r3, #1
 8007a36:	3b01      	subs	r3, #1
 8007a38:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d107      	bne.n	8007a4e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a48:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d001      	beq.n	8007a52 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e000      	b.n	8007a54 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3718      	adds	r7, #24
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	40007000 	.word	0x40007000
 8007a60:	40023800 	.word	0x40023800
 8007a64:	42470060 	.word	0x42470060

08007a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e0cc      	b.n	8007c16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a7c:	4b68      	ldr	r3, [pc, #416]	; (8007c20 <HAL_RCC_ClockConfig+0x1b8>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0307 	and.w	r3, r3, #7
 8007a84:	683a      	ldr	r2, [r7, #0]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d90c      	bls.n	8007aa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a8a:	4b65      	ldr	r3, [pc, #404]	; (8007c20 <HAL_RCC_ClockConfig+0x1b8>)
 8007a8c:	683a      	ldr	r2, [r7, #0]
 8007a8e:	b2d2      	uxtb	r2, r2
 8007a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a92:	4b63      	ldr	r3, [pc, #396]	; (8007c20 <HAL_RCC_ClockConfig+0x1b8>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0307 	and.w	r3, r3, #7
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d001      	beq.n	8007aa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e0b8      	b.n	8007c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 0302 	and.w	r3, r3, #2
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d020      	beq.n	8007af2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 0304 	and.w	r3, r3, #4
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d005      	beq.n	8007ac8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007abc:	4b59      	ldr	r3, [pc, #356]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	4a58      	ldr	r2, [pc, #352]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007ac2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007ac6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0308 	and.w	r3, r3, #8
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d005      	beq.n	8007ae0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ad4:	4b53      	ldr	r3, [pc, #332]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	4a52      	ldr	r2, [pc, #328]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007ada:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007ade:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ae0:	4b50      	ldr	r3, [pc, #320]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	494d      	ldr	r1, [pc, #308]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d044      	beq.n	8007b88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d107      	bne.n	8007b16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b06:	4b47      	ldr	r3, [pc, #284]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d119      	bne.n	8007b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e07f      	b.n	8007c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d003      	beq.n	8007b26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b22:	2b03      	cmp	r3, #3
 8007b24:	d107      	bne.n	8007b36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b26:	4b3f      	ldr	r3, [pc, #252]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d109      	bne.n	8007b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e06f      	b.n	8007c16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b36:	4b3b      	ldr	r3, [pc, #236]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 0302 	and.w	r3, r3, #2
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e067      	b.n	8007c16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b46:	4b37      	ldr	r3, [pc, #220]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f023 0203 	bic.w	r2, r3, #3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	4934      	ldr	r1, [pc, #208]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007b54:	4313      	orrs	r3, r2
 8007b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b58:	f7fb fea0 	bl	800389c <HAL_GetTick>
 8007b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b5e:	e00a      	b.n	8007b76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b60:	f7fb fe9c 	bl	800389c <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d901      	bls.n	8007b76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	e04f      	b.n	8007c16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b76:	4b2b      	ldr	r3, [pc, #172]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f003 020c 	and.w	r2, r3, #12
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d1eb      	bne.n	8007b60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b88:	4b25      	ldr	r3, [pc, #148]	; (8007c20 <HAL_RCC_ClockConfig+0x1b8>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 0307 	and.w	r3, r3, #7
 8007b90:	683a      	ldr	r2, [r7, #0]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d20c      	bcs.n	8007bb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b96:	4b22      	ldr	r3, [pc, #136]	; (8007c20 <HAL_RCC_ClockConfig+0x1b8>)
 8007b98:	683a      	ldr	r2, [r7, #0]
 8007b9a:	b2d2      	uxtb	r2, r2
 8007b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b9e:	4b20      	ldr	r3, [pc, #128]	; (8007c20 <HAL_RCC_ClockConfig+0x1b8>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 0307 	and.w	r3, r3, #7
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d001      	beq.n	8007bb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e032      	b.n	8007c16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 0304 	and.w	r3, r3, #4
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d008      	beq.n	8007bce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bbc:	4b19      	ldr	r3, [pc, #100]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	4916      	ldr	r1, [pc, #88]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0308 	and.w	r3, r3, #8
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d009      	beq.n	8007bee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007bda:	4b12      	ldr	r3, [pc, #72]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	00db      	lsls	r3, r3, #3
 8007be8:	490e      	ldr	r1, [pc, #56]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007bea:	4313      	orrs	r3, r2
 8007bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007bee:	f000 f821 	bl	8007c34 <HAL_RCC_GetSysClockFreq>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	4b0b      	ldr	r3, [pc, #44]	; (8007c24 <HAL_RCC_ClockConfig+0x1bc>)
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	091b      	lsrs	r3, r3, #4
 8007bfa:	f003 030f 	and.w	r3, r3, #15
 8007bfe:	490a      	ldr	r1, [pc, #40]	; (8007c28 <HAL_RCC_ClockConfig+0x1c0>)
 8007c00:	5ccb      	ldrb	r3, [r1, r3]
 8007c02:	fa22 f303 	lsr.w	r3, r2, r3
 8007c06:	4a09      	ldr	r2, [pc, #36]	; (8007c2c <HAL_RCC_ClockConfig+0x1c4>)
 8007c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007c0a:	4b09      	ldr	r3, [pc, #36]	; (8007c30 <HAL_RCC_ClockConfig+0x1c8>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fb fe00 	bl	8003814 <HAL_InitTick>

  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	40023c00 	.word	0x40023c00
 8007c24:	40023800 	.word	0x40023800
 8007c28:	0800cf84 	.word	0x0800cf84
 8007c2c:	20000004 	.word	0x20000004
 8007c30:	2000014c 	.word	0x2000014c

08007c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007c38:	b084      	sub	sp, #16
 8007c3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	607b      	str	r3, [r7, #4]
 8007c40:	2300      	movs	r3, #0
 8007c42:	60fb      	str	r3, [r7, #12]
 8007c44:	2300      	movs	r3, #0
 8007c46:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c4c:	4b67      	ldr	r3, [pc, #412]	; (8007dec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	f003 030c 	and.w	r3, r3, #12
 8007c54:	2b08      	cmp	r3, #8
 8007c56:	d00d      	beq.n	8007c74 <HAL_RCC_GetSysClockFreq+0x40>
 8007c58:	2b08      	cmp	r3, #8
 8007c5a:	f200 80bd 	bhi.w	8007dd8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d002      	beq.n	8007c68 <HAL_RCC_GetSysClockFreq+0x34>
 8007c62:	2b04      	cmp	r3, #4
 8007c64:	d003      	beq.n	8007c6e <HAL_RCC_GetSysClockFreq+0x3a>
 8007c66:	e0b7      	b.n	8007dd8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c68:	4b61      	ldr	r3, [pc, #388]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007c6a:	60bb      	str	r3, [r7, #8]
       break;
 8007c6c:	e0b7      	b.n	8007dde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c6e:	4b61      	ldr	r3, [pc, #388]	; (8007df4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007c70:	60bb      	str	r3, [r7, #8]
      break;
 8007c72:	e0b4      	b.n	8007dde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c74:	4b5d      	ldr	r3, [pc, #372]	; (8007dec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c7c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c7e:	4b5b      	ldr	r3, [pc, #364]	; (8007dec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d04d      	beq.n	8007d26 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c8a:	4b58      	ldr	r3, [pc, #352]	; (8007dec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	099b      	lsrs	r3, r3, #6
 8007c90:	461a      	mov	r2, r3
 8007c92:	f04f 0300 	mov.w	r3, #0
 8007c96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007c9a:	f04f 0100 	mov.w	r1, #0
 8007c9e:	ea02 0800 	and.w	r8, r2, r0
 8007ca2:	ea03 0901 	and.w	r9, r3, r1
 8007ca6:	4640      	mov	r0, r8
 8007ca8:	4649      	mov	r1, r9
 8007caa:	f04f 0200 	mov.w	r2, #0
 8007cae:	f04f 0300 	mov.w	r3, #0
 8007cb2:	014b      	lsls	r3, r1, #5
 8007cb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007cb8:	0142      	lsls	r2, r0, #5
 8007cba:	4610      	mov	r0, r2
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	ebb0 0008 	subs.w	r0, r0, r8
 8007cc2:	eb61 0109 	sbc.w	r1, r1, r9
 8007cc6:	f04f 0200 	mov.w	r2, #0
 8007cca:	f04f 0300 	mov.w	r3, #0
 8007cce:	018b      	lsls	r3, r1, #6
 8007cd0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007cd4:	0182      	lsls	r2, r0, #6
 8007cd6:	1a12      	subs	r2, r2, r0
 8007cd8:	eb63 0301 	sbc.w	r3, r3, r1
 8007cdc:	f04f 0000 	mov.w	r0, #0
 8007ce0:	f04f 0100 	mov.w	r1, #0
 8007ce4:	00d9      	lsls	r1, r3, #3
 8007ce6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007cea:	00d0      	lsls	r0, r2, #3
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	eb12 0208 	adds.w	r2, r2, r8
 8007cf4:	eb43 0309 	adc.w	r3, r3, r9
 8007cf8:	f04f 0000 	mov.w	r0, #0
 8007cfc:	f04f 0100 	mov.w	r1, #0
 8007d00:	0259      	lsls	r1, r3, #9
 8007d02:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007d06:	0250      	lsls	r0, r2, #9
 8007d08:	4602      	mov	r2, r0
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	4619      	mov	r1, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	461a      	mov	r2, r3
 8007d14:	f04f 0300 	mov.w	r3, #0
 8007d18:	f7f8 fa56 	bl	80001c8 <__aeabi_uldivmod>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	460b      	mov	r3, r1
 8007d20:	4613      	mov	r3, r2
 8007d22:	60fb      	str	r3, [r7, #12]
 8007d24:	e04a      	b.n	8007dbc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d26:	4b31      	ldr	r3, [pc, #196]	; (8007dec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	099b      	lsrs	r3, r3, #6
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	f04f 0300 	mov.w	r3, #0
 8007d32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007d36:	f04f 0100 	mov.w	r1, #0
 8007d3a:	ea02 0400 	and.w	r4, r2, r0
 8007d3e:	ea03 0501 	and.w	r5, r3, r1
 8007d42:	4620      	mov	r0, r4
 8007d44:	4629      	mov	r1, r5
 8007d46:	f04f 0200 	mov.w	r2, #0
 8007d4a:	f04f 0300 	mov.w	r3, #0
 8007d4e:	014b      	lsls	r3, r1, #5
 8007d50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007d54:	0142      	lsls	r2, r0, #5
 8007d56:	4610      	mov	r0, r2
 8007d58:	4619      	mov	r1, r3
 8007d5a:	1b00      	subs	r0, r0, r4
 8007d5c:	eb61 0105 	sbc.w	r1, r1, r5
 8007d60:	f04f 0200 	mov.w	r2, #0
 8007d64:	f04f 0300 	mov.w	r3, #0
 8007d68:	018b      	lsls	r3, r1, #6
 8007d6a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007d6e:	0182      	lsls	r2, r0, #6
 8007d70:	1a12      	subs	r2, r2, r0
 8007d72:	eb63 0301 	sbc.w	r3, r3, r1
 8007d76:	f04f 0000 	mov.w	r0, #0
 8007d7a:	f04f 0100 	mov.w	r1, #0
 8007d7e:	00d9      	lsls	r1, r3, #3
 8007d80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d84:	00d0      	lsls	r0, r2, #3
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	1912      	adds	r2, r2, r4
 8007d8c:	eb45 0303 	adc.w	r3, r5, r3
 8007d90:	f04f 0000 	mov.w	r0, #0
 8007d94:	f04f 0100 	mov.w	r1, #0
 8007d98:	0299      	lsls	r1, r3, #10
 8007d9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007d9e:	0290      	lsls	r0, r2, #10
 8007da0:	4602      	mov	r2, r0
 8007da2:	460b      	mov	r3, r1
 8007da4:	4610      	mov	r0, r2
 8007da6:	4619      	mov	r1, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	461a      	mov	r2, r3
 8007dac:	f04f 0300 	mov.w	r3, #0
 8007db0:	f7f8 fa0a 	bl	80001c8 <__aeabi_uldivmod>
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	4613      	mov	r3, r2
 8007dba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007dbc:	4b0b      	ldr	r3, [pc, #44]	; (8007dec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	0c1b      	lsrs	r3, r3, #16
 8007dc2:	f003 0303 	and.w	r3, r3, #3
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	005b      	lsls	r3, r3, #1
 8007dca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dd4:	60bb      	str	r3, [r7, #8]
      break;
 8007dd6:	e002      	b.n	8007dde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007dd8:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007dda:	60bb      	str	r3, [r7, #8]
      break;
 8007ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007dde:	68bb      	ldr	r3, [r7, #8]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007dea:	bf00      	nop
 8007dec:	40023800 	.word	0x40023800
 8007df0:	00f42400 	.word	0x00f42400
 8007df4:	007a1200 	.word	0x007a1200

08007df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007dfc:	4b03      	ldr	r3, [pc, #12]	; (8007e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	20000004 	.word	0x20000004

08007e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007e14:	f7ff fff0 	bl	8007df8 <HAL_RCC_GetHCLKFreq>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	4b05      	ldr	r3, [pc, #20]	; (8007e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	0a9b      	lsrs	r3, r3, #10
 8007e20:	f003 0307 	and.w	r3, r3, #7
 8007e24:	4903      	ldr	r1, [pc, #12]	; (8007e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e26:	5ccb      	ldrb	r3, [r1, r3]
 8007e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	40023800 	.word	0x40023800
 8007e34:	0800cf94 	.word	0x0800cf94

08007e38 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b086      	sub	sp, #24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007e44:	2300      	movs	r3, #0
 8007e46:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 0301 	and.w	r3, r3, #1
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d105      	bne.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d035      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007e60:	4b62      	ldr	r3, [pc, #392]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007e62:	2200      	movs	r2, #0
 8007e64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007e66:	f7fb fd19 	bl	800389c <HAL_GetTick>
 8007e6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e6c:	e008      	b.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007e6e:	f7fb fd15 	bl	800389c <HAL_GetTick>
 8007e72:	4602      	mov	r2, r0
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d901      	bls.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	e0b0      	b.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e80:	4b5b      	ldr	r3, [pc, #364]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1f0      	bne.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	019a      	lsls	r2, r3, #6
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	071b      	lsls	r3, r3, #28
 8007e98:	4955      	ldr	r1, [pc, #340]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007ea0:	4b52      	ldr	r3, [pc, #328]	; (8007fec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007ea6:	f7fb fcf9 	bl	800389c <HAL_GetTick>
 8007eaa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007eac:	e008      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007eae:	f7fb fcf5 	bl	800389c <HAL_GetTick>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d901      	bls.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ebc:	2303      	movs	r3, #3
 8007ebe:	e090      	b.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ec0:	4b4b      	ldr	r3, [pc, #300]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d0f0      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 0302 	and.w	r3, r3, #2
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f000 8083 	beq.w	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007eda:	2300      	movs	r3, #0
 8007edc:	60fb      	str	r3, [r7, #12]
 8007ede:	4b44      	ldr	r3, [pc, #272]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee2:	4a43      	ldr	r2, [pc, #268]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8007eea:	4b41      	ldr	r3, [pc, #260]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007ef6:	4b3f      	ldr	r3, [pc, #252]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a3e      	ldr	r2, [pc, #248]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f00:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007f02:	f7fb fccb 	bl	800389c <HAL_GetTick>
 8007f06:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007f08:	e008      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007f0a:	f7fb fcc7 	bl	800389c <HAL_GetTick>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d901      	bls.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e062      	b.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007f1c:	4b35      	ldr	r3, [pc, #212]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d0f0      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007f28:	4b31      	ldr	r3, [pc, #196]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f30:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d02f      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d028      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f46:	4b2a      	ldr	r3, [pc, #168]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f4e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007f50:	4b29      	ldr	r3, [pc, #164]	; (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007f52:	2201      	movs	r2, #1
 8007f54:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007f56:	4b28      	ldr	r3, [pc, #160]	; (8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007f5c:	4a24      	ldr	r2, [pc, #144]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007f62:	4b23      	ldr	r3, [pc, #140]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f66:	f003 0301 	and.w	r3, r3, #1
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d114      	bne.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007f6e:	f7fb fc95 	bl	800389c <HAL_GetTick>
 8007f72:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f74:	e00a      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f76:	f7fb fc91 	bl	800389c <HAL_GetTick>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d901      	bls.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	e02a      	b.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f8c:	4b18      	ldr	r3, [pc, #96]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f90:	f003 0302 	and.w	r3, r3, #2
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d0ee      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fa4:	d10d      	bne.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007fa6:	4b12      	ldr	r3, [pc, #72]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fba:	490d      	ldr	r1, [pc, #52]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	608b      	str	r3, [r1, #8]
 8007fc0:	e005      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007fc2:	4b0b      	ldr	r3, [pc, #44]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	4a0a      	ldr	r2, [pc, #40]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007fc8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007fcc:	6093      	str	r3, [r2, #8]
 8007fce:	4b08      	ldr	r3, [pc, #32]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007fd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fda:	4905      	ldr	r1, [pc, #20]	; (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3718      	adds	r7, #24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	42470068 	.word	0x42470068
 8007ff0:	40023800 	.word	0x40023800
 8007ff4:	40007000 	.word	0x40007000
 8007ff8:	42470e40 	.word	0x42470e40

08007ffc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008004:	2300      	movs	r3, #0
 8008006:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008008:	2300      	movs	r3, #0
 800800a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800800c:	2300      	movs	r3, #0
 800800e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008010:	2300      	movs	r3, #0
 8008012:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2b01      	cmp	r3, #1
 8008018:	d13e      	bne.n	8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800801a:	4b23      	ldr	r3, [pc, #140]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d005      	beq.n	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d12f      	bne.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008030:	4b1e      	ldr	r3, [pc, #120]	; (80080ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008032:	617b      	str	r3, [r7, #20]
          break;
 8008034:	e02f      	b.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008036:	4b1c      	ldr	r3, [pc, #112]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800803e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008042:	d108      	bne.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008044:	4b18      	ldr	r3, [pc, #96]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800804c:	4a18      	ldr	r2, [pc, #96]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800804e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008052:	613b      	str	r3, [r7, #16]
 8008054:	e007      	b.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008056:	4b14      	ldr	r3, [pc, #80]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800805e:	4a15      	ldr	r2, [pc, #84]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008060:	fbb2 f3f3 	udiv	r3, r2, r3
 8008064:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008066:	4b10      	ldr	r3, [pc, #64]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800806c:	099b      	lsrs	r3, r3, #6
 800806e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	fb02 f303 	mul.w	r3, r2, r3
 8008078:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800807a:	4b0b      	ldr	r3, [pc, #44]	; (80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800807c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008080:	0f1b      	lsrs	r3, r3, #28
 8008082:	f003 0307 	and.w	r3, r3, #7
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	fbb2 f3f3 	udiv	r3, r2, r3
 800808c:	617b      	str	r3, [r7, #20]
          break;
 800808e:	e002      	b.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008090:	2300      	movs	r3, #0
 8008092:	617b      	str	r3, [r7, #20]
          break;
 8008094:	bf00      	nop
        }
      }
      break;
 8008096:	bf00      	nop
    }
  }
  return frequency;
 8008098:	697b      	ldr	r3, [r7, #20]
}
 800809a:	4618      	mov	r0, r3
 800809c:	371c      	adds	r7, #28
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	40023800 	.word	0x40023800
 80080ac:	00bb8000 	.word	0x00bb8000
 80080b0:	007a1200 	.word	0x007a1200
 80080b4:	00f42400 	.word	0x00f42400

080080b8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d101      	bne.n	80080ca <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e01c      	b.n	8008104 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	795b      	ldrb	r3, [r3, #5]
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d105      	bne.n	80080e0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7f9 f99a 	bl	8001414 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2202      	movs	r2, #2
 80080e4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f042 0204 	orr.w	r2, r2, #4
 80080f4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2201      	movs	r2, #1
 80080fa:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008116:	2300      	movs	r3, #0
 8008118:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	791b      	ldrb	r3, [r3, #4]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d101      	bne.n	8008126 <HAL_RNG_GenerateRandomNumber+0x1a>
 8008122:	2302      	movs	r3, #2
 8008124:	e03d      	b.n	80081a2 <HAL_RNG_GenerateRandomNumber+0x96>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	795b      	ldrb	r3, [r3, #5]
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b01      	cmp	r3, #1
 8008134:	d12c      	bne.n	8008190 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2202      	movs	r2, #2
 800813a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800813c:	f7fb fbae 	bl	800389c <HAL_GetTick>
 8008140:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008142:	e011      	b.n	8008168 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008144:	f7fb fbaa 	bl	800389c <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	2b02      	cmp	r3, #2
 8008150:	d90a      	bls.n	8008168 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2201      	movs	r2, #1
 8008156:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2202      	movs	r2, #2
 800815c:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e01c      	b.n	80081a2 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	2b01      	cmp	r3, #1
 8008174:	d1e6      	bne.n	8008144 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	689a      	ldr	r2, [r3, #8]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	68da      	ldr	r2, [r3, #12]
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	715a      	strb	r2, [r3, #5]
 800818e:	e004      	b.n	800819a <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2204      	movs	r2, #4
 8008194:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	711a      	strb	r2, [r3, #4]

  return status;
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b082      	sub	sp, #8
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	330c      	adds	r3, #12
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7ff ffa7 	bl	800810c <HAL_RNG_GenerateRandomNumber>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d102      	bne.n	80081ca <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	e000      	b.n	80081cc <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 80081ca:	2300      	movs	r3, #0
  }
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d101      	bne.n	80081e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e07b      	b.n	80082de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d108      	bne.n	8008200 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081f6:	d009      	beq.n	800820c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	61da      	str	r2, [r3, #28]
 80081fe:	e005      	b.n	800820c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008218:	b2db      	uxtb	r3, r3
 800821a:	2b00      	cmp	r3, #0
 800821c:	d106      	bne.n	800822c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7f9 f916 	bl	8001458 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2202      	movs	r2, #2
 8008230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008242:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008254:	431a      	orrs	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800825e:	431a      	orrs	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	f003 0302 	and.w	r3, r3, #2
 8008268:	431a      	orrs	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	695b      	ldr	r3, [r3, #20]
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	431a      	orrs	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	699b      	ldr	r3, [r3, #24]
 8008278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800827c:	431a      	orrs	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008286:	431a      	orrs	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a1b      	ldr	r3, [r3, #32]
 800828c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008290:	ea42 0103 	orr.w	r1, r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008298:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	430a      	orrs	r2, r1
 80082a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	0c1b      	lsrs	r3, r3, #16
 80082aa:	f003 0104 	and.w	r1, r3, #4
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b2:	f003 0210 	and.w	r2, r3, #16
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	430a      	orrs	r2, r1
 80082bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	69da      	ldr	r2, [r3, #28]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b088      	sub	sp, #32
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	60f8      	str	r0, [r7, #12]
 80082ee:	60b9      	str	r1, [r7, #8]
 80082f0:	603b      	str	r3, [r7, #0]
 80082f2:	4613      	mov	r3, r2
 80082f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008300:	2b01      	cmp	r3, #1
 8008302:	d101      	bne.n	8008308 <HAL_SPI_Transmit+0x22>
 8008304:	2302      	movs	r3, #2
 8008306:	e126      	b.n	8008556 <HAL_SPI_Transmit+0x270>
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008310:	f7fb fac4 	bl	800389c <HAL_GetTick>
 8008314:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008316:	88fb      	ldrh	r3, [r7, #6]
 8008318:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b01      	cmp	r3, #1
 8008324:	d002      	beq.n	800832c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008326:	2302      	movs	r3, #2
 8008328:	77fb      	strb	r3, [r7, #31]
    goto error;
 800832a:	e10b      	b.n	8008544 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d002      	beq.n	8008338 <HAL_SPI_Transmit+0x52>
 8008332:	88fb      	ldrh	r3, [r7, #6]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d102      	bne.n	800833e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800833c:	e102      	b.n	8008544 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2203      	movs	r2, #3
 8008342:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	88fa      	ldrh	r2, [r7, #6]
 8008356:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	88fa      	ldrh	r2, [r7, #6]
 800835c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2200      	movs	r2, #0
 8008362:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2200      	movs	r2, #0
 8008368:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008384:	d10f      	bne.n	80083a6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008394:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b0:	2b40      	cmp	r3, #64	; 0x40
 80083b2:	d007      	beq.n	80083c4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083cc:	d14b      	bne.n	8008466 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d002      	beq.n	80083dc <HAL_SPI_Transmit+0xf6>
 80083d6:	8afb      	ldrh	r3, [r7, #22]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d13e      	bne.n	800845a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e0:	881a      	ldrh	r2, [r3, #0]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ec:	1c9a      	adds	r2, r3, #2
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	3b01      	subs	r3, #1
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008400:	e02b      	b.n	800845a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f003 0302 	and.w	r3, r3, #2
 800840c:	2b02      	cmp	r3, #2
 800840e:	d112      	bne.n	8008436 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008414:	881a      	ldrh	r2, [r3, #0]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008420:	1c9a      	adds	r2, r3, #2
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800842a:	b29b      	uxth	r3, r3
 800842c:	3b01      	subs	r3, #1
 800842e:	b29a      	uxth	r2, r3
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	86da      	strh	r2, [r3, #54]	; 0x36
 8008434:	e011      	b.n	800845a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008436:	f7fb fa31 	bl	800389c <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	69bb      	ldr	r3, [r7, #24]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	429a      	cmp	r2, r3
 8008444:	d803      	bhi.n	800844e <HAL_SPI_Transmit+0x168>
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800844c:	d102      	bne.n	8008454 <HAL_SPI_Transmit+0x16e>
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d102      	bne.n	800845a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008454:	2303      	movs	r3, #3
 8008456:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008458:	e074      	b.n	8008544 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800845e:	b29b      	uxth	r3, r3
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1ce      	bne.n	8008402 <HAL_SPI_Transmit+0x11c>
 8008464:	e04c      	b.n	8008500 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d002      	beq.n	8008474 <HAL_SPI_Transmit+0x18e>
 800846e:	8afb      	ldrh	r3, [r7, #22]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d140      	bne.n	80084f6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	330c      	adds	r3, #12
 800847e:	7812      	ldrb	r2, [r2, #0]
 8008480:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008486:	1c5a      	adds	r2, r3, #1
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008490:	b29b      	uxth	r3, r3
 8008492:	3b01      	subs	r3, #1
 8008494:	b29a      	uxth	r2, r3
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800849a:	e02c      	b.n	80084f6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f003 0302 	and.w	r3, r3, #2
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d113      	bne.n	80084d2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	330c      	adds	r3, #12
 80084b4:	7812      	ldrb	r2, [r2, #0]
 80084b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084bc:	1c5a      	adds	r2, r3, #1
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	3b01      	subs	r3, #1
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80084d0:	e011      	b.n	80084f6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084d2:	f7fb f9e3 	bl	800389c <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	683a      	ldr	r2, [r7, #0]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d803      	bhi.n	80084ea <HAL_SPI_Transmit+0x204>
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084e8:	d102      	bne.n	80084f0 <HAL_SPI_Transmit+0x20a>
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d102      	bne.n	80084f6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80084f0:	2303      	movs	r3, #3
 80084f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80084f4:	e026      	b.n	8008544 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1cd      	bne.n	800849c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008500:	69ba      	ldr	r2, [r7, #24]
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f000 f8b3 	bl	8008670 <SPI_EndRxTxTransaction>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2220      	movs	r2, #32
 8008514:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10a      	bne.n	8008534 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800851e:	2300      	movs	r3, #0
 8008520:	613b      	str	r3, [r7, #16]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	613b      	str	r3, [r7, #16]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	613b      	str	r3, [r7, #16]
 8008532:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008538:	2b00      	cmp	r3, #0
 800853a:	d002      	beq.n	8008542 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	77fb      	strb	r3, [r7, #31]
 8008540:	e000      	b.n	8008544 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008542:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008554:	7ffb      	ldrb	r3, [r7, #31]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3720      	adds	r7, #32
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
	...

08008560 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b088      	sub	sp, #32
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	603b      	str	r3, [r7, #0]
 800856c:	4613      	mov	r3, r2
 800856e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008570:	f7fb f994 	bl	800389c <HAL_GetTick>
 8008574:	4602      	mov	r2, r0
 8008576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008578:	1a9b      	subs	r3, r3, r2
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	4413      	add	r3, r2
 800857e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008580:	f7fb f98c 	bl	800389c <HAL_GetTick>
 8008584:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008586:	4b39      	ldr	r3, [pc, #228]	; (800866c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	015b      	lsls	r3, r3, #5
 800858c:	0d1b      	lsrs	r3, r3, #20
 800858e:	69fa      	ldr	r2, [r7, #28]
 8008590:	fb02 f303 	mul.w	r3, r2, r3
 8008594:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008596:	e054      	b.n	8008642 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800859e:	d050      	beq.n	8008642 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80085a0:	f7fb f97c 	bl	800389c <HAL_GetTick>
 80085a4:	4602      	mov	r2, r0
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	69fa      	ldr	r2, [r7, #28]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d902      	bls.n	80085b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d13d      	bne.n	8008632 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80085c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085ce:	d111      	bne.n	80085f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085d8:	d004      	beq.n	80085e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085e2:	d107      	bne.n	80085f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085fc:	d10f      	bne.n	800861e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800860c:	601a      	str	r2, [r3, #0]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800861c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800862e:	2303      	movs	r3, #3
 8008630:	e017      	b.n	8008662 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d101      	bne.n	800863c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008638:	2300      	movs	r3, #0
 800863a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	3b01      	subs	r3, #1
 8008640:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	689a      	ldr	r2, [r3, #8]
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	4013      	ands	r3, r2
 800864c:	68ba      	ldr	r2, [r7, #8]
 800864e:	429a      	cmp	r2, r3
 8008650:	bf0c      	ite	eq
 8008652:	2301      	moveq	r3, #1
 8008654:	2300      	movne	r3, #0
 8008656:	b2db      	uxtb	r3, r3
 8008658:	461a      	mov	r2, r3
 800865a:	79fb      	ldrb	r3, [r7, #7]
 800865c:	429a      	cmp	r2, r3
 800865e:	d19b      	bne.n	8008598 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3720      	adds	r7, #32
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	20000004 	.word	0x20000004

08008670 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b088      	sub	sp, #32
 8008674:	af02      	add	r7, sp, #8
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800867c:	4b1b      	ldr	r3, [pc, #108]	; (80086ec <SPI_EndRxTxTransaction+0x7c>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a1b      	ldr	r2, [pc, #108]	; (80086f0 <SPI_EndRxTxTransaction+0x80>)
 8008682:	fba2 2303 	umull	r2, r3, r2, r3
 8008686:	0d5b      	lsrs	r3, r3, #21
 8008688:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800868c:	fb02 f303 	mul.w	r3, r2, r3
 8008690:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800869a:	d112      	bne.n	80086c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	2200      	movs	r2, #0
 80086a4:	2180      	movs	r1, #128	; 0x80
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f7ff ff5a 	bl	8008560 <SPI_WaitFlagStateUntilTimeout>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d016      	beq.n	80086e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086b6:	f043 0220 	orr.w	r2, r3, #32
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80086be:	2303      	movs	r3, #3
 80086c0:	e00f      	b.n	80086e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00a      	beq.n	80086de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	3b01      	subs	r3, #1
 80086cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086d8:	2b80      	cmp	r3, #128	; 0x80
 80086da:	d0f2      	beq.n	80086c2 <SPI_EndRxTxTransaction+0x52>
 80086dc:	e000      	b.n	80086e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80086de:	bf00      	nop
  }

  return HAL_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3718      	adds	r7, #24
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	20000004 	.word	0x20000004
 80086f0:	165e9f81 	.word	0x165e9f81

080086f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d101      	bne.n	8008706 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	e041      	b.n	800878a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800870c:	b2db      	uxtb	r3, r3
 800870e:	2b00      	cmp	r3, #0
 8008710:	d106      	bne.n	8008720 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f7f8 ff82 	bl	8001624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2202      	movs	r2, #2
 8008724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	3304      	adds	r3, #4
 8008730:	4619      	mov	r1, r3
 8008732:	4610      	mov	r0, r2
 8008734:	f000 fd68 	bl	8009208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
	...

08008794 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d001      	beq.n	80087ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	e04e      	b.n	800884a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2202      	movs	r2, #2
 80087b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68da      	ldr	r2, [r3, #12]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f042 0201 	orr.w	r2, r2, #1
 80087c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a23      	ldr	r2, [pc, #140]	; (8008858 <HAL_TIM_Base_Start_IT+0xc4>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d022      	beq.n	8008814 <HAL_TIM_Base_Start_IT+0x80>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087d6:	d01d      	beq.n	8008814 <HAL_TIM_Base_Start_IT+0x80>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a1f      	ldr	r2, [pc, #124]	; (800885c <HAL_TIM_Base_Start_IT+0xc8>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d018      	beq.n	8008814 <HAL_TIM_Base_Start_IT+0x80>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a1e      	ldr	r2, [pc, #120]	; (8008860 <HAL_TIM_Base_Start_IT+0xcc>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d013      	beq.n	8008814 <HAL_TIM_Base_Start_IT+0x80>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a1c      	ldr	r2, [pc, #112]	; (8008864 <HAL_TIM_Base_Start_IT+0xd0>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d00e      	beq.n	8008814 <HAL_TIM_Base_Start_IT+0x80>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a1b      	ldr	r2, [pc, #108]	; (8008868 <HAL_TIM_Base_Start_IT+0xd4>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d009      	beq.n	8008814 <HAL_TIM_Base_Start_IT+0x80>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a19      	ldr	r2, [pc, #100]	; (800886c <HAL_TIM_Base_Start_IT+0xd8>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d004      	beq.n	8008814 <HAL_TIM_Base_Start_IT+0x80>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a18      	ldr	r2, [pc, #96]	; (8008870 <HAL_TIM_Base_Start_IT+0xdc>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d111      	bne.n	8008838 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	f003 0307 	and.w	r3, r3, #7
 800881e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2b06      	cmp	r3, #6
 8008824:	d010      	beq.n	8008848 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f042 0201 	orr.w	r2, r2, #1
 8008834:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008836:	e007      	b.n	8008848 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f042 0201 	orr.w	r2, r2, #1
 8008846:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3714      	adds	r7, #20
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop
 8008858:	40010000 	.word	0x40010000
 800885c:	40000400 	.word	0x40000400
 8008860:	40000800 	.word	0x40000800
 8008864:	40000c00 	.word	0x40000c00
 8008868:	40010400 	.word	0x40010400
 800886c:	40014000 	.word	0x40014000
 8008870:	40001800 	.word	0x40001800

08008874 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d109      	bne.n	8008898 <HAL_TIM_OC_Start_IT+0x24>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800888a:	b2db      	uxtb	r3, r3
 800888c:	2b01      	cmp	r3, #1
 800888e:	bf14      	ite	ne
 8008890:	2301      	movne	r3, #1
 8008892:	2300      	moveq	r3, #0
 8008894:	b2db      	uxtb	r3, r3
 8008896:	e022      	b.n	80088de <HAL_TIM_OC_Start_IT+0x6a>
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	2b04      	cmp	r3, #4
 800889c:	d109      	bne.n	80088b2 <HAL_TIM_OC_Start_IT+0x3e>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	bf14      	ite	ne
 80088aa:	2301      	movne	r3, #1
 80088ac:	2300      	moveq	r3, #0
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	e015      	b.n	80088de <HAL_TIM_OC_Start_IT+0x6a>
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	2b08      	cmp	r3, #8
 80088b6:	d109      	bne.n	80088cc <HAL_TIM_OC_Start_IT+0x58>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	bf14      	ite	ne
 80088c4:	2301      	movne	r3, #1
 80088c6:	2300      	moveq	r3, #0
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	e008      	b.n	80088de <HAL_TIM_OC_Start_IT+0x6a>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	bf14      	ite	ne
 80088d8:	2301      	movne	r3, #1
 80088da:	2300      	moveq	r3, #0
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d001      	beq.n	80088e6 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e0c2      	b.n	8008a6c <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d104      	bne.n	80088f6 <HAL_TIM_OC_Start_IT+0x82>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2202      	movs	r2, #2
 80088f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088f4:	e013      	b.n	800891e <HAL_TIM_OC_Start_IT+0xaa>
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	2b04      	cmp	r3, #4
 80088fa:	d104      	bne.n	8008906 <HAL_TIM_OC_Start_IT+0x92>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2202      	movs	r2, #2
 8008900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008904:	e00b      	b.n	800891e <HAL_TIM_OC_Start_IT+0xaa>
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	2b08      	cmp	r3, #8
 800890a:	d104      	bne.n	8008916 <HAL_TIM_OC_Start_IT+0xa2>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2202      	movs	r2, #2
 8008910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008914:	e003      	b.n	800891e <HAL_TIM_OC_Start_IT+0xaa>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2202      	movs	r2, #2
 800891a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	2b0c      	cmp	r3, #12
 8008922:	d841      	bhi.n	80089a8 <HAL_TIM_OC_Start_IT+0x134>
 8008924:	a201      	add	r2, pc, #4	; (adr r2, 800892c <HAL_TIM_OC_Start_IT+0xb8>)
 8008926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800892a:	bf00      	nop
 800892c:	08008961 	.word	0x08008961
 8008930:	080089a9 	.word	0x080089a9
 8008934:	080089a9 	.word	0x080089a9
 8008938:	080089a9 	.word	0x080089a9
 800893c:	08008973 	.word	0x08008973
 8008940:	080089a9 	.word	0x080089a9
 8008944:	080089a9 	.word	0x080089a9
 8008948:	080089a9 	.word	0x080089a9
 800894c:	08008985 	.word	0x08008985
 8008950:	080089a9 	.word	0x080089a9
 8008954:	080089a9 	.word	0x080089a9
 8008958:	080089a9 	.word	0x080089a9
 800895c:	08008997 	.word	0x08008997
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68da      	ldr	r2, [r3, #12]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f042 0202 	orr.w	r2, r2, #2
 800896e:	60da      	str	r2, [r3, #12]
      break;
 8008970:	e01b      	b.n	80089aa <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	68da      	ldr	r2, [r3, #12]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f042 0204 	orr.w	r2, r2, #4
 8008980:	60da      	str	r2, [r3, #12]
      break;
 8008982:	e012      	b.n	80089aa <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68da      	ldr	r2, [r3, #12]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f042 0208 	orr.w	r2, r2, #8
 8008992:	60da      	str	r2, [r3, #12]
      break;
 8008994:	e009      	b.n	80089aa <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68da      	ldr	r2, [r3, #12]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f042 0210 	orr.w	r2, r2, #16
 80089a4:	60da      	str	r2, [r3, #12]
      break;
 80089a6:	e000      	b.n	80089aa <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 80089a8:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2201      	movs	r2, #1
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 ff12 	bl	80097dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a2d      	ldr	r2, [pc, #180]	; (8008a74 <HAL_TIM_OC_Start_IT+0x200>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d004      	beq.n	80089cc <HAL_TIM_OC_Start_IT+0x158>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a2c      	ldr	r2, [pc, #176]	; (8008a78 <HAL_TIM_OC_Start_IT+0x204>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d101      	bne.n	80089d0 <HAL_TIM_OC_Start_IT+0x15c>
 80089cc:	2301      	movs	r3, #1
 80089ce:	e000      	b.n	80089d2 <HAL_TIM_OC_Start_IT+0x15e>
 80089d0:	2300      	movs	r3, #0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d007      	beq.n	80089e6 <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a22      	ldr	r2, [pc, #136]	; (8008a74 <HAL_TIM_OC_Start_IT+0x200>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d022      	beq.n	8008a36 <HAL_TIM_OC_Start_IT+0x1c2>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089f8:	d01d      	beq.n	8008a36 <HAL_TIM_OC_Start_IT+0x1c2>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a1f      	ldr	r2, [pc, #124]	; (8008a7c <HAL_TIM_OC_Start_IT+0x208>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d018      	beq.n	8008a36 <HAL_TIM_OC_Start_IT+0x1c2>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a1d      	ldr	r2, [pc, #116]	; (8008a80 <HAL_TIM_OC_Start_IT+0x20c>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d013      	beq.n	8008a36 <HAL_TIM_OC_Start_IT+0x1c2>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a1c      	ldr	r2, [pc, #112]	; (8008a84 <HAL_TIM_OC_Start_IT+0x210>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d00e      	beq.n	8008a36 <HAL_TIM_OC_Start_IT+0x1c2>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a16      	ldr	r2, [pc, #88]	; (8008a78 <HAL_TIM_OC_Start_IT+0x204>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d009      	beq.n	8008a36 <HAL_TIM_OC_Start_IT+0x1c2>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a18      	ldr	r2, [pc, #96]	; (8008a88 <HAL_TIM_OC_Start_IT+0x214>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d004      	beq.n	8008a36 <HAL_TIM_OC_Start_IT+0x1c2>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a16      	ldr	r2, [pc, #88]	; (8008a8c <HAL_TIM_OC_Start_IT+0x218>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d111      	bne.n	8008a5a <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	f003 0307 	and.w	r3, r3, #7
 8008a40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2b06      	cmp	r3, #6
 8008a46:	d010      	beq.n	8008a6a <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f042 0201 	orr.w	r2, r2, #1
 8008a56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a58:	e007      	b.n	8008a6a <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f042 0201 	orr.w	r2, r2, #1
 8008a68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	40010000 	.word	0x40010000
 8008a78:	40010400 	.word	0x40010400
 8008a7c:	40000400 	.word	0x40000400
 8008a80:	40000800 	.word	0x40000800
 8008a84:	40000c00 	.word	0x40000c00
 8008a88:	40014000 	.word	0x40014000
 8008a8c:	40001800 	.word	0x40001800

08008a90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d101      	bne.n	8008aa2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e041      	b.n	8008b26 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d106      	bne.n	8008abc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f839 	bl	8008b2e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2202      	movs	r2, #2
 8008ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	3304      	adds	r3, #4
 8008acc:	4619      	mov	r1, r3
 8008ace:	4610      	mov	r0, r2
 8008ad0:	f000 fb9a 	bl	8009208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008b2e:	b480      	push	{r7}
 8008b30:	b083      	sub	sp, #12
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008b36:	bf00      	nop
 8008b38:	370c      	adds	r7, #12
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr

08008b42 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b086      	sub	sp, #24
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d101      	bne.n	8008b56 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e097      	b.n	8008c86 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d106      	bne.n	8008b70 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f7f8 fd12 	bl	8001594 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2202      	movs	r2, #2
 8008b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	6812      	ldr	r2, [r2, #0]
 8008b82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b86:	f023 0307 	bic.w	r3, r3, #7
 8008b8a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	3304      	adds	r3, #4
 8008b94:	4619      	mov	r1, r3
 8008b96:	4610      	mov	r0, r2
 8008b98:	f000 fb36 	bl	8009208 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	699b      	ldr	r3, [r3, #24]
 8008baa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6a1b      	ldr	r3, [r3, #32]
 8008bb2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	697a      	ldr	r2, [r7, #20]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bc4:	f023 0303 	bic.w	r3, r3, #3
 8008bc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	689a      	ldr	r2, [r3, #8]
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	021b      	lsls	r3, r3, #8
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008be2:	f023 030c 	bic.w	r3, r3, #12
 8008be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008bee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	68da      	ldr	r2, [r3, #12]
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	69db      	ldr	r3, [r3, #28]
 8008bfc:	021b      	lsls	r3, r3, #8
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	693a      	ldr	r2, [r7, #16]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	011a      	lsls	r2, r3, #4
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	6a1b      	ldr	r3, [r3, #32]
 8008c10:	031b      	lsls	r3, r3, #12
 8008c12:	4313      	orrs	r3, r2
 8008c14:	693a      	ldr	r2, [r7, #16]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008c20:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008c28:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	685a      	ldr	r2, [r3, #4]
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	695b      	ldr	r3, [r3, #20]
 8008c32:	011b      	lsls	r3, r3, #4
 8008c34:	4313      	orrs	r3, r2
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	693a      	ldr	r2, [r7, #16]
 8008c4a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3718      	adds	r7, #24
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b082      	sub	sp, #8
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	f003 0302 	and.w	r3, r3, #2
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d122      	bne.n	8008cea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	f003 0302 	and.w	r3, r3, #2
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d11b      	bne.n	8008cea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f06f 0202 	mvn.w	r2, #2
 8008cba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	699b      	ldr	r3, [r3, #24]
 8008cc8:	f003 0303 	and.w	r3, r3, #3
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d003      	beq.n	8008cd8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fa7b 	bl	80091cc <HAL_TIM_IC_CaptureCallback>
 8008cd6:	e005      	b.n	8008ce4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fa6d 	bl	80091b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 fa7e 	bl	80091e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	f003 0304 	and.w	r3, r3, #4
 8008cf4:	2b04      	cmp	r3, #4
 8008cf6:	d122      	bne.n	8008d3e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	f003 0304 	and.w	r3, r3, #4
 8008d02:	2b04      	cmp	r3, #4
 8008d04:	d11b      	bne.n	8008d3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f06f 0204 	mvn.w	r2, #4
 8008d0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2202      	movs	r2, #2
 8008d14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	699b      	ldr	r3, [r3, #24]
 8008d1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d003      	beq.n	8008d2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 fa51 	bl	80091cc <HAL_TIM_IC_CaptureCallback>
 8008d2a:	e005      	b.n	8008d38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 fa43 	bl	80091b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fa54 	bl	80091e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	f003 0308 	and.w	r3, r3, #8
 8008d48:	2b08      	cmp	r3, #8
 8008d4a:	d122      	bne.n	8008d92 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	f003 0308 	and.w	r3, r3, #8
 8008d56:	2b08      	cmp	r3, #8
 8008d58:	d11b      	bne.n	8008d92 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f06f 0208 	mvn.w	r2, #8
 8008d62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2204      	movs	r2, #4
 8008d68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	69db      	ldr	r3, [r3, #28]
 8008d70:	f003 0303 	and.w	r3, r3, #3
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d003      	beq.n	8008d80 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fa27 	bl	80091cc <HAL_TIM_IC_CaptureCallback>
 8008d7e:	e005      	b.n	8008d8c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 fa19 	bl	80091b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fa2a 	bl	80091e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	f003 0310 	and.w	r3, r3, #16
 8008d9c:	2b10      	cmp	r3, #16
 8008d9e:	d122      	bne.n	8008de6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	f003 0310 	and.w	r3, r3, #16
 8008daa:	2b10      	cmp	r3, #16
 8008dac:	d11b      	bne.n	8008de6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f06f 0210 	mvn.w	r2, #16
 8008db6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2208      	movs	r2, #8
 8008dbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	69db      	ldr	r3, [r3, #28]
 8008dc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d003      	beq.n	8008dd4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 f9fd 	bl	80091cc <HAL_TIM_IC_CaptureCallback>
 8008dd2:	e005      	b.n	8008de0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f9ef 	bl	80091b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fa00 	bl	80091e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	f003 0301 	and.w	r3, r3, #1
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d10e      	bne.n	8008e12 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	f003 0301 	and.w	r3, r3, #1
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d107      	bne.n	8008e12 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f06f 0201 	mvn.w	r2, #1
 8008e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f9c9 	bl	80091a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e1c:	2b80      	cmp	r3, #128	; 0x80
 8008e1e:	d10e      	bne.n	8008e3e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e2a:	2b80      	cmp	r3, #128	; 0x80
 8008e2c:	d107      	bne.n	8008e3e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fd7b 	bl	8009934 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e48:	2b40      	cmp	r3, #64	; 0x40
 8008e4a:	d10e      	bne.n	8008e6a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e56:	2b40      	cmp	r3, #64	; 0x40
 8008e58:	d107      	bne.n	8008e6a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 f9c5 	bl	80091f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	691b      	ldr	r3, [r3, #16]
 8008e70:	f003 0320 	and.w	r3, r3, #32
 8008e74:	2b20      	cmp	r3, #32
 8008e76:	d10e      	bne.n	8008e96 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	f003 0320 	and.w	r3, r3, #32
 8008e82:	2b20      	cmp	r3, #32
 8008e84:	d107      	bne.n	8008e96 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f06f 0220 	mvn.w	r2, #32
 8008e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fd45 	bl	8009920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e96:	bf00      	nop
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
	...

08008ea0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d101      	bne.n	8008eba <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008eb6:	2302      	movs	r3, #2
 8008eb8:	e0ac      	b.n	8009014 <HAL_TIM_PWM_ConfigChannel+0x174>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2b0c      	cmp	r3, #12
 8008ec6:	f200 809f 	bhi.w	8009008 <HAL_TIM_PWM_ConfigChannel+0x168>
 8008eca:	a201      	add	r2, pc, #4	; (adr r2, 8008ed0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed0:	08008f05 	.word	0x08008f05
 8008ed4:	08009009 	.word	0x08009009
 8008ed8:	08009009 	.word	0x08009009
 8008edc:	08009009 	.word	0x08009009
 8008ee0:	08008f45 	.word	0x08008f45
 8008ee4:	08009009 	.word	0x08009009
 8008ee8:	08009009 	.word	0x08009009
 8008eec:	08009009 	.word	0x08009009
 8008ef0:	08008f87 	.word	0x08008f87
 8008ef4:	08009009 	.word	0x08009009
 8008ef8:	08009009 	.word	0x08009009
 8008efc:	08009009 	.word	0x08009009
 8008f00:	08008fc7 	.word	0x08008fc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68b9      	ldr	r1, [r7, #8]
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 fa1c 	bl	8009348 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	699a      	ldr	r2, [r3, #24]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f042 0208 	orr.w	r2, r2, #8
 8008f1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	699a      	ldr	r2, [r3, #24]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f022 0204 	bic.w	r2, r2, #4
 8008f2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	6999      	ldr	r1, [r3, #24]
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	691a      	ldr	r2, [r3, #16]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	430a      	orrs	r2, r1
 8008f40:	619a      	str	r2, [r3, #24]
      break;
 8008f42:	e062      	b.n	800900a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68b9      	ldr	r1, [r7, #8]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f000 fa6c 	bl	8009428 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	699a      	ldr	r2, [r3, #24]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	699a      	ldr	r2, [r3, #24]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	6999      	ldr	r1, [r3, #24]
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	021a      	lsls	r2, r3, #8
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	430a      	orrs	r2, r1
 8008f82:	619a      	str	r2, [r3, #24]
      break;
 8008f84:	e041      	b.n	800900a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68b9      	ldr	r1, [r7, #8]
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f000 fac1 	bl	8009514 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	69da      	ldr	r2, [r3, #28]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f042 0208 	orr.w	r2, r2, #8
 8008fa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	69da      	ldr	r2, [r3, #28]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f022 0204 	bic.w	r2, r2, #4
 8008fb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	69d9      	ldr	r1, [r3, #28]
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	691a      	ldr	r2, [r3, #16]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	430a      	orrs	r2, r1
 8008fc2:	61da      	str	r2, [r3, #28]
      break;
 8008fc4:	e021      	b.n	800900a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68b9      	ldr	r1, [r7, #8]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f000 fb15 	bl	80095fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	69da      	ldr	r2, [r3, #28]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	69da      	ldr	r2, [r3, #28]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	69d9      	ldr	r1, [r3, #28]
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	021a      	lsls	r2, r3, #8
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	430a      	orrs	r2, r1
 8009004:	61da      	str	r2, [r3, #28]
      break;
 8009006:	e000      	b.n	800900a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8009008:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800902c:	2b01      	cmp	r3, #1
 800902e:	d101      	bne.n	8009034 <HAL_TIM_ConfigClockSource+0x18>
 8009030:	2302      	movs	r3, #2
 8009032:	e0b3      	b.n	800919c <HAL_TIM_ConfigClockSource+0x180>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2202      	movs	r2, #2
 8009040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009052:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800905a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68fa      	ldr	r2, [r7, #12]
 8009062:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800906c:	d03e      	beq.n	80090ec <HAL_TIM_ConfigClockSource+0xd0>
 800906e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009072:	f200 8087 	bhi.w	8009184 <HAL_TIM_ConfigClockSource+0x168>
 8009076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800907a:	f000 8085 	beq.w	8009188 <HAL_TIM_ConfigClockSource+0x16c>
 800907e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009082:	d87f      	bhi.n	8009184 <HAL_TIM_ConfigClockSource+0x168>
 8009084:	2b70      	cmp	r3, #112	; 0x70
 8009086:	d01a      	beq.n	80090be <HAL_TIM_ConfigClockSource+0xa2>
 8009088:	2b70      	cmp	r3, #112	; 0x70
 800908a:	d87b      	bhi.n	8009184 <HAL_TIM_ConfigClockSource+0x168>
 800908c:	2b60      	cmp	r3, #96	; 0x60
 800908e:	d050      	beq.n	8009132 <HAL_TIM_ConfigClockSource+0x116>
 8009090:	2b60      	cmp	r3, #96	; 0x60
 8009092:	d877      	bhi.n	8009184 <HAL_TIM_ConfigClockSource+0x168>
 8009094:	2b50      	cmp	r3, #80	; 0x50
 8009096:	d03c      	beq.n	8009112 <HAL_TIM_ConfigClockSource+0xf6>
 8009098:	2b50      	cmp	r3, #80	; 0x50
 800909a:	d873      	bhi.n	8009184 <HAL_TIM_ConfigClockSource+0x168>
 800909c:	2b40      	cmp	r3, #64	; 0x40
 800909e:	d058      	beq.n	8009152 <HAL_TIM_ConfigClockSource+0x136>
 80090a0:	2b40      	cmp	r3, #64	; 0x40
 80090a2:	d86f      	bhi.n	8009184 <HAL_TIM_ConfigClockSource+0x168>
 80090a4:	2b30      	cmp	r3, #48	; 0x30
 80090a6:	d064      	beq.n	8009172 <HAL_TIM_ConfigClockSource+0x156>
 80090a8:	2b30      	cmp	r3, #48	; 0x30
 80090aa:	d86b      	bhi.n	8009184 <HAL_TIM_ConfigClockSource+0x168>
 80090ac:	2b20      	cmp	r3, #32
 80090ae:	d060      	beq.n	8009172 <HAL_TIM_ConfigClockSource+0x156>
 80090b0:	2b20      	cmp	r3, #32
 80090b2:	d867      	bhi.n	8009184 <HAL_TIM_ConfigClockSource+0x168>
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d05c      	beq.n	8009172 <HAL_TIM_ConfigClockSource+0x156>
 80090b8:	2b10      	cmp	r3, #16
 80090ba:	d05a      	beq.n	8009172 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80090bc:	e062      	b.n	8009184 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6818      	ldr	r0, [r3, #0]
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	6899      	ldr	r1, [r3, #8]
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	685a      	ldr	r2, [r3, #4]
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	f000 fb65 	bl	800979c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80090e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	609a      	str	r2, [r3, #8]
      break;
 80090ea:	e04e      	b.n	800918a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6818      	ldr	r0, [r3, #0]
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	6899      	ldr	r1, [r3, #8]
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	685a      	ldr	r2, [r3, #4]
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	f000 fb4e 	bl	800979c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	689a      	ldr	r2, [r3, #8]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800910e:	609a      	str	r2, [r3, #8]
      break;
 8009110:	e03b      	b.n	800918a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6818      	ldr	r0, [r3, #0]
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	6859      	ldr	r1, [r3, #4]
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	461a      	mov	r2, r3
 8009120:	f000 fac2 	bl	80096a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2150      	movs	r1, #80	; 0x50
 800912a:	4618      	mov	r0, r3
 800912c:	f000 fb1b 	bl	8009766 <TIM_ITRx_SetConfig>
      break;
 8009130:	e02b      	b.n	800918a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6818      	ldr	r0, [r3, #0]
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	6859      	ldr	r1, [r3, #4]
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	461a      	mov	r2, r3
 8009140:	f000 fae1 	bl	8009706 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2160      	movs	r1, #96	; 0x60
 800914a:	4618      	mov	r0, r3
 800914c:	f000 fb0b 	bl	8009766 <TIM_ITRx_SetConfig>
      break;
 8009150:	e01b      	b.n	800918a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6818      	ldr	r0, [r3, #0]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	6859      	ldr	r1, [r3, #4]
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	461a      	mov	r2, r3
 8009160:	f000 faa2 	bl	80096a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2140      	movs	r1, #64	; 0x40
 800916a:	4618      	mov	r0, r3
 800916c:	f000 fafb 	bl	8009766 <TIM_ITRx_SetConfig>
      break;
 8009170:	e00b      	b.n	800918a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4619      	mov	r1, r3
 800917c:	4610      	mov	r0, r2
 800917e:	f000 faf2 	bl	8009766 <TIM_ITRx_SetConfig>
        break;
 8009182:	e002      	b.n	800918a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009184:	bf00      	nop
 8009186:	e000      	b.n	800918a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009188:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2201      	movs	r2, #1
 800918e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091e8:	bf00      	nop
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091fc:	bf00      	nop
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a40      	ldr	r2, [pc, #256]	; (800931c <TIM_Base_SetConfig+0x114>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d013      	beq.n	8009248 <TIM_Base_SetConfig+0x40>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009226:	d00f      	beq.n	8009248 <TIM_Base_SetConfig+0x40>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4a3d      	ldr	r2, [pc, #244]	; (8009320 <TIM_Base_SetConfig+0x118>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d00b      	beq.n	8009248 <TIM_Base_SetConfig+0x40>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a3c      	ldr	r2, [pc, #240]	; (8009324 <TIM_Base_SetConfig+0x11c>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d007      	beq.n	8009248 <TIM_Base_SetConfig+0x40>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a3b      	ldr	r2, [pc, #236]	; (8009328 <TIM_Base_SetConfig+0x120>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d003      	beq.n	8009248 <TIM_Base_SetConfig+0x40>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4a3a      	ldr	r2, [pc, #232]	; (800932c <TIM_Base_SetConfig+0x124>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d108      	bne.n	800925a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800924e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	68fa      	ldr	r2, [r7, #12]
 8009256:	4313      	orrs	r3, r2
 8009258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a2f      	ldr	r2, [pc, #188]	; (800931c <TIM_Base_SetConfig+0x114>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d02b      	beq.n	80092ba <TIM_Base_SetConfig+0xb2>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009268:	d027      	beq.n	80092ba <TIM_Base_SetConfig+0xb2>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a2c      	ldr	r2, [pc, #176]	; (8009320 <TIM_Base_SetConfig+0x118>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d023      	beq.n	80092ba <TIM_Base_SetConfig+0xb2>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4a2b      	ldr	r2, [pc, #172]	; (8009324 <TIM_Base_SetConfig+0x11c>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d01f      	beq.n	80092ba <TIM_Base_SetConfig+0xb2>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a2a      	ldr	r2, [pc, #168]	; (8009328 <TIM_Base_SetConfig+0x120>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d01b      	beq.n	80092ba <TIM_Base_SetConfig+0xb2>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4a29      	ldr	r2, [pc, #164]	; (800932c <TIM_Base_SetConfig+0x124>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d017      	beq.n	80092ba <TIM_Base_SetConfig+0xb2>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4a28      	ldr	r2, [pc, #160]	; (8009330 <TIM_Base_SetConfig+0x128>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d013      	beq.n	80092ba <TIM_Base_SetConfig+0xb2>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a27      	ldr	r2, [pc, #156]	; (8009334 <TIM_Base_SetConfig+0x12c>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d00f      	beq.n	80092ba <TIM_Base_SetConfig+0xb2>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	4a26      	ldr	r2, [pc, #152]	; (8009338 <TIM_Base_SetConfig+0x130>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d00b      	beq.n	80092ba <TIM_Base_SetConfig+0xb2>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4a25      	ldr	r2, [pc, #148]	; (800933c <TIM_Base_SetConfig+0x134>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d007      	beq.n	80092ba <TIM_Base_SetConfig+0xb2>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4a24      	ldr	r2, [pc, #144]	; (8009340 <TIM_Base_SetConfig+0x138>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d003      	beq.n	80092ba <TIM_Base_SetConfig+0xb2>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	4a23      	ldr	r2, [pc, #140]	; (8009344 <TIM_Base_SetConfig+0x13c>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d108      	bne.n	80092cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	4313      	orrs	r3, r2
 80092d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	689a      	ldr	r2, [r3, #8]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a0a      	ldr	r2, [pc, #40]	; (800931c <TIM_Base_SetConfig+0x114>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d003      	beq.n	8009300 <TIM_Base_SetConfig+0xf8>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4a0c      	ldr	r2, [pc, #48]	; (800932c <TIM_Base_SetConfig+0x124>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d103      	bne.n	8009308 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	691a      	ldr	r2, [r3, #16]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	615a      	str	r2, [r3, #20]
}
 800930e:	bf00      	nop
 8009310:	3714      	adds	r7, #20
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	40010000 	.word	0x40010000
 8009320:	40000400 	.word	0x40000400
 8009324:	40000800 	.word	0x40000800
 8009328:	40000c00 	.word	0x40000c00
 800932c:	40010400 	.word	0x40010400
 8009330:	40014000 	.word	0x40014000
 8009334:	40014400 	.word	0x40014400
 8009338:	40014800 	.word	0x40014800
 800933c:	40001800 	.word	0x40001800
 8009340:	40001c00 	.word	0x40001c00
 8009344:	40002000 	.word	0x40002000

08009348 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009348:	b480      	push	{r7}
 800934a:	b087      	sub	sp, #28
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6a1b      	ldr	r3, [r3, #32]
 8009356:	f023 0201 	bic.w	r2, r3, #1
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a1b      	ldr	r3, [r3, #32]
 8009362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f023 0303 	bic.w	r3, r3, #3
 800937e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	4313      	orrs	r3, r2
 8009388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	f023 0302 	bic.w	r3, r3, #2
 8009390:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	697a      	ldr	r2, [r7, #20]
 8009398:	4313      	orrs	r3, r2
 800939a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4a20      	ldr	r2, [pc, #128]	; (8009420 <TIM_OC1_SetConfig+0xd8>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d003      	beq.n	80093ac <TIM_OC1_SetConfig+0x64>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	4a1f      	ldr	r2, [pc, #124]	; (8009424 <TIM_OC1_SetConfig+0xdc>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d10c      	bne.n	80093c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	f023 0308 	bic.w	r3, r3, #8
 80093b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	697a      	ldr	r2, [r7, #20]
 80093ba:	4313      	orrs	r3, r2
 80093bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	f023 0304 	bic.w	r3, r3, #4
 80093c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a15      	ldr	r2, [pc, #84]	; (8009420 <TIM_OC1_SetConfig+0xd8>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d003      	beq.n	80093d6 <TIM_OC1_SetConfig+0x8e>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a14      	ldr	r2, [pc, #80]	; (8009424 <TIM_OC1_SetConfig+0xdc>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d111      	bne.n	80093fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	695b      	ldr	r3, [r3, #20]
 80093ea:	693a      	ldr	r2, [r7, #16]
 80093ec:	4313      	orrs	r3, r2
 80093ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	693a      	ldr	r2, [r7, #16]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	685a      	ldr	r2, [r3, #4]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	697a      	ldr	r2, [r7, #20]
 8009412:	621a      	str	r2, [r3, #32]
}
 8009414:	bf00      	nop
 8009416:	371c      	adds	r7, #28
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr
 8009420:	40010000 	.word	0x40010000
 8009424:	40010400 	.word	0x40010400

08009428 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009428:	b480      	push	{r7}
 800942a:	b087      	sub	sp, #28
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a1b      	ldr	r3, [r3, #32]
 8009436:	f023 0210 	bic.w	r2, r3, #16
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a1b      	ldr	r3, [r3, #32]
 8009442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	699b      	ldr	r3, [r3, #24]
 800944e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800945e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	021b      	lsls	r3, r3, #8
 8009466:	68fa      	ldr	r2, [r7, #12]
 8009468:	4313      	orrs	r3, r2
 800946a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	f023 0320 	bic.w	r3, r3, #32
 8009472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	011b      	lsls	r3, r3, #4
 800947a:	697a      	ldr	r2, [r7, #20]
 800947c:	4313      	orrs	r3, r2
 800947e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a22      	ldr	r2, [pc, #136]	; (800950c <TIM_OC2_SetConfig+0xe4>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d003      	beq.n	8009490 <TIM_OC2_SetConfig+0x68>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a21      	ldr	r2, [pc, #132]	; (8009510 <TIM_OC2_SetConfig+0xe8>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d10d      	bne.n	80094ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	011b      	lsls	r3, r3, #4
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a17      	ldr	r2, [pc, #92]	; (800950c <TIM_OC2_SetConfig+0xe4>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d003      	beq.n	80094bc <TIM_OC2_SetConfig+0x94>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a16      	ldr	r2, [pc, #88]	; (8009510 <TIM_OC2_SetConfig+0xe8>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d113      	bne.n	80094e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	695b      	ldr	r3, [r3, #20]
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	693a      	ldr	r2, [r7, #16]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	699b      	ldr	r3, [r3, #24]
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	693a      	ldr	r2, [r7, #16]
 80094e0:	4313      	orrs	r3, r2
 80094e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	693a      	ldr	r2, [r7, #16]
 80094e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	685a      	ldr	r2, [r3, #4]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	697a      	ldr	r2, [r7, #20]
 80094fc:	621a      	str	r2, [r3, #32]
}
 80094fe:	bf00      	nop
 8009500:	371c      	adds	r7, #28
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	40010000 	.word	0x40010000
 8009510:	40010400 	.word	0x40010400

08009514 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009514:	b480      	push	{r7}
 8009516:	b087      	sub	sp, #28
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a1b      	ldr	r3, [r3, #32]
 8009522:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a1b      	ldr	r3, [r3, #32]
 800952e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	69db      	ldr	r3, [r3, #28]
 800953a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f023 0303 	bic.w	r3, r3, #3
 800954a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	4313      	orrs	r3, r2
 8009554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800955c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	021b      	lsls	r3, r3, #8
 8009564:	697a      	ldr	r2, [r7, #20]
 8009566:	4313      	orrs	r3, r2
 8009568:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a21      	ldr	r2, [pc, #132]	; (80095f4 <TIM_OC3_SetConfig+0xe0>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d003      	beq.n	800957a <TIM_OC3_SetConfig+0x66>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a20      	ldr	r2, [pc, #128]	; (80095f8 <TIM_OC3_SetConfig+0xe4>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d10d      	bne.n	8009596 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009580:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	021b      	lsls	r3, r3, #8
 8009588:	697a      	ldr	r2, [r7, #20]
 800958a:	4313      	orrs	r3, r2
 800958c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4a16      	ldr	r2, [pc, #88]	; (80095f4 <TIM_OC3_SetConfig+0xe0>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d003      	beq.n	80095a6 <TIM_OC3_SetConfig+0x92>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4a15      	ldr	r2, [pc, #84]	; (80095f8 <TIM_OC3_SetConfig+0xe4>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d113      	bne.n	80095ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80095b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	695b      	ldr	r3, [r3, #20]
 80095ba:	011b      	lsls	r3, r3, #4
 80095bc:	693a      	ldr	r2, [r7, #16]
 80095be:	4313      	orrs	r3, r2
 80095c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	699b      	ldr	r3, [r3, #24]
 80095c6:	011b      	lsls	r3, r3, #4
 80095c8:	693a      	ldr	r2, [r7, #16]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	693a      	ldr	r2, [r7, #16]
 80095d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	685a      	ldr	r2, [r3, #4]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	697a      	ldr	r2, [r7, #20]
 80095e6:	621a      	str	r2, [r3, #32]
}
 80095e8:	bf00      	nop
 80095ea:	371c      	adds	r7, #28
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr
 80095f4:	40010000 	.word	0x40010000
 80095f8:	40010400 	.word	0x40010400

080095fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b087      	sub	sp, #28
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a1b      	ldr	r3, [r3, #32]
 800960a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	69db      	ldr	r3, [r3, #28]
 8009622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800962a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	021b      	lsls	r3, r3, #8
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	4313      	orrs	r3, r2
 800963e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009646:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	031b      	lsls	r3, r3, #12
 800964e:	693a      	ldr	r2, [r7, #16]
 8009650:	4313      	orrs	r3, r2
 8009652:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a12      	ldr	r2, [pc, #72]	; (80096a0 <TIM_OC4_SetConfig+0xa4>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d003      	beq.n	8009664 <TIM_OC4_SetConfig+0x68>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a11      	ldr	r2, [pc, #68]	; (80096a4 <TIM_OC4_SetConfig+0xa8>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d109      	bne.n	8009678 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800966a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	695b      	ldr	r3, [r3, #20]
 8009670:	019b      	lsls	r3, r3, #6
 8009672:	697a      	ldr	r2, [r7, #20]
 8009674:	4313      	orrs	r3, r2
 8009676:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	697a      	ldr	r2, [r7, #20]
 800967c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	685a      	ldr	r2, [r3, #4]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	693a      	ldr	r2, [r7, #16]
 8009690:	621a      	str	r2, [r3, #32]
}
 8009692:	bf00      	nop
 8009694:	371c      	adds	r7, #28
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	40010000 	.word	0x40010000
 80096a4:	40010400 	.word	0x40010400

080096a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b087      	sub	sp, #28
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6a1b      	ldr	r3, [r3, #32]
 80096b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6a1b      	ldr	r3, [r3, #32]
 80096be:	f023 0201 	bic.w	r2, r3, #1
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	699b      	ldr	r3, [r3, #24]
 80096ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80096d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	011b      	lsls	r3, r3, #4
 80096d8:	693a      	ldr	r2, [r7, #16]
 80096da:	4313      	orrs	r3, r2
 80096dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	f023 030a 	bic.w	r3, r3, #10
 80096e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80096e6:	697a      	ldr	r2, [r7, #20]
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	693a      	ldr	r2, [r7, #16]
 80096f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	697a      	ldr	r2, [r7, #20]
 80096f8:	621a      	str	r2, [r3, #32]
}
 80096fa:	bf00      	nop
 80096fc:	371c      	adds	r7, #28
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr

08009706 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009706:	b480      	push	{r7}
 8009708:	b087      	sub	sp, #28
 800970a:	af00      	add	r7, sp, #0
 800970c:	60f8      	str	r0, [r7, #12]
 800970e:	60b9      	str	r1, [r7, #8]
 8009710:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6a1b      	ldr	r3, [r3, #32]
 8009716:	f023 0210 	bic.w	r2, r3, #16
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	699b      	ldr	r3, [r3, #24]
 8009722:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6a1b      	ldr	r3, [r3, #32]
 8009728:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009730:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	031b      	lsls	r3, r3, #12
 8009736:	697a      	ldr	r2, [r7, #20]
 8009738:	4313      	orrs	r3, r2
 800973a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009742:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	011b      	lsls	r3, r3, #4
 8009748:	693a      	ldr	r2, [r7, #16]
 800974a:	4313      	orrs	r3, r2
 800974c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	693a      	ldr	r2, [r7, #16]
 8009758:	621a      	str	r2, [r3, #32]
}
 800975a:	bf00      	nop
 800975c:	371c      	adds	r7, #28
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr

08009766 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009766:	b480      	push	{r7}
 8009768:	b085      	sub	sp, #20
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
 800976e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800977c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800977e:	683a      	ldr	r2, [r7, #0]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4313      	orrs	r3, r2
 8009784:	f043 0307 	orr.w	r3, r3, #7
 8009788:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	609a      	str	r2, [r3, #8]
}
 8009790:	bf00      	nop
 8009792:	3714      	adds	r7, #20
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800979c:	b480      	push	{r7}
 800979e:	b087      	sub	sp, #28
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]
 80097a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80097b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	021a      	lsls	r2, r3, #8
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	431a      	orrs	r2, r3
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	697a      	ldr	r2, [r7, #20]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	697a      	ldr	r2, [r7, #20]
 80097ce:	609a      	str	r2, [r3, #8]
}
 80097d0:	bf00      	nop
 80097d2:	371c      	adds	r7, #28
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80097dc:	b480      	push	{r7}
 80097de:	b087      	sub	sp, #28
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	f003 031f 	and.w	r3, r3, #31
 80097ee:	2201      	movs	r2, #1
 80097f0:	fa02 f303 	lsl.w	r3, r2, r3
 80097f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6a1a      	ldr	r2, [r3, #32]
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	43db      	mvns	r3, r3
 80097fe:	401a      	ands	r2, r3
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6a1a      	ldr	r2, [r3, #32]
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	f003 031f 	and.w	r3, r3, #31
 800980e:	6879      	ldr	r1, [r7, #4]
 8009810:	fa01 f303 	lsl.w	r3, r1, r3
 8009814:	431a      	orrs	r2, r3
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	621a      	str	r2, [r3, #32]
}
 800981a:	bf00      	nop
 800981c:	371c      	adds	r7, #28
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr
	...

08009828 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009838:	2b01      	cmp	r3, #1
 800983a:	d101      	bne.n	8009840 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800983c:	2302      	movs	r3, #2
 800983e:	e05a      	b.n	80098f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2202      	movs	r2, #2
 800984c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009866:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	4313      	orrs	r3, r2
 8009870:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a21      	ldr	r2, [pc, #132]	; (8009904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d022      	beq.n	80098ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800988c:	d01d      	beq.n	80098ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a1d      	ldr	r2, [pc, #116]	; (8009908 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d018      	beq.n	80098ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a1b      	ldr	r2, [pc, #108]	; (800990c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d013      	beq.n	80098ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a1a      	ldr	r2, [pc, #104]	; (8009910 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d00e      	beq.n	80098ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a18      	ldr	r2, [pc, #96]	; (8009914 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d009      	beq.n	80098ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a17      	ldr	r2, [pc, #92]	; (8009918 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d004      	beq.n	80098ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a15      	ldr	r2, [pc, #84]	; (800991c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d10c      	bne.n	80098e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	68ba      	ldr	r2, [r7, #8]
 80098d8:	4313      	orrs	r3, r2
 80098da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	68ba      	ldr	r2, [r7, #8]
 80098e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3714      	adds	r7, #20
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr
 8009902:	bf00      	nop
 8009904:	40010000 	.word	0x40010000
 8009908:	40000400 	.word	0x40000400
 800990c:	40000800 	.word	0x40000800
 8009910:	40000c00 	.word	0x40000c00
 8009914:	40010400 	.word	0x40010400
 8009918:	40014000 	.word	0x40014000
 800991c:	40001800 	.word	0x40001800

08009920 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009928:	bf00      	nop
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009948:	b084      	sub	sp, #16
 800994a:	b580      	push	{r7, lr}
 800994c:	b084      	sub	sp, #16
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
 8009952:	f107 001c 	add.w	r0, r7, #28
 8009956:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800995a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995c:	2b01      	cmp	r3, #1
 800995e:	d122      	bne.n	80099a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009964:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800998a:	2b01      	cmp	r3, #1
 800998c:	d105      	bne.n	800999a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 f94a 	bl	8009c34 <USB_CoreReset>
 80099a0:	4603      	mov	r3, r0
 80099a2:	73fb      	strb	r3, [r7, #15]
 80099a4:	e01a      	b.n	80099dc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 f93e 	bl	8009c34 <USB_CoreReset>
 80099b8:	4603      	mov	r3, r0
 80099ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80099bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d106      	bne.n	80099d0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	639a      	str	r2, [r3, #56]	; 0x38
 80099ce:	e005      	b.n	80099dc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80099dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d10b      	bne.n	80099fa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	f043 0206 	orr.w	r2, r3, #6
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	f043 0220 	orr.w	r2, r3, #32
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80099fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3710      	adds	r7, #16
 8009a00:	46bd      	mov	sp, r7
 8009a02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a06:	b004      	add	sp, #16
 8009a08:	4770      	bx	lr

08009a0a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a0a:	b480      	push	{r7}
 8009a0c:	b083      	sub	sp, #12
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	f043 0201 	orr.w	r2, r3, #1
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	f023 0201 	bic.w	r2, r3, #1
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	370c      	adds	r7, #12
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr

08009a4e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b082      	sub	sp, #8
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
 8009a56:	460b      	mov	r3, r1
 8009a58:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009a66:	78fb      	ldrb	r3, [r7, #3]
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d106      	bne.n	8009a7a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	60da      	str	r2, [r3, #12]
 8009a78:	e00b      	b.n	8009a92 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009a7a:	78fb      	ldrb	r3, [r7, #3]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d106      	bne.n	8009a8e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	60da      	str	r2, [r3, #12]
 8009a8c:	e001      	b.n	8009a92 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e003      	b.n	8009a9a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009a92:	2032      	movs	r0, #50	; 0x32
 8009a94:	f7f9 ff0e 	bl	80038b4 <HAL_Delay>

  return HAL_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3708      	adds	r7, #8
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
	...

08009aa4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	019b      	lsls	r3, r3, #6
 8009ab6:	f043 0220 	orr.w	r2, r3, #32
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	60fb      	str	r3, [r7, #12]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	4a09      	ldr	r2, [pc, #36]	; (8009aec <USB_FlushTxFifo+0x48>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d901      	bls.n	8009ad0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009acc:	2303      	movs	r3, #3
 8009ace:	e006      	b.n	8009ade <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	f003 0320 	and.w	r3, r3, #32
 8009ad8:	2b20      	cmp	r3, #32
 8009ada:	d0f0      	beq.n	8009abe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3714      	adds	r7, #20
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	00030d40 	.word	0x00030d40

08009af0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b085      	sub	sp, #20
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009af8:	2300      	movs	r3, #0
 8009afa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2210      	movs	r2, #16
 8009b00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	3301      	adds	r3, #1
 8009b06:	60fb      	str	r3, [r7, #12]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	4a09      	ldr	r2, [pc, #36]	; (8009b30 <USB_FlushRxFifo+0x40>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d901      	bls.n	8009b14 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009b10:	2303      	movs	r3, #3
 8009b12:	e006      	b.n	8009b22 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	f003 0310 	and.w	r3, r3, #16
 8009b1c:	2b10      	cmp	r3, #16
 8009b1e:	d0f0      	beq.n	8009b02 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3714      	adds	r7, #20
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr
 8009b2e:	bf00      	nop
 8009b30:	00030d40 	.word	0x00030d40

08009b34 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b089      	sub	sp, #36	; 0x24
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	4611      	mov	r1, r2
 8009b40:	461a      	mov	r2, r3
 8009b42:	460b      	mov	r3, r1
 8009b44:	71fb      	strb	r3, [r7, #7]
 8009b46:	4613      	mov	r3, r2
 8009b48:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009b52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d11a      	bne.n	8009b90 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009b5a:	88bb      	ldrh	r3, [r7, #4]
 8009b5c:	3303      	adds	r3, #3
 8009b5e:	089b      	lsrs	r3, r3, #2
 8009b60:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009b62:	2300      	movs	r3, #0
 8009b64:	61bb      	str	r3, [r7, #24]
 8009b66:	e00f      	b.n	8009b88 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009b68:	79fb      	ldrb	r3, [r7, #7]
 8009b6a:	031a      	lsls	r2, r3, #12
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	4413      	add	r3, r2
 8009b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b74:	461a      	mov	r2, r3
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	3304      	adds	r3, #4
 8009b80:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	3301      	adds	r3, #1
 8009b86:	61bb      	str	r3, [r7, #24]
 8009b88:	69ba      	ldr	r2, [r7, #24]
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d3eb      	bcc.n	8009b68 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009b90:	2300      	movs	r3, #0
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3724      	adds	r7, #36	; 0x24
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr

08009b9e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009b9e:	b480      	push	{r7}
 8009ba0:	b089      	sub	sp, #36	; 0x24
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	60f8      	str	r0, [r7, #12]
 8009ba6:	60b9      	str	r1, [r7, #8]
 8009ba8:	4613      	mov	r3, r2
 8009baa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009bb4:	88fb      	ldrh	r3, [r7, #6]
 8009bb6:	3303      	adds	r3, #3
 8009bb8:	089b      	lsrs	r3, r3, #2
 8009bba:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	61bb      	str	r3, [r7, #24]
 8009bc0:	e00b      	b.n	8009bda <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	601a      	str	r2, [r3, #0]
    pDest++;
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	3304      	adds	r3, #4
 8009bd2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	61bb      	str	r3, [r7, #24]
 8009bda:	69ba      	ldr	r2, [r7, #24]
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d3ef      	bcc.n	8009bc2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009be2:	69fb      	ldr	r3, [r7, #28]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3724      	adds	r7, #36	; 0x24
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	695b      	ldr	r3, [r3, #20]
 8009bfc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	699b      	ldr	r3, [r3, #24]
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	4013      	ands	r3, r2
 8009c06:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009c08:	68fb      	ldr	r3, [r7, #12]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3714      	adds	r7, #20
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr

08009c16 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009c16:	b480      	push	{r7}
 8009c18:	b083      	sub	sp, #12
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	695b      	ldr	r3, [r3, #20]
 8009c22:	f003 0301 	and.w	r3, r3, #1
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	370c      	adds	r7, #12
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr
	...

08009c34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b085      	sub	sp, #20
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	3301      	adds	r3, #1
 8009c44:	60fb      	str	r3, [r7, #12]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	4a13      	ldr	r2, [pc, #76]	; (8009c98 <USB_CoreReset+0x64>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d901      	bls.n	8009c52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009c4e:	2303      	movs	r3, #3
 8009c50:	e01b      	b.n	8009c8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	daf2      	bge.n	8009c40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	691b      	ldr	r3, [r3, #16]
 8009c62:	f043 0201 	orr.w	r2, r3, #1
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	60fb      	str	r3, [r7, #12]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	4a09      	ldr	r2, [pc, #36]	; (8009c98 <USB_CoreReset+0x64>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d901      	bls.n	8009c7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009c78:	2303      	movs	r3, #3
 8009c7a:	e006      	b.n	8009c8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	f003 0301 	and.w	r3, r3, #1
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d0f0      	beq.n	8009c6a <USB_CoreReset+0x36>

  return HAL_OK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3714      	adds	r7, #20
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr
 8009c96:	bf00      	nop
 8009c98:	00030d40 	.word	0x00030d40

08009c9c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c9c:	b084      	sub	sp, #16
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b084      	sub	sp, #16
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
 8009ca6:	f107 001c 	add.w	r0, r7, #28
 8009caa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009cb8:	461a      	mov	r2, r3
 8009cba:	2300      	movs	r3, #0
 8009cbc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cce:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cda:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d018      	beq.n	8009d20 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d10a      	bne.n	8009d0a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68ba      	ldr	r2, [r7, #8]
 8009cfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d02:	f043 0304 	orr.w	r3, r3, #4
 8009d06:	6013      	str	r3, [r2, #0]
 8009d08:	e014      	b.n	8009d34 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	68ba      	ldr	r2, [r7, #8]
 8009d14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d18:	f023 0304 	bic.w	r3, r3, #4
 8009d1c:	6013      	str	r3, [r2, #0]
 8009d1e:	e009      	b.n	8009d34 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d2e:	f023 0304 	bic.w	r3, r3, #4
 8009d32:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8009d34:	2110      	movs	r1, #16
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f7ff feb4 	bl	8009aa4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f7ff fed7 	bl	8009af0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009d42:	2300      	movs	r3, #0
 8009d44:	60fb      	str	r3, [r7, #12]
 8009d46:	e015      	b.n	8009d74 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	015a      	lsls	r2, r3, #5
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	4413      	add	r3, r2
 8009d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d54:	461a      	mov	r2, r3
 8009d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d5a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	015a      	lsls	r2, r3, #5
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	4413      	add	r3, r2
 8009d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d68:	461a      	mov	r2, r3
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	3301      	adds	r3, #1
 8009d72:	60fb      	str	r3, [r7, #12]
 8009d74:	6a3b      	ldr	r3, [r7, #32]
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d3e5      	bcc.n	8009d48 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8009d7c:	2101      	movs	r1, #1
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f8ac 	bl	8009edc <USB_DriveVbus>

  HAL_Delay(200U);
 8009d84:	20c8      	movs	r0, #200	; 0xc8
 8009d86:	f7f9 fd95 	bl	80038b4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d96:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d00b      	beq.n	8009dbc <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009daa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4a14      	ldr	r2, [pc, #80]	; (8009e00 <USB_HostInit+0x164>)
 8009db0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4a13      	ldr	r2, [pc, #76]	; (8009e04 <USB_HostInit+0x168>)
 8009db6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009dba:	e009      	b.n	8009dd0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2280      	movs	r2, #128	; 0x80
 8009dc0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a10      	ldr	r2, [pc, #64]	; (8009e08 <USB_HostInit+0x16c>)
 8009dc6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a10      	ldr	r2, [pc, #64]	; (8009e0c <USB_HostInit+0x170>)
 8009dcc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d105      	bne.n	8009de2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	699b      	ldr	r3, [r3, #24]
 8009dda:	f043 0210 	orr.w	r2, r3, #16
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	699a      	ldr	r2, [r3, #24]
 8009de6:	4b0a      	ldr	r3, [pc, #40]	; (8009e10 <USB_HostInit+0x174>)
 8009de8:	4313      	orrs	r3, r2
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009dfa:	b004      	add	sp, #16
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	01000200 	.word	0x01000200
 8009e04:	00e00300 	.word	0x00e00300
 8009e08:	00600080 	.word	0x00600080
 8009e0c:	004000e0 	.word	0x004000e0
 8009e10:	a3200008 	.word	0xa3200008

08009e14 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009e32:	f023 0303 	bic.w	r3, r3, #3
 8009e36:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	78fb      	ldrb	r3, [r7, #3]
 8009e42:	f003 0303 	and.w	r3, r3, #3
 8009e46:	68f9      	ldr	r1, [r7, #12]
 8009e48:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009e50:	78fb      	ldrb	r3, [r7, #3]
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d107      	bne.n	8009e66 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009e62:	6053      	str	r3, [r2, #4]
 8009e64:	e009      	b.n	8009e7a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009e66:	78fb      	ldrb	r3, [r7, #3]
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	d106      	bne.n	8009e7a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e72:	461a      	mov	r2, r3
 8009e74:	f241 7370 	movw	r3, #6000	; 0x1770
 8009e78:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009e7a:	2300      	movs	r3, #0
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3714      	adds	r7, #20
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009e94:	2300      	movs	r3, #0
 8009e96:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009ea8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009eb6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009eb8:	2064      	movs	r0, #100	; 0x64
 8009eba:	f7f9 fcfb 	bl	80038b4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009ec6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009eca:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009ecc:	200a      	movs	r0, #10
 8009ece:	f7f9 fcf1 	bl	80038b4 <HAL_Delay>

  return HAL_OK;
 8009ed2:	2300      	movs	r3, #0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009eec:	2300      	movs	r3, #0
 8009eee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009f00:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d109      	bne.n	8009f20 <USB_DriveVbus+0x44>
 8009f0c:	78fb      	ldrb	r3, [r7, #3]
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d106      	bne.n	8009f20 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	68fa      	ldr	r2, [r7, #12]
 8009f16:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009f1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009f1e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f2a:	d109      	bne.n	8009f40 <USB_DriveVbus+0x64>
 8009f2c:	78fb      	ldrb	r3, [r7, #3]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d106      	bne.n	8009f40 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009f3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f3e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009f40:	2300      	movs	r3, #0
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3714      	adds	r7, #20
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr

08009f4e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009f4e:	b480      	push	{r7}
 8009f50:	b085      	sub	sp, #20
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	0c5b      	lsrs	r3, r3, #17
 8009f6c:	f003 0303 	and.w	r3, r3, #3
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3714      	adds	r7, #20
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b085      	sub	sp, #20
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	b29b      	uxth	r3, r3
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3714      	adds	r7, #20
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr
	...

08009fa0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b088      	sub	sp, #32
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	4608      	mov	r0, r1
 8009faa:	4611      	mov	r1, r2
 8009fac:	461a      	mov	r2, r3
 8009fae:	4603      	mov	r3, r0
 8009fb0:	70fb      	strb	r3, [r7, #3]
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	70bb      	strb	r3, [r7, #2]
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009fc2:	78fb      	ldrb	r3, [r7, #3]
 8009fc4:	015a      	lsls	r2, r3, #5
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	4413      	add	r3, r2
 8009fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fce:	461a      	mov	r2, r3
 8009fd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009fd4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009fd6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009fda:	2b03      	cmp	r3, #3
 8009fdc:	d87e      	bhi.n	800a0dc <USB_HC_Init+0x13c>
 8009fde:	a201      	add	r2, pc, #4	; (adr r2, 8009fe4 <USB_HC_Init+0x44>)
 8009fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe4:	08009ff5 	.word	0x08009ff5
 8009fe8:	0800a09f 	.word	0x0800a09f
 8009fec:	08009ff5 	.word	0x08009ff5
 8009ff0:	0800a061 	.word	0x0800a061
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009ff4:	78fb      	ldrb	r3, [r7, #3]
 8009ff6:	015a      	lsls	r2, r3, #5
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a000:	461a      	mov	r2, r3
 800a002:	f240 439d 	movw	r3, #1181	; 0x49d
 800a006:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a008:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	da10      	bge.n	800a032 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a010:	78fb      	ldrb	r3, [r7, #3]
 800a012:	015a      	lsls	r2, r3, #5
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	4413      	add	r3, r2
 800a018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	78fa      	ldrb	r2, [r7, #3]
 800a020:	0151      	lsls	r1, r2, #5
 800a022:	693a      	ldr	r2, [r7, #16]
 800a024:	440a      	add	r2, r1
 800a026:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a02a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a02e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800a030:	e057      	b.n	800a0e2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d051      	beq.n	800a0e2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a03e:	78fb      	ldrb	r3, [r7, #3]
 800a040:	015a      	lsls	r2, r3, #5
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	4413      	add	r3, r2
 800a046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	78fa      	ldrb	r2, [r7, #3]
 800a04e:	0151      	lsls	r1, r2, #5
 800a050:	693a      	ldr	r2, [r7, #16]
 800a052:	440a      	add	r2, r1
 800a054:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a058:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a05c:	60d3      	str	r3, [r2, #12]
      break;
 800a05e:	e040      	b.n	800a0e2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a060:	78fb      	ldrb	r3, [r7, #3]
 800a062:	015a      	lsls	r2, r3, #5
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	4413      	add	r3, r2
 800a068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a06c:	461a      	mov	r2, r3
 800a06e:	f240 639d 	movw	r3, #1693	; 0x69d
 800a072:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a074:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	da34      	bge.n	800a0e6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a07c:	78fb      	ldrb	r3, [r7, #3]
 800a07e:	015a      	lsls	r2, r3, #5
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	4413      	add	r3, r2
 800a084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	78fa      	ldrb	r2, [r7, #3]
 800a08c:	0151      	lsls	r1, r2, #5
 800a08e:	693a      	ldr	r2, [r7, #16]
 800a090:	440a      	add	r2, r1
 800a092:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a09a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a09c:	e023      	b.n	800a0e6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a09e:	78fb      	ldrb	r3, [r7, #3]
 800a0a0:	015a      	lsls	r2, r3, #5
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	f240 2325 	movw	r3, #549	; 0x225
 800a0b0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a0b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	da17      	bge.n	800a0ea <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a0ba:	78fb      	ldrb	r3, [r7, #3]
 800a0bc:	015a      	lsls	r2, r3, #5
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	78fa      	ldrb	r2, [r7, #3]
 800a0ca:	0151      	lsls	r1, r2, #5
 800a0cc:	693a      	ldr	r2, [r7, #16]
 800a0ce:	440a      	add	r2, r1
 800a0d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0d4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a0d8:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a0da:	e006      	b.n	800a0ea <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	77fb      	strb	r3, [r7, #31]
      break;
 800a0e0:	e004      	b.n	800a0ec <USB_HC_Init+0x14c>
      break;
 800a0e2:	bf00      	nop
 800a0e4:	e002      	b.n	800a0ec <USB_HC_Init+0x14c>
      break;
 800a0e6:	bf00      	nop
 800a0e8:	e000      	b.n	800a0ec <USB_HC_Init+0x14c>
      break;
 800a0ea:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0f2:	699a      	ldr	r2, [r3, #24]
 800a0f4:	78fb      	ldrb	r3, [r7, #3]
 800a0f6:	f003 030f 	and.w	r3, r3, #15
 800a0fa:	2101      	movs	r1, #1
 800a0fc:	fa01 f303 	lsl.w	r3, r1, r3
 800a100:	6939      	ldr	r1, [r7, #16]
 800a102:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a106:	4313      	orrs	r3, r2
 800a108:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	699b      	ldr	r3, [r3, #24]
 800a10e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a116:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	da03      	bge.n	800a126 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a11e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a122:	61bb      	str	r3, [r7, #24]
 800a124:	e001      	b.n	800a12a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800a126:	2300      	movs	r3, #0
 800a128:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f7ff ff0f 	bl	8009f4e <USB_GetHostSpeed>
 800a130:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a132:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a136:	2b02      	cmp	r3, #2
 800a138:	d106      	bne.n	800a148 <USB_HC_Init+0x1a8>
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d003      	beq.n	800a148 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a140:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a144:	617b      	str	r3, [r7, #20]
 800a146:	e001      	b.n	800a14c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a148:	2300      	movs	r3, #0
 800a14a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a14c:	787b      	ldrb	r3, [r7, #1]
 800a14e:	059b      	lsls	r3, r3, #22
 800a150:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a154:	78bb      	ldrb	r3, [r7, #2]
 800a156:	02db      	lsls	r3, r3, #11
 800a158:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a15c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a15e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a162:	049b      	lsls	r3, r3, #18
 800a164:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a168:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a16a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a16c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a170:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a176:	78fb      	ldrb	r3, [r7, #3]
 800a178:	0159      	lsls	r1, r3, #5
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	440b      	add	r3, r1
 800a17e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a182:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a188:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800a18a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a18e:	2b03      	cmp	r3, #3
 800a190:	d10f      	bne.n	800a1b2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800a192:	78fb      	ldrb	r3, [r7, #3]
 800a194:	015a      	lsls	r2, r3, #5
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	4413      	add	r3, r2
 800a19a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	78fa      	ldrb	r2, [r7, #3]
 800a1a2:	0151      	lsls	r1, r2, #5
 800a1a4:	693a      	ldr	r2, [r7, #16]
 800a1a6:	440a      	add	r2, r1
 800a1a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a1ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a1b0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a1b2:	7ffb      	ldrb	r3, [r7, #31]
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3720      	adds	r7, #32
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b08c      	sub	sp, #48	; 0x30
 800a1c0:	af02      	add	r7, sp, #8
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	785b      	ldrb	r3, [r3, #1]
 800a1d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a1d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1d8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d02d      	beq.n	800a242 <USB_HC_StartXfer+0x86>
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	791b      	ldrb	r3, [r3, #4]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d129      	bne.n	800a242 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800a1ee:	79fb      	ldrb	r3, [r7, #7]
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d117      	bne.n	800a224 <USB_HC_StartXfer+0x68>
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	79db      	ldrb	r3, [r3, #7]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d003      	beq.n	800a204 <USB_HC_StartXfer+0x48>
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	79db      	ldrb	r3, [r3, #7]
 800a200:	2b02      	cmp	r3, #2
 800a202:	d10f      	bne.n	800a224 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	015a      	lsls	r2, r3, #5
 800a208:	6a3b      	ldr	r3, [r7, #32]
 800a20a:	4413      	add	r3, r2
 800a20c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	69fa      	ldr	r2, [r7, #28]
 800a214:	0151      	lsls	r1, r2, #5
 800a216:	6a3a      	ldr	r2, [r7, #32]
 800a218:	440a      	add	r2, r1
 800a21a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a21e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a222:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800a224:	79fb      	ldrb	r3, [r7, #7]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d10b      	bne.n	800a242 <USB_HC_StartXfer+0x86>
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	795b      	ldrb	r3, [r3, #5]
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d107      	bne.n	800a242 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	785b      	ldrb	r3, [r3, #1]
 800a236:	4619      	mov	r1, r3
 800a238:	68f8      	ldr	r0, [r7, #12]
 800a23a:	f000 fa2f 	bl	800a69c <USB_DoPing>
      return HAL_OK;
 800a23e:	2300      	movs	r3, #0
 800a240:	e0f8      	b.n	800a434 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	695b      	ldr	r3, [r3, #20]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d018      	beq.n	800a27c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	695b      	ldr	r3, [r3, #20]
 800a24e:	68ba      	ldr	r2, [r7, #8]
 800a250:	8912      	ldrh	r2, [r2, #8]
 800a252:	4413      	add	r3, r2
 800a254:	3b01      	subs	r3, #1
 800a256:	68ba      	ldr	r2, [r7, #8]
 800a258:	8912      	ldrh	r2, [r2, #8]
 800a25a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a25e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a260:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a262:	8b7b      	ldrh	r3, [r7, #26]
 800a264:	429a      	cmp	r2, r3
 800a266:	d90b      	bls.n	800a280 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800a268:	8b7b      	ldrh	r3, [r7, #26]
 800a26a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a26c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a26e:	68ba      	ldr	r2, [r7, #8]
 800a270:	8912      	ldrh	r2, [r2, #8]
 800a272:	fb02 f203 	mul.w	r2, r2, r3
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	611a      	str	r2, [r3, #16]
 800a27a:	e001      	b.n	800a280 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800a27c:	2301      	movs	r3, #1
 800a27e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	78db      	ldrb	r3, [r3, #3]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d007      	beq.n	800a298 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a288:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a28a:	68ba      	ldr	r2, [r7, #8]
 800a28c:	8912      	ldrh	r2, [r2, #8]
 800a28e:	fb02 f203 	mul.w	r2, r2, r3
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	611a      	str	r2, [r3, #16]
 800a296:	e003      	b.n	800a2a0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	695a      	ldr	r2, [r3, #20]
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	691b      	ldr	r3, [r3, #16]
 800a2a4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a2a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a2aa:	04d9      	lsls	r1, r3, #19
 800a2ac:	4b63      	ldr	r3, [pc, #396]	; (800a43c <USB_HC_StartXfer+0x280>)
 800a2ae:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a2b0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	7a9b      	ldrb	r3, [r3, #10]
 800a2b6:	075b      	lsls	r3, r3, #29
 800a2b8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a2bc:	69f9      	ldr	r1, [r7, #28]
 800a2be:	0148      	lsls	r0, r1, #5
 800a2c0:	6a39      	ldr	r1, [r7, #32]
 800a2c2:	4401      	add	r1, r0
 800a2c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a2c8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a2ca:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a2cc:	79fb      	ldrb	r3, [r7, #7]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d009      	beq.n	800a2e6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	68d9      	ldr	r1, [r3, #12]
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	015a      	lsls	r2, r3, #5
 800a2da:	6a3b      	ldr	r3, [r7, #32]
 800a2dc:	4413      	add	r3, r2
 800a2de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2e2:	460a      	mov	r2, r1
 800a2e4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a2e6:	6a3b      	ldr	r3, [r7, #32]
 800a2e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	f003 0301 	and.w	r3, r3, #1
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	bf0c      	ite	eq
 800a2f6:	2301      	moveq	r3, #1
 800a2f8:	2300      	movne	r3, #0
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	015a      	lsls	r2, r3, #5
 800a302:	6a3b      	ldr	r3, [r7, #32]
 800a304:	4413      	add	r3, r2
 800a306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	69fa      	ldr	r2, [r7, #28]
 800a30e:	0151      	lsls	r1, r2, #5
 800a310:	6a3a      	ldr	r2, [r7, #32]
 800a312:	440a      	add	r2, r1
 800a314:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a318:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a31c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	015a      	lsls	r2, r3, #5
 800a322:	6a3b      	ldr	r3, [r7, #32]
 800a324:	4413      	add	r3, r2
 800a326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	7e7b      	ldrb	r3, [r7, #25]
 800a32e:	075b      	lsls	r3, r3, #29
 800a330:	69f9      	ldr	r1, [r7, #28]
 800a332:	0148      	lsls	r0, r1, #5
 800a334:	6a39      	ldr	r1, [r7, #32]
 800a336:	4401      	add	r1, r0
 800a338:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a33c:	4313      	orrs	r3, r2
 800a33e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	015a      	lsls	r2, r3, #5
 800a344:	6a3b      	ldr	r3, [r7, #32]
 800a346:	4413      	add	r3, r2
 800a348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a356:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	78db      	ldrb	r3, [r3, #3]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d004      	beq.n	800a36a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a366:	613b      	str	r3, [r7, #16]
 800a368:	e003      	b.n	800a372 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a370:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a378:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a37a:	69fb      	ldr	r3, [r7, #28]
 800a37c:	015a      	lsls	r2, r3, #5
 800a37e:	6a3b      	ldr	r3, [r7, #32]
 800a380:	4413      	add	r3, r2
 800a382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a386:	461a      	mov	r2, r3
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a38c:	79fb      	ldrb	r3, [r7, #7]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d001      	beq.n	800a396 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800a392:	2300      	movs	r3, #0
 800a394:	e04e      	b.n	800a434 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	78db      	ldrb	r3, [r3, #3]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d149      	bne.n	800a432 <USB_HC_StartXfer+0x276>
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	695b      	ldr	r3, [r3, #20]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d045      	beq.n	800a432 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	79db      	ldrb	r3, [r3, #7]
 800a3aa:	2b03      	cmp	r3, #3
 800a3ac:	d830      	bhi.n	800a410 <USB_HC_StartXfer+0x254>
 800a3ae:	a201      	add	r2, pc, #4	; (adr r2, 800a3b4 <USB_HC_StartXfer+0x1f8>)
 800a3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b4:	0800a3c5 	.word	0x0800a3c5
 800a3b8:	0800a3e9 	.word	0x0800a3e9
 800a3bc:	0800a3c5 	.word	0x0800a3c5
 800a3c0:	0800a3e9 	.word	0x0800a3e9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	695b      	ldr	r3, [r3, #20]
 800a3c8:	3303      	adds	r3, #3
 800a3ca:	089b      	lsrs	r3, r3, #2
 800a3cc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a3ce:	8afa      	ldrh	r2, [r7, #22]
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d91c      	bls.n	800a414 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	699b      	ldr	r3, [r3, #24]
 800a3de:	f043 0220 	orr.w	r2, r3, #32
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	619a      	str	r2, [r3, #24]
        }
        break;
 800a3e6:	e015      	b.n	800a414 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	695b      	ldr	r3, [r3, #20]
 800a3ec:	3303      	adds	r3, #3
 800a3ee:	089b      	lsrs	r3, r3, #2
 800a3f0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a3f2:	8afa      	ldrh	r2, [r7, #22]
 800a3f4:	6a3b      	ldr	r3, [r7, #32]
 800a3f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3fa:	691b      	ldr	r3, [r3, #16]
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d90a      	bls.n	800a418 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	699b      	ldr	r3, [r3, #24]
 800a406:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	619a      	str	r2, [r3, #24]
        }
        break;
 800a40e:	e003      	b.n	800a418 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800a410:	bf00      	nop
 800a412:	e002      	b.n	800a41a <USB_HC_StartXfer+0x25e>
        break;
 800a414:	bf00      	nop
 800a416:	e000      	b.n	800a41a <USB_HC_StartXfer+0x25e>
        break;
 800a418:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	68d9      	ldr	r1, [r3, #12]
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	785a      	ldrb	r2, [r3, #1]
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	695b      	ldr	r3, [r3, #20]
 800a426:	b29b      	uxth	r3, r3
 800a428:	2000      	movs	r0, #0
 800a42a:	9000      	str	r0, [sp, #0]
 800a42c:	68f8      	ldr	r0, [r7, #12]
 800a42e:	f7ff fb81 	bl	8009b34 <USB_WritePacket>
  }

  return HAL_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3728      	adds	r7, #40	; 0x28
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	1ff80000 	.word	0x1ff80000

0800a440 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a440:	b480      	push	{r7}
 800a442:	b085      	sub	sp, #20
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a452:	695b      	ldr	r3, [r3, #20]
 800a454:	b29b      	uxth	r3, r3
}
 800a456:	4618      	mov	r0, r3
 800a458:	3714      	adds	r7, #20
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr

0800a462 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a462:	b480      	push	{r7}
 800a464:	b089      	sub	sp, #36	; 0x24
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
 800a46a:	460b      	mov	r3, r1
 800a46c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800a472:	78fb      	ldrb	r3, [r7, #3]
 800a474:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800a476:	2300      	movs	r3, #0
 800a478:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	015a      	lsls	r2, r3, #5
 800a47e:	69bb      	ldr	r3, [r7, #24]
 800a480:	4413      	add	r3, r2
 800a482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	0c9b      	lsrs	r3, r3, #18
 800a48a:	f003 0303 	and.w	r3, r3, #3
 800a48e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	015a      	lsls	r2, r3, #5
 800a494:	69bb      	ldr	r3, [r7, #24]
 800a496:	4413      	add	r3, r2
 800a498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	0fdb      	lsrs	r3, r3, #31
 800a4a0:	f003 0301 	and.w	r3, r3, #1
 800a4a4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	f003 0320 	and.w	r3, r3, #32
 800a4ae:	2b20      	cmp	r3, #32
 800a4b0:	d104      	bne.n	800a4bc <USB_HC_Halt+0x5a>
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d101      	bne.n	800a4bc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	e0e8      	b.n	800a68e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d002      	beq.n	800a4c8 <USB_HC_Halt+0x66>
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	d173      	bne.n	800a5b0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	015a      	lsls	r2, r3, #5
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	4413      	add	r3, r2
 800a4d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	697a      	ldr	r2, [r7, #20]
 800a4d8:	0151      	lsls	r1, r2, #5
 800a4da:	69ba      	ldr	r2, [r7, #24]
 800a4dc:	440a      	add	r2, r1
 800a4de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4e6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	f003 0320 	and.w	r3, r3, #32
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	f040 80cb 	bne.w	800a68c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d143      	bne.n	800a58a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	015a      	lsls	r2, r3, #5
 800a506:	69bb      	ldr	r3, [r7, #24]
 800a508:	4413      	add	r3, r2
 800a50a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	697a      	ldr	r2, [r7, #20]
 800a512:	0151      	lsls	r1, r2, #5
 800a514:	69ba      	ldr	r2, [r7, #24]
 800a516:	440a      	add	r2, r1
 800a518:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a51c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a520:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	015a      	lsls	r2, r3, #5
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	4413      	add	r3, r2
 800a52a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	697a      	ldr	r2, [r7, #20]
 800a532:	0151      	lsls	r1, r2, #5
 800a534:	69ba      	ldr	r2, [r7, #24]
 800a536:	440a      	add	r2, r1
 800a538:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a53c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a540:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	015a      	lsls	r2, r3, #5
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	4413      	add	r3, r2
 800a54a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	697a      	ldr	r2, [r7, #20]
 800a552:	0151      	lsls	r1, r2, #5
 800a554:	69ba      	ldr	r2, [r7, #24]
 800a556:	440a      	add	r2, r1
 800a558:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a55c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a560:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800a562:	69fb      	ldr	r3, [r7, #28]
 800a564:	3301      	adds	r3, #1
 800a566:	61fb      	str	r3, [r7, #28]
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a56e:	d81d      	bhi.n	800a5ac <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	015a      	lsls	r2, r3, #5
 800a574:	69bb      	ldr	r3, [r7, #24]
 800a576:	4413      	add	r3, r2
 800a578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a582:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a586:	d0ec      	beq.n	800a562 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a588:	e080      	b.n	800a68c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	015a      	lsls	r2, r3, #5
 800a58e:	69bb      	ldr	r3, [r7, #24]
 800a590:	4413      	add	r3, r2
 800a592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	697a      	ldr	r2, [r7, #20]
 800a59a:	0151      	lsls	r1, r2, #5
 800a59c:	69ba      	ldr	r2, [r7, #24]
 800a59e:	440a      	add	r2, r1
 800a5a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a5a8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a5aa:	e06f      	b.n	800a68c <USB_HC_Halt+0x22a>
            break;
 800a5ac:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a5ae:	e06d      	b.n	800a68c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	015a      	lsls	r2, r3, #5
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	0151      	lsls	r1, r2, #5
 800a5c2:	69ba      	ldr	r2, [r7, #24]
 800a5c4:	440a      	add	r2, r1
 800a5c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5ce:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a5d6:	691b      	ldr	r3, [r3, #16]
 800a5d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d143      	bne.n	800a668 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	015a      	lsls	r2, r3, #5
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	697a      	ldr	r2, [r7, #20]
 800a5f0:	0151      	lsls	r1, r2, #5
 800a5f2:	69ba      	ldr	r2, [r7, #24]
 800a5f4:	440a      	add	r2, r1
 800a5f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5fe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	015a      	lsls	r2, r3, #5
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	4413      	add	r3, r2
 800a608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	697a      	ldr	r2, [r7, #20]
 800a610:	0151      	lsls	r1, r2, #5
 800a612:	69ba      	ldr	r2, [r7, #24]
 800a614:	440a      	add	r2, r1
 800a616:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a61a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a61e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	015a      	lsls	r2, r3, #5
 800a624:	69bb      	ldr	r3, [r7, #24]
 800a626:	4413      	add	r3, r2
 800a628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	697a      	ldr	r2, [r7, #20]
 800a630:	0151      	lsls	r1, r2, #5
 800a632:	69ba      	ldr	r2, [r7, #24]
 800a634:	440a      	add	r2, r1
 800a636:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a63a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a63e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	3301      	adds	r3, #1
 800a644:	61fb      	str	r3, [r7, #28]
 800a646:	69fb      	ldr	r3, [r7, #28]
 800a648:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a64c:	d81d      	bhi.n	800a68a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	015a      	lsls	r2, r3, #5
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	4413      	add	r3, r2
 800a656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a660:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a664:	d0ec      	beq.n	800a640 <USB_HC_Halt+0x1de>
 800a666:	e011      	b.n	800a68c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	015a      	lsls	r2, r3, #5
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	4413      	add	r3, r2
 800a670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	697a      	ldr	r2, [r7, #20]
 800a678:	0151      	lsls	r1, r2, #5
 800a67a:	69ba      	ldr	r2, [r7, #24]
 800a67c:	440a      	add	r2, r1
 800a67e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a682:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a686:	6013      	str	r3, [r2, #0]
 800a688:	e000      	b.n	800a68c <USB_HC_Halt+0x22a>
          break;
 800a68a:	bf00      	nop
    }
  }

  return HAL_OK;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3724      	adds	r7, #36	; 0x24
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr
	...

0800a69c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b087      	sub	sp, #28
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a6ac:	78fb      	ldrb	r3, [r7, #3]
 800a6ae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	04da      	lsls	r2, r3, #19
 800a6b8:	4b15      	ldr	r3, [pc, #84]	; (800a710 <USB_DoPing+0x74>)
 800a6ba:	4013      	ands	r3, r2
 800a6bc:	693a      	ldr	r2, [r7, #16]
 800a6be:	0151      	lsls	r1, r2, #5
 800a6c0:	697a      	ldr	r2, [r7, #20]
 800a6c2:	440a      	add	r2, r1
 800a6c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a6c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a6cc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	015a      	lsls	r2, r3, #5
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	4413      	add	r3, r2
 800a6d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a6e4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a6ec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	015a      	lsls	r2, r3, #5
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	371c      	adds	r7, #28
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr
 800a70e:	bf00      	nop
 800a710:	1ff80000 	.word	0x1ff80000

0800a714 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b086      	sub	sp, #24
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a720:	2300      	movs	r3, #0
 800a722:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f7ff f981 	bl	8009a2c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800a72a:	2110      	movs	r1, #16
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f7ff f9b9 	bl	8009aa4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f7ff f9dc 	bl	8009af0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a738:	2300      	movs	r3, #0
 800a73a:	613b      	str	r3, [r7, #16]
 800a73c:	e01f      	b.n	800a77e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	015a      	lsls	r2, r3, #5
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	4413      	add	r3, r2
 800a746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a754:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a75c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a764:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	015a      	lsls	r2, r3, #5
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	4413      	add	r3, r2
 800a76e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a772:	461a      	mov	r2, r3
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	3301      	adds	r3, #1
 800a77c:	613b      	str	r3, [r7, #16]
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	2b0f      	cmp	r3, #15
 800a782:	d9dc      	bls.n	800a73e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a784:	2300      	movs	r3, #0
 800a786:	613b      	str	r3, [r7, #16]
 800a788:	e034      	b.n	800a7f4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	015a      	lsls	r2, r3, #5
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	4413      	add	r3, r2
 800a792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7a0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a7a8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a7b0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	015a      	lsls	r2, r3, #5
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	4413      	add	r3, r2
 800a7ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7be:	461a      	mov	r2, r3
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	617b      	str	r3, [r7, #20]
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7d0:	d80c      	bhi.n	800a7ec <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	015a      	lsls	r2, r3, #5
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	4413      	add	r3, r2
 800a7da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7e8:	d0ec      	beq.n	800a7c4 <USB_StopHost+0xb0>
 800a7ea:	e000      	b.n	800a7ee <USB_StopHost+0xda>
        break;
 800a7ec:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	613b      	str	r3, [r7, #16]
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	2b0f      	cmp	r3, #15
 800a7f8:	d9c7      	bls.n	800a78a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a800:	461a      	mov	r2, r3
 800a802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a806:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a80e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f7ff f8fa 	bl	8009a0a <USB_EnableGlobalInt>

  return HAL_OK;
 800a816:	2300      	movs	r3, #0
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3718      	adds	r7, #24
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a820:	b590      	push	{r4, r7, lr}
 800a822:	b089      	sub	sp, #36	; 0x24
 800a824:	af04      	add	r7, sp, #16
 800a826:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a828:	2301      	movs	r3, #1
 800a82a:	2202      	movs	r2, #2
 800a82c:	2102      	movs	r1, #2
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 fc66 	bl	800b100 <USBH_FindInterface>
 800a834:	4603      	mov	r3, r0
 800a836:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a838:	7bfb      	ldrb	r3, [r7, #15]
 800a83a:	2bff      	cmp	r3, #255	; 0xff
 800a83c:	d002      	beq.n	800a844 <USBH_CDC_InterfaceInit+0x24>
 800a83e:	7bfb      	ldrb	r3, [r7, #15]
 800a840:	2b01      	cmp	r3, #1
 800a842:	d901      	bls.n	800a848 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a844:	2302      	movs	r3, #2
 800a846:	e13d      	b.n	800aac4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a848:	7bfb      	ldrb	r3, [r7, #15]
 800a84a:	4619      	mov	r1, r3
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 fc3b 	bl	800b0c8 <USBH_SelectInterface>
 800a852:	4603      	mov	r3, r0
 800a854:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a856:	7bbb      	ldrb	r3, [r7, #14]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d001      	beq.n	800a860 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a85c:	2302      	movs	r3, #2
 800a85e:	e131      	b.n	800aac4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a866:	2050      	movs	r0, #80	; 0x50
 800a868:	f002 fa00 	bl	800cc6c <malloc>
 800a86c:	4603      	mov	r3, r0
 800a86e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a876:	69db      	ldr	r3, [r3, #28]
 800a878:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d101      	bne.n	800a884 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a880:	2302      	movs	r3, #2
 800a882:	e11f      	b.n	800aac4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a884:	2250      	movs	r2, #80	; 0x50
 800a886:	2100      	movs	r1, #0
 800a888:	68b8      	ldr	r0, [r7, #8]
 800a88a:	f002 f9ff 	bl	800cc8c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a88e:	7bfb      	ldrb	r3, [r7, #15]
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	211a      	movs	r1, #26
 800a894:	fb01 f303 	mul.w	r3, r1, r3
 800a898:	4413      	add	r3, r2
 800a89a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	b25b      	sxtb	r3, r3
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	da15      	bge.n	800a8d2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a8a6:	7bfb      	ldrb	r3, [r7, #15]
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	211a      	movs	r1, #26
 800a8ac:	fb01 f303 	mul.w	r3, r1, r3
 800a8b0:	4413      	add	r3, r2
 800a8b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a8b6:	781a      	ldrb	r2, [r3, #0]
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a8bc:	7bfb      	ldrb	r3, [r7, #15]
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	211a      	movs	r1, #26
 800a8c2:	fb01 f303 	mul.w	r3, r1, r3
 800a8c6:	4413      	add	r3, r2
 800a8c8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a8cc:	881a      	ldrh	r2, [r3, #0]
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	785b      	ldrb	r3, [r3, #1]
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f001 fe32 	bl	800c542 <USBH_AllocPipe>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	7819      	ldrb	r1, [r3, #0]
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	7858      	ldrb	r0, [r3, #1]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a8fa:	68ba      	ldr	r2, [r7, #8]
 800a8fc:	8952      	ldrh	r2, [r2, #10]
 800a8fe:	9202      	str	r2, [sp, #8]
 800a900:	2203      	movs	r2, #3
 800a902:	9201      	str	r2, [sp, #4]
 800a904:	9300      	str	r3, [sp, #0]
 800a906:	4623      	mov	r3, r4
 800a908:	4602      	mov	r2, r0
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f001 fdea 	bl	800c4e4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	2200      	movs	r2, #0
 800a916:	4619      	mov	r1, r3
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f002 f8f9 	bl	800cb10 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a91e:	2300      	movs	r3, #0
 800a920:	2200      	movs	r2, #0
 800a922:	210a      	movs	r1, #10
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 fbeb 	bl	800b100 <USBH_FindInterface>
 800a92a:	4603      	mov	r3, r0
 800a92c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a92e:	7bfb      	ldrb	r3, [r7, #15]
 800a930:	2bff      	cmp	r3, #255	; 0xff
 800a932:	d002      	beq.n	800a93a <USBH_CDC_InterfaceInit+0x11a>
 800a934:	7bfb      	ldrb	r3, [r7, #15]
 800a936:	2b01      	cmp	r3, #1
 800a938:	d901      	bls.n	800a93e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a93a:	2302      	movs	r3, #2
 800a93c:	e0c2      	b.n	800aac4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a93e:	7bfb      	ldrb	r3, [r7, #15]
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	211a      	movs	r1, #26
 800a944:	fb01 f303 	mul.w	r3, r1, r3
 800a948:	4413      	add	r3, r2
 800a94a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	b25b      	sxtb	r3, r3
 800a952:	2b00      	cmp	r3, #0
 800a954:	da16      	bge.n	800a984 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a956:	7bfb      	ldrb	r3, [r7, #15]
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	211a      	movs	r1, #26
 800a95c:	fb01 f303 	mul.w	r3, r1, r3
 800a960:	4413      	add	r3, r2
 800a962:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a966:	781a      	ldrb	r2, [r3, #0]
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a96c:	7bfb      	ldrb	r3, [r7, #15]
 800a96e:	687a      	ldr	r2, [r7, #4]
 800a970:	211a      	movs	r1, #26
 800a972:	fb01 f303 	mul.w	r3, r1, r3
 800a976:	4413      	add	r3, r2
 800a978:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a97c:	881a      	ldrh	r2, [r3, #0]
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	835a      	strh	r2, [r3, #26]
 800a982:	e015      	b.n	800a9b0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a984:	7bfb      	ldrb	r3, [r7, #15]
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	211a      	movs	r1, #26
 800a98a:	fb01 f303 	mul.w	r3, r1, r3
 800a98e:	4413      	add	r3, r2
 800a990:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a994:	781a      	ldrb	r2, [r3, #0]
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a99a:	7bfb      	ldrb	r3, [r7, #15]
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	211a      	movs	r1, #26
 800a9a0:	fb01 f303 	mul.w	r3, r1, r3
 800a9a4:	4413      	add	r3, r2
 800a9a6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a9aa:	881a      	ldrh	r2, [r3, #0]
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800a9b0:	7bfb      	ldrb	r3, [r7, #15]
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	211a      	movs	r1, #26
 800a9b6:	fb01 f303 	mul.w	r3, r1, r3
 800a9ba:	4413      	add	r3, r2
 800a9bc:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	b25b      	sxtb	r3, r3
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	da16      	bge.n	800a9f6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a9c8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	211a      	movs	r1, #26
 800a9ce:	fb01 f303 	mul.w	r3, r1, r3
 800a9d2:	4413      	add	r3, r2
 800a9d4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a9d8:	781a      	ldrb	r2, [r3, #0]
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a9de:	7bfb      	ldrb	r3, [r7, #15]
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	211a      	movs	r1, #26
 800a9e4:	fb01 f303 	mul.w	r3, r1, r3
 800a9e8:	4413      	add	r3, r2
 800a9ea:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a9ee:	881a      	ldrh	r2, [r3, #0]
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	835a      	strh	r2, [r3, #26]
 800a9f4:	e015      	b.n	800aa22 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a9f6:	7bfb      	ldrb	r3, [r7, #15]
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	211a      	movs	r1, #26
 800a9fc:	fb01 f303 	mul.w	r3, r1, r3
 800aa00:	4413      	add	r3, r2
 800aa02:	f203 3356 	addw	r3, r3, #854	; 0x356
 800aa06:	781a      	ldrb	r2, [r3, #0]
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800aa0c:	7bfb      	ldrb	r3, [r7, #15]
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	211a      	movs	r1, #26
 800aa12:	fb01 f303 	mul.w	r3, r1, r3
 800aa16:	4413      	add	r3, r2
 800aa18:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800aa1c:	881a      	ldrh	r2, [r3, #0]
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	7b9b      	ldrb	r3, [r3, #14]
 800aa26:	4619      	mov	r1, r3
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f001 fd8a 	bl	800c542 <USBH_AllocPipe>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	461a      	mov	r2, r3
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	7bdb      	ldrb	r3, [r3, #15]
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f001 fd80 	bl	800c542 <USBH_AllocPipe>
 800aa42:	4603      	mov	r3, r0
 800aa44:	461a      	mov	r2, r3
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	7b59      	ldrb	r1, [r3, #13]
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	7b98      	ldrb	r0, [r3, #14]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aa5e:	68ba      	ldr	r2, [r7, #8]
 800aa60:	8b12      	ldrh	r2, [r2, #24]
 800aa62:	9202      	str	r2, [sp, #8]
 800aa64:	2202      	movs	r2, #2
 800aa66:	9201      	str	r2, [sp, #4]
 800aa68:	9300      	str	r3, [sp, #0]
 800aa6a:	4623      	mov	r3, r4
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f001 fd38 	bl	800c4e4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	7b19      	ldrb	r1, [r3, #12]
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	7bd8      	ldrb	r0, [r3, #15]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aa88:	68ba      	ldr	r2, [r7, #8]
 800aa8a:	8b52      	ldrh	r2, [r2, #26]
 800aa8c:	9202      	str	r2, [sp, #8]
 800aa8e:	2202      	movs	r2, #2
 800aa90:	9201      	str	r2, [sp, #4]
 800aa92:	9300      	str	r3, [sp, #0]
 800aa94:	4623      	mov	r3, r4
 800aa96:	4602      	mov	r2, r0
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f001 fd23 	bl	800c4e4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	7b5b      	ldrb	r3, [r3, #13]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	4619      	mov	r1, r3
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f002 f82e 	bl	800cb10 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	7b1b      	ldrb	r3, [r3, #12]
 800aab8:	2200      	movs	r2, #0
 800aaba:	4619      	mov	r1, r3
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f002 f827 	bl	800cb10 <USBH_LL_SetToggle>

  return USBH_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3714      	adds	r7, #20
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd90      	pop	{r4, r7, pc}

0800aacc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aada:	69db      	ldr	r3, [r3, #28]
 800aadc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d00e      	beq.n	800ab04 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	4619      	mov	r1, r3
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f001 fd18 	bl	800c522 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f001 fd43 	bl	800c584 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2200      	movs	r2, #0
 800ab02:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	7b1b      	ldrb	r3, [r3, #12]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d00e      	beq.n	800ab2a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	7b1b      	ldrb	r3, [r3, #12]
 800ab10:	4619      	mov	r1, r3
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f001 fd05 	bl	800c522 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	7b1b      	ldrb	r3, [r3, #12]
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f001 fd30 	bl	800c584 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2200      	movs	r2, #0
 800ab28:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	7b5b      	ldrb	r3, [r3, #13]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d00e      	beq.n	800ab50 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	7b5b      	ldrb	r3, [r3, #13]
 800ab36:	4619      	mov	r1, r3
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f001 fcf2 	bl	800c522 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	7b5b      	ldrb	r3, [r3, #13]
 800ab42:	4619      	mov	r1, r3
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f001 fd1d 	bl	800c584 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab56:	69db      	ldr	r3, [r3, #28]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d00b      	beq.n	800ab74 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab62:	69db      	ldr	r3, [r3, #28]
 800ab64:	4618      	mov	r0, r3
 800ab66:	f002 f889 	bl	800cc7c <free>
    phost->pActiveClass->pData = 0U;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab70:	2200      	movs	r2, #0
 800ab72:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800ab74:	2300      	movs	r3, #0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3710      	adds	r7, #16
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b084      	sub	sp, #16
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab8c:	69db      	ldr	r3, [r3, #28]
 800ab8e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	3340      	adds	r3, #64	; 0x40
 800ab94:	4619      	mov	r1, r3
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 f8b1 	bl	800acfe <GetLineCoding>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800aba0:	7afb      	ldrb	r3, [r7, #11]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d105      	bne.n	800abb2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800abac:	2102      	movs	r1, #2
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800abb2:	7afb      	ldrb	r3, [r7, #11]
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3710      	adds	r7, #16
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800abc4:	2301      	movs	r3, #1
 800abc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800abc8:	2300      	movs	r3, #0
 800abca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abd2:	69db      	ldr	r3, [r3, #28]
 800abd4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800abdc:	2b04      	cmp	r3, #4
 800abde:	d877      	bhi.n	800acd0 <USBH_CDC_Process+0x114>
 800abe0:	a201      	add	r2, pc, #4	; (adr r2, 800abe8 <USBH_CDC_Process+0x2c>)
 800abe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe6:	bf00      	nop
 800abe8:	0800abfd 	.word	0x0800abfd
 800abec:	0800ac03 	.word	0x0800ac03
 800abf0:	0800ac33 	.word	0x0800ac33
 800abf4:	0800aca7 	.word	0x0800aca7
 800abf8:	0800acb5 	.word	0x0800acb5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800abfc:	2300      	movs	r3, #0
 800abfe:	73fb      	strb	r3, [r7, #15]
      break;
 800ac00:	e06d      	b.n	800acde <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac06:	4619      	mov	r1, r3
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 f897 	bl	800ad3c <SetLineCoding>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ac12:	7bbb      	ldrb	r3, [r7, #14]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d104      	bne.n	800ac22 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	2202      	movs	r2, #2
 800ac1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ac20:	e058      	b.n	800acd4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800ac22:	7bbb      	ldrb	r3, [r7, #14]
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d055      	beq.n	800acd4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	2204      	movs	r2, #4
 800ac2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ac30:	e050      	b.n	800acd4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	3340      	adds	r3, #64	; 0x40
 800ac36:	4619      	mov	r1, r3
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 f860 	bl	800acfe <GetLineCoding>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ac42:	7bbb      	ldrb	r3, [r7, #14]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d126      	bne.n	800ac96 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac5a:	791b      	ldrb	r3, [r3, #4]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d13b      	bne.n	800acd8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac6a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d133      	bne.n	800acd8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac7a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d12b      	bne.n	800acd8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac88:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d124      	bne.n	800acd8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 f958 	bl	800af44 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ac94:	e020      	b.n	800acd8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800ac96:	7bbb      	ldrb	r3, [r7, #14]
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d01d      	beq.n	800acd8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	2204      	movs	r2, #4
 800aca0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800aca4:	e018      	b.n	800acd8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 f867 	bl	800ad7a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 f8da 	bl	800ae66 <CDC_ProcessReception>
      break;
 800acb2:	e014      	b.n	800acde <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800acb4:	2100      	movs	r1, #0
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 ffe3 	bl	800bc82 <USBH_ClrFeature>
 800acbc:	4603      	mov	r3, r0
 800acbe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800acc0:	7bbb      	ldrb	r3, [r7, #14]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d10a      	bne.n	800acdc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	2200      	movs	r2, #0
 800acca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800acce:	e005      	b.n	800acdc <USBH_CDC_Process+0x120>

    default:
      break;
 800acd0:	bf00      	nop
 800acd2:	e004      	b.n	800acde <USBH_CDC_Process+0x122>
      break;
 800acd4:	bf00      	nop
 800acd6:	e002      	b.n	800acde <USBH_CDC_Process+0x122>
      break;
 800acd8:	bf00      	nop
 800acda:	e000      	b.n	800acde <USBH_CDC_Process+0x122>
      break;
 800acdc:	bf00      	nop

  }

  return status;
 800acde:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800acf0:	2300      	movs	r3, #0
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	370c      	adds	r7, #12
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr

0800acfe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b082      	sub	sp, #8
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
 800ad06:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	22a1      	movs	r2, #161	; 0xa1
 800ad0c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2221      	movs	r2, #33	; 0x21
 800ad12:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2200      	movs	r2, #0
 800ad18:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2207      	movs	r2, #7
 800ad24:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	2207      	movs	r2, #7
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f001 f988 	bl	800c042 <USBH_CtlReq>
 800ad32:	4603      	mov	r3, r0
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3708      	adds	r7, #8
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2221      	movs	r2, #33	; 0x21
 800ad4a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2220      	movs	r2, #32
 800ad50:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2200      	movs	r2, #0
 800ad56:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2207      	movs	r2, #7
 800ad62:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	2207      	movs	r2, #7
 800ad68:	4619      	mov	r1, r3
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f001 f969 	bl	800c042 <USBH_CtlReq>
 800ad70:	4603      	mov	r3, r0
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3708      	adds	r7, #8
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}

0800ad7a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800ad7a:	b580      	push	{r7, lr}
 800ad7c:	b086      	sub	sp, #24
 800ad7e:	af02      	add	r7, sp, #8
 800ad80:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad88:	69db      	ldr	r3, [r3, #28]
 800ad8a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d002      	beq.n	800ada0 <CDC_ProcessTransmission+0x26>
 800ad9a:	2b02      	cmp	r3, #2
 800ad9c:	d023      	beq.n	800ade6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800ad9e:	e05e      	b.n	800ae5e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada4:	68fa      	ldr	r2, [r7, #12]
 800ada6:	8b12      	ldrh	r2, [r2, #24]
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d90b      	bls.n	800adc4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	69d9      	ldr	r1, [r3, #28]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	8b1a      	ldrh	r2, [r3, #24]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	7b5b      	ldrb	r3, [r3, #13]
 800adb8:	2001      	movs	r0, #1
 800adba:	9000      	str	r0, [sp, #0]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f001 fb4e 	bl	800c45e <USBH_BulkSendData>
 800adc2:	e00b      	b.n	800addc <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800adcc:	b29a      	uxth	r2, r3
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	7b5b      	ldrb	r3, [r3, #13]
 800add2:	2001      	movs	r0, #1
 800add4:	9000      	str	r0, [sp, #0]
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f001 fb41 	bl	800c45e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2202      	movs	r2, #2
 800ade0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ade4:	e03b      	b.n	800ae5e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	7b5b      	ldrb	r3, [r3, #13]
 800adea:	4619      	mov	r1, r3
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f001 fe65 	bl	800cabc <USBH_LL_GetURBState>
 800adf2:	4603      	mov	r3, r0
 800adf4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800adf6:	7afb      	ldrb	r3, [r7, #11]
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d128      	bne.n	800ae4e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae00:	68fa      	ldr	r2, [r7, #12]
 800ae02:	8b12      	ldrh	r2, [r2, #24]
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d90e      	bls.n	800ae26 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	8b12      	ldrh	r2, [r2, #24]
 800ae10:	1a9a      	subs	r2, r3, r2
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	69db      	ldr	r3, [r3, #28]
 800ae1a:	68fa      	ldr	r2, [r7, #12]
 800ae1c:	8b12      	ldrh	r2, [r2, #24]
 800ae1e:	441a      	add	r2, r3
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	61da      	str	r2, [r3, #28]
 800ae24:	e002      	b.n	800ae2c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d004      	beq.n	800ae3e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2201      	movs	r2, #1
 800ae38:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ae3c:	e00e      	b.n	800ae5c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2200      	movs	r2, #0
 800ae42:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 f868 	bl	800af1c <USBH_CDC_TransmitCallback>
      break;
 800ae4c:	e006      	b.n	800ae5c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800ae4e:	7afb      	ldrb	r3, [r7, #11]
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d103      	bne.n	800ae5c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2201      	movs	r2, #1
 800ae58:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ae5c:	bf00      	nop
  }
}
 800ae5e:	bf00      	nop
 800ae60:	3710      	adds	r7, #16
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b086      	sub	sp, #24
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae74:	69db      	ldr	r3, [r3, #28]
 800ae76:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ae82:	2b03      	cmp	r3, #3
 800ae84:	d002      	beq.n	800ae8c <CDC_ProcessReception+0x26>
 800ae86:	2b04      	cmp	r3, #4
 800ae88:	d00e      	beq.n	800aea8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800ae8a:	e043      	b.n	800af14 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	6a19      	ldr	r1, [r3, #32]
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	8b5a      	ldrh	r2, [r3, #26]
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	7b1b      	ldrb	r3, [r3, #12]
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f001 fb05 	bl	800c4a8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	2204      	movs	r2, #4
 800aea2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800aea6:	e035      	b.n	800af14 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	7b1b      	ldrb	r3, [r3, #12]
 800aeac:	4619      	mov	r1, r3
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f001 fe04 	bl	800cabc <USBH_LL_GetURBState>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800aeb8:	7cfb      	ldrb	r3, [r7, #19]
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	d129      	bne.n	800af12 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	7b1b      	ldrb	r3, [r3, #12]
 800aec2:	4619      	mov	r1, r3
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f001 fd67 	bl	800c998 <USBH_LL_GetLastXferSize>
 800aeca:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed0:	68fa      	ldr	r2, [r7, #12]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d016      	beq.n	800af04 <CDC_ProcessReception+0x9e>
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	8b5b      	ldrh	r3, [r3, #26]
 800aeda:	461a      	mov	r2, r3
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	4293      	cmp	r3, r2
 800aee0:	d910      	bls.n	800af04 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	1ad2      	subs	r2, r2, r3
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	6a1a      	ldr	r2, [r3, #32]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	441a      	add	r2, r3
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	2203      	movs	r2, #3
 800aefe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800af02:	e006      	b.n	800af12 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	2200      	movs	r2, #0
 800af08:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 f80f 	bl	800af30 <USBH_CDC_ReceiveCallback>
      break;
 800af12:	bf00      	nop
  }
}
 800af14:	bf00      	nop
 800af16:	3718      	adds	r7, #24
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800af24:	bf00      	nop
 800af26:	370c      	adds	r7, #12
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800af30:	b480      	push	{r7}
 800af32:	b083      	sub	sp, #12
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800af38:	bf00      	nop
 800af3a:	370c      	adds	r7, #12
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800af4c:	bf00      	nop
 800af4e:	370c      	adds	r7, #12
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	4613      	mov	r3, r2
 800af64:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d101      	bne.n	800af70 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800af6c:	2302      	movs	r3, #2
 800af6e:	e029      	b.n	800afc4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	79fa      	ldrb	r2, [r7, #7]
 800af74:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2200      	movs	r2, #0
 800af84:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800af88:	68f8      	ldr	r0, [r7, #12]
 800af8a:	f000 f81f 	bl	800afcc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2200      	movs	r2, #0
 800af92:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2200      	movs	r2, #0
 800af9a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2200      	movs	r2, #0
 800afaa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d003      	beq.n	800afbc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	68ba      	ldr	r2, [r7, #8]
 800afb8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800afbc:	68f8      	ldr	r0, [r7, #12]
 800afbe:	f001 fc37 	bl	800c830 <USBH_LL_Init>

  return USBH_OK;
 800afc2:	2300      	movs	r3, #0
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3710      	adds	r7, #16
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800afcc:	b480      	push	{r7}
 800afce:	b085      	sub	sp, #20
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800afd4:	2300      	movs	r3, #0
 800afd6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800afd8:	2300      	movs	r3, #0
 800afda:	60fb      	str	r3, [r7, #12]
 800afdc:	e009      	b.n	800aff2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	33e0      	adds	r3, #224	; 0xe0
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	4413      	add	r3, r2
 800afe8:	2200      	movs	r2, #0
 800afea:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	3301      	adds	r3, #1
 800aff0:	60fb      	str	r3, [r7, #12]
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2b0e      	cmp	r3, #14
 800aff6:	d9f2      	bls.n	800afde <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aff8:	2300      	movs	r3, #0
 800affa:	60fb      	str	r3, [r7, #12]
 800affc:	e009      	b.n	800b012 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	4413      	add	r3, r2
 800b004:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b008:	2200      	movs	r2, #0
 800b00a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	3301      	adds	r3, #1
 800b010:	60fb      	str	r3, [r7, #12]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b018:	d3f1      	bcc.n	800affe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2200      	movs	r2, #0
 800b01e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2201      	movs	r2, #1
 800b02a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2200      	movs	r2, #0
 800b030:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2201      	movs	r2, #1
 800b038:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2240      	movs	r2, #64	; 0x40
 800b03e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2201      	movs	r2, #1
 800b052:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2200      	movs	r2, #0
 800b062:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b066:	2300      	movs	r3, #0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3714      	adds	r7, #20
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr

0800b074 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b074:	b480      	push	{r7}
 800b076:	b085      	sub	sp, #20
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b07e:	2300      	movs	r3, #0
 800b080:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d016      	beq.n	800b0b6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d10e      	bne.n	800b0b0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b098:	1c59      	adds	r1, r3, #1
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b0a0:	687a      	ldr	r2, [r7, #4]
 800b0a2:	33de      	adds	r3, #222	; 0xde
 800b0a4:	6839      	ldr	r1, [r7, #0]
 800b0a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	73fb      	strb	r3, [r7, #15]
 800b0ae:	e004      	b.n	800b0ba <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b0b0:	2302      	movs	r3, #2
 800b0b2:	73fb      	strb	r3, [r7, #15]
 800b0b4:	e001      	b.n	800b0ba <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b0b6:	2302      	movs	r3, #2
 800b0b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b0ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3714      	adds	r7, #20
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr

0800b0c8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b085      	sub	sp, #20
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b0de:	78fa      	ldrb	r2, [r7, #3]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d204      	bcs.n	800b0ee <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	78fa      	ldrb	r2, [r7, #3]
 800b0e8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b0ec:	e001      	b.n	800b0f2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b0ee:	2302      	movs	r3, #2
 800b0f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b0f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3714      	adds	r7, #20
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b100:	b480      	push	{r7}
 800b102:	b087      	sub	sp, #28
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	4608      	mov	r0, r1
 800b10a:	4611      	mov	r1, r2
 800b10c:	461a      	mov	r2, r3
 800b10e:	4603      	mov	r3, r0
 800b110:	70fb      	strb	r3, [r7, #3]
 800b112:	460b      	mov	r3, r1
 800b114:	70bb      	strb	r3, [r7, #2]
 800b116:	4613      	mov	r3, r2
 800b118:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b11a:	2300      	movs	r3, #0
 800b11c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800b11e:	2300      	movs	r3, #0
 800b120:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b128:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b12a:	e025      	b.n	800b178 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b12c:	7dfb      	ldrb	r3, [r7, #23]
 800b12e:	221a      	movs	r2, #26
 800b130:	fb02 f303 	mul.w	r3, r2, r3
 800b134:	3308      	adds	r3, #8
 800b136:	68fa      	ldr	r2, [r7, #12]
 800b138:	4413      	add	r3, r2
 800b13a:	3302      	adds	r3, #2
 800b13c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	795b      	ldrb	r3, [r3, #5]
 800b142:	78fa      	ldrb	r2, [r7, #3]
 800b144:	429a      	cmp	r2, r3
 800b146:	d002      	beq.n	800b14e <USBH_FindInterface+0x4e>
 800b148:	78fb      	ldrb	r3, [r7, #3]
 800b14a:	2bff      	cmp	r3, #255	; 0xff
 800b14c:	d111      	bne.n	800b172 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b152:	78ba      	ldrb	r2, [r7, #2]
 800b154:	429a      	cmp	r2, r3
 800b156:	d002      	beq.n	800b15e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b158:	78bb      	ldrb	r3, [r7, #2]
 800b15a:	2bff      	cmp	r3, #255	; 0xff
 800b15c:	d109      	bne.n	800b172 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b162:	787a      	ldrb	r2, [r7, #1]
 800b164:	429a      	cmp	r2, r3
 800b166:	d002      	beq.n	800b16e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b168:	787b      	ldrb	r3, [r7, #1]
 800b16a:	2bff      	cmp	r3, #255	; 0xff
 800b16c:	d101      	bne.n	800b172 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b16e:	7dfb      	ldrb	r3, [r7, #23]
 800b170:	e006      	b.n	800b180 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b172:	7dfb      	ldrb	r3, [r7, #23]
 800b174:	3301      	adds	r3, #1
 800b176:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b178:	7dfb      	ldrb	r3, [r7, #23]
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d9d6      	bls.n	800b12c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b17e:	23ff      	movs	r3, #255	; 0xff
}
 800b180:	4618      	mov	r0, r3
 800b182:	371c      	adds	r7, #28
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f001 fb87 	bl	800c8a8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800b19a:	2101      	movs	r1, #1
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f001 fca0 	bl	800cae2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b1a2:	2300      	movs	r3, #0
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3708      	adds	r7, #8
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b088      	sub	sp, #32
 800b1b0:	af04      	add	r7, sp, #16
 800b1b2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b1b4:	2302      	movs	r3, #2
 800b1b6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d102      	bne.n	800b1ce <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2203      	movs	r2, #3
 800b1cc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	2b0b      	cmp	r3, #11
 800b1d6:	f200 81b3 	bhi.w	800b540 <USBH_Process+0x394>
 800b1da:	a201      	add	r2, pc, #4	; (adr r2, 800b1e0 <USBH_Process+0x34>)
 800b1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1e0:	0800b211 	.word	0x0800b211
 800b1e4:	0800b243 	.word	0x0800b243
 800b1e8:	0800b2ab 	.word	0x0800b2ab
 800b1ec:	0800b4db 	.word	0x0800b4db
 800b1f0:	0800b541 	.word	0x0800b541
 800b1f4:	0800b34f 	.word	0x0800b34f
 800b1f8:	0800b481 	.word	0x0800b481
 800b1fc:	0800b385 	.word	0x0800b385
 800b200:	0800b3a5 	.word	0x0800b3a5
 800b204:	0800b3c5 	.word	0x0800b3c5
 800b208:	0800b3f3 	.word	0x0800b3f3
 800b20c:	0800b4c3 	.word	0x0800b4c3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b216:	b2db      	uxtb	r3, r3
 800b218:	2b00      	cmp	r3, #0
 800b21a:	f000 8193 	beq.w	800b544 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2201      	movs	r2, #1
 800b222:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b224:	20c8      	movs	r0, #200	; 0xc8
 800b226:	f001 fca3 	bl	800cb70 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f001 fb99 	bl	800c962 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b240:	e180      	b.n	800b544 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d107      	bne.n	800b25c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2200      	movs	r2, #0
 800b250:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2202      	movs	r2, #2
 800b258:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b25a:	e182      	b.n	800b562 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b262:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b266:	d914      	bls.n	800b292 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b26e:	3301      	adds	r3, #1
 800b270:	b2da      	uxtb	r2, r3
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b27e:	2b03      	cmp	r3, #3
 800b280:	d903      	bls.n	800b28a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	220d      	movs	r2, #13
 800b286:	701a      	strb	r2, [r3, #0]
      break;
 800b288:	e16b      	b.n	800b562 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2200      	movs	r2, #0
 800b28e:	701a      	strb	r2, [r3, #0]
      break;
 800b290:	e167      	b.n	800b562 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b298:	f103 020a 	add.w	r2, r3, #10
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b2a2:	200a      	movs	r0, #10
 800b2a4:	f001 fc64 	bl	800cb70 <USBH_Delay>
      break;
 800b2a8:	e15b      	b.n	800b562 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d005      	beq.n	800b2c0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b2ba:	2104      	movs	r1, #4
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b2c0:	2064      	movs	r0, #100	; 0x64
 800b2c2:	f001 fc55 	bl	800cb70 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f001 fb24 	bl	800c914 <USBH_LL_GetSpeed>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2205      	movs	r2, #5
 800b2da:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b2dc:	2100      	movs	r1, #0
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f001 f92f 	bl	800c542 <USBH_AllocPipe>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b2ec:	2180      	movs	r1, #128	; 0x80
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f001 f927 	bl	800c542 <USBH_AllocPipe>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	7919      	ldrb	r1, [r3, #4]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b310:	b292      	uxth	r2, r2
 800b312:	9202      	str	r2, [sp, #8]
 800b314:	2200      	movs	r2, #0
 800b316:	9201      	str	r2, [sp, #4]
 800b318:	9300      	str	r3, [sp, #0]
 800b31a:	4603      	mov	r3, r0
 800b31c:	2280      	movs	r2, #128	; 0x80
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f001 f8e0 	bl	800c4e4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	7959      	ldrb	r1, [r3, #5]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b338:	b292      	uxth	r2, r2
 800b33a:	9202      	str	r2, [sp, #8]
 800b33c:	2200      	movs	r2, #0
 800b33e:	9201      	str	r2, [sp, #4]
 800b340:	9300      	str	r3, [sp, #0]
 800b342:	4603      	mov	r3, r0
 800b344:	2200      	movs	r2, #0
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f001 f8cc 	bl	800c4e4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b34c:	e109      	b.n	800b562 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 f90c 	bl	800b56c <USBH_HandleEnum>
 800b354:	4603      	mov	r3, r0
 800b356:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b358:	7bbb      	ldrb	r3, [r7, #14]
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	f040 80f3 	bne.w	800b548 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2200      	movs	r2, #0
 800b366:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b370:	2b01      	cmp	r3, #1
 800b372:	d103      	bne.n	800b37c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2208      	movs	r2, #8
 800b378:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b37a:	e0e5      	b.n	800b548 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2207      	movs	r2, #7
 800b380:	701a      	strb	r2, [r3, #0]
      break;
 800b382:	e0e1      	b.n	800b548 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	f000 80de 	beq.w	800b54c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b396:	2101      	movs	r1, #1
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2208      	movs	r2, #8
 800b3a0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800b3a2:	e0d3      	b.n	800b54c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b3aa:	b29b      	uxth	r3, r3
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 fc20 	bl	800bbf4 <USBH_SetCfg>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	f040 80ca 	bne.w	800b550 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2209      	movs	r2, #9
 800b3c0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b3c2:	e0c5      	b.n	800b550 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b3ca:	f003 0320 	and.w	r3, r3, #32
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d00b      	beq.n	800b3ea <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800b3d2:	2101      	movs	r1, #1
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 fc30 	bl	800bc3a <USBH_SetFeature>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	f040 80b9 	bne.w	800b554 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	220a      	movs	r2, #10
 800b3e6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b3e8:	e0b4      	b.n	800b554 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	220a      	movs	r2, #10
 800b3ee:	701a      	strb	r2, [r3, #0]
      break;
 800b3f0:	e0b0      	b.n	800b554 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f000 80ad 	beq.w	800b558 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2200      	movs	r2, #0
 800b402:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b406:	2300      	movs	r3, #0
 800b408:	73fb      	strb	r3, [r7, #15]
 800b40a:	e016      	b.n	800b43a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b40c:	7bfa      	ldrb	r2, [r7, #15]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	32de      	adds	r2, #222	; 0xde
 800b412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b416:	791a      	ldrb	r2, [r3, #4]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b41e:	429a      	cmp	r2, r3
 800b420:	d108      	bne.n	800b434 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b422:	7bfa      	ldrb	r2, [r7, #15]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	32de      	adds	r2, #222	; 0xde
 800b428:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b432:	e005      	b.n	800b440 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b434:	7bfb      	ldrb	r3, [r7, #15]
 800b436:	3301      	adds	r3, #1
 800b438:	73fb      	strb	r3, [r7, #15]
 800b43a:	7bfb      	ldrb	r3, [r7, #15]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d0e5      	beq.n	800b40c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b446:	2b00      	cmp	r3, #0
 800b448:	d016      	beq.n	800b478 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b450:	689b      	ldr	r3, [r3, #8]
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	4798      	blx	r3
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d109      	bne.n	800b470 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2206      	movs	r2, #6
 800b460:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b468:	2103      	movs	r1, #3
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b46e:	e073      	b.n	800b558 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	220d      	movs	r2, #13
 800b474:	701a      	strb	r2, [r3, #0]
      break;
 800b476:	e06f      	b.n	800b558 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	220d      	movs	r2, #13
 800b47c:	701a      	strb	r2, [r3, #0]
      break;
 800b47e:	e06b      	b.n	800b558 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b486:	2b00      	cmp	r3, #0
 800b488:	d017      	beq.n	800b4ba <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b490:	691b      	ldr	r3, [r3, #16]
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	4798      	blx	r3
 800b496:	4603      	mov	r3, r0
 800b498:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b49a:	7bbb      	ldrb	r3, [r7, #14]
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d103      	bne.n	800b4aa <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	220b      	movs	r2, #11
 800b4a6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b4a8:	e058      	b.n	800b55c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800b4aa:	7bbb      	ldrb	r3, [r7, #14]
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	2b02      	cmp	r3, #2
 800b4b0:	d154      	bne.n	800b55c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	220d      	movs	r2, #13
 800b4b6:	701a      	strb	r2, [r3, #0]
      break;
 800b4b8:	e050      	b.n	800b55c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	220d      	movs	r2, #13
 800b4be:	701a      	strb	r2, [r3, #0]
      break;
 800b4c0:	e04c      	b.n	800b55c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d049      	beq.n	800b560 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4d2:	695b      	ldr	r3, [r3, #20]
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	4798      	blx	r3
      }
      break;
 800b4d8:	e042      	b.n	800b560 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f7ff fd72 	bl	800afcc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d009      	beq.n	800b506 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4f8:	68db      	ldr	r3, [r3, #12]
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d005      	beq.n	800b51c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b516:	2105      	movs	r1, #5
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b522:	b2db      	uxtb	r3, r3
 800b524:	2b01      	cmp	r3, #1
 800b526:	d107      	bne.n	800b538 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2200      	movs	r2, #0
 800b52c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f7ff fe2b 	bl	800b18c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b536:	e014      	b.n	800b562 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f001 f9b5 	bl	800c8a8 <USBH_LL_Start>
      break;
 800b53e:	e010      	b.n	800b562 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800b540:	bf00      	nop
 800b542:	e00e      	b.n	800b562 <USBH_Process+0x3b6>
      break;
 800b544:	bf00      	nop
 800b546:	e00c      	b.n	800b562 <USBH_Process+0x3b6>
      break;
 800b548:	bf00      	nop
 800b54a:	e00a      	b.n	800b562 <USBH_Process+0x3b6>
    break;
 800b54c:	bf00      	nop
 800b54e:	e008      	b.n	800b562 <USBH_Process+0x3b6>
      break;
 800b550:	bf00      	nop
 800b552:	e006      	b.n	800b562 <USBH_Process+0x3b6>
      break;
 800b554:	bf00      	nop
 800b556:	e004      	b.n	800b562 <USBH_Process+0x3b6>
      break;
 800b558:	bf00      	nop
 800b55a:	e002      	b.n	800b562 <USBH_Process+0x3b6>
      break;
 800b55c:	bf00      	nop
 800b55e:	e000      	b.n	800b562 <USBH_Process+0x3b6>
      break;
 800b560:	bf00      	nop
  }
  return USBH_OK;
 800b562:	2300      	movs	r3, #0
}
 800b564:	4618      	mov	r0, r3
 800b566:	3710      	adds	r7, #16
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b088      	sub	sp, #32
 800b570:	af04      	add	r7, sp, #16
 800b572:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b574:	2301      	movs	r3, #1
 800b576:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b578:	2301      	movs	r3, #1
 800b57a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	785b      	ldrb	r3, [r3, #1]
 800b580:	2b07      	cmp	r3, #7
 800b582:	f200 81c1 	bhi.w	800b908 <USBH_HandleEnum+0x39c>
 800b586:	a201      	add	r2, pc, #4	; (adr r2, 800b58c <USBH_HandleEnum+0x20>)
 800b588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b58c:	0800b5ad 	.word	0x0800b5ad
 800b590:	0800b66b 	.word	0x0800b66b
 800b594:	0800b6d5 	.word	0x0800b6d5
 800b598:	0800b763 	.word	0x0800b763
 800b59c:	0800b7cd 	.word	0x0800b7cd
 800b5a0:	0800b83d 	.word	0x0800b83d
 800b5a4:	0800b883 	.word	0x0800b883
 800b5a8:	0800b8c9 	.word	0x0800b8c9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b5ac:	2108      	movs	r1, #8
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 fa50 	bl	800ba54 <USBH_Get_DevDesc>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b5b8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d130      	bne.n	800b620 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	7919      	ldrb	r1, [r3, #4]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b5e2:	b292      	uxth	r2, r2
 800b5e4:	9202      	str	r2, [sp, #8]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	9201      	str	r2, [sp, #4]
 800b5ea:	9300      	str	r3, [sp, #0]
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	2280      	movs	r2, #128	; 0x80
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 ff77 	bl	800c4e4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	7959      	ldrb	r1, [r3, #5]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b60a:	b292      	uxth	r2, r2
 800b60c:	9202      	str	r2, [sp, #8]
 800b60e:	2200      	movs	r2, #0
 800b610:	9201      	str	r2, [sp, #4]
 800b612:	9300      	str	r3, [sp, #0]
 800b614:	4603      	mov	r3, r0
 800b616:	2200      	movs	r2, #0
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f000 ff63 	bl	800c4e4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b61e:	e175      	b.n	800b90c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b620:	7bbb      	ldrb	r3, [r7, #14]
 800b622:	2b03      	cmp	r3, #3
 800b624:	f040 8172 	bne.w	800b90c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b62e:	3301      	adds	r3, #1
 800b630:	b2da      	uxtb	r2, r3
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b63e:	2b03      	cmp	r3, #3
 800b640:	d903      	bls.n	800b64a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	220d      	movs	r2, #13
 800b646:	701a      	strb	r2, [r3, #0]
      break;
 800b648:	e160      	b.n	800b90c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	795b      	ldrb	r3, [r3, #5]
 800b64e:	4619      	mov	r1, r3
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 ff97 	bl	800c584 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	791b      	ldrb	r3, [r3, #4]
 800b65a:	4619      	mov	r1, r3
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 ff91 	bl	800c584 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2200      	movs	r2, #0
 800b666:	701a      	strb	r2, [r3, #0]
      break;
 800b668:	e150      	b.n	800b90c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b66a:	2112      	movs	r1, #18
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 f9f1 	bl	800ba54 <USBH_Get_DevDesc>
 800b672:	4603      	mov	r3, r0
 800b674:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b676:	7bbb      	ldrb	r3, [r7, #14]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d103      	bne.n	800b684 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2202      	movs	r2, #2
 800b680:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b682:	e145      	b.n	800b910 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b684:	7bbb      	ldrb	r3, [r7, #14]
 800b686:	2b03      	cmp	r3, #3
 800b688:	f040 8142 	bne.w	800b910 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b692:	3301      	adds	r3, #1
 800b694:	b2da      	uxtb	r2, r3
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b6a2:	2b03      	cmp	r3, #3
 800b6a4:	d903      	bls.n	800b6ae <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	220d      	movs	r2, #13
 800b6aa:	701a      	strb	r2, [r3, #0]
      break;
 800b6ac:	e130      	b.n	800b910 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	795b      	ldrb	r3, [r3, #5]
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 ff65 	bl	800c584 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	791b      	ldrb	r3, [r3, #4]
 800b6be:	4619      	mov	r1, r3
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 ff5f 	bl	800c584 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	701a      	strb	r2, [r3, #0]
      break;
 800b6d2:	e11d      	b.n	800b910 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b6d4:	2101      	movs	r1, #1
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 fa68 	bl	800bbac <USBH_SetAddress>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b6e0:	7bbb      	ldrb	r3, [r7, #14]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d132      	bne.n	800b74c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b6e6:	2002      	movs	r0, #2
 800b6e8:	f001 fa42 	bl	800cb70 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2203      	movs	r2, #3
 800b6f8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	7919      	ldrb	r1, [r3, #4]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b70e:	b292      	uxth	r2, r2
 800b710:	9202      	str	r2, [sp, #8]
 800b712:	2200      	movs	r2, #0
 800b714:	9201      	str	r2, [sp, #4]
 800b716:	9300      	str	r3, [sp, #0]
 800b718:	4603      	mov	r3, r0
 800b71a:	2280      	movs	r2, #128	; 0x80
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 fee1 	bl	800c4e4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	7959      	ldrb	r1, [r3, #5]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b736:	b292      	uxth	r2, r2
 800b738:	9202      	str	r2, [sp, #8]
 800b73a:	2200      	movs	r2, #0
 800b73c:	9201      	str	r2, [sp, #4]
 800b73e:	9300      	str	r3, [sp, #0]
 800b740:	4603      	mov	r3, r0
 800b742:	2200      	movs	r2, #0
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 fecd 	bl	800c4e4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b74a:	e0e3      	b.n	800b914 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b74c:	7bbb      	ldrb	r3, [r7, #14]
 800b74e:	2b03      	cmp	r3, #3
 800b750:	f040 80e0 	bne.w	800b914 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	220d      	movs	r2, #13
 800b758:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2200      	movs	r2, #0
 800b75e:	705a      	strb	r2, [r3, #1]
      break;
 800b760:	e0d8      	b.n	800b914 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b762:	2109      	movs	r1, #9
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 f99d 	bl	800baa4 <USBH_Get_CfgDesc>
 800b76a:	4603      	mov	r3, r0
 800b76c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b76e:	7bbb      	ldrb	r3, [r7, #14]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d103      	bne.n	800b77c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2204      	movs	r2, #4
 800b778:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b77a:	e0cd      	b.n	800b918 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b77c:	7bbb      	ldrb	r3, [r7, #14]
 800b77e:	2b03      	cmp	r3, #3
 800b780:	f040 80ca 	bne.w	800b918 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b78a:	3301      	adds	r3, #1
 800b78c:	b2da      	uxtb	r2, r3
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b79a:	2b03      	cmp	r3, #3
 800b79c:	d903      	bls.n	800b7a6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	220d      	movs	r2, #13
 800b7a2:	701a      	strb	r2, [r3, #0]
      break;
 800b7a4:	e0b8      	b.n	800b918 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	795b      	ldrb	r3, [r3, #5]
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 fee9 	bl	800c584 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	791b      	ldrb	r3, [r3, #4]
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 fee3 	bl	800c584 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	701a      	strb	r2, [r3, #0]
      break;
 800b7ca:	e0a5      	b.n	800b918 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 f965 	bl	800baa4 <USBH_Get_CfgDesc>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b7de:	7bbb      	ldrb	r3, [r7, #14]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d103      	bne.n	800b7ec <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2205      	movs	r2, #5
 800b7e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b7ea:	e097      	b.n	800b91c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b7ec:	7bbb      	ldrb	r3, [r7, #14]
 800b7ee:	2b03      	cmp	r3, #3
 800b7f0:	f040 8094 	bne.w	800b91c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	b2da      	uxtb	r2, r3
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b80a:	2b03      	cmp	r3, #3
 800b80c:	d903      	bls.n	800b816 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	220d      	movs	r2, #13
 800b812:	701a      	strb	r2, [r3, #0]
      break;
 800b814:	e082      	b.n	800b91c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	795b      	ldrb	r3, [r3, #5]
 800b81a:	4619      	mov	r1, r3
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f000 feb1 	bl	800c584 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	791b      	ldrb	r3, [r3, #4]
 800b826:	4619      	mov	r1, r3
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f000 feab 	bl	800c584 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2200      	movs	r2, #0
 800b832:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2200      	movs	r2, #0
 800b838:	701a      	strb	r2, [r3, #0]
      break;
 800b83a:	e06f      	b.n	800b91c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b842:	2b00      	cmp	r3, #0
 800b844:	d019      	beq.n	800b87a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b852:	23ff      	movs	r3, #255	; 0xff
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 f949 	bl	800baec <USBH_Get_StringDesc>
 800b85a:	4603      	mov	r3, r0
 800b85c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b85e:	7bbb      	ldrb	r3, [r7, #14]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d103      	bne.n	800b86c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2206      	movs	r2, #6
 800b868:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b86a:	e059      	b.n	800b920 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b86c:	7bbb      	ldrb	r3, [r7, #14]
 800b86e:	2b03      	cmp	r3, #3
 800b870:	d156      	bne.n	800b920 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2206      	movs	r2, #6
 800b876:	705a      	strb	r2, [r3, #1]
      break;
 800b878:	e052      	b.n	800b920 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2206      	movs	r2, #6
 800b87e:	705a      	strb	r2, [r3, #1]
      break;
 800b880:	e04e      	b.n	800b920 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d019      	beq.n	800b8c0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b898:	23ff      	movs	r3, #255	; 0xff
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f000 f926 	bl	800baec <USBH_Get_StringDesc>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b8a4:	7bbb      	ldrb	r3, [r7, #14]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d103      	bne.n	800b8b2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2207      	movs	r2, #7
 800b8ae:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b8b0:	e038      	b.n	800b924 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b8b2:	7bbb      	ldrb	r3, [r7, #14]
 800b8b4:	2b03      	cmp	r3, #3
 800b8b6:	d135      	bne.n	800b924 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2207      	movs	r2, #7
 800b8bc:	705a      	strb	r2, [r3, #1]
      break;
 800b8be:	e031      	b.n	800b924 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2207      	movs	r2, #7
 800b8c4:	705a      	strb	r2, [r3, #1]
      break;
 800b8c6:	e02d      	b.n	800b924 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d017      	beq.n	800b902 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b8de:	23ff      	movs	r3, #255	; 0xff
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 f903 	bl	800baec <USBH_Get_StringDesc>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b8ea:	7bbb      	ldrb	r3, [r7, #14]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d102      	bne.n	800b8f6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b8f4:	e018      	b.n	800b928 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b8f6:	7bbb      	ldrb	r3, [r7, #14]
 800b8f8:	2b03      	cmp	r3, #3
 800b8fa:	d115      	bne.n	800b928 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	73fb      	strb	r3, [r7, #15]
      break;
 800b900:	e012      	b.n	800b928 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b902:	2300      	movs	r3, #0
 800b904:	73fb      	strb	r3, [r7, #15]
      break;
 800b906:	e00f      	b.n	800b928 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b908:	bf00      	nop
 800b90a:	e00e      	b.n	800b92a <USBH_HandleEnum+0x3be>
      break;
 800b90c:	bf00      	nop
 800b90e:	e00c      	b.n	800b92a <USBH_HandleEnum+0x3be>
      break;
 800b910:	bf00      	nop
 800b912:	e00a      	b.n	800b92a <USBH_HandleEnum+0x3be>
      break;
 800b914:	bf00      	nop
 800b916:	e008      	b.n	800b92a <USBH_HandleEnum+0x3be>
      break;
 800b918:	bf00      	nop
 800b91a:	e006      	b.n	800b92a <USBH_HandleEnum+0x3be>
      break;
 800b91c:	bf00      	nop
 800b91e:	e004      	b.n	800b92a <USBH_HandleEnum+0x3be>
      break;
 800b920:	bf00      	nop
 800b922:	e002      	b.n	800b92a <USBH_HandleEnum+0x3be>
      break;
 800b924:	bf00      	nop
 800b926:	e000      	b.n	800b92a <USBH_HandleEnum+0x3be>
      break;
 800b928:	bf00      	nop
  }
  return Status;
 800b92a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3710      	adds	r7, #16
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	683a      	ldr	r2, [r7, #0]
 800b942:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b946:	bf00      	nop
 800b948:	370c      	adds	r7, #12
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr

0800b952 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b082      	sub	sp, #8
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b960:	1c5a      	adds	r2, r3, #1
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f000 f804 	bl	800b976 <USBH_HandleSof>
}
 800b96e:	bf00      	nop
 800b970:	3708      	adds	r7, #8
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}

0800b976 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b976:	b580      	push	{r7, lr}
 800b978:	b082      	sub	sp, #8
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	b2db      	uxtb	r3, r3
 800b984:	2b0b      	cmp	r3, #11
 800b986:	d10a      	bne.n	800b99e <USBH_HandleSof+0x28>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d005      	beq.n	800b99e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b998:	699b      	ldr	r3, [r3, #24]
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	4798      	blx	r3
  }
}
 800b99e:	bf00      	nop
 800b9a0:	3708      	adds	r7, #8
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b9a6:	b480      	push	{r7}
 800b9a8:	b083      	sub	sp, #12
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b9b6:	bf00      	nop
}
 800b9b8:	370c      	adds	r7, #12
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr

0800b9c2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b9c2:	b480      	push	{r7}
 800b9c4:	b083      	sub	sp, #12
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b9d2:	bf00      	nop
}
 800b9d4:	370c      	adds	r7, #12
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr

0800b9de <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b9de:	b480      	push	{r7}
 800b9e0:	b083      	sub	sp, #12
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b9fe:	2300      	movs	r3, #0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	370c      	adds	r7, #12
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr

0800ba0c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b082      	sub	sp, #8
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2201      	movs	r2, #1
 800ba18:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2200      	movs	r2, #0
 800ba28:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 ff56 	bl	800c8de <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	791b      	ldrb	r3, [r3, #4]
 800ba36:	4619      	mov	r1, r3
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 fda3 	bl	800c584 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	795b      	ldrb	r3, [r3, #5]
 800ba42:	4619      	mov	r1, r3
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 fd9d 	bl	800c584 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ba4a:	2300      	movs	r3, #0
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3708      	adds	r7, #8
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b086      	sub	sp, #24
 800ba58:	af02      	add	r7, sp, #8
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ba66:	78fb      	ldrb	r3, [r7, #3]
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	9300      	str	r3, [sp, #0]
 800ba6c:	4613      	mov	r3, r2
 800ba6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba72:	2100      	movs	r1, #0
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f000 f864 	bl	800bb42 <USBH_GetDescriptor>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	73fb      	strb	r3, [r7, #15]
 800ba7e:	7bfb      	ldrb	r3, [r7, #15]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d10a      	bne.n	800ba9a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ba90:	78fa      	ldrb	r2, [r7, #3]
 800ba92:	b292      	uxth	r2, r2
 800ba94:	4619      	mov	r1, r3
 800ba96:	f000 f918 	bl	800bcca <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ba9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3710      	adds	r7, #16
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af02      	add	r7, sp, #8
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	460b      	mov	r3, r1
 800baae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	331c      	adds	r3, #28
 800bab4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800bab6:	887b      	ldrh	r3, [r7, #2]
 800bab8:	9300      	str	r3, [sp, #0]
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bac0:	2100      	movs	r1, #0
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 f83d 	bl	800bb42 <USBH_GetDescriptor>
 800bac8:	4603      	mov	r3, r0
 800baca:	72fb      	strb	r3, [r7, #11]
 800bacc:	7afb      	ldrb	r3, [r7, #11]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d107      	bne.n	800bae2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bad8:	887a      	ldrh	r2, [r7, #2]
 800bada:	68f9      	ldr	r1, [r7, #12]
 800badc:	4618      	mov	r0, r3
 800bade:	f000 f964 	bl	800bdaa <USBH_ParseCfgDesc>
  }

  return status;
 800bae2:	7afb      	ldrb	r3, [r7, #11]
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3710      	adds	r7, #16
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b088      	sub	sp, #32
 800baf0:	af02      	add	r7, sp, #8
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	607a      	str	r2, [r7, #4]
 800baf6:	461a      	mov	r2, r3
 800baf8:	460b      	mov	r3, r1
 800bafa:	72fb      	strb	r3, [r7, #11]
 800bafc:	4613      	mov	r3, r2
 800bafe:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800bb00:	7afb      	ldrb	r3, [r7, #11]
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800bb08:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800bb10:	893b      	ldrh	r3, [r7, #8]
 800bb12:	9300      	str	r3, [sp, #0]
 800bb14:	460b      	mov	r3, r1
 800bb16:	2100      	movs	r1, #0
 800bb18:	68f8      	ldr	r0, [r7, #12]
 800bb1a:	f000 f812 	bl	800bb42 <USBH_GetDescriptor>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	75fb      	strb	r3, [r7, #23]
 800bb22:	7dfb      	ldrb	r3, [r7, #23]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d107      	bne.n	800bb38 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bb2e:	893a      	ldrh	r2, [r7, #8]
 800bb30:	6879      	ldr	r1, [r7, #4]
 800bb32:	4618      	mov	r0, r3
 800bb34:	f000 fa37 	bl	800bfa6 <USBH_ParseStringDesc>
  }

  return status;
 800bb38:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3718      	adds	r7, #24
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}

0800bb42 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800bb42:	b580      	push	{r7, lr}
 800bb44:	b084      	sub	sp, #16
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	60f8      	str	r0, [r7, #12]
 800bb4a:	607b      	str	r3, [r7, #4]
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	72fb      	strb	r3, [r7, #11]
 800bb50:	4613      	mov	r3, r2
 800bb52:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	789b      	ldrb	r3, [r3, #2]
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d11c      	bne.n	800bb96 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800bb5c:	7afb      	ldrb	r3, [r7, #11]
 800bb5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bb62:	b2da      	uxtb	r2, r3
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2206      	movs	r2, #6
 800bb6c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	893a      	ldrh	r2, [r7, #8]
 800bb72:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800bb74:	893b      	ldrh	r3, [r7, #8]
 800bb76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bb7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb7e:	d104      	bne.n	800bb8a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f240 4209 	movw	r2, #1033	; 0x409
 800bb86:	829a      	strh	r2, [r3, #20]
 800bb88:	e002      	b.n	800bb90 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	8b3a      	ldrh	r2, [r7, #24]
 800bb94:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800bb96:	8b3b      	ldrh	r3, [r7, #24]
 800bb98:	461a      	mov	r2, r3
 800bb9a:	6879      	ldr	r1, [r7, #4]
 800bb9c:	68f8      	ldr	r0, [r7, #12]
 800bb9e:	f000 fa50 	bl	800c042 <USBH_CtlReq>
 800bba2:	4603      	mov	r3, r0
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3710      	adds	r7, #16
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b082      	sub	sp, #8
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	789b      	ldrb	r3, [r3, #2]
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d10f      	bne.n	800bbe0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2205      	movs	r2, #5
 800bbca:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bbcc:	78fb      	ldrb	r3, [r7, #3]
 800bbce:	b29a      	uxth	r2, r3
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	2100      	movs	r1, #0
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 fa2c 	bl	800c042 <USBH_CtlReq>
 800bbea:	4603      	mov	r3, r0
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3708      	adds	r7, #8
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	789b      	ldrb	r3, [r3, #2]
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d10e      	bne.n	800bc26 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2209      	movs	r2, #9
 800bc12:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	887a      	ldrh	r2, [r7, #2]
 800bc18:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2200      	movs	r2, #0
 800bc24:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bc26:	2200      	movs	r2, #0
 800bc28:	2100      	movs	r1, #0
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 fa09 	bl	800c042 <USBH_CtlReq>
 800bc30:	4603      	mov	r3, r0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3708      	adds	r7, #8
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}

0800bc3a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bc3a:	b580      	push	{r7, lr}
 800bc3c:	b082      	sub	sp, #8
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
 800bc42:	460b      	mov	r3, r1
 800bc44:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	789b      	ldrb	r3, [r3, #2]
 800bc4a:	2b01      	cmp	r3, #1
 800bc4c:	d10f      	bne.n	800bc6e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2200      	movs	r2, #0
 800bc52:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2203      	movs	r2, #3
 800bc58:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bc5a:	78fb      	ldrb	r3, [r7, #3]
 800bc5c:	b29a      	uxth	r2, r3
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2200      	movs	r2, #0
 800bc66:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bc6e:	2200      	movs	r2, #0
 800bc70:	2100      	movs	r1, #0
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 f9e5 	bl	800c042 <USBH_CtlReq>
 800bc78:	4603      	mov	r3, r0
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3708      	adds	r7, #8
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}

0800bc82 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b082      	sub	sp, #8
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	789b      	ldrb	r3, [r3, #2]
 800bc92:	2b01      	cmp	r3, #1
 800bc94:	d10f      	bne.n	800bcb6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2202      	movs	r2, #2
 800bc9a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2201      	movs	r2, #1
 800bca0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2200      	movs	r2, #0
 800bca6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bca8:	78fb      	ldrb	r3, [r7, #3]
 800bcaa:	b29a      	uxth	r2, r3
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	2100      	movs	r1, #0
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f000 f9c1 	bl	800c042 <USBH_CtlReq>
 800bcc0:	4603      	mov	r3, r0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3708      	adds	r7, #8
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}

0800bcca <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800bcca:	b480      	push	{r7}
 800bccc:	b085      	sub	sp, #20
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	60f8      	str	r0, [r7, #12]
 800bcd2:	60b9      	str	r1, [r7, #8]
 800bcd4:	4613      	mov	r3, r2
 800bcd6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	781a      	ldrb	r2, [r3, #0]
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	785a      	ldrb	r2, [r3, #1]
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	3302      	adds	r3, #2
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	b29a      	uxth	r2, r3
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	3303      	adds	r3, #3
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	021b      	lsls	r3, r3, #8
 800bcfa:	b29b      	uxth	r3, r3
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	b29a      	uxth	r2, r3
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	791a      	ldrb	r2, [r3, #4]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	795a      	ldrb	r2, [r3, #5]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	799a      	ldrb	r2, [r3, #6]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	79da      	ldrb	r2, [r3, #7]
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800bd24:	88fb      	ldrh	r3, [r7, #6]
 800bd26:	2b08      	cmp	r3, #8
 800bd28:	d939      	bls.n	800bd9e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	3308      	adds	r3, #8
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	b29a      	uxth	r2, r3
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	3309      	adds	r3, #9
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	021b      	lsls	r3, r3, #8
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	b29a      	uxth	r2, r3
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	330a      	adds	r3, #10
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	b29a      	uxth	r2, r3
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	330b      	adds	r3, #11
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	021b      	lsls	r3, r3, #8
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	b29a      	uxth	r2, r3
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	330c      	adds	r3, #12
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	b29a      	uxth	r2, r3
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	330d      	adds	r3, #13
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	021b      	lsls	r3, r3, #8
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	4313      	orrs	r3, r2
 800bd78:	b29a      	uxth	r2, r3
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	7b9a      	ldrb	r2, [r3, #14]
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	7bda      	ldrb	r2, [r3, #15]
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	7c1a      	ldrb	r2, [r3, #16]
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	7c5a      	ldrb	r2, [r3, #17]
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	745a      	strb	r2, [r3, #17]
  }
}
 800bd9e:	bf00      	nop
 800bda0:	3714      	adds	r7, #20
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr

0800bdaa <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b08a      	sub	sp, #40	; 0x28
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	60f8      	str	r0, [r7, #12]
 800bdb2:	60b9      	str	r1, [r7, #8]
 800bdb4:	4613      	mov	r3, r2
 800bdb6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	781a      	ldrb	r2, [r3, #0]
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	785a      	ldrb	r2, [r3, #1]
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	3302      	adds	r3, #2
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	b29a      	uxth	r2, r3
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	3303      	adds	r3, #3
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	021b      	lsls	r3, r3, #8
 800bdee:	b29b      	uxth	r3, r3
 800bdf0:	4313      	orrs	r3, r2
 800bdf2:	b29a      	uxth	r2, r3
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	791a      	ldrb	r2, [r3, #4]
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	795a      	ldrb	r2, [r3, #5]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	799a      	ldrb	r2, [r3, #6]
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	79da      	ldrb	r2, [r3, #7]
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	7a1a      	ldrb	r2, [r3, #8]
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800be20:	88fb      	ldrh	r3, [r7, #6]
 800be22:	2b09      	cmp	r3, #9
 800be24:	d95f      	bls.n	800bee6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800be26:	2309      	movs	r3, #9
 800be28:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800be2a:	2300      	movs	r3, #0
 800be2c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800be2e:	e051      	b.n	800bed4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800be30:	f107 0316 	add.w	r3, r7, #22
 800be34:	4619      	mov	r1, r3
 800be36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be38:	f000 f8e8 	bl	800c00c <USBH_GetNextDesc>
 800be3c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800be3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be40:	785b      	ldrb	r3, [r3, #1]
 800be42:	2b04      	cmp	r3, #4
 800be44:	d146      	bne.n	800bed4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800be46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800be4a:	221a      	movs	r2, #26
 800be4c:	fb02 f303 	mul.w	r3, r2, r3
 800be50:	3308      	adds	r3, #8
 800be52:	68fa      	ldr	r2, [r7, #12]
 800be54:	4413      	add	r3, r2
 800be56:	3302      	adds	r3, #2
 800be58:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800be5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be5c:	69f8      	ldr	r0, [r7, #28]
 800be5e:	f000 f846 	bl	800beee <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800be62:	2300      	movs	r3, #0
 800be64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800be68:	2300      	movs	r3, #0
 800be6a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800be6c:	e022      	b.n	800beb4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800be6e:	f107 0316 	add.w	r3, r7, #22
 800be72:	4619      	mov	r1, r3
 800be74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be76:	f000 f8c9 	bl	800c00c <USBH_GetNextDesc>
 800be7a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800be7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7e:	785b      	ldrb	r3, [r3, #1]
 800be80:	2b05      	cmp	r3, #5
 800be82:	d117      	bne.n	800beb4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800be84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800be88:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800be8c:	3201      	adds	r2, #1
 800be8e:	00d2      	lsls	r2, r2, #3
 800be90:	211a      	movs	r1, #26
 800be92:	fb01 f303 	mul.w	r3, r1, r3
 800be96:	4413      	add	r3, r2
 800be98:	3308      	adds	r3, #8
 800be9a:	68fa      	ldr	r2, [r7, #12]
 800be9c:	4413      	add	r3, r2
 800be9e:	3304      	adds	r3, #4
 800bea0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800bea2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bea4:	69b8      	ldr	r0, [r7, #24]
 800bea6:	f000 f851 	bl	800bf4c <USBH_ParseEPDesc>
            ep_ix++;
 800beaa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800beae:	3301      	adds	r3, #1
 800beb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	791b      	ldrb	r3, [r3, #4]
 800beb8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bebc:	429a      	cmp	r2, r3
 800bebe:	d204      	bcs.n	800beca <USBH_ParseCfgDesc+0x120>
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	885a      	ldrh	r2, [r3, #2]
 800bec4:	8afb      	ldrh	r3, [r7, #22]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d8d1      	bhi.n	800be6e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800beca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bece:	3301      	adds	r3, #1
 800bed0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bed4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d804      	bhi.n	800bee6 <USBH_ParseCfgDesc+0x13c>
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	885a      	ldrh	r2, [r3, #2]
 800bee0:	8afb      	ldrh	r3, [r7, #22]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d8a4      	bhi.n	800be30 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800bee6:	bf00      	nop
 800bee8:	3728      	adds	r7, #40	; 0x28
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}

0800beee <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800beee:	b480      	push	{r7}
 800bef0:	b083      	sub	sp, #12
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
 800bef6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	781a      	ldrb	r2, [r3, #0]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	785a      	ldrb	r2, [r3, #1]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	789a      	ldrb	r2, [r3, #2]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	78da      	ldrb	r2, [r3, #3]
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	791a      	ldrb	r2, [r3, #4]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	795a      	ldrb	r2, [r3, #5]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	799a      	ldrb	r2, [r3, #6]
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	79da      	ldrb	r2, [r3, #7]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	7a1a      	ldrb	r2, [r3, #8]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	721a      	strb	r2, [r3, #8]
}
 800bf40:	bf00      	nop
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b083      	sub	sp, #12
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	781a      	ldrb	r2, [r3, #0]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	785a      	ldrb	r2, [r3, #1]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	789a      	ldrb	r2, [r3, #2]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	78da      	ldrb	r2, [r3, #3]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	3304      	adds	r3, #4
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	b29a      	uxth	r2, r3
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	3305      	adds	r3, #5
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	b29b      	uxth	r3, r3
 800bf86:	021b      	lsls	r3, r3, #8
 800bf88:	b29b      	uxth	r3, r3
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	b29a      	uxth	r2, r3
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	799a      	ldrb	r2, [r3, #6]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	719a      	strb	r2, [r3, #6]
}
 800bf9a:	bf00      	nop
 800bf9c:	370c      	adds	r7, #12
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr

0800bfa6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800bfa6:	b480      	push	{r7}
 800bfa8:	b087      	sub	sp, #28
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	60f8      	str	r0, [r7, #12]
 800bfae:	60b9      	str	r1, [r7, #8]
 800bfb0:	4613      	mov	r3, r2
 800bfb2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	2b03      	cmp	r3, #3
 800bfbc:	d120      	bne.n	800c000 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	1e9a      	subs	r2, r3, #2
 800bfc4:	88fb      	ldrh	r3, [r7, #6]
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	bf28      	it	cs
 800bfca:	4613      	movcs	r3, r2
 800bfcc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	3302      	adds	r3, #2
 800bfd2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	82fb      	strh	r3, [r7, #22]
 800bfd8:	e00b      	b.n	800bff2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bfda:	8afb      	ldrh	r3, [r7, #22]
 800bfdc:	68fa      	ldr	r2, [r7, #12]
 800bfde:	4413      	add	r3, r2
 800bfe0:	781a      	ldrb	r2, [r3, #0]
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	701a      	strb	r2, [r3, #0]
      pdest++;
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	3301      	adds	r3, #1
 800bfea:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bfec:	8afb      	ldrh	r3, [r7, #22]
 800bfee:	3302      	adds	r3, #2
 800bff0:	82fb      	strh	r3, [r7, #22]
 800bff2:	8afa      	ldrh	r2, [r7, #22]
 800bff4:	8abb      	ldrh	r3, [r7, #20]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d3ef      	bcc.n	800bfda <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	2200      	movs	r2, #0
 800bffe:	701a      	strb	r2, [r3, #0]
  }
}
 800c000:	bf00      	nop
 800c002:	371c      	adds	r7, #28
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr

0800c00c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b085      	sub	sp, #20
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	881a      	ldrh	r2, [r3, #0]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	b29b      	uxth	r3, r3
 800c020:	4413      	add	r3, r2
 800c022:	b29a      	uxth	r2, r3
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	4413      	add	r3, r2
 800c032:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c034:	68fb      	ldr	r3, [r7, #12]
}
 800c036:	4618      	mov	r0, r3
 800c038:	3714      	adds	r7, #20
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr

0800c042 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b086      	sub	sp, #24
 800c046:	af00      	add	r7, sp, #0
 800c048:	60f8      	str	r0, [r7, #12]
 800c04a:	60b9      	str	r1, [r7, #8]
 800c04c:	4613      	mov	r3, r2
 800c04e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c050:	2301      	movs	r3, #1
 800c052:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	789b      	ldrb	r3, [r3, #2]
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d002      	beq.n	800c062 <USBH_CtlReq+0x20>
 800c05c:	2b02      	cmp	r3, #2
 800c05e:	d00f      	beq.n	800c080 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c060:	e027      	b.n	800c0b2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	68ba      	ldr	r2, [r7, #8]
 800c066:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	88fa      	ldrh	r2, [r7, #6]
 800c06c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2201      	movs	r2, #1
 800c072:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2202      	movs	r2, #2
 800c078:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c07a:	2301      	movs	r3, #1
 800c07c:	75fb      	strb	r3, [r7, #23]
      break;
 800c07e:	e018      	b.n	800c0b2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c080:	68f8      	ldr	r0, [r7, #12]
 800c082:	f000 f81b 	bl	800c0bc <USBH_HandleControl>
 800c086:	4603      	mov	r3, r0
 800c088:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c08a:	7dfb      	ldrb	r3, [r7, #23]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d002      	beq.n	800c096 <USBH_CtlReq+0x54>
 800c090:	7dfb      	ldrb	r3, [r7, #23]
 800c092:	2b03      	cmp	r3, #3
 800c094:	d106      	bne.n	800c0a4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2201      	movs	r2, #1
 800c09a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	761a      	strb	r2, [r3, #24]
      break;
 800c0a2:	e005      	b.n	800c0b0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c0a4:	7dfb      	ldrb	r3, [r7, #23]
 800c0a6:	2b02      	cmp	r3, #2
 800c0a8:	d102      	bne.n	800c0b0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	709a      	strb	r2, [r3, #2]
      break;
 800c0b0:	bf00      	nop
  }
  return status;
 800c0b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3718      	adds	r7, #24
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b086      	sub	sp, #24
 800c0c0:	af02      	add	r7, sp, #8
 800c0c2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	7e1b      	ldrb	r3, [r3, #24]
 800c0d0:	3b01      	subs	r3, #1
 800c0d2:	2b0a      	cmp	r3, #10
 800c0d4:	f200 8156 	bhi.w	800c384 <USBH_HandleControl+0x2c8>
 800c0d8:	a201      	add	r2, pc, #4	; (adr r2, 800c0e0 <USBH_HandleControl+0x24>)
 800c0da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0de:	bf00      	nop
 800c0e0:	0800c10d 	.word	0x0800c10d
 800c0e4:	0800c127 	.word	0x0800c127
 800c0e8:	0800c191 	.word	0x0800c191
 800c0ec:	0800c1b7 	.word	0x0800c1b7
 800c0f0:	0800c1ef 	.word	0x0800c1ef
 800c0f4:	0800c219 	.word	0x0800c219
 800c0f8:	0800c26b 	.word	0x0800c26b
 800c0fc:	0800c28d 	.word	0x0800c28d
 800c100:	0800c2c9 	.word	0x0800c2c9
 800c104:	0800c2ef 	.word	0x0800c2ef
 800c108:	0800c32d 	.word	0x0800c32d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f103 0110 	add.w	r1, r3, #16
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	795b      	ldrb	r3, [r3, #5]
 800c116:	461a      	mov	r2, r3
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f000 f943 	bl	800c3a4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2202      	movs	r2, #2
 800c122:	761a      	strb	r2, [r3, #24]
      break;
 800c124:	e139      	b.n	800c39a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	795b      	ldrb	r3, [r3, #5]
 800c12a:	4619      	mov	r1, r3
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 fcc5 	bl	800cabc <USBH_LL_GetURBState>
 800c132:	4603      	mov	r3, r0
 800c134:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c136:	7bbb      	ldrb	r3, [r7, #14]
 800c138:	2b01      	cmp	r3, #1
 800c13a:	d11e      	bne.n	800c17a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	7c1b      	ldrb	r3, [r3, #16]
 800c140:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c144:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	8adb      	ldrh	r3, [r3, #22]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d00a      	beq.n	800c164 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c14e:	7b7b      	ldrb	r3, [r7, #13]
 800c150:	2b80      	cmp	r3, #128	; 0x80
 800c152:	d103      	bne.n	800c15c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2203      	movs	r2, #3
 800c158:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c15a:	e115      	b.n	800c388 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2205      	movs	r2, #5
 800c160:	761a      	strb	r2, [r3, #24]
      break;
 800c162:	e111      	b.n	800c388 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c164:	7b7b      	ldrb	r3, [r7, #13]
 800c166:	2b80      	cmp	r3, #128	; 0x80
 800c168:	d103      	bne.n	800c172 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2209      	movs	r2, #9
 800c16e:	761a      	strb	r2, [r3, #24]
      break;
 800c170:	e10a      	b.n	800c388 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2207      	movs	r2, #7
 800c176:	761a      	strb	r2, [r3, #24]
      break;
 800c178:	e106      	b.n	800c388 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c17a:	7bbb      	ldrb	r3, [r7, #14]
 800c17c:	2b04      	cmp	r3, #4
 800c17e:	d003      	beq.n	800c188 <USBH_HandleControl+0xcc>
 800c180:	7bbb      	ldrb	r3, [r7, #14]
 800c182:	2b02      	cmp	r3, #2
 800c184:	f040 8100 	bne.w	800c388 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	220b      	movs	r2, #11
 800c18c:	761a      	strb	r2, [r3, #24]
      break;
 800c18e:	e0fb      	b.n	800c388 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c196:	b29a      	uxth	r2, r3
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6899      	ldr	r1, [r3, #8]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	899a      	ldrh	r2, [r3, #12]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	791b      	ldrb	r3, [r3, #4]
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 f93a 	bl	800c422 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2204      	movs	r2, #4
 800c1b2:	761a      	strb	r2, [r3, #24]
      break;
 800c1b4:	e0f1      	b.n	800c39a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	791b      	ldrb	r3, [r3, #4]
 800c1ba:	4619      	mov	r1, r3
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 fc7d 	bl	800cabc <USBH_LL_GetURBState>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c1c6:	7bbb      	ldrb	r3, [r7, #14]
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d102      	bne.n	800c1d2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2209      	movs	r2, #9
 800c1d0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c1d2:	7bbb      	ldrb	r3, [r7, #14]
 800c1d4:	2b05      	cmp	r3, #5
 800c1d6:	d102      	bne.n	800c1de <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c1d8:	2303      	movs	r3, #3
 800c1da:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c1dc:	e0d6      	b.n	800c38c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c1de:	7bbb      	ldrb	r3, [r7, #14]
 800c1e0:	2b04      	cmp	r3, #4
 800c1e2:	f040 80d3 	bne.w	800c38c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	220b      	movs	r2, #11
 800c1ea:	761a      	strb	r2, [r3, #24]
      break;
 800c1ec:	e0ce      	b.n	800c38c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6899      	ldr	r1, [r3, #8]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	899a      	ldrh	r2, [r3, #12]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	795b      	ldrb	r3, [r3, #5]
 800c1fa:	2001      	movs	r0, #1
 800c1fc:	9000      	str	r0, [sp, #0]
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f000 f8ea 	bl	800c3d8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c20a:	b29a      	uxth	r2, r3
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2206      	movs	r2, #6
 800c214:	761a      	strb	r2, [r3, #24]
      break;
 800c216:	e0c0      	b.n	800c39a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	795b      	ldrb	r3, [r3, #5]
 800c21c:	4619      	mov	r1, r3
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 fc4c 	bl	800cabc <USBH_LL_GetURBState>
 800c224:	4603      	mov	r3, r0
 800c226:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c228:	7bbb      	ldrb	r3, [r7, #14]
 800c22a:	2b01      	cmp	r3, #1
 800c22c:	d103      	bne.n	800c236 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2207      	movs	r2, #7
 800c232:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c234:	e0ac      	b.n	800c390 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c236:	7bbb      	ldrb	r3, [r7, #14]
 800c238:	2b05      	cmp	r3, #5
 800c23a:	d105      	bne.n	800c248 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	220c      	movs	r2, #12
 800c240:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c242:	2303      	movs	r3, #3
 800c244:	73fb      	strb	r3, [r7, #15]
      break;
 800c246:	e0a3      	b.n	800c390 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c248:	7bbb      	ldrb	r3, [r7, #14]
 800c24a:	2b02      	cmp	r3, #2
 800c24c:	d103      	bne.n	800c256 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2205      	movs	r2, #5
 800c252:	761a      	strb	r2, [r3, #24]
      break;
 800c254:	e09c      	b.n	800c390 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c256:	7bbb      	ldrb	r3, [r7, #14]
 800c258:	2b04      	cmp	r3, #4
 800c25a:	f040 8099 	bne.w	800c390 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	220b      	movs	r2, #11
 800c262:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c264:	2302      	movs	r3, #2
 800c266:	73fb      	strb	r3, [r7, #15]
      break;
 800c268:	e092      	b.n	800c390 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	791b      	ldrb	r3, [r3, #4]
 800c26e:	2200      	movs	r2, #0
 800c270:	2100      	movs	r1, #0
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 f8d5 	bl	800c422 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c27e:	b29a      	uxth	r2, r3
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2208      	movs	r2, #8
 800c288:	761a      	strb	r2, [r3, #24]

      break;
 800c28a:	e086      	b.n	800c39a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	791b      	ldrb	r3, [r3, #4]
 800c290:	4619      	mov	r1, r3
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f000 fc12 	bl	800cabc <USBH_LL_GetURBState>
 800c298:	4603      	mov	r3, r0
 800c29a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c29c:	7bbb      	ldrb	r3, [r7, #14]
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d105      	bne.n	800c2ae <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	220d      	movs	r2, #13
 800c2a6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c2ac:	e072      	b.n	800c394 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c2ae:	7bbb      	ldrb	r3, [r7, #14]
 800c2b0:	2b04      	cmp	r3, #4
 800c2b2:	d103      	bne.n	800c2bc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	220b      	movs	r2, #11
 800c2b8:	761a      	strb	r2, [r3, #24]
      break;
 800c2ba:	e06b      	b.n	800c394 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c2bc:	7bbb      	ldrb	r3, [r7, #14]
 800c2be:	2b05      	cmp	r3, #5
 800c2c0:	d168      	bne.n	800c394 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c2c2:	2303      	movs	r3, #3
 800c2c4:	73fb      	strb	r3, [r7, #15]
      break;
 800c2c6:	e065      	b.n	800c394 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	795b      	ldrb	r3, [r3, #5]
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	9200      	str	r2, [sp, #0]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	2100      	movs	r1, #0
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 f87f 	bl	800c3d8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c2e0:	b29a      	uxth	r2, r3
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	220a      	movs	r2, #10
 800c2ea:	761a      	strb	r2, [r3, #24]
      break;
 800c2ec:	e055      	b.n	800c39a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	795b      	ldrb	r3, [r3, #5]
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 fbe1 	bl	800cabc <USBH_LL_GetURBState>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c2fe:	7bbb      	ldrb	r3, [r7, #14]
 800c300:	2b01      	cmp	r3, #1
 800c302:	d105      	bne.n	800c310 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c304:	2300      	movs	r3, #0
 800c306:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	220d      	movs	r2, #13
 800c30c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c30e:	e043      	b.n	800c398 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c310:	7bbb      	ldrb	r3, [r7, #14]
 800c312:	2b02      	cmp	r3, #2
 800c314:	d103      	bne.n	800c31e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2209      	movs	r2, #9
 800c31a:	761a      	strb	r2, [r3, #24]
      break;
 800c31c:	e03c      	b.n	800c398 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c31e:	7bbb      	ldrb	r3, [r7, #14]
 800c320:	2b04      	cmp	r3, #4
 800c322:	d139      	bne.n	800c398 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	220b      	movs	r2, #11
 800c328:	761a      	strb	r2, [r3, #24]
      break;
 800c32a:	e035      	b.n	800c398 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	7e5b      	ldrb	r3, [r3, #25]
 800c330:	3301      	adds	r3, #1
 800c332:	b2da      	uxtb	r2, r3
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	765a      	strb	r2, [r3, #25]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	7e5b      	ldrb	r3, [r3, #25]
 800c33c:	2b02      	cmp	r3, #2
 800c33e:	d806      	bhi.n	800c34e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2201      	movs	r2, #1
 800c344:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2201      	movs	r2, #1
 800c34a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c34c:	e025      	b.n	800c39a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c354:	2106      	movs	r1, #6
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2200      	movs	r2, #0
 800c35e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	795b      	ldrb	r3, [r3, #5]
 800c364:	4619      	mov	r1, r3
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f000 f90c 	bl	800c584 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	791b      	ldrb	r3, [r3, #4]
 800c370:	4619      	mov	r1, r3
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 f906 	bl	800c584 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2200      	movs	r2, #0
 800c37c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c37e:	2302      	movs	r3, #2
 800c380:	73fb      	strb	r3, [r7, #15]
      break;
 800c382:	e00a      	b.n	800c39a <USBH_HandleControl+0x2de>

    default:
      break;
 800c384:	bf00      	nop
 800c386:	e008      	b.n	800c39a <USBH_HandleControl+0x2de>
      break;
 800c388:	bf00      	nop
 800c38a:	e006      	b.n	800c39a <USBH_HandleControl+0x2de>
      break;
 800c38c:	bf00      	nop
 800c38e:	e004      	b.n	800c39a <USBH_HandleControl+0x2de>
      break;
 800c390:	bf00      	nop
 800c392:	e002      	b.n	800c39a <USBH_HandleControl+0x2de>
      break;
 800c394:	bf00      	nop
 800c396:	e000      	b.n	800c39a <USBH_HandleControl+0x2de>
      break;
 800c398:	bf00      	nop
  }

  return status;
 800c39a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3710      	adds	r7, #16
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b088      	sub	sp, #32
 800c3a8:	af04      	add	r7, sp, #16
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	4613      	mov	r3, r2
 800c3b0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c3b2:	79f9      	ldrb	r1, [r7, #7]
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	9303      	str	r3, [sp, #12]
 800c3b8:	2308      	movs	r3, #8
 800c3ba:	9302      	str	r3, [sp, #8]
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	9301      	str	r3, [sp, #4]
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	9300      	str	r3, [sp, #0]
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	68f8      	ldr	r0, [r7, #12]
 800c3ca:	f000 fb46 	bl	800ca5a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800c3ce:	2300      	movs	r3, #0
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3710      	adds	r7, #16
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b088      	sub	sp, #32
 800c3dc:	af04      	add	r7, sp, #16
 800c3de:	60f8      	str	r0, [r7, #12]
 800c3e0:	60b9      	str	r1, [r7, #8]
 800c3e2:	4611      	mov	r1, r2
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	460b      	mov	r3, r1
 800c3e8:	80fb      	strh	r3, [r7, #6]
 800c3ea:	4613      	mov	r3, r2
 800c3ec:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d001      	beq.n	800c3fc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c3fc:	7979      	ldrb	r1, [r7, #5]
 800c3fe:	7e3b      	ldrb	r3, [r7, #24]
 800c400:	9303      	str	r3, [sp, #12]
 800c402:	88fb      	ldrh	r3, [r7, #6]
 800c404:	9302      	str	r3, [sp, #8]
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	9301      	str	r3, [sp, #4]
 800c40a:	2301      	movs	r3, #1
 800c40c:	9300      	str	r3, [sp, #0]
 800c40e:	2300      	movs	r3, #0
 800c410:	2200      	movs	r2, #0
 800c412:	68f8      	ldr	r0, [r7, #12]
 800c414:	f000 fb21 	bl	800ca5a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c418:	2300      	movs	r3, #0
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3710      	adds	r7, #16
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}

0800c422 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c422:	b580      	push	{r7, lr}
 800c424:	b088      	sub	sp, #32
 800c426:	af04      	add	r7, sp, #16
 800c428:	60f8      	str	r0, [r7, #12]
 800c42a:	60b9      	str	r1, [r7, #8]
 800c42c:	4611      	mov	r1, r2
 800c42e:	461a      	mov	r2, r3
 800c430:	460b      	mov	r3, r1
 800c432:	80fb      	strh	r3, [r7, #6]
 800c434:	4613      	mov	r3, r2
 800c436:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c438:	7979      	ldrb	r1, [r7, #5]
 800c43a:	2300      	movs	r3, #0
 800c43c:	9303      	str	r3, [sp, #12]
 800c43e:	88fb      	ldrh	r3, [r7, #6]
 800c440:	9302      	str	r3, [sp, #8]
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	9301      	str	r3, [sp, #4]
 800c446:	2301      	movs	r3, #1
 800c448:	9300      	str	r3, [sp, #0]
 800c44a:	2300      	movs	r3, #0
 800c44c:	2201      	movs	r2, #1
 800c44e:	68f8      	ldr	r0, [r7, #12]
 800c450:	f000 fb03 	bl	800ca5a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c454:	2300      	movs	r3, #0

}
 800c456:	4618      	mov	r0, r3
 800c458:	3710      	adds	r7, #16
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}

0800c45e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c45e:	b580      	push	{r7, lr}
 800c460:	b088      	sub	sp, #32
 800c462:	af04      	add	r7, sp, #16
 800c464:	60f8      	str	r0, [r7, #12]
 800c466:	60b9      	str	r1, [r7, #8]
 800c468:	4611      	mov	r1, r2
 800c46a:	461a      	mov	r2, r3
 800c46c:	460b      	mov	r3, r1
 800c46e:	80fb      	strh	r3, [r7, #6]
 800c470:	4613      	mov	r3, r2
 800c472:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d001      	beq.n	800c482 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c47e:	2300      	movs	r3, #0
 800c480:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c482:	7979      	ldrb	r1, [r7, #5]
 800c484:	7e3b      	ldrb	r3, [r7, #24]
 800c486:	9303      	str	r3, [sp, #12]
 800c488:	88fb      	ldrh	r3, [r7, #6]
 800c48a:	9302      	str	r3, [sp, #8]
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	9301      	str	r3, [sp, #4]
 800c490:	2301      	movs	r3, #1
 800c492:	9300      	str	r3, [sp, #0]
 800c494:	2302      	movs	r3, #2
 800c496:	2200      	movs	r2, #0
 800c498:	68f8      	ldr	r0, [r7, #12]
 800c49a:	f000 fade 	bl	800ca5a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c49e:	2300      	movs	r3, #0
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3710      	adds	r7, #16
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b088      	sub	sp, #32
 800c4ac:	af04      	add	r7, sp, #16
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	4611      	mov	r1, r2
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	80fb      	strh	r3, [r7, #6]
 800c4ba:	4613      	mov	r3, r2
 800c4bc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c4be:	7979      	ldrb	r1, [r7, #5]
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	9303      	str	r3, [sp, #12]
 800c4c4:	88fb      	ldrh	r3, [r7, #6]
 800c4c6:	9302      	str	r3, [sp, #8]
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	9301      	str	r3, [sp, #4]
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	9300      	str	r3, [sp, #0]
 800c4d0:	2302      	movs	r3, #2
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	68f8      	ldr	r0, [r7, #12]
 800c4d6:	f000 fac0 	bl	800ca5a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c4da:	2300      	movs	r3, #0
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3710      	adds	r7, #16
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b086      	sub	sp, #24
 800c4e8:	af04      	add	r7, sp, #16
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	4608      	mov	r0, r1
 800c4ee:	4611      	mov	r1, r2
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	70fb      	strb	r3, [r7, #3]
 800c4f6:	460b      	mov	r3, r1
 800c4f8:	70bb      	strb	r3, [r7, #2]
 800c4fa:	4613      	mov	r3, r2
 800c4fc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c4fe:	7878      	ldrb	r0, [r7, #1]
 800c500:	78ba      	ldrb	r2, [r7, #2]
 800c502:	78f9      	ldrb	r1, [r7, #3]
 800c504:	8b3b      	ldrh	r3, [r7, #24]
 800c506:	9302      	str	r3, [sp, #8]
 800c508:	7d3b      	ldrb	r3, [r7, #20]
 800c50a:	9301      	str	r3, [sp, #4]
 800c50c:	7c3b      	ldrb	r3, [r7, #16]
 800c50e:	9300      	str	r3, [sp, #0]
 800c510:	4603      	mov	r3, r0
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f000 fa53 	bl	800c9be <USBH_LL_OpenPipe>

  return USBH_OK;
 800c518:	2300      	movs	r3, #0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3708      	adds	r7, #8
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}

0800c522 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c522:	b580      	push	{r7, lr}
 800c524:	b082      	sub	sp, #8
 800c526:	af00      	add	r7, sp, #0
 800c528:	6078      	str	r0, [r7, #4]
 800c52a:	460b      	mov	r3, r1
 800c52c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800c52e:	78fb      	ldrb	r3, [r7, #3]
 800c530:	4619      	mov	r1, r3
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f000 fa72 	bl	800ca1c <USBH_LL_ClosePipe>

  return USBH_OK;
 800c538:	2300      	movs	r3, #0
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3708      	adds	r7, #8
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}

0800c542 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c542:	b580      	push	{r7, lr}
 800c544:	b084      	sub	sp, #16
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
 800c54a:	460b      	mov	r3, r1
 800c54c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 f836 	bl	800c5c0 <USBH_GetFreePipe>
 800c554:	4603      	mov	r3, r0
 800c556:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c558:	89fb      	ldrh	r3, [r7, #14]
 800c55a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c55e:	4293      	cmp	r3, r2
 800c560:	d00a      	beq.n	800c578 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800c562:	78fa      	ldrb	r2, [r7, #3]
 800c564:	89fb      	ldrh	r3, [r7, #14]
 800c566:	f003 030f 	and.w	r3, r3, #15
 800c56a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c56e:	6879      	ldr	r1, [r7, #4]
 800c570:	33e0      	adds	r3, #224	; 0xe0
 800c572:	009b      	lsls	r3, r3, #2
 800c574:	440b      	add	r3, r1
 800c576:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c578:	89fb      	ldrh	r3, [r7, #14]
 800c57a:	b2db      	uxtb	r3, r3
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3710      	adds	r7, #16
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c584:	b480      	push	{r7}
 800c586:	b083      	sub	sp, #12
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	460b      	mov	r3, r1
 800c58e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800c590:	78fb      	ldrb	r3, [r7, #3]
 800c592:	2b0a      	cmp	r3, #10
 800c594:	d80d      	bhi.n	800c5b2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c596:	78fb      	ldrb	r3, [r7, #3]
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	33e0      	adds	r3, #224	; 0xe0
 800c59c:	009b      	lsls	r3, r3, #2
 800c59e:	4413      	add	r3, r2
 800c5a0:	685a      	ldr	r2, [r3, #4]
 800c5a2:	78fb      	ldrb	r3, [r7, #3]
 800c5a4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c5a8:	6879      	ldr	r1, [r7, #4]
 800c5aa:	33e0      	adds	r3, #224	; 0xe0
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	440b      	add	r3, r1
 800c5b0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c5b2:	2300      	movs	r3, #0
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	370c      	adds	r7, #12
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5be:	4770      	bx	lr

0800c5c0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b085      	sub	sp, #20
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	73fb      	strb	r3, [r7, #15]
 800c5d0:	e00f      	b.n	800c5f2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c5d2:	7bfb      	ldrb	r3, [r7, #15]
 800c5d4:	687a      	ldr	r2, [r7, #4]
 800c5d6:	33e0      	adds	r3, #224	; 0xe0
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	4413      	add	r3, r2
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d102      	bne.n	800c5ec <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c5e6:	7bfb      	ldrb	r3, [r7, #15]
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	e007      	b.n	800c5fc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800c5ec:	7bfb      	ldrb	r3, [r7, #15]
 800c5ee:	3301      	adds	r3, #1
 800c5f0:	73fb      	strb	r3, [r7, #15]
 800c5f2:	7bfb      	ldrb	r3, [r7, #15]
 800c5f4:	2b0a      	cmp	r3, #10
 800c5f6:	d9ec      	bls.n	800c5d2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c5f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3714      	adds	r7, #20
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr

0800c608 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c60c:	2201      	movs	r2, #1
 800c60e:	490e      	ldr	r1, [pc, #56]	; (800c648 <MX_USB_HOST_Init+0x40>)
 800c610:	480e      	ldr	r0, [pc, #56]	; (800c64c <MX_USB_HOST_Init+0x44>)
 800c612:	f7fe fca1 	bl	800af58 <USBH_Init>
 800c616:	4603      	mov	r3, r0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d001      	beq.n	800c620 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c61c:	f7f4 fdbc 	bl	8001198 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c620:	490b      	ldr	r1, [pc, #44]	; (800c650 <MX_USB_HOST_Init+0x48>)
 800c622:	480a      	ldr	r0, [pc, #40]	; (800c64c <MX_USB_HOST_Init+0x44>)
 800c624:	f7fe fd26 	bl	800b074 <USBH_RegisterClass>
 800c628:	4603      	mov	r3, r0
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d001      	beq.n	800c632 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c62e:	f7f4 fdb3 	bl	8001198 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c632:	4806      	ldr	r0, [pc, #24]	; (800c64c <MX_USB_HOST_Init+0x44>)
 800c634:	f7fe fdaa 	bl	800b18c <USBH_Start>
 800c638:	4603      	mov	r3, r0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d001      	beq.n	800c642 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c63e:	f7f4 fdab 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c642:	bf00      	nop
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	0800c669 	.word	0x0800c669
 800c64c:	20000558 	.word	0x20000558
 800c650:	20000154 	.word	0x20000154

0800c654 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c658:	4802      	ldr	r0, [pc, #8]	; (800c664 <MX_USB_HOST_Process+0x10>)
 800c65a:	f7fe fda7 	bl	800b1ac <USBH_Process>
}
 800c65e:	bf00      	nop
 800c660:	bd80      	pop	{r7, pc}
 800c662:	bf00      	nop
 800c664:	20000558 	.word	0x20000558

0800c668 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c668:	b480      	push	{r7}
 800c66a:	b083      	sub	sp, #12
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	460b      	mov	r3, r1
 800c672:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c674:	78fb      	ldrb	r3, [r7, #3]
 800c676:	3b01      	subs	r3, #1
 800c678:	2b04      	cmp	r3, #4
 800c67a:	d819      	bhi.n	800c6b0 <USBH_UserProcess+0x48>
 800c67c:	a201      	add	r2, pc, #4	; (adr r2, 800c684 <USBH_UserProcess+0x1c>)
 800c67e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c682:	bf00      	nop
 800c684:	0800c6b1 	.word	0x0800c6b1
 800c688:	0800c6a1 	.word	0x0800c6a1
 800c68c:	0800c6b1 	.word	0x0800c6b1
 800c690:	0800c6a9 	.word	0x0800c6a9
 800c694:	0800c699 	.word	0x0800c699
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c698:	4b09      	ldr	r3, [pc, #36]	; (800c6c0 <USBH_UserProcess+0x58>)
 800c69a:	2203      	movs	r2, #3
 800c69c:	701a      	strb	r2, [r3, #0]
  break;
 800c69e:	e008      	b.n	800c6b2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c6a0:	4b07      	ldr	r3, [pc, #28]	; (800c6c0 <USBH_UserProcess+0x58>)
 800c6a2:	2202      	movs	r2, #2
 800c6a4:	701a      	strb	r2, [r3, #0]
  break;
 800c6a6:	e004      	b.n	800c6b2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c6a8:	4b05      	ldr	r3, [pc, #20]	; (800c6c0 <USBH_UserProcess+0x58>)
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	701a      	strb	r2, [r3, #0]
  break;
 800c6ae:	e000      	b.n	800c6b2 <USBH_UserProcess+0x4a>

  default:
  break;
 800c6b0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c6b2:	bf00      	nop
 800c6b4:	370c      	adds	r7, #12
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr
 800c6be:	bf00      	nop
 800c6c0:	20000201 	.word	0x20000201

0800c6c4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b08a      	sub	sp, #40	; 0x28
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c6cc:	f107 0314 	add.w	r3, r7, #20
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	601a      	str	r2, [r3, #0]
 800c6d4:	605a      	str	r2, [r3, #4]
 800c6d6:	609a      	str	r2, [r3, #8]
 800c6d8:	60da      	str	r2, [r3, #12]
 800c6da:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c6e4:	d147      	bne.n	800c776 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	613b      	str	r3, [r7, #16]
 800c6ea:	4b25      	ldr	r3, [pc, #148]	; (800c780 <HAL_HCD_MspInit+0xbc>)
 800c6ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6ee:	4a24      	ldr	r2, [pc, #144]	; (800c780 <HAL_HCD_MspInit+0xbc>)
 800c6f0:	f043 0301 	orr.w	r3, r3, #1
 800c6f4:	6313      	str	r3, [r2, #48]	; 0x30
 800c6f6:	4b22      	ldr	r3, [pc, #136]	; (800c780 <HAL_HCD_MspInit+0xbc>)
 800c6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6fa:	f003 0301 	and.w	r3, r3, #1
 800c6fe:	613b      	str	r3, [r7, #16]
 800c700:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c702:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c708:	2300      	movs	r3, #0
 800c70a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c70c:	2300      	movs	r3, #0
 800c70e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c710:	f107 0314 	add.w	r3, r7, #20
 800c714:	4619      	mov	r1, r3
 800c716:	481b      	ldr	r0, [pc, #108]	; (800c784 <HAL_HCD_MspInit+0xc0>)
 800c718:	f7f7 fa02 	bl	8003b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c71c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c722:	2302      	movs	r3, #2
 800c724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c726:	2300      	movs	r3, #0
 800c728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c72a:	2300      	movs	r3, #0
 800c72c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c72e:	230a      	movs	r3, #10
 800c730:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c732:	f107 0314 	add.w	r3, r7, #20
 800c736:	4619      	mov	r1, r3
 800c738:	4812      	ldr	r0, [pc, #72]	; (800c784 <HAL_HCD_MspInit+0xc0>)
 800c73a:	f7f7 f9f1 	bl	8003b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c73e:	4b10      	ldr	r3, [pc, #64]	; (800c780 <HAL_HCD_MspInit+0xbc>)
 800c740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c742:	4a0f      	ldr	r2, [pc, #60]	; (800c780 <HAL_HCD_MspInit+0xbc>)
 800c744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c748:	6353      	str	r3, [r2, #52]	; 0x34
 800c74a:	2300      	movs	r3, #0
 800c74c:	60fb      	str	r3, [r7, #12]
 800c74e:	4b0c      	ldr	r3, [pc, #48]	; (800c780 <HAL_HCD_MspInit+0xbc>)
 800c750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c752:	4a0b      	ldr	r2, [pc, #44]	; (800c780 <HAL_HCD_MspInit+0xbc>)
 800c754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c758:	6453      	str	r3, [r2, #68]	; 0x44
 800c75a:	4b09      	ldr	r3, [pc, #36]	; (800c780 <HAL_HCD_MspInit+0xbc>)
 800c75c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c75e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c762:	60fb      	str	r3, [r7, #12]
 800c764:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c766:	2200      	movs	r2, #0
 800c768:	2100      	movs	r1, #0
 800c76a:	2043      	movs	r0, #67	; 0x43
 800c76c:	f7f7 f9a1 	bl	8003ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c770:	2043      	movs	r0, #67	; 0x43
 800c772:	f7f7 f9ba 	bl	8003aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c776:	bf00      	nop
 800c778:	3728      	adds	r7, #40	; 0x28
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
 800c77e:	bf00      	nop
 800c780:	40023800 	.word	0x40023800
 800c784:	40020000 	.word	0x40020000

0800c788 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b082      	sub	sp, #8
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c796:	4618      	mov	r0, r3
 800c798:	f7ff f8db 	bl	800b952 <USBH_LL_IncTimer>
}
 800c79c:	bf00      	nop
 800c79e:	3708      	adds	r7, #8
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}

0800c7a4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b082      	sub	sp, #8
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7ff f913 	bl	800b9de <USBH_LL_Connect>
}
 800c7b8:	bf00      	nop
 800c7ba:	3708      	adds	r7, #8
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}

0800c7c0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7ff f91c 	bl	800ba0c <USBH_LL_Disconnect>
}
 800c7d4:	bf00      	nop
 800c7d6:	3708      	adds	r7, #8
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}

0800c7dc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b083      	sub	sp, #12
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	460b      	mov	r3, r1
 800c7e6:	70fb      	strb	r3, [r7, #3]
 800c7e8:	4613      	mov	r3, r2
 800c7ea:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c7ec:	bf00      	nop
 800c7ee:	370c      	adds	r7, #12
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr

0800c7f8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b082      	sub	sp, #8
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c806:	4618      	mov	r0, r3
 800c808:	f7ff f8cd 	bl	800b9a6 <USBH_LL_PortEnabled>
}
 800c80c:	bf00      	nop
 800c80e:	3708      	adds	r7, #8
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}

0800c814 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c822:	4618      	mov	r0, r3
 800c824:	f7ff f8cd 	bl	800b9c2 <USBH_LL_PortDisabled>
}
 800c828:	bf00      	nop
 800c82a:	3708      	adds	r7, #8
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c83e:	2b01      	cmp	r3, #1
 800c840:	d12a      	bne.n	800c898 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c842:	4a18      	ldr	r2, [pc, #96]	; (800c8a4 <USBH_LL_Init+0x74>)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	4a15      	ldr	r2, [pc, #84]	; (800c8a4 <USBH_LL_Init+0x74>)
 800c84e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c852:	4b14      	ldr	r3, [pc, #80]	; (800c8a4 <USBH_LL_Init+0x74>)
 800c854:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c858:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c85a:	4b12      	ldr	r3, [pc, #72]	; (800c8a4 <USBH_LL_Init+0x74>)
 800c85c:	2208      	movs	r2, #8
 800c85e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c860:	4b10      	ldr	r3, [pc, #64]	; (800c8a4 <USBH_LL_Init+0x74>)
 800c862:	2201      	movs	r2, #1
 800c864:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c866:	4b0f      	ldr	r3, [pc, #60]	; (800c8a4 <USBH_LL_Init+0x74>)
 800c868:	2200      	movs	r2, #0
 800c86a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c86c:	4b0d      	ldr	r3, [pc, #52]	; (800c8a4 <USBH_LL_Init+0x74>)
 800c86e:	2202      	movs	r2, #2
 800c870:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c872:	4b0c      	ldr	r3, [pc, #48]	; (800c8a4 <USBH_LL_Init+0x74>)
 800c874:	2200      	movs	r2, #0
 800c876:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c878:	480a      	ldr	r0, [pc, #40]	; (800c8a4 <USBH_LL_Init+0x74>)
 800c87a:	f7f7 fb38 	bl	8003eee <HAL_HCD_Init>
 800c87e:	4603      	mov	r3, r0
 800c880:	2b00      	cmp	r3, #0
 800c882:	d001      	beq.n	800c888 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c884:	f7f4 fc88 	bl	8001198 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c888:	4806      	ldr	r0, [pc, #24]	; (800c8a4 <USBH_LL_Init+0x74>)
 800c88a:	f7f7 ff15 	bl	80046b8 <HAL_HCD_GetCurrentFrame>
 800c88e:	4603      	mov	r3, r0
 800c890:	4619      	mov	r1, r3
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f7ff f84e 	bl	800b934 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3708      	adds	r7, #8
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	20000930 	.word	0x20000930

0800c8a8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b084      	sub	sp, #16
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7f7 fe84 	bl	80045cc <HAL_HCD_Start>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c8c8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f000 f95c 	bl	800cb88 <USBH_Get_USB_Status>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3710      	adds	r7, #16
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c8de:	b580      	push	{r7, lr}
 800c8e0:	b084      	sub	sp, #16
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7f7 fe8c 	bl	8004612 <HAL_HCD_Stop>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c8fe:	7bfb      	ldrb	r3, [r7, #15]
 800c900:	4618      	mov	r0, r3
 800c902:	f000 f941 	bl	800cb88 <USBH_Get_USB_Status>
 800c906:	4603      	mov	r3, r0
 800c908:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c90a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3710      	adds	r7, #16
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}

0800c914 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b084      	sub	sp, #16
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c91c:	2301      	movs	r3, #1
 800c91e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c926:	4618      	mov	r0, r3
 800c928:	f7f7 fed4 	bl	80046d4 <HAL_HCD_GetCurrentSpeed>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b02      	cmp	r3, #2
 800c930:	d00c      	beq.n	800c94c <USBH_LL_GetSpeed+0x38>
 800c932:	2b02      	cmp	r3, #2
 800c934:	d80d      	bhi.n	800c952 <USBH_LL_GetSpeed+0x3e>
 800c936:	2b00      	cmp	r3, #0
 800c938:	d002      	beq.n	800c940 <USBH_LL_GetSpeed+0x2c>
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	d003      	beq.n	800c946 <USBH_LL_GetSpeed+0x32>
 800c93e:	e008      	b.n	800c952 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c940:	2300      	movs	r3, #0
 800c942:	73fb      	strb	r3, [r7, #15]
    break;
 800c944:	e008      	b.n	800c958 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c946:	2301      	movs	r3, #1
 800c948:	73fb      	strb	r3, [r7, #15]
    break;
 800c94a:	e005      	b.n	800c958 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c94c:	2302      	movs	r3, #2
 800c94e:	73fb      	strb	r3, [r7, #15]
    break;
 800c950:	e002      	b.n	800c958 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c952:	2301      	movs	r3, #1
 800c954:	73fb      	strb	r3, [r7, #15]
    break;
 800c956:	bf00      	nop
  }
  return  speed;
 800c958:	7bfb      	ldrb	r3, [r7, #15]
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	3710      	adds	r7, #16
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}

0800c962 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c962:	b580      	push	{r7, lr}
 800c964:	b084      	sub	sp, #16
 800c966:	af00      	add	r7, sp, #0
 800c968:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c96a:	2300      	movs	r3, #0
 800c96c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c96e:	2300      	movs	r3, #0
 800c970:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c978:	4618      	mov	r0, r3
 800c97a:	f7f7 fe67 	bl	800464c <HAL_HCD_ResetPort>
 800c97e:	4603      	mov	r3, r0
 800c980:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c982:	7bfb      	ldrb	r3, [r7, #15]
 800c984:	4618      	mov	r0, r3
 800c986:	f000 f8ff 	bl	800cb88 <USBH_Get_USB_Status>
 800c98a:	4603      	mov	r3, r0
 800c98c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c98e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c990:	4618      	mov	r0, r3
 800c992:	3710      	adds	r7, #16
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c9aa:	78fa      	ldrb	r2, [r7, #3]
 800c9ac:	4611      	mov	r1, r2
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7f7 fe6e 	bl	8004690 <HAL_HCD_HC_GetXferCount>
 800c9b4:	4603      	mov	r3, r0
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3708      	adds	r7, #8
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}

0800c9be <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c9be:	b590      	push	{r4, r7, lr}
 800c9c0:	b089      	sub	sp, #36	; 0x24
 800c9c2:	af04      	add	r7, sp, #16
 800c9c4:	6078      	str	r0, [r7, #4]
 800c9c6:	4608      	mov	r0, r1
 800c9c8:	4611      	mov	r1, r2
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	70fb      	strb	r3, [r7, #3]
 800c9d0:	460b      	mov	r3, r1
 800c9d2:	70bb      	strb	r3, [r7, #2]
 800c9d4:	4613      	mov	r3, r2
 800c9d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c9e6:	787c      	ldrb	r4, [r7, #1]
 800c9e8:	78ba      	ldrb	r2, [r7, #2]
 800c9ea:	78f9      	ldrb	r1, [r7, #3]
 800c9ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c9ee:	9302      	str	r3, [sp, #8]
 800c9f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c9f4:	9301      	str	r3, [sp, #4]
 800c9f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c9fa:	9300      	str	r3, [sp, #0]
 800c9fc:	4623      	mov	r3, r4
 800c9fe:	f7f7 fad8 	bl	8003fb2 <HAL_HCD_HC_Init>
 800ca02:	4603      	mov	r3, r0
 800ca04:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ca06:	7bfb      	ldrb	r3, [r7, #15]
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f000 f8bd 	bl	800cb88 <USBH_Get_USB_Status>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca12:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3714      	adds	r7, #20
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd90      	pop	{r4, r7, pc}

0800ca1c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	460b      	mov	r3, r1
 800ca26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ca36:	78fa      	ldrb	r2, [r7, #3]
 800ca38:	4611      	mov	r1, r2
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f7f7 fb48 	bl	80040d0 <HAL_HCD_HC_Halt>
 800ca40:	4603      	mov	r3, r0
 800ca42:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ca44:	7bfb      	ldrb	r3, [r7, #15]
 800ca46:	4618      	mov	r0, r3
 800ca48:	f000 f89e 	bl	800cb88 <USBH_Get_USB_Status>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca50:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3710      	adds	r7, #16
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}

0800ca5a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ca5a:	b590      	push	{r4, r7, lr}
 800ca5c:	b089      	sub	sp, #36	; 0x24
 800ca5e:	af04      	add	r7, sp, #16
 800ca60:	6078      	str	r0, [r7, #4]
 800ca62:	4608      	mov	r0, r1
 800ca64:	4611      	mov	r1, r2
 800ca66:	461a      	mov	r2, r3
 800ca68:	4603      	mov	r3, r0
 800ca6a:	70fb      	strb	r3, [r7, #3]
 800ca6c:	460b      	mov	r3, r1
 800ca6e:	70bb      	strb	r3, [r7, #2]
 800ca70:	4613      	mov	r3, r2
 800ca72:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca74:	2300      	movs	r3, #0
 800ca76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ca82:	787c      	ldrb	r4, [r7, #1]
 800ca84:	78ba      	ldrb	r2, [r7, #2]
 800ca86:	78f9      	ldrb	r1, [r7, #3]
 800ca88:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ca8c:	9303      	str	r3, [sp, #12]
 800ca8e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ca90:	9302      	str	r3, [sp, #8]
 800ca92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca94:	9301      	str	r3, [sp, #4]
 800ca96:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ca9a:	9300      	str	r3, [sp, #0]
 800ca9c:	4623      	mov	r3, r4
 800ca9e:	f7f7 fb3b 	bl	8004118 <HAL_HCD_HC_SubmitRequest>
 800caa2:	4603      	mov	r3, r0
 800caa4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800caa6:	7bfb      	ldrb	r3, [r7, #15]
 800caa8:	4618      	mov	r0, r3
 800caaa:	f000 f86d 	bl	800cb88 <USBH_Get_USB_Status>
 800caae:	4603      	mov	r3, r0
 800cab0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cab2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3714      	adds	r7, #20
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd90      	pop	{r4, r7, pc}

0800cabc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b082      	sub	sp, #8
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	460b      	mov	r3, r1
 800cac6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cace:	78fa      	ldrb	r2, [r7, #3]
 800cad0:	4611      	mov	r1, r2
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7f7 fdc8 	bl	8004668 <HAL_HCD_HC_GetURBState>
 800cad8:	4603      	mov	r3, r0
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3708      	adds	r7, #8
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}

0800cae2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800cae2:	b580      	push	{r7, lr}
 800cae4:	b082      	sub	sp, #8
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	6078      	str	r0, [r7, #4]
 800caea:	460b      	mov	r3, r1
 800caec:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d103      	bne.n	800cb00 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800caf8:	78fb      	ldrb	r3, [r7, #3]
 800cafa:	4618      	mov	r0, r3
 800cafc:	f000 f870 	bl	800cbe0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800cb00:	20c8      	movs	r0, #200	; 0xc8
 800cb02:	f7f6 fed7 	bl	80038b4 <HAL_Delay>
  return USBH_OK;
 800cb06:	2300      	movs	r3, #0
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3708      	adds	r7, #8
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b085      	sub	sp, #20
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	460b      	mov	r3, r1
 800cb1a:	70fb      	strb	r3, [r7, #3]
 800cb1c:	4613      	mov	r3, r2
 800cb1e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cb26:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cb28:	78fb      	ldrb	r3, [r7, #3]
 800cb2a:	68fa      	ldr	r2, [r7, #12]
 800cb2c:	212c      	movs	r1, #44	; 0x2c
 800cb2e:	fb01 f303 	mul.w	r3, r1, r3
 800cb32:	4413      	add	r3, r2
 800cb34:	333b      	adds	r3, #59	; 0x3b
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d009      	beq.n	800cb50 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800cb3c:	78fb      	ldrb	r3, [r7, #3]
 800cb3e:	68fa      	ldr	r2, [r7, #12]
 800cb40:	212c      	movs	r1, #44	; 0x2c
 800cb42:	fb01 f303 	mul.w	r3, r1, r3
 800cb46:	4413      	add	r3, r2
 800cb48:	3354      	adds	r3, #84	; 0x54
 800cb4a:	78ba      	ldrb	r2, [r7, #2]
 800cb4c:	701a      	strb	r2, [r3, #0]
 800cb4e:	e008      	b.n	800cb62 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cb50:	78fb      	ldrb	r3, [r7, #3]
 800cb52:	68fa      	ldr	r2, [r7, #12]
 800cb54:	212c      	movs	r1, #44	; 0x2c
 800cb56:	fb01 f303 	mul.w	r3, r1, r3
 800cb5a:	4413      	add	r3, r2
 800cb5c:	3355      	adds	r3, #85	; 0x55
 800cb5e:	78ba      	ldrb	r2, [r7, #2]
 800cb60:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800cb62:	2300      	movs	r3, #0
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3714      	adds	r7, #20
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6e:	4770      	bx	lr

0800cb70 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f7f6 fe9b 	bl	80038b4 <HAL_Delay>
}
 800cb7e:	bf00      	nop
 800cb80:	3708      	adds	r7, #8
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
	...

0800cb88 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b085      	sub	sp, #20
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	4603      	mov	r3, r0
 800cb90:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb92:	2300      	movs	r3, #0
 800cb94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cb96:	79fb      	ldrb	r3, [r7, #7]
 800cb98:	2b03      	cmp	r3, #3
 800cb9a:	d817      	bhi.n	800cbcc <USBH_Get_USB_Status+0x44>
 800cb9c:	a201      	add	r2, pc, #4	; (adr r2, 800cba4 <USBH_Get_USB_Status+0x1c>)
 800cb9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cba2:	bf00      	nop
 800cba4:	0800cbb5 	.word	0x0800cbb5
 800cba8:	0800cbbb 	.word	0x0800cbbb
 800cbac:	0800cbc1 	.word	0x0800cbc1
 800cbb0:	0800cbc7 	.word	0x0800cbc7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	73fb      	strb	r3, [r7, #15]
    break;
 800cbb8:	e00b      	b.n	800cbd2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cbba:	2302      	movs	r3, #2
 800cbbc:	73fb      	strb	r3, [r7, #15]
    break;
 800cbbe:	e008      	b.n	800cbd2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	73fb      	strb	r3, [r7, #15]
    break;
 800cbc4:	e005      	b.n	800cbd2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cbc6:	2302      	movs	r3, #2
 800cbc8:	73fb      	strb	r3, [r7, #15]
    break;
 800cbca:	e002      	b.n	800cbd2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cbcc:	2302      	movs	r3, #2
 800cbce:	73fb      	strb	r3, [r7, #15]
    break;
 800cbd0:	bf00      	nop
  }
  return usb_status;
 800cbd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3714      	adds	r7, #20
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr

0800cbe0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b084      	sub	sp, #16
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800cbea:	79fb      	ldrb	r3, [r7, #7]
 800cbec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800cbee:	79fb      	ldrb	r3, [r7, #7]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d102      	bne.n	800cbfa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	73fb      	strb	r3, [r7, #15]
 800cbf8:	e001      	b.n	800cbfe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800cbfe:	7bfb      	ldrb	r3, [r7, #15]
 800cc00:	461a      	mov	r2, r3
 800cc02:	2101      	movs	r1, #1
 800cc04:	4803      	ldr	r0, [pc, #12]	; (800cc14 <MX_DriverVbusFS+0x34>)
 800cc06:	f7f7 f93f 	bl	8003e88 <HAL_GPIO_WritePin>
}
 800cc0a:	bf00      	nop
 800cc0c:	3710      	adds	r7, #16
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	40020800 	.word	0x40020800

0800cc18 <__errno>:
 800cc18:	4b01      	ldr	r3, [pc, #4]	; (800cc20 <__errno+0x8>)
 800cc1a:	6818      	ldr	r0, [r3, #0]
 800cc1c:	4770      	bx	lr
 800cc1e:	bf00      	nop
 800cc20:	20000174 	.word	0x20000174

0800cc24 <__libc_init_array>:
 800cc24:	b570      	push	{r4, r5, r6, lr}
 800cc26:	4d0d      	ldr	r5, [pc, #52]	; (800cc5c <__libc_init_array+0x38>)
 800cc28:	4c0d      	ldr	r4, [pc, #52]	; (800cc60 <__libc_init_array+0x3c>)
 800cc2a:	1b64      	subs	r4, r4, r5
 800cc2c:	10a4      	asrs	r4, r4, #2
 800cc2e:	2600      	movs	r6, #0
 800cc30:	42a6      	cmp	r6, r4
 800cc32:	d109      	bne.n	800cc48 <__libc_init_array+0x24>
 800cc34:	4d0b      	ldr	r5, [pc, #44]	; (800cc64 <__libc_init_array+0x40>)
 800cc36:	4c0c      	ldr	r4, [pc, #48]	; (800cc68 <__libc_init_array+0x44>)
 800cc38:	f000 f90c 	bl	800ce54 <_init>
 800cc3c:	1b64      	subs	r4, r4, r5
 800cc3e:	10a4      	asrs	r4, r4, #2
 800cc40:	2600      	movs	r6, #0
 800cc42:	42a6      	cmp	r6, r4
 800cc44:	d105      	bne.n	800cc52 <__libc_init_array+0x2e>
 800cc46:	bd70      	pop	{r4, r5, r6, pc}
 800cc48:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc4c:	4798      	blx	r3
 800cc4e:	3601      	adds	r6, #1
 800cc50:	e7ee      	b.n	800cc30 <__libc_init_array+0xc>
 800cc52:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc56:	4798      	blx	r3
 800cc58:	3601      	adds	r6, #1
 800cc5a:	e7f2      	b.n	800cc42 <__libc_init_array+0x1e>
 800cc5c:	0800d3d8 	.word	0x0800d3d8
 800cc60:	0800d3d8 	.word	0x0800d3d8
 800cc64:	0800d3d8 	.word	0x0800d3d8
 800cc68:	0800d3dc 	.word	0x0800d3dc

0800cc6c <malloc>:
 800cc6c:	4b02      	ldr	r3, [pc, #8]	; (800cc78 <malloc+0xc>)
 800cc6e:	4601      	mov	r1, r0
 800cc70:	6818      	ldr	r0, [r3, #0]
 800cc72:	f000 b863 	b.w	800cd3c <_malloc_r>
 800cc76:	bf00      	nop
 800cc78:	20000174 	.word	0x20000174

0800cc7c <free>:
 800cc7c:	4b02      	ldr	r3, [pc, #8]	; (800cc88 <free+0xc>)
 800cc7e:	4601      	mov	r1, r0
 800cc80:	6818      	ldr	r0, [r3, #0]
 800cc82:	f000 b80b 	b.w	800cc9c <_free_r>
 800cc86:	bf00      	nop
 800cc88:	20000174 	.word	0x20000174

0800cc8c <memset>:
 800cc8c:	4402      	add	r2, r0
 800cc8e:	4603      	mov	r3, r0
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d100      	bne.n	800cc96 <memset+0xa>
 800cc94:	4770      	bx	lr
 800cc96:	f803 1b01 	strb.w	r1, [r3], #1
 800cc9a:	e7f9      	b.n	800cc90 <memset+0x4>

0800cc9c <_free_r>:
 800cc9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc9e:	2900      	cmp	r1, #0
 800cca0:	d048      	beq.n	800cd34 <_free_r+0x98>
 800cca2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cca6:	9001      	str	r0, [sp, #4]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	f1a1 0404 	sub.w	r4, r1, #4
 800ccae:	bfb8      	it	lt
 800ccb0:	18e4      	addlt	r4, r4, r3
 800ccb2:	f000 f8c1 	bl	800ce38 <__malloc_lock>
 800ccb6:	4a20      	ldr	r2, [pc, #128]	; (800cd38 <_free_r+0x9c>)
 800ccb8:	9801      	ldr	r0, [sp, #4]
 800ccba:	6813      	ldr	r3, [r2, #0]
 800ccbc:	4615      	mov	r5, r2
 800ccbe:	b933      	cbnz	r3, 800ccce <_free_r+0x32>
 800ccc0:	6063      	str	r3, [r4, #4]
 800ccc2:	6014      	str	r4, [r2, #0]
 800ccc4:	b003      	add	sp, #12
 800ccc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ccca:	f000 b8bb 	b.w	800ce44 <__malloc_unlock>
 800ccce:	42a3      	cmp	r3, r4
 800ccd0:	d90b      	bls.n	800ccea <_free_r+0x4e>
 800ccd2:	6821      	ldr	r1, [r4, #0]
 800ccd4:	1862      	adds	r2, r4, r1
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	bf04      	itt	eq
 800ccda:	681a      	ldreq	r2, [r3, #0]
 800ccdc:	685b      	ldreq	r3, [r3, #4]
 800ccde:	6063      	str	r3, [r4, #4]
 800cce0:	bf04      	itt	eq
 800cce2:	1852      	addeq	r2, r2, r1
 800cce4:	6022      	streq	r2, [r4, #0]
 800cce6:	602c      	str	r4, [r5, #0]
 800cce8:	e7ec      	b.n	800ccc4 <_free_r+0x28>
 800ccea:	461a      	mov	r2, r3
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	b10b      	cbz	r3, 800ccf4 <_free_r+0x58>
 800ccf0:	42a3      	cmp	r3, r4
 800ccf2:	d9fa      	bls.n	800ccea <_free_r+0x4e>
 800ccf4:	6811      	ldr	r1, [r2, #0]
 800ccf6:	1855      	adds	r5, r2, r1
 800ccf8:	42a5      	cmp	r5, r4
 800ccfa:	d10b      	bne.n	800cd14 <_free_r+0x78>
 800ccfc:	6824      	ldr	r4, [r4, #0]
 800ccfe:	4421      	add	r1, r4
 800cd00:	1854      	adds	r4, r2, r1
 800cd02:	42a3      	cmp	r3, r4
 800cd04:	6011      	str	r1, [r2, #0]
 800cd06:	d1dd      	bne.n	800ccc4 <_free_r+0x28>
 800cd08:	681c      	ldr	r4, [r3, #0]
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	6053      	str	r3, [r2, #4]
 800cd0e:	4421      	add	r1, r4
 800cd10:	6011      	str	r1, [r2, #0]
 800cd12:	e7d7      	b.n	800ccc4 <_free_r+0x28>
 800cd14:	d902      	bls.n	800cd1c <_free_r+0x80>
 800cd16:	230c      	movs	r3, #12
 800cd18:	6003      	str	r3, [r0, #0]
 800cd1a:	e7d3      	b.n	800ccc4 <_free_r+0x28>
 800cd1c:	6825      	ldr	r5, [r4, #0]
 800cd1e:	1961      	adds	r1, r4, r5
 800cd20:	428b      	cmp	r3, r1
 800cd22:	bf04      	itt	eq
 800cd24:	6819      	ldreq	r1, [r3, #0]
 800cd26:	685b      	ldreq	r3, [r3, #4]
 800cd28:	6063      	str	r3, [r4, #4]
 800cd2a:	bf04      	itt	eq
 800cd2c:	1949      	addeq	r1, r1, r5
 800cd2e:	6021      	streq	r1, [r4, #0]
 800cd30:	6054      	str	r4, [r2, #4]
 800cd32:	e7c7      	b.n	800ccc4 <_free_r+0x28>
 800cd34:	b003      	add	sp, #12
 800cd36:	bd30      	pop	{r4, r5, pc}
 800cd38:	20000204 	.word	0x20000204

0800cd3c <_malloc_r>:
 800cd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd3e:	1ccd      	adds	r5, r1, #3
 800cd40:	f025 0503 	bic.w	r5, r5, #3
 800cd44:	3508      	adds	r5, #8
 800cd46:	2d0c      	cmp	r5, #12
 800cd48:	bf38      	it	cc
 800cd4a:	250c      	movcc	r5, #12
 800cd4c:	2d00      	cmp	r5, #0
 800cd4e:	4606      	mov	r6, r0
 800cd50:	db01      	blt.n	800cd56 <_malloc_r+0x1a>
 800cd52:	42a9      	cmp	r1, r5
 800cd54:	d903      	bls.n	800cd5e <_malloc_r+0x22>
 800cd56:	230c      	movs	r3, #12
 800cd58:	6033      	str	r3, [r6, #0]
 800cd5a:	2000      	movs	r0, #0
 800cd5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd5e:	f000 f86b 	bl	800ce38 <__malloc_lock>
 800cd62:	4921      	ldr	r1, [pc, #132]	; (800cde8 <_malloc_r+0xac>)
 800cd64:	680a      	ldr	r2, [r1, #0]
 800cd66:	4614      	mov	r4, r2
 800cd68:	b99c      	cbnz	r4, 800cd92 <_malloc_r+0x56>
 800cd6a:	4f20      	ldr	r7, [pc, #128]	; (800cdec <_malloc_r+0xb0>)
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	b923      	cbnz	r3, 800cd7a <_malloc_r+0x3e>
 800cd70:	4621      	mov	r1, r4
 800cd72:	4630      	mov	r0, r6
 800cd74:	f000 f83c 	bl	800cdf0 <_sbrk_r>
 800cd78:	6038      	str	r0, [r7, #0]
 800cd7a:	4629      	mov	r1, r5
 800cd7c:	4630      	mov	r0, r6
 800cd7e:	f000 f837 	bl	800cdf0 <_sbrk_r>
 800cd82:	1c43      	adds	r3, r0, #1
 800cd84:	d123      	bne.n	800cdce <_malloc_r+0x92>
 800cd86:	230c      	movs	r3, #12
 800cd88:	6033      	str	r3, [r6, #0]
 800cd8a:	4630      	mov	r0, r6
 800cd8c:	f000 f85a 	bl	800ce44 <__malloc_unlock>
 800cd90:	e7e3      	b.n	800cd5a <_malloc_r+0x1e>
 800cd92:	6823      	ldr	r3, [r4, #0]
 800cd94:	1b5b      	subs	r3, r3, r5
 800cd96:	d417      	bmi.n	800cdc8 <_malloc_r+0x8c>
 800cd98:	2b0b      	cmp	r3, #11
 800cd9a:	d903      	bls.n	800cda4 <_malloc_r+0x68>
 800cd9c:	6023      	str	r3, [r4, #0]
 800cd9e:	441c      	add	r4, r3
 800cda0:	6025      	str	r5, [r4, #0]
 800cda2:	e004      	b.n	800cdae <_malloc_r+0x72>
 800cda4:	6863      	ldr	r3, [r4, #4]
 800cda6:	42a2      	cmp	r2, r4
 800cda8:	bf0c      	ite	eq
 800cdaa:	600b      	streq	r3, [r1, #0]
 800cdac:	6053      	strne	r3, [r2, #4]
 800cdae:	4630      	mov	r0, r6
 800cdb0:	f000 f848 	bl	800ce44 <__malloc_unlock>
 800cdb4:	f104 000b 	add.w	r0, r4, #11
 800cdb8:	1d23      	adds	r3, r4, #4
 800cdba:	f020 0007 	bic.w	r0, r0, #7
 800cdbe:	1ac2      	subs	r2, r0, r3
 800cdc0:	d0cc      	beq.n	800cd5c <_malloc_r+0x20>
 800cdc2:	1a1b      	subs	r3, r3, r0
 800cdc4:	50a3      	str	r3, [r4, r2]
 800cdc6:	e7c9      	b.n	800cd5c <_malloc_r+0x20>
 800cdc8:	4622      	mov	r2, r4
 800cdca:	6864      	ldr	r4, [r4, #4]
 800cdcc:	e7cc      	b.n	800cd68 <_malloc_r+0x2c>
 800cdce:	1cc4      	adds	r4, r0, #3
 800cdd0:	f024 0403 	bic.w	r4, r4, #3
 800cdd4:	42a0      	cmp	r0, r4
 800cdd6:	d0e3      	beq.n	800cda0 <_malloc_r+0x64>
 800cdd8:	1a21      	subs	r1, r4, r0
 800cdda:	4630      	mov	r0, r6
 800cddc:	f000 f808 	bl	800cdf0 <_sbrk_r>
 800cde0:	3001      	adds	r0, #1
 800cde2:	d1dd      	bne.n	800cda0 <_malloc_r+0x64>
 800cde4:	e7cf      	b.n	800cd86 <_malloc_r+0x4a>
 800cde6:	bf00      	nop
 800cde8:	20000204 	.word	0x20000204
 800cdec:	20000208 	.word	0x20000208

0800cdf0 <_sbrk_r>:
 800cdf0:	b538      	push	{r3, r4, r5, lr}
 800cdf2:	4d06      	ldr	r5, [pc, #24]	; (800ce0c <_sbrk_r+0x1c>)
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	4608      	mov	r0, r1
 800cdfa:	602b      	str	r3, [r5, #0]
 800cdfc:	f7f4 fce0 	bl	80017c0 <_sbrk>
 800ce00:	1c43      	adds	r3, r0, #1
 800ce02:	d102      	bne.n	800ce0a <_sbrk_r+0x1a>
 800ce04:	682b      	ldr	r3, [r5, #0]
 800ce06:	b103      	cbz	r3, 800ce0a <_sbrk_r+0x1a>
 800ce08:	6023      	str	r3, [r4, #0]
 800ce0a:	bd38      	pop	{r3, r4, r5, pc}
 800ce0c:	20000c34 	.word	0x20000c34

0800ce10 <strncat>:
 800ce10:	b530      	push	{r4, r5, lr}
 800ce12:	4604      	mov	r4, r0
 800ce14:	7825      	ldrb	r5, [r4, #0]
 800ce16:	4623      	mov	r3, r4
 800ce18:	3401      	adds	r4, #1
 800ce1a:	2d00      	cmp	r5, #0
 800ce1c:	d1fa      	bne.n	800ce14 <strncat+0x4>
 800ce1e:	3a01      	subs	r2, #1
 800ce20:	d304      	bcc.n	800ce2c <strncat+0x1c>
 800ce22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce26:	f803 4b01 	strb.w	r4, [r3], #1
 800ce2a:	b904      	cbnz	r4, 800ce2e <strncat+0x1e>
 800ce2c:	bd30      	pop	{r4, r5, pc}
 800ce2e:	2a00      	cmp	r2, #0
 800ce30:	d1f5      	bne.n	800ce1e <strncat+0xe>
 800ce32:	701a      	strb	r2, [r3, #0]
 800ce34:	e7f3      	b.n	800ce1e <strncat+0xe>
	...

0800ce38 <__malloc_lock>:
 800ce38:	4801      	ldr	r0, [pc, #4]	; (800ce40 <__malloc_lock+0x8>)
 800ce3a:	f000 b809 	b.w	800ce50 <__retarget_lock_acquire_recursive>
 800ce3e:	bf00      	nop
 800ce40:	20000c3c 	.word	0x20000c3c

0800ce44 <__malloc_unlock>:
 800ce44:	4801      	ldr	r0, [pc, #4]	; (800ce4c <__malloc_unlock+0x8>)
 800ce46:	f000 b804 	b.w	800ce52 <__retarget_lock_release_recursive>
 800ce4a:	bf00      	nop
 800ce4c:	20000c3c 	.word	0x20000c3c

0800ce50 <__retarget_lock_acquire_recursive>:
 800ce50:	4770      	bx	lr

0800ce52 <__retarget_lock_release_recursive>:
 800ce52:	4770      	bx	lr

0800ce54 <_init>:
 800ce54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce56:	bf00      	nop
 800ce58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce5a:	bc08      	pop	{r3}
 800ce5c:	469e      	mov	lr, r3
 800ce5e:	4770      	bx	lr

0800ce60 <_fini>:
 800ce60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce62:	bf00      	nop
 800ce64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce66:	bc08      	pop	{r3}
 800ce68:	469e      	mov	lr, r3
 800ce6a:	4770      	bx	lr
