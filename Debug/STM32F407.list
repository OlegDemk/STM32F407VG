
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc1c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  0800fda8  0800fda8  0001fda8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010380  08010380  00030270  2**0
                  CONTENTS
  4 .ARM          00000008  08010380  08010380  00020380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010388  08010388  00030270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010388  08010388  00020388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801038c  0801038c  0002038c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  08010390  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ae4  20000270  08010600  00030270  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000d54  08010600  00030d54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030270  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027cb4  00000000  00000000  000302a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005321  00000000  00000000  00057f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001af8  00000000  00000000  0005d278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018f8  00000000  00000000  0005ed70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026282  00000000  00000000  00060668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000258eb  00000000  00000000  000868ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8462  00000000  00000000  000ac1d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00184637  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076ac  00000000  00000000  0018468c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000270 	.word	0x20000270
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800fd8c 	.word	0x0800fd8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000274 	.word	0x20000274
 80001c4:	0800fd8c 	.word	0x0800fd8c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ba4:	f000 b96e 	b.w	8000e84 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468c      	mov	ip, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f040 8083 	bne.w	8000cd6 <__udivmoddi4+0x116>
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	d947      	bls.n	8000c66 <__udivmoddi4+0xa6>
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	b142      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bdc:	f1c2 0020 	rsb	r0, r2, #32
 8000be0:	fa24 f000 	lsr.w	r0, r4, r0
 8000be4:	4091      	lsls	r1, r2
 8000be6:	4097      	lsls	r7, r2
 8000be8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bec:	4094      	lsls	r4, r2
 8000bee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bf2:	0c23      	lsrs	r3, r4, #16
 8000bf4:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf8:	fa1f fe87 	uxth.w	lr, r7
 8000bfc:	fb08 c116 	mls	r1, r8, r6, ip
 8000c00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c04:	fb06 f10e 	mul.w	r1, r6, lr
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x60>
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c12:	f080 8119 	bcs.w	8000e48 <__udivmoddi4+0x288>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 8116 	bls.w	8000e48 <__udivmoddi4+0x288>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	443b      	add	r3, r7
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x8c>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c3e:	f080 8105 	bcs.w	8000e4c <__udivmoddi4+0x28c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8102 	bls.w	8000e4c <__udivmoddi4+0x28c>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c50:	eba4 040e 	sub.w	r4, r4, lr
 8000c54:	2600      	movs	r6, #0
 8000c56:	b11d      	cbz	r5, 8000c60 <__udivmoddi4+0xa0>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	b902      	cbnz	r2, 8000c6a <__udivmoddi4+0xaa>
 8000c68:	deff      	udf	#255	; 0xff
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d150      	bne.n	8000d14 <__udivmoddi4+0x154>
 8000c72:	1bcb      	subs	r3, r1, r7
 8000c74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c78:	fa1f f887 	uxth.w	r8, r7
 8000c7c:	2601      	movs	r6, #1
 8000c7e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c82:	0c21      	lsrs	r1, r4, #16
 8000c84:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d907      	bls.n	8000ca4 <__udivmoddi4+0xe4>
 8000c94:	1879      	adds	r1, r7, r1
 8000c96:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0xe2>
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	f200 80e9 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000ca2:	4684      	mov	ip, r0
 8000ca4:	1ac9      	subs	r1, r1, r3
 8000ca6:	b2a3      	uxth	r3, r4
 8000ca8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cac:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb4:	fb08 f800 	mul.w	r8, r8, r0
 8000cb8:	45a0      	cmp	r8, r4
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x10c>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x10a>
 8000cc4:	45a0      	cmp	r8, r4
 8000cc6:	f200 80d9 	bhi.w	8000e7c <__udivmoddi4+0x2bc>
 8000cca:	4618      	mov	r0, r3
 8000ccc:	eba4 0408 	sub.w	r4, r4, r8
 8000cd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd4:	e7bf      	b.n	8000c56 <__udivmoddi4+0x96>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0x12e>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	f000 80b1 	beq.w	8000e42 <__udivmoddi4+0x282>
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	fab3 f683 	clz	r6, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d14a      	bne.n	8000d8c <__udivmoddi4+0x1cc>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0x140>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 80b8 	bhi.w	8000e70 <__udivmoddi4+0x2b0>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb61 0103 	sbc.w	r1, r1, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	468c      	mov	ip, r1
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0a8      	beq.n	8000c60 <__udivmoddi4+0xa0>
 8000d0e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000d14:	f1c2 0320 	rsb	r3, r2, #32
 8000d18:	fa20 f603 	lsr.w	r6, r0, r3
 8000d1c:	4097      	lsls	r7, r2
 8000d1e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d22:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d26:	40d9      	lsrs	r1, r3
 8000d28:	4330      	orrs	r0, r6
 8000d2a:	0c03      	lsrs	r3, r0, #16
 8000d2c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f108 	mul.w	r1, r6, r8
 8000d40:	4299      	cmp	r1, r3
 8000d42:	fa04 f402 	lsl.w	r4, r4, r2
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x19c>
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d4e:	f080 808d 	bcs.w	8000e6c <__udivmoddi4+0x2ac>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 808a 	bls.w	8000e6c <__udivmoddi4+0x2ac>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	443b      	add	r3, r7
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b281      	uxth	r1, r0
 8000d60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb00 f308 	mul.w	r3, r0, r8
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x1c4>
 8000d74:	1879      	adds	r1, r7, r1
 8000d76:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d7a:	d273      	bcs.n	8000e64 <__udivmoddi4+0x2a4>
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d971      	bls.n	8000e64 <__udivmoddi4+0x2a4>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4439      	add	r1, r7
 8000d84:	1acb      	subs	r3, r1, r3
 8000d86:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d8a:	e778      	b.n	8000c7e <__udivmoddi4+0xbe>
 8000d8c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d90:	fa03 f406 	lsl.w	r4, r3, r6
 8000d94:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d98:	431c      	orrs	r4, r3
 8000d9a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000da2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000da6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000daa:	431f      	orrs	r7, r3
 8000dac:	0c3b      	lsrs	r3, r7, #16
 8000dae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db2:	fa1f f884 	uxth.w	r8, r4
 8000db6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dbe:	fb09 fa08 	mul.w	sl, r9, r8
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x220>
 8000dce:	1861      	adds	r1, r4, r1
 8000dd0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dd4:	d248      	bcs.n	8000e68 <__udivmoddi4+0x2a8>
 8000dd6:	458a      	cmp	sl, r1
 8000dd8:	d946      	bls.n	8000e68 <__udivmoddi4+0x2a8>
 8000dda:	f1a9 0902 	sub.w	r9, r9, #2
 8000dde:	4421      	add	r1, r4
 8000de0:	eba1 010a 	sub.w	r1, r1, sl
 8000de4:	b2bf      	uxth	r7, r7
 8000de6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dea:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000df2:	fb00 f808 	mul.w	r8, r0, r8
 8000df6:	45b8      	cmp	r8, r7
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x24a>
 8000dfa:	19e7      	adds	r7, r4, r7
 8000dfc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e00:	d22e      	bcs.n	8000e60 <__udivmoddi4+0x2a0>
 8000e02:	45b8      	cmp	r8, r7
 8000e04:	d92c      	bls.n	8000e60 <__udivmoddi4+0x2a0>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4427      	add	r7, r4
 8000e0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0e:	eba7 0708 	sub.w	r7, r7, r8
 8000e12:	fba0 8902 	umull	r8, r9, r0, r2
 8000e16:	454f      	cmp	r7, r9
 8000e18:	46c6      	mov	lr, r8
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	d31a      	bcc.n	8000e54 <__udivmoddi4+0x294>
 8000e1e:	d017      	beq.n	8000e50 <__udivmoddi4+0x290>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x27a>
 8000e22:	ebb3 020e 	subs.w	r2, r3, lr
 8000e26:	eb67 0701 	sbc.w	r7, r7, r1
 8000e2a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e2e:	40f2      	lsrs	r2, r6
 8000e30:	ea4c 0202 	orr.w	r2, ip, r2
 8000e34:	40f7      	lsrs	r7, r6
 8000e36:	e9c5 2700 	strd	r2, r7, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e70b      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e9      	b.n	8000c20 <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fd      	b.n	8000c4c <__udivmoddi4+0x8c>
 8000e50:	4543      	cmp	r3, r8
 8000e52:	d2e5      	bcs.n	8000e20 <__udivmoddi4+0x260>
 8000e54:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e58:	eb69 0104 	sbc.w	r1, r9, r4
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7df      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e7d2      	b.n	8000e0a <__udivmoddi4+0x24a>
 8000e64:	4660      	mov	r0, ip
 8000e66:	e78d      	b.n	8000d84 <__udivmoddi4+0x1c4>
 8000e68:	4681      	mov	r9, r0
 8000e6a:	e7b9      	b.n	8000de0 <__udivmoddi4+0x220>
 8000e6c:	4666      	mov	r6, ip
 8000e6e:	e775      	b.n	8000d5c <__udivmoddi4+0x19c>
 8000e70:	4630      	mov	r0, r6
 8000e72:	e74a      	b.n	8000d0a <__udivmoddi4+0x14a>
 8000e74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e78:	4439      	add	r1, r7
 8000e7a:	e713      	b.n	8000ca4 <__udivmoddi4+0xe4>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	443c      	add	r4, r7
 8000e80:	e724      	b.n	8000ccc <__udivmoddi4+0x10c>
 8000e82:	bf00      	nop

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <read_digits>:
#include <stdbool.h>


//----------------------------------------------------------------------------------------
void read_digits(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
	char digith = 0;;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	71fb      	strb	r3, [r7, #7]

	digith = read_one_digit_from_keyboard();
 8000e92:	f000 f853 	bl	8000f3c <read_one_digit_from_keyboard>
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
	if(digith == '#')						// Clean buffer
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b23      	cmp	r3, #35	; 0x23
 8000e9e:	d10a      	bne.n	8000eb6 <read_digits+0x2e>
	{
		memset(keyboard.keyboard_digits_buffer, '\0', sizeof(keyboard.keyboard_digits_buffer));
 8000ea0:	221e      	movs	r2, #30
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4824      	ldr	r0, [pc, #144]	; (8000f38 <read_digits+0xb0>)
 8000ea6:	f00e fb2f 	bl	800f508 <memset>
		keyboard.read_digits_position = 0;
 8000eaa:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <read_digits+0xb0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	625a      	str	r2, [r3, #36]	; 0x24
		keyboard.read_one_digit_status = false;
 8000eb0:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <read_digits+0xb0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	77da      	strb	r2, [r3, #31]
	}
	if(digith == '*')						// If pressed enter
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8000eba:	d109      	bne.n	8000ed0 <read_digits+0x48>
	{
		keyboard.all_digits_was_read = true;
 8000ebc:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <read_digits+0xb0>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f883 2020 	strb.w	r2, [r3, #32]
		keyboard.read_one_digit_status = false;
 8000ec4:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <read_digits+0xb0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	77da      	strb	r2, [r3, #31]
		keyboard.read_digits_position = 0;
 8000eca:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <read_digits+0xb0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if((digith != '\0') && (digith != '#')&& (digith != '*'))
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d028      	beq.n	8000f28 <read_digits+0xa0>
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b23      	cmp	r3, #35	; 0x23
 8000eda:	d025      	beq.n	8000f28 <read_digits+0xa0>
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	2b2a      	cmp	r3, #42	; 0x2a
 8000ee0:	d022      	beq.n	8000f28 <read_digits+0xa0>
	{
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <read_digits+0xb0>)
 8000ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee6:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <read_digits+0xb0>)
 8000ee8:	7f92      	ldrb	r2, [r2, #30]
 8000eea:	4293      	cmp	r3, r2
 8000eec:	dc11      	bgt.n	8000f12 <read_digits+0x8a>
		{
			keyboard.keyboard_digits_buffer[keyboard.read_digits_position] = digith;
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <read_digits+0xb0>)
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef2:	4911      	ldr	r1, [pc, #68]	; (8000f38 <read_digits+0xb0>)
 8000ef4:	79fa      	ldrb	r2, [r7, #7]
 8000ef6:	54ca      	strb	r2, [r1, r3]
			keyboard.read_digits_position++;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <read_digits+0xb0>)
 8000efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efc:	3301      	adds	r3, #1
 8000efe:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <read_digits+0xb0>)
 8000f00:	6253      	str	r3, [r2, #36]	; 0x24
			keyboard.all_digits_was_read = false;
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <read_digits+0xb0>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = true;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <read_digits+0xb0>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	77da      	strb	r2, [r3, #31]
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000f10:	e00e      	b.n	8000f30 <read_digits+0xa8>
		}
		else								// If entered all digits
		{
			keyboard.all_digits_was_read = true;
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <read_digits+0xb0>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = false;
 8000f1a:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <read_digits+0xb0>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	77da      	strb	r2, [r3, #31]
			keyboard.read_digits_position = 0;
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <read_digits+0xb0>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	625a      	str	r2, [r3, #36]	; 0x24
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000f26:	e003      	b.n	8000f30 <read_digits+0xa8>
		}
	}
	else									// If didn't enter any key
	{
		keyboard.read_one_digit_status = false;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <read_digits+0xb0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	77da      	strb	r2, [r3, #31]
	}
}
 8000f2e:	bf00      	nop
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200002a4 	.word	0x200002a4

08000f3c <read_one_digit_from_keyboard>:

//----------------------------------------------------------------------------------------
char read_one_digit_from_keyboard(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
	char digit = '\0';
 8000f42:	2300      	movs	r3, #0
 8000f44:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f4c:	48cf      	ldr	r0, [pc, #828]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000f4e:	f005 f8d7 	bl	8006100 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f58:	48cc      	ldr	r0, [pc, #816]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000f5a:	f005 f8d1 	bl	8006100 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f64:	48c9      	ldr	r0, [pc, #804]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000f66:	f005 f8cb 	bl	8006100 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f70:	48c6      	ldr	r0, [pc, #792]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000f72:	f005 f8c5 	bl	8006100 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000f76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f7a:	48c5      	ldr	r0, [pc, #788]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 8000f7c:	f005 f8a8 	bl	80060d0 <HAL_GPIO_ReadPin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d169      	bne.n	800105a <read_one_digit_from_keyboard+0x11e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f8c:	48bf      	ldr	r0, [pc, #764]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000f8e:	f005 f8b7 	bl	8006100 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f98:	48bc      	ldr	r0, [pc, #752]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000f9a:	f005 f8b1 	bl	8006100 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa4:	48b9      	ldr	r0, [pc, #740]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000fa6:	f005 f8ab 	bl	8006100 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8000faa:	2201      	movs	r2, #1
 8000fac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb0:	48b6      	ldr	r0, [pc, #728]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000fb2:	f005 f8a5 	bl	8006100 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000fb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fba:	48b5      	ldr	r0, [pc, #724]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 8000fbc:	f005 f888 	bl	80060d0 <HAL_GPIO_ReadPin>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <read_one_digit_from_keyboard+0x8e>
		{
			digit = '1';
 8000fc6:	2331      	movs	r3, #49	; 0x31
 8000fc8:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fd0:	48ae      	ldr	r0, [pc, #696]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000fd2:	f005 f895 	bl	8006100 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fdc:	48ab      	ldr	r0, [pc, #684]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000fde:	f005 f88f 	bl	8006100 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000fe2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fe6:	48aa      	ldr	r0, [pc, #680]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 8000fe8:	f005 f872 	bl	80060d0 <HAL_GPIO_ReadPin>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <read_one_digit_from_keyboard+0xba>
		{
			digit = '4';
 8000ff2:	2334      	movs	r3, #52	; 0x34
 8000ff4:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ffc:	48a3      	ldr	r0, [pc, #652]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8000ffe:	f005 f87f 	bl	8006100 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001008:	48a0      	ldr	r0, [pc, #640]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800100a:	f005 f879 	bl	8006100 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800100e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001012:	489f      	ldr	r0, [pc, #636]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 8001014:	f005 f85c 	bl	80060d0 <HAL_GPIO_ReadPin>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <read_one_digit_from_keyboard+0xe6>
		{
			digit =  '7';
 800101e:	2337      	movs	r3, #55	; 0x37
 8001020:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001028:	4898      	ldr	r0, [pc, #608]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800102a:	f005 f869 	bl	8006100 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001034:	4895      	ldr	r0, [pc, #596]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001036:	f005 f863 	bl	8006100 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800103a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800103e:	4894      	ldr	r0, [pc, #592]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 8001040:	f005 f846 	bl	80060d0 <HAL_GPIO_ReadPin>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <read_one_digit_from_keyboard+0x112>
		{
			digit =  '*';
 800104a:	232a      	movs	r3, #42	; 0x2a
 800104c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001054:	488d      	ldr	r0, [pc, #564]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001056:	f005 f853 	bl	8006100 <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001060:	488a      	ldr	r0, [pc, #552]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001062:	f005 f84d 	bl	8006100 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800106c:	4887      	ldr	r0, [pc, #540]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800106e:	f005 f847 	bl	8006100 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001078:	4884      	ldr	r0, [pc, #528]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800107a:	f005 f841 	bl	8006100 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001084:	4881      	ldr	r0, [pc, #516]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001086:	f005 f83b 	bl	8006100 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 800108a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108e:	4880      	ldr	r0, [pc, #512]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 8001090:	f005 f81e 	bl	80060d0 <HAL_GPIO_ReadPin>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d169      	bne.n	800116e <read_one_digit_from_keyboard+0x232>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010a0:	487a      	ldr	r0, [pc, #488]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80010a2:	f005 f82d 	bl	8006100 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ac:	4877      	ldr	r0, [pc, #476]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80010ae:	f005 f827 	bl	8006100 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b8:	4874      	ldr	r0, [pc, #464]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80010ba:	f005 f821 	bl	8006100 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80010be:	2201      	movs	r2, #1
 80010c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c4:	4871      	ldr	r0, [pc, #452]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80010c6:	f005 f81b 	bl	8006100 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80010ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ce:	4870      	ldr	r0, [pc, #448]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 80010d0:	f004 fffe 	bl	80060d0 <HAL_GPIO_ReadPin>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <read_one_digit_from_keyboard+0x1a2>
		{
			digit =  '2';
 80010da:	2332      	movs	r3, #50	; 0x32
 80010dc:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e4:	4869      	ldr	r0, [pc, #420]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80010e6:	f005 f80b 	bl	8006100 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010f0:	4866      	ldr	r0, [pc, #408]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80010f2:	f005 f805 	bl	8006100 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80010f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010fa:	4865      	ldr	r0, [pc, #404]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 80010fc:	f004 ffe8 	bl	80060d0 <HAL_GPIO_ReadPin>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <read_one_digit_from_keyboard+0x1ce>
		{
			digit =  '5';
 8001106:	2335      	movs	r3, #53	; 0x35
 8001108:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001110:	485e      	ldr	r0, [pc, #376]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001112:	f004 fff5 	bl	8006100 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 7100 	mov.w	r1, #512	; 0x200
 800111c:	485b      	ldr	r0, [pc, #364]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800111e:	f004 ffef 	bl	8006100 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001122:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001126:	485a      	ldr	r0, [pc, #360]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 8001128:	f004 ffd2 	bl	80060d0 <HAL_GPIO_ReadPin>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <read_one_digit_from_keyboard+0x1fa>
		{
			digit = '8';
 8001132:	2338      	movs	r3, #56	; 0x38
 8001134:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	f44f 7100 	mov.w	r1, #512	; 0x200
 800113c:	4853      	ldr	r0, [pc, #332]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800113e:	f004 ffdf 	bl	8006100 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001148:	4850      	ldr	r0, [pc, #320]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800114a:	f004 ffd9 	bl	8006100 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800114e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001152:	484f      	ldr	r0, [pc, #316]	; (8001290 <read_one_digit_from_keyboard+0x354>)
 8001154:	f004 ffbc 	bl	80060d0 <HAL_GPIO_ReadPin>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <read_one_digit_from_keyboard+0x226>
		{
			digit = '0';
 800115e:	2330      	movs	r3, #48	; 0x30
 8001160:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001162:	2201      	movs	r2, #1
 8001164:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001168:	4848      	ldr	r0, [pc, #288]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800116a:	f004 ffc9 	bl	8006100 <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001174:	4845      	ldr	r0, [pc, #276]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001176:	f004 ffc3 	bl	8006100 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001180:	4842      	ldr	r0, [pc, #264]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001182:	f004 ffbd 	bl	8006100 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 7100 	mov.w	r1, #512	; 0x200
 800118c:	483f      	ldr	r0, [pc, #252]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800118e:	f004 ffb7 	bl	8006100 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001198:	483c      	ldr	r0, [pc, #240]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800119a:	f004 ffb1 	bl	8006100 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №   // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 800119e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011a2:	483c      	ldr	r0, [pc, #240]	; (8001294 <read_one_digit_from_keyboard+0x358>)
 80011a4:	f004 ff94 	bl	80060d0 <HAL_GPIO_ReadPin>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d169      	bne.n	8001282 <read_one_digit_from_keyboard+0x346>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b4:	4835      	ldr	r0, [pc, #212]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80011b6:	f004 ffa3 	bl	8006100 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80011ba:	2201      	movs	r2, #1
 80011bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011c0:	4832      	ldr	r0, [pc, #200]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80011c2:	f004 ff9d 	bl	8006100 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011cc:	482f      	ldr	r0, [pc, #188]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80011ce:	f004 ff97 	bl	8006100 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d8:	482c      	ldr	r0, [pc, #176]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80011da:	f004 ff91 	bl	8006100 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 80011de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011e2:	482c      	ldr	r0, [pc, #176]	; (8001294 <read_one_digit_from_keyboard+0x358>)
 80011e4:	f004 ff74 	bl	80060d0 <HAL_GPIO_ReadPin>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <read_one_digit_from_keyboard+0x2b6>
		{
			digit = '3';
 80011ee:	2333      	movs	r3, #51	; 0x33
 80011f0:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 80011f2:	2201      	movs	r2, #1
 80011f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f8:	4824      	ldr	r0, [pc, #144]	; (800128c <read_one_digit_from_keyboard+0x350>)
 80011fa:	f004 ff81 	bl	8006100 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001204:	4821      	ldr	r0, [pc, #132]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001206:	f004 ff7b 	bl	8006100 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800120a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800120e:	4821      	ldr	r0, [pc, #132]	; (8001294 <read_one_digit_from_keyboard+0x358>)
 8001210:	f004 ff5e 	bl	80060d0 <HAL_GPIO_ReadPin>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <read_one_digit_from_keyboard+0x2e2>
		{
			digit = '6';
 800121a:	2336      	movs	r3, #54	; 0x36
 800121c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800121e:	2201      	movs	r2, #1
 8001220:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001224:	4819      	ldr	r0, [pc, #100]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001226:	f004 ff6b 	bl	8006100 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001230:	4816      	ldr	r0, [pc, #88]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001232:	f004 ff65 	bl	8006100 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001236:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800123a:	4816      	ldr	r0, [pc, #88]	; (8001294 <read_one_digit_from_keyboard+0x358>)
 800123c:	f004 ff48 	bl	80060d0 <HAL_GPIO_ReadPin>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <read_one_digit_from_keyboard+0x30e>
		{
			digit = '9';
 8001246:	2339      	movs	r3, #57	; 0x39
 8001248:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800124a:	2201      	movs	r2, #1
 800124c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001250:	480e      	ldr	r0, [pc, #56]	; (800128c <read_one_digit_from_keyboard+0x350>)
 8001252:	f004 ff55 	bl	8006100 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	f44f 7180 	mov.w	r1, #256	; 0x100
 800125c:	480b      	ldr	r0, [pc, #44]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800125e:	f004 ff4f 	bl	8006100 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001262:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001266:	480b      	ldr	r0, [pc, #44]	; (8001294 <read_one_digit_from_keyboard+0x358>)
 8001268:	f004 ff32 	bl	80060d0 <HAL_GPIO_ReadPin>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <read_one_digit_from_keyboard+0x33a>
		{
			digit = '#';
 8001272:	2323      	movs	r3, #35	; 0x23
 8001274:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001276:	2201      	movs	r2, #1
 8001278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800127c:	4803      	ldr	r0, [pc, #12]	; (800128c <read_one_digit_from_keyboard+0x350>)
 800127e:	f004 ff3f 	bl	8006100 <HAL_GPIO_WritePin>
	}
	return digit;
 8001282:	79fb      	ldrb	r3, [r7, #7]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40020c00 	.word	0x40020c00
 8001290:	40020400 	.word	0x40020400
 8001294:	40021000 	.word	0x40021000

08001298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129e:	f004 fbd3 	bl	8005a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a2:	f000 f843 	bl	800132c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a6:	f000 faf5 	bl	8001894 <MX_GPIO_Init>
  MX_I2S3_Init();
 80012aa:	f000 f929 	bl	8001500 <MX_I2S3_Init>
  MX_SPI1_Init();
 80012ae:	f000 f96b 	bl	8001588 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80012b2:	f00d fdd9 	bl	800ee68 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80012b6:	f000 fa2b 	bl	8001710 <MX_TIM2_Init>
  MX_SPI2_Init();
 80012ba:	f000 f99b 	bl	80015f4 <MX_SPI2_Init>
  MX_RNG_Init();
 80012be:	f000 f94f 	bl	8001560 <MX_RNG_Init>
  MX_TIM3_Init();
 80012c2:	f000 fa73 	bl	80017ac <MX_TIM3_Init>
  MX_TIM1_Init();
 80012c6:	f000 f9cb 	bl	8001660 <MX_TIM1_Init>
  MX_I2C3_Init();
 80012ca:	f000 f8eb 	bl	80014a4 <MX_I2C3_Init>
  MX_I2C2_Init();
 80012ce:	f000 f8bb 	bl	8001448 <MX_I2C2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80012d2:	f000 f8ad 	bl	8001430 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 80012d6:	f001 fa0d 	bl	80026f4 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 80012da:	2000      	movs	r0, #0
 80012dc:	f001 fbb0 	bl	8002a40 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 80012e0:	2003      	movs	r0, #3
 80012e2:	f001 f9a9 	bl	8002638 <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 80012e6:	2000      	movs	r0, #0
 80012e8:	f001 fbaa 	bl	8002a40 <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 80012ec:	2364      	movs	r3, #100	; 0x64
 80012ee:	607b      	str	r3, [r7, #4]
  speed_test_LCD(number_of_tests);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f002 fa71 	bl	80037d8 <speed_test_LCD>

  ILI9341_Fill_Screen(BLACK);
 80012f6:	2000      	movs	r0, #0
 80012f8:	f001 fba2 	bl	8002a40 <ILI9341_Fill_Screen>

  // Start scan digits ///////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);			// Start read digits
 80012fc:	4809      	ldr	r0, [pc, #36]	; (8001324 <main+0x8c>)
 80012fe:	f009 fe79 	bl	800aff4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001302:	2100      	movs	r1, #0
 8001304:	4807      	ldr	r0, [pc, #28]	; (8001324 <main+0x8c>)
 8001306:	f009 fee5 	bl	800b0d4 <HAL_TIM_OC_Start_IT>
  keyboard.how_meny_digits_must_be_written = 10;
 800130a:	4b07      	ldr	r3, [pc, #28]	; (8001328 <main+0x90>)
 800130c:	220a      	movs	r2, #10
 800130e:	779a      	strb	r2, [r3, #30]
  // Encoder /////////////////////////////////////////
//  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
//  int32_t prevCounter = 0;
  ////////////////////////////////////////////////////

  detect_all_sensors_and_init();			// Detect all devices which connected to i2c2 and i2c3
 8001310:	f003 fd48 	bl	8004da4 <detect_all_sensors_and_init>
  measure_sensors();
 8001314:	f003 fd66 	bl	8004de4 <measure_sensors>
	  /////////////////////////////////////////////////////////////////


	  //I2C_3_scaner();

	 menu();
 8001318:	f001 fcdc 	bl	8002cd4 <menu>
//	  HAL_TIM_Base_Stop_IT(&htim3);				// Stop timer measure
//	  ARR_REG = TIM3-> CNT;


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800131c:	f00d fdca 	bl	800eeb4 <MX_USB_HOST_Process>
	 menu();
 8001320:	e7fa      	b.n	8001318 <main+0x80>
 8001322:	bf00      	nop
 8001324:	200003cc 	.word	0x200003cc
 8001328:	200002a4 	.word	0x200002a4

0800132c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b098      	sub	sp, #96	; 0x60
 8001330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001332:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001336:	2230      	movs	r2, #48	; 0x30
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f00e f8e4 	bl	800f508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	4b31      	ldr	r3, [pc, #196]	; (8001428 <SystemClock_Config+0xfc>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	4a30      	ldr	r2, [pc, #192]	; (8001428 <SystemClock_Config+0xfc>)
 8001368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800136c:	6413      	str	r3, [r2, #64]	; 0x40
 800136e:	4b2e      	ldr	r3, [pc, #184]	; (8001428 <SystemClock_Config+0xfc>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4b2b      	ldr	r3, [pc, #172]	; (800142c <SystemClock_Config+0x100>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a2a      	ldr	r2, [pc, #168]	; (800142c <SystemClock_Config+0x100>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	4b28      	ldr	r3, [pc, #160]	; (800142c <SystemClock_Config+0x100>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001396:	2301      	movs	r3, #1
 8001398:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800139a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800139e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a0:	2302      	movs	r3, #2
 80013a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013aa:	2308      	movs	r3, #8
 80013ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013ae:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013b2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013b4:	2302      	movs	r3, #2
 80013b6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013b8:	2307      	movs	r3, #7
 80013ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013c0:	4618      	mov	r0, r3
 80013c2:	f008 fd09 	bl	8009dd8 <HAL_RCC_OscConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80013cc:	f000 fbca 	bl	8001b64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d0:	230f      	movs	r3, #15
 80013d2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d4:	2302      	movs	r3, #2
 80013d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	2105      	movs	r1, #5
 80013ee:	4618      	mov	r0, r3
 80013f0:	f008 ff6a 	bl	800a2c8 <HAL_RCC_ClockConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80013fa:	f000 fbb3 	bl	8001b64 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80013fe:	2301      	movs	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001402:	23c0      	movs	r3, #192	; 0xc0
 8001404:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001406:	2302      	movs	r3, #2
 8001408:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	4618      	mov	r0, r3
 8001410:	f009 f942 	bl	800a698 <HAL_RCCEx_PeriphCLKConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800141a:	f000 fba3 	bl	8001b64 <Error_Handler>
  }
}
 800141e:	bf00      	nop
 8001420:	3760      	adds	r7, #96	; 0x60
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800
 800142c:	40007000 	.word	0x40007000

08001430 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	2100      	movs	r1, #0
 8001438:	201c      	movs	r0, #28
 800143a:	f004 fc76 	bl	8005d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800143e:	201c      	movs	r0, #28
 8001440:	f004 fc8f 	bl	8005d62 <HAL_NVIC_EnableIRQ>
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}

08001448 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <MX_I2C2_Init+0x50>)
 800144e:	4a13      	ldr	r2, [pc, #76]	; (800149c <MX_I2C2_Init+0x54>)
 8001450:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_I2C2_Init+0x50>)
 8001454:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <MX_I2C2_Init+0x58>)
 8001456:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_I2C2_Init+0x50>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_I2C2_Init+0x50>)
 8001460:	2200      	movs	r2, #0
 8001462:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_I2C2_Init+0x50>)
 8001466:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800146a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <MX_I2C2_Init+0x50>)
 800146e:	2200      	movs	r2, #0
 8001470:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_I2C2_Init+0x50>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <MX_I2C2_Init+0x50>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_I2C2_Init+0x50>)
 8001480:	2200      	movs	r2, #0
 8001482:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001484:	4804      	ldr	r0, [pc, #16]	; (8001498 <MX_I2C2_Init+0x50>)
 8001486:	f006 fbd3 	bl	8007c30 <HAL_I2C_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001490:	f000 fb68 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000378 	.word	0x20000378
 800149c:	40005800 	.word	0x40005800
 80014a0:	000186a0 	.word	0x000186a0

080014a4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014aa:	4a13      	ldr	r2, [pc, #76]	; (80014f8 <MX_I2C3_Init+0x54>)
 80014ac:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014b0:	4a12      	ldr	r2, [pc, #72]	; (80014fc <MX_I2C3_Init+0x58>)
 80014b2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014c6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014e0:	4804      	ldr	r0, [pc, #16]	; (80014f4 <MX_I2C3_Init+0x50>)
 80014e2:	f006 fba5 	bl	8007c30 <HAL_I2C_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80014ec:	f000 fb3a 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	200002cc 	.word	0x200002cc
 80014f8:	40005c00 	.word	0x40005c00
 80014fc:	000186a0 	.word	0x000186a0

08001500 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <MX_I2S3_Init+0x54>)
 8001506:	4a14      	ldr	r2, [pc, #80]	; (8001558 <MX_I2S3_Init+0x58>)
 8001508:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <MX_I2S3_Init+0x54>)
 800150c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001510:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <MX_I2S3_Init+0x54>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <MX_I2S3_Init+0x54>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <MX_I2S3_Init+0x54>)
 8001520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001524:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <MX_I2S3_Init+0x54>)
 8001528:	4a0c      	ldr	r2, [pc, #48]	; (800155c <MX_I2S3_Init+0x5c>)
 800152a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <MX_I2S3_Init+0x54>)
 800152e:	2200      	movs	r2, #0
 8001530:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <MX_I2S3_Init+0x54>)
 8001534:	2200      	movs	r2, #0
 8001536:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MX_I2S3_Init+0x54>)
 800153a:	2200      	movs	r2, #0
 800153c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_I2S3_Init+0x54>)
 8001540:	f007 ffaa 	bl	8009498 <HAL_I2S_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800154a:	f000 fb0b 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2000050c 	.word	0x2000050c
 8001558:	40003c00 	.word	0x40003c00
 800155c:	00017700 	.word	0x00017700

08001560 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_RNG_Init+0x20>)
 8001566:	4a07      	ldr	r2, [pc, #28]	; (8001584 <MX_RNG_Init+0x24>)
 8001568:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_RNG_Init+0x20>)
 800156c:	f009 f9d4 	bl	800a918 <HAL_RNG_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001576:	f000 faf5 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2000045c 	.word	0x2000045c
 8001584:	50060800 	.word	0x50060800

08001588 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800158c:	4b17      	ldr	r3, [pc, #92]	; (80015ec <MX_SPI1_Init+0x64>)
 800158e:	4a18      	ldr	r2, [pc, #96]	; (80015f0 <MX_SPI1_Init+0x68>)
 8001590:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001592:	4b16      	ldr	r3, [pc, #88]	; (80015ec <MX_SPI1_Init+0x64>)
 8001594:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001598:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800159a:	4b14      	ldr	r3, [pc, #80]	; (80015ec <MX_SPI1_Init+0x64>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <MX_SPI1_Init+0x64>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <MX_SPI1_Init+0x64>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <MX_SPI1_Init+0x64>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <MX_SPI1_Init+0x64>)
 80015b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <MX_SPI1_Init+0x64>)
 80015bc:	2200      	movs	r2, #0
 80015be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <MX_SPI1_Init+0x64>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <MX_SPI1_Init+0x64>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015cc:	4b07      	ldr	r3, [pc, #28]	; (80015ec <MX_SPI1_Init+0x64>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <MX_SPI1_Init+0x64>)
 80015d4:	220a      	movs	r2, #10
 80015d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015d8:	4804      	ldr	r0, [pc, #16]	; (80015ec <MX_SPI1_Init+0x64>)
 80015da:	f009 fa2b 	bl	800aa34 <HAL_SPI_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015e4:	f000 fabe 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	2000046c 	.word	0x2000046c
 80015f0:	40013000 	.word	0x40013000

080015f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <MX_SPI2_Init+0x64>)
 80015fa:	4a18      	ldr	r2, [pc, #96]	; (800165c <MX_SPI2_Init+0x68>)
 80015fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <MX_SPI2_Init+0x64>)
 8001600:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001604:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <MX_SPI2_Init+0x64>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <MX_SPI2_Init+0x64>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <MX_SPI2_Init+0x64>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <MX_SPI2_Init+0x64>)
 800161a:	2200      	movs	r2, #0
 800161c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <MX_SPI2_Init+0x64>)
 8001620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001624:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <MX_SPI2_Init+0x64>)
 8001628:	2200      	movs	r2, #0
 800162a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <MX_SPI2_Init+0x64>)
 800162e:	2200      	movs	r2, #0
 8001630:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <MX_SPI2_Init+0x64>)
 8001634:	2200      	movs	r2, #0
 8001636:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <MX_SPI2_Init+0x64>)
 800163a:	2200      	movs	r2, #0
 800163c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <MX_SPI2_Init+0x64>)
 8001640:	220a      	movs	r2, #10
 8001642:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <MX_SPI2_Init+0x64>)
 8001646:	f009 f9f5 	bl	800aa34 <HAL_SPI_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001650:	f000 fa88 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000320 	.word	0x20000320
 800165c:	40003800 	.word	0x40003800

08001660 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08c      	sub	sp, #48	; 0x30
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001666:	f107 030c 	add.w	r3, r7, #12
 800166a:	2224      	movs	r2, #36	; 0x24
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f00d ff4a 	bl	800f508 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800167c:	4b22      	ldr	r3, [pc, #136]	; (8001708 <MX_TIM1_Init+0xa8>)
 800167e:	4a23      	ldr	r2, [pc, #140]	; (800170c <MX_TIM1_Init+0xac>)
 8001680:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001682:	4b21      	ldr	r3, [pc, #132]	; (8001708 <MX_TIM1_Init+0xa8>)
 8001684:	2200      	movs	r2, #0
 8001686:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001688:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <MX_TIM1_Init+0xa8>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800168e:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <MX_TIM1_Init+0xa8>)
 8001690:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001694:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <MX_TIM1_Init+0xa8>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800169c:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <MX_TIM1_Init+0xa8>)
 800169e:	2200      	movs	r2, #0
 80016a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <MX_TIM1_Init+0xa8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80016a8:	2301      	movs	r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016ac:	2300      	movs	r3, #0
 80016ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016b0:	2301      	movs	r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016bc:	2300      	movs	r3, #0
 80016be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016c0:	2301      	movs	r3, #1
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80016cc:	f107 030c 	add.w	r3, r7, #12
 80016d0:	4619      	mov	r1, r3
 80016d2:	480d      	ldr	r0, [pc, #52]	; (8001708 <MX_TIM1_Init+0xa8>)
 80016d4:	f009 fe65 	bl	800b3a2 <HAL_TIM_Encoder_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80016de:	f000 fa41 	bl	8001b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	4619      	mov	r1, r3
 80016ee:	4806      	ldr	r0, [pc, #24]	; (8001708 <MX_TIM1_Init+0xa8>)
 80016f0:	f00a fcca 	bl	800c088 <HAL_TIMEx_MasterConfigSynchronization>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80016fa:	f000 fa33 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	3730      	adds	r7, #48	; 0x30
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000414 	.word	0x20000414
 800170c:	40010000 	.word	0x40010000

08001710 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001716:	f107 0308 	add.w	r3, r7, #8
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001724:	463b      	mov	r3, r7
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800172c:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <MX_TIM2_Init+0x98>)
 800172e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001732:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8001734:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <MX_TIM2_Init+0x98>)
 8001736:	f240 3247 	movw	r2, #839	; 0x347
 800173a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173c:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <MX_TIM2_Init+0x98>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <MX_TIM2_Init+0x98>)
 8001744:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001748:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_TIM2_Init+0x98>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <MX_TIM2_Init+0x98>)
 8001752:	2280      	movs	r2, #128	; 0x80
 8001754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001756:	4814      	ldr	r0, [pc, #80]	; (80017a8 <MX_TIM2_Init+0x98>)
 8001758:	f009 fbfc 	bl	800af54 <HAL_TIM_Base_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001762:	f000 f9ff 	bl	8001b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800176c:	f107 0308 	add.w	r3, r7, #8
 8001770:	4619      	mov	r1, r3
 8001772:	480d      	ldr	r0, [pc, #52]	; (80017a8 <MX_TIM2_Init+0x98>)
 8001774:	f00a f882 	bl	800b87c <HAL_TIM_ConfigClockSource>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800177e:	f000 f9f1 	bl	8001b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001782:	2310      	movs	r3, #16
 8001784:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800178a:	463b      	mov	r3, r7
 800178c:	4619      	mov	r1, r3
 800178e:	4806      	ldr	r0, [pc, #24]	; (80017a8 <MX_TIM2_Init+0x98>)
 8001790:	f00a fc7a 	bl	800c088 <HAL_TIMEx_MasterConfigSynchronization>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800179a:	f000 f9e3 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200004c4 	.word	0x200004c4

080017ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08e      	sub	sp, #56	; 0x38
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c0:	f107 0320 	add.w	r3, r7, #32
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
 80017d8:	615a      	str	r2, [r3, #20]
 80017da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017dc:	4b2b      	ldr	r3, [pc, #172]	; (800188c <MX_TIM3_Init+0xe0>)
 80017de:	4a2c      	ldr	r2, [pc, #176]	; (8001890 <MX_TIM3_Init+0xe4>)
 80017e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 80017e2:	4b2a      	ldr	r3, [pc, #168]	; (800188c <MX_TIM3_Init+0xe0>)
 80017e4:	f640 0233 	movw	r2, #2099	; 0x833
 80017e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ea:	4b28      	ldr	r3, [pc, #160]	; (800188c <MX_TIM3_Init+0xe0>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80017f0:	4b26      	ldr	r3, [pc, #152]	; (800188c <MX_TIM3_Init+0xe0>)
 80017f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80017f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f8:	4b24      	ldr	r3, [pc, #144]	; (800188c <MX_TIM3_Init+0xe0>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017fe:	4b23      	ldr	r3, [pc, #140]	; (800188c <MX_TIM3_Init+0xe0>)
 8001800:	2280      	movs	r2, #128	; 0x80
 8001802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001804:	4821      	ldr	r0, [pc, #132]	; (800188c <MX_TIM3_Init+0xe0>)
 8001806:	f009 fba5 	bl	800af54 <HAL_TIM_Base_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001810:	f000 f9a8 	bl	8001b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001818:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800181a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800181e:	4619      	mov	r1, r3
 8001820:	481a      	ldr	r0, [pc, #104]	; (800188c <MX_TIM3_Init+0xe0>)
 8001822:	f00a f82b 	bl	800b87c <HAL_TIM_ConfigClockSource>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800182c:	f000 f99a 	bl	8001b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001830:	4816      	ldr	r0, [pc, #88]	; (800188c <MX_TIM3_Init+0xe0>)
 8001832:	f009 fd5d 	bl	800b2f0 <HAL_TIM_PWM_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800183c:	f000 f992 	bl	8001b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001848:	f107 0320 	add.w	r3, r7, #32
 800184c:	4619      	mov	r1, r3
 800184e:	480f      	ldr	r0, [pc, #60]	; (800188c <MX_TIM3_Init+0xe0>)
 8001850:	f00a fc1a 	bl	800c088 <HAL_TIMEx_MasterConfigSynchronization>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800185a:	f000 f983 	bl	8001b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800185e:	2360      	movs	r3, #96	; 0x60
 8001860:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	2200      	movs	r2, #0
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_TIM3_Init+0xe0>)
 8001876:	f009 ff43 	bl	800b700 <HAL_TIM_PWM_ConfigChannel>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001880:	f000 f970 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001884:	bf00      	nop
 8001886:	3738      	adds	r7, #56	; 0x38
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	200003cc 	.word	0x200003cc
 8001890:	40000400 	.word	0x40000400

08001894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08c      	sub	sp, #48	; 0x30
 8001898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189a:	f107 031c 	add.w	r3, r7, #28
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
 80018ae:	4ba6      	ldr	r3, [pc, #664]	; (8001b48 <MX_GPIO_Init+0x2b4>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4aa5      	ldr	r2, [pc, #660]	; (8001b48 <MX_GPIO_Init+0x2b4>)
 80018b4:	f043 0310 	orr.w	r3, r3, #16
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4ba3      	ldr	r3, [pc, #652]	; (8001b48 <MX_GPIO_Init+0x2b4>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	61bb      	str	r3, [r7, #24]
 80018c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	4b9f      	ldr	r3, [pc, #636]	; (8001b48 <MX_GPIO_Init+0x2b4>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a9e      	ldr	r2, [pc, #632]	; (8001b48 <MX_GPIO_Init+0x2b4>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b9c      	ldr	r3, [pc, #624]	; (8001b48 <MX_GPIO_Init+0x2b4>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	4b98      	ldr	r3, [pc, #608]	; (8001b48 <MX_GPIO_Init+0x2b4>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a97      	ldr	r2, [pc, #604]	; (8001b48 <MX_GPIO_Init+0x2b4>)
 80018ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b95      	ldr	r3, [pc, #596]	; (8001b48 <MX_GPIO_Init+0x2b4>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	4b91      	ldr	r3, [pc, #580]	; (8001b48 <MX_GPIO_Init+0x2b4>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a90      	ldr	r2, [pc, #576]	; (8001b48 <MX_GPIO_Init+0x2b4>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b8e      	ldr	r3, [pc, #568]	; (8001b48 <MX_GPIO_Init+0x2b4>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	4b8a      	ldr	r3, [pc, #552]	; (8001b48 <MX_GPIO_Init+0x2b4>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a89      	ldr	r2, [pc, #548]	; (8001b48 <MX_GPIO_Init+0x2b4>)
 8001924:	f043 0302 	orr.w	r3, r3, #2
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b87      	ldr	r3, [pc, #540]	; (8001b48 <MX_GPIO_Init+0x2b4>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	607b      	str	r3, [r7, #4]
 800193a:	4b83      	ldr	r3, [pc, #524]	; (8001b48 <MX_GPIO_Init+0x2b4>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a82      	ldr	r2, [pc, #520]	; (8001b48 <MX_GPIO_Init+0x2b4>)
 8001940:	f043 0308 	orr.w	r3, r3, #8
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b80      	ldr	r3, [pc, #512]	; (8001b48 <MX_GPIO_Init+0x2b4>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 8001952:	2200      	movs	r2, #0
 8001954:	217c      	movs	r1, #124	; 0x7c
 8001956:	487d      	ldr	r0, [pc, #500]	; (8001b4c <MX_GPIO_Init+0x2b8>)
 8001958:	f004 fbd2 	bl	8006100 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800195c:	2201      	movs	r2, #1
 800195e:	2101      	movs	r1, #1
 8001960:	487b      	ldr	r0, [pc, #492]	; (8001b50 <MX_GPIO_Init+0x2bc>)
 8001962:	f004 fbcd 	bl	8006100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001966:	2200      	movs	r2, #0
 8001968:	f64f 7110 	movw	r1, #65296	; 0xff10
 800196c:	4879      	ldr	r0, [pc, #484]	; (8001b54 <MX_GPIO_Init+0x2c0>)
 800196e:	f004 fbc7 	bl	8006100 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_mcroSD_Pin|CS_M25Q_Pin, GPIO_PIN_RESET);
 8001972:	2200      	movs	r2, #0
 8001974:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8001978:	4875      	ldr	r0, [pc, #468]	; (8001b50 <MX_GPIO_Init+0x2bc>)
 800197a:	f004 fbc1 	bl	8006100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 800197e:	2200      	movs	r2, #0
 8001980:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001984:	4874      	ldr	r0, [pc, #464]	; (8001b58 <MX_GPIO_Init+0x2c4>)
 8001986:	f004 fbbb 	bl	8006100 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 800198a:	2374      	movs	r3, #116	; 0x74
 800198c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198e:	2301      	movs	r3, #1
 8001990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001996:	2303      	movs	r3, #3
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800199a:	f107 031c 	add.w	r3, r7, #28
 800199e:	4619      	mov	r1, r3
 80019a0:	486a      	ldr	r0, [pc, #424]	; (8001b4c <MX_GPIO_Init+0x2b8>)
 80019a2:	f004 f9f9 	bl	8005d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80019a6:	2308      	movs	r3, #8
 80019a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019aa:	2301      	movs	r3, #1
 80019ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2300      	movs	r3, #0
 80019b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80019b6:	f107 031c 	add.w	r3, r7, #28
 80019ba:	4619      	mov	r1, r3
 80019bc:	4863      	ldr	r0, [pc, #396]	; (8001b4c <MX_GPIO_Init+0x2b8>)
 80019be:	f004 f9eb 	bl	8005d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 80019c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c8:	2300      	movs	r3, #0
 80019ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80019d0:	f107 031c 	add.w	r3, r7, #28
 80019d4:	4619      	mov	r1, r3
 80019d6:	485e      	ldr	r0, [pc, #376]	; (8001b50 <MX_GPIO_Init+0x2bc>)
 80019d8:	f004 f9de 	bl	8005d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_mcroSD_Pin CS_M25Q_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_mcroSD_Pin|CS_M25Q_Pin;
 80019dc:	f640 0341 	movw	r3, #2113	; 0x841
 80019e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e2:	2301      	movs	r3, #1
 80019e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ee:	f107 031c 	add.w	r3, r7, #28
 80019f2:	4619      	mov	r1, r3
 80019f4:	4856      	ldr	r0, [pc, #344]	; (8001b50 <MX_GPIO_Init+0x2bc>)
 80019f6:	f004 f9cf 	bl	8005d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80019fa:	2308      	movs	r3, #8
 80019fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a0a:	2305      	movs	r3, #5
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	4619      	mov	r1, r3
 8001a14:	484e      	ldr	r0, [pc, #312]	; (8001b50 <MX_GPIO_Init+0x2bc>)
 8001a16:	f004 f9bf 	bl	8005d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a1e:	4b4f      	ldr	r3, [pc, #316]	; (8001b5c <MX_GPIO_Init+0x2c8>)
 8001a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	484c      	ldr	r0, [pc, #304]	; (8001b60 <MX_GPIO_Init+0x2cc>)
 8001a2e:	f004 f9b3 	bl	8005d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001a32:	2304      	movs	r3, #4
 8001a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a36:	2300      	movs	r3, #0
 8001a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001a3e:	f107 031c 	add.w	r3, r7, #28
 8001a42:	4619      	mov	r1, r3
 8001a44:	4844      	ldr	r0, [pc, #272]	; (8001b58 <MX_GPIO_Init+0x2c4>)
 8001a46:	f004 f9a7 	bl	8005d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTION_SENSOR_9960_Pin KEYBOARD_COLUMN_3_Pin encoder_button_Pin */
  GPIO_InitStruct.Pin = MOTION_SENSOR_9960_Pin|KEYBOARD_COLUMN_3_Pin|encoder_button_Pin;
 8001a4a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a50:	2300      	movs	r3, #0
 8001a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a54:	2301      	movs	r3, #1
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a58:	f107 031c 	add.w	r3, r7, #28
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	483b      	ldr	r0, [pc, #236]	; (8001b4c <MX_GPIO_Init+0x2b8>)
 8001a60:	f004 f99a 	bl	8005d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 8001a64:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	4619      	mov	r1, r3
 8001a78:	4837      	ldr	r0, [pc, #220]	; (8001b58 <MX_GPIO_Init+0x2c4>)
 8001a7a:	f004 f98d 	bl	8005d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001a7e:	f64f 7310 	movw	r3, #65296	; 0xff10
 8001a82:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a84:	2301      	movs	r3, #1
 8001a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a90:	f107 031c 	add.w	r3, r7, #28
 8001a94:	4619      	mov	r1, r3
 8001a96:	482f      	ldr	r0, [pc, #188]	; (8001b54 <MX_GPIO_Init+0x2c0>)
 8001a98:	f004 f97e 	bl	8005d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a9c:	2320      	movs	r3, #32
 8001a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001aa8:	f107 031c 	add.w	r3, r7, #28
 8001aac:	4619      	mov	r1, r3
 8001aae:	4829      	ldr	r0, [pc, #164]	; (8001b54 <MX_GPIO_Init+0x2c0>)
 8001ab0:	f004 f972 	bl	8005d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ab4:	2340      	movs	r3, #64	; 0x40
 8001ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac4:	f107 031c 	add.w	r3, r7, #28
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4823      	ldr	r0, [pc, #140]	; (8001b58 <MX_GPIO_Init+0x2c4>)
 8001acc:	f004 f964 	bl	8005d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8001ad0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae2:	f107 031c 	add.w	r3, r7, #28
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	481b      	ldr	r0, [pc, #108]	; (8001b58 <MX_GPIO_Init+0x2c4>)
 8001aea:	f004 f955 	bl	8005d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001af4:	2312      	movs	r3, #18
 8001af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001af8:	2301      	movs	r3, #1
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2300      	movs	r3, #0
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b00:	2304      	movs	r3, #4
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4813      	ldr	r0, [pc, #76]	; (8001b58 <MX_GPIO_Init+0x2c4>)
 8001b0c:	f004 f944 	bl	8005d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8001b10:	2301      	movs	r3, #1
 8001b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b14:	2300      	movs	r3, #0
 8001b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	4619      	mov	r1, r3
 8001b22:	480a      	ldr	r0, [pc, #40]	; (8001b4c <MX_GPIO_Init+0x2b8>)
 8001b24:	f004 f938 	bl	8005d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <MX_GPIO_Init+0x2c8>)
 8001b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001b34:	f107 031c 	add.w	r3, r7, #28
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4804      	ldr	r0, [pc, #16]	; (8001b4c <MX_GPIO_Init+0x2b8>)
 8001b3c:	f004 f92c 	bl	8005d98 <HAL_GPIO_Init>

}
 8001b40:	bf00      	nop
 8001b42:	3730      	adds	r7, #48	; 0x30
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40020800 	.word	0x40020800
 8001b54:	40020c00 	.word	0x40020c00
 8001b58:	40020400 	.word	0x40020400
 8001b5c:	10120000 	.word	0x10120000
 8001b60:	40020000 	.word	0x40020000

08001b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b68:	b672      	cpsid	i
}
 8001b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <Error_Handler+0x8>
	...

08001b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <HAL_MspInit+0x5c>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	4a13      	ldr	r2, [pc, #76]	; (8001bcc <HAL_MspInit+0x5c>)
 8001b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b84:	6453      	str	r3, [r2, #68]	; 0x44
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <HAL_MspInit+0x5c>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	603b      	str	r3, [r7, #0]
 8001b96:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <HAL_MspInit+0x5c>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	4a0c      	ldr	r2, [pc, #48]	; (8001bcc <HAL_MspInit+0x5c>)
 8001b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <HAL_MspInit+0x5c>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bae:	2007      	movs	r0, #7
 8001bb0:	f004 f8b0 	bl	8005d14 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	2005      	movs	r0, #5
 8001bba:	f004 f8b6 	bl	8005d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001bbe:	2005      	movs	r0, #5
 8001bc0:	f004 f8cf 	bl	8005d62 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40023800 	.word	0x40023800

08001bd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08c      	sub	sp, #48	; 0x30
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 031c 	add.w	r3, r7, #28
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a42      	ldr	r2, [pc, #264]	; (8001cf8 <HAL_I2C_MspInit+0x128>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d12d      	bne.n	8001c4e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61bb      	str	r3, [r7, #24]
 8001bf6:	4b41      	ldr	r3, [pc, #260]	; (8001cfc <HAL_I2C_MspInit+0x12c>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a40      	ldr	r2, [pc, #256]	; (8001cfc <HAL_I2C_MspInit+0x12c>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b3e      	ldr	r3, [pc, #248]	; (8001cfc <HAL_I2C_MspInit+0x12c>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	61bb      	str	r3, [r7, #24]
 8001c0c:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c0e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c14:	2312      	movs	r3, #18
 8001c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c20:	2304      	movs	r3, #4
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c24:	f107 031c 	add.w	r3, r7, #28
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4835      	ldr	r0, [pc, #212]	; (8001d00 <HAL_I2C_MspInit+0x130>)
 8001c2c:	f004 f8b4 	bl	8005d98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	4b31      	ldr	r3, [pc, #196]	; (8001cfc <HAL_I2C_MspInit+0x12c>)
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	4a30      	ldr	r2, [pc, #192]	; (8001cfc <HAL_I2C_MspInit+0x12c>)
 8001c3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c40:	4b2e      	ldr	r3, [pc, #184]	; (8001cfc <HAL_I2C_MspInit+0x12c>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001c4c:	e050      	b.n	8001cf0 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a2c      	ldr	r2, [pc, #176]	; (8001d04 <HAL_I2C_MspInit+0x134>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d14b      	bne.n	8001cf0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c58:	2300      	movs	r3, #0
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	4b27      	ldr	r3, [pc, #156]	; (8001cfc <HAL_I2C_MspInit+0x12c>)
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	4a26      	ldr	r2, [pc, #152]	; (8001cfc <HAL_I2C_MspInit+0x12c>)
 8001c62:	f043 0304 	orr.w	r3, r3, #4
 8001c66:	6313      	str	r3, [r2, #48]	; 0x30
 8001c68:	4b24      	ldr	r3, [pc, #144]	; (8001cfc <HAL_I2C_MspInit+0x12c>)
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	4b20      	ldr	r3, [pc, #128]	; (8001cfc <HAL_I2C_MspInit+0x12c>)
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	4a1f      	ldr	r2, [pc, #124]	; (8001cfc <HAL_I2C_MspInit+0x12c>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	6313      	str	r3, [r2, #48]	; 0x30
 8001c84:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <HAL_I2C_MspInit+0x12c>)
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c96:	2312      	movs	r3, #18
 8001c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca6:	f107 031c 	add.w	r3, r7, #28
 8001caa:	4619      	mov	r1, r3
 8001cac:	4816      	ldr	r0, [pc, #88]	; (8001d08 <HAL_I2C_MspInit+0x138>)
 8001cae:	f004 f873 	bl	8005d98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cb8:	2312      	movs	r3, #18
 8001cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	4619      	mov	r1, r3
 8001cce:	480f      	ldr	r0, [pc, #60]	; (8001d0c <HAL_I2C_MspInit+0x13c>)
 8001cd0:	f004 f862 	bl	8005d98 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <HAL_I2C_MspInit+0x12c>)
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	4a07      	ldr	r2, [pc, #28]	; (8001cfc <HAL_I2C_MspInit+0x12c>)
 8001cde:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <HAL_I2C_MspInit+0x12c>)
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
}
 8001cf0:	bf00      	nop
 8001cf2:	3730      	adds	r7, #48	; 0x30
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40005800 	.word	0x40005800
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40020400 	.word	0x40020400
 8001d04:	40005c00 	.word	0x40005c00
 8001d08:	40020800 	.word	0x40020800
 8001d0c:	40020000 	.word	0x40020000

08001d10 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	; 0x28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a28      	ldr	r2, [pc, #160]	; (8001dd0 <HAL_I2S_MspInit+0xc0>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d14a      	bne.n	8001dc8 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	4b27      	ldr	r3, [pc, #156]	; (8001dd4 <HAL_I2S_MspInit+0xc4>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	4a26      	ldr	r2, [pc, #152]	; (8001dd4 <HAL_I2S_MspInit+0xc4>)
 8001d3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d40:	6413      	str	r3, [r2, #64]	; 0x40
 8001d42:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <HAL_I2S_MspInit+0xc4>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <HAL_I2S_MspInit+0xc4>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	4a1f      	ldr	r2, [pc, #124]	; (8001dd4 <HAL_I2S_MspInit+0xc4>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5e:	4b1d      	ldr	r3, [pc, #116]	; (8001dd4 <HAL_I2S_MspInit+0xc4>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_I2S_MspInit+0xc4>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a18      	ldr	r2, [pc, #96]	; (8001dd4 <HAL_I2S_MspInit+0xc4>)
 8001d74:	f043 0304 	orr.w	r3, r3, #4
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <HAL_I2S_MspInit+0xc4>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001d86:	2310      	movs	r3, #16
 8001d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	2300      	movs	r3, #0
 8001d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d96:	2306      	movs	r3, #6
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	4619      	mov	r1, r3
 8001da0:	480d      	ldr	r0, [pc, #52]	; (8001dd8 <HAL_I2S_MspInit+0xc8>)
 8001da2:	f003 fff9 	bl	8005d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001da6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	2300      	movs	r3, #0
 8001db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001db8:	2306      	movs	r3, #6
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4806      	ldr	r0, [pc, #24]	; (8001ddc <HAL_I2S_MspInit+0xcc>)
 8001dc4:	f003 ffe8 	bl	8005d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001dc8:	bf00      	nop
 8001dca:	3728      	adds	r7, #40	; 0x28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40003c00 	.word	0x40003c00
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020000 	.word	0x40020000
 8001ddc:	40020800 	.word	0x40020800

08001de0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0b      	ldr	r2, [pc, #44]	; (8001e1c <HAL_RNG_MspInit+0x3c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d10d      	bne.n	8001e0e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_RNG_MspInit+0x40>)
 8001df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dfa:	4a09      	ldr	r2, [pc, #36]	; (8001e20 <HAL_RNG_MspInit+0x40>)
 8001dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e00:	6353      	str	r3, [r2, #52]	; 0x34
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <HAL_RNG_MspInit+0x40>)
 8001e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001e0e:	bf00      	nop
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	50060800 	.word	0x50060800
 8001e20:	40023800 	.word	0x40023800

08001e24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08c      	sub	sp, #48	; 0x30
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 031c 	add.w	r3, r7, #28
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a41      	ldr	r2, [pc, #260]	; (8001f48 <HAL_SPI_MspInit+0x124>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d12c      	bne.n	8001ea0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	61bb      	str	r3, [r7, #24]
 8001e4a:	4b40      	ldr	r3, [pc, #256]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	4a3f      	ldr	r2, [pc, #252]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001e50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e54:	6453      	str	r3, [r2, #68]	; 0x44
 8001e56:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e5e:	61bb      	str	r3, [r7, #24]
 8001e60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	4b39      	ldr	r3, [pc, #228]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a38      	ldr	r2, [pc, #224]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b36      	ldr	r3, [pc, #216]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001e7e:	23e0      	movs	r3, #224	; 0xe0
 8001e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e8e:	2305      	movs	r3, #5
 8001e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e92:	f107 031c 	add.w	r3, r7, #28
 8001e96:	4619      	mov	r1, r3
 8001e98:	482d      	ldr	r0, [pc, #180]	; (8001f50 <HAL_SPI_MspInit+0x12c>)
 8001e9a:	f003 ff7d 	bl	8005d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e9e:	e04f      	b.n	8001f40 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a2b      	ldr	r2, [pc, #172]	; (8001f54 <HAL_SPI_MspInit+0x130>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d14a      	bne.n	8001f40 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	4b27      	ldr	r3, [pc, #156]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4a26      	ldr	r2, [pc, #152]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eba:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a1f      	ldr	r2, [pc, #124]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001ed0:	f043 0304 	orr.w	r3, r3, #4
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	4a18      	ldr	r2, [pc, #96]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001eec:	f043 0302 	orr.w	r3, r3, #2
 8001ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef2:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001efe:	2304      	movs	r3, #4
 8001f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f0e:	2305      	movs	r3, #5
 8001f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f12:	f107 031c 	add.w	r3, r7, #28
 8001f16:	4619      	mov	r1, r3
 8001f18:	480f      	ldr	r0, [pc, #60]	; (8001f58 <HAL_SPI_MspInit+0x134>)
 8001f1a:	f003 ff3d 	bl	8005d98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001f1e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f30:	2305      	movs	r3, #5
 8001f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f34:	f107 031c 	add.w	r3, r7, #28
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4808      	ldr	r0, [pc, #32]	; (8001f5c <HAL_SPI_MspInit+0x138>)
 8001f3c:	f003 ff2c 	bl	8005d98 <HAL_GPIO_Init>
}
 8001f40:	bf00      	nop
 8001f42:	3730      	adds	r7, #48	; 0x30
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40013000 	.word	0x40013000
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40020000 	.word	0x40020000
 8001f54:	40003800 	.word	0x40003800
 8001f58:	40020800 	.word	0x40020800
 8001f5c:	40020400 	.word	0x40020400

08001f60 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a19      	ldr	r2, [pc, #100]	; (8001fe4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d12c      	bne.n	8001fdc <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6453      	str	r3, [r2, #68]	; 0x44
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a10      	ldr	r2, [pc, #64]	; (8001fe8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001fa8:	f043 0310 	orr.w	r3, r3, #16
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0310 	and.w	r3, r3, #16
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001fba:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <HAL_TIM_Encoder_MspInit+0x8c>)
 8001fd8:	f003 fede 	bl	8005d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001fdc:	bf00      	nop
 8001fde:	3728      	adds	r7, #40	; 0x28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40010000 	.word	0x40010000
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40021000 	.word	0x40021000

08001ff0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002000:	d10e      	bne.n	8002020 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	4b16      	ldr	r3, [pc, #88]	; (8002060 <HAL_TIM_Base_MspInit+0x70>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	4a15      	ldr	r2, [pc, #84]	; (8002060 <HAL_TIM_Base_MspInit+0x70>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6413      	str	r3, [r2, #64]	; 0x40
 8002012:	4b13      	ldr	r3, [pc, #76]	; (8002060 <HAL_TIM_Base_MspInit+0x70>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800201e:	e01a      	b.n	8002056 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a0f      	ldr	r2, [pc, #60]	; (8002064 <HAL_TIM_Base_MspInit+0x74>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d115      	bne.n	8002056 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <HAL_TIM_Base_MspInit+0x70>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <HAL_TIM_Base_MspInit+0x70>)
 8002034:	f043 0302 	orr.w	r3, r3, #2
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <HAL_TIM_Base_MspInit+0x70>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	201d      	movs	r0, #29
 800204c:	f003 fe6d 	bl	8005d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002050:	201d      	movs	r0, #29
 8002052:	f003 fe86 	bl	8005d62 <HAL_NVIC_EnableIRQ>
}
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800
 8002064:	40000400 	.word	0x40000400

08002068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800206c:	e7fe      	b.n	800206c <NMI_Handler+0x4>

0800206e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002072:	e7fe      	b.n	8002072 <HardFault_Handler+0x4>

08002074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002078:	e7fe      	b.n	8002078 <MemManage_Handler+0x4>

0800207a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800207e:	e7fe      	b.n	800207e <BusFault_Handler+0x4>

08002080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <UsageFault_Handler+0x4>

08002086 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b4:	f003 fd1a 	bl	8005aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}

080020bc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 80020d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020d4:	481b      	ldr	r0, [pc, #108]	; (8002144 <TIM2_IRQHandler+0x78>)
 80020d6:	f004 f82c 	bl	8006132 <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 80020da:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <TIM2_IRQHandler+0x7c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d111      	bne.n	8002106 <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 80020e2:	4b1a      	ldr	r3, [pc, #104]	; (800214c <TIM2_IRQHandler+0x80>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2bc8      	cmp	r3, #200	; 0xc8
 80020e8:	dc0a      	bgt.n	8002100 <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 80020ea:	4b18      	ldr	r3, [pc, #96]	; (800214c <TIM2_IRQHandler+0x80>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	4b18      	ldr	r3, [pc, #96]	; (8002150 <TIM2_IRQHandler+0x84>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 80020f4:	4b15      	ldr	r3, [pc, #84]	; (800214c <TIM2_IRQHandler+0x80>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	3301      	adds	r3, #1
 80020fa:	4a14      	ldr	r2, [pc, #80]	; (800214c <TIM2_IRQHandler+0x80>)
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	e002      	b.n	8002106 <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <TIM2_IRQHandler+0x7c>)
 8002102:	2201      	movs	r2, #1
 8002104:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <TIM2_IRQHandler+0x7c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d114      	bne.n	8002138 <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 800210e:	4b0f      	ldr	r3, [pc, #60]	; (800214c <TIM2_IRQHandler+0x80>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b63      	cmp	r3, #99	; 0x63
 8002114:	dd0a      	ble.n	800212c <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 8002116:	4b0d      	ldr	r3, [pc, #52]	; (800214c <TIM2_IRQHandler+0x80>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <TIM2_IRQHandler+0x84>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 8002120:	4b0a      	ldr	r3, [pc, #40]	; (800214c <TIM2_IRQHandler+0x80>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	3b01      	subs	r3, #1
 8002126:	4a09      	ldr	r2, [pc, #36]	; (800214c <TIM2_IRQHandler+0x80>)
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e005      	b.n	8002138 <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <TIM2_IRQHandler+0x7c>)
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
		  i = 100;
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <TIM2_IRQHandler+0x80>)
 8002134:	2264      	movs	r2, #100	; 0x64
 8002136:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002138:	4805      	ldr	r0, [pc, #20]	; (8002150 <TIM2_IRQHandler+0x84>)
 800213a:	f009 f9d8 	bl	800b4ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40020c00 	.word	0x40020c00
 8002148:	2000028c 	.word	0x2000028c
 800214c:	20000000 	.word	0x20000000
 8002150:	200004c4 	.word	0x200004c4

08002154 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8002158:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800215c:	4804      	ldr	r0, [pc, #16]	; (8002170 <TIM3_IRQHandler+0x1c>)
 800215e:	f003 ffe8 	bl	8006132 <HAL_GPIO_TogglePin>
  read_digits();
 8002162:	f7fe fe91 	bl	8000e88 <read_digits>

	//keyboard_test();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002166:	4803      	ldr	r0, [pc, #12]	; (8002174 <TIM3_IRQHandler+0x20>)
 8002168:	f009 f9c1 	bl	800b4ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40020c00 	.word	0x40020c00
 8002174:	200003cc 	.word	0x200003cc

08002178 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800217c:	4802      	ldr	r0, [pc, #8]	; (8002188 <OTG_FS_IRQHandler+0x10>)
 800217e:	f004 fa5d 	bl	800663c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000a40 	.word	0x20000a40

0800218c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002194:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <_sbrk+0x5c>)
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <_sbrk+0x60>)
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021a0:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <_sbrk+0x64>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d102      	bne.n	80021ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <_sbrk+0x64>)
 80021aa:	4a12      	ldr	r2, [pc, #72]	; (80021f4 <_sbrk+0x68>)
 80021ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <_sbrk+0x64>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d207      	bcs.n	80021cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021bc:	f00d f95c 	bl	800f478 <__errno>
 80021c0:	4603      	mov	r3, r0
 80021c2:	220c      	movs	r2, #12
 80021c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021ca:	e009      	b.n	80021e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021cc:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <_sbrk+0x64>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021d2:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <_sbrk+0x64>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	4a05      	ldr	r2, [pc, #20]	; (80021f0 <_sbrk+0x64>)
 80021dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021de:	68fb      	ldr	r3, [r7, #12]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20020000 	.word	0x20020000
 80021ec:	00000400 	.word	0x00000400
 80021f0:	20000290 	.word	0x20000290
 80021f4:	20000d58 	.word	0x20000d58

080021f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <SystemInit+0x20>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002202:	4a05      	ldr	r2, [pc, #20]	; (8002218 <SystemInit+0x20>)
 8002204:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002208:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b08b      	sub	sp, #44	; 0x2c
 8002220:	af00      	add	r7, sp, #0
 8002222:	4604      	mov	r4, r0
 8002224:	4608      	mov	r0, r1
 8002226:	4611      	mov	r1, r2
 8002228:	461a      	mov	r2, r3
 800222a:	4623      	mov	r3, r4
 800222c:	80fb      	strh	r3, [r7, #6]
 800222e:	4603      	mov	r3, r0
 8002230:	80bb      	strh	r3, [r7, #4]
 8002232:	460b      	mov	r3, r1
 8002234:	807b      	strh	r3, [r7, #2]
 8002236:	4613      	mov	r3, r2
 8002238:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 800223a:	887b      	ldrh	r3, [r7, #2]
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8002242:	887b      	ldrh	r3, [r7, #2]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	f1c3 0301 	rsb	r3, r3, #1
 800224a:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 800224c:	2300      	movs	r3, #0
 800224e:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8002254:	e061      	b.n	800231a <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8002256:	88fa      	ldrh	r2, [r7, #6]
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	e018      	b.n	8002292 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	b298      	uxth	r0, r3
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	b29a      	uxth	r2, r3
 8002268:	88bb      	ldrh	r3, [r7, #4]
 800226a:	4413      	add	r3, r2
 800226c:	b29b      	uxth	r3, r3
 800226e:	883a      	ldrh	r2, [r7, #0]
 8002270:	4619      	mov	r1, r3
 8002272:	f000 fc0b 	bl	8002a8c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	b298      	uxth	r0, r3
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	b29b      	uxth	r3, r3
 800227e:	88ba      	ldrh	r2, [r7, #4]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	b29b      	uxth	r3, r3
 8002284:	883a      	ldrh	r2, [r7, #0]
 8002286:	4619      	mov	r1, r3
 8002288:	f000 fc00 	bl	8002a8c <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	3301      	adds	r3, #1
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	88fa      	ldrh	r2, [r7, #6]
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	4413      	add	r3, r2
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	429a      	cmp	r2, r3
 800229c:	dde0      	ble.n	8002260 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 800229e:	88fa      	ldrh	r2, [r7, #6]
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	e018      	b.n	80022da <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	b298      	uxth	r0, r3
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	88bb      	ldrh	r3, [r7, #4]
 80022b2:	4413      	add	r3, r2
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	883a      	ldrh	r2, [r7, #0]
 80022b8:	4619      	mov	r1, r3
 80022ba:	f000 fbe7 	bl	8002a8c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	b298      	uxth	r0, r3
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	88ba      	ldrh	r2, [r7, #4]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	883a      	ldrh	r2, [r7, #0]
 80022ce:	4619      	mov	r1, r3
 80022d0:	f000 fbdc 	bl	8002a8c <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	3301      	adds	r3, #1
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	88fa      	ldrh	r2, [r7, #6]
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	4413      	add	r3, r2
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	dde0      	ble.n	80022a8 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	3301      	adds	r3, #1
 80022ea:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	4413      	add	r3, r2
 80022f2:	617b      	str	r3, [r7, #20]
        yChange += 2;
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	3302      	adds	r3, #2
 80022f8:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	005a      	lsls	r2, r3, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	4413      	add	r3, r2
 8002302:	2b00      	cmp	r3, #0
 8002304:	dd09      	ble.n	800231a <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	3b01      	subs	r3, #1
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	4413      	add	r3, r2
 8002312:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	3302      	adds	r3, #2
 8002318:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 800231a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231c:	6a3b      	ldr	r3, [r7, #32]
 800231e:	429a      	cmp	r2, r3
 8002320:	da99      	bge.n	8002256 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8002322:	bf00      	nop
 8002324:	bf00      	nop
 8002326:	372c      	adds	r7, #44	; 0x2c
 8002328:	46bd      	mov	sp, r7
 800232a:	bd90      	pop	{r4, r7, pc}

0800232c <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 800232c:	b590      	push	{r4, r7, lr}
 800232e:	b089      	sub	sp, #36	; 0x24
 8002330:	af02      	add	r7, sp, #8
 8002332:	4604      	mov	r4, r0
 8002334:	4608      	mov	r0, r1
 8002336:	4611      	mov	r1, r2
 8002338:	461a      	mov	r2, r3
 800233a:	4623      	mov	r3, r4
 800233c:	71fb      	strb	r3, [r7, #7]
 800233e:	4603      	mov	r3, r0
 8002340:	80bb      	strh	r3, [r7, #4]
 8002342:	460b      	mov	r3, r1
 8002344:	71bb      	strb	r3, [r7, #6]
 8002346:	4613      	mov	r3, r2
 8002348:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 800234e:	7dfb      	ldrb	r3, [r7, #23]
 8002350:	2b1f      	cmp	r3, #31
 8002352:	d902      	bls.n	800235a <ILI9341_Draw_Char+0x2e>
        //Character = 0;
    	//break;
    } else {
        function_char -= 32;
 8002354:	7dfb      	ldrb	r3, [r7, #23]
 8002356:	3b20      	subs	r3, #32
 8002358:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800235a:	2300      	movs	r3, #0
 800235c:	753b      	strb	r3, [r7, #20]
 800235e:	e012      	b.n	8002386 <ILI9341_Draw_Char+0x5a>
		{
		temp[k] = font[function_char][k];
 8002360:	7dfa      	ldrb	r2, [r7, #23]
 8002362:	7d38      	ldrb	r0, [r7, #20]
 8002364:	7d39      	ldrb	r1, [r7, #20]
 8002366:	4c3b      	ldr	r4, [pc, #236]	; (8002454 <ILI9341_Draw_Char+0x128>)
 8002368:	4613      	mov	r3, r2
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	4413      	add	r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4423      	add	r3, r4
 8002372:	4403      	add	r3, r0
 8002374:	781a      	ldrb	r2, [r3, #0]
 8002376:	f107 0318 	add.w	r3, r7, #24
 800237a:	440b      	add	r3, r1
 800237c:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8002380:	7d3b      	ldrb	r3, [r7, #20]
 8002382:	3301      	adds	r3, #1
 8002384:	753b      	strb	r3, [r7, #20]
 8002386:	7d3b      	ldrb	r3, [r7, #20]
 8002388:	2b05      	cmp	r3, #5
 800238a:	d9e9      	bls.n	8002360 <ILI9341_Draw_Char+0x34>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 800238c:	79bb      	ldrb	r3, [r7, #6]
 800238e:	b299      	uxth	r1, r3
 8002390:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002392:	461a      	mov	r2, r3
 8002394:	0052      	lsls	r2, r2, #1
 8002396:	4413      	add	r3, r2
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	b29c      	uxth	r4, r3
 80023a2:	88b8      	ldrh	r0, [r7, #4]
 80023a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	4623      	mov	r3, r4
 80023aa:	f000 fc37 	bl	8002c1c <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 80023ae:	2300      	movs	r3, #0
 80023b0:	757b      	strb	r3, [r7, #21]
 80023b2:	e046      	b.n	8002442 <ILI9341_Draw_Char+0x116>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80023b4:	2300      	movs	r3, #0
 80023b6:	75bb      	strb	r3, [r7, #22]
 80023b8:	e03d      	b.n	8002436 <ILI9341_Draw_Char+0x10a>
            if (temp[j] & (1<<i)) {			
 80023ba:	7d7b      	ldrb	r3, [r7, #21]
 80023bc:	f107 0218 	add.w	r2, r7, #24
 80023c0:	4413      	add	r3, r2
 80023c2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80023c6:	461a      	mov	r2, r3
 80023c8:	7dbb      	ldrb	r3, [r7, #22]
 80023ca:	fa42 f303 	asr.w	r3, r2, r3
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d02c      	beq.n	8002430 <ILI9341_Draw_Char+0x104>
							if(Size == 1)
 80023d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d10f      	bne.n	80023fc <ILI9341_Draw_Char+0xd0>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 80023dc:	7d7b      	ldrb	r3, [r7, #21]
 80023de:	b29a      	uxth	r2, r3
 80023e0:	88bb      	ldrh	r3, [r7, #4]
 80023e2:	4413      	add	r3, r2
 80023e4:	b298      	uxth	r0, r3
 80023e6:	79bb      	ldrb	r3, [r7, #6]
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	7dbb      	ldrb	r3, [r7, #22]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	4413      	add	r3, r2
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	887a      	ldrh	r2, [r7, #2]
 80023f4:	4619      	mov	r1, r3
 80023f6:	f000 fb49 	bl	8002a8c <ILI9341_Draw_Pixel>
 80023fa:	e019      	b.n	8002430 <ILI9341_Draw_Char+0x104>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80023fc:	7d7b      	ldrb	r3, [r7, #21]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002402:	fb12 f303 	smulbb	r3, r2, r3
 8002406:	b29a      	uxth	r2, r3
 8002408:	88bb      	ldrh	r3, [r7, #4]
 800240a:	4413      	add	r3, r2
 800240c:	b298      	uxth	r0, r3
 800240e:	79bb      	ldrb	r3, [r7, #6]
 8002410:	b29a      	uxth	r2, r3
 8002412:	7dbb      	ldrb	r3, [r7, #22]
 8002414:	b29b      	uxth	r3, r3
 8002416:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002418:	fb11 f303 	smulbb	r3, r1, r3
 800241c:	b29b      	uxth	r3, r3
 800241e:	4413      	add	r3, r2
 8002420:	b299      	uxth	r1, r3
 8002422:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8002424:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002426:	887b      	ldrh	r3, [r7, #2]
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	4623      	mov	r3, r4
 800242c:	f000 fbf6 	bl	8002c1c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002430:	7dbb      	ldrb	r3, [r7, #22]
 8002432:	3301      	adds	r3, #1
 8002434:	75bb      	strb	r3, [r7, #22]
 8002436:	7dbb      	ldrb	r3, [r7, #22]
 8002438:	2b07      	cmp	r3, #7
 800243a:	d9be      	bls.n	80023ba <ILI9341_Draw_Char+0x8e>
    for (j=0; j<CHAR_WIDTH; j++) {
 800243c:	7d7b      	ldrb	r3, [r7, #21]
 800243e:	3301      	adds	r3, #1
 8002440:	757b      	strb	r3, [r7, #21]
 8002442:	7d7b      	ldrb	r3, [r7, #21]
 8002444:	2b05      	cmp	r3, #5
 8002446:	d9b5      	bls.n	80023b4 <ILI9341_Draw_Char+0x88>
							}
            }						
        }
    }
}
 8002448:	bf00      	nop
 800244a:	bf00      	nop
 800244c:	371c      	adds	r7, #28
 800244e:	46bd      	mov	sp, r7
 8002450:	bd90      	pop	{r4, r7, pc}
 8002452:	bf00      	nop
 8002454:	0800fed8 	.word	0x0800fed8

08002458 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8002458:	b590      	push	{r4, r7, lr}
 800245a:	b087      	sub	sp, #28
 800245c:	af02      	add	r7, sp, #8
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	4608      	mov	r0, r1
 8002462:	4611      	mov	r1, r2
 8002464:	461a      	mov	r2, r3
 8002466:	4603      	mov	r3, r0
 8002468:	817b      	strh	r3, [r7, #10]
 800246a:	460b      	mov	r3, r1
 800246c:	727b      	strb	r3, [r7, #9]
 800246e:	4613      	mov	r3, r2
 8002470:	80fb      	strh	r3, [r7, #6]
    while (*Text) {
 8002472:	e016      	b.n	80024a2 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	1c5a      	adds	r2, r3, #1
 8002478:	60fa      	str	r2, [r7, #12]
 800247a:	7818      	ldrb	r0, [r3, #0]
 800247c:	88fc      	ldrh	r4, [r7, #6]
 800247e:	7a7a      	ldrb	r2, [r7, #9]
 8002480:	8979      	ldrh	r1, [r7, #10]
 8002482:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002484:	9301      	str	r3, [sp, #4]
 8002486:	8c3b      	ldrh	r3, [r7, #32]
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	4623      	mov	r3, r4
 800248c:	f7ff ff4e 	bl	800232c <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8002490:	8c3b      	ldrh	r3, [r7, #32]
 8002492:	461a      	mov	r2, r3
 8002494:	0052      	lsls	r2, r2, #1
 8002496:	4413      	add	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	897b      	ldrh	r3, [r7, #10]
 800249e:	4413      	add	r3, r2
 80024a0:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1e4      	bne.n	8002474 <ILI9341_Draw_Text+0x1c>
    }
}
 80024aa:	bf00      	nop
 80024ac:	bf00      	nop
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd90      	pop	{r4, r7, pc}

080024b4 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80024b8:	2200      	movs	r2, #0
 80024ba:	2110      	movs	r1, #16
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <ILI9341_SPI_Init+0x14>)
 80024be:	f003 fe1f 	bl	8006100 <HAL_GPIO_WritePin>
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000

080024cc <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80024d6:	1df9      	adds	r1, r7, #7
 80024d8:	2301      	movs	r3, #1
 80024da:	2201      	movs	r2, #1
 80024dc:	4803      	ldr	r0, [pc, #12]	; (80024ec <ILI9341_SPI_Send+0x20>)
 80024de:	f008 fb32 	bl	800ab46 <HAL_SPI_Transmit>
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000320 	.word	0x20000320

080024f0 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80024fa:	2200      	movs	r2, #0
 80024fc:	2110      	movs	r1, #16
 80024fe:	480a      	ldr	r0, [pc, #40]	; (8002528 <ILI9341_Write_Command+0x38>)
 8002500:	f003 fdfe 	bl	8006100 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002504:	2200      	movs	r2, #0
 8002506:	2140      	movs	r1, #64	; 0x40
 8002508:	4807      	ldr	r0, [pc, #28]	; (8002528 <ILI9341_Write_Command+0x38>)
 800250a:	f003 fdf9 	bl	8006100 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ffdb 	bl	80024cc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002516:	2201      	movs	r2, #1
 8002518:	2110      	movs	r1, #16
 800251a:	4803      	ldr	r0, [pc, #12]	; (8002528 <ILI9341_Write_Command+0x38>)
 800251c:	f003 fdf0 	bl	8006100 <HAL_GPIO_WritePin>
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40021000 	.word	0x40021000

0800252c <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002536:	2201      	movs	r2, #1
 8002538:	2140      	movs	r1, #64	; 0x40
 800253a:	480a      	ldr	r0, [pc, #40]	; (8002564 <ILI9341_Write_Data+0x38>)
 800253c:	f003 fde0 	bl	8006100 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002540:	2200      	movs	r2, #0
 8002542:	2110      	movs	r1, #16
 8002544:	4807      	ldr	r0, [pc, #28]	; (8002564 <ILI9341_Write_Data+0x38>)
 8002546:	f003 fddb 	bl	8006100 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ffbd 	bl	80024cc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002552:	2201      	movs	r2, #1
 8002554:	2110      	movs	r1, #16
 8002556:	4803      	ldr	r0, [pc, #12]	; (8002564 <ILI9341_Write_Data+0x38>)
 8002558:	f003 fdd2 	bl	8006100 <HAL_GPIO_WritePin>
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40021000 	.word	0x40021000

08002568 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002568:	b590      	push	{r4, r7, lr}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4604      	mov	r4, r0
 8002570:	4608      	mov	r0, r1
 8002572:	4611      	mov	r1, r2
 8002574:	461a      	mov	r2, r3
 8002576:	4623      	mov	r3, r4
 8002578:	80fb      	strh	r3, [r7, #6]
 800257a:	4603      	mov	r3, r0
 800257c:	80bb      	strh	r3, [r7, #4]
 800257e:	460b      	mov	r3, r1
 8002580:	807b      	strh	r3, [r7, #2]
 8002582:	4613      	mov	r3, r2
 8002584:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8002586:	202a      	movs	r0, #42	; 0x2a
 8002588:	f7ff ffb2 	bl	80024f0 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 800258c:	88fb      	ldrh	r3, [r7, #6]
 800258e:	0a1b      	lsrs	r3, r3, #8
 8002590:	b29b      	uxth	r3, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ffc9 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ffc4 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 80025a4:	887b      	ldrh	r3, [r7, #2]
 80025a6:	0a1b      	lsrs	r3, r3, #8
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ffbd 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 80025b2:	887b      	ldrh	r3, [r7, #2]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff ffb8 	bl	800252c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80025bc:	202b      	movs	r0, #43	; 0x2b
 80025be:	f7ff ff97 	bl	80024f0 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80025c2:	88bb      	ldrh	r3, [r7, #4]
 80025c4:	0a1b      	lsrs	r3, r3, #8
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff ffae 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80025d0:	88bb      	ldrh	r3, [r7, #4]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ffa9 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80025da:	883b      	ldrh	r3, [r7, #0]
 80025dc:	0a1b      	lsrs	r3, r3, #8
 80025de:	b29b      	uxth	r3, r3
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff ffa2 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 80025e8:	883b      	ldrh	r3, [r7, #0]
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff9d 	bl	800252c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 80025f2:	202c      	movs	r0, #44	; 0x2c
 80025f4:	f7ff ff7c 	bl	80024f0 <ILI9341_Write_Command>
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd90      	pop	{r4, r7, pc}

08002600 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8002604:	2200      	movs	r2, #0
 8002606:	2120      	movs	r1, #32
 8002608:	480a      	ldr	r0, [pc, #40]	; (8002634 <ILI9341_Reset+0x34>)
 800260a:	f003 fd79 	bl	8006100 <HAL_GPIO_WritePin>
HAL_Delay(200);
 800260e:	20c8      	movs	r0, #200	; 0xc8
 8002610:	f003 fa8c 	bl	8005b2c <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002614:	2200      	movs	r2, #0
 8002616:	2110      	movs	r1, #16
 8002618:	4806      	ldr	r0, [pc, #24]	; (8002634 <ILI9341_Reset+0x34>)
 800261a:	f003 fd71 	bl	8006100 <HAL_GPIO_WritePin>
HAL_Delay(200);
 800261e:	20c8      	movs	r0, #200	; 0xc8
 8002620:	f003 fa84 	bl	8005b2c <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8002624:	2201      	movs	r2, #1
 8002626:	2120      	movs	r1, #32
 8002628:	4802      	ldr	r0, [pc, #8]	; (8002634 <ILI9341_Reset+0x34>)
 800262a:	f003 fd69 	bl	8006100 <HAL_GPIO_WritePin>
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000

08002638 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8002646:	2036      	movs	r0, #54	; 0x36
 8002648:	f7ff ff52 	bl	80024f0 <ILI9341_Write_Command>
HAL_Delay(1);
 800264c:	2001      	movs	r0, #1
 800264e:	f003 fa6d 	bl	8005b2c <HAL_Delay>
	
switch(screen_rotation) 
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	2b03      	cmp	r3, #3
 8002656:	d837      	bhi.n	80026c8 <ILI9341_Set_Rotation+0x90>
 8002658:	a201      	add	r2, pc, #4	; (adr r2, 8002660 <ILI9341_Set_Rotation+0x28>)
 800265a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265e:	bf00      	nop
 8002660:	08002671 	.word	0x08002671
 8002664:	08002687 	.word	0x08002687
 8002668:	0800269d 	.word	0x0800269d
 800266c:	080026b3 	.word	0x080026b3
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8002670:	2048      	movs	r0, #72	; 0x48
 8002672:	f7ff ff5b 	bl	800252c <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8002676:	4b17      	ldr	r3, [pc, #92]	; (80026d4 <ILI9341_Set_Rotation+0x9c>)
 8002678:	22f0      	movs	r2, #240	; 0xf0
 800267a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800267c:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <ILI9341_Set_Rotation+0xa0>)
 800267e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002682:	801a      	strh	r2, [r3, #0]
			break;
 8002684:	e021      	b.n	80026ca <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8002686:	2028      	movs	r0, #40	; 0x28
 8002688:	f7ff ff50 	bl	800252c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800268c:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <ILI9341_Set_Rotation+0x9c>)
 800268e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002692:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002694:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <ILI9341_Set_Rotation+0xa0>)
 8002696:	22f0      	movs	r2, #240	; 0xf0
 8002698:	801a      	strh	r2, [r3, #0]
			break;
 800269a:	e016      	b.n	80026ca <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 800269c:	2088      	movs	r0, #136	; 0x88
 800269e:	f7ff ff45 	bl	800252c <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80026a2:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <ILI9341_Set_Rotation+0x9c>)
 80026a4:	22f0      	movs	r2, #240	; 0xf0
 80026a6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <ILI9341_Set_Rotation+0xa0>)
 80026aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80026ae:	801a      	strh	r2, [r3, #0]
			break;
 80026b0:	e00b      	b.n	80026ca <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80026b2:	20e8      	movs	r0, #232	; 0xe8
 80026b4:	f7ff ff3a 	bl	800252c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <ILI9341_Set_Rotation+0x9c>)
 80026ba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80026be:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <ILI9341_Set_Rotation+0xa0>)
 80026c2:	22f0      	movs	r2, #240	; 0xf0
 80026c4:	801a      	strh	r2, [r3, #0]
			break;
 80026c6:	e000      	b.n	80026ca <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80026c8:	bf00      	nop
	}
}
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	2000000a 	.word	0x2000000a
 80026d8:	20000008 	.word	0x20000008

080026dc <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80026e0:	2201      	movs	r2, #1
 80026e2:	2120      	movs	r1, #32
 80026e4:	4802      	ldr	r0, [pc, #8]	; (80026f0 <ILI9341_Enable+0x14>)
 80026e6:	f003 fd0b 	bl	8006100 <HAL_GPIO_WritePin>
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000

080026f4 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0

ILI9341_Enable();
 80026f8:	f7ff fff0 	bl	80026dc <ILI9341_Enable>
ILI9341_SPI_Init();
 80026fc:	f7ff feda 	bl	80024b4 <ILI9341_SPI_Init>
ILI9341_Reset();
 8002700:	f7ff ff7e 	bl	8002600 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8002704:	2001      	movs	r0, #1
 8002706:	f7ff fef3 	bl	80024f0 <ILI9341_Write_Command>
HAL_Delay(1000);
 800270a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800270e:	f003 fa0d 	bl	8005b2c <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8002712:	20cb      	movs	r0, #203	; 0xcb
 8002714:	f7ff feec 	bl	80024f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8002718:	2039      	movs	r0, #57	; 0x39
 800271a:	f7ff ff07 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 800271e:	202c      	movs	r0, #44	; 0x2c
 8002720:	f7ff ff04 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002724:	2000      	movs	r0, #0
 8002726:	f7ff ff01 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 800272a:	2034      	movs	r0, #52	; 0x34
 800272c:	f7ff fefe 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8002730:	2002      	movs	r0, #2
 8002732:	f7ff fefb 	bl	800252c <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8002736:	20cf      	movs	r0, #207	; 0xcf
 8002738:	f7ff feda 	bl	80024f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800273c:	2000      	movs	r0, #0
 800273e:	f7ff fef5 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002742:	20c1      	movs	r0, #193	; 0xc1
 8002744:	f7ff fef2 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8002748:	2030      	movs	r0, #48	; 0x30
 800274a:	f7ff feef 	bl	800252c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 800274e:	20e8      	movs	r0, #232	; 0xe8
 8002750:	f7ff fece 	bl	80024f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8002754:	2085      	movs	r0, #133	; 0x85
 8002756:	f7ff fee9 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800275a:	2000      	movs	r0, #0
 800275c:	f7ff fee6 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8002760:	2078      	movs	r0, #120	; 0x78
 8002762:	f7ff fee3 	bl	800252c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8002766:	20ea      	movs	r0, #234	; 0xea
 8002768:	f7ff fec2 	bl	80024f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800276c:	2000      	movs	r0, #0
 800276e:	f7ff fedd 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002772:	2000      	movs	r0, #0
 8002774:	f7ff feda 	bl	800252c <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8002778:	20ed      	movs	r0, #237	; 0xed
 800277a:	f7ff feb9 	bl	80024f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 800277e:	2064      	movs	r0, #100	; 0x64
 8002780:	f7ff fed4 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002784:	2003      	movs	r0, #3
 8002786:	f7ff fed1 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800278a:	2012      	movs	r0, #18
 800278c:	f7ff fece 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8002790:	2081      	movs	r0, #129	; 0x81
 8002792:	f7ff fecb 	bl	800252c <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8002796:	20f7      	movs	r0, #247	; 0xf7
 8002798:	f7ff feaa 	bl	80024f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 800279c:	2020      	movs	r0, #32
 800279e:	f7ff fec5 	bl	800252c <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 80027a2:	20c0      	movs	r0, #192	; 0xc0
 80027a4:	f7ff fea4 	bl	80024f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 80027a8:	2023      	movs	r0, #35	; 0x23
 80027aa:	f7ff febf 	bl	800252c <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 80027ae:	20c1      	movs	r0, #193	; 0xc1
 80027b0:	f7ff fe9e 	bl	80024f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 80027b4:	2010      	movs	r0, #16
 80027b6:	f7ff feb9 	bl	800252c <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 80027ba:	20c5      	movs	r0, #197	; 0xc5
 80027bc:	f7ff fe98 	bl	80024f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80027c0:	203e      	movs	r0, #62	; 0x3e
 80027c2:	f7ff feb3 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 80027c6:	2028      	movs	r0, #40	; 0x28
 80027c8:	f7ff feb0 	bl	800252c <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 80027cc:	20c7      	movs	r0, #199	; 0xc7
 80027ce:	f7ff fe8f 	bl	80024f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80027d2:	2086      	movs	r0, #134	; 0x86
 80027d4:	f7ff feaa 	bl	800252c <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80027d8:	2036      	movs	r0, #54	; 0x36
 80027da:	f7ff fe89 	bl	80024f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 80027de:	2048      	movs	r0, #72	; 0x48
 80027e0:	f7ff fea4 	bl	800252c <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 80027e4:	203a      	movs	r0, #58	; 0x3a
 80027e6:	f7ff fe83 	bl	80024f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 80027ea:	2055      	movs	r0, #85	; 0x55
 80027ec:	f7ff fe9e 	bl	800252c <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 80027f0:	20b1      	movs	r0, #177	; 0xb1
 80027f2:	f7ff fe7d 	bl	80024f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80027f6:	2000      	movs	r0, #0
 80027f8:	f7ff fe98 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80027fc:	2018      	movs	r0, #24
 80027fe:	f7ff fe95 	bl	800252c <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8002802:	20b6      	movs	r0, #182	; 0xb6
 8002804:	f7ff fe74 	bl	80024f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8002808:	2008      	movs	r0, #8
 800280a:	f7ff fe8f 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800280e:	2082      	movs	r0, #130	; 0x82
 8002810:	f7ff fe8c 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8002814:	2027      	movs	r0, #39	; 0x27
 8002816:	f7ff fe89 	bl	800252c <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 800281a:	20f2      	movs	r0, #242	; 0xf2
 800281c:	f7ff fe68 	bl	80024f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002820:	2000      	movs	r0, #0
 8002822:	f7ff fe83 	bl	800252c <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8002826:	2026      	movs	r0, #38	; 0x26
 8002828:	f7ff fe62 	bl	80024f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 800282c:	2001      	movs	r0, #1
 800282e:	f7ff fe7d 	bl	800252c <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8002832:	20e0      	movs	r0, #224	; 0xe0
 8002834:	f7ff fe5c 	bl	80024f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8002838:	200f      	movs	r0, #15
 800283a:	f7ff fe77 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800283e:	2031      	movs	r0, #49	; 0x31
 8002840:	f7ff fe74 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8002844:	202b      	movs	r0, #43	; 0x2b
 8002846:	f7ff fe71 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800284a:	200c      	movs	r0, #12
 800284c:	f7ff fe6e 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002850:	200e      	movs	r0, #14
 8002852:	f7ff fe6b 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002856:	2008      	movs	r0, #8
 8002858:	f7ff fe68 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 800285c:	204e      	movs	r0, #78	; 0x4e
 800285e:	f7ff fe65 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8002862:	20f1      	movs	r0, #241	; 0xf1
 8002864:	f7ff fe62 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8002868:	2037      	movs	r0, #55	; 0x37
 800286a:	f7ff fe5f 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800286e:	2007      	movs	r0, #7
 8002870:	f7ff fe5c 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8002874:	2010      	movs	r0, #16
 8002876:	f7ff fe59 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800287a:	2003      	movs	r0, #3
 800287c:	f7ff fe56 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002880:	200e      	movs	r0, #14
 8002882:	f7ff fe53 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8002886:	2009      	movs	r0, #9
 8002888:	f7ff fe50 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800288c:	2000      	movs	r0, #0
 800288e:	f7ff fe4d 	bl	800252c <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8002892:	20e1      	movs	r0, #225	; 0xe1
 8002894:	f7ff fe2c 	bl	80024f0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002898:	2000      	movs	r0, #0
 800289a:	f7ff fe47 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800289e:	200e      	movs	r0, #14
 80028a0:	f7ff fe44 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80028a4:	2014      	movs	r0, #20
 80028a6:	f7ff fe41 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80028aa:	2003      	movs	r0, #3
 80028ac:	f7ff fe3e 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80028b0:	2011      	movs	r0, #17
 80028b2:	f7ff fe3b 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80028b6:	2007      	movs	r0, #7
 80028b8:	f7ff fe38 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80028bc:	2031      	movs	r0, #49	; 0x31
 80028be:	f7ff fe35 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80028c2:	20c1      	movs	r0, #193	; 0xc1
 80028c4:	f7ff fe32 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 80028c8:	2048      	movs	r0, #72	; 0x48
 80028ca:	f7ff fe2f 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80028ce:	2008      	movs	r0, #8
 80028d0:	f7ff fe2c 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80028d4:	200f      	movs	r0, #15
 80028d6:	f7ff fe29 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80028da:	200c      	movs	r0, #12
 80028dc:	f7ff fe26 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80028e0:	2031      	movs	r0, #49	; 0x31
 80028e2:	f7ff fe23 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 80028e6:	2036      	movs	r0, #54	; 0x36
 80028e8:	f7ff fe20 	bl	800252c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80028ec:	200f      	movs	r0, #15
 80028ee:	f7ff fe1d 	bl	800252c <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 80028f2:	2011      	movs	r0, #17
 80028f4:	f7ff fdfc 	bl	80024f0 <ILI9341_Write_Command>
HAL_Delay(120);
 80028f8:	2078      	movs	r0, #120	; 0x78
 80028fa:	f003 f917 	bl	8005b2c <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 80028fe:	2029      	movs	r0, #41	; 0x29
 8002900:	f7ff fdf6 	bl	80024f0 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8002904:	2003      	movs	r0, #3
 8002906:	f7ff fe97 	bl	8002638 <ILI9341_Set_Rotation>

HAL_Delay(10);
 800290a:	200a      	movs	r0, #10
 800290c:	f003 f90e 	bl	8005b2c <HAL_Delay>
//
}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}

08002914 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002914:	b5b0      	push	{r4, r5, r7, lr}
 8002916:	b08c      	sub	sp, #48	; 0x30
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	6039      	str	r1, [r7, #0]
 800291e:	80fb      	strh	r3, [r7, #6]
 8002920:	466b      	mov	r3, sp
 8002922:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002930:	d202      	bcs.n	8002938 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
 8002936:	e002      	b.n	800293e <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8002938:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800293e:	2201      	movs	r2, #1
 8002940:	2140      	movs	r1, #64	; 0x40
 8002942:	483d      	ldr	r0, [pc, #244]	; (8002a38 <ILI9341_Draw_Colour_Burst+0x124>)
 8002944:	f003 fbdc 	bl	8006100 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002948:	2200      	movs	r2, #0
 800294a:	2110      	movs	r1, #16
 800294c:	483a      	ldr	r0, [pc, #232]	; (8002a38 <ILI9341_Draw_Colour_Burst+0x124>)
 800294e:	f003 fbd7 	bl	8006100 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8002952:	88fb      	ldrh	r3, [r7, #6]
 8002954:	0a1b      	lsrs	r3, r3, #8
 8002956:	b29b      	uxth	r3, r3
 8002958:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 800295c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800295e:	4623      	mov	r3, r4
 8002960:	3b01      	subs	r3, #1
 8002962:	61fb      	str	r3, [r7, #28]
 8002964:	4620      	mov	r0, r4
 8002966:	f04f 0100 	mov.w	r1, #0
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	00cb      	lsls	r3, r1, #3
 8002974:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002978:	00c2      	lsls	r2, r0, #3
 800297a:	4620      	mov	r0, r4
 800297c:	f04f 0100 	mov.w	r1, #0
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	00cb      	lsls	r3, r1, #3
 800298a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800298e:	00c2      	lsls	r2, r0, #3
 8002990:	1de3      	adds	r3, r4, #7
 8002992:	08db      	lsrs	r3, r3, #3
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	ebad 0d03 	sub.w	sp, sp, r3
 800299a:	466b      	mov	r3, sp
 800299c:	3300      	adds	r3, #0
 800299e:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80029a0:	2300      	movs	r3, #0
 80029a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80029a4:	e00e      	b.n	80029c4 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029aa:	4413      	add	r3, r2
 80029ac:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80029b0:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 80029b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b4:	3301      	adds	r3, #1
 80029b6:	88fa      	ldrh	r2, [r7, #6]
 80029b8:	b2d1      	uxtb	r1, r2
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80029be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c0:	3302      	adds	r3, #2
 80029c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80029c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d3ec      	bcc.n	80029a6 <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029da:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80029e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029e6:	fb01 f202 	mul.w	r2, r1, r2
 80029ea:	1a9b      	subs	r3, r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d010      	beq.n	8002a16 <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80029f4:	2300      	movs	r3, #0
 80029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029f8:	e009      	b.n	8002a0e <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 80029fa:	69b9      	ldr	r1, [r7, #24]
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	230a      	movs	r3, #10
 8002a02:	480e      	ldr	r0, [pc, #56]	; (8002a3c <ILI9341_Draw_Colour_Burst+0x128>)
 8002a04:	f008 f89f 	bl	800ab46 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d3f1      	bcc.n	80029fa <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002a16:	69b9      	ldr	r1, [r7, #24]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	230a      	movs	r3, #10
 8002a1e:	4807      	ldr	r0, [pc, #28]	; (8002a3c <ILI9341_Draw_Colour_Burst+0x128>)
 8002a20:	f008 f891 	bl	800ab46 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002a24:	2201      	movs	r2, #1
 8002a26:	2110      	movs	r1, #16
 8002a28:	4803      	ldr	r0, [pc, #12]	; (8002a38 <ILI9341_Draw_Colour_Burst+0x124>)
 8002a2a:	f003 fb69 	bl	8006100 <HAL_GPIO_WritePin>
 8002a2e:	46ad      	mov	sp, r5
}
 8002a30:	bf00      	nop
 8002a32:	3730      	adds	r7, #48	; 0x30
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bdb0      	pop	{r4, r5, r7, pc}
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	20000320 	.word	0x20000320

08002a40 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8002a4a:	4b0e      	ldr	r3, [pc, #56]	; (8002a84 <ILI9341_Fill_Screen+0x44>)
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <ILI9341_Fill_Screen+0x48>)
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2100      	movs	r1, #0
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f7ff fd85 	bl	8002568 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8002a5e:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <ILI9341_Fill_Screen+0x44>)
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	461a      	mov	r2, r3
 8002a66:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <ILI9341_Fill_Screen+0x48>)
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	fb03 f302 	mul.w	r3, r3, r2
 8002a70:	461a      	mov	r2, r3
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	4611      	mov	r1, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff ff4c 	bl	8002914 <ILI9341_Draw_Colour_Burst>
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	2000000a 	.word	0x2000000a
 8002a88:	20000008 	.word	0x20000008

08002a8c <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	80fb      	strh	r3, [r7, #6]
 8002a96:	460b      	mov	r3, r1
 8002a98:	80bb      	strh	r3, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002a9e:	4b5b      	ldr	r3, [pc, #364]	; (8002c0c <ILI9341_Draw_Pixel+0x180>)
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	88fa      	ldrh	r2, [r7, #6]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	f080 80ac 	bcs.w	8002c04 <ILI9341_Draw_Pixel+0x178>
 8002aac:	4b58      	ldr	r3, [pc, #352]	; (8002c10 <ILI9341_Draw_Pixel+0x184>)
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	88ba      	ldrh	r2, [r7, #4]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	f080 80a5 	bcs.w	8002c04 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002aba:	2200      	movs	r2, #0
 8002abc:	2140      	movs	r1, #64	; 0x40
 8002abe:	4855      	ldr	r0, [pc, #340]	; (8002c14 <ILI9341_Draw_Pixel+0x188>)
 8002ac0:	f003 fb1e 	bl	8006100 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2110      	movs	r1, #16
 8002ac8:	4852      	ldr	r0, [pc, #328]	; (8002c14 <ILI9341_Draw_Pixel+0x188>)
 8002aca:	f003 fb19 	bl	8006100 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002ace:	202a      	movs	r0, #42	; 0x2a
 8002ad0:	f7ff fcfc 	bl	80024cc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	2140      	movs	r1, #64	; 0x40
 8002ad8:	484e      	ldr	r0, [pc, #312]	; (8002c14 <ILI9341_Draw_Pixel+0x188>)
 8002ada:	f003 fb11 	bl	8006100 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002ade:	2201      	movs	r2, #1
 8002ae0:	2110      	movs	r1, #16
 8002ae2:	484c      	ldr	r0, [pc, #304]	; (8002c14 <ILI9341_Draw_Pixel+0x188>)
 8002ae4:	f003 fb0c 	bl	8006100 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2110      	movs	r1, #16
 8002aec:	4849      	ldr	r0, [pc, #292]	; (8002c14 <ILI9341_Draw_Pixel+0x188>)
 8002aee:	f003 fb07 	bl	8006100 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002af2:	88fb      	ldrh	r3, [r7, #6]
 8002af4:	0a1b      	lsrs	r3, r3, #8
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	753b      	strb	r3, [r7, #20]
 8002afc:	88fb      	ldrh	r3, [r7, #6]
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	757b      	strb	r3, [r7, #21]
 8002b02:	88fb      	ldrh	r3, [r7, #6]
 8002b04:	3301      	adds	r3, #1
 8002b06:	121b      	asrs	r3, r3, #8
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	75bb      	strb	r3, [r7, #22]
 8002b0c:	88fb      	ldrh	r3, [r7, #6]
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	3301      	adds	r3, #1
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002b16:	f107 0114 	add.w	r1, r7, #20
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	2204      	movs	r2, #4
 8002b1e:	483e      	ldr	r0, [pc, #248]	; (8002c18 <ILI9341_Draw_Pixel+0x18c>)
 8002b20:	f008 f811 	bl	800ab46 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002b24:	2201      	movs	r2, #1
 8002b26:	2110      	movs	r1, #16
 8002b28:	483a      	ldr	r0, [pc, #232]	; (8002c14 <ILI9341_Draw_Pixel+0x188>)
 8002b2a:	f003 fae9 	bl	8006100 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2140      	movs	r1, #64	; 0x40
 8002b32:	4838      	ldr	r0, [pc, #224]	; (8002c14 <ILI9341_Draw_Pixel+0x188>)
 8002b34:	f003 fae4 	bl	8006100 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2110      	movs	r1, #16
 8002b3c:	4835      	ldr	r0, [pc, #212]	; (8002c14 <ILI9341_Draw_Pixel+0x188>)
 8002b3e:	f003 fadf 	bl	8006100 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8002b42:	202b      	movs	r0, #43	; 0x2b
 8002b44:	f7ff fcc2 	bl	80024cc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002b48:	2201      	movs	r2, #1
 8002b4a:	2140      	movs	r1, #64	; 0x40
 8002b4c:	4831      	ldr	r0, [pc, #196]	; (8002c14 <ILI9341_Draw_Pixel+0x188>)
 8002b4e:	f003 fad7 	bl	8006100 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002b52:	2201      	movs	r2, #1
 8002b54:	2110      	movs	r1, #16
 8002b56:	482f      	ldr	r0, [pc, #188]	; (8002c14 <ILI9341_Draw_Pixel+0x188>)
 8002b58:	f003 fad2 	bl	8006100 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2110      	movs	r1, #16
 8002b60:	482c      	ldr	r0, [pc, #176]	; (8002c14 <ILI9341_Draw_Pixel+0x188>)
 8002b62:	f003 facd 	bl	8006100 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8002b66:	88bb      	ldrh	r3, [r7, #4]
 8002b68:	0a1b      	lsrs	r3, r3, #8
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	743b      	strb	r3, [r7, #16]
 8002b70:	88bb      	ldrh	r3, [r7, #4]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	747b      	strb	r3, [r7, #17]
 8002b76:	88bb      	ldrh	r3, [r7, #4]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	121b      	asrs	r3, r3, #8
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	74bb      	strb	r3, [r7, #18]
 8002b80:	88bb      	ldrh	r3, [r7, #4]
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	3301      	adds	r3, #1
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002b8a:	f107 0110 	add.w	r1, r7, #16
 8002b8e:	2301      	movs	r3, #1
 8002b90:	2204      	movs	r2, #4
 8002b92:	4821      	ldr	r0, [pc, #132]	; (8002c18 <ILI9341_Draw_Pixel+0x18c>)
 8002b94:	f007 ffd7 	bl	800ab46 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002b98:	2201      	movs	r2, #1
 8002b9a:	2110      	movs	r1, #16
 8002b9c:	481d      	ldr	r0, [pc, #116]	; (8002c14 <ILI9341_Draw_Pixel+0x188>)
 8002b9e:	f003 faaf 	bl	8006100 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2140      	movs	r1, #64	; 0x40
 8002ba6:	481b      	ldr	r0, [pc, #108]	; (8002c14 <ILI9341_Draw_Pixel+0x188>)
 8002ba8:	f003 faaa 	bl	8006100 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002bac:	2200      	movs	r2, #0
 8002bae:	2110      	movs	r1, #16
 8002bb0:	4818      	ldr	r0, [pc, #96]	; (8002c14 <ILI9341_Draw_Pixel+0x188>)
 8002bb2:	f003 faa5 	bl	8006100 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8002bb6:	202c      	movs	r0, #44	; 0x2c
 8002bb8:	f7ff fc88 	bl	80024cc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	2140      	movs	r1, #64	; 0x40
 8002bc0:	4814      	ldr	r0, [pc, #80]	; (8002c14 <ILI9341_Draw_Pixel+0x188>)
 8002bc2:	f003 fa9d 	bl	8006100 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	2110      	movs	r1, #16
 8002bca:	4812      	ldr	r0, [pc, #72]	; (8002c14 <ILI9341_Draw_Pixel+0x188>)
 8002bcc:	f003 fa98 	bl	8006100 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2110      	movs	r1, #16
 8002bd4:	480f      	ldr	r0, [pc, #60]	; (8002c14 <ILI9341_Draw_Pixel+0x188>)
 8002bd6:	f003 fa93 	bl	8006100 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002bda:	887b      	ldrh	r3, [r7, #2]
 8002bdc:	0a1b      	lsrs	r3, r3, #8
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	733b      	strb	r3, [r7, #12]
 8002be4:	887b      	ldrh	r3, [r7, #2]
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002bea:	f107 010c 	add.w	r1, r7, #12
 8002bee:	2301      	movs	r3, #1
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	4809      	ldr	r0, [pc, #36]	; (8002c18 <ILI9341_Draw_Pixel+0x18c>)
 8002bf4:	f007 ffa7 	bl	800ab46 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	2110      	movs	r1, #16
 8002bfc:	4805      	ldr	r0, [pc, #20]	; (8002c14 <ILI9341_Draw_Pixel+0x188>)
 8002bfe:	f003 fa7f 	bl	8006100 <HAL_GPIO_WritePin>
 8002c02:	e000      	b.n	8002c06 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002c04:	bf00      	nop
	
}
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	2000000a 	.word	0x2000000a
 8002c10:	20000008 	.word	0x20000008
 8002c14:	40021000 	.word	0x40021000
 8002c18:	20000320 	.word	0x20000320

08002c1c <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8002c1c:	b590      	push	{r4, r7, lr}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4604      	mov	r4, r0
 8002c24:	4608      	mov	r0, r1
 8002c26:	4611      	mov	r1, r2
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4623      	mov	r3, r4
 8002c2c:	80fb      	strh	r3, [r7, #6]
 8002c2e:	4603      	mov	r3, r0
 8002c30:	80bb      	strh	r3, [r7, #4]
 8002c32:	460b      	mov	r3, r1
 8002c34:	807b      	strh	r3, [r7, #2]
 8002c36:	4613      	mov	r3, r2
 8002c38:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002c3a:	4b24      	ldr	r3, [pc, #144]	; (8002ccc <ILI9341_Draw_Rectangle+0xb0>)
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	88fa      	ldrh	r2, [r7, #6]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d23d      	bcs.n	8002cc2 <ILI9341_Draw_Rectangle+0xa6>
 8002c46:	4b22      	ldr	r3, [pc, #136]	; (8002cd0 <ILI9341_Draw_Rectangle+0xb4>)
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	88ba      	ldrh	r2, [r7, #4]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d237      	bcs.n	8002cc2 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8002c52:	88fa      	ldrh	r2, [r7, #6]
 8002c54:	887b      	ldrh	r3, [r7, #2]
 8002c56:	4413      	add	r3, r2
 8002c58:	4a1c      	ldr	r2, [pc, #112]	; (8002ccc <ILI9341_Draw_Rectangle+0xb0>)
 8002c5a:	8812      	ldrh	r2, [r2, #0]
 8002c5c:	b292      	uxth	r2, r2
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	dd05      	ble.n	8002c6e <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8002c62:	4b1a      	ldr	r3, [pc, #104]	; (8002ccc <ILI9341_Draw_Rectangle+0xb0>)
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	88fb      	ldrh	r3, [r7, #6]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8002c6e:	88ba      	ldrh	r2, [r7, #4]
 8002c70:	883b      	ldrh	r3, [r7, #0]
 8002c72:	4413      	add	r3, r2
 8002c74:	4a16      	ldr	r2, [pc, #88]	; (8002cd0 <ILI9341_Draw_Rectangle+0xb4>)
 8002c76:	8812      	ldrh	r2, [r2, #0]
 8002c78:	b292      	uxth	r2, r2
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	dd05      	ble.n	8002c8a <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8002c7e:	4b14      	ldr	r3, [pc, #80]	; (8002cd0 <ILI9341_Draw_Rectangle+0xb4>)
 8002c80:	881b      	ldrh	r3, [r3, #0]
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	88bb      	ldrh	r3, [r7, #4]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8002c8a:	88fa      	ldrh	r2, [r7, #6]
 8002c8c:	887b      	ldrh	r3, [r7, #2]
 8002c8e:	4413      	add	r3, r2
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29c      	uxth	r4, r3
 8002c96:	88ba      	ldrh	r2, [r7, #4]
 8002c98:	883b      	ldrh	r3, [r7, #0]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	88b9      	ldrh	r1, [r7, #4]
 8002ca4:	88f8      	ldrh	r0, [r7, #6]
 8002ca6:	4622      	mov	r2, r4
 8002ca8:	f7ff fc5e 	bl	8002568 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8002cac:	883b      	ldrh	r3, [r7, #0]
 8002cae:	887a      	ldrh	r2, [r7, #2]
 8002cb0:	fb02 f303 	mul.w	r3, r2, r3
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	8b3b      	ldrh	r3, [r7, #24]
 8002cb8:	4611      	mov	r1, r2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff fe2a 	bl	8002914 <ILI9341_Draw_Colour_Burst>
 8002cc0:	e000      	b.n	8002cc4 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002cc2:	bf00      	nop
}
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd90      	pop	{r4, r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	2000000a 	.word	0x2000000a
 8002cd0:	20000008 	.word	0x20000008

08002cd4 <menu>:
uint8_t pointer_on_selected_menu =1;
//uint8_t p =0;
//void print_sign(p);

void menu()
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
	Menu_SetGenericWriteCallback(Generic_Write);  //передача показника на Generic_Write функцію  point in Menu_SetGenericWriteCallback
 8002cda:	4832      	ldr	r0, [pc, #200]	; (8002da4 <menu+0xd0>)
 8002cdc:	f000 fd4a 	bl	8003774 <Menu_SetGenericWriteCallback>

	//print_all_top_menu();
	Menu_Navigate(&Menu_1);
 8002ce0:	4831      	ldr	r0, [pc, #196]	; (8002da8 <menu+0xd4>)
 8002ce2:	f000 fd19 	bl	8003718 <Menu_Navigate>
//	print_sign(p);
//	Menu_Navigate(&Menu_2);
//	Menu_Navigate(&Menu_3);
	while (1)
	  {
	   uint8_t pressed_key = getPressKey();
 8002ce6:	f000 fc4f 	bl	8003588 <getPressKey>
 8002cea:	4603      	mov	r3, r0
 8002cec:	71fb      	strb	r3, [r7, #7]

	   if (pressed_key != BUTTON_NOTHING && !flagPressed)
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	2bff      	cmp	r3, #255	; 0xff
 8002cf2:	d04a      	beq.n	8002d8a <menu+0xb6>
 8002cf4:	4b2d      	ldr	r3, [pc, #180]	; (8002dac <menu+0xd8>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	f083 0301 	eor.w	r3, r3, #1
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d043      	beq.n	8002d8a <menu+0xb6>
	   {
			flagPressed = true;
 8002d02:	4b2a      	ldr	r3, [pc, #168]	; (8002dac <menu+0xd8>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	701a      	strb	r2, [r3, #0]
			switch(pressed_key)
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d83b      	bhi.n	8002d86 <menu+0xb2>
 8002d0e:	a201      	add	r2, pc, #4	; (adr r2, 8002d14 <menu+0x40>)
 8002d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d14:	08002d29 	.word	0x08002d29
 8002d18:	08002d39 	.word	0x08002d39
 8002d1c:	08002d55 	.word	0x08002d55
 8002d20:	08002d71 	.word	0x08002d71
 8002d24:	08002d81 	.word	0x08002d81
			{
				case BUTTON_LEFT:
					Menu_Navigate(MENU_PARENT);
 8002d28:	f000 fcea 	bl	8003700 <Menu_GetCurrentMenu>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 fcf1 	bl	8003718 <Menu_Navigate>
					break;
 8002d36:	e027      	b.n	8002d88 <menu+0xb4>

				case BUTTON_UP:
					pointer_on_selected_menu--;			// <<<<<<<<<<<<<<<<
 8002d38:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <menu+0xdc>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <menu+0xdc>)
 8002d42:	701a      	strb	r2, [r3, #0]
					Menu_Navigate(MENU_PREVIOUS);
 8002d44:	f000 fcdc 	bl	8003700 <Menu_GetCurrentMenu>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 fce3 	bl	8003718 <Menu_Navigate>
					break;
 8002d52:	e019      	b.n	8002d88 <menu+0xb4>

				case BUTTON_DOWN:
					pointer_on_selected_menu++;			// <<<<<<<<<<<<<<<<
 8002d54:	4b16      	ldr	r3, [pc, #88]	; (8002db0 <menu+0xdc>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <menu+0xdc>)
 8002d5e:	701a      	strb	r2, [r3, #0]
					Menu_Navigate(MENU_NEXT);
 8002d60:	f000 fcce 	bl	8003700 <Menu_GetCurrentMenu>
 8002d64:	4603      	mov	r3, r0
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 fcd5 	bl	8003718 <Menu_Navigate>
					break;
 8002d6e:	e00b      	b.n	8002d88 <menu+0xb4>

				case BUTTON_RIGHT:
					Menu_Navigate(MENU_CHILD);
 8002d70:	f000 fcc6 	bl	8003700 <Menu_GetCurrentMenu>
 8002d74:	4603      	mov	r3, r0
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fccd 	bl	8003718 <Menu_Navigate>
					break;
 8002d7e:	e003      	b.n	8002d88 <menu+0xb4>

				case BUTTON_SELECT:
					Menu_EnterCurrentItem();
 8002d80:	f000 fd0c 	bl	800379c <Menu_EnterCurrentItem>
					break;
 8002d84:	e000      	b.n	8002d88 <menu+0xb4>

			 default:
			  break;
 8002d86:	bf00      	nop
			switch(pressed_key)
 8002d88:	e00b      	b.n	8002da2 <menu+0xce>
			}
	   }
	   else if (getPressKey() == BUTTON_NOTHING && flagPressed)
 8002d8a:	f000 fbfd 	bl	8003588 <getPressKey>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2bff      	cmp	r3, #255	; 0xff
 8002d92:	d1a8      	bne.n	8002ce6 <menu+0x12>
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <menu+0xd8>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0a4      	beq.n	8002ce6 <menu+0x12>
	   {
		   flagPressed = false;
 8002d9c:	4b03      	ldr	r3, [pc, #12]	; (8002dac <menu+0xd8>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
	  {
 8002da2:	e7a0      	b.n	8002ce6 <menu+0x12>
 8002da4:	080036b9 	.word	0x080036b9
 8002da8:	08010130 	.word	0x08010130
 8002dac:	20000298 	.word	0x20000298
 8002db0:	20000148 	.word	0x20000148

08002db4 <print_all_top_menu>:
	  }
}
// -----------------------------------------------------------------------
//// TEST PRINT FUNCTION <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
void print_all_top_menu(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 8002dba:	2300      	movs	r3, #0
 8002dbc:	9301      	str	r3, [sp, #4]
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002dc6:	226e      	movs	r2, #110	; 0x6e
 8002dc8:	211e      	movs	r1, #30
 8002dca:	4884      	ldr	r0, [pc, #528]	; (8002fdc <print_all_top_menu+0x228>)
 8002dcc:	f7ff fb44 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	9301      	str	r3, [sp, #4]
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ddc:	2282      	movs	r2, #130	; 0x82
 8002dde:	211e      	movs	r1, #30
 8002de0:	487e      	ldr	r0, [pc, #504]	; (8002fdc <print_all_top_menu+0x228>)
 8002de2:	f7ff fb39 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 8002de6:	2300      	movs	r3, #0
 8002de8:	9301      	str	r3, [sp, #4]
 8002dea:	2302      	movs	r3, #2
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002df2:	2296      	movs	r2, #150	; 0x96
 8002df4:	211e      	movs	r1, #30
 8002df6:	4879      	ldr	r0, [pc, #484]	; (8002fdc <print_all_top_menu+0x228>)
 8002df8:	f7ff fb2e 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	9301      	str	r3, [sp, #4]
 8002e00:	2302      	movs	r3, #2
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e08:	22aa      	movs	r2, #170	; 0xaa
 8002e0a:	211e      	movs	r1, #30
 8002e0c:	4873      	ldr	r0, [pc, #460]	; (8002fdc <print_all_top_menu+0x228>)
 8002e0e:	f7ff fb23 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 8002e12:	2300      	movs	r3, #0
 8002e14:	9301      	str	r3, [sp, #4]
 8002e16:	2302      	movs	r3, #2
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e1e:	22be      	movs	r2, #190	; 0xbe
 8002e20:	211e      	movs	r1, #30
 8002e22:	486e      	ldr	r0, [pc, #440]	; (8002fdc <print_all_top_menu+0x228>)
 8002e24:	f7ff fb18 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 8002e28:	2300      	movs	r3, #0
 8002e2a:	9301      	str	r3, [sp, #4]
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e34:	22d2      	movs	r2, #210	; 0xd2
 8002e36:	211e      	movs	r1, #30
 8002e38:	4868      	ldr	r0, [pc, #416]	; (8002fdc <print_all_top_menu+0x228>)
 8002e3a:	f7ff fb0d 	bl	8002458 <ILI9341_Draw_Text>

	// Print all main menus
	ILI9341_Draw_Text(main_menus[0], 30, 110, WHITE, 2, BLACK);
 8002e3e:	2300      	movs	r3, #0
 8002e40:	9301      	str	r3, [sp, #4]
 8002e42:	2302      	movs	r3, #2
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e4a:	226e      	movs	r2, #110	; 0x6e
 8002e4c:	211e      	movs	r1, #30
 8002e4e:	4864      	ldr	r0, [pc, #400]	; (8002fe0 <print_all_top_menu+0x22c>)
 8002e50:	f7ff fb02 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[1], 30, 130, WHITE, 2, BLACK);
 8002e54:	2300      	movs	r3, #0
 8002e56:	9301      	str	r3, [sp, #4]
 8002e58:	2302      	movs	r3, #2
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e60:	2282      	movs	r2, #130	; 0x82
 8002e62:	211e      	movs	r1, #30
 8002e64:	485f      	ldr	r0, [pc, #380]	; (8002fe4 <print_all_top_menu+0x230>)
 8002e66:	f7ff faf7 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[2], 30, 150, WHITE, 2, BLACK);
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	2302      	movs	r3, #2
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e76:	2296      	movs	r2, #150	; 0x96
 8002e78:	211e      	movs	r1, #30
 8002e7a:	485b      	ldr	r0, [pc, #364]	; (8002fe8 <print_all_top_menu+0x234>)
 8002e7c:	f7ff faec 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[3], 30, 170, WHITE, 2, BLACK);
 8002e80:	2300      	movs	r3, #0
 8002e82:	9301      	str	r3, [sp, #4]
 8002e84:	2302      	movs	r3, #2
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e8c:	22aa      	movs	r2, #170	; 0xaa
 8002e8e:	211e      	movs	r1, #30
 8002e90:	4856      	ldr	r0, [pc, #344]	; (8002fec <print_all_top_menu+0x238>)
 8002e92:	f7ff fae1 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[4], 30, 190, WHITE, 2, BLACK);
 8002e96:	2300      	movs	r3, #0
 8002e98:	9301      	str	r3, [sp, #4]
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ea2:	22be      	movs	r2, #190	; 0xbe
 8002ea4:	211e      	movs	r1, #30
 8002ea6:	4852      	ldr	r0, [pc, #328]	; (8002ff0 <print_all_top_menu+0x23c>)
 8002ea8:	f7ff fad6 	bl	8002458 <ILI9341_Draw_Text>

	//
	if(pointer_on_selected_menu <= 0)
 8002eac:	4b51      	ldr	r3, [pc, #324]	; (8002ff4 <print_all_top_menu+0x240>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d102      	bne.n	8002eba <print_all_top_menu+0x106>
	{
		pointer_on_selected_menu = 5;
 8002eb4:	4b4f      	ldr	r3, [pc, #316]	; (8002ff4 <print_all_top_menu+0x240>)
 8002eb6:	2205      	movs	r2, #5
 8002eb8:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 6)
 8002eba:	4b4e      	ldr	r3, [pc, #312]	; (8002ff4 <print_all_top_menu+0x240>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b05      	cmp	r3, #5
 8002ec0:	d902      	bls.n	8002ec8 <print_all_top_menu+0x114>
	{
		pointer_on_selected_menu = 1;
 8002ec2:	4b4c      	ldr	r3, [pc, #304]	; (8002ff4 <print_all_top_menu+0x240>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]
	}
	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 8002ec8:	2300      	movs	r3, #0
 8002eca:	9301      	str	r3, [sp, #4]
 8002ecc:	2302      	movs	r3, #2
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ed4:	226e      	movs	r2, #110	; 0x6e
 8002ed6:	2105      	movs	r1, #5
 8002ed8:	4847      	ldr	r0, [pc, #284]	; (8002ff8 <print_all_top_menu+0x244>)
 8002eda:	f7ff fabd 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 8002ede:	2300      	movs	r3, #0
 8002ee0:	9301      	str	r3, [sp, #4]
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eea:	2282      	movs	r2, #130	; 0x82
 8002eec:	2105      	movs	r1, #5
 8002eee:	4842      	ldr	r0, [pc, #264]	; (8002ff8 <print_all_top_menu+0x244>)
 8002ef0:	f7ff fab2 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	9301      	str	r3, [sp, #4]
 8002ef8:	2302      	movs	r3, #2
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f00:	2296      	movs	r2, #150	; 0x96
 8002f02:	2105      	movs	r1, #5
 8002f04:	483c      	ldr	r0, [pc, #240]	; (8002ff8 <print_all_top_menu+0x244>)
 8002f06:	f7ff faa7 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	9301      	str	r3, [sp, #4]
 8002f0e:	2302      	movs	r3, #2
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f16:	22aa      	movs	r2, #170	; 0xaa
 8002f18:	2105      	movs	r1, #5
 8002f1a:	4837      	ldr	r0, [pc, #220]	; (8002ff8 <print_all_top_menu+0x244>)
 8002f1c:	f7ff fa9c 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 8002f20:	2300      	movs	r3, #0
 8002f22:	9301      	str	r3, [sp, #4]
 8002f24:	2302      	movs	r3, #2
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f2c:	22be      	movs	r2, #190	; 0xbe
 8002f2e:	2105      	movs	r1, #5
 8002f30:	4831      	ldr	r0, [pc, #196]	; (8002ff8 <print_all_top_menu+0x244>)
 8002f32:	f7ff fa91 	bl	8002458 <ILI9341_Draw_Text>

	// Point pointer on menu
	switch (pointer_on_selected_menu)
 8002f36:	4b2f      	ldr	r3, [pc, #188]	; (8002ff4 <print_all_top_menu+0x240>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d849      	bhi.n	8002fd4 <print_all_top_menu+0x220>
 8002f40:	a201      	add	r2, pc, #4	; (adr r2, 8002f48 <print_all_top_menu+0x194>)
 8002f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f46:	bf00      	nop
 8002f48:	08002f5d 	.word	0x08002f5d
 8002f4c:	08002f75 	.word	0x08002f75
 8002f50:	08002f8d 	.word	0x08002f8d
 8002f54:	08002fa5 	.word	0x08002fa5
 8002f58:	08002fbd 	.word	0x08002fbd
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	2302      	movs	r3, #2
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f68:	226e      	movs	r2, #110	; 0x6e
 8002f6a:	2105      	movs	r1, #5
 8002f6c:	4823      	ldr	r0, [pc, #140]	; (8002ffc <print_all_top_menu+0x248>)
 8002f6e:	f7ff fa73 	bl	8002458 <ILI9341_Draw_Text>
			break;
 8002f72:	e02f      	b.n	8002fd4 <print_all_top_menu+0x220>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 8002f74:	2300      	movs	r3, #0
 8002f76:	9301      	str	r3, [sp, #4]
 8002f78:	2302      	movs	r3, #2
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f80:	2282      	movs	r2, #130	; 0x82
 8002f82:	2105      	movs	r1, #5
 8002f84:	481d      	ldr	r0, [pc, #116]	; (8002ffc <print_all_top_menu+0x248>)
 8002f86:	f7ff fa67 	bl	8002458 <ILI9341_Draw_Text>
			break;
 8002f8a:	e023      	b.n	8002fd4 <print_all_top_menu+0x220>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	9301      	str	r3, [sp, #4]
 8002f90:	2302      	movs	r3, #2
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f98:	2296      	movs	r2, #150	; 0x96
 8002f9a:	2105      	movs	r1, #5
 8002f9c:	4817      	ldr	r0, [pc, #92]	; (8002ffc <print_all_top_menu+0x248>)
 8002f9e:	f7ff fa5b 	bl	8002458 <ILI9341_Draw_Text>
			break;
 8002fa2:	e017      	b.n	8002fd4 <print_all_top_menu+0x220>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	9301      	str	r3, [sp, #4]
 8002fa8:	2302      	movs	r3, #2
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002fb0:	22aa      	movs	r2, #170	; 0xaa
 8002fb2:	2105      	movs	r1, #5
 8002fb4:	4811      	ldr	r0, [pc, #68]	; (8002ffc <print_all_top_menu+0x248>)
 8002fb6:	f7ff fa4f 	bl	8002458 <ILI9341_Draw_Text>
			break;
 8002fba:	e00b      	b.n	8002fd4 <print_all_top_menu+0x220>
		case 5:
			ILI9341_Draw_Text( "->", 5, 190, RED, 2, BLACK);
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	9301      	str	r3, [sp, #4]
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002fc8:	22be      	movs	r2, #190	; 0xbe
 8002fca:	2105      	movs	r1, #5
 8002fcc:	480b      	ldr	r0, [pc, #44]	; (8002ffc <print_all_top_menu+0x248>)
 8002fce:	f7ff fa43 	bl	8002458 <ILI9341_Draw_Text>
			break;
 8002fd2:	bf00      	nop
	}

}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	0800fda8 	.word	0x0800fda8
 8002fe0:	20000010 	.word	0x20000010
 8002fe4:	2000002e 	.word	0x2000002e
 8002fe8:	2000004c 	.word	0x2000004c
 8002fec:	2000006a 	.word	0x2000006a
 8002ff0:	20000088 	.word	0x20000088
 8002ff4:	20000148 	.word	0x20000148
 8002ff8:	0800fdcc 	.word	0x0800fdcc
 8002ffc:	0800fdd0 	.word	0x0800fdd0

08003000 <print_all_menu_1_menus>:
// -----------------------------------------------------------------------
void print_all_menu_1_menus(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 8003006:	2300      	movs	r3, #0
 8003008:	9301      	str	r3, [sp, #4]
 800300a:	2302      	movs	r3, #2
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003012:	226e      	movs	r2, #110	; 0x6e
 8003014:	211e      	movs	r1, #30
 8003016:	4877      	ldr	r0, [pc, #476]	; (80031f4 <print_all_menu_1_menus+0x1f4>)
 8003018:	f7ff fa1e 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 800301c:	2300      	movs	r3, #0
 800301e:	9301      	str	r3, [sp, #4]
 8003020:	2302      	movs	r3, #2
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003028:	2282      	movs	r2, #130	; 0x82
 800302a:	211e      	movs	r1, #30
 800302c:	4871      	ldr	r0, [pc, #452]	; (80031f4 <print_all_menu_1_menus+0x1f4>)
 800302e:	f7ff fa13 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 8003032:	2300      	movs	r3, #0
 8003034:	9301      	str	r3, [sp, #4]
 8003036:	2302      	movs	r3, #2
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800303e:	2296      	movs	r2, #150	; 0x96
 8003040:	211e      	movs	r1, #30
 8003042:	486c      	ldr	r0, [pc, #432]	; (80031f4 <print_all_menu_1_menus+0x1f4>)
 8003044:	f7ff fa08 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 8003048:	2300      	movs	r3, #0
 800304a:	9301      	str	r3, [sp, #4]
 800304c:	2302      	movs	r3, #2
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003054:	22aa      	movs	r2, #170	; 0xaa
 8003056:	211e      	movs	r1, #30
 8003058:	4866      	ldr	r0, [pc, #408]	; (80031f4 <print_all_menu_1_menus+0x1f4>)
 800305a:	f7ff f9fd 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 800305e:	2300      	movs	r3, #0
 8003060:	9301      	str	r3, [sp, #4]
 8003062:	2302      	movs	r3, #2
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800306a:	22be      	movs	r2, #190	; 0xbe
 800306c:	211e      	movs	r1, #30
 800306e:	4861      	ldr	r0, [pc, #388]	; (80031f4 <print_all_menu_1_menus+0x1f4>)
 8003070:	f7ff f9f2 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 8003074:	2300      	movs	r3, #0
 8003076:	9301      	str	r3, [sp, #4]
 8003078:	2302      	movs	r3, #2
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003080:	22d2      	movs	r2, #210	; 0xd2
 8003082:	211e      	movs	r1, #30
 8003084:	485b      	ldr	r0, [pc, #364]	; (80031f4 <print_all_menu_1_menus+0x1f4>)
 8003086:	f7ff f9e7 	bl	8002458 <ILI9341_Draw_Text>

	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 800308a:	2300      	movs	r3, #0
 800308c:	9301      	str	r3, [sp, #4]
 800308e:	2302      	movs	r3, #2
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003096:	226e      	movs	r2, #110	; 0x6e
 8003098:	2105      	movs	r1, #5
 800309a:	4857      	ldr	r0, [pc, #348]	; (80031f8 <print_all_menu_1_menus+0x1f8>)
 800309c:	f7ff f9dc 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 80030a0:	2300      	movs	r3, #0
 80030a2:	9301      	str	r3, [sp, #4]
 80030a4:	2302      	movs	r3, #2
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030ac:	2282      	movs	r2, #130	; 0x82
 80030ae:	2105      	movs	r1, #5
 80030b0:	4851      	ldr	r0, [pc, #324]	; (80031f8 <print_all_menu_1_menus+0x1f8>)
 80030b2:	f7ff f9d1 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 80030b6:	2300      	movs	r3, #0
 80030b8:	9301      	str	r3, [sp, #4]
 80030ba:	2302      	movs	r3, #2
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030c2:	2296      	movs	r2, #150	; 0x96
 80030c4:	2105      	movs	r1, #5
 80030c6:	484c      	ldr	r0, [pc, #304]	; (80031f8 <print_all_menu_1_menus+0x1f8>)
 80030c8:	f7ff f9c6 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 80030cc:	2300      	movs	r3, #0
 80030ce:	9301      	str	r3, [sp, #4]
 80030d0:	2302      	movs	r3, #2
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030d8:	22aa      	movs	r2, #170	; 0xaa
 80030da:	2105      	movs	r1, #5
 80030dc:	4846      	ldr	r0, [pc, #280]	; (80031f8 <print_all_menu_1_menus+0x1f8>)
 80030de:	f7ff f9bb 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 80030e2:	2300      	movs	r3, #0
 80030e4:	9301      	str	r3, [sp, #4]
 80030e6:	2302      	movs	r3, #2
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030ee:	22be      	movs	r2, #190	; 0xbe
 80030f0:	2105      	movs	r1, #5
 80030f2:	4841      	ldr	r0, [pc, #260]	; (80031f8 <print_all_menu_1_menus+0x1f8>)
 80030f4:	f7ff f9b0 	bl	8002458 <ILI9341_Draw_Text>

	ILI9341_Draw_Text(menu_1[0], 30, 110, WHITE, 2, BLACK);
 80030f8:	2300      	movs	r3, #0
 80030fa:	9301      	str	r3, [sp, #4]
 80030fc:	2302      	movs	r3, #2
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003104:	226e      	movs	r2, #110	; 0x6e
 8003106:	211e      	movs	r1, #30
 8003108:	483c      	ldr	r0, [pc, #240]	; (80031fc <print_all_menu_1_menus+0x1fc>)
 800310a:	f7ff f9a5 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[1], 30, 130, WHITE, 2, BLACK);
 800310e:	2300      	movs	r3, #0
 8003110:	9301      	str	r3, [sp, #4]
 8003112:	2302      	movs	r3, #2
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800311a:	2282      	movs	r2, #130	; 0x82
 800311c:	211e      	movs	r1, #30
 800311e:	4838      	ldr	r0, [pc, #224]	; (8003200 <print_all_menu_1_menus+0x200>)
 8003120:	f7ff f99a 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[2], 30, 150, WHITE, 2, BLACK);
 8003124:	2300      	movs	r3, #0
 8003126:	9301      	str	r3, [sp, #4]
 8003128:	2302      	movs	r3, #2
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003130:	2296      	movs	r2, #150	; 0x96
 8003132:	211e      	movs	r1, #30
 8003134:	4833      	ldr	r0, [pc, #204]	; (8003204 <print_all_menu_1_menus+0x204>)
 8003136:	f7ff f98f 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[3], 30, 170, WHITE, 2, BLACK);
 800313a:	2300      	movs	r3, #0
 800313c:	9301      	str	r3, [sp, #4]
 800313e:	2302      	movs	r3, #2
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003146:	22aa      	movs	r2, #170	; 0xaa
 8003148:	211e      	movs	r1, #30
 800314a:	482f      	ldr	r0, [pc, #188]	; (8003208 <print_all_menu_1_menus+0x208>)
 800314c:	f7ff f984 	bl	8002458 <ILI9341_Draw_Text>

	if(pointer_on_selected_menu <= 0)
 8003150:	4b2e      	ldr	r3, [pc, #184]	; (800320c <print_all_menu_1_menus+0x20c>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d102      	bne.n	800315e <print_all_menu_1_menus+0x15e>
	{
		pointer_on_selected_menu = 4;
 8003158:	4b2c      	ldr	r3, [pc, #176]	; (800320c <print_all_menu_1_menus+0x20c>)
 800315a:	2204      	movs	r2, #4
 800315c:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 5)
 800315e:	4b2b      	ldr	r3, [pc, #172]	; (800320c <print_all_menu_1_menus+0x20c>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b04      	cmp	r3, #4
 8003164:	d902      	bls.n	800316c <print_all_menu_1_menus+0x16c>
	{
		pointer_on_selected_menu = 1;
 8003166:	4b29      	ldr	r3, [pc, #164]	; (800320c <print_all_menu_1_menus+0x20c>)
 8003168:	2201      	movs	r2, #1
 800316a:	701a      	strb	r2, [r3, #0]
	}

	switch (pointer_on_selected_menu)
 800316c:	4b27      	ldr	r3, [pc, #156]	; (800320c <print_all_menu_1_menus+0x20c>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	3b01      	subs	r3, #1
 8003172:	2b03      	cmp	r3, #3
 8003174:	d83a      	bhi.n	80031ec <print_all_menu_1_menus+0x1ec>
 8003176:	a201      	add	r2, pc, #4	; (adr r2, 800317c <print_all_menu_1_menus+0x17c>)
 8003178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317c:	0800318d 	.word	0x0800318d
 8003180:	080031a5 	.word	0x080031a5
 8003184:	080031bd 	.word	0x080031bd
 8003188:	080031d5 	.word	0x080031d5
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 800318c:	2300      	movs	r3, #0
 800318e:	9301      	str	r3, [sp, #4]
 8003190:	2302      	movs	r3, #2
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003198:	226e      	movs	r2, #110	; 0x6e
 800319a:	2105      	movs	r1, #5
 800319c:	481c      	ldr	r0, [pc, #112]	; (8003210 <print_all_menu_1_menus+0x210>)
 800319e:	f7ff f95b 	bl	8002458 <ILI9341_Draw_Text>
			break;
 80031a2:	e023      	b.n	80031ec <print_all_menu_1_menus+0x1ec>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 80031a4:	2300      	movs	r3, #0
 80031a6:	9301      	str	r3, [sp, #4]
 80031a8:	2302      	movs	r3, #2
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031b0:	2282      	movs	r2, #130	; 0x82
 80031b2:	2105      	movs	r1, #5
 80031b4:	4816      	ldr	r0, [pc, #88]	; (8003210 <print_all_menu_1_menus+0x210>)
 80031b6:	f7ff f94f 	bl	8002458 <ILI9341_Draw_Text>
			break;
 80031ba:	e017      	b.n	80031ec <print_all_menu_1_menus+0x1ec>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 80031bc:	2300      	movs	r3, #0
 80031be:	9301      	str	r3, [sp, #4]
 80031c0:	2302      	movs	r3, #2
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031c8:	2296      	movs	r2, #150	; 0x96
 80031ca:	2105      	movs	r1, #5
 80031cc:	4810      	ldr	r0, [pc, #64]	; (8003210 <print_all_menu_1_menus+0x210>)
 80031ce:	f7ff f943 	bl	8002458 <ILI9341_Draw_Text>
			break;
 80031d2:	e00b      	b.n	80031ec <print_all_menu_1_menus+0x1ec>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 80031d4:	2300      	movs	r3, #0
 80031d6:	9301      	str	r3, [sp, #4]
 80031d8:	2302      	movs	r3, #2
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031e0:	22aa      	movs	r2, #170	; 0xaa
 80031e2:	2105      	movs	r1, #5
 80031e4:	480a      	ldr	r0, [pc, #40]	; (8003210 <print_all_menu_1_menus+0x210>)
 80031e6:	f7ff f937 	bl	8002458 <ILI9341_Draw_Text>
			break;
 80031ea:	bf00      	nop
	}
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	0800fda8 	.word	0x0800fda8
 80031f8:	0800fdcc 	.word	0x0800fdcc
 80031fc:	200000a8 	.word	0x200000a8
 8003200:	200000bc 	.word	0x200000bc
 8003204:	200000d0 	.word	0x200000d0
 8003208:	200000e4 	.word	0x200000e4
 800320c:	20000148 	.word	0x20000148
 8003210:	0800fdd0 	.word	0x0800fdd0

08003214 <print_all_menu_1_1_menus>:
// -----------------------------------------------------------------------
void print_all_menu_1_1_menus(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 800321a:	2300      	movs	r3, #0
 800321c:	9301      	str	r3, [sp, #4]
 800321e:	2302      	movs	r3, #2
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003226:	226e      	movs	r2, #110	; 0x6e
 8003228:	211e      	movs	r1, #30
 800322a:	4877      	ldr	r0, [pc, #476]	; (8003408 <print_all_menu_1_1_menus+0x1f4>)
 800322c:	f7ff f914 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 8003230:	2300      	movs	r3, #0
 8003232:	9301      	str	r3, [sp, #4]
 8003234:	2302      	movs	r3, #2
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800323c:	2282      	movs	r2, #130	; 0x82
 800323e:	211e      	movs	r1, #30
 8003240:	4871      	ldr	r0, [pc, #452]	; (8003408 <print_all_menu_1_1_menus+0x1f4>)
 8003242:	f7ff f909 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 8003246:	2300      	movs	r3, #0
 8003248:	9301      	str	r3, [sp, #4]
 800324a:	2302      	movs	r3, #2
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003252:	2296      	movs	r2, #150	; 0x96
 8003254:	211e      	movs	r1, #30
 8003256:	486c      	ldr	r0, [pc, #432]	; (8003408 <print_all_menu_1_1_menus+0x1f4>)
 8003258:	f7ff f8fe 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 800325c:	2300      	movs	r3, #0
 800325e:	9301      	str	r3, [sp, #4]
 8003260:	2302      	movs	r3, #2
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003268:	22aa      	movs	r2, #170	; 0xaa
 800326a:	211e      	movs	r1, #30
 800326c:	4866      	ldr	r0, [pc, #408]	; (8003408 <print_all_menu_1_1_menus+0x1f4>)
 800326e:	f7ff f8f3 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 8003272:	2300      	movs	r3, #0
 8003274:	9301      	str	r3, [sp, #4]
 8003276:	2302      	movs	r3, #2
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800327e:	22be      	movs	r2, #190	; 0xbe
 8003280:	211e      	movs	r1, #30
 8003282:	4861      	ldr	r0, [pc, #388]	; (8003408 <print_all_menu_1_1_menus+0x1f4>)
 8003284:	f7ff f8e8 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 8003288:	2300      	movs	r3, #0
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	2302      	movs	r3, #2
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003294:	22d2      	movs	r2, #210	; 0xd2
 8003296:	211e      	movs	r1, #30
 8003298:	485b      	ldr	r0, [pc, #364]	; (8003408 <print_all_menu_1_1_menus+0x1f4>)
 800329a:	f7ff f8dd 	bl	8002458 <ILI9341_Draw_Text>

	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 800329e:	2300      	movs	r3, #0
 80032a0:	9301      	str	r3, [sp, #4]
 80032a2:	2302      	movs	r3, #2
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032aa:	226e      	movs	r2, #110	; 0x6e
 80032ac:	2105      	movs	r1, #5
 80032ae:	4857      	ldr	r0, [pc, #348]	; (800340c <print_all_menu_1_1_menus+0x1f8>)
 80032b0:	f7ff f8d2 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 80032b4:	2300      	movs	r3, #0
 80032b6:	9301      	str	r3, [sp, #4]
 80032b8:	2302      	movs	r3, #2
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032c0:	2282      	movs	r2, #130	; 0x82
 80032c2:	2105      	movs	r1, #5
 80032c4:	4851      	ldr	r0, [pc, #324]	; (800340c <print_all_menu_1_1_menus+0x1f8>)
 80032c6:	f7ff f8c7 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 80032ca:	2300      	movs	r3, #0
 80032cc:	9301      	str	r3, [sp, #4]
 80032ce:	2302      	movs	r3, #2
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032d6:	2296      	movs	r2, #150	; 0x96
 80032d8:	2105      	movs	r1, #5
 80032da:	484c      	ldr	r0, [pc, #304]	; (800340c <print_all_menu_1_1_menus+0x1f8>)
 80032dc:	f7ff f8bc 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 80032e0:	2300      	movs	r3, #0
 80032e2:	9301      	str	r3, [sp, #4]
 80032e4:	2302      	movs	r3, #2
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032ec:	22aa      	movs	r2, #170	; 0xaa
 80032ee:	2105      	movs	r1, #5
 80032f0:	4846      	ldr	r0, [pc, #280]	; (800340c <print_all_menu_1_1_menus+0x1f8>)
 80032f2:	f7ff f8b1 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 80032f6:	2300      	movs	r3, #0
 80032f8:	9301      	str	r3, [sp, #4]
 80032fa:	2302      	movs	r3, #2
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003302:	22be      	movs	r2, #190	; 0xbe
 8003304:	2105      	movs	r1, #5
 8003306:	4841      	ldr	r0, [pc, #260]	; (800340c <print_all_menu_1_1_menus+0x1f8>)
 8003308:	f7ff f8a6 	bl	8002458 <ILI9341_Draw_Text>

	ILI9341_Draw_Text(menu_1_1[0], 30, 110, WHITE, 2, BLACK);
 800330c:	2300      	movs	r3, #0
 800330e:	9301      	str	r3, [sp, #4]
 8003310:	2302      	movs	r3, #2
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003318:	226e      	movs	r2, #110	; 0x6e
 800331a:	211e      	movs	r1, #30
 800331c:	483c      	ldr	r0, [pc, #240]	; (8003410 <print_all_menu_1_1_menus+0x1fc>)
 800331e:	f7ff f89b 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[1], 30, 130, WHITE, 2, BLACK);
 8003322:	2300      	movs	r3, #0
 8003324:	9301      	str	r3, [sp, #4]
 8003326:	2302      	movs	r3, #2
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800332e:	2282      	movs	r2, #130	; 0x82
 8003330:	211e      	movs	r1, #30
 8003332:	4838      	ldr	r0, [pc, #224]	; (8003414 <print_all_menu_1_1_menus+0x200>)
 8003334:	f7ff f890 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[2], 30, 150, WHITE, 2, BLACK);
 8003338:	2300      	movs	r3, #0
 800333a:	9301      	str	r3, [sp, #4]
 800333c:	2302      	movs	r3, #2
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003344:	2296      	movs	r2, #150	; 0x96
 8003346:	211e      	movs	r1, #30
 8003348:	4833      	ldr	r0, [pc, #204]	; (8003418 <print_all_menu_1_1_menus+0x204>)
 800334a:	f7ff f885 	bl	8002458 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[3], 30, 170, WHITE, 2, BLACK);
 800334e:	2300      	movs	r3, #0
 8003350:	9301      	str	r3, [sp, #4]
 8003352:	2302      	movs	r3, #2
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800335a:	22aa      	movs	r2, #170	; 0xaa
 800335c:	211e      	movs	r1, #30
 800335e:	482f      	ldr	r0, [pc, #188]	; (800341c <print_all_menu_1_1_menus+0x208>)
 8003360:	f7ff f87a 	bl	8002458 <ILI9341_Draw_Text>

	if(pointer_on_selected_menu <= 0)
 8003364:	4b2e      	ldr	r3, [pc, #184]	; (8003420 <print_all_menu_1_1_menus+0x20c>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d102      	bne.n	8003372 <print_all_menu_1_1_menus+0x15e>
	{
		pointer_on_selected_menu = 4;
 800336c:	4b2c      	ldr	r3, [pc, #176]	; (8003420 <print_all_menu_1_1_menus+0x20c>)
 800336e:	2204      	movs	r2, #4
 8003370:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 5)
 8003372:	4b2b      	ldr	r3, [pc, #172]	; (8003420 <print_all_menu_1_1_menus+0x20c>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b04      	cmp	r3, #4
 8003378:	d902      	bls.n	8003380 <print_all_menu_1_1_menus+0x16c>
	{
		pointer_on_selected_menu = 1;
 800337a:	4b29      	ldr	r3, [pc, #164]	; (8003420 <print_all_menu_1_1_menus+0x20c>)
 800337c:	2201      	movs	r2, #1
 800337e:	701a      	strb	r2, [r3, #0]
	}

	switch (pointer_on_selected_menu)
 8003380:	4b27      	ldr	r3, [pc, #156]	; (8003420 <print_all_menu_1_1_menus+0x20c>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	3b01      	subs	r3, #1
 8003386:	2b03      	cmp	r3, #3
 8003388:	d83a      	bhi.n	8003400 <print_all_menu_1_1_menus+0x1ec>
 800338a:	a201      	add	r2, pc, #4	; (adr r2, 8003390 <print_all_menu_1_1_menus+0x17c>)
 800338c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003390:	080033a1 	.word	0x080033a1
 8003394:	080033b9 	.word	0x080033b9
 8003398:	080033d1 	.word	0x080033d1
 800339c:	080033e9 	.word	0x080033e9
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 80033a0:	2300      	movs	r3, #0
 80033a2:	9301      	str	r3, [sp, #4]
 80033a4:	2302      	movs	r3, #2
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80033ac:	226e      	movs	r2, #110	; 0x6e
 80033ae:	2105      	movs	r1, #5
 80033b0:	481c      	ldr	r0, [pc, #112]	; (8003424 <print_all_menu_1_1_menus+0x210>)
 80033b2:	f7ff f851 	bl	8002458 <ILI9341_Draw_Text>
			break;
 80033b6:	e023      	b.n	8003400 <print_all_menu_1_1_menus+0x1ec>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 80033b8:	2300      	movs	r3, #0
 80033ba:	9301      	str	r3, [sp, #4]
 80033bc:	2302      	movs	r3, #2
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80033c4:	2282      	movs	r2, #130	; 0x82
 80033c6:	2105      	movs	r1, #5
 80033c8:	4816      	ldr	r0, [pc, #88]	; (8003424 <print_all_menu_1_1_menus+0x210>)
 80033ca:	f7ff f845 	bl	8002458 <ILI9341_Draw_Text>
			break;
 80033ce:	e017      	b.n	8003400 <print_all_menu_1_1_menus+0x1ec>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 80033d0:	2300      	movs	r3, #0
 80033d2:	9301      	str	r3, [sp, #4]
 80033d4:	2302      	movs	r3, #2
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80033dc:	2296      	movs	r2, #150	; 0x96
 80033de:	2105      	movs	r1, #5
 80033e0:	4810      	ldr	r0, [pc, #64]	; (8003424 <print_all_menu_1_1_menus+0x210>)
 80033e2:	f7ff f839 	bl	8002458 <ILI9341_Draw_Text>
			break;
 80033e6:	e00b      	b.n	8003400 <print_all_menu_1_1_menus+0x1ec>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 80033e8:	2300      	movs	r3, #0
 80033ea:	9301      	str	r3, [sp, #4]
 80033ec:	2302      	movs	r3, #2
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80033f4:	22aa      	movs	r2, #170	; 0xaa
 80033f6:	2105      	movs	r1, #5
 80033f8:	480a      	ldr	r0, [pc, #40]	; (8003424 <print_all_menu_1_1_menus+0x210>)
 80033fa:	f7ff f82d 	bl	8002458 <ILI9341_Draw_Text>
			break;
 80033fe:	bf00      	nop
	}
}
 8003400:	bf00      	nop
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	0800fda8 	.word	0x0800fda8
 800340c:	0800fdcc 	.word	0x0800fdcc
 8003410:	200000f8 	.word	0x200000f8
 8003414:	2000010c 	.word	0x2000010c
 8003418:	20000120 	.word	0x20000120
 800341c:	20000134 	.word	0x20000134
 8003420:	20000148 	.word	0x20000148
 8003424:	0800fdd0 	.word	0x0800fdd0

08003428 <tongle_green_led>:
// -----------------------------------------------------------------------
void tongle_green_led(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin( GPIOD, GPIO_PIN_12);
 800342c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003430:	4802      	ldr	r0, [pc, #8]	; (800343c <tongle_green_led+0x14>)
 8003432:	f002 fe7e 	bl	8006132 <HAL_GPIO_TogglePin>
}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40020c00 	.word	0x40020c00

08003440 <RED_LED_ON>:
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// -----------------------------------------------------------------------
void RED_LED_ON(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8003444:	2201      	movs	r2, #1
 8003446:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800344a:	4802      	ldr	r0, [pc, #8]	; (8003454 <RED_LED_ON+0x14>)
 800344c:	f002 fe58 	bl	8006100 <HAL_GPIO_WritePin>
}
 8003450:	bf00      	nop
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40020c00 	.word	0x40020c00

08003458 <RED_LED_OFF>:
// -----------------------------------------------------------------------
void RED_LED_OFF(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800345c:	2200      	movs	r2, #0
 800345e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003462:	4802      	ldr	r0, [pc, #8]	; (800346c <RED_LED_OFF+0x14>)
 8003464:	f002 fe4c 	bl	8006100 <HAL_GPIO_WritePin>
}
 8003468:	bf00      	nop
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40020c00 	.word	0x40020c00

08003470 <Level1Item3_Enter>:
// -----------------------------------------------------------------------
static void Level1Item3_Enter(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af02      	add	r7, sp, #8
 bool flagPressed = false;
 8003476:	2300      	movs	r3, #0
 8003478:	71fb      	strb	r3, [r7, #7]

 ILI9341_Draw_Text( "                          ", 10, 60, WHITE, 2, BLACK);   // Clearn lcd
 800347a:	2300      	movs	r3, #0
 800347c:	9301      	str	r3, [sp, #4]
 800347e:	2302      	movs	r3, #2
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003486:	223c      	movs	r2, #60	; 0x3c
 8003488:	210a      	movs	r1, #10
 800348a:	4838      	ldr	r0, [pc, #224]	; (800356c <Level1Item3_Enter+0xfc>)
 800348c:	f7fe ffe4 	bl	8002458 <ILI9341_Draw_Text>

 ILI9341_Draw_Text( "Red LED is:", 10, 60, WHITE, 2, BLACK);
 8003490:	2300      	movs	r3, #0
 8003492:	9301      	str	r3, [sp, #4]
 8003494:	2302      	movs	r3, #2
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800349c:	223c      	movs	r2, #60	; 0x3c
 800349e:	210a      	movs	r1, #10
 80034a0:	4833      	ldr	r0, [pc, #204]	; (8003570 <Level1Item3_Enter+0x100>)
 80034a2:	f7fe ffd9 	bl	8002458 <ILI9341_Draw_Text>

 while(getPressKey() != BUTTON_LEFT)
 80034a6:	e049      	b.n	800353c <Level1Item3_Enter+0xcc>
 {
	 // Read PIN
	 int led_status =  HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_14);
 80034a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034ac:	4831      	ldr	r0, [pc, #196]	; (8003574 <Level1Item3_Enter+0x104>)
 80034ae:	f002 fe0f 	bl	80060d0 <HAL_GPIO_ReadPin>
 80034b2:	4603      	mov	r3, r0
 80034b4:	603b      	str	r3, [r7, #0]

	 if(flagPressed == true)
 80034b6:	79fb      	ldrb	r3, [r7, #7]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d019      	beq.n	80034f0 <Level1Item3_Enter+0x80>
	 {
		 if(led_status == GPIO_PIN_SET)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d10b      	bne.n	80034da <Level1Item3_Enter+0x6a>
		 {
			 ILI9341_Draw_Text( "ON ", 150, 60, WHITE, 2, BLACK);
 80034c2:	2300      	movs	r3, #0
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	2302      	movs	r3, #2
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034ce:	223c      	movs	r2, #60	; 0x3c
 80034d0:	2196      	movs	r1, #150	; 0x96
 80034d2:	4829      	ldr	r0, [pc, #164]	; (8003578 <Level1Item3_Enter+0x108>)
 80034d4:	f7fe ffc0 	bl	8002458 <ILI9341_Draw_Text>
 80034d8:	e00a      	b.n	80034f0 <Level1Item3_Enter+0x80>
		 }
		 else
		 {
		 	 ILI9341_Draw_Text( "OFF", 150, 60, WHITE, 2, BLACK);
 80034da:	2300      	movs	r3, #0
 80034dc:	9301      	str	r3, [sp, #4]
 80034de:	2302      	movs	r3, #2
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034e6:	223c      	movs	r2, #60	; 0x3c
 80034e8:	2196      	movs	r1, #150	; 0x96
 80034ea:	4824      	ldr	r0, [pc, #144]	; (800357c <Level1Item3_Enter+0x10c>)
 80034ec:	f7fe ffb4 	bl	8002458 <ILI9341_Draw_Text>
		 }
	 }


	 if(getPressKey() != BUTTON_NOTHING && !flagPressed)
 80034f0:	f000 f84a 	bl	8003588 <getPressKey>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2bff      	cmp	r3, #255	; 0xff
 80034f8:	d016      	beq.n	8003528 <Level1Item3_Enter+0xb8>
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	f083 0301 	eor.w	r3, r3, #1
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d010      	beq.n	8003528 <Level1Item3_Enter+0xb8>
	 {
		 flagPressed = true;
 8003506:	2301      	movs	r3, #1
 8003508:	71fb      	strb	r3, [r7, #7]

		 switch(getPressKey())  // If press any key
 800350a:	f000 f83d 	bl	8003588 <getPressKey>
 800350e:	4603      	mov	r3, r0
 8003510:	2b01      	cmp	r3, #1
 8003512:	d002      	beq.n	800351a <Level1Item3_Enter+0xaa>
 8003514:	2b02      	cmp	r3, #2
 8003516:	d003      	beq.n	8003520 <Level1Item3_Enter+0xb0>
	  	  		  break;
	  	  	  case BUTTON_DOWN:
	  	  		  RED_LED_OFF();
	  	  		  break;
	  	  	  default:
	  	  		  break;
 8003518:	e005      	b.n	8003526 <Level1Item3_Enter+0xb6>
	  	  		  RED_LED_ON();
 800351a:	f7ff ff91 	bl	8003440 <RED_LED_ON>
	  	  		  break;
 800351e:	e002      	b.n	8003526 <Level1Item3_Enter+0xb6>
	  	  		  RED_LED_OFF();
 8003520:	f7ff ff9a 	bl	8003458 <RED_LED_OFF>
	  	  		  break;
 8003524:	bf00      	nop
		 switch(getPressKey())  // If press any key
 8003526:	e009      	b.n	800353c <Level1Item3_Enter+0xcc>
		 }
	 }
	 else if(getPressKey() == BUTTON_NOTHING && flagPressed)
 8003528:	f000 f82e 	bl	8003588 <getPressKey>
 800352c:	4603      	mov	r3, r0
 800352e:	2bff      	cmp	r3, #255	; 0xff
 8003530:	d104      	bne.n	800353c <Level1Item3_Enter+0xcc>
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <Level1Item3_Enter+0xcc>
	 {
		 flagPressed = false; 	// if button was release
 8003538:	2300      	movs	r3, #0
 800353a:	71fb      	strb	r3, [r7, #7]
 while(getPressKey() != BUTTON_LEFT)
 800353c:	f000 f824 	bl	8003588 <getPressKey>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1b0      	bne.n	80034a8 <Level1Item3_Enter+0x38>
	 }
 }

 ILI9341_Draw_Text( "                           ", 10, 60, WHITE, 2, BLACK); // Cleaning one row LCD
 8003546:	2300      	movs	r3, #0
 8003548:	9301      	str	r3, [sp, #4]
 800354a:	2302      	movs	r3, #2
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003552:	223c      	movs	r2, #60	; 0x3c
 8003554:	210a      	movs	r1, #10
 8003556:	480a      	ldr	r0, [pc, #40]	; (8003580 <Level1Item3_Enter+0x110>)
 8003558:	f7fe ff7e 	bl	8002458 <ILI9341_Draw_Text>
 Menu_Navigate(&Menu_3);  // Back to menu 3
 800355c:	4809      	ldr	r0, [pc, #36]	; (8003584 <Level1Item3_Enter+0x114>)
 800355e:	f000 f8db 	bl	8003718 <Menu_Navigate>
}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	0800fdd4 	.word	0x0800fdd4
 8003570:	0800fdf0 	.word	0x0800fdf0
 8003574:	40020c00 	.word	0x40020c00
 8003578:	0800fdfc 	.word	0x0800fdfc
 800357c:	0800fe00 	.word	0x0800fe00
 8003580:	0800fe04 	.word	0x0800fe04
 8003584:	08010188 	.word	0x08010188

08003588 <getPressKey>:
// -----------------------------------------------------------------------
static uint8_t getPressKey()		// 3x4 keyboard
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af02      	add	r7, sp, #8
	char digit = '\0';
 800358e:	2300      	movs	r3, #0
 8003590:	75fb      	strb	r3, [r7, #23]
	char buff_lcd[20] = "KEY: ";
 8003592:	4a48      	ldr	r2, [pc, #288]	; (80036b4 <getPressKey+0x12c>)
 8003594:	463b      	mov	r3, r7
 8003596:	e892 0003 	ldmia.w	r2, {r0, r1}
 800359a:	6018      	str	r0, [r3, #0]
 800359c:	3304      	adds	r3, #4
 800359e:	8019      	strh	r1, [r3, #0]
 80035a0:	1dbb      	adds	r3, r7, #6
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	605a      	str	r2, [r3, #4]
 80035a8:	609a      	str	r2, [r3, #8]
 80035aa:	819a      	strh	r2, [r3, #12]
	digit = read_one_digit_from_keyboard();
 80035ac:	f7fd fcc6 	bl	8000f3c <read_one_digit_from_keyboard>
 80035b0:	4603      	mov	r3, r0
 80035b2:	75fb      	strb	r3, [r7, #23]
	switch(digit)
 80035b4:	7dfb      	ldrb	r3, [r7, #23]
 80035b6:	3b32      	subs	r3, #50	; 0x32
 80035b8:	2b06      	cmp	r3, #6
 80035ba:	d875      	bhi.n	80036a8 <getPressKey+0x120>
 80035bc:	a201      	add	r2, pc, #4	; (adr r2, 80035c4 <getPressKey+0x3c>)
 80035be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c2:	bf00      	nop
 80035c4:	08003609 	.word	0x08003609
 80035c8:	080036a9 	.word	0x080036a9
 80035cc:	080035e1 	.word	0x080035e1
 80035d0:	08003681 	.word	0x08003681
 80035d4:	08003659 	.word	0x08003659
 80035d8:	080036a9 	.word	0x080036a9
 80035dc:	08003631 	.word	0x08003631
	{
		case '4':
		{
			strncat(buff_lcd, &digit, 1);
 80035e0:	f107 0117 	add.w	r1, r7, #23
 80035e4:	463b      	mov	r3, r7
 80035e6:	2201      	movs	r2, #1
 80035e8:	4618      	mov	r0, r3
 80035ea:	f00c f84f 	bl	800f68c <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 80035ee:	4638      	mov	r0, r7
 80035f0:	2300      	movs	r3, #0
 80035f2:	9301      	str	r3, [sp, #4]
 80035f4:	2302      	movs	r3, #2
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035fc:	2200      	movs	r2, #0
 80035fe:	2100      	movs	r1, #0
 8003600:	f7fe ff2a 	bl	8002458 <ILI9341_Draw_Text>
			return BUTTON_LEFT;
 8003604:	2300      	movs	r3, #0
 8003606:	e050      	b.n	80036aa <getPressKey+0x122>
		}
		case '2':
		{
			strncat(buff_lcd, &digit, 1);
 8003608:	f107 0117 	add.w	r1, r7, #23
 800360c:	463b      	mov	r3, r7
 800360e:	2201      	movs	r2, #1
 8003610:	4618      	mov	r0, r3
 8003612:	f00c f83b 	bl	800f68c <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8003616:	4638      	mov	r0, r7
 8003618:	2300      	movs	r3, #0
 800361a:	9301      	str	r3, [sp, #4]
 800361c:	2302      	movs	r3, #2
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003624:	2200      	movs	r2, #0
 8003626:	2100      	movs	r1, #0
 8003628:	f7fe ff16 	bl	8002458 <ILI9341_Draw_Text>
			return BUTTON_UP;
 800362c:	2301      	movs	r3, #1
 800362e:	e03c      	b.n	80036aa <getPressKey+0x122>
		}
		case '8':
		{
			strncat(buff_lcd, &digit, 1);
 8003630:	f107 0117 	add.w	r1, r7, #23
 8003634:	463b      	mov	r3, r7
 8003636:	2201      	movs	r2, #1
 8003638:	4618      	mov	r0, r3
 800363a:	f00c f827 	bl	800f68c <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 800363e:	4638      	mov	r0, r7
 8003640:	2300      	movs	r3, #0
 8003642:	9301      	str	r3, [sp, #4]
 8003644:	2302      	movs	r3, #2
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800364c:	2200      	movs	r2, #0
 800364e:	2100      	movs	r1, #0
 8003650:	f7fe ff02 	bl	8002458 <ILI9341_Draw_Text>
			return BUTTON_DOWN;
 8003654:	2302      	movs	r3, #2
 8003656:	e028      	b.n	80036aa <getPressKey+0x122>
		}
		case '6':
		{
			strncat(buff_lcd, &digit, 1);
 8003658:	f107 0117 	add.w	r1, r7, #23
 800365c:	463b      	mov	r3, r7
 800365e:	2201      	movs	r2, #1
 8003660:	4618      	mov	r0, r3
 8003662:	f00c f813 	bl	800f68c <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8003666:	4638      	mov	r0, r7
 8003668:	2300      	movs	r3, #0
 800366a:	9301      	str	r3, [sp, #4]
 800366c:	2302      	movs	r3, #2
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003674:	2200      	movs	r2, #0
 8003676:	2100      	movs	r1, #0
 8003678:	f7fe feee 	bl	8002458 <ILI9341_Draw_Text>
			return BUTTON_RIGHT;
 800367c:	2303      	movs	r3, #3
 800367e:	e014      	b.n	80036aa <getPressKey+0x122>
		}
		case '5':
		{
			strncat(buff_lcd, &digit, 1);
 8003680:	f107 0117 	add.w	r1, r7, #23
 8003684:	463b      	mov	r3, r7
 8003686:	2201      	movs	r2, #1
 8003688:	4618      	mov	r0, r3
 800368a:	f00b ffff 	bl	800f68c <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 800368e:	4638      	mov	r0, r7
 8003690:	2300      	movs	r3, #0
 8003692:	9301      	str	r3, [sp, #4]
 8003694:	2302      	movs	r3, #2
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800369c:	2200      	movs	r2, #0
 800369e:	2100      	movs	r1, #0
 80036a0:	f7fe feda 	bl	8002458 <ILI9341_Draw_Text>
			return BUTTON_SELECT;
 80036a4:	2304      	movs	r3, #4
 80036a6:	e000      	b.n	80036aa <getPressKey+0x122>
		}
		default:
			return BUTTON_NOTHING;
 80036a8:	23ff      	movs	r3, #255	; 0xff
			break;


	}
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	0800fe20 	.word	0x0800fe20

080036b8 <Generic_Write>:
// -----------------------------------------------------------------------
void Generic_Write(const char* Text)		// Print "Text" data on LCD
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af02      	add	r7, sp, #8
 80036be:	6078      	str	r0, [r7, #4]
	if (Text)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d015      	beq.n	80036f2 <Generic_Write+0x3a>
	{
		ILI9341_Draw_Text( "                                 ", 10, 100, WHITE, 1, BLACK);
 80036c6:	2300      	movs	r3, #0
 80036c8:	9301      	str	r3, [sp, #4]
 80036ca:	2301      	movs	r3, #1
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036d2:	2264      	movs	r2, #100	; 0x64
 80036d4:	210a      	movs	r1, #10
 80036d6:	4809      	ldr	r0, [pc, #36]	; (80036fc <Generic_Write+0x44>)
 80036d8:	f7fe febe 	bl	8002458 <ILI9341_Draw_Text>
		ILI9341_Draw_Text( Text, 10, 100, WHITE, 1, BLACK);
 80036dc:	2300      	movs	r3, #0
 80036de:	9301      	str	r3, [sp, #4]
 80036e0:	2301      	movs	r3, #1
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036e8:	2264      	movs	r2, #100	; 0x64
 80036ea:	210a      	movs	r1, #10
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7fe feb3 	bl	8002458 <ILI9341_Draw_Text>
	}
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	0800fe34 	.word	0x0800fe34

08003700 <Menu_GetCurrentMenu>:
// -----------------------------------------------------------------------
Menu_Item_t* Menu_GetCurrentMenu(void)		// Повертає поточни вибраний пункт меню
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
	return CurrentMenuItem;
 8003704:	4b03      	ldr	r3, [pc, #12]	; (8003714 <Menu_GetCurrentMenu+0x14>)
 8003706:	681b      	ldr	r3, [r3, #0]
}
 8003708:	4618      	mov	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	2000000c 	.word	0x2000000c

08003718 <Menu_Navigate>:
// -----------------------------------------------------------------------
// Переходи по меню
// in: ПОказник на апсолютний пункт меню, для вибору
// MENU_PARENT, MENU_CHILD, MENU_NEXT або  MENU_PREVIOUS
void Menu_Navigate(Menu_Item_t* const NewMenu)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
	if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))  // What it mean???
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a11      	ldr	r2, [pc, #68]	; (8003768 <Menu_Navigate+0x50>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d01a      	beq.n	800375e <Menu_Navigate+0x46>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d017      	beq.n	800375e <Menu_Navigate+0x46>
	{
		return;		// Exit
	}

	CurrentMenuItem = NewMenu;    // Передане маню стає вибране
 800372e:	4a0f      	ldr	r2, [pc, #60]	; (800376c <Menu_Navigate+0x54>)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6013      	str	r3, [r2, #0]

	if (MenuWriteFunc)    // If   MenuWriteFunc  != NULL  ???????
 8003734:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <Menu_Navigate+0x58>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d006      	beq.n	800374a <Menu_Navigate+0x32>
	{
		MenuWriteFunc(CurrentMenuItem->Text);			// Print Text string on LCD
 800373c:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <Menu_Navigate+0x58>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a0a      	ldr	r2, [pc, #40]	; (800376c <Menu_Navigate+0x54>)
 8003742:	6812      	ldr	r2, [r2, #0]
 8003744:	3218      	adds	r2, #24
 8003746:	4610      	mov	r0, r2
 8003748:	4798      	blx	r3
	}

	//   void (*SelectCallback)(void) - Creating pointer on function
	// Write  CurrentMenuItem->SelectCallback in  void (*SelectCallback)(void) pinter
	void (*SelectCallback)(void) = CurrentMenuItem->SelectCallback;
 800374a:	4b08      	ldr	r3, [pc, #32]	; (800376c <Menu_Navigate+0x54>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	60fb      	str	r3, [r7, #12]

	if (SelectCallback)		// If SelectCallback != NULL
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <Menu_Navigate+0x48>
	{
		SelectCallback();   // It does - CurrentMenuItem->SelectCallback;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4798      	blx	r3
 800375c:	e000      	b.n	8003760 <Menu_Navigate+0x48>
		return;		// Exit
 800375e:	bf00      	nop
	}
}
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	08010118 	.word	0x08010118
 800376c:	2000000c 	.word	0x2000000c
 8003770:	20000294 	.word	0x20000294

08003774 <Menu_SetGenericWriteCallback>:
 пунктів меню. В рамках цієї функції зворотного виклику користувач повинен
 реалізувати код для відображення поточного тексту меню, що зберігається
 в  ref MENU_ITEM_STORAGE пам'яті.. */
// In: вказівник на функцію зворотного виклику для виконання кожного вибраного пункту меню.
void Menu_SetGenericWriteCallback(void (*WriteFunc)(const char* Text))    //  What doing this function??????? <<<<<<<<<<<
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
	MenuWriteFunc = WriteFunc;  		// Запис показника функції WriteFunc в
 800377c:	4a05      	ldr	r2, [pc, #20]	; (8003794 <Menu_SetGenericWriteCallback+0x20>)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6013      	str	r3, [r2, #0]
	//  показник на функцію під назвою MenuWriteFunc
	Menu_Navigate(CurrentMenuItem);      // Передача цього показника в функцію Menu_Navigate
 8003782:	4b05      	ldr	r3, [pc, #20]	; (8003798 <Menu_SetGenericWriteCallback+0x24>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff ffc6 	bl	8003718 <Menu_Navigate>
}
 800378c:	bf00      	nop
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	20000294 	.word	0x20000294
 8003798:	2000000c 	.word	0x2000000c

0800379c <Menu_EnterCurrentItem>:
// -----------------------------------------------------------------------
/* Функція входить у вибраний на даний момент пункт меню, виконуючи налаштовану
   функцію зворотного дзвінка (якщо така є) */
void Menu_EnterCurrentItem(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
	if ((CurrentMenuItem == &NULL_MENU) || (CurrentMenuItem == NULL))
 80037a2:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <Menu_EnterCurrentItem+0x34>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a0b      	ldr	r2, [pc, #44]	; (80037d4 <Menu_EnterCurrentItem+0x38>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d00d      	beq.n	80037c8 <Menu_EnterCurrentItem+0x2c>
 80037ac:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <Menu_EnterCurrentItem+0x34>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d009      	beq.n	80037c8 <Menu_EnterCurrentItem+0x2c>
	{
		return;
	}

	void (*EnterCallback)(void) = CurrentMenuItem->EnterCallback;
 80037b4:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <Menu_EnterCurrentItem+0x34>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	607b      	str	r3, [r7, #4]
	if (EnterCallback)		// If EnterCallback != NULL
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <Menu_EnterCurrentItem+0x2e>
	{
		EnterCallback();
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4798      	blx	r3
 80037c6:	e000      	b.n	80037ca <Menu_EnterCurrentItem+0x2e>
		return;
 80037c8:	bf00      	nop
	}

}// -----------------------------------------------------------------------
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	2000000c 	.word	0x2000000c
 80037d4:	08010118 	.word	0x08010118

080037d8 <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
	int i =0;
 80037e0:	2300      	movs	r3, #0
 80037e2:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 80037e4:	e036      	b.n	8003854 <speed_test_LCD+0x7c>
	{
		i ++;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	3301      	adds	r3, #1
 80037ea:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 80037ec:	2300      	movs	r3, #0
 80037ee:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 80037f8:	2300      	movs	r3, #0
 80037fa:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8003800:	4819      	ldr	r0, [pc, #100]	; (8003868 <speed_test_LCD+0x90>)
 8003802:	f007 f902 	bl	800aa0a <HAL_RNG_GetRandomNumber>
 8003806:	6138      	str	r0, [r7, #16]
		xr = random_num;
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 800380c:	4816      	ldr	r0, [pc, #88]	; (8003868 <speed_test_LCD+0x90>)
 800380e:	f007 f8fc 	bl	800aa0a <HAL_RNG_GetRandomNumber>
 8003812:	6138      	str	r0, [r7, #16]
		yr = random_num;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8003818:	4813      	ldr	r0, [pc, #76]	; (8003868 <speed_test_LCD+0x90>)
 800381a:	f007 f8f6 	bl	800aa0a <HAL_RNG_GetRandomNumber>
 800381e:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8003824:	4810      	ldr	r0, [pc, #64]	; (8003868 <speed_test_LCD+0x90>)
 8003826:	f007 f8f0 	bl	800aa0a <HAL_RNG_GetRandomNumber>
 800382a:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 8003830:	89fb      	ldrh	r3, [r7, #14]
 8003832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003836:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 8003838:	89bb      	ldrh	r3, [r7, #12]
 800383a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800383e:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 8003840:	897b      	ldrh	r3, [r7, #10]
 8003842:	f003 031f 	and.w	r3, r3, #31
 8003846:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 8003848:	893b      	ldrh	r3, [r7, #8]
 800384a:	897a      	ldrh	r2, [r7, #10]
 800384c:	89b9      	ldrh	r1, [r7, #12]
 800384e:	89f8      	ldrh	r0, [r7, #14]
 8003850:	f7fe fce4 	bl	800221c <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	429a      	cmp	r2, r3
 800385a:	ddc4      	ble.n	80037e6 <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 800385c:	bf00      	nop
 800385e:	bf00      	nop
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	2000045c 	.word	0x2000045c

0800386c <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8003874:	2305      	movs	r3, #5
 8003876:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8003878:	2300      	movs	r3, #0
 800387a:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f001 f9f1 	bl	8004c64 <null_ptr_check>
 8003882:	4603      	mov	r3, r0
 8003884:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8003886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d133      	bne.n	80038f6 <bme280_init+0x8a>
		while (try_count) {
 800388e:	e028      	b.n	80038e2 <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8003890:	f107 010d 	add.w	r1, r7, #13
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	20d0      	movs	r0, #208	; 0xd0
 800389a:	f000 f832 	bl	8003902 <bme280_get_regs>
 800389e:	4603      	mov	r3, r0
 80038a0:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 80038a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d114      	bne.n	80038d4 <bme280_init+0x68>
 80038aa:	7b7b      	ldrb	r3, [r7, #13]
 80038ac:	2b60      	cmp	r3, #96	; 0x60
 80038ae:	d111      	bne.n	80038d4 <bme280_init+0x68>
				dev->chip_id = chip_id;
 80038b0:	7b7a      	ldrb	r2, [r7, #13]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f976 	bl	8003ba8 <bme280_soft_reset>
 80038bc:	4603      	mov	r3, r0
 80038be:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 80038c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d110      	bne.n	80038ea <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f001 f841 	bl	8004950 <get_calib_data>
 80038ce:	4603      	mov	r3, r0
 80038d0:	73fb      	strb	r3, [r7, #15]
				}
				break;
 80038d2:	e00a      	b.n	80038ea <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	2001      	movs	r0, #1
 80038da:	4798      	blx	r3
			--try_count;
 80038dc:	7bbb      	ldrb	r3, [r7, #14]
 80038de:	3b01      	subs	r3, #1
 80038e0:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 80038e2:	7bbb      	ldrb	r3, [r7, #14]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1d3      	bne.n	8003890 <bme280_init+0x24>
 80038e8:	e000      	b.n	80038ec <bme280_init+0x80>
				break;
 80038ea:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 80038ec:	7bbb      	ldrb	r3, [r7, #14]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 80038f2:	23fe      	movs	r3, #254	; 0xfe
 80038f4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80038f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8003902:	b590      	push	{r4, r7, lr}
 8003904:	b087      	sub	sp, #28
 8003906:	af00      	add	r7, sp, #0
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607b      	str	r3, [r7, #4]
 800390c:	4603      	mov	r3, r0
 800390e:	73fb      	strb	r3, [r7, #15]
 8003910:	4613      	mov	r3, r2
 8003912:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f001 f9a5 	bl	8004c64 <null_ptr_check>
 800391a:	4603      	mov	r3, r0
 800391c:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800391e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d117      	bne.n	8003956 <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	789b      	ldrb	r3, [r3, #2]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d003      	beq.n	8003936 <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 800392e:	7bfb      	ldrb	r3, [r7, #15]
 8003930:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003934:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685c      	ldr	r4, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	7858      	ldrb	r0, [r3, #1]
 800393e:	89bb      	ldrh	r3, [r7, #12]
 8003940:	7bf9      	ldrb	r1, [r7, #15]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	47a0      	blx	r4
 8003946:	4603      	mov	r3, r0
 8003948:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 800394a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 8003952:	23fc      	movs	r3, #252	; 0xfc
 8003954:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003956:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800395a:	4618      	mov	r0, r3
 800395c:	371c      	adds	r7, #28
 800395e:	46bd      	mov	sp, r7
 8003960:	bd90      	pop	{r4, r7, pc}

08003962 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8003962:	b590      	push	{r4, r7, lr}
 8003964:	b08d      	sub	sp, #52	; 0x34
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	603b      	str	r3, [r7, #0]
 800396e:	4613      	mov	r3, r2
 8003970:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	2b0a      	cmp	r3, #10
 8003976:	d901      	bls.n	800397c <bme280_set_regs+0x1a>
		len = 10;
 8003978:	230a      	movs	r3, #10
 800397a:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800397c:	6838      	ldr	r0, [r7, #0]
 800397e:	f001 f971 	bl	8004c64 <null_ptr_check>
 8003982:	4603      	mov	r3, r0
 8003984:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8003988:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800398c:	2b00      	cmp	r3, #0
 800398e:	d154      	bne.n	8003a3a <bme280_set_regs+0xd8>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d051      	beq.n	8003a3a <bme280_set_regs+0xd8>
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d04e      	beq.n	8003a3a <bme280_set_regs+0xd8>
		if (len != 0) {
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d047      	beq.n	8003a32 <bme280_set_regs+0xd0>
			temp_buff[0] = reg_data[0];
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	789b      	ldrb	r3, [r3, #2]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d01a      	beq.n	80039e6 <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80039b0:	2300      	movs	r3, #0
 80039b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039b6:	e011      	b.n	80039dc <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80039b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4413      	add	r3, r2
 80039c0:	781a      	ldrb	r2, [r3, #0]
 80039c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039c6:	68f9      	ldr	r1, [r7, #12]
 80039c8:	440b      	add	r3, r1
 80039ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80039d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039d6:	3301      	adds	r3, #1
 80039d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039dc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80039e0:	79fb      	ldrb	r3, [r7, #7]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d3e8      	bcc.n	80039b8 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 80039e6:	79fb      	ldrb	r3, [r7, #7]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d90b      	bls.n	8003a04 <bme280_set_regs+0xa2>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	f107 0114 	add.w	r1, r7, #20
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 fff0 	bl	80049da <interleave_reg_addr>
				temp_len = len * 2;
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003a02:	e001      	b.n	8003a08 <bme280_set_regs+0xa6>
			} else {
				temp_len = len;
 8003a04:	79fb      	ldrb	r3, [r7, #7]
 8003a06:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	689c      	ldr	r4, [r3, #8]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	7858      	ldrb	r0, [r3, #1]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	7819      	ldrb	r1, [r3, #0]
 8003a14:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003a16:	f107 0214 	add.w	r2, r7, #20
 8003a1a:	47a0      	blx	r4
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 8003a22:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00b      	beq.n	8003a42 <bme280_set_regs+0xe0>
				rslt = BME280_E_COMM_FAIL;
 8003a2a:	23fc      	movs	r3, #252	; 0xfc
 8003a2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8003a30:	e007      	b.n	8003a42 <bme280_set_regs+0xe0>
		} else {
			rslt = BME280_E_INVALID_LEN;
 8003a32:	23fd      	movs	r3, #253	; 0xfd
 8003a34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8003a38:	e003      	b.n	8003a42 <bme280_set_regs+0xe0>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8003a3a:	23ff      	movs	r3, #255	; 0xff
 8003a3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003a40:	e000      	b.n	8003a44 <bme280_set_regs+0xe2>
		if (len != 0) {
 8003a42:	bf00      	nop
	}


	return rslt;
 8003a44:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3734      	adds	r7, #52	; 0x34
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd90      	pop	{r4, r7, pc}

08003a50 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	6039      	str	r1, [r7, #0]
 8003a5a:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003a5c:	6838      	ldr	r0, [r7, #0]
 8003a5e:	f001 f901 	bl	8004c64 <null_ptr_check>
 8003a62:	4603      	mov	r3, r0
 8003a64:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8003a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d13f      	bne.n	8003aee <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8003a6e:	f107 030e 	add.w	r3, r7, #14
 8003a72:	6839      	ldr	r1, [r7, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 f874 	bl	8003b62 <bme280_get_sensor_mode>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8003a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d107      	bne.n	8003a96 <bme280_set_sensor_settings+0x46>
 8003a86:	7bbb      	ldrb	r3, [r7, #14]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d004      	beq.n	8003a96 <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8003a8c:	6838      	ldr	r0, [r7, #0]
 8003a8e:	f000 fb4e 	bl	800412e <put_device_to_sleep>
 8003a92:	4603      	mov	r3, r0
 8003a94:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 8003a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d127      	bne.n	8003aee <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8003a9e:	79fb      	ldrb	r3, [r7, #7]
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	2007      	movs	r0, #7
 8003aa4:	f001 f8c2 	bl	8004c2c <are_settings_changed>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d009      	beq.n	8003ac2 <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003ab4:	79fb      	ldrb	r3, [r7, #7]
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 f98a 	bl	8003dd2 <set_osr_settings>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8003ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d111      	bne.n	8003aee <bme280_set_sensor_settings+0x9e>
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	4619      	mov	r1, r3
 8003ace:	2018      	movs	r0, #24
 8003ad0:	f001 f8ac 	bl	8004c2c <are_settings_changed>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d009      	beq.n	8003aee <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003ae0:	79fb      	ldrb	r3, [r7, #7]
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fa11 	bl	8003f0c <set_filter_standby_settings>
 8003aea:	4603      	mov	r3, r0
 8003aec:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8003aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b084      	sub	sp, #16
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	4603      	mov	r3, r0
 8003b02:	6039      	str	r1, [r7, #0]
 8003b04:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003b06:	6838      	ldr	r0, [r7, #0]
 8003b08:	f001 f8ac 	bl	8004c64 <null_ptr_check>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8003b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d11e      	bne.n	8003b56 <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8003b18:	f107 030e 	add.w	r3, r7, #14
 8003b1c:	6839      	ldr	r1, [r7, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 f81f 	bl	8003b62 <bme280_get_sensor_mode>
 8003b24:	4603      	mov	r3, r0
 8003b26:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8003b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d107      	bne.n	8003b40 <bme280_set_sensor_mode+0x46>
 8003b30:	7bbb      	ldrb	r3, [r7, #14]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d004      	beq.n	8003b40 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 8003b36:	6838      	ldr	r0, [r7, #0]
 8003b38:	f000 faf9 	bl	800412e <put_device_to_sleep>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8003b40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d106      	bne.n	8003b56 <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 8003b48:	79fb      	ldrb	r3, [r7, #7]
 8003b4a:	6839      	ldr	r1, [r7, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 fabb 	bl	80040c8 <write_power_mode>
 8003b52:	4603      	mov	r3, r0
 8003b54:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8003b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003b6c:	6838      	ldr	r0, [r7, #0]
 8003b6e:	f001 f879 	bl	8004c64 <null_ptr_check>
 8003b72:	4603      	mov	r3, r0
 8003b74:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8003b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10e      	bne.n	8003b9c <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2201      	movs	r2, #1
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	20f4      	movs	r0, #244	; 0xf4
 8003b86:	f7ff febc 	bl	8003902 <bme280_get_regs>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8003b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8003bb0:	23e0      	movs	r3, #224	; 0xe0
 8003bb2:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8003bb4:	23b6      	movs	r3, #182	; 0xb6
 8003bb6:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f001 f853 	bl	8004c64 <null_ptr_check>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8003bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10d      	bne.n	8003be6 <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003bca:	f107 010d 	add.w	r1, r7, #13
 8003bce:	f107 000e 	add.w	r0, r7, #14
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f7ff fec4 	bl	8003962 <bme280_set_regs>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	2002      	movs	r0, #2
 8003be4:	4798      	blx	r3
	}

	return rslt;
 8003be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b08a      	sub	sp, #40	; 0x28
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	607a      	str	r2, [r7, #4]
 8003bfe:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8003c00:	2300      	movs	r3, #0
 8003c02:	61fb      	str	r3, [r7, #28]
 8003c04:	2300      	movs	r3, #0
 8003c06:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 8003c08:	f107 0310 	add.w	r3, r7, #16
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	605a      	str	r2, [r3, #4]
 8003c12:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f001 f825 	bl	8004c64 <null_ptr_check>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 8003c20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d124      	bne.n	8003c72 <bme280_get_sensor_data+0x80>
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d021      	beq.n	8003c72 <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8003c2e:	f107 011c 	add.w	r1, r7, #28
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2208      	movs	r2, #8
 8003c36:	20f7      	movs	r0, #247	; 0xf7
 8003c38:	f7ff fe63 	bl	8003902 <bme280_get_regs>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 8003c42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d116      	bne.n	8003c78 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 8003c4a:	f107 0210 	add.w	r2, r7, #16
 8003c4e:	f107 031c 	add.w	r3, r7, #28
 8003c52:	4611      	mov	r1, r2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 f815 	bl	8003c84 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3310      	adds	r3, #16
 8003c5e:	f107 0110 	add.w	r1, r7, #16
 8003c62:	7bf8      	ldrb	r0, [r7, #15]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	f000 f853 	bl	8003d10 <bme280_compensate_data>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8003c70:	e002      	b.n	8003c78 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8003c72:	23ff      	movs	r3, #255	; 0xff
 8003c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 8003c78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3728      	adds	r7, #40	; 0x28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	031b      	lsls	r3, r3, #12
 8003c94:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3302      	adds	r3, #2
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	091b      	lsrs	r3, r3, #4
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3303      	adds	r3, #3
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	031b      	lsls	r3, r3, #12
 8003cc2:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3305      	adds	r3, #5
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	091b      	lsrs	r3, r3, #4
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3306      	adds	r3, #6
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3307      	adds	r3, #7
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	609a      	str	r2, [r3, #8]
}
 8003d04:	bf00      	nop
 8003d06:	371c      	adds	r7, #28
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	607a      	str	r2, [r7, #4]
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d04b      	beq.n	8003dc2 <bme280_compensate_data+0xb2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d048      	beq.n	8003dc2 <bme280_compensate_data+0xb2>
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d045      	beq.n	8003dc2 <bme280_compensate_data+0xb2>
		/* Initialize to zero */
		comp_data->temperature = 0;
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	e9c1 2302 	strd	r2, r3, [r1, #8]
		comp_data->pressure = 0;
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	e9c1 2300 	strd	r2, r3, [r1]
		comp_data->humidity = 0;
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <bme280_compensate_data+0x70>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8003d6a:	6839      	ldr	r1, [r7, #0]
 8003d6c:	68b8      	ldr	r0, [r7, #8]
 8003d6e:	f000 fa2b 	bl	80041c8 <compensate_temperature>
 8003d72:	eeb0 7a40 	vmov.f32	s14, s0
 8003d76:	eef0 7a60 	vmov.f32	s15, s1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	ed83 7b02 	vstr	d7, [r3, #8]
		}
		if (sensor_comp & BME280_PRESS) {
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <bme280_compensate_data+0x90>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8003d8a:	6839      	ldr	r1, [r7, #0]
 8003d8c:	68b8      	ldr	r0, [r7, #8]
 8003d8e:	f000 faef 	bl	8004370 <compensate_pressure>
 8003d92:	eeb0 7a40 	vmov.f32	s14, s0
 8003d96:	eef0 7a60 	vmov.f32	s15, s1
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	ed83 7b00 	vstr	d7, [r3]
		}
		if (sensor_comp & BME280_HUM) {
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <bme280_compensate_data+0xb6>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8003daa:	6839      	ldr	r1, [r7, #0]
 8003dac:	68b8      	ldr	r0, [r7, #8]
 8003dae:	f000 fcaf 	bl	8004710 <compensate_humidity>
 8003db2:	eeb0 7a40 	vmov.f32	s14, s0
 8003db6:	eef0 7a60 	vmov.f32	s15, s1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	ed83 7b04 	vstr	d7, [r3, #16]
		if (sensor_comp & BME280_HUM) {
 8003dc0:	e001      	b.n	8003dc6 <bme280_compensate_data+0xb6>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8003dc2:	23ff      	movs	r3, #255	; 0xff
 8003dc4:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003dc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b086      	sub	sp, #24
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	4603      	mov	r3, r0
 8003dda:	60b9      	str	r1, [r7, #8]
 8003ddc:	607a      	str	r2, [r7, #4]
 8003dde:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8003de0:	2301      	movs	r3, #1
 8003de2:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d005      	beq.n	8003dfa <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	68b8      	ldr	r0, [r7, #8]
 8003df2:	f000 f815 	bl	8003e20 <set_osr_humidity_settings>
 8003df6:	4603      	mov	r3, r0
 8003df8:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d007      	beq.n	8003e14 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	68b9      	ldr	r1, [r7, #8]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 f842 	bl	8003e94 <set_osr_press_temp_settings>
 8003e10:	4603      	mov	r3, r0
 8003e12:	75fb      	strb	r3, [r7, #23]

	return rslt;
 8003e14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8003e2a:	23f2      	movs	r3, #242	; 0xf2
 8003e2c:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	789b      	ldrb	r3, [r3, #2]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8003e3a:	f107 010e 	add.w	r1, r7, #14
 8003e3e:	f107 000c 	add.w	r0, r7, #12
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f7ff fd8c 	bl	8003962 <bme280_set_regs>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 8003e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d118      	bne.n	8003e88 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8003e56:	23f4      	movs	r3, #244	; 0xf4
 8003e58:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8003e5a:	7b38      	ldrb	r0, [r7, #12]
 8003e5c:	f107 010d 	add.w	r1, r7, #13
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f7ff fd4d 	bl	8003902 <bme280_get_regs>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8003e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d109      	bne.n	8003e88 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8003e74:	f107 010d 	add.w	r1, r7, #13
 8003e78:	f107 000c 	add.w	r0, r7, #12
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f7ff fd6f 	bl	8003962 <bme280_set_regs>
 8003e84:	4603      	mov	r3, r0
 8003e86:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8003e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
 8003ea0:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8003ea2:	23f4      	movs	r3, #244	; 0xf4
 8003ea4:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8003ea6:	7db8      	ldrb	r0, [r7, #22]
 8003ea8:	f107 0115 	add.w	r1, r7, #21
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f7ff fd27 	bl	8003902 <bme280_get_regs>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8003eb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d11f      	bne.n	8003f00 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d005      	beq.n	8003ed6 <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 8003eca:	f107 0315 	add.w	r3, r7, #21
 8003ece:	68b9      	ldr	r1, [r7, #8]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 f88e 	bl	8003ff2 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d005      	beq.n	8003eec <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 8003ee0:	f107 0315 	add.w	r3, r7, #21
 8003ee4:	68b9      	ldr	r1, [r7, #8]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 f8a0 	bl	800402c <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8003eec:	f107 0115 	add.w	r1, r7, #21
 8003ef0:	f107 0016 	add.w	r0, r7, #22
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f7ff fd33 	bl	8003962 <bme280_set_regs>
 8003efc:	4603      	mov	r3, r0
 8003efe:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003f00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3718      	adds	r7, #24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	4603      	mov	r3, r0
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8003f1a:	23f5      	movs	r3, #245	; 0xf5
 8003f1c:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8003f1e:	7db8      	ldrb	r0, [r7, #22]
 8003f20:	f107 0115 	add.w	r1, r7, #21
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f7ff fceb 	bl	8003902 <bme280_get_regs>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8003f30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d11f      	bne.n	8003f78 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d005      	beq.n	8003f4e <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 8003f42:	f107 0315 	add.w	r3, r7, #21
 8003f46:	68b9      	ldr	r1, [r7, #8]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 f81b 	bl	8003f84 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d005      	beq.n	8003f64 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 8003f58:	f107 0315 	add.w	r3, r7, #21
 8003f5c:	68b9      	ldr	r1, [r7, #8]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 f82d 	bl	8003fbe <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8003f64:	f107 0115 	add.w	r1, r7, #21
 8003f68:	f107 0016 	add.w	r0, r7, #22
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f7ff fcf7 	bl	8003962 <bme280_set_regs>
 8003f74:	4603      	mov	r3, r0
 8003f76:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003f78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	b25b      	sxtb	r3, r3
 8003f94:	f023 031c 	bic.w	r3, r3, #28
 8003f98:	b25a      	sxtb	r2, r3
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	78db      	ldrb	r3, [r3, #3]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	b25b      	sxtb	r3, r3
 8003fa2:	f003 031c 	and.w	r3, r3, #28
 8003fa6:	b25b      	sxtb	r3, r3
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	b25b      	sxtb	r3, r3
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	701a      	strb	r2, [r3, #0]
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	b25b      	sxtb	r3, r3
 8003fce:	f003 031f 	and.w	r3, r3, #31
 8003fd2:	b25a      	sxtb	r2, r3
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	791b      	ldrb	r3, [r3, #4]
 8003fd8:	015b      	lsls	r3, r3, #5
 8003fda:	b25b      	sxtb	r3, r3
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	b25b      	sxtb	r3, r3
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	701a      	strb	r2, [r3, #0]
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	b25b      	sxtb	r3, r3
 8004002:	f023 031c 	bic.w	r3, r3, #28
 8004006:	b25a      	sxtb	r2, r3
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	b25b      	sxtb	r3, r3
 8004010:	f003 031c 	and.w	r3, r3, #28
 8004014:	b25b      	sxtb	r3, r3
 8004016:	4313      	orrs	r3, r2
 8004018:	b25b      	sxtb	r3, r3
 800401a:	b2da      	uxtb	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	701a      	strb	r2, [r3, #0]
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	b25b      	sxtb	r3, r3
 800403c:	f003 031f 	and.w	r3, r3, #31
 8004040:	b25a      	sxtb	r2, r3
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	785b      	ldrb	r3, [r3, #1]
 8004046:	015b      	lsls	r3, r3, #5
 8004048:	b25b      	sxtb	r3, r3
 800404a:	4313      	orrs	r3, r2
 800404c:	b25b      	sxtb	r3, r3
 800404e:	b2da      	uxtb	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	701a      	strb	r2, [r3, #0]
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	b2da      	uxtb	r2, r3
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3302      	adds	r3, #2
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	109b      	asrs	r3, r3, #2
 8004080:	b2db      	uxtb	r3, r3
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	b2da      	uxtb	r2, r3
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3302      	adds	r3, #2
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	b2da      	uxtb	r2, r3
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3303      	adds	r3, #3
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	109b      	asrs	r3, r3, #2
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3303      	adds	r3, #3
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	095b      	lsrs	r3, r3, #5
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	711a      	strb	r2, [r3, #4]
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	4603      	mov	r3, r0
 80040d0:	6039      	str	r1, [r7, #0]
 80040d2:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80040d4:	23f4      	movs	r3, #244	; 0xf4
 80040d6:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80040d8:	7bb8      	ldrb	r0, [r7, #14]
 80040da:	f107 010d 	add.w	r1, r7, #13
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f7ff fc0e 	bl	8003902 <bme280_get_regs>
 80040e6:	4603      	mov	r3, r0
 80040e8:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 80040ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d117      	bne.n	8004122 <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80040f2:	7b7b      	ldrb	r3, [r7, #13]
 80040f4:	b25b      	sxtb	r3, r3
 80040f6:	f023 0303 	bic.w	r3, r3, #3
 80040fa:	b25a      	sxtb	r2, r3
 80040fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004100:	f003 0303 	and.w	r3, r3, #3
 8004104:	b25b      	sxtb	r3, r3
 8004106:	4313      	orrs	r3, r2
 8004108:	b25b      	sxtb	r3, r3
 800410a:	b2db      	uxtb	r3, r3
 800410c:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 800410e:	f107 010d 	add.w	r1, r7, #13
 8004112:	f107 000e 	add.w	r0, r7, #14
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2201      	movs	r2, #1
 800411a:	f7ff fc22 	bl	8003962 <bme280_set_regs>
 800411e:	4603      	mov	r3, r0
 8004120:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8004122:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b086      	sub	sp, #24
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8004136:	f107 0110 	add.w	r1, r7, #16
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2204      	movs	r2, #4
 800413e:	20f2      	movs	r0, #242	; 0xf2
 8004140:	f7ff fbdf 	bl	8003902 <bme280_get_regs>
 8004144:	4603      	mov	r3, r0
 8004146:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 8004148:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d118      	bne.n	8004182 <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 8004150:	f107 0208 	add.w	r2, r7, #8
 8004154:	f107 0310 	add.w	r3, r7, #16
 8004158:	4611      	mov	r1, r2
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff ff80 	bl	8004060 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7ff fd21 	bl	8003ba8 <bme280_soft_reset>
 8004166:	4603      	mov	r3, r0
 8004168:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 800416a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d107      	bne.n	8004182 <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 8004172:	f107 0308 	add.w	r3, r7, #8
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	4618      	mov	r0, r3
 800417a:	f000 f808 	bl	800418e <reload_device_settings>
 800417e:	4603      	mov	r3, r0
 8004180:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8004182:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b084      	sub	sp, #16
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	201f      	movs	r0, #31
 800419e:	f7ff fe18 	bl	8003dd2 <set_osr_settings>
 80041a2:	4603      	mov	r3, r0
 80041a4:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 80041a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d106      	bne.n	80041bc <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	201f      	movs	r0, #31
 80041b4:	f7ff feaa 	bl	8003f0c <set_filter_standby_settings>
 80041b8:	4603      	mov	r3, r0
 80041ba:	73fb      	strb	r3, [r7, #15]

	return rslt;
 80041bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 80041c8:	b5b0      	push	{r4, r5, r7, lr}
 80041ca:	b08c      	sub	sp, #48	; 0x30
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double temperature;
	double temperature_min = -40;
 80041d2:	f04f 0200 	mov.w	r2, #0
 80041d6:	4b5f      	ldr	r3, [pc, #380]	; (8004354 <compensate_temperature+0x18c>)
 80041d8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temperature_max = 85;
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	4b5d      	ldr	r3, [pc, #372]	; (8004358 <compensate_temperature+0x190>)
 80041e2:	e9c7 2306 	strd	r2, r3, [r7, #24]

	var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fc f92e 	bl	800044c <__aeabi_ui2d>
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	4b59      	ldr	r3, [pc, #356]	; (800435c <compensate_temperature+0x194>)
 80041f6:	f7fc facd 	bl	8000794 <__aeabi_ddiv>
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	4614      	mov	r4, r2
 8004200:	461d      	mov	r5, r3
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f7fc f920 	bl	800044c <__aeabi_ui2d>
 800420c:	f04f 0200 	mov.w	r2, #0
 8004210:	4b53      	ldr	r3, [pc, #332]	; (8004360 <compensate_temperature+0x198>)
 8004212:	f7fc fabf 	bl	8000794 <__aeabi_ddiv>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4620      	mov	r0, r4
 800421c:	4629      	mov	r1, r5
 800421e:	f7fb ffd7 	bl	80001d0 <__aeabi_dsub>
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var1 = var1 * ((double)calib_data->dig_T2);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004230:	4618      	mov	r0, r3
 8004232:	f7fc f91b 	bl	800046c <__aeabi_i2d>
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800423e:	f7fc f97f 	bl	8000540 <__aeabi_dmul>
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	4618      	mov	r0, r3
 8004250:	f7fc f8fc 	bl	800044c <__aeabi_ui2d>
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800425c:	f7fc fa9a 	bl	8000794 <__aeabi_ddiv>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4614      	mov	r4, r2
 8004266:	461d      	mov	r5, r3
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f7fc f8ed 	bl	800044c <__aeabi_ui2d>
 8004272:	f04f 0200 	mov.w	r2, #0
 8004276:	4b3b      	ldr	r3, [pc, #236]	; (8004364 <compensate_temperature+0x19c>)
 8004278:	f7fc fa8c 	bl	8000794 <__aeabi_ddiv>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	4620      	mov	r0, r4
 8004282:	4629      	mov	r1, r5
 8004284:	f7fb ffa4 	bl	80001d0 <__aeabi_dsub>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 8004290:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004294:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004298:	f7fc f952 	bl	8000540 <__aeabi_dmul>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4614      	mov	r4, r2
 80042a2:	461d      	mov	r5, r3
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fc f8de 	bl	800046c <__aeabi_i2d>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4620      	mov	r0, r4
 80042b6:	4629      	mov	r1, r5
 80042b8:	f7fc f942 	bl	8000540 <__aeabi_dmul>
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	calib_data->t_fine = (int32_t)(var1 + var2);
 80042c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80042cc:	f7fb ff82 	bl	80001d4 <__adddf3>
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	4610      	mov	r0, r2
 80042d6:	4619      	mov	r1, r3
 80042d8:	f7fc fbe2 	bl	8000aa0 <__aeabi_d2iz>
 80042dc:	4602      	mov	r2, r0
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (var1 + var2) / 5120.0;
 80042e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80042ea:	f7fb ff73 	bl	80001d4 <__adddf3>
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	4610      	mov	r0, r2
 80042f4:	4619      	mov	r1, r3
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	4b1b      	ldr	r3, [pc, #108]	; (8004368 <compensate_temperature+0x1a0>)
 80042fc:	f7fc fa4a 	bl	8000794 <__aeabi_ddiv>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (temperature < temperature_min)
 8004308:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800430c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004310:	f7fc fb88 	bl	8000a24 <__aeabi_dcmplt>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d004      	beq.n	8004324 <compensate_temperature+0x15c>
		temperature = temperature_min;
 800431a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800431e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004322:	e00c      	b.n	800433e <compensate_temperature+0x176>
	else if (temperature > temperature_max)
 8004324:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004328:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800432c:	f7fc fb98 	bl	8000a60 <__aeabi_dcmpgt>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <compensate_temperature+0x176>
		temperature = temperature_max;
 8004336:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800433a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	return temperature;
 800433e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004342:	ec43 2b17 	vmov	d7, r2, r3
}
 8004346:	eeb0 0a47 	vmov.f32	s0, s14
 800434a:	eef0 0a67 	vmov.f32	s1, s15
 800434e:	3730      	adds	r7, #48	; 0x30
 8004350:	46bd      	mov	sp, r7
 8004352:	bdb0      	pop	{r4, r5, r7, pc}
 8004354:	c0440000 	.word	0xc0440000
 8004358:	40554000 	.word	0x40554000
 800435c:	40d00000 	.word	0x40d00000
 8004360:	40900000 	.word	0x40900000
 8004364:	40c00000 	.word	0x40c00000
 8004368:	40b40000 	.word	0x40b40000
 800436c:	00000000 	.word	0x00000000

08004370 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8004370:	b5b0      	push	{r4, r5, r7, lr}
 8004372:	b08e      	sub	sp, #56	; 0x38
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double var3;
	double pressure;
	double pressure_min = 30000.0;
 800437a:	a3d9      	add	r3, pc, #868	; (adr r3, 80046e0 <compensate_pressure+0x370>)
 800437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004380:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double pressure_max = 110000.0;
 8004384:	a3d8      	add	r3, pc, #864	; (adr r3, 80046e8 <compensate_pressure+0x378>)
 8004386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438a:	e9c7 2308 	strd	r2, r3, [r7, #32]

	var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	4618      	mov	r0, r3
 8004394:	f7fc f86a 	bl	800046c <__aeabi_i2d>
 8004398:	f04f 0200 	mov.w	r2, #0
 800439c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043a0:	f7fc f9f8 	bl	8000794 <__aeabi_ddiv>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4610      	mov	r0, r2
 80043aa:	4619      	mov	r1, r3
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	4bc1      	ldr	r3, [pc, #772]	; (80046b8 <compensate_pressure+0x348>)
 80043b2:	f7fb ff0d 	bl	80001d0 <__aeabi_dsub>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 80043be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80043c6:	f7fc f8bb 	bl	8000540 <__aeabi_dmul>
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	4614      	mov	r4, r2
 80043d0:	461d      	mov	r5, r3
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7fc f847 	bl	800046c <__aeabi_i2d>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4620      	mov	r0, r4
 80043e4:	4629      	mov	r1, r5
 80043e6:	f7fc f8ab 	bl	8000540 <__aeabi_dmul>
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	4610      	mov	r0, r2
 80043f0:	4619      	mov	r1, r3
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	4bb1      	ldr	r3, [pc, #708]	; (80046bc <compensate_pressure+0x34c>)
 80043f8:	f7fc f9cc 	bl	8000794 <__aeabi_ddiv>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800440a:	4618      	mov	r0, r3
 800440c:	f7fc f82e 	bl	800046c <__aeabi_i2d>
 8004410:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004414:	f7fc f894 	bl	8000540 <__aeabi_dmul>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4610      	mov	r0, r2
 800441e:	4619      	mov	r1, r3
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	f7fb fed6 	bl	80001d4 <__adddf3>
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004430:	f7fb fed0 	bl	80001d4 <__adddf3>
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	4b9f      	ldr	r3, [pc, #636]	; (80046c0 <compensate_pressure+0x350>)
 8004442:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004446:	f7fc f9a5 	bl	8000794 <__aeabi_ddiv>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4614      	mov	r4, r2
 8004450:	461d      	mov	r5, r3
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004458:	4618      	mov	r0, r3
 800445a:	f7fc f807 	bl	800046c <__aeabi_i2d>
 800445e:	f04f 0200 	mov.w	r2, #0
 8004462:	4b98      	ldr	r3, [pc, #608]	; (80046c4 <compensate_pressure+0x354>)
 8004464:	f7fc f86c 	bl	8000540 <__aeabi_dmul>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	4620      	mov	r0, r4
 800446e:	4629      	mov	r1, r5
 8004470:	f7fb feb0 	bl	80001d4 <__adddf3>
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004482:	4618      	mov	r0, r3
 8004484:	f7fb fff2 	bl	800046c <__aeabi_i2d>
 8004488:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800448c:	f7fc f858 	bl	8000540 <__aeabi_dmul>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4610      	mov	r0, r2
 8004496:	4619      	mov	r1, r3
 8004498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800449c:	f7fc f850 	bl	8000540 <__aeabi_dmul>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4610      	mov	r0, r2
 80044a6:	4619      	mov	r1, r3
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	4b86      	ldr	r3, [pc, #536]	; (80046c8 <compensate_pressure+0x358>)
 80044ae:	f7fc f971 	bl	8000794 <__aeabi_ddiv>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7fb ffd3 	bl	800046c <__aeabi_i2d>
 80044c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044ca:	f7fc f839 	bl	8000540 <__aeabi_dmul>
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	4610      	mov	r0, r2
 80044d4:	4619      	mov	r1, r3
 80044d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044da:	f7fb fe7b 	bl	80001d4 <__adddf3>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4610      	mov	r0, r2
 80044e4:	4619      	mov	r1, r3
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	4b77      	ldr	r3, [pc, #476]	; (80046c8 <compensate_pressure+0x358>)
 80044ec:	f7fc f952 	bl	8000794 <__aeabi_ddiv>
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 80044f8:	f04f 0200 	mov.w	r2, #0
 80044fc:	4b6f      	ldr	r3, [pc, #444]	; (80046bc <compensate_pressure+0x34c>)
 80044fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004502:	f7fc f947 	bl	8000794 <__aeabi_ddiv>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	4610      	mov	r0, r2
 800450c:	4619      	mov	r1, r3
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	4b6e      	ldr	r3, [pc, #440]	; (80046cc <compensate_pressure+0x35c>)
 8004514:	f7fb fe5e 	bl	80001d4 <__adddf3>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4614      	mov	r4, r2
 800451e:	461d      	mov	r5, r3
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	88db      	ldrh	r3, [r3, #6]
 8004524:	4618      	mov	r0, r3
 8004526:	f7fb ff91 	bl	800044c <__aeabi_ui2d>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4620      	mov	r0, r4
 8004530:	4629      	mov	r1, r5
 8004532:	f7fc f805 	bl	8000540 <__aeabi_dmul>
 8004536:	4602      	mov	r2, r0
 8004538:	460b      	mov	r3, r1
 800453a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	/* avoid exception caused by division by zero */
	if (var1) {
 800453e:	f04f 0200 	mov.w	r2, #0
 8004542:	f04f 0300 	mov.w	r3, #0
 8004546:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800454a:	f7fc fa61 	bl	8000a10 <__aeabi_dcmpeq>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	f040 80cd 	bne.w	80046f0 <compensate_pressure+0x380>
		pressure = 1048576.0 - (double) uncomp_data->pressure;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f7fb ff76 	bl	800044c <__aeabi_ui2d>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	f04f 0000 	mov.w	r0, #0
 8004568:	4959      	ldr	r1, [pc, #356]	; (80046d0 <compensate_pressure+0x360>)
 800456a:	f7fb fe31 	bl	80001d0 <__aeabi_dsub>
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	4b56      	ldr	r3, [pc, #344]	; (80046d4 <compensate_pressure+0x364>)
 800457c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004580:	f7fc f908 	bl	8000794 <__aeabi_ddiv>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800458c:	f7fb fe20 	bl	80001d0 <__aeabi_dsub>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	4610      	mov	r0, r2
 8004596:	4619      	mov	r1, r3
 8004598:	a345      	add	r3, pc, #276	; (adr r3, 80046b0 <compensate_pressure+0x340>)
 800459a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459e:	f7fb ffcf 	bl	8000540 <__aeabi_dmul>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4610      	mov	r0, r2
 80045a8:	4619      	mov	r1, r3
 80045aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045ae:	f7fc f8f1 	bl	8000794 <__aeabi_ddiv>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fb ff53 	bl	800046c <__aeabi_i2d>
 80045c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045ca:	f7fb ffb9 	bl	8000540 <__aeabi_dmul>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4610      	mov	r0, r2
 80045d4:	4619      	mov	r1, r3
 80045d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045da:	f7fb ffb1 	bl	8000540 <__aeabi_dmul>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	4610      	mov	r0, r2
 80045e4:	4619      	mov	r1, r3
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	4b3b      	ldr	r3, [pc, #236]	; (80046d8 <compensate_pressure+0x368>)
 80045ec:	f7fc f8d2 	bl	8000794 <__aeabi_ddiv>
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fb ff34 	bl	800046c <__aeabi_i2d>
 8004604:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004608:	f7fb ff9a 	bl	8000540 <__aeabi_dmul>
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	4610      	mov	r0, r2
 8004612:	4619      	mov	r1, r3
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	4b28      	ldr	r3, [pc, #160]	; (80046bc <compensate_pressure+0x34c>)
 800461a:	f7fc f8bb 	bl	8000794 <__aeabi_ddiv>
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	e9c7 2304 	strd	r2, r3, [r7, #16]
		pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0;
 8004626:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800462a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800462e:	f7fb fdd1 	bl	80001d4 <__adddf3>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	4614      	mov	r4, r2
 8004638:	461d      	mov	r5, r3
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004640:	4618      	mov	r0, r3
 8004642:	f7fb ff13 	bl	800046c <__aeabi_i2d>
 8004646:	4602      	mov	r2, r0
 8004648:	460b      	mov	r3, r1
 800464a:	4620      	mov	r0, r4
 800464c:	4629      	mov	r1, r5
 800464e:	f7fb fdc1 	bl	80001d4 <__adddf3>
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	4610      	mov	r0, r2
 8004658:	4619      	mov	r1, r3
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	4b1f      	ldr	r3, [pc, #124]	; (80046dc <compensate_pressure+0x36c>)
 8004660:	f7fc f898 	bl	8000794 <__aeabi_ddiv>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800466c:	f7fb fdb2 	bl	80001d4 <__adddf3>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		if (pressure < pressure_min)
 8004678:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800467c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004680:	f7fc f9d0 	bl	8000a24 <__aeabi_dcmplt>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d004      	beq.n	8004694 <compensate_pressure+0x324>
			pressure = pressure_min;
 800468a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800468e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004692:	e031      	b.n	80046f8 <compensate_pressure+0x388>
		else if (pressure > pressure_max)
 8004694:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004698:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800469c:	f7fc f9e0 	bl	8000a60 <__aeabi_dcmpgt>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d028      	beq.n	80046f8 <compensate_pressure+0x388>
			pressure = pressure_max;
 80046a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046aa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80046ae:	e023      	b.n	80046f8 <compensate_pressure+0x388>
 80046b0:	00000000 	.word	0x00000000
 80046b4:	40b86a00 	.word	0x40b86a00
 80046b8:	40ef4000 	.word	0x40ef4000
 80046bc:	40e00000 	.word	0x40e00000
 80046c0:	40100000 	.word	0x40100000
 80046c4:	40f00000 	.word	0x40f00000
 80046c8:	41200000 	.word	0x41200000
 80046cc:	3ff00000 	.word	0x3ff00000
 80046d0:	41300000 	.word	0x41300000
 80046d4:	40b00000 	.word	0x40b00000
 80046d8:	41e00000 	.word	0x41e00000
 80046dc:	40300000 	.word	0x40300000
 80046e0:	00000000 	.word	0x00000000
 80046e4:	40dd4c00 	.word	0x40dd4c00
 80046e8:	00000000 	.word	0x00000000
 80046ec:	40fadb00 	.word	0x40fadb00
	} else { /* Invalid case */
		pressure = pressure_min;
 80046f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046f4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	return pressure;
 80046f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80046fc:	ec43 2b17 	vmov	d7, r2, r3
}
 8004700:	eeb0 0a47 	vmov.f32	s0, s14
 8004704:	eef0 0a67 	vmov.f32	s1, s15
 8004708:	3738      	adds	r7, #56	; 0x38
 800470a:	46bd      	mov	sp, r7
 800470c:	bdb0      	pop	{r4, r5, r7, pc}
 800470e:	bf00      	nop

08004710 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8004710:	b5b0      	push	{r4, r5, r7, lr}
 8004712:	b094      	sub	sp, #80	; 0x50
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
	double humidity;
	double humidity_min = 0.0;
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double humidity_max = 100.0;
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	4b81      	ldr	r3, [pc, #516]	; (8004930 <compensate_humidity+0x220>)
 800472c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double var3;
	double var4;
	double var5;
	double var6;

	var1 = ((double)calib_data->t_fine) - 76800.0;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	4618      	mov	r0, r3
 8004736:	f7fb fe99 	bl	800046c <__aeabi_i2d>
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	4b7d      	ldr	r3, [pc, #500]	; (8004934 <compensate_humidity+0x224>)
 8004740:	f7fb fd46 	bl	80001d0 <__aeabi_dsub>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8004752:	4618      	mov	r0, r3
 8004754:	f7fb fe8a 	bl	800046c <__aeabi_i2d>
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	4b76      	ldr	r3, [pc, #472]	; (8004938 <compensate_humidity+0x228>)
 800475e:	f7fb feef 	bl	8000540 <__aeabi_dmul>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	4614      	mov	r4, r2
 8004768:	461d      	mov	r5, r3
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004770:	4618      	mov	r0, r3
 8004772:	f7fb fe7b 	bl	800046c <__aeabi_i2d>
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	4b70      	ldr	r3, [pc, #448]	; (800493c <compensate_humidity+0x22c>)
 800477c:	f7fc f80a 	bl	8000794 <__aeabi_ddiv>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4610      	mov	r0, r2
 8004786:	4619      	mov	r1, r3
 8004788:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800478c:	f7fb fed8 	bl	8000540 <__aeabi_dmul>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4620      	mov	r0, r4
 8004796:	4629      	mov	r1, r5
 8004798:	f7fb fd1c 	bl	80001d4 <__adddf3>
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = uncomp_data->humidity - var2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fb fe4f 	bl	800044c <__aeabi_ui2d>
 80047ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047b2:	f7fb fd0d 	bl	80001d0 <__aeabi_dsub>
 80047b6:	4602      	mov	r2, r0
 80047b8:	460b      	mov	r3, r1
 80047ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var4 = ((double)calib_data->dig_H2) / 65536.0;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fb fe51 	bl	800046c <__aeabi_i2d>
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	4b5c      	ldr	r3, [pc, #368]	; (8004940 <compensate_humidity+0x230>)
 80047d0:	f7fb ffe0 	bl	8000794 <__aeabi_ddiv>
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	7f1b      	ldrb	r3, [r3, #28]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7fb fe33 	bl	800044c <__aeabi_ui2d>
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	4b56      	ldr	r3, [pc, #344]	; (8004944 <compensate_humidity+0x234>)
 80047ec:	f7fb ffd2 	bl	8000794 <__aeabi_ddiv>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4610      	mov	r0, r2
 80047f6:	4619      	mov	r1, r3
 80047f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80047fc:	f7fb fea0 	bl	8000540 <__aeabi_dmul>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4610      	mov	r0, r2
 8004806:	4619      	mov	r1, r3
 8004808:	f04f 0200 	mov.w	r2, #0
 800480c:	4b4e      	ldr	r3, [pc, #312]	; (8004948 <compensate_humidity+0x238>)
 800480e:	f7fb fce1 	bl	80001d4 <__adddf3>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8004820:	4618      	mov	r0, r3
 8004822:	f7fb fe23 	bl	800046c <__aeabi_i2d>
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	4b46      	ldr	r3, [pc, #280]	; (8004944 <compensate_humidity+0x234>)
 800482c:	f7fb ffb2 	bl	8000794 <__aeabi_ddiv>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4610      	mov	r0, r2
 8004836:	4619      	mov	r1, r3
 8004838:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800483c:	f7fb fe80 	bl	8000540 <__aeabi_dmul>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4610      	mov	r0, r2
 8004846:	4619      	mov	r1, r3
 8004848:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800484c:	f7fb fe78 	bl	8000540 <__aeabi_dmul>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4610      	mov	r0, r2
 8004856:	4619      	mov	r1, r3
 8004858:	f04f 0200 	mov.w	r2, #0
 800485c:	4b3a      	ldr	r3, [pc, #232]	; (8004948 <compensate_humidity+0x238>)
 800485e:	f7fb fcb9 	bl	80001d4 <__adddf3>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var6 = var3 * var4 * (var5 * var6);
 800486a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800486e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004872:	f7fb fe65 	bl	8000540 <__aeabi_dmul>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	4614      	mov	r4, r2
 800487c:	461d      	mov	r5, r3
 800487e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004882:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004886:	f7fb fe5b 	bl	8000540 <__aeabi_dmul>
 800488a:	4602      	mov	r2, r0
 800488c:	460b      	mov	r3, r1
 800488e:	4620      	mov	r0, r4
 8004890:	4629      	mov	r1, r5
 8004892:	f7fb fe55 	bl	8000540 <__aeabi_dmul>
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	7e1b      	ldrb	r3, [r3, #24]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fb fdd2 	bl	800044c <__aeabi_ui2d>
 80048a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048ac:	f7fb fe48 	bl	8000540 <__aeabi_dmul>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4610      	mov	r0, r2
 80048b6:	4619      	mov	r1, r3
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	4b23      	ldr	r3, [pc, #140]	; (800494c <compensate_humidity+0x23c>)
 80048be:	f7fb ff69 	bl	8000794 <__aeabi_ddiv>
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	f04f 0000 	mov.w	r0, #0
 80048ca:	491f      	ldr	r1, [pc, #124]	; (8004948 <compensate_humidity+0x238>)
 80048cc:	f7fb fc80 	bl	80001d0 <__aeabi_dsub>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048d8:	f7fb fe32 	bl	8000540 <__aeabi_dmul>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if (humidity > humidity_max)
 80048e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048e8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80048ec:	f7fc f8b8 	bl	8000a60 <__aeabi_dcmpgt>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d004      	beq.n	8004900 <compensate_humidity+0x1f0>
		humidity = humidity_max;
 80048f6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048fa:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80048fe:	e00c      	b.n	800491a <compensate_humidity+0x20a>
	else if (humidity < humidity_min)
 8004900:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004904:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004908:	f7fc f88c 	bl	8000a24 <__aeabi_dcmplt>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <compensate_humidity+0x20a>
		humidity = humidity_min;
 8004912:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004916:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	return humidity;
 800491a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800491e:	ec43 2b17 	vmov	d7, r2, r3
}
 8004922:	eeb0 0a47 	vmov.f32	s0, s14
 8004926:	eef0 0a67 	vmov.f32	s1, s15
 800492a:	3750      	adds	r7, #80	; 0x50
 800492c:	46bd      	mov	sp, r7
 800492e:	bdb0      	pop	{r4, r5, r7, pc}
 8004930:	40590000 	.word	0x40590000
 8004934:	40f2c000 	.word	0x40f2c000
 8004938:	40500000 	.word	0x40500000
 800493c:	40d00000 	.word	0x40d00000
 8004940:	40f00000 	.word	0x40f00000
 8004944:	41900000 	.word	0x41900000
 8004948:	3ff00000 	.word	0x3ff00000
 800494c:	41200000 	.word	0x41200000

08004950 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b08a      	sub	sp, #40	; 0x28
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8004958:	2388      	movs	r3, #136	; 0x88
 800495a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	f107 0310 	add.w	r3, r7, #16
 8004966:	2200      	movs	r2, #0
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	605a      	str	r2, [r3, #4]
 800496c:	609a      	str	r2, [r3, #8]
 800496e:	60da      	str	r2, [r3, #12]
 8004970:	611a      	str	r2, [r3, #16]
 8004972:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8004974:	f107 010c 	add.w	r1, r7, #12
 8004978:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	221a      	movs	r2, #26
 8004980:	f7fe ffbf 	bl	8003902 <bme280_get_regs>
 8004984:	4603      	mov	r3, r0
 8004986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 800498a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800498e:	2b00      	cmp	r3, #0
 8004990:	d11d      	bne.n	80049ce <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 8004992:	f107 030c 	add.w	r3, r7, #12
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	4618      	mov	r0, r3
 800499a:	f000 f84a 	bl	8004a32 <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 800499e:	23e1      	movs	r3, #225	; 0xe1
 80049a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80049a4:	f107 010c 	add.w	r1, r7, #12
 80049a8:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2207      	movs	r2, #7
 80049b0:	f7fe ffa7 	bl	8003902 <bme280_get_regs>
 80049b4:	4603      	mov	r3, r0
 80049b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 80049ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d105      	bne.n	80049ce <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 80049c2:	f107 030c 	add.w	r3, r7, #12
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 f8e1 	bl	8004b90 <parse_humidity_calib_data>
		}
	}

	return rslt;
 80049ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3728      	adds	r7, #40	; 0x28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80049da:	b480      	push	{r7}
 80049dc:	b087      	sub	sp, #28
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	607a      	str	r2, [r7, #4]
 80049e6:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 80049e8:	2301      	movs	r3, #1
 80049ea:	75fb      	strb	r3, [r7, #23]
 80049ec:	e016      	b.n	8004a1c <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 80049ee:	7dfb      	ldrb	r3, [r7, #23]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	441a      	add	r2, r3
 80049f4:	7dfb      	ldrb	r3, [r7, #23]
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	3b01      	subs	r3, #1
 80049fa:	68b9      	ldr	r1, [r7, #8]
 80049fc:	440b      	add	r3, r1
 80049fe:	7812      	ldrb	r2, [r2, #0]
 8004a00:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 8004a02:	7dfb      	ldrb	r3, [r7, #23]
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	441a      	add	r2, r3
 8004a08:	7dfb      	ldrb	r3, [r7, #23]
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	440b      	add	r3, r1
 8004a12:	7812      	ldrb	r2, [r2, #0]
 8004a14:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 8004a16:	7dfb      	ldrb	r3, [r7, #23]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	75fb      	strb	r3, [r7, #23]
 8004a1c:	7dfa      	ldrb	r2, [r7, #23]
 8004a1e:	78fb      	ldrb	r3, [r7, #3]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d3e4      	bcc.n	80049ee <interleave_reg_addr+0x14>
	}
}
 8004a24:	bf00      	nop
 8004a26:	bf00      	nop
 8004a28:	371c      	adds	r7, #28
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b085      	sub	sp, #20
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	3310      	adds	r3, #16
 8004a40:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	3301      	adds	r3, #1
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	021b      	lsls	r3, r3, #8
 8004a4a:	b21a      	sxth	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	b21b      	sxth	r3, r3
 8004a52:	4313      	orrs	r3, r2
 8004a54:	b21b      	sxth	r3, r3
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3303      	adds	r3, #3
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	021b      	lsls	r3, r3, #8
 8004a64:	b21a      	sxth	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	3302      	adds	r3, #2
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	b21b      	sxth	r3, r3
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	b21a      	sxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3305      	adds	r3, #5
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	021b      	lsls	r3, r3, #8
 8004a7e:	b21a      	sxth	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3304      	adds	r3, #4
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	b21b      	sxth	r3, r3
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	b21a      	sxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3307      	adds	r3, #7
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	021b      	lsls	r3, r3, #8
 8004a98:	b21a      	sxth	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	3306      	adds	r3, #6
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	b21b      	sxth	r3, r3
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	b21b      	sxth	r3, r3
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3309      	adds	r3, #9
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	021b      	lsls	r3, r3, #8
 8004ab4:	b21a      	sxth	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3308      	adds	r3, #8
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	b21b      	sxth	r3, r3
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	b21a      	sxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	330b      	adds	r3, #11
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	021b      	lsls	r3, r3, #8
 8004ace:	b21a      	sxth	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	330a      	adds	r3, #10
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	b21b      	sxth	r3, r3
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	b21a      	sxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	330d      	adds	r3, #13
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	021b      	lsls	r3, r3, #8
 8004ae8:	b21a      	sxth	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	330c      	adds	r3, #12
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	b21b      	sxth	r3, r3
 8004af2:	4313      	orrs	r3, r2
 8004af4:	b21a      	sxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	330f      	adds	r3, #15
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	021b      	lsls	r3, r3, #8
 8004b02:	b21a      	sxth	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	330e      	adds	r3, #14
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	b21b      	sxth	r3, r3
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	b21a      	sxth	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3311      	adds	r3, #17
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	021b      	lsls	r3, r3, #8
 8004b1c:	b21a      	sxth	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3310      	adds	r3, #16
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	b21b      	sxth	r3, r3
 8004b26:	4313      	orrs	r3, r2
 8004b28:	b21a      	sxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3313      	adds	r3, #19
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	021b      	lsls	r3, r3, #8
 8004b36:	b21a      	sxth	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3312      	adds	r3, #18
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	b21b      	sxth	r3, r3
 8004b40:	4313      	orrs	r3, r2
 8004b42:	b21a      	sxth	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3315      	adds	r3, #21
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	021b      	lsls	r3, r3, #8
 8004b50:	b21a      	sxth	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3314      	adds	r3, #20
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	b21b      	sxth	r3, r3
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	b21a      	sxth	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	3317      	adds	r3, #23
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	021b      	lsls	r3, r3, #8
 8004b6a:	b21a      	sxth	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3316      	adds	r3, #22
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	b21b      	sxth	r3, r3
 8004b74:	4313      	orrs	r3, r2
 8004b76:	b21a      	sxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	7e5a      	ldrb	r2, [r3, #25]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	761a      	strb	r2, [r3, #24]

}
 8004b84:	bf00      	nop
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	3310      	adds	r3, #16
 8004b9e:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	021b      	lsls	r3, r3, #8
 8004ba8:	b21a      	sxth	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	b21b      	sxth	r3, r3
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	b21a      	sxth	r2, r3
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	789a      	ldrb	r2, [r3, #2]
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3303      	adds	r3, #3
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	b25b      	sxtb	r3, r3
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	011b      	lsls	r3, r3, #4
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	b21b      	sxth	r3, r3
 8004bd8:	f003 030f 	and.w	r3, r3, #15
 8004bdc:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8004bde:	8a7a      	ldrh	r2, [r7, #18]
 8004be0:	8a3b      	ldrh	r3, [r7, #16]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	b21a      	sxth	r2, r3
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	3305      	adds	r3, #5
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	b25b      	sxtb	r3, r3
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	011b      	lsls	r3, r3, #4
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	091b      	lsrs	r3, r3, #4
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8004c06:	89fa      	ldrh	r2, [r7, #14]
 8004c08:	89bb      	ldrh	r3, [r7, #12]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	b21a      	sxth	r2, r3
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3306      	adds	r3, #6
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	b25a      	sxtb	r2, r3
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8004c20:	bf00      	nop
 8004c22:	371c      	adds	r7, #28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	4603      	mov	r3, r0
 8004c34:	460a      	mov	r2, r1
 8004c36:	71fb      	strb	r3, [r7, #7]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8004c40:	79fa      	ldrb	r2, [r7, #7]
 8004c42:	79bb      	ldrb	r3, [r7, #6]
 8004c44:	4013      	ands	r3, r2
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
 8004c50:	e001      	b.n	8004c56 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 8004c52:	2300      	movs	r3, #0
 8004c54:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8004c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00b      	beq.n	8004c8a <null_ptr_check+0x26>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d007      	beq.n	8004c8a <null_ptr_check+0x26>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <null_ptr_check+0x26>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d102      	bne.n	8004c90 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8004c8a:	23ff      	movs	r3, #255	; 0xff
 8004c8c:	73fb      	strb	r3, [r7, #15]
 8004c8e:	e001      	b.n	8004c94 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 8004c90:	2300      	movs	r3, #0
 8004c92:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8004c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <user_i2c_read>:
int8_t init_bme280(void);
void bme280_measure(void);

//----------------------------------------------------------------------------------------
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	603a      	str	r2, [r7, #0]
 8004cac:	461a      	mov	r2, r3
 8004cae:	4603      	mov	r3, r0
 8004cb0:	71fb      	strb	r3, [r7, #7]
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	71bb      	strb	r3, [r7, #6]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8004cba:	79fb      	ldrb	r3, [r7, #7]
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	b299      	uxth	r1, r3
 8004cc2:	1dba      	adds	r2, r7, #6
 8004cc4:	230a      	movs	r3, #10
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	2301      	movs	r3, #1
 8004cca:	4811      	ldr	r0, [pc, #68]	; (8004d10 <user_i2c_read+0x6c>)
 8004ccc:	f003 f8f4 	bl	8007eb8 <HAL_I2C_Master_Transmit>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <user_i2c_read+0x38>
 8004cd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cda:	e014      	b.n	8004d06 <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c3, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	b21b      	sxth	r3, r3
 8004ce2:	f043 0301 	orr.w	r3, r3, #1
 8004ce6:	b21b      	sxth	r3, r3
 8004ce8:	b299      	uxth	r1, r3
 8004cea:	88bb      	ldrh	r3, [r7, #4]
 8004cec:	220a      	movs	r2, #10
 8004cee:	9200      	str	r2, [sp, #0]
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	4807      	ldr	r0, [pc, #28]	; (8004d10 <user_i2c_read+0x6c>)
 8004cf4:	f003 f9de 	bl	80080b4 <HAL_I2C_Master_Receive>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <user_i2c_read+0x60>
 8004cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d02:	e000      	b.n	8004d06 <user_i2c_read+0x62>

  return 0;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	200002cc 	.word	0x200002cc

08004d14 <user_delay_ms>:
//----------------------------------------------------------------------------------------
void user_delay_ms(uint32_t period)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 ff05 	bl	8005b2c <HAL_Delay>
}
 8004d22:	bf00      	nop
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <user_i2c_write>:
//----------------------------------------------------------------------------------------
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	603a      	str	r2, [r7, #0]
 8004d34:	461a      	mov	r2, r3
 8004d36:	4603      	mov	r3, r0
 8004d38:	71fb      	strb	r3, [r7, #7]
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	71bb      	strb	r3, [r7, #6]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 8004d42:	88bb      	ldrh	r3, [r7, #4]
 8004d44:	3301      	adds	r3, #1
 8004d46:	4618      	mov	r0, r3
 8004d48:	f00a fbc0 	bl	800f4cc <malloc>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 8004d50:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	88ba      	ldrh	r2, [r7, #4]
 8004d5e:	6839      	ldr	r1, [r7, #0]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f00a fbc3 	bl	800f4ec <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8004d66:	79fb      	ldrb	r3, [r7, #7]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	b299      	uxth	r1, r3
 8004d6e:	88bb      	ldrh	r3, [r7, #4]
 8004d70:	3301      	adds	r3, #1
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d78:	9200      	str	r2, [sp, #0]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4808      	ldr	r0, [pc, #32]	; (8004da0 <user_i2c_write+0x74>)
 8004d7e:	f003 f89b 	bl	8007eb8 <HAL_I2C_Master_Transmit>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <user_i2c_write+0x62>
 8004d88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d8c:	e003      	b.n	8004d96 <user_i2c_write+0x6a>

  free(buf);
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f00a fba4 	bl	800f4dc <free>
  return 0;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	200002cc 	.word	0x200002cc

08004da4 <detect_all_sensors_and_init>:
}i2c_device;


//----------------------------------------------------------------------------------------
void detect_all_sensors_and_init(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
	detect_bme280();
 8004da8:	f000 f8ec 	bl	8004f84 <detect_bme280>
	if(i2c_device.BME280_ready_status == true)
 8004dac:	4b0c      	ldr	r3, [pc, #48]	; (8004de0 <detect_all_sensors_and_init+0x3c>)
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <detect_all_sensors_and_init+0x14>
	{
		init_bme280();
 8004db4:	f000 f864 	bl	8004e80 <init_bme280>
	}

	detect_mpu6050();
 8004db8:	f000 f91a 	bl	8004ff0 <detect_mpu6050>
	if(i2c_device.MPU6050_ready_status == true)
 8004dbc:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <detect_all_sensors_and_init+0x3c>)
 8004dbe:	785b      	ldrb	r3, [r3, #1]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <detect_all_sensors_and_init+0x24>
	{
		init_mpu6050();
 8004dc4:	f000 f816 	bl	8004df4 <init_mpu6050>
	}

	detect_apds9960();
 8004dc8:	f000 f9f0 	bl	80051ac <detect_apds9960>
	denect_hmc5883l();
 8004dcc:	f000 f992 	bl	80050f4 <denect_hmc5883l>
	detect_ms5611();
 8004dd0:	f000 f9be 	bl	8005150 <detect_ms5611>
	detect_oled_screen();
 8004dd4:	f000 fa20 	bl	8005218 <detect_oled_screen>
	detect_ds3231();
 8004dd8:	f000 fa44 	bl	8005264 <detect_ds3231>

}
 8004ddc:	bf00      	nop
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	20000610 	.word	0x20000610

08004de4 <measure_sensors>:
//---------------------------------------------------------------------------------------
void measure_sensors(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
	bme280_measure();
 8004de8:	f000 f894 	bl	8004f14 <bme280_measure>
	mpu6050_measure();
 8004dec:	f000 f812 	bl	8004e14 <mpu6050_measure>


//	hmc5883l();
//	ms5611();
//	apds9960();
}
 8004df0:	bf00      	nop
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <init_mpu6050>:
//----------------------------------------------------------------------------------------
int8_t init_mpu6050(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
	if(MPU6050_Init(&hi2c2) == 1)
 8004df8:	4805      	ldr	r0, [pc, #20]	; (8004e10 <init_mpu6050+0x1c>)
 8004dfa:	f000 fa61 	bl	80052c0 <MPU6050_Init>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d101      	bne.n	8004e08 <init_mpu6050+0x14>
	{
		return 0;
 8004e04:	2300      	movs	r3, #0
 8004e06:	e000      	b.n	8004e0a <init_mpu6050+0x16>
	}
	else
	{
		return 1;
 8004e08:	2301      	movs	r3, #1
	}
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	20000378 	.word	0x20000378

08004e14 <mpu6050_measure>:
//----------------------------------------------------------------------------------------
void mpu6050_measure(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
	MPU6050_Read_All(&hi2c2, &MPU6050);
 8004e18:	4916      	ldr	r1, [pc, #88]	; (8004e74 <mpu6050_measure+0x60>)
 8004e1a:	4817      	ldr	r0, [pc, #92]	; (8004e78 <mpu6050_measure+0x64>)
 8004e1c:	f000 faa8 	bl	8005370 <MPU6050_Read_All>

	i2c_device.MPU6050_acceleration_Ax = MPU6050.Ax;
 8004e20:	4b14      	ldr	r3, [pc, #80]	; (8004e74 <mpu6050_measure+0x60>)
 8004e22:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004e26:	4915      	ldr	r1, [pc, #84]	; (8004e7c <mpu6050_measure+0x68>)
 8004e28:	e9c1 2306 	strd	r2, r3, [r1, #24]
	i2c_device.MPU6050_acceleration_Ay = MPU6050.Ay;
 8004e2c:	4b11      	ldr	r3, [pc, #68]	; (8004e74 <mpu6050_measure+0x60>)
 8004e2e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004e32:	4912      	ldr	r1, [pc, #72]	; (8004e7c <mpu6050_measure+0x68>)
 8004e34:	e9c1 2308 	strd	r2, r3, [r1, #32]
	i2c_device.MPU6050_acceleration_Az = MPU6050.Az;
 8004e38:	4b0e      	ldr	r3, [pc, #56]	; (8004e74 <mpu6050_measure+0x60>)
 8004e3a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004e3e:	490f      	ldr	r1, [pc, #60]	; (8004e7c <mpu6050_measure+0x68>)
 8004e40:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	i2c_device.MPU6050_gyro_Gx = MPU6050.Gx;
 8004e44:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <mpu6050_measure+0x60>)
 8004e46:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004e4a:	490c      	ldr	r1, [pc, #48]	; (8004e7c <mpu6050_measure+0x68>)
 8004e4c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	i2c_device.MPU6050_gyro_Gy = MPU6050.Gy;
 8004e50:	4b08      	ldr	r3, [pc, #32]	; (8004e74 <mpu6050_measure+0x60>)
 8004e52:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004e56:	4909      	ldr	r1, [pc, #36]	; (8004e7c <mpu6050_measure+0x68>)
 8004e58:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	i2c_device.MPU6050_gyro_Gz = MPU6050.Gz;
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <mpu6050_measure+0x60>)
 8004e5e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004e62:	4906      	ldr	r1, [pc, #24]	; (8004e7c <mpu6050_measure+0x68>)
 8004e64:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	i2c_device.MPU6050_temperature = MPU6050.Temperature;
 8004e68:	4b02      	ldr	r3, [pc, #8]	; (8004e74 <mpu6050_measure+0x60>)
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	4a03      	ldr	r2, [pc, #12]	; (8004e7c <mpu6050_measure+0x68>)
 8004e6e:	6493      	str	r3, [r2, #72]	; 0x48
}
 8004e70:	bf00      	nop
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	200005b8 	.word	0x200005b8
 8004e78:	20000378 	.word	0x20000378
 8004e7c:	20000610 	.word	0x20000610

08004e80 <init_bme280>:
//----------------------------------------------------------------------------------------
int8_t init_bme280(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 8004e84:	4b1e      	ldr	r3, [pc, #120]	; (8004f00 <init_bme280+0x80>)
 8004e86:	2276      	movs	r2, #118	; 0x76
 8004e88:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 8004e8a:	4b1d      	ldr	r3, [pc, #116]	; (8004f00 <init_bme280+0x80>)
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 8004e90:	4b1b      	ldr	r3, [pc, #108]	; (8004f00 <init_bme280+0x80>)
 8004e92:	4a1c      	ldr	r2, [pc, #112]	; (8004f04 <init_bme280+0x84>)
 8004e94:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 8004e96:	4b1a      	ldr	r3, [pc, #104]	; (8004f00 <init_bme280+0x80>)
 8004e98:	4a1b      	ldr	r2, [pc, #108]	; (8004f08 <init_bme280+0x88>)
 8004e9a:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 8004e9c:	4b18      	ldr	r3, [pc, #96]	; (8004f00 <init_bme280+0x80>)
 8004e9e:	4a1b      	ldr	r2, [pc, #108]	; (8004f0c <init_bme280+0x8c>)
 8004ea0:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&dev);
 8004ea2:	4817      	ldr	r0, [pc, #92]	; (8004f00 <init_bme280+0x80>)
 8004ea4:	f7fe fce2 	bl	800386c <bme280_init>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	461a      	mov	r2, r3
 8004eac:	4b18      	ldr	r3, [pc, #96]	; (8004f10 <init_bme280+0x90>)
 8004eae:	701a      	strb	r2, [r3, #0]

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8004eb0:	4b13      	ldr	r3, [pc, #76]	; (8004f00 <init_bme280+0x80>)
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8004eb8:	4b11      	ldr	r3, [pc, #68]	; (8004f00 <init_bme280+0x80>)
 8004eba:	2205      	movs	r2, #5
 8004ebc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8004ec0:	4b0f      	ldr	r3, [pc, #60]	; (8004f00 <init_bme280+0x80>)
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 8004ec8:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <init_bme280+0x80>)
 8004eca:	2204      	movs	r2, #4
 8004ecc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8004ed0:	490b      	ldr	r1, [pc, #44]	; (8004f00 <init_bme280+0x80>)
 8004ed2:	200f      	movs	r0, #15
 8004ed4:	f7fe fdbc 	bl	8003a50 <bme280_set_sensor_settings>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	461a      	mov	r2, r3
 8004edc:	4b0c      	ldr	r3, [pc, #48]	; (8004f10 <init_bme280+0x90>)
 8004ede:	701a      	strb	r2, [r3, #0]

	//	  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8004ee0:	4907      	ldr	r1, [pc, #28]	; (8004f00 <init_bme280+0x80>)
 8004ee2:	2003      	movs	r0, #3
 8004ee4:	f7fe fe09 	bl	8003afa <bme280_set_sensor_mode>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	461a      	mov	r2, r3
 8004eec:	4b08      	ldr	r3, [pc, #32]	; (8004f10 <init_bme280+0x90>)
 8004eee:	701a      	strb	r2, [r3, #0]

	dev.delay_ms(40);
 8004ef0:	4b03      	ldr	r3, [pc, #12]	; (8004f00 <init_bme280+0x80>)
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	2028      	movs	r0, #40	; 0x28
 8004ef6:	4798      	blx	r3
}
 8004ef8:	bf00      	nop
 8004efa:	4618      	mov	r0, r3
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20000558 	.word	0x20000558
 8004f04:	08004ca5 	.word	0x08004ca5
 8004f08:	08004d2d 	.word	0x08004d2d
 8004f0c:	08004d15 	.word	0x08004d15
 8004f10:	20000598 	.word	0x20000598

08004f14 <bme280_measure>:
//----------------------------------------------------------------------------------------
void bme280_measure(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8004f18:	4a16      	ldr	r2, [pc, #88]	; (8004f74 <bme280_measure+0x60>)
 8004f1a:	4917      	ldr	r1, [pc, #92]	; (8004f78 <bme280_measure+0x64>)
 8004f1c:	2007      	movs	r0, #7
 8004f1e:	f7fe fe68 	bl	8003bf2 <bme280_get_sensor_data>
 8004f22:	4603      	mov	r3, r0
 8004f24:	461a      	mov	r2, r3
 8004f26:	4b15      	ldr	r3, [pc, #84]	; (8004f7c <bme280_measure+0x68>)
 8004f28:	701a      	strb	r2, [r3, #0]

	if(rslt == BME280_OK)
 8004f2a:	4b14      	ldr	r3, [pc, #80]	; (8004f7c <bme280_measure+0x68>)
 8004f2c:	f993 3000 	ldrsb.w	r3, [r3]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d11d      	bne.n	8004f70 <bme280_measure+0x5c>
	{
		// Save data in main structure
		i2c_device.BME280_temperature = comp_data.temperature;
 8004f34:	4b10      	ldr	r3, [pc, #64]	; (8004f78 <bme280_measure+0x64>)
 8004f36:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	f7fb fdd7 	bl	8000af0 <__aeabi_d2f>
 8004f42:	4603      	mov	r3, r0
 8004f44:	4a0e      	ldr	r2, [pc, #56]	; (8004f80 <bme280_measure+0x6c>)
 8004f46:	6093      	str	r3, [r2, #8]
		i2c_device.BME280_humidity = comp_data.humidity;
 8004f48:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <bme280_measure+0x64>)
 8004f4a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004f4e:	4610      	mov	r0, r2
 8004f50:	4619      	mov	r1, r3
 8004f52:	f7fb fdcd 	bl	8000af0 <__aeabi_d2f>
 8004f56:	4603      	mov	r3, r0
 8004f58:	4a09      	ldr	r2, [pc, #36]	; (8004f80 <bme280_measure+0x6c>)
 8004f5a:	60d3      	str	r3, [r2, #12]
		i2c_device.BME280_preasure = comp_data.pressure;
 8004f5c:	4b06      	ldr	r3, [pc, #24]	; (8004f78 <bme280_measure+0x64>)
 8004f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f62:	4610      	mov	r0, r2
 8004f64:	4619      	mov	r1, r3
 8004f66:	f7fb fdc3 	bl	8000af0 <__aeabi_d2f>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	4a04      	ldr	r2, [pc, #16]	; (8004f80 <bme280_measure+0x6c>)
 8004f6e:	6113      	str	r3, [r2, #16]
		//temperature = comp_data.temperature / 100.0;      /* °C  */
		//humidity = comp_data.humidity / 1024.0;           /* %   */
		//pressure = comp_data.pressure / 10000.0;          /* hPa */
	}
}
 8004f70:	bf00      	nop
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	20000558 	.word	0x20000558
 8004f78:	200005a0 	.word	0x200005a0
 8004f7c:	20000598 	.word	0x20000598
 8004f80:	20000610 	.word	0x20000610

08004f84 <detect_bme280>:


// Function for detect i2c devices ////////////////////////////////////////////////////////
//----------------------------------------------------------------------------------------
void detect_bme280(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af04      	add	r7, sp, #16
	uint16_t STATUS=0;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x76;  		 	// BME280
 8004f8e:	2376      	movs	r3, #118	; 0x76
 8004f90:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0xD0;
 8004f92:	23d0      	movs	r3, #208	; 0xd0
 8004f94:	807b      	strh	r3, [r7, #2]
	uint8_t id = 96;							// in hex form
 8004f96:	2360      	movs	r3, #96	; 0x60
 8004f98:	707b      	strb	r3, [r7, #1]
	uint8_t buff=0;        						// Return 0x96 -> Dec 60
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	703b      	strb	r3, [r7, #0]

	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 8004f9e:	88bb      	ldrh	r3, [r7, #4]
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	b299      	uxth	r1, r3
 8004fa4:	887a      	ldrh	r2, [r7, #2]
 8004fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004faa:	9302      	str	r3, [sp, #8]
 8004fac:	2301      	movs	r3, #1
 8004fae:	9301      	str	r3, [sp, #4]
 8004fb0:	463b      	mov	r3, r7
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	480c      	ldr	r0, [pc, #48]	; (8004fe8 <detect_bme280+0x64>)
 8004fb8:	f003 fb9c 	bl	80086f4 <HAL_I2C_Mem_Read>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	80fb      	strh	r3, [r7, #6]
	//HAL_OK == 0
	if((buff == id) && (STATUS == 0))
 8004fc0:	783b      	ldrb	r3, [r7, #0]
 8004fc2:	787a      	ldrb	r2, [r7, #1]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d106      	bne.n	8004fd6 <detect_bme280+0x52>
 8004fc8:	88fb      	ldrh	r3, [r7, #6]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d103      	bne.n	8004fd6 <detect_bme280+0x52>
	{
		i2c_device.BME280_ready_status = true;
 8004fce:	4b07      	ldr	r3, [pc, #28]	; (8004fec <detect_bme280+0x68>)
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	701a      	strb	r2, [r3, #0]
 8004fd4:	e003      	b.n	8004fde <detect_bme280+0x5a>
	}
	else
	{
		i2c_device.BME280_ready_status = false;
 8004fd6:	4b05      	ldr	r3, [pc, #20]	; (8004fec <detect_bme280+0x68>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	701a      	strb	r2, [r3, #0]
	}
}
 8004fdc:	bf00      	nop
 8004fde:	bf00      	nop
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	200002cc 	.word	0x200002cc
 8004fec:	20000610 	.word	0x20000610

08004ff0 <detect_mpu6050>:
//----------------------------------------------------------------------------------------
void detect_mpu6050(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b088      	sub	sp, #32
 8004ff4:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	81fb      	strh	r3, [r7, #14]
	uint16_t addres_device = 0xD0;
 8004ffa:	23d0      	movs	r3, #208	; 0xd0
 8004ffc:	81bb      	strh	r3, [r7, #12]
	uint16_t id_addr = 0x75;
 8004ffe:	2375      	movs	r3, #117	; 0x75
 8005000:	817b      	strh	r3, [r7, #10]
	uint8_t id = 104;							// in hex form
 8005002:	2368      	movs	r3, #104	; 0x68
 8005004:	727b      	strb	r3, [r7, #9]
	uint8_t buff = 0;
 8005006:	2300      	movs	r3, #0
 8005008:	723b      	strb	r3, [r7, #8]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, id_addr, 1, &buff, 1, 1000);
 800500a:	897a      	ldrh	r2, [r7, #10]
 800500c:	89b9      	ldrh	r1, [r7, #12]
 800500e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005012:	9302      	str	r3, [sp, #8]
 8005014:	2301      	movs	r3, #1
 8005016:	9301      	str	r3, [sp, #4]
 8005018:	f107 0308 	add.w	r3, r7, #8
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	2301      	movs	r3, #1
 8005020:	4832      	ldr	r0, [pc, #200]	; (80050ec <detect_mpu6050+0xfc>)
 8005022:	f003 fb67 	bl	80086f4 <HAL_I2C_Mem_Read>
 8005026:	4603      	mov	r3, r0
 8005028:	81fb      	strh	r3, [r7, #14]

	if((buff == id) && (STATUS == 0))
 800502a:	7a3b      	ldrb	r3, [r7, #8]
 800502c:	7a7a      	ldrb	r2, [r7, #9]
 800502e:	429a      	cmp	r2, r3
 8005030:	d106      	bne.n	8005040 <detect_mpu6050+0x50>
 8005032:	89fb      	ldrh	r3, [r7, #14]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d103      	bne.n	8005040 <detect_mpu6050+0x50>
	{
		i2c_device.MPU6050_ready_status = true;
 8005038:	4b2d      	ldr	r3, [pc, #180]	; (80050f0 <detect_mpu6050+0x100>)
 800503a:	2201      	movs	r2, #1
 800503c:	705a      	strb	r2, [r3, #1]
 800503e:	e002      	b.n	8005046 <detect_mpu6050+0x56>
	}
	else
	{
		i2c_device.MPU6050_ready_status = false;
 8005040:	4b2b      	ldr	r3, [pc, #172]	; (80050f0 <detect_mpu6050+0x100>)
 8005042:	2200      	movs	r2, #0
 8005044:	705a      	strb	r2, [r3, #1]
	}

	// turn on direct i2c communication with hmc5883l
	if(i2c_device.MPU6050_ready_status == true)
 8005046:	4b2a      	ldr	r3, [pc, #168]	; (80050f0 <detect_mpu6050+0x100>)
 8005048:	785b      	ldrb	r3, [r3, #1]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d04a      	beq.n	80050e4 <detect_mpu6050+0xf4>
	{
		uint8_t data = 0x00;
 800504e:	2300      	movs	r3, #0
 8005050:	71fb      	strb	r3, [r7, #7]
		STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x6A, 1, &data, 1, 1000);		// Disable i2c master mode
 8005052:	89b9      	ldrh	r1, [r7, #12]
 8005054:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005058:	9302      	str	r3, [sp, #8]
 800505a:	2301      	movs	r3, #1
 800505c:	9301      	str	r3, [sp, #4]
 800505e:	1dfb      	adds	r3, r7, #7
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	2301      	movs	r3, #1
 8005064:	226a      	movs	r2, #106	; 0x6a
 8005066:	4821      	ldr	r0, [pc, #132]	; (80050ec <detect_mpu6050+0xfc>)
 8005068:	f003 fa4a 	bl	8008500 <HAL_I2C_Mem_Write>
 800506c:	4603      	mov	r3, r0
 800506e:	81fb      	strh	r3, [r7, #14]
		data = 0x02;
 8005070:	2302      	movs	r3, #2
 8005072:	71fb      	strb	r3, [r7, #7]
		STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x37, 1, &data, 1, 1000);		// Enable i2c master bypass mode
 8005074:	89b9      	ldrh	r1, [r7, #12]
 8005076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800507a:	9302      	str	r3, [sp, #8]
 800507c:	2301      	movs	r3, #1
 800507e:	9301      	str	r3, [sp, #4]
 8005080:	1dfb      	adds	r3, r7, #7
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	2301      	movs	r3, #1
 8005086:	2237      	movs	r2, #55	; 0x37
 8005088:	4818      	ldr	r0, [pc, #96]	; (80050ec <detect_mpu6050+0xfc>)
 800508a:	f003 fa39 	bl	8008500 <HAL_I2C_Mem_Write>
 800508e:	4603      	mov	r3, r0
 8005090:	81fb      	strh	r3, [r7, #14]

		// Check waited registers
		buff = 0;
 8005092:	2300      	movs	r3, #0
 8005094:	723b      	strb	r3, [r7, #8]
		STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, 0x6A, 1, &buff, 1, 1000);
 8005096:	89b9      	ldrh	r1, [r7, #12]
 8005098:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800509c:	9302      	str	r3, [sp, #8]
 800509e:	2301      	movs	r3, #1
 80050a0:	9301      	str	r3, [sp, #4]
 80050a2:	f107 0308 	add.w	r3, r7, #8
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	2301      	movs	r3, #1
 80050aa:	226a      	movs	r2, #106	; 0x6a
 80050ac:	480f      	ldr	r0, [pc, #60]	; (80050ec <detect_mpu6050+0xfc>)
 80050ae:	f003 fb21 	bl	80086f4 <HAL_I2C_Mem_Read>
 80050b2:	4603      	mov	r3, r0
 80050b4:	81fb      	strh	r3, [r7, #14]
		buff = 0;
 80050b6:	2300      	movs	r3, #0
 80050b8:	723b      	strb	r3, [r7, #8]
		STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, 0x37, 1, &buff, 1, 1000);
 80050ba:	89b9      	ldrh	r1, [r7, #12]
 80050bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050c0:	9302      	str	r3, [sp, #8]
 80050c2:	2301      	movs	r3, #1
 80050c4:	9301      	str	r3, [sp, #4]
 80050c6:	f107 0308 	add.w	r3, r7, #8
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	2301      	movs	r3, #1
 80050ce:	2237      	movs	r2, #55	; 0x37
 80050d0:	4806      	ldr	r0, [pc, #24]	; (80050ec <detect_mpu6050+0xfc>)
 80050d2:	f003 fb0f 	bl	80086f4 <HAL_I2C_Mem_Read>
 80050d6:	4603      	mov	r3, r0
 80050d8:	81fb      	strh	r3, [r7, #14]

		if(STATUS == 0)
 80050da:	89fb      	ldrh	r3, [r7, #14]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <detect_mpu6050+0xf4>
		{
			denect_hmc5883l();     // Don't work  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 80050e0:	f000 f808 	bl	80050f4 <denect_hmc5883l>
		}
	}
}
 80050e4:	bf00      	nop
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	20000378 	.word	0x20000378
 80050f0:	20000610 	.word	0x20000610

080050f4 <denect_hmc5883l>:
//----------------------------------------------------------------------------------------
void denect_hmc5883l(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 80050fa:	2300      	movs	r3, #0
 80050fc:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x1E;       //0x1E                		 ///// 0x3C
 80050fe:	231e      	movs	r3, #30
 8005100:	80bb      	strh	r3, [r7, #4]
	uint16_t addr = 0x0A;				// HMC5883L_REG_IDENT_A      ///// 0xA0
 8005102:	230a      	movs	r3, #10
 8005104:	807b      	strh	r3, [r7, #2]
	//uint8_t id = 0xa8;							// in hex form
	uint8_t buff = 0;
 8005106:	2300      	movs	r3, #0
 8005108:	707b      	strb	r3, [r7, #1]

	//STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x37, 1, &data, 1, 1000);

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1 , addr, 1, &buff, 1, 1000);
 800510a:	88bb      	ldrh	r3, [r7, #4]
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	b299      	uxth	r1, r3
 8005110:	887a      	ldrh	r2, [r7, #2]
 8005112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005116:	9302      	str	r3, [sp, #8]
 8005118:	2301      	movs	r3, #1
 800511a:	9301      	str	r3, [sp, #4]
 800511c:	1c7b      	adds	r3, r7, #1
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	2301      	movs	r3, #1
 8005122:	4809      	ldr	r0, [pc, #36]	; (8005148 <denect_hmc5883l+0x54>)
 8005124:	f003 fae6 	bl	80086f4 <HAL_I2C_Mem_Read>
 8005128:	4603      	mov	r3, r0
 800512a:	80fb      	strh	r3, [r7, #6]
	if(STATUS == 0)
 800512c:	88fb      	ldrh	r3, [r7, #6]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d103      	bne.n	800513a <denect_hmc5883l+0x46>
	{
		i2c_device.HMC5883L_ready_status = true;
 8005132:	4b06      	ldr	r3, [pc, #24]	; (800514c <denect_hmc5883l+0x58>)
 8005134:	2201      	movs	r2, #1
 8005136:	709a      	strb	r2, [r3, #2]
//	HMC5883L_setDataRate(HMC5883L_DATARATE_15HZ);
//	HMC5883L_setSamples(HMC5883L_SAMPLES_1); HMC5883L_setOffset(0, 0);
//
//	Vector mag = HMC5883L_readRaw();

}
 8005138:	e002      	b.n	8005140 <denect_hmc5883l+0x4c>
		i2c_device.HMC5883L_ready_status = false;
 800513a:	4b04      	ldr	r3, [pc, #16]	; (800514c <denect_hmc5883l+0x58>)
 800513c:	2200      	movs	r2, #0
 800513e:	709a      	strb	r2, [r3, #2]
}
 8005140:	bf00      	nop
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	20000378 	.word	0x20000378
 800514c:	20000610 	.word	0x20000610

08005150 <detect_ms5611>:
//----------------------------------------------------------------------------------------
void detect_ms5611(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 8005156:	2300      	movs	r3, #0
 8005158:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x77;
 800515a:	2377      	movs	r3, #119	; 0x77
 800515c:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x00 ;
 800515e:	2300      	movs	r3, #0
 8005160:	807b      	strh	r3, [r7, #2]
	uint8_t buff = 0;
 8005162:	2300      	movs	r3, #0
 8005164:	707b      	strb	r3, [r7, #1]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 8005166:	88bb      	ldrh	r3, [r7, #4]
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	b299      	uxth	r1, r3
 800516c:	887a      	ldrh	r2, [r7, #2]
 800516e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005172:	9302      	str	r3, [sp, #8]
 8005174:	2301      	movs	r3, #1
 8005176:	9301      	str	r3, [sp, #4]
 8005178:	1c7b      	adds	r3, r7, #1
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	2301      	movs	r3, #1
 800517e:	4809      	ldr	r0, [pc, #36]	; (80051a4 <detect_ms5611+0x54>)
 8005180:	f003 fab8 	bl	80086f4 <HAL_I2C_Mem_Read>
 8005184:	4603      	mov	r3, r0
 8005186:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 8005188:	88fb      	ldrh	r3, [r7, #6]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d103      	bne.n	8005196 <detect_ms5611+0x46>
	{
		i2c_device.MS5611_ready_status = true;
 800518e:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <detect_ms5611+0x58>)
 8005190:	2201      	movs	r2, #1
 8005192:	70da      	strb	r2, [r3, #3]
	}
	else
	{
		i2c_device.MS5611_ready_status = false;
	}
}
 8005194:	e002      	b.n	800519c <detect_ms5611+0x4c>
		i2c_device.MS5611_ready_status = false;
 8005196:	4b04      	ldr	r3, [pc, #16]	; (80051a8 <detect_ms5611+0x58>)
 8005198:	2200      	movs	r2, #0
 800519a:	70da      	strb	r2, [r3, #3]
}
 800519c:	bf00      	nop
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	20000378 	.word	0x20000378
 80051a8:	20000610 	.word	0x20000610

080051ac <detect_apds9960>:
//----------------------------------------------------------------------------------------
void detect_apds9960(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 80051b2:	2300      	movs	r3, #0
 80051b4:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x39;
 80051b6:	2339      	movs	r3, #57	; 0x39
 80051b8:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x92;
 80051ba:	2392      	movs	r3, #146	; 0x92
 80051bc:	807b      	strh	r3, [r7, #2]
	uint8_t id = 0xa8;							// in hex form
 80051be:	23a8      	movs	r3, #168	; 0xa8
 80051c0:	707b      	strb	r3, [r7, #1]
	uint8_t buff = 0;
 80051c2:	2300      	movs	r3, #0
 80051c4:	703b      	strb	r3, [r7, #0]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 80051c6:	88bb      	ldrh	r3, [r7, #4]
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	b299      	uxth	r1, r3
 80051cc:	887a      	ldrh	r2, [r7, #2]
 80051ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051d2:	9302      	str	r3, [sp, #8]
 80051d4:	2301      	movs	r3, #1
 80051d6:	9301      	str	r3, [sp, #4]
 80051d8:	463b      	mov	r3, r7
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	2301      	movs	r3, #1
 80051de:	480c      	ldr	r0, [pc, #48]	; (8005210 <detect_apds9960+0x64>)
 80051e0:	f003 fa88 	bl	80086f4 <HAL_I2C_Mem_Read>
 80051e4:	4603      	mov	r3, r0
 80051e6:	80fb      	strh	r3, [r7, #6]

	if((buff == id) && (STATUS == 0))
 80051e8:	783b      	ldrb	r3, [r7, #0]
 80051ea:	787a      	ldrb	r2, [r7, #1]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d106      	bne.n	80051fe <detect_apds9960+0x52>
 80051f0:	88fb      	ldrh	r3, [r7, #6]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d103      	bne.n	80051fe <detect_apds9960+0x52>
	{
		i2c_device.APDS9960_ready_status = true;
 80051f6:	4b07      	ldr	r3, [pc, #28]	; (8005214 <detect_apds9960+0x68>)
 80051f8:	2201      	movs	r2, #1
 80051fa:	711a      	strb	r2, [r3, #4]
 80051fc:	e003      	b.n	8005206 <detect_apds9960+0x5a>
	}
	else
	{
		i2c_device.APDS9960_ready_status = false;
 80051fe:	4b05      	ldr	r3, [pc, #20]	; (8005214 <detect_apds9960+0x68>)
 8005200:	2200      	movs	r2, #0
 8005202:	711a      	strb	r2, [r3, #4]
	}
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20000378 	.word	0x20000378
 8005214:	20000610 	.word	0x20000610

08005218 <detect_oled_screen>:
//----------------------------------------------------------------------------------------
void detect_oled_screen(void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af02      	add	r7, sp, #8
	uint16_t STATUS = 0;
 800521e:	2300      	movs	r3, #0
 8005220:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[2];
	buffer[0] = 0x00;
 8005222:	2300      	movs	r3, #0
 8005224:	713b      	strb	r3, [r7, #4]
	buffer[1] = 0xAE;
 8005226:	23ae      	movs	r3, #174	; 0xae
 8005228:	717b      	strb	r3, [r7, #5]

	STATUS = HAL_I2C_Master_Transmit(&hi2c3, 0x78,buffer, 2, 1000);
 800522a:	1d3a      	adds	r2, r7, #4
 800522c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	2302      	movs	r3, #2
 8005234:	2178      	movs	r1, #120	; 0x78
 8005236:	4809      	ldr	r0, [pc, #36]	; (800525c <detect_oled_screen+0x44>)
 8005238:	f002 fe3e 	bl	8007eb8 <HAL_I2C_Master_Transmit>
 800523c:	4603      	mov	r3, r0
 800523e:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 8005240:	88fb      	ldrh	r3, [r7, #6]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d103      	bne.n	800524e <detect_oled_screen+0x36>
	{
		i2c_device.OLED_ready_status = true;
 8005246:	4b06      	ldr	r3, [pc, #24]	; (8005260 <detect_oled_screen+0x48>)
 8005248:	2201      	movs	r2, #1
 800524a:	715a      	strb	r2, [r3, #5]
	}
	else
	{
		i2c_device.OLED_ready_status = false;
	}
}
 800524c:	e002      	b.n	8005254 <detect_oled_screen+0x3c>
		i2c_device.OLED_ready_status = false;
 800524e:	4b04      	ldr	r3, [pc, #16]	; (8005260 <detect_oled_screen+0x48>)
 8005250:	2200      	movs	r2, #0
 8005252:	715a      	strb	r2, [r3, #5]
}
 8005254:	bf00      	nop
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	200002cc 	.word	0x200002cc
 8005260:	20000610 	.word	0x20000610

08005264 <detect_ds3231>:
//----------------------------------------------------------------------------------------
void detect_ds3231(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 800526a:	2300      	movs	r3, #0
 800526c:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x68;
 800526e:	2368      	movs	r3, #104	; 0x68
 8005270:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x00;						// Read seconds
 8005272:	2300      	movs	r3, #0
 8005274:	807b      	strh	r3, [r7, #2]
	uint8_t buff = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	707b      	strb	r3, [r7, #1]

	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 800527a:	88bb      	ldrh	r3, [r7, #4]
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	b299      	uxth	r1, r3
 8005280:	887a      	ldrh	r2, [r7, #2]
 8005282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005286:	9302      	str	r3, [sp, #8]
 8005288:	2301      	movs	r3, #1
 800528a:	9301      	str	r3, [sp, #4]
 800528c:	1c7b      	adds	r3, r7, #1
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	2301      	movs	r3, #1
 8005292:	4809      	ldr	r0, [pc, #36]	; (80052b8 <detect_ds3231+0x54>)
 8005294:	f003 fa2e 	bl	80086f4 <HAL_I2C_Mem_Read>
 8005298:	4603      	mov	r3, r0
 800529a:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 800529c:	88fb      	ldrh	r3, [r7, #6]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d103      	bne.n	80052aa <detect_ds3231+0x46>
	{
		i2c_device.DS3231_ready_status = true;
 80052a2:	4b06      	ldr	r3, [pc, #24]	; (80052bc <detect_ds3231+0x58>)
 80052a4:	2201      	movs	r2, #1
 80052a6:	719a      	strb	r2, [r3, #6]
	}
	else
	{
		i2c_device.DS3231_ready_status = false;
	}
}
 80052a8:	e002      	b.n	80052b0 <detect_ds3231+0x4c>
		i2c_device.DS3231_ready_status = false;
 80052aa:	4b04      	ldr	r3, [pc, #16]	; (80052bc <detect_ds3231+0x58>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	719a      	strb	r2, [r3, #6]
}
 80052b0:	bf00      	nop
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	200002cc 	.word	0x200002cc
 80052bc:	20000610 	.word	0x20000610

080052c0 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b088      	sub	sp, #32
 80052c4:	af04      	add	r7, sp, #16
 80052c6:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80052c8:	2364      	movs	r3, #100	; 0x64
 80052ca:	9302      	str	r3, [sp, #8]
 80052cc:	2301      	movs	r3, #1
 80052ce:	9301      	str	r3, [sp, #4]
 80052d0:	f107 030f 	add.w	r3, r7, #15
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	2301      	movs	r3, #1
 80052d8:	2275      	movs	r2, #117	; 0x75
 80052da:	21d0      	movs	r1, #208	; 0xd0
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f003 fa09 	bl	80086f4 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
 80052e4:	2b68      	cmp	r3, #104	; 0x68
 80052e6:	d13d      	bne.n	8005364 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80052ec:	2364      	movs	r3, #100	; 0x64
 80052ee:	9302      	str	r3, [sp, #8]
 80052f0:	2301      	movs	r3, #1
 80052f2:	9301      	str	r3, [sp, #4]
 80052f4:	f107 030e 	add.w	r3, r7, #14
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	2301      	movs	r3, #1
 80052fc:	226b      	movs	r2, #107	; 0x6b
 80052fe:	21d0      	movs	r1, #208	; 0xd0
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f003 f8fd 	bl	8008500 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8005306:	2307      	movs	r3, #7
 8005308:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800530a:	2364      	movs	r3, #100	; 0x64
 800530c:	9302      	str	r3, [sp, #8]
 800530e:	2301      	movs	r3, #1
 8005310:	9301      	str	r3, [sp, #4]
 8005312:	f107 030e 	add.w	r3, r7, #14
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	2301      	movs	r3, #1
 800531a:	2219      	movs	r2, #25
 800531c:	21d0      	movs	r1, #208	; 0xd0
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f003 f8ee 	bl	8008500 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8005324:	2300      	movs	r3, #0
 8005326:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8005328:	2364      	movs	r3, #100	; 0x64
 800532a:	9302      	str	r3, [sp, #8]
 800532c:	2301      	movs	r3, #1
 800532e:	9301      	str	r3, [sp, #4]
 8005330:	f107 030e 	add.w	r3, r7, #14
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	2301      	movs	r3, #1
 8005338:	221c      	movs	r2, #28
 800533a:	21d0      	movs	r1, #208	; 0xd0
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f003 f8df 	bl	8008500 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8005342:	2300      	movs	r3, #0
 8005344:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8005346:	2364      	movs	r3, #100	; 0x64
 8005348:	9302      	str	r3, [sp, #8]
 800534a:	2301      	movs	r3, #1
 800534c:	9301      	str	r3, [sp, #4]
 800534e:	f107 030e 	add.w	r3, r7, #14
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	2301      	movs	r3, #1
 8005356:	221b      	movs	r2, #27
 8005358:	21d0      	movs	r1, #208	; 0xd0
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f003 f8d0 	bl	8008500 <HAL_I2C_Mem_Write>
        return 0;
 8005360:	2300      	movs	r3, #0
 8005362:	e000      	b.n	8005366 <MPU6050_Init+0xa6>
    }
    return 1;
 8005364:	2301      	movs	r3, #1
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8005370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005374:	b094      	sub	sp, #80	; 0x50
 8005376:	af04      	add	r7, sp, #16
 8005378:	6078      	str	r0, [r7, #4]
 800537a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800537c:	2364      	movs	r3, #100	; 0x64
 800537e:	9302      	str	r3, [sp, #8]
 8005380:	230e      	movs	r3, #14
 8005382:	9301      	str	r3, [sp, #4]
 8005384:	f107 0308 	add.w	r3, r7, #8
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	2301      	movs	r3, #1
 800538c:	223b      	movs	r2, #59	; 0x3b
 800538e:	21d0      	movs	r1, #208	; 0xd0
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f003 f9af 	bl	80086f4 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8005396:	7a3b      	ldrb	r3, [r7, #8]
 8005398:	021b      	lsls	r3, r3, #8
 800539a:	b21a      	sxth	r2, r3
 800539c:	7a7b      	ldrb	r3, [r7, #9]
 800539e:	b21b      	sxth	r3, r3
 80053a0:	4313      	orrs	r3, r2
 80053a2:	b21a      	sxth	r2, r3
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80053a8:	7abb      	ldrb	r3, [r7, #10]
 80053aa:	021b      	lsls	r3, r3, #8
 80053ac:	b21a      	sxth	r2, r3
 80053ae:	7afb      	ldrb	r3, [r7, #11]
 80053b0:	b21b      	sxth	r3, r3
 80053b2:	4313      	orrs	r3, r2
 80053b4:	b21a      	sxth	r2, r3
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80053ba:	7b3b      	ldrb	r3, [r7, #12]
 80053bc:	021b      	lsls	r3, r3, #8
 80053be:	b21a      	sxth	r2, r3
 80053c0:	7b7b      	ldrb	r3, [r7, #13]
 80053c2:	b21b      	sxth	r3, r3
 80053c4:	4313      	orrs	r3, r2
 80053c6:	b21a      	sxth	r2, r3
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80053cc:	7bbb      	ldrb	r3, [r7, #14]
 80053ce:	021b      	lsls	r3, r3, #8
 80053d0:	b21a      	sxth	r2, r3
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
 80053d4:	b21b      	sxth	r3, r3
 80053d6:	4313      	orrs	r3, r2
 80053d8:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80053da:	7c3b      	ldrb	r3, [r7, #16]
 80053dc:	021b      	lsls	r3, r3, #8
 80053de:	b21a      	sxth	r2, r3
 80053e0:	7c7b      	ldrb	r3, [r7, #17]
 80053e2:	b21b      	sxth	r3, r3
 80053e4:	4313      	orrs	r3, r2
 80053e6:	b21a      	sxth	r2, r3
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80053ec:	7cbb      	ldrb	r3, [r7, #18]
 80053ee:	021b      	lsls	r3, r3, #8
 80053f0:	b21a      	sxth	r2, r3
 80053f2:	7cfb      	ldrb	r3, [r7, #19]
 80053f4:	b21b      	sxth	r3, r3
 80053f6:	4313      	orrs	r3, r2
 80053f8:	b21a      	sxth	r2, r3
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 80053fe:	7d3b      	ldrb	r3, [r7, #20]
 8005400:	021b      	lsls	r3, r3, #8
 8005402:	b21a      	sxth	r2, r3
 8005404:	7d7b      	ldrb	r3, [r7, #21]
 8005406:	b21b      	sxth	r3, r3
 8005408:	4313      	orrs	r3, r2
 800540a:	b21a      	sxth	r2, r3
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005416:	4618      	mov	r0, r3
 8005418:	f7fb f828 	bl	800046c <__aeabi_i2d>
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	4bbd      	ldr	r3, [pc, #756]	; (8005718 <MPU6050_Read_All+0x3a8>)
 8005422:	f7fb f9b7 	bl	8000794 <__aeabi_ddiv>
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	6839      	ldr	r1, [r7, #0]
 800542c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005436:	4618      	mov	r0, r3
 8005438:	f7fb f818 	bl	800046c <__aeabi_i2d>
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	4bb5      	ldr	r3, [pc, #724]	; (8005718 <MPU6050_Read_All+0x3a8>)
 8005442:	f7fb f9a7 	bl	8000794 <__aeabi_ddiv>
 8005446:	4602      	mov	r2, r0
 8005448:	460b      	mov	r3, r1
 800544a:	6839      	ldr	r1, [r7, #0]
 800544c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005456:	4618      	mov	r0, r3
 8005458:	f7fb f808 	bl	800046c <__aeabi_i2d>
 800545c:	a3a8      	add	r3, pc, #672	; (adr r3, 8005700 <MPU6050_Read_All+0x390>)
 800545e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005462:	f7fb f997 	bl	8000794 <__aeabi_ddiv>
 8005466:	4602      	mov	r2, r0
 8005468:	460b      	mov	r3, r1
 800546a:	6839      	ldr	r1, [r7, #0]
 800546c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8005470:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005474:	ee07 3a90 	vmov	s15, r3
 8005478:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800547c:	eddf 6aa7 	vldr	s13, [pc, #668]	; 800571c <MPU6050_Read_All+0x3ac>
 8005480:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005484:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8005720 <MPU6050_Read_All+0x3b0>
 8005488:	ee77 7a87 	vadd.f32	s15, s15, s14
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8005498:	4618      	mov	r0, r3
 800549a:	f7fa ffe7 	bl	800046c <__aeabi_i2d>
 800549e:	a39a      	add	r3, pc, #616	; (adr r3, 8005708 <MPU6050_Read_All+0x398>)
 80054a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a4:	f7fb f976 	bl	8000794 <__aeabi_ddiv>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	6839      	ldr	r1, [r7, #0]
 80054ae:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fa ffd7 	bl	800046c <__aeabi_i2d>
 80054be:	a392      	add	r3, pc, #584	; (adr r3, 8005708 <MPU6050_Read_All+0x398>)
 80054c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c4:	f7fb f966 	bl	8000794 <__aeabi_ddiv>
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	6839      	ldr	r1, [r7, #0]
 80054ce:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80054d8:	4618      	mov	r0, r3
 80054da:	f7fa ffc7 	bl	800046c <__aeabi_i2d>
 80054de:	a38a      	add	r3, pc, #552	; (adr r3, 8005708 <MPU6050_Read_All+0x398>)
 80054e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e4:	f7fb f956 	bl	8000794 <__aeabi_ddiv>
 80054e8:	4602      	mov	r2, r0
 80054ea:	460b      	mov	r3, r1
 80054ec:	6839      	ldr	r1, [r7, #0]
 80054ee:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 80054f2:	f000 fb0f 	bl	8005b14 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	4b8a      	ldr	r3, [pc, #552]	; (8005724 <MPU6050_Read_All+0x3b4>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fa ffa4 	bl	800044c <__aeabi_ui2d>
 8005504:	f04f 0200 	mov.w	r2, #0
 8005508:	4b87      	ldr	r3, [pc, #540]	; (8005728 <MPU6050_Read_All+0x3b8>)
 800550a:	f7fb f943 	bl	8000794 <__aeabi_ddiv>
 800550e:	4602      	mov	r2, r0
 8005510:	460b      	mov	r3, r1
 8005512:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8005516:	f000 fafd 	bl	8005b14 <HAL_GetTick>
 800551a:	4603      	mov	r3, r0
 800551c:	4a81      	ldr	r2, [pc, #516]	; (8005724 <MPU6050_Read_All+0x3b4>)
 800551e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005526:	461a      	mov	r2, r3
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800552e:	fb03 f202 	mul.w	r2, r3, r2
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005538:	4619      	mov	r1, r3
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005540:	fb03 f301 	mul.w	r3, r3, r1
 8005544:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8005546:	4618      	mov	r0, r3
 8005548:	f7fa ff90 	bl	800046c <__aeabi_i2d>
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	ec43 2b10 	vmov	d0, r2, r3
 8005554:	f00a fa68 	bl	800fa28 <sqrt>
 8005558:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 800555c:	f04f 0200 	mov.w	r2, #0
 8005560:	f04f 0300 	mov.w	r3, #0
 8005564:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005568:	f7fb fa52 	bl	8000a10 <__aeabi_dcmpeq>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d11f      	bne.n	80055b2 <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005578:	4618      	mov	r0, r3
 800557a:	f7fa ff77 	bl	800046c <__aeabi_i2d>
 800557e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005582:	f7fb f907 	bl	8000794 <__aeabi_ddiv>
 8005586:	4602      	mov	r2, r0
 8005588:	460b      	mov	r3, r1
 800558a:	ec43 2b17 	vmov	d7, r2, r3
 800558e:	eeb0 0a47 	vmov.f32	s0, s14
 8005592:	eef0 0a67 	vmov.f32	s1, s15
 8005596:	f00a f89b 	bl	800f6d0 <atan>
 800559a:	ec51 0b10 	vmov	r0, r1, d0
 800559e:	a35c      	add	r3, pc, #368	; (adr r3, 8005710 <MPU6050_Read_All+0x3a0>)
 80055a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a4:	f7fa ffcc 	bl	8000540 <__aeabi_dmul>
 80055a8:	4602      	mov	r2, r0
 80055aa:	460b      	mov	r3, r1
 80055ac:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80055b0:	e005      	b.n	80055be <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 80055b2:	f04f 0200 	mov.w	r2, #0
 80055b6:	f04f 0300 	mov.w	r3, #0
 80055ba:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055c4:	425b      	negs	r3, r3
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fa ff50 	bl	800046c <__aeabi_i2d>
 80055cc:	4682      	mov	sl, r0
 80055ce:	468b      	mov	fp, r1
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fa ff48 	bl	800046c <__aeabi_i2d>
 80055dc:	4602      	mov	r2, r0
 80055de:	460b      	mov	r3, r1
 80055e0:	ec43 2b11 	vmov	d1, r2, r3
 80055e4:	ec4b ab10 	vmov	d0, sl, fp
 80055e8:	f00a fa1b 	bl	800fa22 <atan2>
 80055ec:	ec51 0b10 	vmov	r0, r1, d0
 80055f0:	a347      	add	r3, pc, #284	; (adr r3, 8005710 <MPU6050_Read_All+0x3a0>)
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	f7fa ffa3 	bl	8000540 <__aeabi_dmul>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8005602:	f04f 0200 	mov.w	r2, #0
 8005606:	4b49      	ldr	r3, [pc, #292]	; (800572c <MPU6050_Read_All+0x3bc>)
 8005608:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800560c:	f7fb fa0a 	bl	8000a24 <__aeabi_dcmplt>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00a      	beq.n	800562c <MPU6050_Read_All+0x2bc>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	4b43      	ldr	r3, [pc, #268]	; (8005730 <MPU6050_Read_All+0x3c0>)
 8005622:	f7fb fa1d 	bl	8000a60 <__aeabi_dcmpgt>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d114      	bne.n	8005656 <MPU6050_Read_All+0x2e6>
 800562c:	f04f 0200 	mov.w	r2, #0
 8005630:	4b3f      	ldr	r3, [pc, #252]	; (8005730 <MPU6050_Read_All+0x3c0>)
 8005632:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005636:	f7fb fa13 	bl	8000a60 <__aeabi_dcmpgt>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d015      	beq.n	800566c <MPU6050_Read_All+0x2fc>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005646:	f04f 0200 	mov.w	r2, #0
 800564a:	4b38      	ldr	r3, [pc, #224]	; (800572c <MPU6050_Read_All+0x3bc>)
 800564c:	f7fb f9ea 	bl	8000a24 <__aeabi_dcmplt>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 8005656:	4937      	ldr	r1, [pc, #220]	; (8005734 <MPU6050_Read_All+0x3c4>)
 8005658:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800565c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8005660:	6839      	ldr	r1, [r7, #0]
 8005662:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005666:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800566a:	e014      	b.n	8005696 <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8005672:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8005676:	eeb0 1a47 	vmov.f32	s2, s14
 800567a:	eef0 1a67 	vmov.f32	s3, s15
 800567e:	ed97 0b06 	vldr	d0, [r7, #24]
 8005682:	482c      	ldr	r0, [pc, #176]	; (8005734 <MPU6050_Read_All+0x3c4>)
 8005684:	f000 f85a 	bl	800573c <Kalman_getAngle>
 8005688:	eeb0 7a40 	vmov.f32	s14, s0
 800568c:	eef0 7a60 	vmov.f32	s15, s1
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800569c:	4690      	mov	r8, r2
 800569e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80056a2:	f04f 0200 	mov.w	r2, #0
 80056a6:	4b22      	ldr	r3, [pc, #136]	; (8005730 <MPU6050_Read_All+0x3c0>)
 80056a8:	4640      	mov	r0, r8
 80056aa:	4649      	mov	r1, r9
 80056ac:	f7fb f9d8 	bl	8000a60 <__aeabi_dcmpgt>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d008      	beq.n	80056c8 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80056bc:	4614      	mov	r4, r2
 80056be:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80056ce:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80056d2:	eeb0 1a47 	vmov.f32	s2, s14
 80056d6:	eef0 1a67 	vmov.f32	s3, s15
 80056da:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80056de:	4816      	ldr	r0, [pc, #88]	; (8005738 <MPU6050_Read_All+0x3c8>)
 80056e0:	f000 f82c 	bl	800573c <Kalman_getAngle>
 80056e4:	eeb0 7a40 	vmov.f32	s14, s0
 80056e8:	eef0 7a60 	vmov.f32	s15, s1
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 80056f2:	bf00      	nop
 80056f4:	3740      	adds	r7, #64	; 0x40
 80056f6:	46bd      	mov	sp, r7
 80056f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056fc:	f3af 8000 	nop.w
 8005700:	00000000 	.word	0x00000000
 8005704:	40cc2900 	.word	0x40cc2900
 8005708:	00000000 	.word	0x00000000
 800570c:	40606000 	.word	0x40606000
 8005710:	1a63c1f8 	.word	0x1a63c1f8
 8005714:	404ca5dc 	.word	0x404ca5dc
 8005718:	40d00000 	.word	0x40d00000
 800571c:	43aa0000 	.word	0x43aa0000
 8005720:	42121eb8 	.word	0x42121eb8
 8005724:	20000660 	.word	0x20000660
 8005728:	408f4000 	.word	0x408f4000
 800572c:	c0568000 	.word	0xc0568000
 8005730:	40568000 	.word	0x40568000
 8005734:	20000198 	.word	0x20000198
 8005738:	20000150 	.word	0x20000150

0800573c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 800573c:	b5b0      	push	{r4, r5, r7, lr}
 800573e:	b096      	sub	sp, #88	; 0x58
 8005740:	af00      	add	r7, sp, #0
 8005742:	61f8      	str	r0, [r7, #28]
 8005744:	ed87 0b04 	vstr	d0, [r7, #16]
 8005748:	ed87 1b02 	vstr	d1, [r7, #8]
 800574c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005756:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800575a:	f7fa fd39 	bl	80001d0 <__aeabi_dsub>
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800576c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005770:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005774:	f7fa fee4 	bl	8000540 <__aeabi_dmul>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	4620      	mov	r0, r4
 800577e:	4629      	mov	r1, r5
 8005780:	f7fa fd28 	bl	80001d4 <__adddf3>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	69f9      	ldr	r1, [r7, #28]
 800578a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800579a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800579e:	f7fa fecf 	bl	8000540 <__aeabi_dmul>
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	4610      	mov	r0, r2
 80057a8:	4619      	mov	r1, r3
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80057b0:	f7fa fd0e 	bl	80001d0 <__aeabi_dsub>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4610      	mov	r0, r2
 80057ba:	4619      	mov	r1, r3
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80057c2:	f7fa fd05 	bl	80001d0 <__aeabi_dsub>
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	4610      	mov	r0, r2
 80057cc:	4619      	mov	r1, r3
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d4:	f7fa fcfe 	bl	80001d4 <__adddf3>
 80057d8:	4602      	mov	r2, r0
 80057da:	460b      	mov	r3, r1
 80057dc:	4610      	mov	r0, r2
 80057de:	4619      	mov	r1, r3
 80057e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057e4:	f7fa feac 	bl	8000540 <__aeabi_dmul>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4620      	mov	r0, r4
 80057ee:	4629      	mov	r1, r5
 80057f0:	f7fa fcf0 	bl	80001d4 <__adddf3>
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	69f9      	ldr	r1, [r7, #28]
 80057fa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800580a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800580e:	f7fa fe97 	bl	8000540 <__aeabi_dmul>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4620      	mov	r0, r4
 8005818:	4629      	mov	r1, r5
 800581a:	f7fa fcd9 	bl	80001d0 <__aeabi_dsub>
 800581e:	4602      	mov	r2, r0
 8005820:	460b      	mov	r3, r1
 8005822:	69f9      	ldr	r1, [r7, #28]
 8005824:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005834:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005838:	f7fa fe82 	bl	8000540 <__aeabi_dmul>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4620      	mov	r0, r4
 8005842:	4629      	mov	r1, r5
 8005844:	f7fa fcc4 	bl	80001d0 <__aeabi_dsub>
 8005848:	4602      	mov	r2, r0
 800584a:	460b      	mov	r3, r1
 800584c:	69f9      	ldr	r1, [r7, #28]
 800584e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800585e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005862:	f7fa fe6d 	bl	8000540 <__aeabi_dmul>
 8005866:	4602      	mov	r2, r0
 8005868:	460b      	mov	r3, r1
 800586a:	4620      	mov	r0, r4
 800586c:	4629      	mov	r1, r5
 800586e:	f7fa fcb1 	bl	80001d4 <__adddf3>
 8005872:	4602      	mov	r2, r0
 8005874:	460b      	mov	r3, r1
 8005876:	69f9      	ldr	r1, [r7, #28]
 8005878:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005888:	f7fa fca4 	bl	80001d4 <__adddf3>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800589a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800589e:	f7fa ff79 	bl	8000794 <__aeabi_ddiv>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80058b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80058b4:	f7fa ff6e 	bl	8000794 <__aeabi_ddiv>
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80058c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80058ca:	f7fa fc81 	bl	80001d0 <__aeabi_dsub>
 80058ce:	4602      	mov	r2, r0
 80058d0:	460b      	mov	r3, r1
 80058d2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80058dc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80058e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058e4:	f7fa fe2c 	bl	8000540 <__aeabi_dmul>
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4620      	mov	r0, r4
 80058ee:	4629      	mov	r1, r5
 80058f0:	f7fa fc70 	bl	80001d4 <__adddf3>
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	69f9      	ldr	r1, [r7, #28]
 80058fa:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8005904:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005908:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800590c:	f7fa fe18 	bl	8000540 <__aeabi_dmul>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	4620      	mov	r0, r4
 8005916:	4629      	mov	r1, r5
 8005918:	f7fa fc5c 	bl	80001d4 <__adddf3>
 800591c:	4602      	mov	r2, r0
 800591e:	460b      	mov	r3, r1
 8005920:	69f9      	ldr	r1, [r7, #28]
 8005922:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800592c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8005936:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8005940:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005944:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005948:	f7fa fdfa 	bl	8000540 <__aeabi_dmul>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	4620      	mov	r0, r4
 8005952:	4629      	mov	r1, r5
 8005954:	f7fa fc3c 	bl	80001d0 <__aeabi_dsub>
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	69f9      	ldr	r1, [r7, #28]
 800595e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8005968:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800596c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005970:	f7fa fde6 	bl	8000540 <__aeabi_dmul>
 8005974:	4602      	mov	r2, r0
 8005976:	460b      	mov	r3, r1
 8005978:	4620      	mov	r0, r4
 800597a:	4629      	mov	r1, r5
 800597c:	f7fa fc28 	bl	80001d0 <__aeabi_dsub>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	69f9      	ldr	r1, [r7, #28]
 8005986:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8005990:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005994:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005998:	f7fa fdd2 	bl	8000540 <__aeabi_dmul>
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	4620      	mov	r0, r4
 80059a2:	4629      	mov	r1, r5
 80059a4:	f7fa fc14 	bl	80001d0 <__aeabi_dsub>
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	69f9      	ldr	r1, [r7, #28]
 80059ae:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80059b8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80059bc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80059c0:	f7fa fdbe 	bl	8000540 <__aeabi_dmul>
 80059c4:	4602      	mov	r2, r0
 80059c6:	460b      	mov	r3, r1
 80059c8:	4620      	mov	r0, r4
 80059ca:	4629      	mov	r1, r5
 80059cc:	f7fa fc00 	bl	80001d0 <__aeabi_dsub>
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	69f9      	ldr	r1, [r7, #28]
 80059d6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80059e0:	ec43 2b17 	vmov	d7, r2, r3
};
 80059e4:	eeb0 0a47 	vmov.f32	s0, s14
 80059e8:	eef0 0a67 	vmov.f32	s1, s15
 80059ec:	3758      	adds	r7, #88	; 0x58
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080059f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80059f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80059f8:	480d      	ldr	r0, [pc, #52]	; (8005a30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80059fa:	490e      	ldr	r1, [pc, #56]	; (8005a34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80059fc:	4a0e      	ldr	r2, [pc, #56]	; (8005a38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80059fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a00:	e002      	b.n	8005a08 <LoopCopyDataInit>

08005a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a06:	3304      	adds	r3, #4

08005a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a0c:	d3f9      	bcc.n	8005a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a0e:	4a0b      	ldr	r2, [pc, #44]	; (8005a3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005a10:	4c0b      	ldr	r4, [pc, #44]	; (8005a40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a14:	e001      	b.n	8005a1a <LoopFillZerobss>

08005a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a18:	3204      	adds	r2, #4

08005a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a1c:	d3fb      	bcc.n	8005a16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005a1e:	f7fc fbeb 	bl	80021f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005a22:	f009 fd2f 	bl	800f484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a26:	f7fb fc37 	bl	8001298 <main>
  bx  lr    
 8005a2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005a2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a34:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8005a38:	08010390 	.word	0x08010390
  ldr r2, =_sbss
 8005a3c:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8005a40:	20000d54 	.word	0x20000d54

08005a44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a44:	e7fe      	b.n	8005a44 <ADC_IRQHandler>
	...

08005a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005a4c:	4b0e      	ldr	r3, [pc, #56]	; (8005a88 <HAL_Init+0x40>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a0d      	ldr	r2, [pc, #52]	; (8005a88 <HAL_Init+0x40>)
 8005a52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005a58:	4b0b      	ldr	r3, [pc, #44]	; (8005a88 <HAL_Init+0x40>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a0a      	ldr	r2, [pc, #40]	; (8005a88 <HAL_Init+0x40>)
 8005a5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005a64:	4b08      	ldr	r3, [pc, #32]	; (8005a88 <HAL_Init+0x40>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a07      	ldr	r2, [pc, #28]	; (8005a88 <HAL_Init+0x40>)
 8005a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a70:	2003      	movs	r0, #3
 8005a72:	f000 f94f 	bl	8005d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005a76:	2000      	movs	r0, #0
 8005a78:	f000 f808 	bl	8005a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005a7c:	f7fc f878 	bl	8001b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	40023c00 	.word	0x40023c00

08005a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005a94:	4b12      	ldr	r3, [pc, #72]	; (8005ae0 <HAL_InitTick+0x54>)
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	4b12      	ldr	r3, [pc, #72]	; (8005ae4 <HAL_InitTick+0x58>)
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 f967 	bl	8005d7e <HAL_SYSTICK_Config>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e00e      	b.n	8005ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b0f      	cmp	r3, #15
 8005abe:	d80a      	bhi.n	8005ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	6879      	ldr	r1, [r7, #4]
 8005ac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ac8:	f000 f92f 	bl	8005d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005acc:	4a06      	ldr	r2, [pc, #24]	; (8005ae8 <HAL_InitTick+0x5c>)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	e000      	b.n	8005ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	20000004 	.word	0x20000004
 8005ae4:	200001e4 	.word	0x200001e4
 8005ae8:	200001e0 	.word	0x200001e0

08005aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005aec:	b480      	push	{r7}
 8005aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005af0:	4b06      	ldr	r3, [pc, #24]	; (8005b0c <HAL_IncTick+0x20>)
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	461a      	mov	r2, r3
 8005af6:	4b06      	ldr	r3, [pc, #24]	; (8005b10 <HAL_IncTick+0x24>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4413      	add	r3, r2
 8005afc:	4a04      	ldr	r2, [pc, #16]	; (8005b10 <HAL_IncTick+0x24>)
 8005afe:	6013      	str	r3, [r2, #0]
}
 8005b00:	bf00      	nop
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	200001e4 	.word	0x200001e4
 8005b10:	20000664 	.word	0x20000664

08005b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b14:	b480      	push	{r7}
 8005b16:	af00      	add	r7, sp, #0
  return uwTick;
 8005b18:	4b03      	ldr	r3, [pc, #12]	; (8005b28 <HAL_GetTick+0x14>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	20000664 	.word	0x20000664

08005b2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b34:	f7ff ffee 	bl	8005b14 <HAL_GetTick>
 8005b38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b44:	d005      	beq.n	8005b52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b46:	4b0a      	ldr	r3, [pc, #40]	; (8005b70 <HAL_Delay+0x44>)
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4413      	add	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005b52:	bf00      	nop
 8005b54:	f7ff ffde 	bl	8005b14 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d8f7      	bhi.n	8005b54 <HAL_Delay+0x28>
  {
  }
}
 8005b64:	bf00      	nop
 8005b66:	bf00      	nop
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	200001e4 	.word	0x200001e4

08005b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b84:	4b0c      	ldr	r3, [pc, #48]	; (8005bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b90:	4013      	ands	r3, r2
 8005b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ba6:	4a04      	ldr	r2, [pc, #16]	; (8005bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	60d3      	str	r3, [r2, #12]
}
 8005bac:	bf00      	nop
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	e000ed00 	.word	0xe000ed00

08005bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bc0:	4b04      	ldr	r3, [pc, #16]	; (8005bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	0a1b      	lsrs	r3, r3, #8
 8005bc6:	f003 0307 	and.w	r3, r3, #7
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	e000ed00 	.word	0xe000ed00

08005bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	4603      	mov	r3, r0
 8005be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	db0b      	blt.n	8005c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bea:	79fb      	ldrb	r3, [r7, #7]
 8005bec:	f003 021f 	and.w	r2, r3, #31
 8005bf0:	4907      	ldr	r1, [pc, #28]	; (8005c10 <__NVIC_EnableIRQ+0x38>)
 8005bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bf6:	095b      	lsrs	r3, r3, #5
 8005bf8:	2001      	movs	r0, #1
 8005bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8005bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	e000e100 	.word	0xe000e100

08005c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	6039      	str	r1, [r7, #0]
 8005c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	db0a      	blt.n	8005c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	490c      	ldr	r1, [pc, #48]	; (8005c60 <__NVIC_SetPriority+0x4c>)
 8005c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c32:	0112      	lsls	r2, r2, #4
 8005c34:	b2d2      	uxtb	r2, r2
 8005c36:	440b      	add	r3, r1
 8005c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c3c:	e00a      	b.n	8005c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	4908      	ldr	r1, [pc, #32]	; (8005c64 <__NVIC_SetPriority+0x50>)
 8005c44:	79fb      	ldrb	r3, [r7, #7]
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	3b04      	subs	r3, #4
 8005c4c:	0112      	lsls	r2, r2, #4
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	440b      	add	r3, r1
 8005c52:	761a      	strb	r2, [r3, #24]
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	e000e100 	.word	0xe000e100
 8005c64:	e000ed00 	.word	0xe000ed00

08005c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b089      	sub	sp, #36	; 0x24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f003 0307 	and.w	r3, r3, #7
 8005c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	f1c3 0307 	rsb	r3, r3, #7
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	bf28      	it	cs
 8005c86:	2304      	movcs	r3, #4
 8005c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	2b06      	cmp	r3, #6
 8005c90:	d902      	bls.n	8005c98 <NVIC_EncodePriority+0x30>
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	3b03      	subs	r3, #3
 8005c96:	e000      	b.n	8005c9a <NVIC_EncodePriority+0x32>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca6:	43da      	mvns	r2, r3
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	401a      	ands	r2, r3
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005cb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cba:	43d9      	mvns	r1, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cc0:	4313      	orrs	r3, r2
         );
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3724      	adds	r7, #36	; 0x24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
	...

08005cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ce0:	d301      	bcc.n	8005ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e00f      	b.n	8005d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ce6:	4a0a      	ldr	r2, [pc, #40]	; (8005d10 <SysTick_Config+0x40>)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005cee:	210f      	movs	r1, #15
 8005cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cf4:	f7ff ff8e 	bl	8005c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005cf8:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <SysTick_Config+0x40>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cfe:	4b04      	ldr	r3, [pc, #16]	; (8005d10 <SysTick_Config+0x40>)
 8005d00:	2207      	movs	r2, #7
 8005d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	e000e010 	.word	0xe000e010

08005d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7ff ff29 	bl	8005b74 <__NVIC_SetPriorityGrouping>
}
 8005d22:	bf00      	nop
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b086      	sub	sp, #24
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	4603      	mov	r3, r0
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	607a      	str	r2, [r7, #4]
 8005d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d3c:	f7ff ff3e 	bl	8005bbc <__NVIC_GetPriorityGrouping>
 8005d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	68b9      	ldr	r1, [r7, #8]
 8005d46:	6978      	ldr	r0, [r7, #20]
 8005d48:	f7ff ff8e 	bl	8005c68 <NVIC_EncodePriority>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d52:	4611      	mov	r1, r2
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7ff ff5d 	bl	8005c14 <__NVIC_SetPriority>
}
 8005d5a:	bf00      	nop
 8005d5c:	3718      	adds	r7, #24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b082      	sub	sp, #8
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	4603      	mov	r3, r0
 8005d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7ff ff31 	bl	8005bd8 <__NVIC_EnableIRQ>
}
 8005d76:	bf00      	nop
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b082      	sub	sp, #8
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7ff ffa2 	bl	8005cd0 <SysTick_Config>
 8005d8c:	4603      	mov	r3, r0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3708      	adds	r7, #8
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
	...

08005d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b089      	sub	sp, #36	; 0x24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005daa:	2300      	movs	r3, #0
 8005dac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005dae:	2300      	movs	r3, #0
 8005db0:	61fb      	str	r3, [r7, #28]
 8005db2:	e16b      	b.n	800608c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005db4:	2201      	movs	r2, #1
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	f040 815a 	bne.w	8006086 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d005      	beq.n	8005dea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d130      	bne.n	8005e4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	2203      	movs	r2, #3
 8005df6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfa:	43db      	mvns	r3, r3
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	4013      	ands	r3, r2
 8005e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	68da      	ldr	r2, [r3, #12]
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e20:	2201      	movs	r2, #1
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	fa02 f303 	lsl.w	r3, r2, r3
 8005e28:	43db      	mvns	r3, r3
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	091b      	lsrs	r3, r3, #4
 8005e36:	f003 0201 	and.w	r2, r3, #1
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f003 0303 	and.w	r3, r3, #3
 8005e54:	2b03      	cmp	r3, #3
 8005e56:	d017      	beq.n	8005e88 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	2203      	movs	r2, #3
 8005e64:	fa02 f303 	lsl.w	r3, r2, r3
 8005e68:	43db      	mvns	r3, r3
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f003 0303 	and.w	r3, r3, #3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d123      	bne.n	8005edc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	08da      	lsrs	r2, r3, #3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3208      	adds	r2, #8
 8005e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	f003 0307 	and.w	r3, r3, #7
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	220f      	movs	r2, #15
 8005eac:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb0:	43db      	mvns	r3, r3
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	691a      	ldr	r2, [r3, #16]
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	f003 0307 	and.w	r3, r3, #7
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	08da      	lsrs	r2, r3, #3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	3208      	adds	r2, #8
 8005ed6:	69b9      	ldr	r1, [r7, #24]
 8005ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	005b      	lsls	r3, r3, #1
 8005ee6:	2203      	movs	r2, #3
 8005ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eec:	43db      	mvns	r3, r3
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f003 0203 	and.w	r2, r3, #3
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	fa02 f303 	lsl.w	r3, r2, r3
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f000 80b4 	beq.w	8006086 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	4b60      	ldr	r3, [pc, #384]	; (80060a4 <HAL_GPIO_Init+0x30c>)
 8005f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f26:	4a5f      	ldr	r2, [pc, #380]	; (80060a4 <HAL_GPIO_Init+0x30c>)
 8005f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8005f2e:	4b5d      	ldr	r3, [pc, #372]	; (80060a4 <HAL_GPIO_Init+0x30c>)
 8005f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f3a:	4a5b      	ldr	r2, [pc, #364]	; (80060a8 <HAL_GPIO_Init+0x310>)
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	089b      	lsrs	r3, r3, #2
 8005f40:	3302      	adds	r3, #2
 8005f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	f003 0303 	and.w	r3, r3, #3
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	220f      	movs	r2, #15
 8005f52:	fa02 f303 	lsl.w	r3, r2, r3
 8005f56:	43db      	mvns	r3, r3
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a52      	ldr	r2, [pc, #328]	; (80060ac <HAL_GPIO_Init+0x314>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d02b      	beq.n	8005fbe <HAL_GPIO_Init+0x226>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a51      	ldr	r2, [pc, #324]	; (80060b0 <HAL_GPIO_Init+0x318>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d025      	beq.n	8005fba <HAL_GPIO_Init+0x222>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a50      	ldr	r2, [pc, #320]	; (80060b4 <HAL_GPIO_Init+0x31c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d01f      	beq.n	8005fb6 <HAL_GPIO_Init+0x21e>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a4f      	ldr	r2, [pc, #316]	; (80060b8 <HAL_GPIO_Init+0x320>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d019      	beq.n	8005fb2 <HAL_GPIO_Init+0x21a>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a4e      	ldr	r2, [pc, #312]	; (80060bc <HAL_GPIO_Init+0x324>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d013      	beq.n	8005fae <HAL_GPIO_Init+0x216>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a4d      	ldr	r2, [pc, #308]	; (80060c0 <HAL_GPIO_Init+0x328>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d00d      	beq.n	8005faa <HAL_GPIO_Init+0x212>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a4c      	ldr	r2, [pc, #304]	; (80060c4 <HAL_GPIO_Init+0x32c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d007      	beq.n	8005fa6 <HAL_GPIO_Init+0x20e>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a4b      	ldr	r2, [pc, #300]	; (80060c8 <HAL_GPIO_Init+0x330>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d101      	bne.n	8005fa2 <HAL_GPIO_Init+0x20a>
 8005f9e:	2307      	movs	r3, #7
 8005fa0:	e00e      	b.n	8005fc0 <HAL_GPIO_Init+0x228>
 8005fa2:	2308      	movs	r3, #8
 8005fa4:	e00c      	b.n	8005fc0 <HAL_GPIO_Init+0x228>
 8005fa6:	2306      	movs	r3, #6
 8005fa8:	e00a      	b.n	8005fc0 <HAL_GPIO_Init+0x228>
 8005faa:	2305      	movs	r3, #5
 8005fac:	e008      	b.n	8005fc0 <HAL_GPIO_Init+0x228>
 8005fae:	2304      	movs	r3, #4
 8005fb0:	e006      	b.n	8005fc0 <HAL_GPIO_Init+0x228>
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e004      	b.n	8005fc0 <HAL_GPIO_Init+0x228>
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	e002      	b.n	8005fc0 <HAL_GPIO_Init+0x228>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e000      	b.n	8005fc0 <HAL_GPIO_Init+0x228>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	69fa      	ldr	r2, [r7, #28]
 8005fc2:	f002 0203 	and.w	r2, r2, #3
 8005fc6:	0092      	lsls	r2, r2, #2
 8005fc8:	4093      	lsls	r3, r2
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fd0:	4935      	ldr	r1, [pc, #212]	; (80060a8 <HAL_GPIO_Init+0x310>)
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	089b      	lsrs	r3, r3, #2
 8005fd6:	3302      	adds	r3, #2
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005fde:	4b3b      	ldr	r3, [pc, #236]	; (80060cc <HAL_GPIO_Init+0x334>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	43db      	mvns	r3, r3
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	4013      	ands	r3, r2
 8005fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006002:	4a32      	ldr	r2, [pc, #200]	; (80060cc <HAL_GPIO_Init+0x334>)
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006008:	4b30      	ldr	r3, [pc, #192]	; (80060cc <HAL_GPIO_Init+0x334>)
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	43db      	mvns	r3, r3
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	4013      	ands	r3, r2
 8006016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d003      	beq.n	800602c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	4313      	orrs	r3, r2
 800602a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800602c:	4a27      	ldr	r2, [pc, #156]	; (80060cc <HAL_GPIO_Init+0x334>)
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006032:	4b26      	ldr	r3, [pc, #152]	; (80060cc <HAL_GPIO_Init+0x334>)
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	43db      	mvns	r3, r3
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	4013      	ands	r3, r2
 8006040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	4313      	orrs	r3, r2
 8006054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006056:	4a1d      	ldr	r2, [pc, #116]	; (80060cc <HAL_GPIO_Init+0x334>)
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800605c:	4b1b      	ldr	r3, [pc, #108]	; (80060cc <HAL_GPIO_Init+0x334>)
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	43db      	mvns	r3, r3
 8006066:	69ba      	ldr	r2, [r7, #24]
 8006068:	4013      	ands	r3, r2
 800606a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	4313      	orrs	r3, r2
 800607e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006080:	4a12      	ldr	r2, [pc, #72]	; (80060cc <HAL_GPIO_Init+0x334>)
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	3301      	adds	r3, #1
 800608a:	61fb      	str	r3, [r7, #28]
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	2b0f      	cmp	r3, #15
 8006090:	f67f ae90 	bls.w	8005db4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006094:	bf00      	nop
 8006096:	bf00      	nop
 8006098:	3724      	adds	r7, #36	; 0x24
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	40023800 	.word	0x40023800
 80060a8:	40013800 	.word	0x40013800
 80060ac:	40020000 	.word	0x40020000
 80060b0:	40020400 	.word	0x40020400
 80060b4:	40020800 	.word	0x40020800
 80060b8:	40020c00 	.word	0x40020c00
 80060bc:	40021000 	.word	0x40021000
 80060c0:	40021400 	.word	0x40021400
 80060c4:	40021800 	.word	0x40021800
 80060c8:	40021c00 	.word	0x40021c00
 80060cc:	40013c00 	.word	0x40013c00

080060d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	460b      	mov	r3, r1
 80060da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	691a      	ldr	r2, [r3, #16]
 80060e0:	887b      	ldrh	r3, [r7, #2]
 80060e2:	4013      	ands	r3, r2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d002      	beq.n	80060ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80060e8:	2301      	movs	r3, #1
 80060ea:	73fb      	strb	r3, [r7, #15]
 80060ec:	e001      	b.n	80060f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80060ee:	2300      	movs	r3, #0
 80060f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80060f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	460b      	mov	r3, r1
 800610a:	807b      	strh	r3, [r7, #2]
 800610c:	4613      	mov	r3, r2
 800610e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006110:	787b      	ldrb	r3, [r7, #1]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006116:	887a      	ldrh	r2, [r7, #2]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800611c:	e003      	b.n	8006126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800611e:	887b      	ldrh	r3, [r7, #2]
 8006120:	041a      	lsls	r2, r3, #16
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	619a      	str	r2, [r3, #24]
}
 8006126:	bf00      	nop
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006132:	b480      	push	{r7}
 8006134:	b085      	sub	sp, #20
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	460b      	mov	r3, r1
 800613c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006144:	887a      	ldrh	r2, [r7, #2]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	4013      	ands	r3, r2
 800614a:	041a      	lsls	r2, r3, #16
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	43d9      	mvns	r1, r3
 8006150:	887b      	ldrh	r3, [r7, #2]
 8006152:	400b      	ands	r3, r1
 8006154:	431a      	orrs	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	619a      	str	r2, [r3, #24]
}
 800615a:	bf00      	nop
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8006166:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006168:	b08f      	sub	sp, #60	; 0x3c
 800616a:	af0a      	add	r7, sp, #40	; 0x28
 800616c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e054      	b.n	8006222 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d106      	bne.n	8006198 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f008 fec6 	bl	800ef24 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2203      	movs	r2, #3
 800619c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d102      	bne.n	80061b2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f006 f868 	bl	800c28c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	603b      	str	r3, [r7, #0]
 80061c2:	687e      	ldr	r6, [r7, #4]
 80061c4:	466d      	mov	r5, sp
 80061c6:	f106 0410 	add.w	r4, r6, #16
 80061ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80061d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80061da:	1d33      	adds	r3, r6, #4
 80061dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061de:	6838      	ldr	r0, [r7, #0]
 80061e0:	f005 ffe2 	bl	800c1a8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2101      	movs	r1, #1
 80061ea:	4618      	mov	r0, r3
 80061ec:	f006 f85f 	bl	800c2ae <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	603b      	str	r3, [r7, #0]
 80061f6:	687e      	ldr	r6, [r7, #4]
 80061f8:	466d      	mov	r5, sp
 80061fa:	f106 0410 	add.w	r4, r6, #16
 80061fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006200:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006204:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006206:	e894 0003 	ldmia.w	r4, {r0, r1}
 800620a:	e885 0003 	stmia.w	r5, {r0, r1}
 800620e:	1d33      	adds	r3, r6, #4
 8006210:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006212:	6838      	ldr	r0, [r7, #0]
 8006214:	f006 f972 	bl	800c4fc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800622a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800622a:	b590      	push	{r4, r7, lr}
 800622c:	b089      	sub	sp, #36	; 0x24
 800622e:	af04      	add	r7, sp, #16
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	4608      	mov	r0, r1
 8006234:	4611      	mov	r1, r2
 8006236:	461a      	mov	r2, r3
 8006238:	4603      	mov	r3, r0
 800623a:	70fb      	strb	r3, [r7, #3]
 800623c:	460b      	mov	r3, r1
 800623e:	70bb      	strb	r3, [r7, #2]
 8006240:	4613      	mov	r3, r2
 8006242:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800624a:	2b01      	cmp	r3, #1
 800624c:	d101      	bne.n	8006252 <HAL_HCD_HC_Init+0x28>
 800624e:	2302      	movs	r3, #2
 8006250:	e076      	b.n	8006340 <HAL_HCD_HC_Init+0x116>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800625a:	78fb      	ldrb	r3, [r7, #3]
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	212c      	movs	r1, #44	; 0x2c
 8006260:	fb01 f303 	mul.w	r3, r1, r3
 8006264:	4413      	add	r3, r2
 8006266:	333d      	adds	r3, #61	; 0x3d
 8006268:	2200      	movs	r2, #0
 800626a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800626c:	78fb      	ldrb	r3, [r7, #3]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	212c      	movs	r1, #44	; 0x2c
 8006272:	fb01 f303 	mul.w	r3, r1, r3
 8006276:	4413      	add	r3, r2
 8006278:	3338      	adds	r3, #56	; 0x38
 800627a:	787a      	ldrb	r2, [r7, #1]
 800627c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800627e:	78fb      	ldrb	r3, [r7, #3]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	212c      	movs	r1, #44	; 0x2c
 8006284:	fb01 f303 	mul.w	r3, r1, r3
 8006288:	4413      	add	r3, r2
 800628a:	3340      	adds	r3, #64	; 0x40
 800628c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800628e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006290:	78fb      	ldrb	r3, [r7, #3]
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	212c      	movs	r1, #44	; 0x2c
 8006296:	fb01 f303 	mul.w	r3, r1, r3
 800629a:	4413      	add	r3, r2
 800629c:	3339      	adds	r3, #57	; 0x39
 800629e:	78fa      	ldrb	r2, [r7, #3]
 80062a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80062a2:	78fb      	ldrb	r3, [r7, #3]
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	212c      	movs	r1, #44	; 0x2c
 80062a8:	fb01 f303 	mul.w	r3, r1, r3
 80062ac:	4413      	add	r3, r2
 80062ae:	333f      	adds	r3, #63	; 0x3f
 80062b0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80062b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80062b6:	78fb      	ldrb	r3, [r7, #3]
 80062b8:	78ba      	ldrb	r2, [r7, #2]
 80062ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062be:	b2d0      	uxtb	r0, r2
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	212c      	movs	r1, #44	; 0x2c
 80062c4:	fb01 f303 	mul.w	r3, r1, r3
 80062c8:	4413      	add	r3, r2
 80062ca:	333a      	adds	r3, #58	; 0x3a
 80062cc:	4602      	mov	r2, r0
 80062ce:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80062d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	da09      	bge.n	80062ec <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80062d8:	78fb      	ldrb	r3, [r7, #3]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	212c      	movs	r1, #44	; 0x2c
 80062de:	fb01 f303 	mul.w	r3, r1, r3
 80062e2:	4413      	add	r3, r2
 80062e4:	333b      	adds	r3, #59	; 0x3b
 80062e6:	2201      	movs	r2, #1
 80062e8:	701a      	strb	r2, [r3, #0]
 80062ea:	e008      	b.n	80062fe <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80062ec:	78fb      	ldrb	r3, [r7, #3]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	212c      	movs	r1, #44	; 0x2c
 80062f2:	fb01 f303 	mul.w	r3, r1, r3
 80062f6:	4413      	add	r3, r2
 80062f8:	333b      	adds	r3, #59	; 0x3b
 80062fa:	2200      	movs	r2, #0
 80062fc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80062fe:	78fb      	ldrb	r3, [r7, #3]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	212c      	movs	r1, #44	; 0x2c
 8006304:	fb01 f303 	mul.w	r3, r1, r3
 8006308:	4413      	add	r3, r2
 800630a:	333c      	adds	r3, #60	; 0x3c
 800630c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006310:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6818      	ldr	r0, [r3, #0]
 8006316:	787c      	ldrb	r4, [r7, #1]
 8006318:	78ba      	ldrb	r2, [r7, #2]
 800631a:	78f9      	ldrb	r1, [r7, #3]
 800631c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800631e:	9302      	str	r3, [sp, #8]
 8006320:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006324:	9301      	str	r3, [sp, #4]
 8006326:	f897 3020 	ldrb.w	r3, [r7, #32]
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	4623      	mov	r3, r4
 800632e:	f006 fa67 	bl	800c800 <USB_HC_Init>
 8006332:	4603      	mov	r3, r0
 8006334:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800633e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	bd90      	pop	{r4, r7, pc}

08006348 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	460b      	mov	r3, r1
 8006352:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006354:	2300      	movs	r3, #0
 8006356:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800635e:	2b01      	cmp	r3, #1
 8006360:	d101      	bne.n	8006366 <HAL_HCD_HC_Halt+0x1e>
 8006362:	2302      	movs	r3, #2
 8006364:	e00f      	b.n	8006386 <HAL_HCD_HC_Halt+0x3e>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	78fa      	ldrb	r2, [r7, #3]
 8006374:	4611      	mov	r1, r2
 8006376:	4618      	mov	r0, r3
 8006378:	f006 fca3 	bl	800ccc2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8006384:	7bfb      	ldrb	r3, [r7, #15]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	4608      	mov	r0, r1
 800639a:	4611      	mov	r1, r2
 800639c:	461a      	mov	r2, r3
 800639e:	4603      	mov	r3, r0
 80063a0:	70fb      	strb	r3, [r7, #3]
 80063a2:	460b      	mov	r3, r1
 80063a4:	70bb      	strb	r3, [r7, #2]
 80063a6:	4613      	mov	r3, r2
 80063a8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80063aa:	78fb      	ldrb	r3, [r7, #3]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	212c      	movs	r1, #44	; 0x2c
 80063b0:	fb01 f303 	mul.w	r3, r1, r3
 80063b4:	4413      	add	r3, r2
 80063b6:	333b      	adds	r3, #59	; 0x3b
 80063b8:	78ba      	ldrb	r2, [r7, #2]
 80063ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80063bc:	78fb      	ldrb	r3, [r7, #3]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	212c      	movs	r1, #44	; 0x2c
 80063c2:	fb01 f303 	mul.w	r3, r1, r3
 80063c6:	4413      	add	r3, r2
 80063c8:	333f      	adds	r3, #63	; 0x3f
 80063ca:	787a      	ldrb	r2, [r7, #1]
 80063cc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80063ce:	7c3b      	ldrb	r3, [r7, #16]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d112      	bne.n	80063fa <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80063d4:	78fb      	ldrb	r3, [r7, #3]
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	212c      	movs	r1, #44	; 0x2c
 80063da:	fb01 f303 	mul.w	r3, r1, r3
 80063de:	4413      	add	r3, r2
 80063e0:	3342      	adds	r3, #66	; 0x42
 80063e2:	2203      	movs	r2, #3
 80063e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80063e6:	78fb      	ldrb	r3, [r7, #3]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	212c      	movs	r1, #44	; 0x2c
 80063ec:	fb01 f303 	mul.w	r3, r1, r3
 80063f0:	4413      	add	r3, r2
 80063f2:	333d      	adds	r3, #61	; 0x3d
 80063f4:	7f3a      	ldrb	r2, [r7, #28]
 80063f6:	701a      	strb	r2, [r3, #0]
 80063f8:	e008      	b.n	800640c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80063fa:	78fb      	ldrb	r3, [r7, #3]
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	212c      	movs	r1, #44	; 0x2c
 8006400:	fb01 f303 	mul.w	r3, r1, r3
 8006404:	4413      	add	r3, r2
 8006406:	3342      	adds	r3, #66	; 0x42
 8006408:	2202      	movs	r2, #2
 800640a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800640c:	787b      	ldrb	r3, [r7, #1]
 800640e:	2b03      	cmp	r3, #3
 8006410:	f200 80c6 	bhi.w	80065a0 <HAL_HCD_HC_SubmitRequest+0x210>
 8006414:	a201      	add	r2, pc, #4	; (adr r2, 800641c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8006416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641a:	bf00      	nop
 800641c:	0800642d 	.word	0x0800642d
 8006420:	0800658d 	.word	0x0800658d
 8006424:	08006491 	.word	0x08006491
 8006428:	0800650f 	.word	0x0800650f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800642c:	7c3b      	ldrb	r3, [r7, #16]
 800642e:	2b01      	cmp	r3, #1
 8006430:	f040 80b8 	bne.w	80065a4 <HAL_HCD_HC_SubmitRequest+0x214>
 8006434:	78bb      	ldrb	r3, [r7, #2]
 8006436:	2b00      	cmp	r3, #0
 8006438:	f040 80b4 	bne.w	80065a4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800643c:	8b3b      	ldrh	r3, [r7, #24]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d108      	bne.n	8006454 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8006442:	78fb      	ldrb	r3, [r7, #3]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	212c      	movs	r1, #44	; 0x2c
 8006448:	fb01 f303 	mul.w	r3, r1, r3
 800644c:	4413      	add	r3, r2
 800644e:	3355      	adds	r3, #85	; 0x55
 8006450:	2201      	movs	r2, #1
 8006452:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006454:	78fb      	ldrb	r3, [r7, #3]
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	212c      	movs	r1, #44	; 0x2c
 800645a:	fb01 f303 	mul.w	r3, r1, r3
 800645e:	4413      	add	r3, r2
 8006460:	3355      	adds	r3, #85	; 0x55
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d109      	bne.n	800647c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006468:	78fb      	ldrb	r3, [r7, #3]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	212c      	movs	r1, #44	; 0x2c
 800646e:	fb01 f303 	mul.w	r3, r1, r3
 8006472:	4413      	add	r3, r2
 8006474:	3342      	adds	r3, #66	; 0x42
 8006476:	2200      	movs	r2, #0
 8006478:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800647a:	e093      	b.n	80065a4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800647c:	78fb      	ldrb	r3, [r7, #3]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	212c      	movs	r1, #44	; 0x2c
 8006482:	fb01 f303 	mul.w	r3, r1, r3
 8006486:	4413      	add	r3, r2
 8006488:	3342      	adds	r3, #66	; 0x42
 800648a:	2202      	movs	r2, #2
 800648c:	701a      	strb	r2, [r3, #0]
      break;
 800648e:	e089      	b.n	80065a4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006490:	78bb      	ldrb	r3, [r7, #2]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d11d      	bne.n	80064d2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006496:	78fb      	ldrb	r3, [r7, #3]
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	212c      	movs	r1, #44	; 0x2c
 800649c:	fb01 f303 	mul.w	r3, r1, r3
 80064a0:	4413      	add	r3, r2
 80064a2:	3355      	adds	r3, #85	; 0x55
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d109      	bne.n	80064be <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80064aa:	78fb      	ldrb	r3, [r7, #3]
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	212c      	movs	r1, #44	; 0x2c
 80064b0:	fb01 f303 	mul.w	r3, r1, r3
 80064b4:	4413      	add	r3, r2
 80064b6:	3342      	adds	r3, #66	; 0x42
 80064b8:	2200      	movs	r2, #0
 80064ba:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80064bc:	e073      	b.n	80065a6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80064be:	78fb      	ldrb	r3, [r7, #3]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	212c      	movs	r1, #44	; 0x2c
 80064c4:	fb01 f303 	mul.w	r3, r1, r3
 80064c8:	4413      	add	r3, r2
 80064ca:	3342      	adds	r3, #66	; 0x42
 80064cc:	2202      	movs	r2, #2
 80064ce:	701a      	strb	r2, [r3, #0]
      break;
 80064d0:	e069      	b.n	80065a6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80064d2:	78fb      	ldrb	r3, [r7, #3]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	212c      	movs	r1, #44	; 0x2c
 80064d8:	fb01 f303 	mul.w	r3, r1, r3
 80064dc:	4413      	add	r3, r2
 80064de:	3354      	adds	r3, #84	; 0x54
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d109      	bne.n	80064fa <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80064e6:	78fb      	ldrb	r3, [r7, #3]
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	212c      	movs	r1, #44	; 0x2c
 80064ec:	fb01 f303 	mul.w	r3, r1, r3
 80064f0:	4413      	add	r3, r2
 80064f2:	3342      	adds	r3, #66	; 0x42
 80064f4:	2200      	movs	r2, #0
 80064f6:	701a      	strb	r2, [r3, #0]
      break;
 80064f8:	e055      	b.n	80065a6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80064fa:	78fb      	ldrb	r3, [r7, #3]
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	212c      	movs	r1, #44	; 0x2c
 8006500:	fb01 f303 	mul.w	r3, r1, r3
 8006504:	4413      	add	r3, r2
 8006506:	3342      	adds	r3, #66	; 0x42
 8006508:	2202      	movs	r2, #2
 800650a:	701a      	strb	r2, [r3, #0]
      break;
 800650c:	e04b      	b.n	80065a6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800650e:	78bb      	ldrb	r3, [r7, #2]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d11d      	bne.n	8006550 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006514:	78fb      	ldrb	r3, [r7, #3]
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	212c      	movs	r1, #44	; 0x2c
 800651a:	fb01 f303 	mul.w	r3, r1, r3
 800651e:	4413      	add	r3, r2
 8006520:	3355      	adds	r3, #85	; 0x55
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d109      	bne.n	800653c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006528:	78fb      	ldrb	r3, [r7, #3]
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	212c      	movs	r1, #44	; 0x2c
 800652e:	fb01 f303 	mul.w	r3, r1, r3
 8006532:	4413      	add	r3, r2
 8006534:	3342      	adds	r3, #66	; 0x42
 8006536:	2200      	movs	r2, #0
 8006538:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800653a:	e034      	b.n	80065a6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800653c:	78fb      	ldrb	r3, [r7, #3]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	212c      	movs	r1, #44	; 0x2c
 8006542:	fb01 f303 	mul.w	r3, r1, r3
 8006546:	4413      	add	r3, r2
 8006548:	3342      	adds	r3, #66	; 0x42
 800654a:	2202      	movs	r2, #2
 800654c:	701a      	strb	r2, [r3, #0]
      break;
 800654e:	e02a      	b.n	80065a6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006550:	78fb      	ldrb	r3, [r7, #3]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	212c      	movs	r1, #44	; 0x2c
 8006556:	fb01 f303 	mul.w	r3, r1, r3
 800655a:	4413      	add	r3, r2
 800655c:	3354      	adds	r3, #84	; 0x54
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d109      	bne.n	8006578 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006564:	78fb      	ldrb	r3, [r7, #3]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	212c      	movs	r1, #44	; 0x2c
 800656a:	fb01 f303 	mul.w	r3, r1, r3
 800656e:	4413      	add	r3, r2
 8006570:	3342      	adds	r3, #66	; 0x42
 8006572:	2200      	movs	r2, #0
 8006574:	701a      	strb	r2, [r3, #0]
      break;
 8006576:	e016      	b.n	80065a6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006578:	78fb      	ldrb	r3, [r7, #3]
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	212c      	movs	r1, #44	; 0x2c
 800657e:	fb01 f303 	mul.w	r3, r1, r3
 8006582:	4413      	add	r3, r2
 8006584:	3342      	adds	r3, #66	; 0x42
 8006586:	2202      	movs	r2, #2
 8006588:	701a      	strb	r2, [r3, #0]
      break;
 800658a:	e00c      	b.n	80065a6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800658c:	78fb      	ldrb	r3, [r7, #3]
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	212c      	movs	r1, #44	; 0x2c
 8006592:	fb01 f303 	mul.w	r3, r1, r3
 8006596:	4413      	add	r3, r2
 8006598:	3342      	adds	r3, #66	; 0x42
 800659a:	2200      	movs	r2, #0
 800659c:	701a      	strb	r2, [r3, #0]
      break;
 800659e:	e002      	b.n	80065a6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80065a0:	bf00      	nop
 80065a2:	e000      	b.n	80065a6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80065a4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80065a6:	78fb      	ldrb	r3, [r7, #3]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	212c      	movs	r1, #44	; 0x2c
 80065ac:	fb01 f303 	mul.w	r3, r1, r3
 80065b0:	4413      	add	r3, r2
 80065b2:	3344      	adds	r3, #68	; 0x44
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80065b8:	78fb      	ldrb	r3, [r7, #3]
 80065ba:	8b3a      	ldrh	r2, [r7, #24]
 80065bc:	6879      	ldr	r1, [r7, #4]
 80065be:	202c      	movs	r0, #44	; 0x2c
 80065c0:	fb00 f303 	mul.w	r3, r0, r3
 80065c4:	440b      	add	r3, r1
 80065c6:	334c      	adds	r3, #76	; 0x4c
 80065c8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80065ca:	78fb      	ldrb	r3, [r7, #3]
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	212c      	movs	r1, #44	; 0x2c
 80065d0:	fb01 f303 	mul.w	r3, r1, r3
 80065d4:	4413      	add	r3, r2
 80065d6:	3360      	adds	r3, #96	; 0x60
 80065d8:	2200      	movs	r2, #0
 80065da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80065dc:	78fb      	ldrb	r3, [r7, #3]
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	212c      	movs	r1, #44	; 0x2c
 80065e2:	fb01 f303 	mul.w	r3, r1, r3
 80065e6:	4413      	add	r3, r2
 80065e8:	3350      	adds	r3, #80	; 0x50
 80065ea:	2200      	movs	r2, #0
 80065ec:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80065ee:	78fb      	ldrb	r3, [r7, #3]
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	212c      	movs	r1, #44	; 0x2c
 80065f4:	fb01 f303 	mul.w	r3, r1, r3
 80065f8:	4413      	add	r3, r2
 80065fa:	3339      	adds	r3, #57	; 0x39
 80065fc:	78fa      	ldrb	r2, [r7, #3]
 80065fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006600:	78fb      	ldrb	r3, [r7, #3]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	212c      	movs	r1, #44	; 0x2c
 8006606:	fb01 f303 	mul.w	r3, r1, r3
 800660a:	4413      	add	r3, r2
 800660c:	3361      	adds	r3, #97	; 0x61
 800660e:	2200      	movs	r2, #0
 8006610:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6818      	ldr	r0, [r3, #0]
 8006616:	78fb      	ldrb	r3, [r7, #3]
 8006618:	222c      	movs	r2, #44	; 0x2c
 800661a:	fb02 f303 	mul.w	r3, r2, r3
 800661e:	3338      	adds	r3, #56	; 0x38
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	18d1      	adds	r1, r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	b2db      	uxtb	r3, r3
 800662a:	461a      	mov	r2, r3
 800662c:	f006 f9f6 	bl	800ca1c <USB_HC_StartXfer>
 8006630:	4603      	mov	r3, r0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop

0800663c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4618      	mov	r0, r3
 8006654:	f005 ff0f 	bl	800c476 <USB_GetMode>
 8006658:	4603      	mov	r3, r0
 800665a:	2b01      	cmp	r3, #1
 800665c:	f040 80ef 	bne.w	800683e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4618      	mov	r0, r3
 8006666:	f005 fef3 	bl	800c450 <USB_ReadInterrupts>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 80e5 	beq.w	800683c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4618      	mov	r0, r3
 8006678:	f005 feea 	bl	800c450 <USB_ReadInterrupts>
 800667c:	4603      	mov	r3, r0
 800667e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006682:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006686:	d104      	bne.n	8006692 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006690:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4618      	mov	r0, r3
 8006698:	f005 feda 	bl	800c450 <USB_ReadInterrupts>
 800669c:	4603      	mov	r3, r0
 800669e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066a6:	d104      	bne.n	80066b2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80066b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f005 feca 	bl	800c450 <USB_ReadInterrupts>
 80066bc:	4603      	mov	r3, r0
 80066be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066c6:	d104      	bne.n	80066d2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80066d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f005 feba 	bl	800c450 <USB_ReadInterrupts>
 80066dc:	4603      	mov	r3, r0
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d103      	bne.n	80066ee <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2202      	movs	r2, #2
 80066ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f005 feac 	bl	800c450 <USB_ReadInterrupts>
 80066f8:	4603      	mov	r3, r0
 80066fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006702:	d115      	bne.n	8006730 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800670c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d108      	bne.n	8006730 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f008 fc7e 	bl	800f020 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2101      	movs	r1, #1
 800672a:	4618      	mov	r0, r3
 800672c:	f005 ffa2 	bl	800c674 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4618      	mov	r0, r3
 8006736:	f005 fe8b 	bl	800c450 <USB_ReadInterrupts>
 800673a:	4603      	mov	r3, r0
 800673c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006744:	d102      	bne.n	800674c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f001 f9ff 	bl	8007b4a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4618      	mov	r0, r3
 8006752:	f005 fe7d 	bl	800c450 <USB_ReadInterrupts>
 8006756:	4603      	mov	r3, r0
 8006758:	f003 0308 	and.w	r3, r3, #8
 800675c:	2b08      	cmp	r3, #8
 800675e:	d106      	bne.n	800676e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f008 fc41 	bl	800efe8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2208      	movs	r2, #8
 800676c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4618      	mov	r0, r3
 8006774:	f005 fe6c 	bl	800c450 <USB_ReadInterrupts>
 8006778:	4603      	mov	r3, r0
 800677a:	f003 0310 	and.w	r3, r3, #16
 800677e:	2b10      	cmp	r3, #16
 8006780:	d101      	bne.n	8006786 <HAL_HCD_IRQHandler+0x14a>
 8006782:	2301      	movs	r3, #1
 8006784:	e000      	b.n	8006788 <HAL_HCD_IRQHandler+0x14c>
 8006786:	2300      	movs	r3, #0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d012      	beq.n	80067b2 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	699a      	ldr	r2, [r3, #24]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 0210 	bic.w	r2, r2, #16
 800679a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f001 f902 	bl	80079a6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	699a      	ldr	r2, [r3, #24]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f042 0210 	orr.w	r2, r2, #16
 80067b0:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f005 fe4a 	bl	800c450 <USB_ReadInterrupts>
 80067bc:	4603      	mov	r3, r0
 80067be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067c6:	d13a      	bne.n	800683e <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f006 fa67 	bl	800cca0 <USB_HC_ReadInterrupt>
 80067d2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80067d4:	2300      	movs	r3, #0
 80067d6:	617b      	str	r3, [r7, #20]
 80067d8:	e025      	b.n	8006826 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f003 030f 	and.w	r3, r3, #15
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	fa22 f303 	lsr.w	r3, r2, r3
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d018      	beq.n	8006820 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006804:	d106      	bne.n	8006814 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	b2db      	uxtb	r3, r3
 800680a:	4619      	mov	r1, r3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f8ab 	bl	8006968 <HCD_HC_IN_IRQHandler>
 8006812:	e005      	b.n	8006820 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	b2db      	uxtb	r3, r3
 8006818:	4619      	mov	r1, r3
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 fcc6 	bl	80071ac <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	3301      	adds	r3, #1
 8006824:	617b      	str	r3, [r7, #20]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	429a      	cmp	r2, r3
 800682e:	d3d4      	bcc.n	80067da <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006838:	615a      	str	r2, [r3, #20]
 800683a:	e000      	b.n	800683e <HAL_HCD_IRQHandler+0x202>
      return;
 800683c:	bf00      	nop
    }
  }
}
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006852:	2b01      	cmp	r3, #1
 8006854:	d101      	bne.n	800685a <HAL_HCD_Start+0x16>
 8006856:	2302      	movs	r3, #2
 8006858:	e013      	b.n	8006882 <HAL_HCD_Start+0x3e>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f005 fcff 	bl	800c26a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2101      	movs	r1, #1
 8006872:	4618      	mov	r0, r3
 8006874:	f005 ff62 	bl	800c73c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b082      	sub	sp, #8
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006898:	2b01      	cmp	r3, #1
 800689a:	d101      	bne.n	80068a0 <HAL_HCD_Stop+0x16>
 800689c:	2302      	movs	r3, #2
 800689e:	e00d      	b.n	80068bc <HAL_HCD_Stop+0x32>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f006 fb61 	bl	800cf74 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f005 ff09 	bl	800c6e8 <USB_ResetPort>
 80068d6:	4603      	mov	r3, r0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	460b      	mov	r3, r1
 80068ea:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80068ec:	78fb      	ldrb	r3, [r7, #3]
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	212c      	movs	r1, #44	; 0x2c
 80068f2:	fb01 f303 	mul.w	r3, r1, r3
 80068f6:	4413      	add	r3, r2
 80068f8:	3360      	adds	r3, #96	; 0x60
 80068fa:	781b      	ldrb	r3, [r3, #0]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	460b      	mov	r3, r1
 8006912:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006914:	78fb      	ldrb	r3, [r7, #3]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	212c      	movs	r1, #44	; 0x2c
 800691a:	fb01 f303 	mul.w	r3, r1, r3
 800691e:	4413      	add	r3, r2
 8006920:	3350      	adds	r3, #80	; 0x50
 8006922:	681b      	ldr	r3, [r3, #0]
}
 8006924:	4618      	mov	r0, r3
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4618      	mov	r0, r3
 800693e:	f005 ff4d 	bl	800c7dc <USB_GetCurrentFrame>
 8006942:	4603      	mov	r3, r0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4618      	mov	r0, r3
 800695a:	f005 ff28 	bl	800c7ae <USB_GetHostSpeed>
 800695e:	4603      	mov	r3, r0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	460b      	mov	r3, r1
 8006972:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800697e:	78fb      	ldrb	r3, [r7, #3]
 8006980:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	015a      	lsls	r2, r3, #5
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	4413      	add	r3, r2
 800698a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	2b04      	cmp	r3, #4
 8006996:	d119      	bne.n	80069cc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a4:	461a      	mov	r2, r3
 80069a6:	2304      	movs	r3, #4
 80069a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	0151      	lsls	r1, r2, #5
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	440a      	add	r2, r1
 80069c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069c4:	f043 0302 	orr.w	r3, r3, #2
 80069c8:	60d3      	str	r3, [r2, #12]
 80069ca:	e101      	b.n	8006bd0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069e2:	d12b      	bne.n	8006a3c <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f0:	461a      	mov	r2, r3
 80069f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	212c      	movs	r1, #44	; 0x2c
 80069fe:	fb01 f303 	mul.w	r3, r1, r3
 8006a02:	4413      	add	r3, r2
 8006a04:	3361      	adds	r3, #97	; 0x61
 8006a06:	2207      	movs	r2, #7
 8006a08:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	015a      	lsls	r2, r3, #5
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	4413      	add	r3, r2
 8006a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	0151      	lsls	r1, r2, #5
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	440a      	add	r2, r1
 8006a20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a24:	f043 0302 	orr.w	r3, r3, #2
 8006a28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	b2d2      	uxtb	r2, r2
 8006a32:	4611      	mov	r1, r2
 8006a34:	4618      	mov	r0, r3
 8006a36:	f006 f944 	bl	800ccc2 <USB_HC_Halt>
 8006a3a:	e0c9      	b.n	8006bd0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f003 0320 	and.w	r3, r3, #32
 8006a4e:	2b20      	cmp	r3, #32
 8006a50:	d109      	bne.n	8006a66 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a5e:	461a      	mov	r2, r3
 8006a60:	2320      	movs	r3, #32
 8006a62:	6093      	str	r3, [r2, #8]
 8006a64:	e0b4      	b.n	8006bd0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	015a      	lsls	r2, r3, #5
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f003 0308 	and.w	r3, r3, #8
 8006a78:	2b08      	cmp	r3, #8
 8006a7a:	d133      	bne.n	8006ae4 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	0151      	lsls	r1, r2, #5
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	440a      	add	r2, r1
 8006a92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a96:	f043 0302 	orr.w	r3, r3, #2
 8006a9a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	212c      	movs	r1, #44	; 0x2c
 8006aa2:	fb01 f303 	mul.w	r3, r1, r3
 8006aa6:	4413      	add	r3, r2
 8006aa8:	3361      	adds	r3, #97	; 0x61
 8006aaa:	2205      	movs	r2, #5
 8006aac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	015a      	lsls	r2, r3, #5
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aba:	461a      	mov	r2, r3
 8006abc:	2310      	movs	r3, #16
 8006abe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006acc:	461a      	mov	r2, r3
 8006ace:	2308      	movs	r3, #8
 8006ad0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	b2d2      	uxtb	r2, r2
 8006ada:	4611      	mov	r1, r2
 8006adc:	4618      	mov	r0, r3
 8006ade:	f006 f8f0 	bl	800ccc2 <USB_HC_Halt>
 8006ae2:	e075      	b.n	8006bd0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006afa:	d134      	bne.n	8006b66 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	0151      	lsls	r1, r2, #5
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	440a      	add	r2, r1
 8006b12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b16:	f043 0302 	orr.w	r3, r3, #2
 8006b1a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	212c      	movs	r1, #44	; 0x2c
 8006b22:	fb01 f303 	mul.w	r3, r1, r3
 8006b26:	4413      	add	r3, r2
 8006b28:	3361      	adds	r3, #97	; 0x61
 8006b2a:	2208      	movs	r2, #8
 8006b2c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	2310      	movs	r3, #16
 8006b3e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b52:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	b2d2      	uxtb	r2, r2
 8006b5c:	4611      	mov	r1, r2
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f006 f8af 	bl	800ccc2 <USB_HC_Halt>
 8006b64:	e034      	b.n	8006bd0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	015a      	lsls	r2, r3, #5
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b78:	2b80      	cmp	r3, #128	; 0x80
 8006b7a:	d129      	bne.n	8006bd0 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	015a      	lsls	r2, r3, #5
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	4413      	add	r3, r2
 8006b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	0151      	lsls	r1, r2, #5
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	440a      	add	r2, r1
 8006b92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b96:	f043 0302 	orr.w	r3, r3, #2
 8006b9a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	212c      	movs	r1, #44	; 0x2c
 8006ba2:	fb01 f303 	mul.w	r3, r1, r3
 8006ba6:	4413      	add	r3, r2
 8006ba8:	3361      	adds	r3, #97	; 0x61
 8006baa:	2206      	movs	r2, #6
 8006bac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	b2d2      	uxtb	r2, r2
 8006bb6:	4611      	mov	r1, r2
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f006 f882 	bl	800ccc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bca:	461a      	mov	r2, r3
 8006bcc:	2380      	movs	r3, #128	; 0x80
 8006bce:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	015a      	lsls	r2, r3, #5
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006be6:	d122      	bne.n	8006c2e <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	0151      	lsls	r1, r2, #5
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	440a      	add	r2, r1
 8006bfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c02:	f043 0302 	orr.w	r3, r3, #2
 8006c06:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	b2d2      	uxtb	r2, r2
 8006c10:	4611      	mov	r1, r2
 8006c12:	4618      	mov	r0, r3
 8006c14:	f006 f855 	bl	800ccc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c24:	461a      	mov	r2, r3
 8006c26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c2a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8006c2c:	e2ba      	b.n	80071a4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	f040 811b 	bne.w	8006e7c <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d019      	beq.n	8006c82 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	212c      	movs	r1, #44	; 0x2c
 8006c54:	fb01 f303 	mul.w	r3, r1, r3
 8006c58:	4413      	add	r3, r2
 8006c5a:	3348      	adds	r3, #72	; 0x48
 8006c5c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	0159      	lsls	r1, r3, #5
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	440b      	add	r3, r1
 8006c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006c70:	1ad2      	subs	r2, r2, r3
 8006c72:	6879      	ldr	r1, [r7, #4]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	202c      	movs	r0, #44	; 0x2c
 8006c78:	fb00 f303 	mul.w	r3, r0, r3
 8006c7c:	440b      	add	r3, r1
 8006c7e:	3350      	adds	r3, #80	; 0x50
 8006c80:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	212c      	movs	r1, #44	; 0x2c
 8006c88:	fb01 f303 	mul.w	r3, r1, r3
 8006c8c:	4413      	add	r3, r2
 8006c8e:	3361      	adds	r3, #97	; 0x61
 8006c90:	2201      	movs	r2, #1
 8006c92:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	212c      	movs	r1, #44	; 0x2c
 8006c9a:	fb01 f303 	mul.w	r3, r1, r3
 8006c9e:	4413      	add	r3, r2
 8006ca0:	335c      	adds	r3, #92	; 0x5c
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	015a      	lsls	r2, r3, #5
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	212c      	movs	r1, #44	; 0x2c
 8006cbe:	fb01 f303 	mul.w	r3, r1, r3
 8006cc2:	4413      	add	r3, r2
 8006cc4:	333f      	adds	r3, #63	; 0x3f
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d009      	beq.n	8006ce0 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	212c      	movs	r1, #44	; 0x2c
 8006cd2:	fb01 f303 	mul.w	r3, r1, r3
 8006cd6:	4413      	add	r3, r2
 8006cd8:	333f      	adds	r3, #63	; 0x3f
 8006cda:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d121      	bne.n	8006d24 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	015a      	lsls	r2, r3, #5
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	0151      	lsls	r1, r2, #5
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	440a      	add	r2, r1
 8006cf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cfa:	f043 0302 	orr.w	r3, r3, #2
 8006cfe:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	b2d2      	uxtb	r2, r2
 8006d08:	4611      	mov	r1, r2
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f005 ffd9 	bl	800ccc2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	2310      	movs	r3, #16
 8006d20:	6093      	str	r3, [r2, #8]
 8006d22:	e066      	b.n	8006df2 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	212c      	movs	r1, #44	; 0x2c
 8006d2a:	fb01 f303 	mul.w	r3, r1, r3
 8006d2e:	4413      	add	r3, r2
 8006d30:	333f      	adds	r3, #63	; 0x3f
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	2b03      	cmp	r3, #3
 8006d36:	d127      	bne.n	8006d88 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	0151      	lsls	r1, r2, #5
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	440a      	add	r2, r1
 8006d4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d56:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	212c      	movs	r1, #44	; 0x2c
 8006d5e:	fb01 f303 	mul.w	r3, r1, r3
 8006d62:	4413      	add	r3, r2
 8006d64:	3360      	adds	r3, #96	; 0x60
 8006d66:	2201      	movs	r2, #1
 8006d68:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	b2d9      	uxtb	r1, r3
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	202c      	movs	r0, #44	; 0x2c
 8006d74:	fb00 f303 	mul.w	r3, r0, r3
 8006d78:	4413      	add	r3, r2
 8006d7a:	3360      	adds	r3, #96	; 0x60
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f008 f95b 	bl	800f03c <HAL_HCD_HC_NotifyURBChange_Callback>
 8006d86:	e034      	b.n	8006df2 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	212c      	movs	r1, #44	; 0x2c
 8006d8e:	fb01 f303 	mul.w	r3, r1, r3
 8006d92:	4413      	add	r3, r2
 8006d94:	333f      	adds	r3, #63	; 0x3f
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d12a      	bne.n	8006df2 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	212c      	movs	r1, #44	; 0x2c
 8006da2:	fb01 f303 	mul.w	r3, r1, r3
 8006da6:	4413      	add	r3, r2
 8006da8:	3360      	adds	r3, #96	; 0x60
 8006daa:	2201      	movs	r2, #1
 8006dac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	212c      	movs	r1, #44	; 0x2c
 8006db4:	fb01 f303 	mul.w	r3, r1, r3
 8006db8:	4413      	add	r3, r2
 8006dba:	3354      	adds	r3, #84	; 0x54
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	f083 0301 	eor.w	r3, r3, #1
 8006dc2:	b2d8      	uxtb	r0, r3
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	212c      	movs	r1, #44	; 0x2c
 8006dca:	fb01 f303 	mul.w	r3, r1, r3
 8006dce:	4413      	add	r3, r2
 8006dd0:	3354      	adds	r3, #84	; 0x54
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	b2d9      	uxtb	r1, r3
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	202c      	movs	r0, #44	; 0x2c
 8006de0:	fb00 f303 	mul.w	r3, r0, r3
 8006de4:	4413      	add	r3, r2
 8006de6:	3360      	adds	r3, #96	; 0x60
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	461a      	mov	r2, r3
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f008 f925 	bl	800f03c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d12b      	bne.n	8006e52 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	212c      	movs	r1, #44	; 0x2c
 8006e00:	fb01 f303 	mul.w	r3, r1, r3
 8006e04:	4413      	add	r3, r2
 8006e06:	3348      	adds	r3, #72	; 0x48
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6879      	ldr	r1, [r7, #4]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	202c      	movs	r0, #44	; 0x2c
 8006e10:	fb00 f202 	mul.w	r2, r0, r2
 8006e14:	440a      	add	r2, r1
 8006e16:	3240      	adds	r2, #64	; 0x40
 8006e18:	8812      	ldrh	r2, [r2, #0]
 8006e1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 81be 	beq.w	80071a4 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	212c      	movs	r1, #44	; 0x2c
 8006e2e:	fb01 f303 	mul.w	r3, r1, r3
 8006e32:	4413      	add	r3, r2
 8006e34:	3354      	adds	r3, #84	; 0x54
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	f083 0301 	eor.w	r3, r3, #1
 8006e3c:	b2d8      	uxtb	r0, r3
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	212c      	movs	r1, #44	; 0x2c
 8006e44:	fb01 f303 	mul.w	r3, r1, r3
 8006e48:	4413      	add	r3, r2
 8006e4a:	3354      	adds	r3, #84	; 0x54
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	701a      	strb	r2, [r3, #0]
}
 8006e50:	e1a8      	b.n	80071a4 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	212c      	movs	r1, #44	; 0x2c
 8006e58:	fb01 f303 	mul.w	r3, r1, r3
 8006e5c:	4413      	add	r3, r2
 8006e5e:	3354      	adds	r3, #84	; 0x54
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	f083 0301 	eor.w	r3, r3, #1
 8006e66:	b2d8      	uxtb	r0, r3
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	212c      	movs	r1, #44	; 0x2c
 8006e6e:	fb01 f303 	mul.w	r3, r1, r3
 8006e72:	4413      	add	r3, r2
 8006e74:	3354      	adds	r3, #84	; 0x54
 8006e76:	4602      	mov	r2, r0
 8006e78:	701a      	strb	r2, [r3, #0]
}
 8006e7a:	e193      	b.n	80071a4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f003 0302 	and.w	r3, r3, #2
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	f040 8106 	bne.w	80070a0 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	015a      	lsls	r2, r3, #5
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	0151      	lsls	r1, r2, #5
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	440a      	add	r2, r1
 8006eaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eae:	f023 0302 	bic.w	r3, r3, #2
 8006eb2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	212c      	movs	r1, #44	; 0x2c
 8006eba:	fb01 f303 	mul.w	r3, r1, r3
 8006ebe:	4413      	add	r3, r2
 8006ec0:	3361      	adds	r3, #97	; 0x61
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d109      	bne.n	8006edc <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	212c      	movs	r1, #44	; 0x2c
 8006ece:	fb01 f303 	mul.w	r3, r1, r3
 8006ed2:	4413      	add	r3, r2
 8006ed4:	3360      	adds	r3, #96	; 0x60
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	701a      	strb	r2, [r3, #0]
 8006eda:	e0c9      	b.n	8007070 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	212c      	movs	r1, #44	; 0x2c
 8006ee2:	fb01 f303 	mul.w	r3, r1, r3
 8006ee6:	4413      	add	r3, r2
 8006ee8:	3361      	adds	r3, #97	; 0x61
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	2b05      	cmp	r3, #5
 8006eee:	d109      	bne.n	8006f04 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	212c      	movs	r1, #44	; 0x2c
 8006ef6:	fb01 f303 	mul.w	r3, r1, r3
 8006efa:	4413      	add	r3, r2
 8006efc:	3360      	adds	r3, #96	; 0x60
 8006efe:	2205      	movs	r2, #5
 8006f00:	701a      	strb	r2, [r3, #0]
 8006f02:	e0b5      	b.n	8007070 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	212c      	movs	r1, #44	; 0x2c
 8006f0a:	fb01 f303 	mul.w	r3, r1, r3
 8006f0e:	4413      	add	r3, r2
 8006f10:	3361      	adds	r3, #97	; 0x61
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	2b06      	cmp	r3, #6
 8006f16:	d009      	beq.n	8006f2c <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	212c      	movs	r1, #44	; 0x2c
 8006f1e:	fb01 f303 	mul.w	r3, r1, r3
 8006f22:	4413      	add	r3, r2
 8006f24:	3361      	adds	r3, #97	; 0x61
 8006f26:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006f28:	2b08      	cmp	r3, #8
 8006f2a:	d150      	bne.n	8006fce <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	212c      	movs	r1, #44	; 0x2c
 8006f32:	fb01 f303 	mul.w	r3, r1, r3
 8006f36:	4413      	add	r3, r2
 8006f38:	335c      	adds	r3, #92	; 0x5c
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	6879      	ldr	r1, [r7, #4]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	202c      	movs	r0, #44	; 0x2c
 8006f44:	fb00 f303 	mul.w	r3, r0, r3
 8006f48:	440b      	add	r3, r1
 8006f4a:	335c      	adds	r3, #92	; 0x5c
 8006f4c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	212c      	movs	r1, #44	; 0x2c
 8006f54:	fb01 f303 	mul.w	r3, r1, r3
 8006f58:	4413      	add	r3, r2
 8006f5a:	335c      	adds	r3, #92	; 0x5c
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d912      	bls.n	8006f88 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	212c      	movs	r1, #44	; 0x2c
 8006f68:	fb01 f303 	mul.w	r3, r1, r3
 8006f6c:	4413      	add	r3, r2
 8006f6e:	335c      	adds	r3, #92	; 0x5c
 8006f70:	2200      	movs	r2, #0
 8006f72:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	212c      	movs	r1, #44	; 0x2c
 8006f7a:	fb01 f303 	mul.w	r3, r1, r3
 8006f7e:	4413      	add	r3, r2
 8006f80:	3360      	adds	r3, #96	; 0x60
 8006f82:	2204      	movs	r2, #4
 8006f84:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006f86:	e073      	b.n	8007070 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	212c      	movs	r1, #44	; 0x2c
 8006f8e:	fb01 f303 	mul.w	r3, r1, r3
 8006f92:	4413      	add	r3, r2
 8006f94:	3360      	adds	r3, #96	; 0x60
 8006f96:	2202      	movs	r2, #2
 8006f98:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	015a      	lsls	r2, r3, #5
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006fb0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fb8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	015a      	lsls	r2, r3, #5
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006fcc:	e050      	b.n	8007070 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	212c      	movs	r1, #44	; 0x2c
 8006fd4:	fb01 f303 	mul.w	r3, r1, r3
 8006fd8:	4413      	add	r3, r2
 8006fda:	3361      	adds	r3, #97	; 0x61
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	2b03      	cmp	r3, #3
 8006fe0:	d122      	bne.n	8007028 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	212c      	movs	r1, #44	; 0x2c
 8006fe8:	fb01 f303 	mul.w	r3, r1, r3
 8006fec:	4413      	add	r3, r2
 8006fee:	3360      	adds	r3, #96	; 0x60
 8006ff0:	2202      	movs	r2, #2
 8006ff2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	015a      	lsls	r2, r3, #5
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800700a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007012:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	4413      	add	r3, r2
 800701c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007020:	461a      	mov	r2, r3
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	6013      	str	r3, [r2, #0]
 8007026:	e023      	b.n	8007070 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	212c      	movs	r1, #44	; 0x2c
 800702e:	fb01 f303 	mul.w	r3, r1, r3
 8007032:	4413      	add	r3, r2
 8007034:	3361      	adds	r3, #97	; 0x61
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	2b07      	cmp	r3, #7
 800703a:	d119      	bne.n	8007070 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	212c      	movs	r1, #44	; 0x2c
 8007042:	fb01 f303 	mul.w	r3, r1, r3
 8007046:	4413      	add	r3, r2
 8007048:	335c      	adds	r3, #92	; 0x5c
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	1c5a      	adds	r2, r3, #1
 800704e:	6879      	ldr	r1, [r7, #4]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	202c      	movs	r0, #44	; 0x2c
 8007054:	fb00 f303 	mul.w	r3, r0, r3
 8007058:	440b      	add	r3, r1
 800705a:	335c      	adds	r3, #92	; 0x5c
 800705c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	212c      	movs	r1, #44	; 0x2c
 8007064:	fb01 f303 	mul.w	r3, r1, r3
 8007068:	4413      	add	r3, r2
 800706a:	3360      	adds	r3, #96	; 0x60
 800706c:	2204      	movs	r2, #4
 800706e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	4413      	add	r3, r2
 8007078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800707c:	461a      	mov	r2, r3
 800707e:	2302      	movs	r3, #2
 8007080:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	b2d9      	uxtb	r1, r3
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	202c      	movs	r0, #44	; 0x2c
 800708c:	fb00 f303 	mul.w	r3, r0, r3
 8007090:	4413      	add	r3, r2
 8007092:	3360      	adds	r3, #96	; 0x60
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f007 ffcf 	bl	800f03c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800709e:	e081      	b.n	80071a4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	015a      	lsls	r2, r3, #5
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f003 0310 	and.w	r3, r3, #16
 80070b2:	2b10      	cmp	r3, #16
 80070b4:	d176      	bne.n	80071a4 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	212c      	movs	r1, #44	; 0x2c
 80070bc:	fb01 f303 	mul.w	r3, r1, r3
 80070c0:	4413      	add	r3, r2
 80070c2:	333f      	adds	r3, #63	; 0x3f
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	d121      	bne.n	800710e <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	212c      	movs	r1, #44	; 0x2c
 80070d0:	fb01 f303 	mul.w	r3, r1, r3
 80070d4:	4413      	add	r3, r2
 80070d6:	335c      	adds	r3, #92	; 0x5c
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	0151      	lsls	r1, r2, #5
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	440a      	add	r2, r1
 80070f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070f6:	f043 0302 	orr.w	r3, r3, #2
 80070fa:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	b2d2      	uxtb	r2, r2
 8007104:	4611      	mov	r1, r2
 8007106:	4618      	mov	r0, r3
 8007108:	f005 fddb 	bl	800ccc2 <USB_HC_Halt>
 800710c:	e041      	b.n	8007192 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	212c      	movs	r1, #44	; 0x2c
 8007114:	fb01 f303 	mul.w	r3, r1, r3
 8007118:	4413      	add	r3, r2
 800711a:	333f      	adds	r3, #63	; 0x3f
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d009      	beq.n	8007136 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	212c      	movs	r1, #44	; 0x2c
 8007128:	fb01 f303 	mul.w	r3, r1, r3
 800712c:	4413      	add	r3, r2
 800712e:	333f      	adds	r3, #63	; 0x3f
 8007130:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007132:	2b02      	cmp	r3, #2
 8007134:	d12d      	bne.n	8007192 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	212c      	movs	r1, #44	; 0x2c
 800713c:	fb01 f303 	mul.w	r3, r1, r3
 8007140:	4413      	add	r3, r2
 8007142:	335c      	adds	r3, #92	; 0x5c
 8007144:	2200      	movs	r2, #0
 8007146:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d120      	bne.n	8007192 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	212c      	movs	r1, #44	; 0x2c
 8007156:	fb01 f303 	mul.w	r3, r1, r3
 800715a:	4413      	add	r3, r2
 800715c:	3361      	adds	r3, #97	; 0x61
 800715e:	2203      	movs	r2, #3
 8007160:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	4413      	add	r3, r2
 800716a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	0151      	lsls	r1, r2, #5
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	440a      	add	r2, r1
 8007178:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800717c:	f043 0302 	orr.w	r3, r3, #2
 8007180:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	b2d2      	uxtb	r2, r2
 800718a:	4611      	mov	r1, r2
 800718c:	4618      	mov	r0, r3
 800718e:	f005 fd98 	bl	800ccc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	015a      	lsls	r2, r3, #5
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	4413      	add	r3, r2
 800719a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800719e:	461a      	mov	r2, r3
 80071a0:	2310      	movs	r3, #16
 80071a2:	6093      	str	r3, [r2, #8]
}
 80071a4:	bf00      	nop
 80071a6:	3718      	adds	r7, #24
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b088      	sub	sp, #32
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	460b      	mov	r3, r1
 80071b6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80071c2:	78fb      	ldrb	r3, [r7, #3]
 80071c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	015a      	lsls	r2, r3, #5
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	4413      	add	r3, r2
 80071ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f003 0304 	and.w	r3, r3, #4
 80071d8:	2b04      	cmp	r3, #4
 80071da:	d119      	bne.n	8007210 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	015a      	lsls	r2, r3, #5
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	4413      	add	r3, r2
 80071e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071e8:	461a      	mov	r2, r3
 80071ea:	2304      	movs	r3, #4
 80071ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	0151      	lsls	r1, r2, #5
 8007200:	69ba      	ldr	r2, [r7, #24]
 8007202:	440a      	add	r2, r1
 8007204:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007208:	f043 0302 	orr.w	r3, r3, #2
 800720c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800720e:	e3c6      	b.n	800799e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	015a      	lsls	r2, r3, #5
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	4413      	add	r3, r2
 8007218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f003 0320 	and.w	r3, r3, #32
 8007222:	2b20      	cmp	r3, #32
 8007224:	d13e      	bne.n	80072a4 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	4413      	add	r3, r2
 800722e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007232:	461a      	mov	r2, r3
 8007234:	2320      	movs	r3, #32
 8007236:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	212c      	movs	r1, #44	; 0x2c
 800723e:	fb01 f303 	mul.w	r3, r1, r3
 8007242:	4413      	add	r3, r2
 8007244:	333d      	adds	r3, #61	; 0x3d
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	2b01      	cmp	r3, #1
 800724a:	f040 83a8 	bne.w	800799e <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	212c      	movs	r1, #44	; 0x2c
 8007254:	fb01 f303 	mul.w	r3, r1, r3
 8007258:	4413      	add	r3, r2
 800725a:	333d      	adds	r3, #61	; 0x3d
 800725c:	2200      	movs	r2, #0
 800725e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	212c      	movs	r1, #44	; 0x2c
 8007266:	fb01 f303 	mul.w	r3, r1, r3
 800726a:	4413      	add	r3, r2
 800726c:	3360      	adds	r3, #96	; 0x60
 800726e:	2202      	movs	r2, #2
 8007270:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	015a      	lsls	r2, r3, #5
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	4413      	add	r3, r2
 800727a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	0151      	lsls	r1, r2, #5
 8007284:	69ba      	ldr	r2, [r7, #24]
 8007286:	440a      	add	r2, r1
 8007288:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800728c:	f043 0302 	orr.w	r3, r3, #2
 8007290:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	b2d2      	uxtb	r2, r2
 800729a:	4611      	mov	r1, r2
 800729c:	4618      	mov	r0, r3
 800729e:	f005 fd10 	bl	800ccc2 <USB_HC_Halt>
}
 80072a2:	e37c      	b.n	800799e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	015a      	lsls	r2, r3, #5
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072ba:	d122      	bne.n	8007302 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	0151      	lsls	r1, r2, #5
 80072ce:	69ba      	ldr	r2, [r7, #24]
 80072d0:	440a      	add	r2, r1
 80072d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072d6:	f043 0302 	orr.w	r3, r3, #2
 80072da:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	b2d2      	uxtb	r2, r2
 80072e4:	4611      	mov	r1, r2
 80072e6:	4618      	mov	r0, r3
 80072e8:	f005 fceb 	bl	800ccc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	015a      	lsls	r2, r3, #5
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	4413      	add	r3, r2
 80072f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072f8:	461a      	mov	r2, r3
 80072fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072fe:	6093      	str	r3, [r2, #8]
}
 8007300:	e34d      	b.n	800799e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	4413      	add	r3, r2
 800730a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	2b01      	cmp	r3, #1
 8007316:	d150      	bne.n	80073ba <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	212c      	movs	r1, #44	; 0x2c
 800731e:	fb01 f303 	mul.w	r3, r1, r3
 8007322:	4413      	add	r3, r2
 8007324:	335c      	adds	r3, #92	; 0x5c
 8007326:	2200      	movs	r2, #0
 8007328:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	015a      	lsls	r2, r3, #5
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	4413      	add	r3, r2
 8007332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733c:	2b40      	cmp	r3, #64	; 0x40
 800733e:	d111      	bne.n	8007364 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	212c      	movs	r1, #44	; 0x2c
 8007346:	fb01 f303 	mul.w	r3, r1, r3
 800734a:	4413      	add	r3, r2
 800734c:	333d      	adds	r3, #61	; 0x3d
 800734e:	2201      	movs	r2, #1
 8007350:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	4413      	add	r3, r2
 800735a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800735e:	461a      	mov	r2, r3
 8007360:	2340      	movs	r3, #64	; 0x40
 8007362:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	015a      	lsls	r2, r3, #5
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	4413      	add	r3, r2
 800736c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	0151      	lsls	r1, r2, #5
 8007376:	69ba      	ldr	r2, [r7, #24]
 8007378:	440a      	add	r2, r1
 800737a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800737e:	f043 0302 	orr.w	r3, r3, #2
 8007382:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	697a      	ldr	r2, [r7, #20]
 800738a:	b2d2      	uxtb	r2, r2
 800738c:	4611      	mov	r1, r2
 800738e:	4618      	mov	r0, r3
 8007390:	f005 fc97 	bl	800ccc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	4413      	add	r3, r2
 800739c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073a0:	461a      	mov	r2, r3
 80073a2:	2301      	movs	r3, #1
 80073a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	212c      	movs	r1, #44	; 0x2c
 80073ac:	fb01 f303 	mul.w	r3, r1, r3
 80073b0:	4413      	add	r3, r2
 80073b2:	3361      	adds	r3, #97	; 0x61
 80073b4:	2201      	movs	r2, #1
 80073b6:	701a      	strb	r2, [r3, #0]
}
 80073b8:	e2f1      	b.n	800799e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	015a      	lsls	r2, r3, #5
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	4413      	add	r3, r2
 80073c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073cc:	2b40      	cmp	r3, #64	; 0x40
 80073ce:	d13c      	bne.n	800744a <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	212c      	movs	r1, #44	; 0x2c
 80073d6:	fb01 f303 	mul.w	r3, r1, r3
 80073da:	4413      	add	r3, r2
 80073dc:	3361      	adds	r3, #97	; 0x61
 80073de:	2204      	movs	r2, #4
 80073e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	212c      	movs	r1, #44	; 0x2c
 80073e8:	fb01 f303 	mul.w	r3, r1, r3
 80073ec:	4413      	add	r3, r2
 80073ee:	333d      	adds	r3, #61	; 0x3d
 80073f0:	2201      	movs	r2, #1
 80073f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	212c      	movs	r1, #44	; 0x2c
 80073fa:	fb01 f303 	mul.w	r3, r1, r3
 80073fe:	4413      	add	r3, r2
 8007400:	335c      	adds	r3, #92	; 0x5c
 8007402:	2200      	movs	r2, #0
 8007404:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	4413      	add	r3, r2
 800740e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	0151      	lsls	r1, r2, #5
 8007418:	69ba      	ldr	r2, [r7, #24]
 800741a:	440a      	add	r2, r1
 800741c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007420:	f043 0302 	orr.w	r3, r3, #2
 8007424:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	b2d2      	uxtb	r2, r2
 800742e:	4611      	mov	r1, r2
 8007430:	4618      	mov	r0, r3
 8007432:	f005 fc46 	bl	800ccc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	4413      	add	r3, r2
 800743e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007442:	461a      	mov	r2, r3
 8007444:	2340      	movs	r3, #64	; 0x40
 8007446:	6093      	str	r3, [r2, #8]
}
 8007448:	e2a9      	b.n	800799e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	015a      	lsls	r2, r3, #5
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	4413      	add	r3, r2
 8007452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f003 0308 	and.w	r3, r3, #8
 800745c:	2b08      	cmp	r3, #8
 800745e:	d12a      	bne.n	80074b6 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	015a      	lsls	r2, r3, #5
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	4413      	add	r3, r2
 8007468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800746c:	461a      	mov	r2, r3
 800746e:	2308      	movs	r3, #8
 8007470:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	015a      	lsls	r2, r3, #5
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	4413      	add	r3, r2
 800747a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	0151      	lsls	r1, r2, #5
 8007484:	69ba      	ldr	r2, [r7, #24]
 8007486:	440a      	add	r2, r1
 8007488:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800748c:	f043 0302 	orr.w	r3, r3, #2
 8007490:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	b2d2      	uxtb	r2, r2
 800749a:	4611      	mov	r1, r2
 800749c:	4618      	mov	r0, r3
 800749e:	f005 fc10 	bl	800ccc2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	212c      	movs	r1, #44	; 0x2c
 80074a8:	fb01 f303 	mul.w	r3, r1, r3
 80074ac:	4413      	add	r3, r2
 80074ae:	3361      	adds	r3, #97	; 0x61
 80074b0:	2205      	movs	r2, #5
 80074b2:	701a      	strb	r2, [r3, #0]
}
 80074b4:	e273      	b.n	800799e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	015a      	lsls	r2, r3, #5
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	4413      	add	r3, r2
 80074be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f003 0310 	and.w	r3, r3, #16
 80074c8:	2b10      	cmp	r3, #16
 80074ca:	d150      	bne.n	800756e <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	212c      	movs	r1, #44	; 0x2c
 80074d2:	fb01 f303 	mul.w	r3, r1, r3
 80074d6:	4413      	add	r3, r2
 80074d8:	335c      	adds	r3, #92	; 0x5c
 80074da:	2200      	movs	r2, #0
 80074dc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	212c      	movs	r1, #44	; 0x2c
 80074e4:	fb01 f303 	mul.w	r3, r1, r3
 80074e8:	4413      	add	r3, r2
 80074ea:	3361      	adds	r3, #97	; 0x61
 80074ec:	2203      	movs	r2, #3
 80074ee:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	212c      	movs	r1, #44	; 0x2c
 80074f6:	fb01 f303 	mul.w	r3, r1, r3
 80074fa:	4413      	add	r3, r2
 80074fc:	333d      	adds	r3, #61	; 0x3d
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d112      	bne.n	800752a <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	212c      	movs	r1, #44	; 0x2c
 800750a:	fb01 f303 	mul.w	r3, r1, r3
 800750e:	4413      	add	r3, r2
 8007510:	333c      	adds	r3, #60	; 0x3c
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d108      	bne.n	800752a <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	212c      	movs	r1, #44	; 0x2c
 800751e:	fb01 f303 	mul.w	r3, r1, r3
 8007522:	4413      	add	r3, r2
 8007524:	333d      	adds	r3, #61	; 0x3d
 8007526:	2201      	movs	r2, #1
 8007528:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	4413      	add	r3, r2
 8007532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	697a      	ldr	r2, [r7, #20]
 800753a:	0151      	lsls	r1, r2, #5
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	440a      	add	r2, r1
 8007540:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007544:	f043 0302 	orr.w	r3, r3, #2
 8007548:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	b2d2      	uxtb	r2, r2
 8007552:	4611      	mov	r1, r2
 8007554:	4618      	mov	r0, r3
 8007556:	f005 fbb4 	bl	800ccc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	015a      	lsls	r2, r3, #5
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	4413      	add	r3, r2
 8007562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007566:	461a      	mov	r2, r3
 8007568:	2310      	movs	r3, #16
 800756a:	6093      	str	r3, [r2, #8]
}
 800756c:	e217      	b.n	800799e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	015a      	lsls	r2, r3, #5
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	4413      	add	r3, r2
 8007576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007580:	2b80      	cmp	r3, #128	; 0x80
 8007582:	d174      	bne.n	800766e <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d121      	bne.n	80075d0 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	212c      	movs	r1, #44	; 0x2c
 8007592:	fb01 f303 	mul.w	r3, r1, r3
 8007596:	4413      	add	r3, r2
 8007598:	3361      	adds	r3, #97	; 0x61
 800759a:	2206      	movs	r2, #6
 800759c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	015a      	lsls	r2, r3, #5
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	4413      	add	r3, r2
 80075a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	0151      	lsls	r1, r2, #5
 80075b0:	69ba      	ldr	r2, [r7, #24]
 80075b2:	440a      	add	r2, r1
 80075b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075b8:	f043 0302 	orr.w	r3, r3, #2
 80075bc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	b2d2      	uxtb	r2, r2
 80075c6:	4611      	mov	r1, r2
 80075c8:	4618      	mov	r0, r3
 80075ca:	f005 fb7a 	bl	800ccc2 <USB_HC_Halt>
 80075ce:	e044      	b.n	800765a <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	212c      	movs	r1, #44	; 0x2c
 80075d6:	fb01 f303 	mul.w	r3, r1, r3
 80075da:	4413      	add	r3, r2
 80075dc:	335c      	adds	r3, #92	; 0x5c
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	1c5a      	adds	r2, r3, #1
 80075e2:	6879      	ldr	r1, [r7, #4]
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	202c      	movs	r0, #44	; 0x2c
 80075e8:	fb00 f303 	mul.w	r3, r0, r3
 80075ec:	440b      	add	r3, r1
 80075ee:	335c      	adds	r3, #92	; 0x5c
 80075f0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	212c      	movs	r1, #44	; 0x2c
 80075f8:	fb01 f303 	mul.w	r3, r1, r3
 80075fc:	4413      	add	r3, r2
 80075fe:	335c      	adds	r3, #92	; 0x5c
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b02      	cmp	r3, #2
 8007604:	d920      	bls.n	8007648 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	212c      	movs	r1, #44	; 0x2c
 800760c:	fb01 f303 	mul.w	r3, r1, r3
 8007610:	4413      	add	r3, r2
 8007612:	335c      	adds	r3, #92	; 0x5c
 8007614:	2200      	movs	r2, #0
 8007616:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	212c      	movs	r1, #44	; 0x2c
 800761e:	fb01 f303 	mul.w	r3, r1, r3
 8007622:	4413      	add	r3, r2
 8007624:	3360      	adds	r3, #96	; 0x60
 8007626:	2204      	movs	r2, #4
 8007628:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	b2d9      	uxtb	r1, r3
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	202c      	movs	r0, #44	; 0x2c
 8007634:	fb00 f303 	mul.w	r3, r0, r3
 8007638:	4413      	add	r3, r2
 800763a:	3360      	adds	r3, #96	; 0x60
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	461a      	mov	r2, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f007 fcfb 	bl	800f03c <HAL_HCD_HC_NotifyURBChange_Callback>
 8007646:	e008      	b.n	800765a <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	212c      	movs	r1, #44	; 0x2c
 800764e:	fb01 f303 	mul.w	r3, r1, r3
 8007652:	4413      	add	r3, r2
 8007654:	3360      	adds	r3, #96	; 0x60
 8007656:	2202      	movs	r2, #2
 8007658:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	015a      	lsls	r2, r3, #5
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	4413      	add	r3, r2
 8007662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007666:	461a      	mov	r2, r3
 8007668:	2380      	movs	r3, #128	; 0x80
 800766a:	6093      	str	r3, [r2, #8]
}
 800766c:	e197      	b.n	800799e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	4413      	add	r3, r2
 8007676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007684:	d134      	bne.n	80076f0 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	015a      	lsls	r2, r3, #5
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	4413      	add	r3, r2
 800768e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	0151      	lsls	r1, r2, #5
 8007698:	69ba      	ldr	r2, [r7, #24]
 800769a:	440a      	add	r2, r1
 800769c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076a0:	f043 0302 	orr.w	r3, r3, #2
 80076a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	b2d2      	uxtb	r2, r2
 80076ae:	4611      	mov	r1, r2
 80076b0:	4618      	mov	r0, r3
 80076b2:	f005 fb06 	bl	800ccc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	015a      	lsls	r2, r3, #5
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	4413      	add	r3, r2
 80076be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076c2:	461a      	mov	r2, r3
 80076c4:	2310      	movs	r3, #16
 80076c6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076d4:	461a      	mov	r2, r3
 80076d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	212c      	movs	r1, #44	; 0x2c
 80076e2:	fb01 f303 	mul.w	r3, r1, r3
 80076e6:	4413      	add	r3, r2
 80076e8:	3361      	adds	r3, #97	; 0x61
 80076ea:	2208      	movs	r2, #8
 80076ec:	701a      	strb	r2, [r3, #0]
}
 80076ee:	e156      	b.n	800799e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	015a      	lsls	r2, r3, #5
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	4413      	add	r3, r2
 80076f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f003 0302 	and.w	r3, r3, #2
 8007702:	2b02      	cmp	r3, #2
 8007704:	f040 814b 	bne.w	800799e <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	4413      	add	r3, r2
 8007710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	0151      	lsls	r1, r2, #5
 800771a:	69ba      	ldr	r2, [r7, #24]
 800771c:	440a      	add	r2, r1
 800771e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007722:	f023 0302 	bic.w	r3, r3, #2
 8007726:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	212c      	movs	r1, #44	; 0x2c
 800772e:	fb01 f303 	mul.w	r3, r1, r3
 8007732:	4413      	add	r3, r2
 8007734:	3361      	adds	r3, #97	; 0x61
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d179      	bne.n	8007830 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	212c      	movs	r1, #44	; 0x2c
 8007742:	fb01 f303 	mul.w	r3, r1, r3
 8007746:	4413      	add	r3, r2
 8007748:	3360      	adds	r3, #96	; 0x60
 800774a:	2201      	movs	r2, #1
 800774c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	212c      	movs	r1, #44	; 0x2c
 8007754:	fb01 f303 	mul.w	r3, r1, r3
 8007758:	4413      	add	r3, r2
 800775a:	333f      	adds	r3, #63	; 0x3f
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	2b02      	cmp	r3, #2
 8007760:	d00a      	beq.n	8007778 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	212c      	movs	r1, #44	; 0x2c
 8007768:	fb01 f303 	mul.w	r3, r1, r3
 800776c:	4413      	add	r3, r2
 800776e:	333f      	adds	r3, #63	; 0x3f
 8007770:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007772:	2b03      	cmp	r3, #3
 8007774:	f040 80fc 	bne.w	8007970 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d142      	bne.n	8007806 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	212c      	movs	r1, #44	; 0x2c
 8007786:	fb01 f303 	mul.w	r3, r1, r3
 800778a:	4413      	add	r3, r2
 800778c:	334c      	adds	r3, #76	; 0x4c
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	f000 80ed 	beq.w	8007970 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	212c      	movs	r1, #44	; 0x2c
 800779c:	fb01 f303 	mul.w	r3, r1, r3
 80077a0:	4413      	add	r3, r2
 80077a2:	334c      	adds	r3, #76	; 0x4c
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6879      	ldr	r1, [r7, #4]
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	202c      	movs	r0, #44	; 0x2c
 80077ac:	fb00 f202 	mul.w	r2, r0, r2
 80077b0:	440a      	add	r2, r1
 80077b2:	3240      	adds	r2, #64	; 0x40
 80077b4:	8812      	ldrh	r2, [r2, #0]
 80077b6:	4413      	add	r3, r2
 80077b8:	3b01      	subs	r3, #1
 80077ba:	6879      	ldr	r1, [r7, #4]
 80077bc:	697a      	ldr	r2, [r7, #20]
 80077be:	202c      	movs	r0, #44	; 0x2c
 80077c0:	fb00 f202 	mul.w	r2, r0, r2
 80077c4:	440a      	add	r2, r1
 80077c6:	3240      	adds	r2, #64	; 0x40
 80077c8:	8812      	ldrh	r2, [r2, #0]
 80077ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80077ce:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f000 80ca 	beq.w	8007970 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	212c      	movs	r1, #44	; 0x2c
 80077e2:	fb01 f303 	mul.w	r3, r1, r3
 80077e6:	4413      	add	r3, r2
 80077e8:	3355      	adds	r3, #85	; 0x55
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	f083 0301 	eor.w	r3, r3, #1
 80077f0:	b2d8      	uxtb	r0, r3
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	212c      	movs	r1, #44	; 0x2c
 80077f8:	fb01 f303 	mul.w	r3, r1, r3
 80077fc:	4413      	add	r3, r2
 80077fe:	3355      	adds	r3, #85	; 0x55
 8007800:	4602      	mov	r2, r0
 8007802:	701a      	strb	r2, [r3, #0]
 8007804:	e0b4      	b.n	8007970 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	212c      	movs	r1, #44	; 0x2c
 800780c:	fb01 f303 	mul.w	r3, r1, r3
 8007810:	4413      	add	r3, r2
 8007812:	3355      	adds	r3, #85	; 0x55
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	f083 0301 	eor.w	r3, r3, #1
 800781a:	b2d8      	uxtb	r0, r3
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	212c      	movs	r1, #44	; 0x2c
 8007822:	fb01 f303 	mul.w	r3, r1, r3
 8007826:	4413      	add	r3, r2
 8007828:	3355      	adds	r3, #85	; 0x55
 800782a:	4602      	mov	r2, r0
 800782c:	701a      	strb	r2, [r3, #0]
 800782e:	e09f      	b.n	8007970 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	212c      	movs	r1, #44	; 0x2c
 8007836:	fb01 f303 	mul.w	r3, r1, r3
 800783a:	4413      	add	r3, r2
 800783c:	3361      	adds	r3, #97	; 0x61
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	2b03      	cmp	r3, #3
 8007842:	d109      	bne.n	8007858 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	212c      	movs	r1, #44	; 0x2c
 800784a:	fb01 f303 	mul.w	r3, r1, r3
 800784e:	4413      	add	r3, r2
 8007850:	3360      	adds	r3, #96	; 0x60
 8007852:	2202      	movs	r2, #2
 8007854:	701a      	strb	r2, [r3, #0]
 8007856:	e08b      	b.n	8007970 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	212c      	movs	r1, #44	; 0x2c
 800785e:	fb01 f303 	mul.w	r3, r1, r3
 8007862:	4413      	add	r3, r2
 8007864:	3361      	adds	r3, #97	; 0x61
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	2b04      	cmp	r3, #4
 800786a:	d109      	bne.n	8007880 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	212c      	movs	r1, #44	; 0x2c
 8007872:	fb01 f303 	mul.w	r3, r1, r3
 8007876:	4413      	add	r3, r2
 8007878:	3360      	adds	r3, #96	; 0x60
 800787a:	2202      	movs	r2, #2
 800787c:	701a      	strb	r2, [r3, #0]
 800787e:	e077      	b.n	8007970 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	212c      	movs	r1, #44	; 0x2c
 8007886:	fb01 f303 	mul.w	r3, r1, r3
 800788a:	4413      	add	r3, r2
 800788c:	3361      	adds	r3, #97	; 0x61
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	2b05      	cmp	r3, #5
 8007892:	d109      	bne.n	80078a8 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	212c      	movs	r1, #44	; 0x2c
 800789a:	fb01 f303 	mul.w	r3, r1, r3
 800789e:	4413      	add	r3, r2
 80078a0:	3360      	adds	r3, #96	; 0x60
 80078a2:	2205      	movs	r2, #5
 80078a4:	701a      	strb	r2, [r3, #0]
 80078a6:	e063      	b.n	8007970 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	212c      	movs	r1, #44	; 0x2c
 80078ae:	fb01 f303 	mul.w	r3, r1, r3
 80078b2:	4413      	add	r3, r2
 80078b4:	3361      	adds	r3, #97	; 0x61
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	2b06      	cmp	r3, #6
 80078ba:	d009      	beq.n	80078d0 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	212c      	movs	r1, #44	; 0x2c
 80078c2:	fb01 f303 	mul.w	r3, r1, r3
 80078c6:	4413      	add	r3, r2
 80078c8:	3361      	adds	r3, #97	; 0x61
 80078ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80078cc:	2b08      	cmp	r3, #8
 80078ce:	d14f      	bne.n	8007970 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	212c      	movs	r1, #44	; 0x2c
 80078d6:	fb01 f303 	mul.w	r3, r1, r3
 80078da:	4413      	add	r3, r2
 80078dc:	335c      	adds	r3, #92	; 0x5c
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	1c5a      	adds	r2, r3, #1
 80078e2:	6879      	ldr	r1, [r7, #4]
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	202c      	movs	r0, #44	; 0x2c
 80078e8:	fb00 f303 	mul.w	r3, r0, r3
 80078ec:	440b      	add	r3, r1
 80078ee:	335c      	adds	r3, #92	; 0x5c
 80078f0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	212c      	movs	r1, #44	; 0x2c
 80078f8:	fb01 f303 	mul.w	r3, r1, r3
 80078fc:	4413      	add	r3, r2
 80078fe:	335c      	adds	r3, #92	; 0x5c
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b02      	cmp	r3, #2
 8007904:	d912      	bls.n	800792c <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	212c      	movs	r1, #44	; 0x2c
 800790c:	fb01 f303 	mul.w	r3, r1, r3
 8007910:	4413      	add	r3, r2
 8007912:	335c      	adds	r3, #92	; 0x5c
 8007914:	2200      	movs	r2, #0
 8007916:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	212c      	movs	r1, #44	; 0x2c
 800791e:	fb01 f303 	mul.w	r3, r1, r3
 8007922:	4413      	add	r3, r2
 8007924:	3360      	adds	r3, #96	; 0x60
 8007926:	2204      	movs	r2, #4
 8007928:	701a      	strb	r2, [r3, #0]
 800792a:	e021      	b.n	8007970 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	212c      	movs	r1, #44	; 0x2c
 8007932:	fb01 f303 	mul.w	r3, r1, r3
 8007936:	4413      	add	r3, r2
 8007938:	3360      	adds	r3, #96	; 0x60
 800793a:	2202      	movs	r2, #2
 800793c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	015a      	lsls	r2, r3, #5
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	4413      	add	r3, r2
 8007946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007954:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800795c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	015a      	lsls	r2, r3, #5
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	4413      	add	r3, r2
 8007966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800796a:	461a      	mov	r2, r3
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	015a      	lsls	r2, r3, #5
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	4413      	add	r3, r2
 8007978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800797c:	461a      	mov	r2, r3
 800797e:	2302      	movs	r3, #2
 8007980:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	b2d9      	uxtb	r1, r3
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	202c      	movs	r0, #44	; 0x2c
 800798c:	fb00 f303 	mul.w	r3, r0, r3
 8007990:	4413      	add	r3, r2
 8007992:	3360      	adds	r3, #96	; 0x60
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	461a      	mov	r2, r3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f007 fb4f 	bl	800f03c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800799e:	bf00      	nop
 80079a0:	3720      	adds	r7, #32
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b08a      	sub	sp, #40	; 0x28
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	f003 030f 	and.w	r3, r3, #15
 80079c6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	0c5b      	lsrs	r3, r3, #17
 80079cc:	f003 030f 	and.w	r3, r3, #15
 80079d0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	091b      	lsrs	r3, r3, #4
 80079d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079da:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d004      	beq.n	80079ec <HCD_RXQLVL_IRQHandler+0x46>
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	2b05      	cmp	r3, #5
 80079e6:	f000 80a9 	beq.w	8007b3c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80079ea:	e0aa      	b.n	8007b42 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f000 80a6 	beq.w	8007b40 <HCD_RXQLVL_IRQHandler+0x19a>
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	212c      	movs	r1, #44	; 0x2c
 80079fa:	fb01 f303 	mul.w	r3, r1, r3
 80079fe:	4413      	add	r3, r2
 8007a00:	3344      	adds	r3, #68	; 0x44
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f000 809b 	beq.w	8007b40 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	212c      	movs	r1, #44	; 0x2c
 8007a10:	fb01 f303 	mul.w	r3, r1, r3
 8007a14:	4413      	add	r3, r2
 8007a16:	3350      	adds	r3, #80	; 0x50
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	441a      	add	r2, r3
 8007a1e:	6879      	ldr	r1, [r7, #4]
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	202c      	movs	r0, #44	; 0x2c
 8007a24:	fb00 f303 	mul.w	r3, r0, r3
 8007a28:	440b      	add	r3, r1
 8007a2a:	334c      	adds	r3, #76	; 0x4c
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d87a      	bhi.n	8007b28 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6818      	ldr	r0, [r3, #0]
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	212c      	movs	r1, #44	; 0x2c
 8007a3c:	fb01 f303 	mul.w	r3, r1, r3
 8007a40:	4413      	add	r3, r2
 8007a42:	3344      	adds	r3, #68	; 0x44
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	b292      	uxth	r2, r2
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	f004 fcd7 	bl	800c3fe <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	212c      	movs	r1, #44	; 0x2c
 8007a56:	fb01 f303 	mul.w	r3, r1, r3
 8007a5a:	4413      	add	r3, r2
 8007a5c:	3344      	adds	r3, #68	; 0x44
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	441a      	add	r2, r3
 8007a64:	6879      	ldr	r1, [r7, #4]
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	202c      	movs	r0, #44	; 0x2c
 8007a6a:	fb00 f303 	mul.w	r3, r0, r3
 8007a6e:	440b      	add	r3, r1
 8007a70:	3344      	adds	r3, #68	; 0x44
 8007a72:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	212c      	movs	r1, #44	; 0x2c
 8007a7a:	fb01 f303 	mul.w	r3, r1, r3
 8007a7e:	4413      	add	r3, r2
 8007a80:	3350      	adds	r3, #80	; 0x50
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	441a      	add	r2, r3
 8007a88:	6879      	ldr	r1, [r7, #4]
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	202c      	movs	r0, #44	; 0x2c
 8007a8e:	fb00 f303 	mul.w	r3, r0, r3
 8007a92:	440b      	add	r3, r1
 8007a94:	3350      	adds	r3, #80	; 0x50
 8007a96:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	015a      	lsls	r2, r3, #5
 8007a9c:	6a3b      	ldr	r3, [r7, #32]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	0cdb      	lsrs	r3, r3, #19
 8007aa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007aac:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	212c      	movs	r1, #44	; 0x2c
 8007ab4:	fb01 f303 	mul.w	r3, r1, r3
 8007ab8:	4413      	add	r3, r2
 8007aba:	3340      	adds	r3, #64	; 0x40
 8007abc:	881b      	ldrh	r3, [r3, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d13c      	bne.n	8007b40 <HCD_RXQLVL_IRQHandler+0x19a>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d039      	beq.n	8007b40 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	015a      	lsls	r2, r3, #5
 8007ad0:	6a3b      	ldr	r3, [r7, #32]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ae2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007aea:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	015a      	lsls	r2, r3, #5
 8007af0:	6a3b      	ldr	r3, [r7, #32]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007af8:	461a      	mov	r2, r3
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	212c      	movs	r1, #44	; 0x2c
 8007b04:	fb01 f303 	mul.w	r3, r1, r3
 8007b08:	4413      	add	r3, r2
 8007b0a:	3354      	adds	r3, #84	; 0x54
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	f083 0301 	eor.w	r3, r3, #1
 8007b12:	b2d8      	uxtb	r0, r3
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	212c      	movs	r1, #44	; 0x2c
 8007b1a:	fb01 f303 	mul.w	r3, r1, r3
 8007b1e:	4413      	add	r3, r2
 8007b20:	3354      	adds	r3, #84	; 0x54
 8007b22:	4602      	mov	r2, r0
 8007b24:	701a      	strb	r2, [r3, #0]
      break;
 8007b26:	e00b      	b.n	8007b40 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	212c      	movs	r1, #44	; 0x2c
 8007b2e:	fb01 f303 	mul.w	r3, r1, r3
 8007b32:	4413      	add	r3, r2
 8007b34:	3360      	adds	r3, #96	; 0x60
 8007b36:	2204      	movs	r2, #4
 8007b38:	701a      	strb	r2, [r3, #0]
      break;
 8007b3a:	e001      	b.n	8007b40 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8007b3c:	bf00      	nop
 8007b3e:	e000      	b.n	8007b42 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8007b40:	bf00      	nop
  }
}
 8007b42:	bf00      	nop
 8007b44:	3728      	adds	r7, #40	; 0x28
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b086      	sub	sp, #24
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007b76:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f003 0302 	and.w	r3, r3, #2
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d10b      	bne.n	8007b9a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d102      	bne.n	8007b92 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f007 fa39 	bl	800f004 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	f043 0302 	orr.w	r3, r3, #2
 8007b98:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f003 0308 	and.w	r3, r3, #8
 8007ba0:	2b08      	cmp	r3, #8
 8007ba2:	d132      	bne.n	8007c0a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	f043 0308 	orr.w	r3, r3, #8
 8007baa:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f003 0304 	and.w	r3, r3, #4
 8007bb2:	2b04      	cmp	r3, #4
 8007bb4:	d126      	bne.n	8007c04 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d113      	bne.n	8007be6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007bc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bc8:	d106      	bne.n	8007bd8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2102      	movs	r1, #2
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f004 fd4f 	bl	800c674 <USB_InitFSLSPClkSel>
 8007bd6:	e011      	b.n	8007bfc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2101      	movs	r1, #1
 8007bde:	4618      	mov	r0, r3
 8007be0:	f004 fd48 	bl	800c674 <USB_InitFSLSPClkSel>
 8007be4:	e00a      	b.n	8007bfc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d106      	bne.n	8007bfc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007bfa:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f007 fa2b 	bl	800f058 <HAL_HCD_PortEnabled_Callback>
 8007c02:	e002      	b.n	8007c0a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f007 fa35 	bl	800f074 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f003 0320 	and.w	r3, r3, #32
 8007c10:	2b20      	cmp	r3, #32
 8007c12:	d103      	bne.n	8007c1c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f043 0320 	orr.w	r3, r3, #32
 8007c1a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007c22:	461a      	mov	r2, r3
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	6013      	str	r3, [r2, #0]
}
 8007c28:	bf00      	nop
 8007c2a:	3718      	adds	r7, #24
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d101      	bne.n	8007c42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e12b      	b.n	8007e9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d106      	bne.n	8007c5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f7f9 ffba 	bl	8001bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2224      	movs	r2, #36	; 0x24
 8007c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f022 0201 	bic.w	r2, r2, #1
 8007c72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007c94:	f002 fcec 	bl	800a670 <HAL_RCC_GetPCLK1Freq>
 8007c98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	4a81      	ldr	r2, [pc, #516]	; (8007ea4 <HAL_I2C_Init+0x274>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d807      	bhi.n	8007cb4 <HAL_I2C_Init+0x84>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	4a80      	ldr	r2, [pc, #512]	; (8007ea8 <HAL_I2C_Init+0x278>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	bf94      	ite	ls
 8007cac:	2301      	movls	r3, #1
 8007cae:	2300      	movhi	r3, #0
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	e006      	b.n	8007cc2 <HAL_I2C_Init+0x92>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	4a7d      	ldr	r2, [pc, #500]	; (8007eac <HAL_I2C_Init+0x27c>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	bf94      	ite	ls
 8007cbc:	2301      	movls	r3, #1
 8007cbe:	2300      	movhi	r3, #0
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e0e7      	b.n	8007e9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	4a78      	ldr	r2, [pc, #480]	; (8007eb0 <HAL_I2C_Init+0x280>)
 8007cce:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd2:	0c9b      	lsrs	r3, r3, #18
 8007cd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68ba      	ldr	r2, [r7, #8]
 8007ce6:	430a      	orrs	r2, r1
 8007ce8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	6a1b      	ldr	r3, [r3, #32]
 8007cf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	4a6a      	ldr	r2, [pc, #424]	; (8007ea4 <HAL_I2C_Init+0x274>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d802      	bhi.n	8007d04 <HAL_I2C_Init+0xd4>
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	3301      	adds	r3, #1
 8007d02:	e009      	b.n	8007d18 <HAL_I2C_Init+0xe8>
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007d0a:	fb02 f303 	mul.w	r3, r2, r3
 8007d0e:	4a69      	ldr	r2, [pc, #420]	; (8007eb4 <HAL_I2C_Init+0x284>)
 8007d10:	fba2 2303 	umull	r2, r3, r2, r3
 8007d14:	099b      	lsrs	r3, r3, #6
 8007d16:	3301      	adds	r3, #1
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	6812      	ldr	r2, [r2, #0]
 8007d1c:	430b      	orrs	r3, r1
 8007d1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	69db      	ldr	r3, [r3, #28]
 8007d26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007d2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	495c      	ldr	r1, [pc, #368]	; (8007ea4 <HAL_I2C_Init+0x274>)
 8007d34:	428b      	cmp	r3, r1
 8007d36:	d819      	bhi.n	8007d6c <HAL_I2C_Init+0x13c>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	1e59      	subs	r1, r3, #1
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	005b      	lsls	r3, r3, #1
 8007d42:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d46:	1c59      	adds	r1, r3, #1
 8007d48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007d4c:	400b      	ands	r3, r1
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00a      	beq.n	8007d68 <HAL_I2C_Init+0x138>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	1e59      	subs	r1, r3, #1
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	005b      	lsls	r3, r3, #1
 8007d5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d60:	3301      	adds	r3, #1
 8007d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d66:	e051      	b.n	8007e0c <HAL_I2C_Init+0x1dc>
 8007d68:	2304      	movs	r3, #4
 8007d6a:	e04f      	b.n	8007e0c <HAL_I2C_Init+0x1dc>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d111      	bne.n	8007d98 <HAL_I2C_Init+0x168>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	1e58      	subs	r0, r3, #1
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6859      	ldr	r1, [r3, #4]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	005b      	lsls	r3, r3, #1
 8007d80:	440b      	add	r3, r1
 8007d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d86:	3301      	adds	r3, #1
 8007d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	bf0c      	ite	eq
 8007d90:	2301      	moveq	r3, #1
 8007d92:	2300      	movne	r3, #0
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	e012      	b.n	8007dbe <HAL_I2C_Init+0x18e>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	1e58      	subs	r0, r3, #1
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6859      	ldr	r1, [r3, #4]
 8007da0:	460b      	mov	r3, r1
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	440b      	add	r3, r1
 8007da6:	0099      	lsls	r1, r3, #2
 8007da8:	440b      	add	r3, r1
 8007daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8007dae:	3301      	adds	r3, #1
 8007db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	bf0c      	ite	eq
 8007db8:	2301      	moveq	r3, #1
 8007dba:	2300      	movne	r3, #0
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <HAL_I2C_Init+0x196>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e022      	b.n	8007e0c <HAL_I2C_Init+0x1dc>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10e      	bne.n	8007dec <HAL_I2C_Init+0x1bc>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	1e58      	subs	r0, r3, #1
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6859      	ldr	r1, [r3, #4]
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	005b      	lsls	r3, r3, #1
 8007dda:	440b      	add	r3, r1
 8007ddc:	fbb0 f3f3 	udiv	r3, r0, r3
 8007de0:	3301      	adds	r3, #1
 8007de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dea:	e00f      	b.n	8007e0c <HAL_I2C_Init+0x1dc>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	1e58      	subs	r0, r3, #1
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6859      	ldr	r1, [r3, #4]
 8007df4:	460b      	mov	r3, r1
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	440b      	add	r3, r1
 8007dfa:	0099      	lsls	r1, r3, #2
 8007dfc:	440b      	add	r3, r1
 8007dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e02:	3301      	adds	r3, #1
 8007e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e0c:	6879      	ldr	r1, [r7, #4]
 8007e0e:	6809      	ldr	r1, [r1, #0]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	69da      	ldr	r2, [r3, #28]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a1b      	ldr	r3, [r3, #32]
 8007e26:	431a      	orrs	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007e3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	6911      	ldr	r1, [r2, #16]
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	68d2      	ldr	r2, [r2, #12]
 8007e46:	4311      	orrs	r1, r2
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	6812      	ldr	r2, [r2, #0]
 8007e4c:	430b      	orrs	r3, r1
 8007e4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	695a      	ldr	r2, [r3, #20]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	431a      	orrs	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	430a      	orrs	r2, r1
 8007e6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f042 0201 	orr.w	r2, r2, #1
 8007e7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2220      	movs	r2, #32
 8007e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	000186a0 	.word	0x000186a0
 8007ea8:	001e847f 	.word	0x001e847f
 8007eac:	003d08ff 	.word	0x003d08ff
 8007eb0:	431bde83 	.word	0x431bde83
 8007eb4:	10624dd3 	.word	0x10624dd3

08007eb8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b088      	sub	sp, #32
 8007ebc:	af02      	add	r7, sp, #8
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	607a      	str	r2, [r7, #4]
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	817b      	strh	r3, [r7, #10]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ecc:	f7fd fe22 	bl	8005b14 <HAL_GetTick>
 8007ed0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b20      	cmp	r3, #32
 8007edc:	f040 80e0 	bne.w	80080a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	9300      	str	r3, [sp, #0]
 8007ee4:	2319      	movs	r3, #25
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	4970      	ldr	r1, [pc, #448]	; (80080ac <HAL_I2C_Master_Transmit+0x1f4>)
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f001 f8f6 	bl	80090dc <I2C_WaitOnFlagUntilTimeout>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d001      	beq.n	8007efa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007ef6:	2302      	movs	r3, #2
 8007ef8:	e0d3      	b.n	80080a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d101      	bne.n	8007f08 <HAL_I2C_Master_Transmit+0x50>
 8007f04:	2302      	movs	r3, #2
 8007f06:	e0cc      	b.n	80080a2 <HAL_I2C_Master_Transmit+0x1ea>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d007      	beq.n	8007f2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f042 0201 	orr.w	r2, r2, #1
 8007f2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2221      	movs	r2, #33	; 0x21
 8007f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2210      	movs	r2, #16
 8007f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	893a      	ldrh	r2, [r7, #8]
 8007f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	4a50      	ldr	r2, [pc, #320]	; (80080b0 <HAL_I2C_Master_Transmit+0x1f8>)
 8007f6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007f70:	8979      	ldrh	r1, [r7, #10]
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	6a3a      	ldr	r2, [r7, #32]
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f000 fde2 	bl	8008b40 <I2C_MasterRequestWrite>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e08d      	b.n	80080a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f86:	2300      	movs	r3, #0
 8007f88:	613b      	str	r3, [r7, #16]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	613b      	str	r3, [r7, #16]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	613b      	str	r3, [r7, #16]
 8007f9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007f9c:	e066      	b.n	800806c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	6a39      	ldr	r1, [r7, #32]
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f001 f970 	bl	8009288 <I2C_WaitOnTXEFlagUntilTimeout>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00d      	beq.n	8007fca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb2:	2b04      	cmp	r3, #4
 8007fb4:	d107      	bne.n	8007fc6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e06b      	b.n	80080a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fce:	781a      	ldrb	r2, [r3, #0]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fda:	1c5a      	adds	r2, r3, #1
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	695b      	ldr	r3, [r3, #20]
 8008000:	f003 0304 	and.w	r3, r3, #4
 8008004:	2b04      	cmp	r3, #4
 8008006:	d11b      	bne.n	8008040 <HAL_I2C_Master_Transmit+0x188>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800800c:	2b00      	cmp	r3, #0
 800800e:	d017      	beq.n	8008040 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008014:	781a      	ldrb	r2, [r3, #0]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008020:	1c5a      	adds	r2, r3, #1
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800802a:	b29b      	uxth	r3, r3
 800802c:	3b01      	subs	r3, #1
 800802e:	b29a      	uxth	r2, r3
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008038:	3b01      	subs	r3, #1
 800803a:	b29a      	uxth	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008040:	697a      	ldr	r2, [r7, #20]
 8008042:	6a39      	ldr	r1, [r7, #32]
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f001 f960 	bl	800930a <I2C_WaitOnBTFFlagUntilTimeout>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00d      	beq.n	800806c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008054:	2b04      	cmp	r3, #4
 8008056:	d107      	bne.n	8008068 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008066:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	e01a      	b.n	80080a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008070:	2b00      	cmp	r3, #0
 8008072:	d194      	bne.n	8007f9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008082:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2220      	movs	r2, #32
 8008088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800809c:	2300      	movs	r3, #0
 800809e:	e000      	b.n	80080a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80080a0:	2302      	movs	r3, #2
  }
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3718      	adds	r7, #24
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	00100002 	.word	0x00100002
 80080b0:	ffff0000 	.word	0xffff0000

080080b4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b08c      	sub	sp, #48	; 0x30
 80080b8:	af02      	add	r7, sp, #8
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	607a      	str	r2, [r7, #4]
 80080be:	461a      	mov	r2, r3
 80080c0:	460b      	mov	r3, r1
 80080c2:	817b      	strh	r3, [r7, #10]
 80080c4:	4613      	mov	r3, r2
 80080c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80080c8:	f7fd fd24 	bl	8005b14 <HAL_GetTick>
 80080cc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b20      	cmp	r3, #32
 80080d8:	f040 820b 	bne.w	80084f2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80080dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	2319      	movs	r3, #25
 80080e2:	2201      	movs	r2, #1
 80080e4:	497c      	ldr	r1, [pc, #496]	; (80082d8 <HAL_I2C_Master_Receive+0x224>)
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f000 fff8 	bl	80090dc <I2C_WaitOnFlagUntilTimeout>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80080f2:	2302      	movs	r3, #2
 80080f4:	e1fe      	b.n	80084f4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d101      	bne.n	8008104 <HAL_I2C_Master_Receive+0x50>
 8008100:	2302      	movs	r3, #2
 8008102:	e1f7      	b.n	80084f4 <HAL_I2C_Master_Receive+0x440>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	2b01      	cmp	r3, #1
 8008118:	d007      	beq.n	800812a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f042 0201 	orr.w	r2, r2, #1
 8008128:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008138:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2222      	movs	r2, #34	; 0x22
 800813e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2210      	movs	r2, #16
 8008146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	893a      	ldrh	r2, [r7, #8]
 800815a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008160:	b29a      	uxth	r2, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	4a5c      	ldr	r2, [pc, #368]	; (80082dc <HAL_I2C_Master_Receive+0x228>)
 800816a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800816c:	8979      	ldrh	r1, [r7, #10]
 800816e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f000 fd66 	bl	8008c44 <I2C_MasterRequestRead>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e1b8      	b.n	80084f4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008186:	2b00      	cmp	r3, #0
 8008188:	d113      	bne.n	80081b2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800818a:	2300      	movs	r3, #0
 800818c:	623b      	str	r3, [r7, #32]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	695b      	ldr	r3, [r3, #20]
 8008194:	623b      	str	r3, [r7, #32]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	623b      	str	r3, [r7, #32]
 800819e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081ae:	601a      	str	r2, [r3, #0]
 80081b0:	e18c      	b.n	80084cc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d11b      	bne.n	80081f2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081ca:	2300      	movs	r3, #0
 80081cc:	61fb      	str	r3, [r7, #28]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	695b      	ldr	r3, [r3, #20]
 80081d4:	61fb      	str	r3, [r7, #28]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	699b      	ldr	r3, [r3, #24]
 80081dc:	61fb      	str	r3, [r7, #28]
 80081de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081ee:	601a      	str	r2, [r3, #0]
 80081f0:	e16c      	b.n	80084cc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d11b      	bne.n	8008232 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008208:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008218:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800821a:	2300      	movs	r3, #0
 800821c:	61bb      	str	r3, [r7, #24]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	61bb      	str	r3, [r7, #24]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	61bb      	str	r3, [r7, #24]
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	e14c      	b.n	80084cc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008240:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008242:	2300      	movs	r3, #0
 8008244:	617b      	str	r3, [r7, #20]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	695b      	ldr	r3, [r3, #20]
 800824c:	617b      	str	r3, [r7, #20]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	617b      	str	r3, [r7, #20]
 8008256:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008258:	e138      	b.n	80084cc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800825e:	2b03      	cmp	r3, #3
 8008260:	f200 80f1 	bhi.w	8008446 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008268:	2b01      	cmp	r3, #1
 800826a:	d123      	bne.n	80082b4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800826c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800826e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f001 f88b 	bl	800938c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d001      	beq.n	8008280 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e139      	b.n	80084f4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	691a      	ldr	r2, [r3, #16]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828a:	b2d2      	uxtb	r2, r2
 800828c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800829c:	3b01      	subs	r3, #1
 800829e:	b29a      	uxth	r2, r3
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	3b01      	subs	r3, #1
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80082b2:	e10b      	b.n	80084cc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d14e      	bne.n	800835a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80082bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c2:	2200      	movs	r2, #0
 80082c4:	4906      	ldr	r1, [pc, #24]	; (80082e0 <HAL_I2C_Master_Receive+0x22c>)
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f000 ff08 	bl	80090dc <I2C_WaitOnFlagUntilTimeout>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d008      	beq.n	80082e4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e10e      	b.n	80084f4 <HAL_I2C_Master_Receive+0x440>
 80082d6:	bf00      	nop
 80082d8:	00100002 	.word	0x00100002
 80082dc:	ffff0000 	.word	0xffff0000
 80082e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	691a      	ldr	r2, [r3, #16]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fe:	b2d2      	uxtb	r2, r2
 8008300:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008306:	1c5a      	adds	r2, r3, #1
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008310:	3b01      	subs	r3, #1
 8008312:	b29a      	uxth	r2, r3
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800831c:	b29b      	uxth	r3, r3
 800831e:	3b01      	subs	r3, #1
 8008320:	b29a      	uxth	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	691a      	ldr	r2, [r3, #16]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008330:	b2d2      	uxtb	r2, r2
 8008332:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008338:	1c5a      	adds	r2, r3, #1
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008342:	3b01      	subs	r3, #1
 8008344:	b29a      	uxth	r2, r3
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800834e:	b29b      	uxth	r3, r3
 8008350:	3b01      	subs	r3, #1
 8008352:	b29a      	uxth	r2, r3
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008358:	e0b8      	b.n	80084cc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008360:	2200      	movs	r2, #0
 8008362:	4966      	ldr	r1, [pc, #408]	; (80084fc <HAL_I2C_Master_Receive+0x448>)
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f000 feb9 	bl	80090dc <I2C_WaitOnFlagUntilTimeout>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d001      	beq.n	8008374 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e0bf      	b.n	80084f4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008382:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	691a      	ldr	r2, [r3, #16]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838e:	b2d2      	uxtb	r2, r2
 8008390:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008396:	1c5a      	adds	r2, r3, #1
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083a0:	3b01      	subs	r3, #1
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	3b01      	subs	r3, #1
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80083b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b8:	9300      	str	r3, [sp, #0]
 80083ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083bc:	2200      	movs	r2, #0
 80083be:	494f      	ldr	r1, [pc, #316]	; (80084fc <HAL_I2C_Master_Receive+0x448>)
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f000 fe8b 	bl	80090dc <I2C_WaitOnFlagUntilTimeout>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d001      	beq.n	80083d0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e091      	b.n	80084f4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	691a      	ldr	r2, [r3, #16]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ea:	b2d2      	uxtb	r2, r2
 80083ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f2:	1c5a      	adds	r2, r3, #1
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083fc:	3b01      	subs	r3, #1
 80083fe:	b29a      	uxth	r2, r3
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008408:	b29b      	uxth	r3, r3
 800840a:	3b01      	subs	r3, #1
 800840c:	b29a      	uxth	r2, r3
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	691a      	ldr	r2, [r3, #16]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841c:	b2d2      	uxtb	r2, r2
 800841e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008424:	1c5a      	adds	r2, r3, #1
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800842e:	3b01      	subs	r3, #1
 8008430:	b29a      	uxth	r2, r3
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800843a:	b29b      	uxth	r3, r3
 800843c:	3b01      	subs	r3, #1
 800843e:	b29a      	uxth	r2, r3
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008444:	e042      	b.n	80084cc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008448:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f000 ff9e 	bl	800938c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e04c      	b.n	80084f4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	691a      	ldr	r2, [r3, #16]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008464:	b2d2      	uxtb	r2, r2
 8008466:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846c:	1c5a      	adds	r2, r3, #1
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008476:	3b01      	subs	r3, #1
 8008478:	b29a      	uxth	r2, r3
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008482:	b29b      	uxth	r3, r3
 8008484:	3b01      	subs	r3, #1
 8008486:	b29a      	uxth	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	f003 0304 	and.w	r3, r3, #4
 8008496:	2b04      	cmp	r3, #4
 8008498:	d118      	bne.n	80084cc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	691a      	ldr	r2, [r3, #16]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a4:	b2d2      	uxtb	r2, r2
 80084a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ac:	1c5a      	adds	r2, r3, #1
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084b6:	3b01      	subs	r3, #1
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	3b01      	subs	r3, #1
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f47f aec2 	bne.w	800825a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2220      	movs	r2, #32
 80084da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80084ee:	2300      	movs	r3, #0
 80084f0:	e000      	b.n	80084f4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80084f2:	2302      	movs	r3, #2
  }
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3728      	adds	r7, #40	; 0x28
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	00010004 	.word	0x00010004

08008500 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b088      	sub	sp, #32
 8008504:	af02      	add	r7, sp, #8
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	4608      	mov	r0, r1
 800850a:	4611      	mov	r1, r2
 800850c:	461a      	mov	r2, r3
 800850e:	4603      	mov	r3, r0
 8008510:	817b      	strh	r3, [r7, #10]
 8008512:	460b      	mov	r3, r1
 8008514:	813b      	strh	r3, [r7, #8]
 8008516:	4613      	mov	r3, r2
 8008518:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800851a:	f7fd fafb 	bl	8005b14 <HAL_GetTick>
 800851e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b20      	cmp	r3, #32
 800852a:	f040 80d9 	bne.w	80086e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	2319      	movs	r3, #25
 8008534:	2201      	movs	r2, #1
 8008536:	496d      	ldr	r1, [pc, #436]	; (80086ec <HAL_I2C_Mem_Write+0x1ec>)
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f000 fdcf 	bl	80090dc <I2C_WaitOnFlagUntilTimeout>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008544:	2302      	movs	r3, #2
 8008546:	e0cc      	b.n	80086e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800854e:	2b01      	cmp	r3, #1
 8008550:	d101      	bne.n	8008556 <HAL_I2C_Mem_Write+0x56>
 8008552:	2302      	movs	r3, #2
 8008554:	e0c5      	b.n	80086e2 <HAL_I2C_Mem_Write+0x1e2>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2201      	movs	r2, #1
 800855a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0301 	and.w	r3, r3, #1
 8008568:	2b01      	cmp	r3, #1
 800856a:	d007      	beq.n	800857c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f042 0201 	orr.w	r2, r2, #1
 800857a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800858a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2221      	movs	r2, #33	; 0x21
 8008590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2240      	movs	r2, #64	; 0x40
 8008598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6a3a      	ldr	r2, [r7, #32]
 80085a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80085ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	4a4d      	ldr	r2, [pc, #308]	; (80086f0 <HAL_I2C_Mem_Write+0x1f0>)
 80085bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80085be:	88f8      	ldrh	r0, [r7, #6]
 80085c0:	893a      	ldrh	r2, [r7, #8]
 80085c2:	8979      	ldrh	r1, [r7, #10]
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	9301      	str	r3, [sp, #4]
 80085c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	4603      	mov	r3, r0
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 fc06 	bl	8008de0 <I2C_RequestMemoryWrite>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d052      	beq.n	8008680 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	e081      	b.n	80086e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f000 fe50 	bl	8009288 <I2C_WaitOnTXEFlagUntilTimeout>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00d      	beq.n	800860a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f2:	2b04      	cmp	r3, #4
 80085f4:	d107      	bne.n	8008606 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008604:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e06b      	b.n	80086e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860e:	781a      	ldrb	r2, [r3, #0]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861a:	1c5a      	adds	r2, r3, #1
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008624:	3b01      	subs	r3, #1
 8008626:	b29a      	uxth	r2, r3
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008630:	b29b      	uxth	r3, r3
 8008632:	3b01      	subs	r3, #1
 8008634:	b29a      	uxth	r2, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	695b      	ldr	r3, [r3, #20]
 8008640:	f003 0304 	and.w	r3, r3, #4
 8008644:	2b04      	cmp	r3, #4
 8008646:	d11b      	bne.n	8008680 <HAL_I2C_Mem_Write+0x180>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800864c:	2b00      	cmp	r3, #0
 800864e:	d017      	beq.n	8008680 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008654:	781a      	ldrb	r2, [r3, #0]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008660:	1c5a      	adds	r2, r3, #1
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800866a:	3b01      	subs	r3, #1
 800866c:	b29a      	uxth	r2, r3
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008676:	b29b      	uxth	r3, r3
 8008678:	3b01      	subs	r3, #1
 800867a:	b29a      	uxth	r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1aa      	bne.n	80085de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008688:	697a      	ldr	r2, [r7, #20]
 800868a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f000 fe3c 	bl	800930a <I2C_WaitOnBTFFlagUntilTimeout>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00d      	beq.n	80086b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869c:	2b04      	cmp	r3, #4
 800869e:	d107      	bne.n	80086b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e016      	b.n	80086e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2220      	movs	r2, #32
 80086c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80086dc:	2300      	movs	r3, #0
 80086de:	e000      	b.n	80086e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80086e0:	2302      	movs	r3, #2
  }
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3718      	adds	r7, #24
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	00100002 	.word	0x00100002
 80086f0:	ffff0000 	.word	0xffff0000

080086f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b08c      	sub	sp, #48	; 0x30
 80086f8:	af02      	add	r7, sp, #8
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	4608      	mov	r0, r1
 80086fe:	4611      	mov	r1, r2
 8008700:	461a      	mov	r2, r3
 8008702:	4603      	mov	r3, r0
 8008704:	817b      	strh	r3, [r7, #10]
 8008706:	460b      	mov	r3, r1
 8008708:	813b      	strh	r3, [r7, #8]
 800870a:	4613      	mov	r3, r2
 800870c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800870e:	f7fd fa01 	bl	8005b14 <HAL_GetTick>
 8008712:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800871a:	b2db      	uxtb	r3, r3
 800871c:	2b20      	cmp	r3, #32
 800871e:	f040 8208 	bne.w	8008b32 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	2319      	movs	r3, #25
 8008728:	2201      	movs	r2, #1
 800872a:	497b      	ldr	r1, [pc, #492]	; (8008918 <HAL_I2C_Mem_Read+0x224>)
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f000 fcd5 	bl	80090dc <I2C_WaitOnFlagUntilTimeout>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d001      	beq.n	800873c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008738:	2302      	movs	r3, #2
 800873a:	e1fb      	b.n	8008b34 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008742:	2b01      	cmp	r3, #1
 8008744:	d101      	bne.n	800874a <HAL_I2C_Mem_Read+0x56>
 8008746:	2302      	movs	r3, #2
 8008748:	e1f4      	b.n	8008b34 <HAL_I2C_Mem_Read+0x440>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2201      	movs	r2, #1
 800874e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 0301 	and.w	r3, r3, #1
 800875c:	2b01      	cmp	r3, #1
 800875e:	d007      	beq.n	8008770 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f042 0201 	orr.w	r2, r2, #1
 800876e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800877e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2222      	movs	r2, #34	; 0x22
 8008784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2240      	movs	r2, #64	; 0x40
 800878c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800879a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80087a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	4a5b      	ldr	r2, [pc, #364]	; (800891c <HAL_I2C_Mem_Read+0x228>)
 80087b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80087b2:	88f8      	ldrh	r0, [r7, #6]
 80087b4:	893a      	ldrh	r2, [r7, #8]
 80087b6:	8979      	ldrh	r1, [r7, #10]
 80087b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ba:	9301      	str	r3, [sp, #4]
 80087bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087be:	9300      	str	r3, [sp, #0]
 80087c0:	4603      	mov	r3, r0
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f000 fba2 	bl	8008f0c <I2C_RequestMemoryRead>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d001      	beq.n	80087d2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e1b0      	b.n	8008b34 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d113      	bne.n	8008802 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087da:	2300      	movs	r3, #0
 80087dc:	623b      	str	r3, [r7, #32]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	695b      	ldr	r3, [r3, #20]
 80087e4:	623b      	str	r3, [r7, #32]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	623b      	str	r3, [r7, #32]
 80087ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087fe:	601a      	str	r2, [r3, #0]
 8008800:	e184      	b.n	8008b0c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008806:	2b01      	cmp	r3, #1
 8008808:	d11b      	bne.n	8008842 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008818:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800881a:	2300      	movs	r3, #0
 800881c:	61fb      	str	r3, [r7, #28]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	695b      	ldr	r3, [r3, #20]
 8008824:	61fb      	str	r3, [r7, #28]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	61fb      	str	r3, [r7, #28]
 800882e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800883e:	601a      	str	r2, [r3, #0]
 8008840:	e164      	b.n	8008b0c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008846:	2b02      	cmp	r3, #2
 8008848:	d11b      	bne.n	8008882 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008858:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008868:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800886a:	2300      	movs	r3, #0
 800886c:	61bb      	str	r3, [r7, #24]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	695b      	ldr	r3, [r3, #20]
 8008874:	61bb      	str	r3, [r7, #24]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	61bb      	str	r3, [r7, #24]
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	e144      	b.n	8008b0c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008882:	2300      	movs	r3, #0
 8008884:	617b      	str	r3, [r7, #20]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	695b      	ldr	r3, [r3, #20]
 800888c:	617b      	str	r3, [r7, #20]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	699b      	ldr	r3, [r3, #24]
 8008894:	617b      	str	r3, [r7, #20]
 8008896:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008898:	e138      	b.n	8008b0c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800889e:	2b03      	cmp	r3, #3
 80088a0:	f200 80f1 	bhi.w	8008a86 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d123      	bne.n	80088f4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f000 fd6b 	bl	800938c <I2C_WaitOnRXNEFlagUntilTimeout>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d001      	beq.n	80088c0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e139      	b.n	8008b34 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	691a      	ldr	r2, [r3, #16]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ca:	b2d2      	uxtb	r2, r2
 80088cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d2:	1c5a      	adds	r2, r3, #1
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088dc:	3b01      	subs	r3, #1
 80088de:	b29a      	uxth	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	3b01      	subs	r3, #1
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80088f2:	e10b      	b.n	8008b0c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d14e      	bne.n	800899a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80088fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fe:	9300      	str	r3, [sp, #0]
 8008900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008902:	2200      	movs	r2, #0
 8008904:	4906      	ldr	r1, [pc, #24]	; (8008920 <HAL_I2C_Mem_Read+0x22c>)
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f000 fbe8 	bl	80090dc <I2C_WaitOnFlagUntilTimeout>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d008      	beq.n	8008924 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e10e      	b.n	8008b34 <HAL_I2C_Mem_Read+0x440>
 8008916:	bf00      	nop
 8008918:	00100002 	.word	0x00100002
 800891c:	ffff0000 	.word	0xffff0000
 8008920:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008932:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	691a      	ldr	r2, [r3, #16]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893e:	b2d2      	uxtb	r2, r2
 8008940:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008946:	1c5a      	adds	r2, r3, #1
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008950:	3b01      	subs	r3, #1
 8008952:	b29a      	uxth	r2, r3
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800895c:	b29b      	uxth	r3, r3
 800895e:	3b01      	subs	r3, #1
 8008960:	b29a      	uxth	r2, r3
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	691a      	ldr	r2, [r3, #16]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008970:	b2d2      	uxtb	r2, r2
 8008972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008978:	1c5a      	adds	r2, r3, #1
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008982:	3b01      	subs	r3, #1
 8008984:	b29a      	uxth	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800898e:	b29b      	uxth	r3, r3
 8008990:	3b01      	subs	r3, #1
 8008992:	b29a      	uxth	r2, r3
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008998:	e0b8      	b.n	8008b0c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a0:	2200      	movs	r2, #0
 80089a2:	4966      	ldr	r1, [pc, #408]	; (8008b3c <HAL_I2C_Mem_Read+0x448>)
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f000 fb99 	bl	80090dc <I2C_WaitOnFlagUntilTimeout>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d001      	beq.n	80089b4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e0bf      	b.n	8008b34 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	691a      	ldr	r2, [r3, #16]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ce:	b2d2      	uxtb	r2, r2
 80089d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d6:	1c5a      	adds	r2, r3, #1
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089e0:	3b01      	subs	r3, #1
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	3b01      	subs	r3, #1
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80089f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fc:	2200      	movs	r2, #0
 80089fe:	494f      	ldr	r1, [pc, #316]	; (8008b3c <HAL_I2C_Mem_Read+0x448>)
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f000 fb6b 	bl	80090dc <I2C_WaitOnFlagUntilTimeout>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d001      	beq.n	8008a10 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e091      	b.n	8008b34 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	691a      	ldr	r2, [r3, #16]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2a:	b2d2      	uxtb	r2, r2
 8008a2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a32:	1c5a      	adds	r2, r3, #1
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	691a      	ldr	r2, [r3, #16]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5c:	b2d2      	uxtb	r2, r2
 8008a5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a64:	1c5a      	adds	r2, r3, #1
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008a84:	e042      	b.n	8008b0c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f000 fc7e 	bl	800938c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e04c      	b.n	8008b34 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	691a      	ldr	r2, [r3, #16]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa4:	b2d2      	uxtb	r2, r2
 8008aa6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aac:	1c5a      	adds	r2, r3, #1
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	b29a      	uxth	r2, r3
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	695b      	ldr	r3, [r3, #20]
 8008ad2:	f003 0304 	and.w	r3, r3, #4
 8008ad6:	2b04      	cmp	r3, #4
 8008ad8:	d118      	bne.n	8008b0c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	691a      	ldr	r2, [r3, #16]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae4:	b2d2      	uxtb	r2, r2
 8008ae6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008af6:	3b01      	subs	r3, #1
 8008af8:	b29a      	uxth	r2, r3
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	3b01      	subs	r3, #1
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f47f aec2 	bne.w	800889a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2220      	movs	r2, #32
 8008b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	e000      	b.n	8008b34 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008b32:	2302      	movs	r3, #2
  }
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3728      	adds	r7, #40	; 0x28
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	00010004 	.word	0x00010004

08008b40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b088      	sub	sp, #32
 8008b44:	af02      	add	r7, sp, #8
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	607a      	str	r2, [r7, #4]
 8008b4a:	603b      	str	r3, [r7, #0]
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	2b08      	cmp	r3, #8
 8008b5a:	d006      	beq.n	8008b6a <I2C_MasterRequestWrite+0x2a>
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d003      	beq.n	8008b6a <I2C_MasterRequestWrite+0x2a>
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008b68:	d108      	bne.n	8008b7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b78:	601a      	str	r2, [r3, #0]
 8008b7a:	e00b      	b.n	8008b94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b80:	2b12      	cmp	r3, #18
 8008b82:	d107      	bne.n	8008b94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f000 fa9b 	bl	80090dc <I2C_WaitOnFlagUntilTimeout>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00d      	beq.n	8008bc8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bba:	d103      	bne.n	8008bc4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	e035      	b.n	8008c34 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bd0:	d108      	bne.n	8008be4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008bd2:	897b      	ldrh	r3, [r7, #10]
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008be0:	611a      	str	r2, [r3, #16]
 8008be2:	e01b      	b.n	8008c1c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008be4:	897b      	ldrh	r3, [r7, #10]
 8008be6:	11db      	asrs	r3, r3, #7
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	f003 0306 	and.w	r3, r3, #6
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	f063 030f 	orn	r3, r3, #15
 8008bf4:	b2da      	uxtb	r2, r3
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	490e      	ldr	r1, [pc, #56]	; (8008c3c <I2C_MasterRequestWrite+0xfc>)
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f000 fac1 	bl	800918a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d001      	beq.n	8008c12 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e010      	b.n	8008c34 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008c12:	897b      	ldrh	r3, [r7, #10]
 8008c14:	b2da      	uxtb	r2, r3
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	4907      	ldr	r1, [pc, #28]	; (8008c40 <I2C_MasterRequestWrite+0x100>)
 8008c22:	68f8      	ldr	r0, [r7, #12]
 8008c24:	f000 fab1 	bl	800918a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d001      	beq.n	8008c32 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e000      	b.n	8008c34 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3718      	adds	r7, #24
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	00010008 	.word	0x00010008
 8008c40:	00010002 	.word	0x00010002

08008c44 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b088      	sub	sp, #32
 8008c48:	af02      	add	r7, sp, #8
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	607a      	str	r2, [r7, #4]
 8008c4e:	603b      	str	r3, [r7, #0]
 8008c50:	460b      	mov	r3, r1
 8008c52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c58:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c68:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	2b08      	cmp	r3, #8
 8008c6e:	d006      	beq.n	8008c7e <I2C_MasterRequestRead+0x3a>
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d003      	beq.n	8008c7e <I2C_MasterRequestRead+0x3a>
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008c7c:	d108      	bne.n	8008c90 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c8c:	601a      	str	r2, [r3, #0]
 8008c8e:	e00b      	b.n	8008ca8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c94:	2b11      	cmp	r3, #17
 8008c96:	d107      	bne.n	8008ca8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ca6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	9300      	str	r3, [sp, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f000 fa11 	bl	80090dc <I2C_WaitOnFlagUntilTimeout>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d00d      	beq.n	8008cdc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cce:	d103      	bne.n	8008cd8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	e079      	b.n	8008dd0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ce4:	d108      	bne.n	8008cf8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008ce6:	897b      	ldrh	r3, [r7, #10]
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	f043 0301 	orr.w	r3, r3, #1
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	611a      	str	r2, [r3, #16]
 8008cf6:	e05f      	b.n	8008db8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008cf8:	897b      	ldrh	r3, [r7, #10]
 8008cfa:	11db      	asrs	r3, r3, #7
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	f003 0306 	and.w	r3, r3, #6
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	f063 030f 	orn	r3, r3, #15
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	4930      	ldr	r1, [pc, #192]	; (8008dd8 <I2C_MasterRequestRead+0x194>)
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f000 fa37 	bl	800918a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e054      	b.n	8008dd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008d26:	897b      	ldrh	r3, [r7, #10]
 8008d28:	b2da      	uxtb	r2, r3
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	4929      	ldr	r1, [pc, #164]	; (8008ddc <I2C_MasterRequestRead+0x198>)
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f000 fa27 	bl	800918a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d001      	beq.n	8008d46 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	e044      	b.n	8008dd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d46:	2300      	movs	r3, #0
 8008d48:	613b      	str	r3, [r7, #16]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	695b      	ldr	r3, [r3, #20]
 8008d50:	613b      	str	r3, [r7, #16]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	613b      	str	r3, [r7, #16]
 8008d5a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d6a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f000 f9af 	bl	80090dc <I2C_WaitOnFlagUntilTimeout>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d00d      	beq.n	8008da0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d92:	d103      	bne.n	8008d9c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d9a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	e017      	b.n	8008dd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008da0:	897b      	ldrh	r3, [r7, #10]
 8008da2:	11db      	asrs	r3, r3, #7
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	f003 0306 	and.w	r3, r3, #6
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	f063 030e 	orn	r3, r3, #14
 8008db0:	b2da      	uxtb	r2, r3
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	4907      	ldr	r1, [pc, #28]	; (8008ddc <I2C_MasterRequestRead+0x198>)
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f000 f9e3 	bl	800918a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e000      	b.n	8008dd0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3718      	adds	r7, #24
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	00010008 	.word	0x00010008
 8008ddc:	00010002 	.word	0x00010002

08008de0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b088      	sub	sp, #32
 8008de4:	af02      	add	r7, sp, #8
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	4608      	mov	r0, r1
 8008dea:	4611      	mov	r1, r2
 8008dec:	461a      	mov	r2, r3
 8008dee:	4603      	mov	r3, r0
 8008df0:	817b      	strh	r3, [r7, #10]
 8008df2:	460b      	mov	r3, r1
 8008df4:	813b      	strh	r3, [r7, #8]
 8008df6:	4613      	mov	r3, r2
 8008df8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0c:	9300      	str	r3, [sp, #0]
 8008e0e:	6a3b      	ldr	r3, [r7, #32]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	f000 f960 	bl	80090dc <I2C_WaitOnFlagUntilTimeout>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00d      	beq.n	8008e3e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e30:	d103      	bne.n	8008e3a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008e3a:	2303      	movs	r3, #3
 8008e3c:	e05f      	b.n	8008efe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008e3e:	897b      	ldrh	r3, [r7, #10]
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	461a      	mov	r2, r3
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008e4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e50:	6a3a      	ldr	r2, [r7, #32]
 8008e52:	492d      	ldr	r1, [pc, #180]	; (8008f08 <I2C_RequestMemoryWrite+0x128>)
 8008e54:	68f8      	ldr	r0, [r7, #12]
 8008e56:	f000 f998 	bl	800918a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d001      	beq.n	8008e64 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	e04c      	b.n	8008efe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e64:	2300      	movs	r3, #0
 8008e66:	617b      	str	r3, [r7, #20]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	695b      	ldr	r3, [r3, #20]
 8008e6e:	617b      	str	r3, [r7, #20]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	617b      	str	r3, [r7, #20]
 8008e78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e7c:	6a39      	ldr	r1, [r7, #32]
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f000 fa02 	bl	8009288 <I2C_WaitOnTXEFlagUntilTimeout>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00d      	beq.n	8008ea6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e8e:	2b04      	cmp	r3, #4
 8008e90:	d107      	bne.n	8008ea2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ea0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e02b      	b.n	8008efe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008ea6:	88fb      	ldrh	r3, [r7, #6]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d105      	bne.n	8008eb8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008eac:	893b      	ldrh	r3, [r7, #8]
 8008eae:	b2da      	uxtb	r2, r3
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	611a      	str	r2, [r3, #16]
 8008eb6:	e021      	b.n	8008efc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008eb8:	893b      	ldrh	r3, [r7, #8]
 8008eba:	0a1b      	lsrs	r3, r3, #8
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	b2da      	uxtb	r2, r3
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ec8:	6a39      	ldr	r1, [r7, #32]
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f000 f9dc 	bl	8009288 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00d      	beq.n	8008ef2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eda:	2b04      	cmp	r3, #4
 8008edc:	d107      	bne.n	8008eee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008eec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e005      	b.n	8008efe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008ef2:	893b      	ldrh	r3, [r7, #8]
 8008ef4:	b2da      	uxtb	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3718      	adds	r7, #24
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	00010002 	.word	0x00010002

08008f0c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b088      	sub	sp, #32
 8008f10:	af02      	add	r7, sp, #8
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	4608      	mov	r0, r1
 8008f16:	4611      	mov	r1, r2
 8008f18:	461a      	mov	r2, r3
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	817b      	strh	r3, [r7, #10]
 8008f1e:	460b      	mov	r3, r1
 8008f20:	813b      	strh	r3, [r7, #8]
 8008f22:	4613      	mov	r3, r2
 8008f24:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f34:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f48:	9300      	str	r3, [sp, #0]
 8008f4a:	6a3b      	ldr	r3, [r7, #32]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	f000 f8c2 	bl	80090dc <I2C_WaitOnFlagUntilTimeout>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00d      	beq.n	8008f7a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f6c:	d103      	bne.n	8008f76 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008f76:	2303      	movs	r3, #3
 8008f78:	e0aa      	b.n	80090d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008f7a:	897b      	ldrh	r3, [r7, #10]
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	461a      	mov	r2, r3
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008f88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8c:	6a3a      	ldr	r2, [r7, #32]
 8008f8e:	4952      	ldr	r1, [pc, #328]	; (80090d8 <I2C_RequestMemoryRead+0x1cc>)
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f000 f8fa 	bl	800918a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d001      	beq.n	8008fa0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e097      	b.n	80090d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	617b      	str	r3, [r7, #20]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	695b      	ldr	r3, [r3, #20]
 8008faa:	617b      	str	r3, [r7, #20]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	699b      	ldr	r3, [r3, #24]
 8008fb2:	617b      	str	r3, [r7, #20]
 8008fb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fb8:	6a39      	ldr	r1, [r7, #32]
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f000 f964 	bl	8009288 <I2C_WaitOnTXEFlagUntilTimeout>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00d      	beq.n	8008fe2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fca:	2b04      	cmp	r3, #4
 8008fcc:	d107      	bne.n	8008fde <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fdc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e076      	b.n	80090d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008fe2:	88fb      	ldrh	r3, [r7, #6]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d105      	bne.n	8008ff4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008fe8:	893b      	ldrh	r3, [r7, #8]
 8008fea:	b2da      	uxtb	r2, r3
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	611a      	str	r2, [r3, #16]
 8008ff2:	e021      	b.n	8009038 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008ff4:	893b      	ldrh	r3, [r7, #8]
 8008ff6:	0a1b      	lsrs	r3, r3, #8
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009004:	6a39      	ldr	r1, [r7, #32]
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f000 f93e 	bl	8009288 <I2C_WaitOnTXEFlagUntilTimeout>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00d      	beq.n	800902e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009016:	2b04      	cmp	r3, #4
 8009018:	d107      	bne.n	800902a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009028:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	e050      	b.n	80090d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800902e:	893b      	ldrh	r3, [r7, #8]
 8009030:	b2da      	uxtb	r2, r3
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800903a:	6a39      	ldr	r1, [r7, #32]
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f000 f923 	bl	8009288 <I2C_WaitOnTXEFlagUntilTimeout>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00d      	beq.n	8009064 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904c:	2b04      	cmp	r3, #4
 800904e:	d107      	bne.n	8009060 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800905e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	e035      	b.n	80090d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009072:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	9300      	str	r3, [sp, #0]
 8009078:	6a3b      	ldr	r3, [r7, #32]
 800907a:	2200      	movs	r2, #0
 800907c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f000 f82b 	bl	80090dc <I2C_WaitOnFlagUntilTimeout>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00d      	beq.n	80090a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800909a:	d103      	bne.n	80090a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e013      	b.n	80090d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80090a8:	897b      	ldrh	r3, [r7, #10]
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	f043 0301 	orr.w	r3, r3, #1
 80090b0:	b2da      	uxtb	r2, r3
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80090b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ba:	6a3a      	ldr	r2, [r7, #32]
 80090bc:	4906      	ldr	r1, [pc, #24]	; (80090d8 <I2C_RequestMemoryRead+0x1cc>)
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f000 f863 	bl	800918a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	e000      	b.n	80090d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3718      	adds	r7, #24
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	00010002 	.word	0x00010002

080090dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	603b      	str	r3, [r7, #0]
 80090e8:	4613      	mov	r3, r2
 80090ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80090ec:	e025      	b.n	800913a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090f4:	d021      	beq.n	800913a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090f6:	f7fc fd0d 	bl	8005b14 <HAL_GetTick>
 80090fa:	4602      	mov	r2, r0
 80090fc:	69bb      	ldr	r3, [r7, #24]
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	683a      	ldr	r2, [r7, #0]
 8009102:	429a      	cmp	r2, r3
 8009104:	d302      	bcc.n	800910c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d116      	bne.n	800913a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2200      	movs	r2, #0
 8009110:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2220      	movs	r2, #32
 8009116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009126:	f043 0220 	orr.w	r2, r3, #32
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2200      	movs	r2, #0
 8009132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	e023      	b.n	8009182 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	0c1b      	lsrs	r3, r3, #16
 800913e:	b2db      	uxtb	r3, r3
 8009140:	2b01      	cmp	r3, #1
 8009142:	d10d      	bne.n	8009160 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	695b      	ldr	r3, [r3, #20]
 800914a:	43da      	mvns	r2, r3
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	4013      	ands	r3, r2
 8009150:	b29b      	uxth	r3, r3
 8009152:	2b00      	cmp	r3, #0
 8009154:	bf0c      	ite	eq
 8009156:	2301      	moveq	r3, #1
 8009158:	2300      	movne	r3, #0
 800915a:	b2db      	uxtb	r3, r3
 800915c:	461a      	mov	r2, r3
 800915e:	e00c      	b.n	800917a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	699b      	ldr	r3, [r3, #24]
 8009166:	43da      	mvns	r2, r3
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	4013      	ands	r3, r2
 800916c:	b29b      	uxth	r3, r3
 800916e:	2b00      	cmp	r3, #0
 8009170:	bf0c      	ite	eq
 8009172:	2301      	moveq	r3, #1
 8009174:	2300      	movne	r3, #0
 8009176:	b2db      	uxtb	r3, r3
 8009178:	461a      	mov	r2, r3
 800917a:	79fb      	ldrb	r3, [r7, #7]
 800917c:	429a      	cmp	r2, r3
 800917e:	d0b6      	beq.n	80090ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b084      	sub	sp, #16
 800918e:	af00      	add	r7, sp, #0
 8009190:	60f8      	str	r0, [r7, #12]
 8009192:	60b9      	str	r1, [r7, #8]
 8009194:	607a      	str	r2, [r7, #4]
 8009196:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009198:	e051      	b.n	800923e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	695b      	ldr	r3, [r3, #20]
 80091a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091a8:	d123      	bne.n	80091f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80091c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2200      	movs	r2, #0
 80091c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2220      	movs	r2, #32
 80091ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2200      	movs	r2, #0
 80091d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091de:	f043 0204 	orr.w	r2, r3, #4
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	e046      	b.n	8009280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091f8:	d021      	beq.n	800923e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091fa:	f7fc fc8b 	bl	8005b14 <HAL_GetTick>
 80091fe:	4602      	mov	r2, r0
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	1ad3      	subs	r3, r2, r3
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	429a      	cmp	r2, r3
 8009208:	d302      	bcc.n	8009210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d116      	bne.n	800923e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2220      	movs	r2, #32
 800921a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800922a:	f043 0220 	orr.w	r2, r3, #32
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2200      	movs	r2, #0
 8009236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e020      	b.n	8009280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	0c1b      	lsrs	r3, r3, #16
 8009242:	b2db      	uxtb	r3, r3
 8009244:	2b01      	cmp	r3, #1
 8009246:	d10c      	bne.n	8009262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	695b      	ldr	r3, [r3, #20]
 800924e:	43da      	mvns	r2, r3
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	4013      	ands	r3, r2
 8009254:	b29b      	uxth	r3, r3
 8009256:	2b00      	cmp	r3, #0
 8009258:	bf14      	ite	ne
 800925a:	2301      	movne	r3, #1
 800925c:	2300      	moveq	r3, #0
 800925e:	b2db      	uxtb	r3, r3
 8009260:	e00b      	b.n	800927a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	699b      	ldr	r3, [r3, #24]
 8009268:	43da      	mvns	r2, r3
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	4013      	ands	r3, r2
 800926e:	b29b      	uxth	r3, r3
 8009270:	2b00      	cmp	r3, #0
 8009272:	bf14      	ite	ne
 8009274:	2301      	movne	r3, #1
 8009276:	2300      	moveq	r3, #0
 8009278:	b2db      	uxtb	r3, r3
 800927a:	2b00      	cmp	r3, #0
 800927c:	d18d      	bne.n	800919a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009294:	e02d      	b.n	80092f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009296:	68f8      	ldr	r0, [r7, #12]
 8009298:	f000 f8ce 	bl	8009438 <I2C_IsAcknowledgeFailed>
 800929c:	4603      	mov	r3, r0
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d001      	beq.n	80092a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e02d      	b.n	8009302 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092ac:	d021      	beq.n	80092f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092ae:	f7fc fc31 	bl	8005b14 <HAL_GetTick>
 80092b2:	4602      	mov	r2, r0
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	1ad3      	subs	r3, r2, r3
 80092b8:	68ba      	ldr	r2, [r7, #8]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d302      	bcc.n	80092c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d116      	bne.n	80092f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2220      	movs	r2, #32
 80092ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092de:	f043 0220 	orr.w	r2, r3, #32
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80092ee:	2301      	movs	r3, #1
 80092f0:	e007      	b.n	8009302 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	695b      	ldr	r3, [r3, #20]
 80092f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092fc:	2b80      	cmp	r3, #128	; 0x80
 80092fe:	d1ca      	bne.n	8009296 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b084      	sub	sp, #16
 800930e:	af00      	add	r7, sp, #0
 8009310:	60f8      	str	r0, [r7, #12]
 8009312:	60b9      	str	r1, [r7, #8]
 8009314:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009316:	e02d      	b.n	8009374 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f000 f88d 	bl	8009438 <I2C_IsAcknowledgeFailed>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d001      	beq.n	8009328 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e02d      	b.n	8009384 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800932e:	d021      	beq.n	8009374 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009330:	f7fc fbf0 	bl	8005b14 <HAL_GetTick>
 8009334:	4602      	mov	r2, r0
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	429a      	cmp	r2, r3
 800933e:	d302      	bcc.n	8009346 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d116      	bne.n	8009374 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2220      	movs	r2, #32
 8009350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009360:	f043 0220 	orr.w	r2, r3, #32
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2200      	movs	r2, #0
 800936c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	e007      	b.n	8009384 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	695b      	ldr	r3, [r3, #20]
 800937a:	f003 0304 	and.w	r3, r3, #4
 800937e:	2b04      	cmp	r3, #4
 8009380:	d1ca      	bne.n	8009318 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009382:	2300      	movs	r3, #0
}
 8009384:	4618      	mov	r0, r3
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009398:	e042      	b.n	8009420 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	695b      	ldr	r3, [r3, #20]
 80093a0:	f003 0310 	and.w	r3, r3, #16
 80093a4:	2b10      	cmp	r3, #16
 80093a6:	d119      	bne.n	80093dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f06f 0210 	mvn.w	r2, #16
 80093b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2200      	movs	r2, #0
 80093b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2220      	movs	r2, #32
 80093bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80093d8:	2301      	movs	r3, #1
 80093da:	e029      	b.n	8009430 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093dc:	f7fc fb9a 	bl	8005b14 <HAL_GetTick>
 80093e0:	4602      	mov	r2, r0
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	1ad3      	subs	r3, r2, r3
 80093e6:	68ba      	ldr	r2, [r7, #8]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d302      	bcc.n	80093f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d116      	bne.n	8009420 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2200      	movs	r2, #0
 80093f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2220      	movs	r2, #32
 80093fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800940c:	f043 0220 	orr.w	r2, r3, #32
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	e007      	b.n	8009430 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	695b      	ldr	r3, [r3, #20]
 8009426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800942a:	2b40      	cmp	r3, #64	; 0x40
 800942c:	d1b5      	bne.n	800939a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3710      	adds	r7, #16
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	695b      	ldr	r3, [r3, #20]
 8009446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800944a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800944e:	d11b      	bne.n	8009488 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009458:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2220      	movs	r2, #32
 8009464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009474:	f043 0204 	orr.w	r2, r3, #4
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	e000      	b.n	800948a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	370c      	adds	r7, #12
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
	...

08009498 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b088      	sub	sp, #32
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d101      	bne.n	80094aa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e128      	b.n	80096fc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d109      	bne.n	80094ca <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4a90      	ldr	r2, [pc, #576]	; (8009704 <HAL_I2S_Init+0x26c>)
 80094c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f7f8 fc23 	bl	8001d10 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2202      	movs	r2, #2
 80094ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	69db      	ldr	r3, [r3, #28]
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	6812      	ldr	r2, [r2, #0]
 80094dc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80094e0:	f023 030f 	bic.w	r3, r3, #15
 80094e4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2202      	movs	r2, #2
 80094ec:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	695b      	ldr	r3, [r3, #20]
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d060      	beq.n	80095b8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d102      	bne.n	8009504 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80094fe:	2310      	movs	r3, #16
 8009500:	617b      	str	r3, [r7, #20]
 8009502:	e001      	b.n	8009508 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8009504:	2320      	movs	r3, #32
 8009506:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	2b20      	cmp	r3, #32
 800950e:	d802      	bhi.n	8009516 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	005b      	lsls	r3, r3, #1
 8009514:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8009516:	2001      	movs	r0, #1
 8009518:	f001 f9a0 	bl	800a85c <HAL_RCCEx_GetPeriphCLKFreq>
 800951c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009526:	d125      	bne.n	8009574 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d010      	beq.n	8009552 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	fbb2 f2f3 	udiv	r2, r2, r3
 800953a:	4613      	mov	r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	4413      	add	r3, r2
 8009540:	005b      	lsls	r3, r3, #1
 8009542:	461a      	mov	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	695b      	ldr	r3, [r3, #20]
 8009548:	fbb2 f3f3 	udiv	r3, r2, r3
 800954c:	3305      	adds	r3, #5
 800954e:	613b      	str	r3, [r7, #16]
 8009550:	e01f      	b.n	8009592 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	00db      	lsls	r3, r3, #3
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	fbb2 f2f3 	udiv	r2, r2, r3
 800955c:	4613      	mov	r3, r2
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4413      	add	r3, r2
 8009562:	005b      	lsls	r3, r3, #1
 8009564:	461a      	mov	r2, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	695b      	ldr	r3, [r3, #20]
 800956a:	fbb2 f3f3 	udiv	r3, r2, r3
 800956e:	3305      	adds	r3, #5
 8009570:	613b      	str	r3, [r7, #16]
 8009572:	e00e      	b.n	8009592 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	fbb2 f2f3 	udiv	r2, r2, r3
 800957c:	4613      	mov	r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	4413      	add	r3, r2
 8009582:	005b      	lsls	r3, r3, #1
 8009584:	461a      	mov	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	695b      	ldr	r3, [r3, #20]
 800958a:	fbb2 f3f3 	udiv	r3, r2, r3
 800958e:	3305      	adds	r3, #5
 8009590:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	4a5c      	ldr	r2, [pc, #368]	; (8009708 <HAL_I2S_Init+0x270>)
 8009596:	fba2 2303 	umull	r2, r3, r2, r3
 800959a:	08db      	lsrs	r3, r3, #3
 800959c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	f003 0301 	and.w	r3, r3, #1
 80095a4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80095a6:	693a      	ldr	r2, [r7, #16]
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	1ad3      	subs	r3, r2, r3
 80095ac:	085b      	lsrs	r3, r3, #1
 80095ae:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	021b      	lsls	r3, r3, #8
 80095b4:	61bb      	str	r3, [r7, #24]
 80095b6:	e003      	b.n	80095c0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80095b8:	2302      	movs	r3, #2
 80095ba:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80095bc:	2300      	movs	r3, #0
 80095be:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d902      	bls.n	80095cc <HAL_I2S_Init+0x134>
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	2bff      	cmp	r3, #255	; 0xff
 80095ca:	d907      	bls.n	80095dc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095d0:	f043 0210 	orr.w	r2, r3, #16
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	e08f      	b.n	80096fc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	691a      	ldr	r2, [r3, #16]
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	ea42 0103 	orr.w	r1, r2, r3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	69fa      	ldr	r2, [r7, #28]
 80095ec:	430a      	orrs	r2, r1
 80095ee:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	69db      	ldr	r3, [r3, #28]
 80095f6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80095fa:	f023 030f 	bic.w	r3, r3, #15
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	6851      	ldr	r1, [r2, #4]
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	6892      	ldr	r2, [r2, #8]
 8009606:	4311      	orrs	r1, r2
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	68d2      	ldr	r2, [r2, #12]
 800960c:	4311      	orrs	r1, r2
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	6992      	ldr	r2, [r2, #24]
 8009612:	430a      	orrs	r2, r1
 8009614:	431a      	orrs	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800961e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6a1b      	ldr	r3, [r3, #32]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d161      	bne.n	80096ec <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4a38      	ldr	r2, [pc, #224]	; (800970c <HAL_I2S_Init+0x274>)
 800962c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a37      	ldr	r2, [pc, #220]	; (8009710 <HAL_I2S_Init+0x278>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d101      	bne.n	800963c <HAL_I2S_Init+0x1a4>
 8009638:	4b36      	ldr	r3, [pc, #216]	; (8009714 <HAL_I2S_Init+0x27c>)
 800963a:	e001      	b.n	8009640 <HAL_I2S_Init+0x1a8>
 800963c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009640:	69db      	ldr	r3, [r3, #28]
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	6812      	ldr	r2, [r2, #0]
 8009646:	4932      	ldr	r1, [pc, #200]	; (8009710 <HAL_I2S_Init+0x278>)
 8009648:	428a      	cmp	r2, r1
 800964a:	d101      	bne.n	8009650 <HAL_I2S_Init+0x1b8>
 800964c:	4a31      	ldr	r2, [pc, #196]	; (8009714 <HAL_I2S_Init+0x27c>)
 800964e:	e001      	b.n	8009654 <HAL_I2S_Init+0x1bc>
 8009650:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8009654:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8009658:	f023 030f 	bic.w	r3, r3, #15
 800965c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a2b      	ldr	r2, [pc, #172]	; (8009710 <HAL_I2S_Init+0x278>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d101      	bne.n	800966c <HAL_I2S_Init+0x1d4>
 8009668:	4b2a      	ldr	r3, [pc, #168]	; (8009714 <HAL_I2S_Init+0x27c>)
 800966a:	e001      	b.n	8009670 <HAL_I2S_Init+0x1d8>
 800966c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009670:	2202      	movs	r2, #2
 8009672:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a25      	ldr	r2, [pc, #148]	; (8009710 <HAL_I2S_Init+0x278>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d101      	bne.n	8009682 <HAL_I2S_Init+0x1ea>
 800967e:	4b25      	ldr	r3, [pc, #148]	; (8009714 <HAL_I2S_Init+0x27c>)
 8009680:	e001      	b.n	8009686 <HAL_I2S_Init+0x1ee>
 8009682:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009686:	69db      	ldr	r3, [r3, #28]
 8009688:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009692:	d003      	beq.n	800969c <HAL_I2S_Init+0x204>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d103      	bne.n	80096a4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800969c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096a0:	613b      	str	r3, [r7, #16]
 80096a2:	e001      	b.n	80096a8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80096a4:	2300      	movs	r3, #0
 80096a6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80096b2:	4313      	orrs	r3, r2
 80096b4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80096bc:	4313      	orrs	r3, r2
 80096be:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	699b      	ldr	r3, [r3, #24]
 80096c4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80096c6:	4313      	orrs	r3, r2
 80096c8:	b29a      	uxth	r2, r3
 80096ca:	897b      	ldrh	r3, [r7, #10]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80096d4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a0d      	ldr	r2, [pc, #52]	; (8009710 <HAL_I2S_Init+0x278>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d101      	bne.n	80096e4 <HAL_I2S_Init+0x24c>
 80096e0:	4b0c      	ldr	r3, [pc, #48]	; (8009714 <HAL_I2S_Init+0x27c>)
 80096e2:	e001      	b.n	80096e8 <HAL_I2S_Init+0x250>
 80096e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80096e8:	897a      	ldrh	r2, [r7, #10]
 80096ea:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2201      	movs	r2, #1
 80096f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3720      	adds	r7, #32
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	0800980f 	.word	0x0800980f
 8009708:	cccccccd 	.word	0xcccccccd
 800970c:	08009925 	.word	0x08009925
 8009710:	40003800 	.word	0x40003800
 8009714:	40003400 	.word	0x40003400

08009718 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8009734:	bf00      	nop
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8009748:	bf00      	nop
 800974a:	370c      	adds	r7, #12
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009760:	881a      	ldrh	r2, [r3, #0]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976c:	1c9a      	adds	r2, r3, #2
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009776:	b29b      	uxth	r3, r3
 8009778:	3b01      	subs	r3, #1
 800977a:	b29a      	uxth	r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009784:	b29b      	uxth	r3, r3
 8009786:	2b00      	cmp	r3, #0
 8009788:	d10e      	bne.n	80097a8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	685a      	ldr	r2, [r3, #4]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009798:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2201      	movs	r2, #1
 800979e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f7ff ffb8 	bl	8009718 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80097a8:	bf00      	nop
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68da      	ldr	r2, [r3, #12]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c2:	b292      	uxth	r2, r2
 80097c4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ca:	1c9a      	adds	r2, r3, #2
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	3b01      	subs	r3, #1
 80097d8:	b29a      	uxth	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10e      	bne.n	8009806 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	685a      	ldr	r2, [r3, #4]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80097f6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f7ff ff93 	bl	800972c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8009806:	bf00      	nop
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b086      	sub	sp, #24
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009824:	b2db      	uxtb	r3, r3
 8009826:	2b04      	cmp	r3, #4
 8009828:	d13a      	bne.n	80098a0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	f003 0301 	and.w	r3, r3, #1
 8009830:	2b01      	cmp	r3, #1
 8009832:	d109      	bne.n	8009848 <I2S_IRQHandler+0x3a>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800983e:	2b40      	cmp	r3, #64	; 0x40
 8009840:	d102      	bne.n	8009848 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f7ff ffb4 	bl	80097b0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800984e:	2b40      	cmp	r3, #64	; 0x40
 8009850:	d126      	bne.n	80098a0 <I2S_IRQHandler+0x92>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	f003 0320 	and.w	r3, r3, #32
 800985c:	2b20      	cmp	r3, #32
 800985e:	d11f      	bne.n	80098a0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	685a      	ldr	r2, [r3, #4]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800986e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8009870:	2300      	movs	r3, #0
 8009872:	613b      	str	r3, [r7, #16]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	613b      	str	r3, [r7, #16]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	613b      	str	r3, [r7, #16]
 8009884:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2201      	movs	r2, #1
 800988a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009892:	f043 0202 	orr.w	r2, r3, #2
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f7ff ff50 	bl	8009740 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	2b03      	cmp	r3, #3
 80098aa:	d136      	bne.n	800991a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	f003 0302 	and.w	r3, r3, #2
 80098b2:	2b02      	cmp	r3, #2
 80098b4:	d109      	bne.n	80098ca <I2S_IRQHandler+0xbc>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098c0:	2b80      	cmp	r3, #128	; 0x80
 80098c2:	d102      	bne.n	80098ca <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f7ff ff45 	bl	8009754 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	f003 0308 	and.w	r3, r3, #8
 80098d0:	2b08      	cmp	r3, #8
 80098d2:	d122      	bne.n	800991a <I2S_IRQHandler+0x10c>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	f003 0320 	and.w	r3, r3, #32
 80098de:	2b20      	cmp	r3, #32
 80098e0:	d11b      	bne.n	800991a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	685a      	ldr	r2, [r3, #4]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80098f0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80098f2:	2300      	movs	r3, #0
 80098f4:	60fb      	str	r3, [r7, #12]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	60fb      	str	r3, [r7, #12]
 80098fe:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800990c:	f043 0204 	orr.w	r2, r3, #4
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f7ff ff13 	bl	8009740 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800991a:	bf00      	nop
 800991c:	3718      	adds	r7, #24
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
	...

08009924 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b088      	sub	sp, #32
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4aa2      	ldr	r2, [pc, #648]	; (8009bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d101      	bne.n	8009942 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800993e:	4ba2      	ldr	r3, [pc, #648]	; (8009bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009940:	e001      	b.n	8009946 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8009942:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a9b      	ldr	r2, [pc, #620]	; (8009bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d101      	bne.n	8009960 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800995c:	4b9a      	ldr	r3, [pc, #616]	; (8009bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800995e:	e001      	b.n	8009964 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8009960:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009970:	d004      	beq.n	800997c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	2b00      	cmp	r3, #0
 8009978:	f040 8099 	bne.w	8009aae <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	f003 0302 	and.w	r3, r3, #2
 8009982:	2b02      	cmp	r3, #2
 8009984:	d107      	bne.n	8009996 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800998c:	2b00      	cmp	r3, #0
 800998e:	d002      	beq.n	8009996 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 f925 	bl	8009be0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	f003 0301 	and.w	r3, r3, #1
 800999c:	2b01      	cmp	r3, #1
 800999e:	d107      	bne.n	80099b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d002      	beq.n	80099b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 f9c8 	bl	8009d40 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099b6:	2b40      	cmp	r3, #64	; 0x40
 80099b8:	d13a      	bne.n	8009a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	f003 0320 	and.w	r3, r3, #32
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d035      	beq.n	8009a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a7e      	ldr	r2, [pc, #504]	; (8009bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d101      	bne.n	80099d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80099ce:	4b7e      	ldr	r3, [pc, #504]	; (8009bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80099d0:	e001      	b.n	80099d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80099d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80099d6:	685a      	ldr	r2, [r3, #4]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4979      	ldr	r1, [pc, #484]	; (8009bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80099de:	428b      	cmp	r3, r1
 80099e0:	d101      	bne.n	80099e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80099e2:	4b79      	ldr	r3, [pc, #484]	; (8009bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80099e4:	e001      	b.n	80099ea <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80099e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80099ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80099ee:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	685a      	ldr	r2, [r3, #4]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80099fe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8009a00:	2300      	movs	r3, #0
 8009a02:	60fb      	str	r3, [r7, #12]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68db      	ldr	r3, [r3, #12]
 8009a0a:	60fb      	str	r3, [r7, #12]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	60fb      	str	r3, [r7, #12]
 8009a14:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2201      	movs	r2, #1
 8009a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a22:	f043 0202 	orr.w	r2, r3, #2
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f7ff fe88 	bl	8009740 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	f003 0308 	and.w	r3, r3, #8
 8009a36:	2b08      	cmp	r3, #8
 8009a38:	f040 80be 	bne.w	8009bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	f003 0320 	and.w	r3, r3, #32
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	f000 80b8 	beq.w	8009bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	685a      	ldr	r2, [r3, #4]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009a56:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a59      	ldr	r2, [pc, #356]	; (8009bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d101      	bne.n	8009a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8009a62:	4b59      	ldr	r3, [pc, #356]	; (8009bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009a64:	e001      	b.n	8009a6a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8009a66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009a6a:	685a      	ldr	r2, [r3, #4]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4954      	ldr	r1, [pc, #336]	; (8009bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8009a72:	428b      	cmp	r3, r1
 8009a74:	d101      	bne.n	8009a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8009a76:	4b54      	ldr	r3, [pc, #336]	; (8009bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009a78:	e001      	b.n	8009a7e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8009a7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009a7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009a82:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8009a84:	2300      	movs	r3, #0
 8009a86:	60bb      	str	r3, [r7, #8]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	60bb      	str	r3, [r7, #8]
 8009a90:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2201      	movs	r2, #1
 8009a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a9e:	f043 0204 	orr.w	r2, r3, #4
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f7ff fe4a 	bl	8009740 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009aac:	e084      	b.n	8009bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	f003 0302 	and.w	r3, r3, #2
 8009ab4:	2b02      	cmp	r3, #2
 8009ab6:	d107      	bne.n	8009ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d002      	beq.n	8009ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f8be 	bl	8009c44 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	f003 0301 	and.w	r3, r3, #1
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d107      	bne.n	8009ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d002      	beq.n	8009ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 f8fd 	bl	8009cdc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009ae2:	69fb      	ldr	r3, [r7, #28]
 8009ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ae8:	2b40      	cmp	r3, #64	; 0x40
 8009aea:	d12f      	bne.n	8009b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	f003 0320 	and.w	r3, r3, #32
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d02a      	beq.n	8009b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009b04:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a2e      	ldr	r2, [pc, #184]	; (8009bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d101      	bne.n	8009b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8009b10:	4b2d      	ldr	r3, [pc, #180]	; (8009bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009b12:	e001      	b.n	8009b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8009b14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009b18:	685a      	ldr	r2, [r3, #4]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4929      	ldr	r1, [pc, #164]	; (8009bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8009b20:	428b      	cmp	r3, r1
 8009b22:	d101      	bne.n	8009b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8009b24:	4b28      	ldr	r3, [pc, #160]	; (8009bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009b26:	e001      	b.n	8009b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8009b28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009b2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009b30:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2201      	movs	r2, #1
 8009b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b3e:	f043 0202 	orr.w	r2, r3, #2
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7ff fdfa 	bl	8009740 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	f003 0308 	and.w	r3, r3, #8
 8009b52:	2b08      	cmp	r3, #8
 8009b54:	d131      	bne.n	8009bba <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	f003 0320 	and.w	r3, r3, #32
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d02c      	beq.n	8009bba <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a17      	ldr	r2, [pc, #92]	; (8009bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d101      	bne.n	8009b6e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8009b6a:	4b17      	ldr	r3, [pc, #92]	; (8009bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009b6c:	e001      	b.n	8009b72 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8009b6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009b72:	685a      	ldr	r2, [r3, #4]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4912      	ldr	r1, [pc, #72]	; (8009bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8009b7a:	428b      	cmp	r3, r1
 8009b7c:	d101      	bne.n	8009b82 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8009b7e:	4b12      	ldr	r3, [pc, #72]	; (8009bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8009b80:	e001      	b.n	8009b86 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8009b82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009b86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009b8a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	685a      	ldr	r2, [r3, #4]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009b9a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ba8:	f043 0204 	orr.w	r2, r3, #4
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f7ff fdc5 	bl	8009740 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009bb6:	e000      	b.n	8009bba <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009bb8:	bf00      	nop
}
 8009bba:	bf00      	nop
 8009bbc:	3720      	adds	r7, #32
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	40003800 	.word	0x40003800
 8009bc8:	40003400 	.word	0x40003400

08009bcc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8009bd4:	bf00      	nop
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bec:	1c99      	adds	r1, r3, #2
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	6251      	str	r1, [r2, #36]	; 0x24
 8009bf2:	881a      	ldrh	r2, [r3, #0]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	3b01      	subs	r3, #1
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d113      	bne.n	8009c3a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	685a      	ldr	r2, [r3, #4]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009c20:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d106      	bne.n	8009c3a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f7ff ffc9 	bl	8009bcc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009c3a:	bf00      	nop
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
	...

08009c44 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c50:	1c99      	adds	r1, r3, #2
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	6251      	str	r1, [r2, #36]	; 0x24
 8009c56:	8819      	ldrh	r1, [r3, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a1d      	ldr	r2, [pc, #116]	; (8009cd4 <I2SEx_TxISR_I2SExt+0x90>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d101      	bne.n	8009c66 <I2SEx_TxISR_I2SExt+0x22>
 8009c62:	4b1d      	ldr	r3, [pc, #116]	; (8009cd8 <I2SEx_TxISR_I2SExt+0x94>)
 8009c64:	e001      	b.n	8009c6a <I2SEx_TxISR_I2SExt+0x26>
 8009c66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009c6a:	460a      	mov	r2, r1
 8009c6c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	3b01      	subs	r3, #1
 8009c76:	b29a      	uxth	r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d121      	bne.n	8009cca <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a12      	ldr	r2, [pc, #72]	; (8009cd4 <I2SEx_TxISR_I2SExt+0x90>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d101      	bne.n	8009c94 <I2SEx_TxISR_I2SExt+0x50>
 8009c90:	4b11      	ldr	r3, [pc, #68]	; (8009cd8 <I2SEx_TxISR_I2SExt+0x94>)
 8009c92:	e001      	b.n	8009c98 <I2SEx_TxISR_I2SExt+0x54>
 8009c94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009c98:	685a      	ldr	r2, [r3, #4]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	490d      	ldr	r1, [pc, #52]	; (8009cd4 <I2SEx_TxISR_I2SExt+0x90>)
 8009ca0:	428b      	cmp	r3, r1
 8009ca2:	d101      	bne.n	8009ca8 <I2SEx_TxISR_I2SExt+0x64>
 8009ca4:	4b0c      	ldr	r3, [pc, #48]	; (8009cd8 <I2SEx_TxISR_I2SExt+0x94>)
 8009ca6:	e001      	b.n	8009cac <I2SEx_TxISR_I2SExt+0x68>
 8009ca8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009cac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009cb0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d106      	bne.n	8009cca <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f7ff ff81 	bl	8009bcc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009cca:	bf00      	nop
 8009ccc:	3708      	adds	r7, #8
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	40003800 	.word	0x40003800
 8009cd8:	40003400 	.word	0x40003400

08009cdc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	68d8      	ldr	r0, [r3, #12]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cee:	1c99      	adds	r1, r3, #2
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8009cf4:	b282      	uxth	r2, r0
 8009cf6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	3b01      	subs	r3, #1
 8009d00:	b29a      	uxth	r2, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d113      	bne.n	8009d38 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	685a      	ldr	r2, [r3, #4]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009d1e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d106      	bne.n	8009d38 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f7ff ff4a 	bl	8009bcc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009d38:	bf00      	nop
 8009d3a:	3708      	adds	r7, #8
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a20      	ldr	r2, [pc, #128]	; (8009dd0 <I2SEx_RxISR_I2SExt+0x90>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d101      	bne.n	8009d56 <I2SEx_RxISR_I2SExt+0x16>
 8009d52:	4b20      	ldr	r3, [pc, #128]	; (8009dd4 <I2SEx_RxISR_I2SExt+0x94>)
 8009d54:	e001      	b.n	8009d5a <I2SEx_RxISR_I2SExt+0x1a>
 8009d56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009d5a:	68d8      	ldr	r0, [r3, #12]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d60:	1c99      	adds	r1, r3, #2
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	62d1      	str	r1, [r2, #44]	; 0x2c
 8009d66:	b282      	uxth	r2, r0
 8009d68:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	3b01      	subs	r3, #1
 8009d72:	b29a      	uxth	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d121      	bne.n	8009dc6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a12      	ldr	r2, [pc, #72]	; (8009dd0 <I2SEx_RxISR_I2SExt+0x90>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d101      	bne.n	8009d90 <I2SEx_RxISR_I2SExt+0x50>
 8009d8c:	4b11      	ldr	r3, [pc, #68]	; (8009dd4 <I2SEx_RxISR_I2SExt+0x94>)
 8009d8e:	e001      	b.n	8009d94 <I2SEx_RxISR_I2SExt+0x54>
 8009d90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009d94:	685a      	ldr	r2, [r3, #4]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	490d      	ldr	r1, [pc, #52]	; (8009dd0 <I2SEx_RxISR_I2SExt+0x90>)
 8009d9c:	428b      	cmp	r3, r1
 8009d9e:	d101      	bne.n	8009da4 <I2SEx_RxISR_I2SExt+0x64>
 8009da0:	4b0c      	ldr	r3, [pc, #48]	; (8009dd4 <I2SEx_RxISR_I2SExt+0x94>)
 8009da2:	e001      	b.n	8009da8 <I2SEx_RxISR_I2SExt+0x68>
 8009da4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009da8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009dac:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d106      	bne.n	8009dc6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f7ff ff03 	bl	8009bcc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009dc6:	bf00      	nop
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	40003800 	.word	0x40003800
 8009dd4:	40003400 	.word	0x40003400

08009dd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b086      	sub	sp, #24
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d101      	bne.n	8009dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	e264      	b.n	800a2b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f003 0301 	and.w	r3, r3, #1
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d075      	beq.n	8009ee2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009df6:	4ba3      	ldr	r3, [pc, #652]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	f003 030c 	and.w	r3, r3, #12
 8009dfe:	2b04      	cmp	r3, #4
 8009e00:	d00c      	beq.n	8009e1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e02:	4ba0      	ldr	r3, [pc, #640]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009e0a:	2b08      	cmp	r3, #8
 8009e0c:	d112      	bne.n	8009e34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e0e:	4b9d      	ldr	r3, [pc, #628]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e1a:	d10b      	bne.n	8009e34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e1c:	4b99      	ldr	r3, [pc, #612]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d05b      	beq.n	8009ee0 <HAL_RCC_OscConfig+0x108>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d157      	bne.n	8009ee0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	e23f      	b.n	800a2b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e3c:	d106      	bne.n	8009e4c <HAL_RCC_OscConfig+0x74>
 8009e3e:	4b91      	ldr	r3, [pc, #580]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a90      	ldr	r2, [pc, #576]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 8009e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e48:	6013      	str	r3, [r2, #0]
 8009e4a:	e01d      	b.n	8009e88 <HAL_RCC_OscConfig+0xb0>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e54:	d10c      	bne.n	8009e70 <HAL_RCC_OscConfig+0x98>
 8009e56:	4b8b      	ldr	r3, [pc, #556]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a8a      	ldr	r2, [pc, #552]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 8009e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e60:	6013      	str	r3, [r2, #0]
 8009e62:	4b88      	ldr	r3, [pc, #544]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a87      	ldr	r2, [pc, #540]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 8009e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e6c:	6013      	str	r3, [r2, #0]
 8009e6e:	e00b      	b.n	8009e88 <HAL_RCC_OscConfig+0xb0>
 8009e70:	4b84      	ldr	r3, [pc, #528]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a83      	ldr	r2, [pc, #524]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 8009e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e7a:	6013      	str	r3, [r2, #0]
 8009e7c:	4b81      	ldr	r3, [pc, #516]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a80      	ldr	r2, [pc, #512]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 8009e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d013      	beq.n	8009eb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e90:	f7fb fe40 	bl	8005b14 <HAL_GetTick>
 8009e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e96:	e008      	b.n	8009eaa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009e98:	f7fb fe3c 	bl	8005b14 <HAL_GetTick>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	2b64      	cmp	r3, #100	; 0x64
 8009ea4:	d901      	bls.n	8009eaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009ea6:	2303      	movs	r3, #3
 8009ea8:	e204      	b.n	800a2b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009eaa:	4b76      	ldr	r3, [pc, #472]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d0f0      	beq.n	8009e98 <HAL_RCC_OscConfig+0xc0>
 8009eb6:	e014      	b.n	8009ee2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009eb8:	f7fb fe2c 	bl	8005b14 <HAL_GetTick>
 8009ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ebe:	e008      	b.n	8009ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ec0:	f7fb fe28 	bl	8005b14 <HAL_GetTick>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	1ad3      	subs	r3, r2, r3
 8009eca:	2b64      	cmp	r3, #100	; 0x64
 8009ecc:	d901      	bls.n	8009ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	e1f0      	b.n	800a2b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ed2:	4b6c      	ldr	r3, [pc, #432]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1f0      	bne.n	8009ec0 <HAL_RCC_OscConfig+0xe8>
 8009ede:	e000      	b.n	8009ee2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 0302 	and.w	r3, r3, #2
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d063      	beq.n	8009fb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009eee:	4b65      	ldr	r3, [pc, #404]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	f003 030c 	and.w	r3, r3, #12
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00b      	beq.n	8009f12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009efa:	4b62      	ldr	r3, [pc, #392]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009f02:	2b08      	cmp	r3, #8
 8009f04:	d11c      	bne.n	8009f40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f06:	4b5f      	ldr	r3, [pc, #380]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d116      	bne.n	8009f40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f12:	4b5c      	ldr	r3, [pc, #368]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f003 0302 	and.w	r3, r3, #2
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d005      	beq.n	8009f2a <HAL_RCC_OscConfig+0x152>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d001      	beq.n	8009f2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009f26:	2301      	movs	r3, #1
 8009f28:	e1c4      	b.n	800a2b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f2a:	4b56      	ldr	r3, [pc, #344]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	00db      	lsls	r3, r3, #3
 8009f38:	4952      	ldr	r1, [pc, #328]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f3e:	e03a      	b.n	8009fb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d020      	beq.n	8009f8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009f48:	4b4f      	ldr	r3, [pc, #316]	; (800a088 <HAL_RCC_OscConfig+0x2b0>)
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f4e:	f7fb fde1 	bl	8005b14 <HAL_GetTick>
 8009f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f54:	e008      	b.n	8009f68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f56:	f7fb fddd 	bl	8005b14 <HAL_GetTick>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	1ad3      	subs	r3, r2, r3
 8009f60:	2b02      	cmp	r3, #2
 8009f62:	d901      	bls.n	8009f68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009f64:	2303      	movs	r3, #3
 8009f66:	e1a5      	b.n	800a2b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f68:	4b46      	ldr	r3, [pc, #280]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f003 0302 	and.w	r3, r3, #2
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d0f0      	beq.n	8009f56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f74:	4b43      	ldr	r3, [pc, #268]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	691b      	ldr	r3, [r3, #16]
 8009f80:	00db      	lsls	r3, r3, #3
 8009f82:	4940      	ldr	r1, [pc, #256]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 8009f84:	4313      	orrs	r3, r2
 8009f86:	600b      	str	r3, [r1, #0]
 8009f88:	e015      	b.n	8009fb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f8a:	4b3f      	ldr	r3, [pc, #252]	; (800a088 <HAL_RCC_OscConfig+0x2b0>)
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f90:	f7fb fdc0 	bl	8005b14 <HAL_GetTick>
 8009f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f96:	e008      	b.n	8009faa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f98:	f7fb fdbc 	bl	8005b14 <HAL_GetTick>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	1ad3      	subs	r3, r2, r3
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d901      	bls.n	8009faa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	e184      	b.n	800a2b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009faa:	4b36      	ldr	r3, [pc, #216]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f003 0302 	and.w	r3, r3, #2
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1f0      	bne.n	8009f98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f003 0308 	and.w	r3, r3, #8
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d030      	beq.n	800a024 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	695b      	ldr	r3, [r3, #20]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d016      	beq.n	8009ff8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009fca:	4b30      	ldr	r3, [pc, #192]	; (800a08c <HAL_RCC_OscConfig+0x2b4>)
 8009fcc:	2201      	movs	r2, #1
 8009fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fd0:	f7fb fda0 	bl	8005b14 <HAL_GetTick>
 8009fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009fd6:	e008      	b.n	8009fea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009fd8:	f7fb fd9c 	bl	8005b14 <HAL_GetTick>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	1ad3      	subs	r3, r2, r3
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	d901      	bls.n	8009fea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	e164      	b.n	800a2b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009fea:	4b26      	ldr	r3, [pc, #152]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 8009fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fee:	f003 0302 	and.w	r3, r3, #2
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d0f0      	beq.n	8009fd8 <HAL_RCC_OscConfig+0x200>
 8009ff6:	e015      	b.n	800a024 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009ff8:	4b24      	ldr	r3, [pc, #144]	; (800a08c <HAL_RCC_OscConfig+0x2b4>)
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009ffe:	f7fb fd89 	bl	8005b14 <HAL_GetTick>
 800a002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a004:	e008      	b.n	800a018 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a006:	f7fb fd85 	bl	8005b14 <HAL_GetTick>
 800a00a:	4602      	mov	r2, r0
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	1ad3      	subs	r3, r2, r3
 800a010:	2b02      	cmp	r3, #2
 800a012:	d901      	bls.n	800a018 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a014:	2303      	movs	r3, #3
 800a016:	e14d      	b.n	800a2b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a018:	4b1a      	ldr	r3, [pc, #104]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 800a01a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a01c:	f003 0302 	and.w	r3, r3, #2
 800a020:	2b00      	cmp	r3, #0
 800a022:	d1f0      	bne.n	800a006 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f003 0304 	and.w	r3, r3, #4
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f000 80a0 	beq.w	800a172 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a032:	2300      	movs	r3, #0
 800a034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a036:	4b13      	ldr	r3, [pc, #76]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 800a038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d10f      	bne.n	800a062 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a042:	2300      	movs	r3, #0
 800a044:	60bb      	str	r3, [r7, #8]
 800a046:	4b0f      	ldr	r3, [pc, #60]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 800a048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04a:	4a0e      	ldr	r2, [pc, #56]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 800a04c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a050:	6413      	str	r3, [r2, #64]	; 0x40
 800a052:	4b0c      	ldr	r3, [pc, #48]	; (800a084 <HAL_RCC_OscConfig+0x2ac>)
 800a054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a05a:	60bb      	str	r3, [r7, #8]
 800a05c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a05e:	2301      	movs	r3, #1
 800a060:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a062:	4b0b      	ldr	r3, [pc, #44]	; (800a090 <HAL_RCC_OscConfig+0x2b8>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d121      	bne.n	800a0b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a06e:	4b08      	ldr	r3, [pc, #32]	; (800a090 <HAL_RCC_OscConfig+0x2b8>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a07      	ldr	r2, [pc, #28]	; (800a090 <HAL_RCC_OscConfig+0x2b8>)
 800a074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a07a:	f7fb fd4b 	bl	8005b14 <HAL_GetTick>
 800a07e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a080:	e011      	b.n	800a0a6 <HAL_RCC_OscConfig+0x2ce>
 800a082:	bf00      	nop
 800a084:	40023800 	.word	0x40023800
 800a088:	42470000 	.word	0x42470000
 800a08c:	42470e80 	.word	0x42470e80
 800a090:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a094:	f7fb fd3e 	bl	8005b14 <HAL_GetTick>
 800a098:	4602      	mov	r2, r0
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d901      	bls.n	800a0a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	e106      	b.n	800a2b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a0a6:	4b85      	ldr	r3, [pc, #532]	; (800a2bc <HAL_RCC_OscConfig+0x4e4>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d0f0      	beq.n	800a094 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d106      	bne.n	800a0c8 <HAL_RCC_OscConfig+0x2f0>
 800a0ba:	4b81      	ldr	r3, [pc, #516]	; (800a2c0 <HAL_RCC_OscConfig+0x4e8>)
 800a0bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0be:	4a80      	ldr	r2, [pc, #512]	; (800a2c0 <HAL_RCC_OscConfig+0x4e8>)
 800a0c0:	f043 0301 	orr.w	r3, r3, #1
 800a0c4:	6713      	str	r3, [r2, #112]	; 0x70
 800a0c6:	e01c      	b.n	800a102 <HAL_RCC_OscConfig+0x32a>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	2b05      	cmp	r3, #5
 800a0ce:	d10c      	bne.n	800a0ea <HAL_RCC_OscConfig+0x312>
 800a0d0:	4b7b      	ldr	r3, [pc, #492]	; (800a2c0 <HAL_RCC_OscConfig+0x4e8>)
 800a0d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0d4:	4a7a      	ldr	r2, [pc, #488]	; (800a2c0 <HAL_RCC_OscConfig+0x4e8>)
 800a0d6:	f043 0304 	orr.w	r3, r3, #4
 800a0da:	6713      	str	r3, [r2, #112]	; 0x70
 800a0dc:	4b78      	ldr	r3, [pc, #480]	; (800a2c0 <HAL_RCC_OscConfig+0x4e8>)
 800a0de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0e0:	4a77      	ldr	r2, [pc, #476]	; (800a2c0 <HAL_RCC_OscConfig+0x4e8>)
 800a0e2:	f043 0301 	orr.w	r3, r3, #1
 800a0e6:	6713      	str	r3, [r2, #112]	; 0x70
 800a0e8:	e00b      	b.n	800a102 <HAL_RCC_OscConfig+0x32a>
 800a0ea:	4b75      	ldr	r3, [pc, #468]	; (800a2c0 <HAL_RCC_OscConfig+0x4e8>)
 800a0ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ee:	4a74      	ldr	r2, [pc, #464]	; (800a2c0 <HAL_RCC_OscConfig+0x4e8>)
 800a0f0:	f023 0301 	bic.w	r3, r3, #1
 800a0f4:	6713      	str	r3, [r2, #112]	; 0x70
 800a0f6:	4b72      	ldr	r3, [pc, #456]	; (800a2c0 <HAL_RCC_OscConfig+0x4e8>)
 800a0f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0fa:	4a71      	ldr	r2, [pc, #452]	; (800a2c0 <HAL_RCC_OscConfig+0x4e8>)
 800a0fc:	f023 0304 	bic.w	r3, r3, #4
 800a100:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d015      	beq.n	800a136 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a10a:	f7fb fd03 	bl	8005b14 <HAL_GetTick>
 800a10e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a110:	e00a      	b.n	800a128 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a112:	f7fb fcff 	bl	8005b14 <HAL_GetTick>
 800a116:	4602      	mov	r2, r0
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	1ad3      	subs	r3, r2, r3
 800a11c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a120:	4293      	cmp	r3, r2
 800a122:	d901      	bls.n	800a128 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a124:	2303      	movs	r3, #3
 800a126:	e0c5      	b.n	800a2b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a128:	4b65      	ldr	r3, [pc, #404]	; (800a2c0 <HAL_RCC_OscConfig+0x4e8>)
 800a12a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a12c:	f003 0302 	and.w	r3, r3, #2
 800a130:	2b00      	cmp	r3, #0
 800a132:	d0ee      	beq.n	800a112 <HAL_RCC_OscConfig+0x33a>
 800a134:	e014      	b.n	800a160 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a136:	f7fb fced 	bl	8005b14 <HAL_GetTick>
 800a13a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a13c:	e00a      	b.n	800a154 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a13e:	f7fb fce9 	bl	8005b14 <HAL_GetTick>
 800a142:	4602      	mov	r2, r0
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	1ad3      	subs	r3, r2, r3
 800a148:	f241 3288 	movw	r2, #5000	; 0x1388
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d901      	bls.n	800a154 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a150:	2303      	movs	r3, #3
 800a152:	e0af      	b.n	800a2b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a154:	4b5a      	ldr	r3, [pc, #360]	; (800a2c0 <HAL_RCC_OscConfig+0x4e8>)
 800a156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a158:	f003 0302 	and.w	r3, r3, #2
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d1ee      	bne.n	800a13e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a160:	7dfb      	ldrb	r3, [r7, #23]
 800a162:	2b01      	cmp	r3, #1
 800a164:	d105      	bne.n	800a172 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a166:	4b56      	ldr	r3, [pc, #344]	; (800a2c0 <HAL_RCC_OscConfig+0x4e8>)
 800a168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a16a:	4a55      	ldr	r2, [pc, #340]	; (800a2c0 <HAL_RCC_OscConfig+0x4e8>)
 800a16c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a170:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	699b      	ldr	r3, [r3, #24]
 800a176:	2b00      	cmp	r3, #0
 800a178:	f000 809b 	beq.w	800a2b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a17c:	4b50      	ldr	r3, [pc, #320]	; (800a2c0 <HAL_RCC_OscConfig+0x4e8>)
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	f003 030c 	and.w	r3, r3, #12
 800a184:	2b08      	cmp	r3, #8
 800a186:	d05c      	beq.n	800a242 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	699b      	ldr	r3, [r3, #24]
 800a18c:	2b02      	cmp	r3, #2
 800a18e:	d141      	bne.n	800a214 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a190:	4b4c      	ldr	r3, [pc, #304]	; (800a2c4 <HAL_RCC_OscConfig+0x4ec>)
 800a192:	2200      	movs	r2, #0
 800a194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a196:	f7fb fcbd 	bl	8005b14 <HAL_GetTick>
 800a19a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a19c:	e008      	b.n	800a1b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a19e:	f7fb fcb9 	bl	8005b14 <HAL_GetTick>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	1ad3      	subs	r3, r2, r3
 800a1a8:	2b02      	cmp	r3, #2
 800a1aa:	d901      	bls.n	800a1b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	e081      	b.n	800a2b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1b0:	4b43      	ldr	r3, [pc, #268]	; (800a2c0 <HAL_RCC_OscConfig+0x4e8>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d1f0      	bne.n	800a19e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	69da      	ldr	r2, [r3, #28]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6a1b      	ldr	r3, [r3, #32]
 800a1c4:	431a      	orrs	r2, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ca:	019b      	lsls	r3, r3, #6
 800a1cc:	431a      	orrs	r2, r3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d2:	085b      	lsrs	r3, r3, #1
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	041b      	lsls	r3, r3, #16
 800a1d8:	431a      	orrs	r2, r3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1de:	061b      	lsls	r3, r3, #24
 800a1e0:	4937      	ldr	r1, [pc, #220]	; (800a2c0 <HAL_RCC_OscConfig+0x4e8>)
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a1e6:	4b37      	ldr	r3, [pc, #220]	; (800a2c4 <HAL_RCC_OscConfig+0x4ec>)
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1ec:	f7fb fc92 	bl	8005b14 <HAL_GetTick>
 800a1f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a1f2:	e008      	b.n	800a206 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1f4:	f7fb fc8e 	bl	8005b14 <HAL_GetTick>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	1ad3      	subs	r3, r2, r3
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	d901      	bls.n	800a206 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a202:	2303      	movs	r3, #3
 800a204:	e056      	b.n	800a2b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a206:	4b2e      	ldr	r3, [pc, #184]	; (800a2c0 <HAL_RCC_OscConfig+0x4e8>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d0f0      	beq.n	800a1f4 <HAL_RCC_OscConfig+0x41c>
 800a212:	e04e      	b.n	800a2b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a214:	4b2b      	ldr	r3, [pc, #172]	; (800a2c4 <HAL_RCC_OscConfig+0x4ec>)
 800a216:	2200      	movs	r2, #0
 800a218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a21a:	f7fb fc7b 	bl	8005b14 <HAL_GetTick>
 800a21e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a220:	e008      	b.n	800a234 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a222:	f7fb fc77 	bl	8005b14 <HAL_GetTick>
 800a226:	4602      	mov	r2, r0
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	1ad3      	subs	r3, r2, r3
 800a22c:	2b02      	cmp	r3, #2
 800a22e:	d901      	bls.n	800a234 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a230:	2303      	movs	r3, #3
 800a232:	e03f      	b.n	800a2b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a234:	4b22      	ldr	r3, [pc, #136]	; (800a2c0 <HAL_RCC_OscConfig+0x4e8>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d1f0      	bne.n	800a222 <HAL_RCC_OscConfig+0x44a>
 800a240:	e037      	b.n	800a2b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	699b      	ldr	r3, [r3, #24]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d101      	bne.n	800a24e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	e032      	b.n	800a2b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a24e:	4b1c      	ldr	r3, [pc, #112]	; (800a2c0 <HAL_RCC_OscConfig+0x4e8>)
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	699b      	ldr	r3, [r3, #24]
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d028      	beq.n	800a2ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a266:	429a      	cmp	r2, r3
 800a268:	d121      	bne.n	800a2ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a274:	429a      	cmp	r2, r3
 800a276:	d11a      	bne.n	800a2ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a27e:	4013      	ands	r3, r2
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a284:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a286:	4293      	cmp	r3, r2
 800a288:	d111      	bne.n	800a2ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a294:	085b      	lsrs	r3, r3, #1
 800a296:	3b01      	subs	r3, #1
 800a298:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d107      	bne.n	800a2ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d001      	beq.n	800a2b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e000      	b.n	800a2b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3718      	adds	r7, #24
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	40007000 	.word	0x40007000
 800a2c0:	40023800 	.word	0x40023800
 800a2c4:	42470060 	.word	0x42470060

0800a2c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d101      	bne.n	800a2dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e0cc      	b.n	800a476 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a2dc:	4b68      	ldr	r3, [pc, #416]	; (800a480 <HAL_RCC_ClockConfig+0x1b8>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f003 0307 	and.w	r3, r3, #7
 800a2e4:	683a      	ldr	r2, [r7, #0]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d90c      	bls.n	800a304 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2ea:	4b65      	ldr	r3, [pc, #404]	; (800a480 <HAL_RCC_ClockConfig+0x1b8>)
 800a2ec:	683a      	ldr	r2, [r7, #0]
 800a2ee:	b2d2      	uxtb	r2, r2
 800a2f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2f2:	4b63      	ldr	r3, [pc, #396]	; (800a480 <HAL_RCC_ClockConfig+0x1b8>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f003 0307 	and.w	r3, r3, #7
 800a2fa:	683a      	ldr	r2, [r7, #0]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d001      	beq.n	800a304 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a300:	2301      	movs	r3, #1
 800a302:	e0b8      	b.n	800a476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f003 0302 	and.w	r3, r3, #2
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d020      	beq.n	800a352 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f003 0304 	and.w	r3, r3, #4
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d005      	beq.n	800a328 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a31c:	4b59      	ldr	r3, [pc, #356]	; (800a484 <HAL_RCC_ClockConfig+0x1bc>)
 800a31e:	689b      	ldr	r3, [r3, #8]
 800a320:	4a58      	ldr	r2, [pc, #352]	; (800a484 <HAL_RCC_ClockConfig+0x1bc>)
 800a322:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a326:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 0308 	and.w	r3, r3, #8
 800a330:	2b00      	cmp	r3, #0
 800a332:	d005      	beq.n	800a340 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a334:	4b53      	ldr	r3, [pc, #332]	; (800a484 <HAL_RCC_ClockConfig+0x1bc>)
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	4a52      	ldr	r2, [pc, #328]	; (800a484 <HAL_RCC_ClockConfig+0x1bc>)
 800a33a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a33e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a340:	4b50      	ldr	r3, [pc, #320]	; (800a484 <HAL_RCC_ClockConfig+0x1bc>)
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	494d      	ldr	r1, [pc, #308]	; (800a484 <HAL_RCC_ClockConfig+0x1bc>)
 800a34e:	4313      	orrs	r3, r2
 800a350:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f003 0301 	and.w	r3, r3, #1
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d044      	beq.n	800a3e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	2b01      	cmp	r3, #1
 800a364:	d107      	bne.n	800a376 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a366:	4b47      	ldr	r3, [pc, #284]	; (800a484 <HAL_RCC_ClockConfig+0x1bc>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d119      	bne.n	800a3a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	e07f      	b.n	800a476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d003      	beq.n	800a386 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a382:	2b03      	cmp	r3, #3
 800a384:	d107      	bne.n	800a396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a386:	4b3f      	ldr	r3, [pc, #252]	; (800a484 <HAL_RCC_ClockConfig+0x1bc>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d109      	bne.n	800a3a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	e06f      	b.n	800a476 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a396:	4b3b      	ldr	r3, [pc, #236]	; (800a484 <HAL_RCC_ClockConfig+0x1bc>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f003 0302 	and.w	r3, r3, #2
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d101      	bne.n	800a3a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	e067      	b.n	800a476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a3a6:	4b37      	ldr	r3, [pc, #220]	; (800a484 <HAL_RCC_ClockConfig+0x1bc>)
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	f023 0203 	bic.w	r2, r3, #3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	4934      	ldr	r1, [pc, #208]	; (800a484 <HAL_RCC_ClockConfig+0x1bc>)
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a3b8:	f7fb fbac 	bl	8005b14 <HAL_GetTick>
 800a3bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3be:	e00a      	b.n	800a3d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a3c0:	f7fb fba8 	bl	8005b14 <HAL_GetTick>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	1ad3      	subs	r3, r2, r3
 800a3ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d901      	bls.n	800a3d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a3d2:	2303      	movs	r3, #3
 800a3d4:	e04f      	b.n	800a476 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3d6:	4b2b      	ldr	r3, [pc, #172]	; (800a484 <HAL_RCC_ClockConfig+0x1bc>)
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	f003 020c 	and.w	r2, r3, #12
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d1eb      	bne.n	800a3c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a3e8:	4b25      	ldr	r3, [pc, #148]	; (800a480 <HAL_RCC_ClockConfig+0x1b8>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f003 0307 	and.w	r3, r3, #7
 800a3f0:	683a      	ldr	r2, [r7, #0]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d20c      	bcs.n	800a410 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3f6:	4b22      	ldr	r3, [pc, #136]	; (800a480 <HAL_RCC_ClockConfig+0x1b8>)
 800a3f8:	683a      	ldr	r2, [r7, #0]
 800a3fa:	b2d2      	uxtb	r2, r2
 800a3fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3fe:	4b20      	ldr	r3, [pc, #128]	; (800a480 <HAL_RCC_ClockConfig+0x1b8>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f003 0307 	and.w	r3, r3, #7
 800a406:	683a      	ldr	r2, [r7, #0]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d001      	beq.n	800a410 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	e032      	b.n	800a476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f003 0304 	and.w	r3, r3, #4
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d008      	beq.n	800a42e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a41c:	4b19      	ldr	r3, [pc, #100]	; (800a484 <HAL_RCC_ClockConfig+0x1bc>)
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	4916      	ldr	r1, [pc, #88]	; (800a484 <HAL_RCC_ClockConfig+0x1bc>)
 800a42a:	4313      	orrs	r3, r2
 800a42c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f003 0308 	and.w	r3, r3, #8
 800a436:	2b00      	cmp	r3, #0
 800a438:	d009      	beq.n	800a44e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a43a:	4b12      	ldr	r3, [pc, #72]	; (800a484 <HAL_RCC_ClockConfig+0x1bc>)
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	00db      	lsls	r3, r3, #3
 800a448:	490e      	ldr	r1, [pc, #56]	; (800a484 <HAL_RCC_ClockConfig+0x1bc>)
 800a44a:	4313      	orrs	r3, r2
 800a44c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a44e:	f000 f821 	bl	800a494 <HAL_RCC_GetSysClockFreq>
 800a452:	4602      	mov	r2, r0
 800a454:	4b0b      	ldr	r3, [pc, #44]	; (800a484 <HAL_RCC_ClockConfig+0x1bc>)
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	091b      	lsrs	r3, r3, #4
 800a45a:	f003 030f 	and.w	r3, r3, #15
 800a45e:	490a      	ldr	r1, [pc, #40]	; (800a488 <HAL_RCC_ClockConfig+0x1c0>)
 800a460:	5ccb      	ldrb	r3, [r1, r3]
 800a462:	fa22 f303 	lsr.w	r3, r2, r3
 800a466:	4a09      	ldr	r2, [pc, #36]	; (800a48c <HAL_RCC_ClockConfig+0x1c4>)
 800a468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a46a:	4b09      	ldr	r3, [pc, #36]	; (800a490 <HAL_RCC_ClockConfig+0x1c8>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4618      	mov	r0, r3
 800a470:	f7fb fb0c 	bl	8005a8c <HAL_InitTick>

  return HAL_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	3710      	adds	r7, #16
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	40023c00 	.word	0x40023c00
 800a484:	40023800 	.word	0x40023800
 800a488:	0800fec0 	.word	0x0800fec0
 800a48c:	20000004 	.word	0x20000004
 800a490:	200001e0 	.word	0x200001e0

0800a494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a494:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a498:	b084      	sub	sp, #16
 800a49a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a49c:	2300      	movs	r3, #0
 800a49e:	607b      	str	r3, [r7, #4]
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	60fb      	str	r3, [r7, #12]
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a4ac:	4b67      	ldr	r3, [pc, #412]	; (800a64c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	f003 030c 	and.w	r3, r3, #12
 800a4b4:	2b08      	cmp	r3, #8
 800a4b6:	d00d      	beq.n	800a4d4 <HAL_RCC_GetSysClockFreq+0x40>
 800a4b8:	2b08      	cmp	r3, #8
 800a4ba:	f200 80bd 	bhi.w	800a638 <HAL_RCC_GetSysClockFreq+0x1a4>
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d002      	beq.n	800a4c8 <HAL_RCC_GetSysClockFreq+0x34>
 800a4c2:	2b04      	cmp	r3, #4
 800a4c4:	d003      	beq.n	800a4ce <HAL_RCC_GetSysClockFreq+0x3a>
 800a4c6:	e0b7      	b.n	800a638 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a4c8:	4b61      	ldr	r3, [pc, #388]	; (800a650 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a4ca:	60bb      	str	r3, [r7, #8]
       break;
 800a4cc:	e0b7      	b.n	800a63e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a4ce:	4b61      	ldr	r3, [pc, #388]	; (800a654 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800a4d0:	60bb      	str	r3, [r7, #8]
      break;
 800a4d2:	e0b4      	b.n	800a63e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a4d4:	4b5d      	ldr	r3, [pc, #372]	; (800a64c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a4de:	4b5b      	ldr	r3, [pc, #364]	; (800a64c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d04d      	beq.n	800a586 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a4ea:	4b58      	ldr	r3, [pc, #352]	; (800a64c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	099b      	lsrs	r3, r3, #6
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	f04f 0300 	mov.w	r3, #0
 800a4f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a4fa:	f04f 0100 	mov.w	r1, #0
 800a4fe:	ea02 0800 	and.w	r8, r2, r0
 800a502:	ea03 0901 	and.w	r9, r3, r1
 800a506:	4640      	mov	r0, r8
 800a508:	4649      	mov	r1, r9
 800a50a:	f04f 0200 	mov.w	r2, #0
 800a50e:	f04f 0300 	mov.w	r3, #0
 800a512:	014b      	lsls	r3, r1, #5
 800a514:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a518:	0142      	lsls	r2, r0, #5
 800a51a:	4610      	mov	r0, r2
 800a51c:	4619      	mov	r1, r3
 800a51e:	ebb0 0008 	subs.w	r0, r0, r8
 800a522:	eb61 0109 	sbc.w	r1, r1, r9
 800a526:	f04f 0200 	mov.w	r2, #0
 800a52a:	f04f 0300 	mov.w	r3, #0
 800a52e:	018b      	lsls	r3, r1, #6
 800a530:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a534:	0182      	lsls	r2, r0, #6
 800a536:	1a12      	subs	r2, r2, r0
 800a538:	eb63 0301 	sbc.w	r3, r3, r1
 800a53c:	f04f 0000 	mov.w	r0, #0
 800a540:	f04f 0100 	mov.w	r1, #0
 800a544:	00d9      	lsls	r1, r3, #3
 800a546:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a54a:	00d0      	lsls	r0, r2, #3
 800a54c:	4602      	mov	r2, r0
 800a54e:	460b      	mov	r3, r1
 800a550:	eb12 0208 	adds.w	r2, r2, r8
 800a554:	eb43 0309 	adc.w	r3, r3, r9
 800a558:	f04f 0000 	mov.w	r0, #0
 800a55c:	f04f 0100 	mov.w	r1, #0
 800a560:	0259      	lsls	r1, r3, #9
 800a562:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800a566:	0250      	lsls	r0, r2, #9
 800a568:	4602      	mov	r2, r0
 800a56a:	460b      	mov	r3, r1
 800a56c:	4610      	mov	r0, r2
 800a56e:	4619      	mov	r1, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	461a      	mov	r2, r3
 800a574:	f04f 0300 	mov.w	r3, #0
 800a578:	f7f6 fb0a 	bl	8000b90 <__aeabi_uldivmod>
 800a57c:	4602      	mov	r2, r0
 800a57e:	460b      	mov	r3, r1
 800a580:	4613      	mov	r3, r2
 800a582:	60fb      	str	r3, [r7, #12]
 800a584:	e04a      	b.n	800a61c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a586:	4b31      	ldr	r3, [pc, #196]	; (800a64c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	099b      	lsrs	r3, r3, #6
 800a58c:	461a      	mov	r2, r3
 800a58e:	f04f 0300 	mov.w	r3, #0
 800a592:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a596:	f04f 0100 	mov.w	r1, #0
 800a59a:	ea02 0400 	and.w	r4, r2, r0
 800a59e:	ea03 0501 	and.w	r5, r3, r1
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	4629      	mov	r1, r5
 800a5a6:	f04f 0200 	mov.w	r2, #0
 800a5aa:	f04f 0300 	mov.w	r3, #0
 800a5ae:	014b      	lsls	r3, r1, #5
 800a5b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a5b4:	0142      	lsls	r2, r0, #5
 800a5b6:	4610      	mov	r0, r2
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	1b00      	subs	r0, r0, r4
 800a5bc:	eb61 0105 	sbc.w	r1, r1, r5
 800a5c0:	f04f 0200 	mov.w	r2, #0
 800a5c4:	f04f 0300 	mov.w	r3, #0
 800a5c8:	018b      	lsls	r3, r1, #6
 800a5ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a5ce:	0182      	lsls	r2, r0, #6
 800a5d0:	1a12      	subs	r2, r2, r0
 800a5d2:	eb63 0301 	sbc.w	r3, r3, r1
 800a5d6:	f04f 0000 	mov.w	r0, #0
 800a5da:	f04f 0100 	mov.w	r1, #0
 800a5de:	00d9      	lsls	r1, r3, #3
 800a5e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a5e4:	00d0      	lsls	r0, r2, #3
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	1912      	adds	r2, r2, r4
 800a5ec:	eb45 0303 	adc.w	r3, r5, r3
 800a5f0:	f04f 0000 	mov.w	r0, #0
 800a5f4:	f04f 0100 	mov.w	r1, #0
 800a5f8:	0299      	lsls	r1, r3, #10
 800a5fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a5fe:	0290      	lsls	r0, r2, #10
 800a600:	4602      	mov	r2, r0
 800a602:	460b      	mov	r3, r1
 800a604:	4610      	mov	r0, r2
 800a606:	4619      	mov	r1, r3
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	461a      	mov	r2, r3
 800a60c:	f04f 0300 	mov.w	r3, #0
 800a610:	f7f6 fabe 	bl	8000b90 <__aeabi_uldivmod>
 800a614:	4602      	mov	r2, r0
 800a616:	460b      	mov	r3, r1
 800a618:	4613      	mov	r3, r2
 800a61a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a61c:	4b0b      	ldr	r3, [pc, #44]	; (800a64c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	0c1b      	lsrs	r3, r3, #16
 800a622:	f003 0303 	and.w	r3, r3, #3
 800a626:	3301      	adds	r3, #1
 800a628:	005b      	lsls	r3, r3, #1
 800a62a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a62c:	68fa      	ldr	r2, [r7, #12]
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	fbb2 f3f3 	udiv	r3, r2, r3
 800a634:	60bb      	str	r3, [r7, #8]
      break;
 800a636:	e002      	b.n	800a63e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a638:	4b05      	ldr	r3, [pc, #20]	; (800a650 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a63a:	60bb      	str	r3, [r7, #8]
      break;
 800a63c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a63e:	68bb      	ldr	r3, [r7, #8]
}
 800a640:	4618      	mov	r0, r3
 800a642:	3710      	adds	r7, #16
 800a644:	46bd      	mov	sp, r7
 800a646:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a64a:	bf00      	nop
 800a64c:	40023800 	.word	0x40023800
 800a650:	00f42400 	.word	0x00f42400
 800a654:	007a1200 	.word	0x007a1200

0800a658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a658:	b480      	push	{r7}
 800a65a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a65c:	4b03      	ldr	r3, [pc, #12]	; (800a66c <HAL_RCC_GetHCLKFreq+0x14>)
 800a65e:	681b      	ldr	r3, [r3, #0]
}
 800a660:	4618      	mov	r0, r3
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr
 800a66a:	bf00      	nop
 800a66c:	20000004 	.word	0x20000004

0800a670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a674:	f7ff fff0 	bl	800a658 <HAL_RCC_GetHCLKFreq>
 800a678:	4602      	mov	r2, r0
 800a67a:	4b05      	ldr	r3, [pc, #20]	; (800a690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	0a9b      	lsrs	r3, r3, #10
 800a680:	f003 0307 	and.w	r3, r3, #7
 800a684:	4903      	ldr	r1, [pc, #12]	; (800a694 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a686:	5ccb      	ldrb	r3, [r1, r3]
 800a688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	40023800 	.word	0x40023800
 800a694:	0800fed0 	.word	0x0800fed0

0800a698 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b086      	sub	sp, #24
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f003 0301 	and.w	r3, r3, #1
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d105      	bne.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d035      	beq.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a6c0:	4b62      	ldr	r3, [pc, #392]	; (800a84c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a6c6:	f7fb fa25 	bl	8005b14 <HAL_GetTick>
 800a6ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a6cc:	e008      	b.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a6ce:	f7fb fa21 	bl	8005b14 <HAL_GetTick>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	1ad3      	subs	r3, r2, r3
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d901      	bls.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	e0b0      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a6e0:	4b5b      	ldr	r3, [pc, #364]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d1f0      	bne.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	019a      	lsls	r2, r3, #6
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	071b      	lsls	r3, r3, #28
 800a6f8:	4955      	ldr	r1, [pc, #340]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a700:	4b52      	ldr	r3, [pc, #328]	; (800a84c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a702:	2201      	movs	r2, #1
 800a704:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a706:	f7fb fa05 	bl	8005b14 <HAL_GetTick>
 800a70a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a70c:	e008      	b.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a70e:	f7fb fa01 	bl	8005b14 <HAL_GetTick>
 800a712:	4602      	mov	r2, r0
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	1ad3      	subs	r3, r2, r3
 800a718:	2b02      	cmp	r3, #2
 800a71a:	d901      	bls.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a71c:	2303      	movs	r3, #3
 800a71e:	e090      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a720:	4b4b      	ldr	r3, [pc, #300]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d0f0      	beq.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f003 0302 	and.w	r3, r3, #2
 800a734:	2b00      	cmp	r3, #0
 800a736:	f000 8083 	beq.w	800a840 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a73a:	2300      	movs	r3, #0
 800a73c:	60fb      	str	r3, [r7, #12]
 800a73e:	4b44      	ldr	r3, [pc, #272]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a742:	4a43      	ldr	r2, [pc, #268]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a748:	6413      	str	r3, [r2, #64]	; 0x40
 800a74a:	4b41      	ldr	r3, [pc, #260]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a74c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a74e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a752:	60fb      	str	r3, [r7, #12]
 800a754:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a756:	4b3f      	ldr	r3, [pc, #252]	; (800a854 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a3e      	ldr	r2, [pc, #248]	; (800a854 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a75c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a760:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a762:	f7fb f9d7 	bl	8005b14 <HAL_GetTick>
 800a766:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a768:	e008      	b.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a76a:	f7fb f9d3 	bl	8005b14 <HAL_GetTick>
 800a76e:	4602      	mov	r2, r0
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	1ad3      	subs	r3, r2, r3
 800a774:	2b02      	cmp	r3, #2
 800a776:	d901      	bls.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800a778:	2303      	movs	r3, #3
 800a77a:	e062      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a77c:	4b35      	ldr	r3, [pc, #212]	; (800a854 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a784:	2b00      	cmp	r3, #0
 800a786:	d0f0      	beq.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a788:	4b31      	ldr	r3, [pc, #196]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a78a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a78c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a790:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d02f      	beq.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7a0:	693a      	ldr	r2, [r7, #16]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d028      	beq.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a7a6:	4b2a      	ldr	r3, [pc, #168]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a7a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7ae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a7b0:	4b29      	ldr	r3, [pc, #164]	; (800a858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a7b6:	4b28      	ldr	r3, [pc, #160]	; (800a858 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a7bc:	4a24      	ldr	r2, [pc, #144]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a7c2:	4b23      	ldr	r3, [pc, #140]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a7c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7c6:	f003 0301 	and.w	r3, r3, #1
 800a7ca:	2b01      	cmp	r3, #1
 800a7cc:	d114      	bne.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a7ce:	f7fb f9a1 	bl	8005b14 <HAL_GetTick>
 800a7d2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a7d4:	e00a      	b.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a7d6:	f7fb f99d 	bl	8005b14 <HAL_GetTick>
 800a7da:	4602      	mov	r2, r0
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	1ad3      	subs	r3, r2, r3
 800a7e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d901      	bls.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800a7e8:	2303      	movs	r3, #3
 800a7ea:	e02a      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a7ec:	4b18      	ldr	r3, [pc, #96]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a7ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7f0:	f003 0302 	and.w	r3, r3, #2
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d0ee      	beq.n	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a800:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a804:	d10d      	bne.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a806:	4b12      	ldr	r3, [pc, #72]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a81a:	490d      	ldr	r1, [pc, #52]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a81c:	4313      	orrs	r3, r2
 800a81e:	608b      	str	r3, [r1, #8]
 800a820:	e005      	b.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a822:	4b0b      	ldr	r3, [pc, #44]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a824:	689b      	ldr	r3, [r3, #8]
 800a826:	4a0a      	ldr	r2, [pc, #40]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a828:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a82c:	6093      	str	r3, [r2, #8]
 800a82e:	4b08      	ldr	r3, [pc, #32]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a830:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a83a:	4905      	ldr	r1, [pc, #20]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a83c:	4313      	orrs	r3, r2
 800a83e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800a840:	2300      	movs	r3, #0
}
 800a842:	4618      	mov	r0, r3
 800a844:	3718      	adds	r7, #24
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	42470068 	.word	0x42470068
 800a850:	40023800 	.word	0x40023800
 800a854:	40007000 	.word	0x40007000
 800a858:	42470e40 	.word	0x42470e40

0800a85c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b087      	sub	sp, #28
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800a864:	2300      	movs	r3, #0
 800a866:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800a868:	2300      	movs	r3, #0
 800a86a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800a86c:	2300      	movs	r3, #0
 800a86e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800a870:	2300      	movs	r3, #0
 800a872:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2b01      	cmp	r3, #1
 800a878:	d13e      	bne.n	800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800a87a:	4b23      	ldr	r3, [pc, #140]	; (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a87c:	689b      	ldr	r3, [r3, #8]
 800a87e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a882:	60fb      	str	r3, [r7, #12]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d005      	beq.n	800a896 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	d12f      	bne.n	800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800a890:	4b1e      	ldr	r3, [pc, #120]	; (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a892:	617b      	str	r3, [r7, #20]
          break;
 800a894:	e02f      	b.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800a896:	4b1c      	ldr	r3, [pc, #112]	; (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a89e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a8a2:	d108      	bne.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a8a4:	4b18      	ldr	r3, [pc, #96]	; (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8ac:	4a18      	ldr	r2, [pc, #96]	; (800a910 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800a8ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8b2:	613b      	str	r3, [r7, #16]
 800a8b4:	e007      	b.n	800a8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a8b6:	4b14      	ldr	r3, [pc, #80]	; (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8be:	4a15      	ldr	r2, [pc, #84]	; (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800a8c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8c4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800a8c6:	4b10      	ldr	r3, [pc, #64]	; (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a8c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8cc:	099b      	lsrs	r3, r3, #6
 800a8ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	fb02 f303 	mul.w	r3, r2, r3
 800a8d8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800a8da:	4b0b      	ldr	r3, [pc, #44]	; (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800a8dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8e0:	0f1b      	lsrs	r3, r3, #28
 800a8e2:	f003 0307 	and.w	r3, r3, #7
 800a8e6:	68ba      	ldr	r2, [r7, #8]
 800a8e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8ec:	617b      	str	r3, [r7, #20]
          break;
 800a8ee:	e002      	b.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	617b      	str	r3, [r7, #20]
          break;
 800a8f4:	bf00      	nop
        }
      }
      break;
 800a8f6:	bf00      	nop
    }
  }
  return frequency;
 800a8f8:	697b      	ldr	r3, [r7, #20]
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	371c      	adds	r7, #28
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop
 800a908:	40023800 	.word	0x40023800
 800a90c:	00bb8000 	.word	0x00bb8000
 800a910:	007a1200 	.word	0x007a1200
 800a914:	00f42400 	.word	0x00f42400

0800a918 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d101      	bne.n	800a92a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	e01c      	b.n	800a964 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	795b      	ldrb	r3, [r3, #5]
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	2b00      	cmp	r3, #0
 800a932:	d105      	bne.n	800a940 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f7f7 fa50 	bl	8001de0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2202      	movs	r2, #2
 800a944:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f042 0204 	orr.w	r2, r2, #4
 800a954:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2201      	movs	r2, #1
 800a95a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3708      	adds	r7, #8
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a976:	2300      	movs	r3, #0
 800a978:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	791b      	ldrb	r3, [r3, #4]
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d101      	bne.n	800a986 <HAL_RNG_GenerateRandomNumber+0x1a>
 800a982:	2302      	movs	r3, #2
 800a984:	e03d      	b.n	800aa02 <HAL_RNG_GenerateRandomNumber+0x96>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2201      	movs	r2, #1
 800a98a:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	795b      	ldrb	r3, [r3, #5]
 800a990:	b2db      	uxtb	r3, r3
 800a992:	2b01      	cmp	r3, #1
 800a994:	d12c      	bne.n	800a9f0 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2202      	movs	r2, #2
 800a99a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a99c:	f7fb f8ba 	bl	8005b14 <HAL_GetTick>
 800a9a0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800a9a2:	e011      	b.n	800a9c8 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a9a4:	f7fb f8b6 	bl	8005b14 <HAL_GetTick>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	1ad3      	subs	r3, r2, r3
 800a9ae:	2b02      	cmp	r3, #2
 800a9b0:	d90a      	bls.n	800a9c8 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2202      	movs	r2, #2
 800a9bc:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	e01c      	b.n	800aa02 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	f003 0301 	and.w	r3, r3, #1
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d1e6      	bne.n	800a9a4 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	689a      	ldr	r2, [r3, #8]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	68da      	ldr	r2, [r3, #12]
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	715a      	strb	r2, [r3, #5]
 800a9ee:	e004      	b.n	800a9fa <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2204      	movs	r2, #4
 800a9f4:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	711a      	strb	r2, [r3, #4]

  return status;
 800aa00:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b082      	sub	sp, #8
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	330c      	adds	r3, #12
 800aa16:	4619      	mov	r1, r3
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f7ff ffa7 	bl	800a96c <HAL_RNG_GenerateRandomNumber>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d102      	bne.n	800aa2a <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	e000      	b.n	800aa2c <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 800aa2a:	2300      	movs	r3, #0
  }
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3708      	adds	r7, #8
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b082      	sub	sp, #8
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d101      	bne.n	800aa46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	e07b      	b.n	800ab3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d108      	bne.n	800aa60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa56:	d009      	beq.n	800aa6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	61da      	str	r2, [r3, #28]
 800aa5e:	e005      	b.n	800aa6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d106      	bne.n	800aa8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2200      	movs	r2, #0
 800aa82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7f7 f9cc 	bl	8001e24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2202      	movs	r2, #2
 800aa90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aaa2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800aab4:	431a      	orrs	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aabe:	431a      	orrs	r2, r3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	691b      	ldr	r3, [r3, #16]
 800aac4:	f003 0302 	and.w	r3, r3, #2
 800aac8:	431a      	orrs	r2, r3
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	695b      	ldr	r3, [r3, #20]
 800aace:	f003 0301 	and.w	r3, r3, #1
 800aad2:	431a      	orrs	r2, r3
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	699b      	ldr	r3, [r3, #24]
 800aad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aadc:	431a      	orrs	r2, r3
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	69db      	ldr	r3, [r3, #28]
 800aae2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aae6:	431a      	orrs	r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6a1b      	ldr	r3, [r3, #32]
 800aaec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaf0:	ea42 0103 	orr.w	r1, r2, r3
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaf8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	430a      	orrs	r2, r1
 800ab02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	699b      	ldr	r3, [r3, #24]
 800ab08:	0c1b      	lsrs	r3, r3, #16
 800ab0a:	f003 0104 	and.w	r1, r3, #4
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab12:	f003 0210 	and.w	r2, r3, #16
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	430a      	orrs	r2, r1
 800ab1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	69da      	ldr	r2, [r3, #28]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ab2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ab3c:	2300      	movs	r3, #0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3708      	adds	r7, #8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b088      	sub	sp, #32
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	60f8      	str	r0, [r7, #12]
 800ab4e:	60b9      	str	r1, [r7, #8]
 800ab50:	603b      	str	r3, [r7, #0]
 800ab52:	4613      	mov	r3, r2
 800ab54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ab56:	2300      	movs	r3, #0
 800ab58:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d101      	bne.n	800ab68 <HAL_SPI_Transmit+0x22>
 800ab64:	2302      	movs	r3, #2
 800ab66:	e126      	b.n	800adb6 <HAL_SPI_Transmit+0x270>
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ab70:	f7fa ffd0 	bl	8005b14 <HAL_GetTick>
 800ab74:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ab76:	88fb      	ldrh	r3, [r7, #6]
 800ab78:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d002      	beq.n	800ab8c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ab86:	2302      	movs	r3, #2
 800ab88:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ab8a:	e10b      	b.n	800ada4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d002      	beq.n	800ab98 <HAL_SPI_Transmit+0x52>
 800ab92:	88fb      	ldrh	r3, [r7, #6]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d102      	bne.n	800ab9e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ab9c:	e102      	b.n	800ada4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2203      	movs	r2, #3
 800aba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2200      	movs	r2, #0
 800abaa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	68ba      	ldr	r2, [r7, #8]
 800abb0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	88fa      	ldrh	r2, [r7, #6]
 800abb6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	88fa      	ldrh	r2, [r7, #6]
 800abbc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2200      	movs	r2, #0
 800abc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2200      	movs	r2, #0
 800abc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2200      	movs	r2, #0
 800abce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2200      	movs	r2, #0
 800abd4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2200      	movs	r2, #0
 800abda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abe4:	d10f      	bne.n	800ac06 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abf4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ac04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac10:	2b40      	cmp	r3, #64	; 0x40
 800ac12:	d007      	beq.n	800ac24 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac2c:	d14b      	bne.n	800acc6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d002      	beq.n	800ac3c <HAL_SPI_Transmit+0xf6>
 800ac36:	8afb      	ldrh	r3, [r7, #22]
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d13e      	bne.n	800acba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac40:	881a      	ldrh	r2, [r3, #0]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac4c:	1c9a      	adds	r2, r3, #2
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	3b01      	subs	r3, #1
 800ac5a:	b29a      	uxth	r2, r3
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ac60:	e02b      	b.n	800acba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	689b      	ldr	r3, [r3, #8]
 800ac68:	f003 0302 	and.w	r3, r3, #2
 800ac6c:	2b02      	cmp	r3, #2
 800ac6e:	d112      	bne.n	800ac96 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac74:	881a      	ldrh	r2, [r3, #0]
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac80:	1c9a      	adds	r2, r3, #2
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	3b01      	subs	r3, #1
 800ac8e:	b29a      	uxth	r2, r3
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	86da      	strh	r2, [r3, #54]	; 0x36
 800ac94:	e011      	b.n	800acba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac96:	f7fa ff3d 	bl	8005b14 <HAL_GetTick>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	1ad3      	subs	r3, r2, r3
 800aca0:	683a      	ldr	r2, [r7, #0]
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d803      	bhi.n	800acae <HAL_SPI_Transmit+0x168>
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acac:	d102      	bne.n	800acb4 <HAL_SPI_Transmit+0x16e>
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d102      	bne.n	800acba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800acb4:	2303      	movs	r3, #3
 800acb6:	77fb      	strb	r3, [r7, #31]
          goto error;
 800acb8:	e074      	b.n	800ada4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d1ce      	bne.n	800ac62 <HAL_SPI_Transmit+0x11c>
 800acc4:	e04c      	b.n	800ad60 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d002      	beq.n	800acd4 <HAL_SPI_Transmit+0x18e>
 800acce:	8afb      	ldrh	r3, [r7, #22]
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d140      	bne.n	800ad56 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	330c      	adds	r3, #12
 800acde:	7812      	ldrb	r2, [r2, #0]
 800ace0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ace6:	1c5a      	adds	r2, r3, #1
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	3b01      	subs	r3, #1
 800acf4:	b29a      	uxth	r2, r3
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800acfa:	e02c      	b.n	800ad56 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	689b      	ldr	r3, [r3, #8]
 800ad02:	f003 0302 	and.w	r3, r3, #2
 800ad06:	2b02      	cmp	r3, #2
 800ad08:	d113      	bne.n	800ad32 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	330c      	adds	r3, #12
 800ad14:	7812      	ldrb	r2, [r2, #0]
 800ad16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad1c:	1c5a      	adds	r2, r3, #1
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	3b01      	subs	r3, #1
 800ad2a:	b29a      	uxth	r2, r3
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	86da      	strh	r2, [r3, #54]	; 0x36
 800ad30:	e011      	b.n	800ad56 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad32:	f7fa feef 	bl	8005b14 <HAL_GetTick>
 800ad36:	4602      	mov	r2, r0
 800ad38:	69bb      	ldr	r3, [r7, #24]
 800ad3a:	1ad3      	subs	r3, r2, r3
 800ad3c:	683a      	ldr	r2, [r7, #0]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d803      	bhi.n	800ad4a <HAL_SPI_Transmit+0x204>
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad48:	d102      	bne.n	800ad50 <HAL_SPI_Transmit+0x20a>
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d102      	bne.n	800ad56 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800ad50:	2303      	movs	r3, #3
 800ad52:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ad54:	e026      	b.n	800ada4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d1cd      	bne.n	800acfc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ad60:	69ba      	ldr	r2, [r7, #24]
 800ad62:	6839      	ldr	r1, [r7, #0]
 800ad64:	68f8      	ldr	r0, [r7, #12]
 800ad66:	f000 f8b3 	bl	800aed0 <SPI_EndRxTxTransaction>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d002      	beq.n	800ad76 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2220      	movs	r2, #32
 800ad74:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d10a      	bne.n	800ad94 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ad7e:	2300      	movs	r3, #0
 800ad80:	613b      	str	r3, [r7, #16]
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	613b      	str	r3, [r7, #16]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	689b      	ldr	r3, [r3, #8]
 800ad90:	613b      	str	r3, [r7, #16]
 800ad92:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d002      	beq.n	800ada2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	77fb      	strb	r3, [r7, #31]
 800ada0:	e000      	b.n	800ada4 <HAL_SPI_Transmit+0x25e>
  }

error:
 800ada2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2201      	movs	r2, #1
 800ada8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2200      	movs	r2, #0
 800adb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800adb4:	7ffb      	ldrb	r3, [r7, #31]
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3720      	adds	r7, #32
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
	...

0800adc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b088      	sub	sp, #32
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	603b      	str	r3, [r7, #0]
 800adcc:	4613      	mov	r3, r2
 800adce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800add0:	f7fa fea0 	bl	8005b14 <HAL_GetTick>
 800add4:	4602      	mov	r2, r0
 800add6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add8:	1a9b      	subs	r3, r3, r2
 800adda:	683a      	ldr	r2, [r7, #0]
 800addc:	4413      	add	r3, r2
 800adde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ade0:	f7fa fe98 	bl	8005b14 <HAL_GetTick>
 800ade4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ade6:	4b39      	ldr	r3, [pc, #228]	; (800aecc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	015b      	lsls	r3, r3, #5
 800adec:	0d1b      	lsrs	r3, r3, #20
 800adee:	69fa      	ldr	r2, [r7, #28]
 800adf0:	fb02 f303 	mul.w	r3, r2, r3
 800adf4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800adf6:	e054      	b.n	800aea2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adfe:	d050      	beq.n	800aea2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ae00:	f7fa fe88 	bl	8005b14 <HAL_GetTick>
 800ae04:	4602      	mov	r2, r0
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	1ad3      	subs	r3, r2, r3
 800ae0a:	69fa      	ldr	r2, [r7, #28]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d902      	bls.n	800ae16 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d13d      	bne.n	800ae92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	685a      	ldr	r2, [r3, #4]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ae24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae2e:	d111      	bne.n	800ae54 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae38:	d004      	beq.n	800ae44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae42:	d107      	bne.n	800ae54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	681a      	ldr	r2, [r3, #0]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae5c:	d10f      	bne.n	800ae7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ae6c:	601a      	str	r2, [r3, #0]
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ae7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2201      	movs	r2, #1
 800ae82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ae8e:	2303      	movs	r3, #3
 800ae90:	e017      	b.n	800aec2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d101      	bne.n	800ae9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	3b01      	subs	r3, #1
 800aea0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	689a      	ldr	r2, [r3, #8]
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	4013      	ands	r3, r2
 800aeac:	68ba      	ldr	r2, [r7, #8]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	bf0c      	ite	eq
 800aeb2:	2301      	moveq	r3, #1
 800aeb4:	2300      	movne	r3, #0
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	461a      	mov	r2, r3
 800aeba:	79fb      	ldrb	r3, [r7, #7]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d19b      	bne.n	800adf8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800aec0:	2300      	movs	r3, #0
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3720      	adds	r7, #32
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	20000004 	.word	0x20000004

0800aed0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b088      	sub	sp, #32
 800aed4:	af02      	add	r7, sp, #8
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800aedc:	4b1b      	ldr	r3, [pc, #108]	; (800af4c <SPI_EndRxTxTransaction+0x7c>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a1b      	ldr	r2, [pc, #108]	; (800af50 <SPI_EndRxTxTransaction+0x80>)
 800aee2:	fba2 2303 	umull	r2, r3, r2, r3
 800aee6:	0d5b      	lsrs	r3, r3, #21
 800aee8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aeec:	fb02 f303 	mul.w	r3, r2, r3
 800aef0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aefa:	d112      	bne.n	800af22 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	9300      	str	r3, [sp, #0]
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	2200      	movs	r2, #0
 800af04:	2180      	movs	r1, #128	; 0x80
 800af06:	68f8      	ldr	r0, [r7, #12]
 800af08:	f7ff ff5a 	bl	800adc0 <SPI_WaitFlagStateUntilTimeout>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d016      	beq.n	800af40 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af16:	f043 0220 	orr.w	r2, r3, #32
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800af1e:	2303      	movs	r3, #3
 800af20:	e00f      	b.n	800af42 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d00a      	beq.n	800af3e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	3b01      	subs	r3, #1
 800af2c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af38:	2b80      	cmp	r3, #128	; 0x80
 800af3a:	d0f2      	beq.n	800af22 <SPI_EndRxTxTransaction+0x52>
 800af3c:	e000      	b.n	800af40 <SPI_EndRxTxTransaction+0x70>
        break;
 800af3e:	bf00      	nop
  }

  return HAL_OK;
 800af40:	2300      	movs	r3, #0
}
 800af42:	4618      	mov	r0, r3
 800af44:	3718      	adds	r7, #24
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	20000004 	.word	0x20000004
 800af50:	165e9f81 	.word	0x165e9f81

0800af54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d101      	bne.n	800af66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800af62:	2301      	movs	r3, #1
 800af64:	e041      	b.n	800afea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d106      	bne.n	800af80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2200      	movs	r2, #0
 800af76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f7f7 f838 	bl	8001ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2202      	movs	r2, #2
 800af84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	3304      	adds	r3, #4
 800af90:	4619      	mov	r1, r3
 800af92:	4610      	mov	r0, r2
 800af94:	f000 fd68 	bl	800ba68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2201      	movs	r2, #1
 800afa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2201      	movs	r2, #1
 800afac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2201      	movs	r2, #1
 800afb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2201      	movs	r2, #1
 800afbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2201      	movs	r2, #1
 800afc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2201      	movs	r2, #1
 800afcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2201      	movs	r2, #1
 800afd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2201      	movs	r2, #1
 800afdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2201      	movs	r2, #1
 800afe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800afe8:	2300      	movs	r3, #0
}
 800afea:	4618      	mov	r0, r3
 800afec:	3708      	adds	r7, #8
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
	...

0800aff4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b085      	sub	sp, #20
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b002:	b2db      	uxtb	r3, r3
 800b004:	2b01      	cmp	r3, #1
 800b006:	d001      	beq.n	800b00c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b008:	2301      	movs	r3, #1
 800b00a:	e04e      	b.n	800b0aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2202      	movs	r2, #2
 800b010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	68da      	ldr	r2, [r3, #12]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f042 0201 	orr.w	r2, r2, #1
 800b022:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a23      	ldr	r2, [pc, #140]	; (800b0b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d022      	beq.n	800b074 <HAL_TIM_Base_Start_IT+0x80>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b036:	d01d      	beq.n	800b074 <HAL_TIM_Base_Start_IT+0x80>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a1f      	ldr	r2, [pc, #124]	; (800b0bc <HAL_TIM_Base_Start_IT+0xc8>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d018      	beq.n	800b074 <HAL_TIM_Base_Start_IT+0x80>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a1e      	ldr	r2, [pc, #120]	; (800b0c0 <HAL_TIM_Base_Start_IT+0xcc>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d013      	beq.n	800b074 <HAL_TIM_Base_Start_IT+0x80>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a1c      	ldr	r2, [pc, #112]	; (800b0c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d00e      	beq.n	800b074 <HAL_TIM_Base_Start_IT+0x80>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4a1b      	ldr	r2, [pc, #108]	; (800b0c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d009      	beq.n	800b074 <HAL_TIM_Base_Start_IT+0x80>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	4a19      	ldr	r2, [pc, #100]	; (800b0cc <HAL_TIM_Base_Start_IT+0xd8>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d004      	beq.n	800b074 <HAL_TIM_Base_Start_IT+0x80>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4a18      	ldr	r2, [pc, #96]	; (800b0d0 <HAL_TIM_Base_Start_IT+0xdc>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d111      	bne.n	800b098 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	689b      	ldr	r3, [r3, #8]
 800b07a:	f003 0307 	and.w	r3, r3, #7
 800b07e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2b06      	cmp	r3, #6
 800b084:	d010      	beq.n	800b0a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	681a      	ldr	r2, [r3, #0]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f042 0201 	orr.w	r2, r2, #1
 800b094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b096:	e007      	b.n	800b0a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f042 0201 	orr.w	r2, r2, #1
 800b0a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b0a8:	2300      	movs	r3, #0
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3714      	adds	r7, #20
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr
 800b0b6:	bf00      	nop
 800b0b8:	40010000 	.word	0x40010000
 800b0bc:	40000400 	.word	0x40000400
 800b0c0:	40000800 	.word	0x40000800
 800b0c4:	40000c00 	.word	0x40000c00
 800b0c8:	40010400 	.word	0x40010400
 800b0cc:	40014000 	.word	0x40014000
 800b0d0:	40001800 	.word	0x40001800

0800b0d4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d109      	bne.n	800b0f8 <HAL_TIM_OC_Start_IT+0x24>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	bf14      	ite	ne
 800b0f0:	2301      	movne	r3, #1
 800b0f2:	2300      	moveq	r3, #0
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	e022      	b.n	800b13e <HAL_TIM_OC_Start_IT+0x6a>
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	2b04      	cmp	r3, #4
 800b0fc:	d109      	bne.n	800b112 <HAL_TIM_OC_Start_IT+0x3e>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b104:	b2db      	uxtb	r3, r3
 800b106:	2b01      	cmp	r3, #1
 800b108:	bf14      	ite	ne
 800b10a:	2301      	movne	r3, #1
 800b10c:	2300      	moveq	r3, #0
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	e015      	b.n	800b13e <HAL_TIM_OC_Start_IT+0x6a>
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	2b08      	cmp	r3, #8
 800b116:	d109      	bne.n	800b12c <HAL_TIM_OC_Start_IT+0x58>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	2b01      	cmp	r3, #1
 800b122:	bf14      	ite	ne
 800b124:	2301      	movne	r3, #1
 800b126:	2300      	moveq	r3, #0
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	e008      	b.n	800b13e <HAL_TIM_OC_Start_IT+0x6a>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b132:	b2db      	uxtb	r3, r3
 800b134:	2b01      	cmp	r3, #1
 800b136:	bf14      	ite	ne
 800b138:	2301      	movne	r3, #1
 800b13a:	2300      	moveq	r3, #0
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d001      	beq.n	800b146 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800b142:	2301      	movs	r3, #1
 800b144:	e0c2      	b.n	800b2cc <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d104      	bne.n	800b156 <HAL_TIM_OC_Start_IT+0x82>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2202      	movs	r2, #2
 800b150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b154:	e013      	b.n	800b17e <HAL_TIM_OC_Start_IT+0xaa>
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	2b04      	cmp	r3, #4
 800b15a:	d104      	bne.n	800b166 <HAL_TIM_OC_Start_IT+0x92>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2202      	movs	r2, #2
 800b160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b164:	e00b      	b.n	800b17e <HAL_TIM_OC_Start_IT+0xaa>
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	2b08      	cmp	r3, #8
 800b16a:	d104      	bne.n	800b176 <HAL_TIM_OC_Start_IT+0xa2>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2202      	movs	r2, #2
 800b170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b174:	e003      	b.n	800b17e <HAL_TIM_OC_Start_IT+0xaa>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2202      	movs	r2, #2
 800b17a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	2b0c      	cmp	r3, #12
 800b182:	d841      	bhi.n	800b208 <HAL_TIM_OC_Start_IT+0x134>
 800b184:	a201      	add	r2, pc, #4	; (adr r2, 800b18c <HAL_TIM_OC_Start_IT+0xb8>)
 800b186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b18a:	bf00      	nop
 800b18c:	0800b1c1 	.word	0x0800b1c1
 800b190:	0800b209 	.word	0x0800b209
 800b194:	0800b209 	.word	0x0800b209
 800b198:	0800b209 	.word	0x0800b209
 800b19c:	0800b1d3 	.word	0x0800b1d3
 800b1a0:	0800b209 	.word	0x0800b209
 800b1a4:	0800b209 	.word	0x0800b209
 800b1a8:	0800b209 	.word	0x0800b209
 800b1ac:	0800b1e5 	.word	0x0800b1e5
 800b1b0:	0800b209 	.word	0x0800b209
 800b1b4:	0800b209 	.word	0x0800b209
 800b1b8:	0800b209 	.word	0x0800b209
 800b1bc:	0800b1f7 	.word	0x0800b1f7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	68da      	ldr	r2, [r3, #12]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f042 0202 	orr.w	r2, r2, #2
 800b1ce:	60da      	str	r2, [r3, #12]
      break;
 800b1d0:	e01b      	b.n	800b20a <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	68da      	ldr	r2, [r3, #12]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f042 0204 	orr.w	r2, r2, #4
 800b1e0:	60da      	str	r2, [r3, #12]
      break;
 800b1e2:	e012      	b.n	800b20a <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	68da      	ldr	r2, [r3, #12]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f042 0208 	orr.w	r2, r2, #8
 800b1f2:	60da      	str	r2, [r3, #12]
      break;
 800b1f4:	e009      	b.n	800b20a <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	68da      	ldr	r2, [r3, #12]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f042 0210 	orr.w	r2, r2, #16
 800b204:	60da      	str	r2, [r3, #12]
      break;
 800b206:	e000      	b.n	800b20a <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 800b208:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2201      	movs	r2, #1
 800b210:	6839      	ldr	r1, [r7, #0]
 800b212:	4618      	mov	r0, r3
 800b214:	f000 ff12 	bl	800c03c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4a2d      	ldr	r2, [pc, #180]	; (800b2d4 <HAL_TIM_OC_Start_IT+0x200>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d004      	beq.n	800b22c <HAL_TIM_OC_Start_IT+0x158>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4a2c      	ldr	r2, [pc, #176]	; (800b2d8 <HAL_TIM_OC_Start_IT+0x204>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d101      	bne.n	800b230 <HAL_TIM_OC_Start_IT+0x15c>
 800b22c:	2301      	movs	r3, #1
 800b22e:	e000      	b.n	800b232 <HAL_TIM_OC_Start_IT+0x15e>
 800b230:	2300      	movs	r3, #0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d007      	beq.n	800b246 <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b244:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a22      	ldr	r2, [pc, #136]	; (800b2d4 <HAL_TIM_OC_Start_IT+0x200>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d022      	beq.n	800b296 <HAL_TIM_OC_Start_IT+0x1c2>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b258:	d01d      	beq.n	800b296 <HAL_TIM_OC_Start_IT+0x1c2>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4a1f      	ldr	r2, [pc, #124]	; (800b2dc <HAL_TIM_OC_Start_IT+0x208>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d018      	beq.n	800b296 <HAL_TIM_OC_Start_IT+0x1c2>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a1d      	ldr	r2, [pc, #116]	; (800b2e0 <HAL_TIM_OC_Start_IT+0x20c>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d013      	beq.n	800b296 <HAL_TIM_OC_Start_IT+0x1c2>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4a1c      	ldr	r2, [pc, #112]	; (800b2e4 <HAL_TIM_OC_Start_IT+0x210>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d00e      	beq.n	800b296 <HAL_TIM_OC_Start_IT+0x1c2>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4a16      	ldr	r2, [pc, #88]	; (800b2d8 <HAL_TIM_OC_Start_IT+0x204>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d009      	beq.n	800b296 <HAL_TIM_OC_Start_IT+0x1c2>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4a18      	ldr	r2, [pc, #96]	; (800b2e8 <HAL_TIM_OC_Start_IT+0x214>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d004      	beq.n	800b296 <HAL_TIM_OC_Start_IT+0x1c2>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a16      	ldr	r2, [pc, #88]	; (800b2ec <HAL_TIM_OC_Start_IT+0x218>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d111      	bne.n	800b2ba <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	689b      	ldr	r3, [r3, #8]
 800b29c:	f003 0307 	and.w	r3, r3, #7
 800b2a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2b06      	cmp	r3, #6
 800b2a6:	d010      	beq.n	800b2ca <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f042 0201 	orr.w	r2, r2, #1
 800b2b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2b8:	e007      	b.n	800b2ca <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f042 0201 	orr.w	r2, r2, #1
 800b2c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b2ca:	2300      	movs	r3, #0
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3710      	adds	r7, #16
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}
 800b2d4:	40010000 	.word	0x40010000
 800b2d8:	40010400 	.word	0x40010400
 800b2dc:	40000400 	.word	0x40000400
 800b2e0:	40000800 	.word	0x40000800
 800b2e4:	40000c00 	.word	0x40000c00
 800b2e8:	40014000 	.word	0x40014000
 800b2ec:	40001800 	.word	0x40001800

0800b2f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d101      	bne.n	800b302 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b2fe:	2301      	movs	r3, #1
 800b300:	e041      	b.n	800b386 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d106      	bne.n	800b31c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 f839 	bl	800b38e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2202      	movs	r2, #2
 800b320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	3304      	adds	r3, #4
 800b32c:	4619      	mov	r1, r3
 800b32e:	4610      	mov	r0, r2
 800b330:	f000 fb9a 	bl	800ba68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2201      	movs	r2, #1
 800b338:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2201      	movs	r2, #1
 800b340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2201      	movs	r2, #1
 800b348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2201      	movs	r2, #1
 800b350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2201      	movs	r2, #1
 800b358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2201      	movs	r2, #1
 800b360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2201      	movs	r2, #1
 800b368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2201      	movs	r2, #1
 800b370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2201      	movs	r2, #1
 800b380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b384:	2300      	movs	r3, #0
}
 800b386:	4618      	mov	r0, r3
 800b388:	3708      	adds	r7, #8
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}

0800b38e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b38e:	b480      	push	{r7}
 800b390:	b083      	sub	sp, #12
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b396:	bf00      	nop
 800b398:	370c      	adds	r7, #12
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr

0800b3a2 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b086      	sub	sp, #24
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
 800b3aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d101      	bne.n	800b3b6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	e097      	b.n	800b4e6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d106      	bne.n	800b3d0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f7f6 fdc8 	bl	8001f60 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2202      	movs	r2, #2
 800b3d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	689b      	ldr	r3, [r3, #8]
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	6812      	ldr	r2, [r2, #0]
 800b3e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b3e6:	f023 0307 	bic.w	r3, r3, #7
 800b3ea:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	3304      	adds	r3, #4
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	4610      	mov	r0, r2
 800b3f8:	f000 fb36 	bl	800ba68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	699b      	ldr	r3, [r3, #24]
 800b40a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	6a1b      	ldr	r3, [r3, #32]
 800b412:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	697a      	ldr	r2, [r7, #20]
 800b41a:	4313      	orrs	r3, r2
 800b41c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b424:	f023 0303 	bic.w	r3, r3, #3
 800b428:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	689a      	ldr	r2, [r3, #8]
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	699b      	ldr	r3, [r3, #24]
 800b432:	021b      	lsls	r3, r3, #8
 800b434:	4313      	orrs	r3, r2
 800b436:	693a      	ldr	r2, [r7, #16]
 800b438:	4313      	orrs	r3, r2
 800b43a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b442:	f023 030c 	bic.w	r3, r3, #12
 800b446:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b44e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	68da      	ldr	r2, [r3, #12]
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	69db      	ldr	r3, [r3, #28]
 800b45c:	021b      	lsls	r3, r3, #8
 800b45e:	4313      	orrs	r3, r2
 800b460:	693a      	ldr	r2, [r7, #16]
 800b462:	4313      	orrs	r3, r2
 800b464:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	691b      	ldr	r3, [r3, #16]
 800b46a:	011a      	lsls	r2, r3, #4
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	6a1b      	ldr	r3, [r3, #32]
 800b470:	031b      	lsls	r3, r3, #12
 800b472:	4313      	orrs	r3, r2
 800b474:	693a      	ldr	r2, [r7, #16]
 800b476:	4313      	orrs	r3, r2
 800b478:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b480:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b488:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	685a      	ldr	r2, [r3, #4]
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	695b      	ldr	r3, [r3, #20]
 800b492:	011b      	lsls	r3, r3, #4
 800b494:	4313      	orrs	r3, r2
 800b496:	68fa      	ldr	r2, [r7, #12]
 800b498:	4313      	orrs	r3, r2
 800b49a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	697a      	ldr	r2, [r7, #20]
 800b4a2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	693a      	ldr	r2, [r7, #16]
 800b4aa:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	68fa      	ldr	r2, [r7, #12]
 800b4b2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2201      	movs	r2, #1
 800b4c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b4e4:	2300      	movs	r3, #0
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3718      	adds	r7, #24
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b082      	sub	sp, #8
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	691b      	ldr	r3, [r3, #16]
 800b4fc:	f003 0302 	and.w	r3, r3, #2
 800b500:	2b02      	cmp	r3, #2
 800b502:	d122      	bne.n	800b54a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	f003 0302 	and.w	r3, r3, #2
 800b50e:	2b02      	cmp	r3, #2
 800b510:	d11b      	bne.n	800b54a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f06f 0202 	mvn.w	r2, #2
 800b51a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2201      	movs	r2, #1
 800b520:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	699b      	ldr	r3, [r3, #24]
 800b528:	f003 0303 	and.w	r3, r3, #3
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d003      	beq.n	800b538 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 fa7b 	bl	800ba2c <HAL_TIM_IC_CaptureCallback>
 800b536:	e005      	b.n	800b544 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f000 fa6d 	bl	800ba18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 fa7e 	bl	800ba40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	691b      	ldr	r3, [r3, #16]
 800b550:	f003 0304 	and.w	r3, r3, #4
 800b554:	2b04      	cmp	r3, #4
 800b556:	d122      	bne.n	800b59e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	68db      	ldr	r3, [r3, #12]
 800b55e:	f003 0304 	and.w	r3, r3, #4
 800b562:	2b04      	cmp	r3, #4
 800b564:	d11b      	bne.n	800b59e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f06f 0204 	mvn.w	r2, #4
 800b56e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2202      	movs	r2, #2
 800b574:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	699b      	ldr	r3, [r3, #24]
 800b57c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b580:	2b00      	cmp	r3, #0
 800b582:	d003      	beq.n	800b58c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 fa51 	bl	800ba2c <HAL_TIM_IC_CaptureCallback>
 800b58a:	e005      	b.n	800b598 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 fa43 	bl	800ba18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 fa54 	bl	800ba40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	691b      	ldr	r3, [r3, #16]
 800b5a4:	f003 0308 	and.w	r3, r3, #8
 800b5a8:	2b08      	cmp	r3, #8
 800b5aa:	d122      	bne.n	800b5f2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	f003 0308 	and.w	r3, r3, #8
 800b5b6:	2b08      	cmp	r3, #8
 800b5b8:	d11b      	bne.n	800b5f2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f06f 0208 	mvn.w	r2, #8
 800b5c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2204      	movs	r2, #4
 800b5c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	69db      	ldr	r3, [r3, #28]
 800b5d0:	f003 0303 	and.w	r3, r3, #3
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d003      	beq.n	800b5e0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 fa27 	bl	800ba2c <HAL_TIM_IC_CaptureCallback>
 800b5de:	e005      	b.n	800b5ec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 fa19 	bl	800ba18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 fa2a 	bl	800ba40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	691b      	ldr	r3, [r3, #16]
 800b5f8:	f003 0310 	and.w	r3, r3, #16
 800b5fc:	2b10      	cmp	r3, #16
 800b5fe:	d122      	bne.n	800b646 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	68db      	ldr	r3, [r3, #12]
 800b606:	f003 0310 	and.w	r3, r3, #16
 800b60a:	2b10      	cmp	r3, #16
 800b60c:	d11b      	bne.n	800b646 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f06f 0210 	mvn.w	r2, #16
 800b616:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2208      	movs	r2, #8
 800b61c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	69db      	ldr	r3, [r3, #28]
 800b624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d003      	beq.n	800b634 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 f9fd 	bl	800ba2c <HAL_TIM_IC_CaptureCallback>
 800b632:	e005      	b.n	800b640 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 f9ef 	bl	800ba18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 fa00 	bl	800ba40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2200      	movs	r2, #0
 800b644:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	691b      	ldr	r3, [r3, #16]
 800b64c:	f003 0301 	and.w	r3, r3, #1
 800b650:	2b01      	cmp	r3, #1
 800b652:	d10e      	bne.n	800b672 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	f003 0301 	and.w	r3, r3, #1
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d107      	bne.n	800b672 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f06f 0201 	mvn.w	r2, #1
 800b66a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 f9c9 	bl	800ba04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b67c:	2b80      	cmp	r3, #128	; 0x80
 800b67e:	d10e      	bne.n	800b69e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b68a:	2b80      	cmp	r3, #128	; 0x80
 800b68c:	d107      	bne.n	800b69e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 fd7b 	bl	800c194 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	691b      	ldr	r3, [r3, #16]
 800b6a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6a8:	2b40      	cmp	r3, #64	; 0x40
 800b6aa:	d10e      	bne.n	800b6ca <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	68db      	ldr	r3, [r3, #12]
 800b6b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6b6:	2b40      	cmp	r3, #64	; 0x40
 800b6b8:	d107      	bne.n	800b6ca <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b6c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f000 f9c5 	bl	800ba54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	691b      	ldr	r3, [r3, #16]
 800b6d0:	f003 0320 	and.w	r3, r3, #32
 800b6d4:	2b20      	cmp	r3, #32
 800b6d6:	d10e      	bne.n	800b6f6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	68db      	ldr	r3, [r3, #12]
 800b6de:	f003 0320 	and.w	r3, r3, #32
 800b6e2:	2b20      	cmp	r3, #32
 800b6e4:	d107      	bne.n	800b6f6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f06f 0220 	mvn.w	r2, #32
 800b6ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 fd45 	bl	800c180 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b6f6:	bf00      	nop
 800b6f8:	3708      	adds	r7, #8
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
	...

0800b700 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	60f8      	str	r0, [r7, #12]
 800b708:	60b9      	str	r1, [r7, #8]
 800b70a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b712:	2b01      	cmp	r3, #1
 800b714:	d101      	bne.n	800b71a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b716:	2302      	movs	r3, #2
 800b718:	e0ac      	b.n	800b874 <HAL_TIM_PWM_ConfigChannel+0x174>
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2201      	movs	r2, #1
 800b71e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2b0c      	cmp	r3, #12
 800b726:	f200 809f 	bhi.w	800b868 <HAL_TIM_PWM_ConfigChannel+0x168>
 800b72a:	a201      	add	r2, pc, #4	; (adr r2, 800b730 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b730:	0800b765 	.word	0x0800b765
 800b734:	0800b869 	.word	0x0800b869
 800b738:	0800b869 	.word	0x0800b869
 800b73c:	0800b869 	.word	0x0800b869
 800b740:	0800b7a5 	.word	0x0800b7a5
 800b744:	0800b869 	.word	0x0800b869
 800b748:	0800b869 	.word	0x0800b869
 800b74c:	0800b869 	.word	0x0800b869
 800b750:	0800b7e7 	.word	0x0800b7e7
 800b754:	0800b869 	.word	0x0800b869
 800b758:	0800b869 	.word	0x0800b869
 800b75c:	0800b869 	.word	0x0800b869
 800b760:	0800b827 	.word	0x0800b827
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	68b9      	ldr	r1, [r7, #8]
 800b76a:	4618      	mov	r0, r3
 800b76c:	f000 fa1c 	bl	800bba8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	699a      	ldr	r2, [r3, #24]
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f042 0208 	orr.w	r2, r2, #8
 800b77e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	699a      	ldr	r2, [r3, #24]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f022 0204 	bic.w	r2, r2, #4
 800b78e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	6999      	ldr	r1, [r3, #24]
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	691a      	ldr	r2, [r3, #16]
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	430a      	orrs	r2, r1
 800b7a0:	619a      	str	r2, [r3, #24]
      break;
 800b7a2:	e062      	b.n	800b86a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	68b9      	ldr	r1, [r7, #8]
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f000 fa6c 	bl	800bc88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	699a      	ldr	r2, [r3, #24]
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b7be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	699a      	ldr	r2, [r3, #24]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b7ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	6999      	ldr	r1, [r3, #24]
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	691b      	ldr	r3, [r3, #16]
 800b7da:	021a      	lsls	r2, r3, #8
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	430a      	orrs	r2, r1
 800b7e2:	619a      	str	r2, [r3, #24]
      break;
 800b7e4:	e041      	b.n	800b86a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	68b9      	ldr	r1, [r7, #8]
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f000 fac1 	bl	800bd74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	69da      	ldr	r2, [r3, #28]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f042 0208 	orr.w	r2, r2, #8
 800b800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	69da      	ldr	r2, [r3, #28]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f022 0204 	bic.w	r2, r2, #4
 800b810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	69d9      	ldr	r1, [r3, #28]
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	691a      	ldr	r2, [r3, #16]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	430a      	orrs	r2, r1
 800b822:	61da      	str	r2, [r3, #28]
      break;
 800b824:	e021      	b.n	800b86a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	68b9      	ldr	r1, [r7, #8]
 800b82c:	4618      	mov	r0, r3
 800b82e:	f000 fb15 	bl	800be5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	69da      	ldr	r2, [r3, #28]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	69da      	ldr	r2, [r3, #28]
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	69d9      	ldr	r1, [r3, #28]
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	691b      	ldr	r3, [r3, #16]
 800b85c:	021a      	lsls	r2, r3, #8
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	430a      	orrs	r2, r1
 800b864:	61da      	str	r2, [r3, #28]
      break;
 800b866:	e000      	b.n	800b86a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800b868:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2200      	movs	r2, #0
 800b86e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b872:	2300      	movs	r3, #0
}
 800b874:	4618      	mov	r0, r3
 800b876:	3710      	adds	r7, #16
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d101      	bne.n	800b894 <HAL_TIM_ConfigClockSource+0x18>
 800b890:	2302      	movs	r3, #2
 800b892:	e0b3      	b.n	800b9fc <HAL_TIM_ConfigClockSource+0x180>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2201      	movs	r2, #1
 800b898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2202      	movs	r2, #2
 800b8a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	689b      	ldr	r3, [r3, #8]
 800b8aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b8b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b8ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	68fa      	ldr	r2, [r7, #12]
 800b8c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8cc:	d03e      	beq.n	800b94c <HAL_TIM_ConfigClockSource+0xd0>
 800b8ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8d2:	f200 8087 	bhi.w	800b9e4 <HAL_TIM_ConfigClockSource+0x168>
 800b8d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8da:	f000 8085 	beq.w	800b9e8 <HAL_TIM_ConfigClockSource+0x16c>
 800b8de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8e2:	d87f      	bhi.n	800b9e4 <HAL_TIM_ConfigClockSource+0x168>
 800b8e4:	2b70      	cmp	r3, #112	; 0x70
 800b8e6:	d01a      	beq.n	800b91e <HAL_TIM_ConfigClockSource+0xa2>
 800b8e8:	2b70      	cmp	r3, #112	; 0x70
 800b8ea:	d87b      	bhi.n	800b9e4 <HAL_TIM_ConfigClockSource+0x168>
 800b8ec:	2b60      	cmp	r3, #96	; 0x60
 800b8ee:	d050      	beq.n	800b992 <HAL_TIM_ConfigClockSource+0x116>
 800b8f0:	2b60      	cmp	r3, #96	; 0x60
 800b8f2:	d877      	bhi.n	800b9e4 <HAL_TIM_ConfigClockSource+0x168>
 800b8f4:	2b50      	cmp	r3, #80	; 0x50
 800b8f6:	d03c      	beq.n	800b972 <HAL_TIM_ConfigClockSource+0xf6>
 800b8f8:	2b50      	cmp	r3, #80	; 0x50
 800b8fa:	d873      	bhi.n	800b9e4 <HAL_TIM_ConfigClockSource+0x168>
 800b8fc:	2b40      	cmp	r3, #64	; 0x40
 800b8fe:	d058      	beq.n	800b9b2 <HAL_TIM_ConfigClockSource+0x136>
 800b900:	2b40      	cmp	r3, #64	; 0x40
 800b902:	d86f      	bhi.n	800b9e4 <HAL_TIM_ConfigClockSource+0x168>
 800b904:	2b30      	cmp	r3, #48	; 0x30
 800b906:	d064      	beq.n	800b9d2 <HAL_TIM_ConfigClockSource+0x156>
 800b908:	2b30      	cmp	r3, #48	; 0x30
 800b90a:	d86b      	bhi.n	800b9e4 <HAL_TIM_ConfigClockSource+0x168>
 800b90c:	2b20      	cmp	r3, #32
 800b90e:	d060      	beq.n	800b9d2 <HAL_TIM_ConfigClockSource+0x156>
 800b910:	2b20      	cmp	r3, #32
 800b912:	d867      	bhi.n	800b9e4 <HAL_TIM_ConfigClockSource+0x168>
 800b914:	2b00      	cmp	r3, #0
 800b916:	d05c      	beq.n	800b9d2 <HAL_TIM_ConfigClockSource+0x156>
 800b918:	2b10      	cmp	r3, #16
 800b91a:	d05a      	beq.n	800b9d2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b91c:	e062      	b.n	800b9e4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6818      	ldr	r0, [r3, #0]
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	6899      	ldr	r1, [r3, #8]
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	685a      	ldr	r2, [r3, #4]
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	68db      	ldr	r3, [r3, #12]
 800b92e:	f000 fb65 	bl	800bffc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	689b      	ldr	r3, [r3, #8]
 800b938:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b940:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	68fa      	ldr	r2, [r7, #12]
 800b948:	609a      	str	r2, [r3, #8]
      break;
 800b94a:	e04e      	b.n	800b9ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6818      	ldr	r0, [r3, #0]
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	6899      	ldr	r1, [r3, #8]
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	685a      	ldr	r2, [r3, #4]
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	f000 fb4e 	bl	800bffc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	689a      	ldr	r2, [r3, #8]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b96e:	609a      	str	r2, [r3, #8]
      break;
 800b970:	e03b      	b.n	800b9ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6818      	ldr	r0, [r3, #0]
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	6859      	ldr	r1, [r3, #4]
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	461a      	mov	r2, r3
 800b980:	f000 fac2 	bl	800bf08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	2150      	movs	r1, #80	; 0x50
 800b98a:	4618      	mov	r0, r3
 800b98c:	f000 fb1b 	bl	800bfc6 <TIM_ITRx_SetConfig>
      break;
 800b990:	e02b      	b.n	800b9ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6818      	ldr	r0, [r3, #0]
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	6859      	ldr	r1, [r3, #4]
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	68db      	ldr	r3, [r3, #12]
 800b99e:	461a      	mov	r2, r3
 800b9a0:	f000 fae1 	bl	800bf66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	2160      	movs	r1, #96	; 0x60
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f000 fb0b 	bl	800bfc6 <TIM_ITRx_SetConfig>
      break;
 800b9b0:	e01b      	b.n	800b9ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6818      	ldr	r0, [r3, #0]
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	6859      	ldr	r1, [r3, #4]
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	f000 faa2 	bl	800bf08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2140      	movs	r1, #64	; 0x40
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f000 fafb 	bl	800bfc6 <TIM_ITRx_SetConfig>
      break;
 800b9d0:	e00b      	b.n	800b9ea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681a      	ldr	r2, [r3, #0]
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4619      	mov	r1, r3
 800b9dc:	4610      	mov	r0, r2
 800b9de:	f000 faf2 	bl	800bfc6 <TIM_ITRx_SetConfig>
        break;
 800b9e2:	e002      	b.n	800b9ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b9e4:	bf00      	nop
 800b9e6:	e000      	b.n	800b9ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800b9e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b9fa:	2300      	movs	r3, #0
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3710      	adds	r7, #16
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b083      	sub	sp, #12
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ba0c:	bf00      	nop
 800ba0e:	370c      	adds	r7, #12
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr

0800ba18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b083      	sub	sp, #12
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ba20:	bf00      	nop
 800ba22:	370c      	adds	r7, #12
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ba34:	bf00      	nop
 800ba36:	370c      	adds	r7, #12
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr

0800ba40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b083      	sub	sp, #12
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ba48:	bf00      	nop
 800ba4a:	370c      	adds	r7, #12
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr

0800ba54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b083      	sub	sp, #12
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ba5c:	bf00      	nop
 800ba5e:	370c      	adds	r7, #12
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr

0800ba68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	4a40      	ldr	r2, [pc, #256]	; (800bb7c <TIM_Base_SetConfig+0x114>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d013      	beq.n	800baa8 <TIM_Base_SetConfig+0x40>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba86:	d00f      	beq.n	800baa8 <TIM_Base_SetConfig+0x40>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	4a3d      	ldr	r2, [pc, #244]	; (800bb80 <TIM_Base_SetConfig+0x118>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d00b      	beq.n	800baa8 <TIM_Base_SetConfig+0x40>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	4a3c      	ldr	r2, [pc, #240]	; (800bb84 <TIM_Base_SetConfig+0x11c>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d007      	beq.n	800baa8 <TIM_Base_SetConfig+0x40>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	4a3b      	ldr	r2, [pc, #236]	; (800bb88 <TIM_Base_SetConfig+0x120>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d003      	beq.n	800baa8 <TIM_Base_SetConfig+0x40>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	4a3a      	ldr	r2, [pc, #232]	; (800bb8c <TIM_Base_SetConfig+0x124>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d108      	bne.n	800baba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	68fa      	ldr	r2, [r7, #12]
 800bab6:	4313      	orrs	r3, r2
 800bab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	4a2f      	ldr	r2, [pc, #188]	; (800bb7c <TIM_Base_SetConfig+0x114>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d02b      	beq.n	800bb1a <TIM_Base_SetConfig+0xb2>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bac8:	d027      	beq.n	800bb1a <TIM_Base_SetConfig+0xb2>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4a2c      	ldr	r2, [pc, #176]	; (800bb80 <TIM_Base_SetConfig+0x118>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d023      	beq.n	800bb1a <TIM_Base_SetConfig+0xb2>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	4a2b      	ldr	r2, [pc, #172]	; (800bb84 <TIM_Base_SetConfig+0x11c>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d01f      	beq.n	800bb1a <TIM_Base_SetConfig+0xb2>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	4a2a      	ldr	r2, [pc, #168]	; (800bb88 <TIM_Base_SetConfig+0x120>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d01b      	beq.n	800bb1a <TIM_Base_SetConfig+0xb2>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4a29      	ldr	r2, [pc, #164]	; (800bb8c <TIM_Base_SetConfig+0x124>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d017      	beq.n	800bb1a <TIM_Base_SetConfig+0xb2>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	4a28      	ldr	r2, [pc, #160]	; (800bb90 <TIM_Base_SetConfig+0x128>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d013      	beq.n	800bb1a <TIM_Base_SetConfig+0xb2>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4a27      	ldr	r2, [pc, #156]	; (800bb94 <TIM_Base_SetConfig+0x12c>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d00f      	beq.n	800bb1a <TIM_Base_SetConfig+0xb2>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	4a26      	ldr	r2, [pc, #152]	; (800bb98 <TIM_Base_SetConfig+0x130>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d00b      	beq.n	800bb1a <TIM_Base_SetConfig+0xb2>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	4a25      	ldr	r2, [pc, #148]	; (800bb9c <TIM_Base_SetConfig+0x134>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d007      	beq.n	800bb1a <TIM_Base_SetConfig+0xb2>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	4a24      	ldr	r2, [pc, #144]	; (800bba0 <TIM_Base_SetConfig+0x138>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d003      	beq.n	800bb1a <TIM_Base_SetConfig+0xb2>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	4a23      	ldr	r2, [pc, #140]	; (800bba4 <TIM_Base_SetConfig+0x13c>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d108      	bne.n	800bb2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	68db      	ldr	r3, [r3, #12]
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	695b      	ldr	r3, [r3, #20]
 800bb36:	4313      	orrs	r3, r2
 800bb38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	689a      	ldr	r2, [r3, #8]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	4a0a      	ldr	r2, [pc, #40]	; (800bb7c <TIM_Base_SetConfig+0x114>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d003      	beq.n	800bb60 <TIM_Base_SetConfig+0xf8>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	4a0c      	ldr	r2, [pc, #48]	; (800bb8c <TIM_Base_SetConfig+0x124>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d103      	bne.n	800bb68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	691a      	ldr	r2, [r3, #16]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	615a      	str	r2, [r3, #20]
}
 800bb6e:	bf00      	nop
 800bb70:	3714      	adds	r7, #20
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr
 800bb7a:	bf00      	nop
 800bb7c:	40010000 	.word	0x40010000
 800bb80:	40000400 	.word	0x40000400
 800bb84:	40000800 	.word	0x40000800
 800bb88:	40000c00 	.word	0x40000c00
 800bb8c:	40010400 	.word	0x40010400
 800bb90:	40014000 	.word	0x40014000
 800bb94:	40014400 	.word	0x40014400
 800bb98:	40014800 	.word	0x40014800
 800bb9c:	40001800 	.word	0x40001800
 800bba0:	40001c00 	.word	0x40001c00
 800bba4:	40002000 	.word	0x40002000

0800bba8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b087      	sub	sp, #28
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6a1b      	ldr	r3, [r3, #32]
 800bbb6:	f023 0201 	bic.w	r2, r3, #1
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6a1b      	ldr	r3, [r3, #32]
 800bbc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	699b      	ldr	r3, [r3, #24]
 800bbce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f023 0303 	bic.w	r3, r3, #3
 800bbde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	68fa      	ldr	r2, [r7, #12]
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	f023 0302 	bic.w	r3, r3, #2
 800bbf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	689b      	ldr	r3, [r3, #8]
 800bbf6:	697a      	ldr	r2, [r7, #20]
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	4a20      	ldr	r2, [pc, #128]	; (800bc80 <TIM_OC1_SetConfig+0xd8>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d003      	beq.n	800bc0c <TIM_OC1_SetConfig+0x64>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	4a1f      	ldr	r2, [pc, #124]	; (800bc84 <TIM_OC1_SetConfig+0xdc>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d10c      	bne.n	800bc26 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	f023 0308 	bic.w	r3, r3, #8
 800bc12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	68db      	ldr	r3, [r3, #12]
 800bc18:	697a      	ldr	r2, [r7, #20]
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	f023 0304 	bic.w	r3, r3, #4
 800bc24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	4a15      	ldr	r2, [pc, #84]	; (800bc80 <TIM_OC1_SetConfig+0xd8>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d003      	beq.n	800bc36 <TIM_OC1_SetConfig+0x8e>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4a14      	ldr	r2, [pc, #80]	; (800bc84 <TIM_OC1_SetConfig+0xdc>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d111      	bne.n	800bc5a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bc44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	695b      	ldr	r3, [r3, #20]
 800bc4a:	693a      	ldr	r2, [r7, #16]
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	699b      	ldr	r3, [r3, #24]
 800bc54:	693a      	ldr	r2, [r7, #16]
 800bc56:	4313      	orrs	r3, r2
 800bc58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	693a      	ldr	r2, [r7, #16]
 800bc5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	685a      	ldr	r2, [r3, #4]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	697a      	ldr	r2, [r7, #20]
 800bc72:	621a      	str	r2, [r3, #32]
}
 800bc74:	bf00      	nop
 800bc76:	371c      	adds	r7, #28
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr
 800bc80:	40010000 	.word	0x40010000
 800bc84:	40010400 	.word	0x40010400

0800bc88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b087      	sub	sp, #28
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6a1b      	ldr	r3, [r3, #32]
 800bc96:	f023 0210 	bic.w	r2, r3, #16
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6a1b      	ldr	r3, [r3, #32]
 800bca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	699b      	ldr	r3, [r3, #24]
 800bcae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bcbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	021b      	lsls	r3, r3, #8
 800bcc6:	68fa      	ldr	r2, [r7, #12]
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	f023 0320 	bic.w	r3, r3, #32
 800bcd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	011b      	lsls	r3, r3, #4
 800bcda:	697a      	ldr	r2, [r7, #20]
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	4a22      	ldr	r2, [pc, #136]	; (800bd6c <TIM_OC2_SetConfig+0xe4>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d003      	beq.n	800bcf0 <TIM_OC2_SetConfig+0x68>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4a21      	ldr	r2, [pc, #132]	; (800bd70 <TIM_OC2_SetConfig+0xe8>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d10d      	bne.n	800bd0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	68db      	ldr	r3, [r3, #12]
 800bcfc:	011b      	lsls	r3, r3, #4
 800bcfe:	697a      	ldr	r2, [r7, #20]
 800bd00:	4313      	orrs	r3, r2
 800bd02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	4a17      	ldr	r2, [pc, #92]	; (800bd6c <TIM_OC2_SetConfig+0xe4>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d003      	beq.n	800bd1c <TIM_OC2_SetConfig+0x94>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4a16      	ldr	r2, [pc, #88]	; (800bd70 <TIM_OC2_SetConfig+0xe8>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d113      	bne.n	800bd44 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bd22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bd2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	695b      	ldr	r3, [r3, #20]
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	693a      	ldr	r2, [r7, #16]
 800bd34:	4313      	orrs	r3, r2
 800bd36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	699b      	ldr	r3, [r3, #24]
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	693a      	ldr	r2, [r7, #16]
 800bd40:	4313      	orrs	r3, r2
 800bd42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	693a      	ldr	r2, [r7, #16]
 800bd48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	68fa      	ldr	r2, [r7, #12]
 800bd4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	685a      	ldr	r2, [r3, #4]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	697a      	ldr	r2, [r7, #20]
 800bd5c:	621a      	str	r2, [r3, #32]
}
 800bd5e:	bf00      	nop
 800bd60:	371c      	adds	r7, #28
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr
 800bd6a:	bf00      	nop
 800bd6c:	40010000 	.word	0x40010000
 800bd70:	40010400 	.word	0x40010400

0800bd74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b087      	sub	sp, #28
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a1b      	ldr	r3, [r3, #32]
 800bd82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6a1b      	ldr	r3, [r3, #32]
 800bd8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	69db      	ldr	r3, [r3, #28]
 800bd9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bda2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f023 0303 	bic.w	r3, r3, #3
 800bdaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	68fa      	ldr	r2, [r7, #12]
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bdbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	689b      	ldr	r3, [r3, #8]
 800bdc2:	021b      	lsls	r3, r3, #8
 800bdc4:	697a      	ldr	r2, [r7, #20]
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	4a21      	ldr	r2, [pc, #132]	; (800be54 <TIM_OC3_SetConfig+0xe0>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d003      	beq.n	800bdda <TIM_OC3_SetConfig+0x66>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	4a20      	ldr	r2, [pc, #128]	; (800be58 <TIM_OC3_SetConfig+0xe4>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d10d      	bne.n	800bdf6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bde0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	68db      	ldr	r3, [r3, #12]
 800bde6:	021b      	lsls	r3, r3, #8
 800bde8:	697a      	ldr	r2, [r7, #20]
 800bdea:	4313      	orrs	r3, r2
 800bdec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bdf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	4a16      	ldr	r2, [pc, #88]	; (800be54 <TIM_OC3_SetConfig+0xe0>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d003      	beq.n	800be06 <TIM_OC3_SetConfig+0x92>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	4a15      	ldr	r2, [pc, #84]	; (800be58 <TIM_OC3_SetConfig+0xe4>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d113      	bne.n	800be2e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800be14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	695b      	ldr	r3, [r3, #20]
 800be1a:	011b      	lsls	r3, r3, #4
 800be1c:	693a      	ldr	r2, [r7, #16]
 800be1e:	4313      	orrs	r3, r2
 800be20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	699b      	ldr	r3, [r3, #24]
 800be26:	011b      	lsls	r3, r3, #4
 800be28:	693a      	ldr	r2, [r7, #16]
 800be2a:	4313      	orrs	r3, r2
 800be2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	693a      	ldr	r2, [r7, #16]
 800be32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	68fa      	ldr	r2, [r7, #12]
 800be38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	685a      	ldr	r2, [r3, #4]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	697a      	ldr	r2, [r7, #20]
 800be46:	621a      	str	r2, [r3, #32]
}
 800be48:	bf00      	nop
 800be4a:	371c      	adds	r7, #28
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr
 800be54:	40010000 	.word	0x40010000
 800be58:	40010400 	.word	0x40010400

0800be5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b087      	sub	sp, #28
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6a1b      	ldr	r3, [r3, #32]
 800be6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6a1b      	ldr	r3, [r3, #32]
 800be76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	69db      	ldr	r3, [r3, #28]
 800be82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	021b      	lsls	r3, r3, #8
 800be9a:	68fa      	ldr	r2, [r7, #12]
 800be9c:	4313      	orrs	r3, r2
 800be9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bea6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	689b      	ldr	r3, [r3, #8]
 800beac:	031b      	lsls	r3, r3, #12
 800beae:	693a      	ldr	r2, [r7, #16]
 800beb0:	4313      	orrs	r3, r2
 800beb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	4a12      	ldr	r2, [pc, #72]	; (800bf00 <TIM_OC4_SetConfig+0xa4>)
 800beb8:	4293      	cmp	r3, r2
 800beba:	d003      	beq.n	800bec4 <TIM_OC4_SetConfig+0x68>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	4a11      	ldr	r2, [pc, #68]	; (800bf04 <TIM_OC4_SetConfig+0xa8>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d109      	bne.n	800bed8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800beca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	695b      	ldr	r3, [r3, #20]
 800bed0:	019b      	lsls	r3, r3, #6
 800bed2:	697a      	ldr	r2, [r7, #20]
 800bed4:	4313      	orrs	r3, r2
 800bed6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	697a      	ldr	r2, [r7, #20]
 800bedc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	68fa      	ldr	r2, [r7, #12]
 800bee2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	685a      	ldr	r2, [r3, #4]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	693a      	ldr	r2, [r7, #16]
 800bef0:	621a      	str	r2, [r3, #32]
}
 800bef2:	bf00      	nop
 800bef4:	371c      	adds	r7, #28
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr
 800befe:	bf00      	nop
 800bf00:	40010000 	.word	0x40010000
 800bf04:	40010400 	.word	0x40010400

0800bf08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b087      	sub	sp, #28
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	6a1b      	ldr	r3, [r3, #32]
 800bf18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	6a1b      	ldr	r3, [r3, #32]
 800bf1e:	f023 0201 	bic.w	r2, r3, #1
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	699b      	ldr	r3, [r3, #24]
 800bf2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bf32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	011b      	lsls	r3, r3, #4
 800bf38:	693a      	ldr	r2, [r7, #16]
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	f023 030a 	bic.w	r3, r3, #10
 800bf44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bf46:	697a      	ldr	r2, [r7, #20]
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	4313      	orrs	r3, r2
 800bf4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	693a      	ldr	r2, [r7, #16]
 800bf52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	697a      	ldr	r2, [r7, #20]
 800bf58:	621a      	str	r2, [r3, #32]
}
 800bf5a:	bf00      	nop
 800bf5c:	371c      	adds	r7, #28
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr

0800bf66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf66:	b480      	push	{r7}
 800bf68:	b087      	sub	sp, #28
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	60f8      	str	r0, [r7, #12]
 800bf6e:	60b9      	str	r1, [r7, #8]
 800bf70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	6a1b      	ldr	r3, [r3, #32]
 800bf76:	f023 0210 	bic.w	r2, r3, #16
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	699b      	ldr	r3, [r3, #24]
 800bf82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6a1b      	ldr	r3, [r3, #32]
 800bf88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bf90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	031b      	lsls	r3, r3, #12
 800bf96:	697a      	ldr	r2, [r7, #20]
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bfa2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	011b      	lsls	r3, r3, #4
 800bfa8:	693a      	ldr	r2, [r7, #16]
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	697a      	ldr	r2, [r7, #20]
 800bfb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	693a      	ldr	r2, [r7, #16]
 800bfb8:	621a      	str	r2, [r3, #32]
}
 800bfba:	bf00      	nop
 800bfbc:	371c      	adds	r7, #28
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc4:	4770      	bx	lr

0800bfc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bfc6:	b480      	push	{r7}
 800bfc8:	b085      	sub	sp, #20
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
 800bfce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	689b      	ldr	r3, [r3, #8]
 800bfd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bfde:	683a      	ldr	r2, [r7, #0]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	f043 0307 	orr.w	r3, r3, #7
 800bfe8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	68fa      	ldr	r2, [r7, #12]
 800bfee:	609a      	str	r2, [r3, #8]
}
 800bff0:	bf00      	nop
 800bff2:	3714      	adds	r7, #20
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b087      	sub	sp, #28
 800c000:	af00      	add	r7, sp, #0
 800c002:	60f8      	str	r0, [r7, #12]
 800c004:	60b9      	str	r1, [r7, #8]
 800c006:	607a      	str	r2, [r7, #4]
 800c008:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	689b      	ldr	r3, [r3, #8]
 800c00e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c016:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	021a      	lsls	r2, r3, #8
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	431a      	orrs	r2, r3
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	4313      	orrs	r3, r2
 800c024:	697a      	ldr	r2, [r7, #20]
 800c026:	4313      	orrs	r3, r2
 800c028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	697a      	ldr	r2, [r7, #20]
 800c02e:	609a      	str	r2, [r3, #8]
}
 800c030:	bf00      	nop
 800c032:	371c      	adds	r7, #28
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr

0800c03c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b087      	sub	sp, #28
 800c040:	af00      	add	r7, sp, #0
 800c042:	60f8      	str	r0, [r7, #12]
 800c044:	60b9      	str	r1, [r7, #8]
 800c046:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	f003 031f 	and.w	r3, r3, #31
 800c04e:	2201      	movs	r2, #1
 800c050:	fa02 f303 	lsl.w	r3, r2, r3
 800c054:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	6a1a      	ldr	r2, [r3, #32]
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	43db      	mvns	r3, r3
 800c05e:	401a      	ands	r2, r3
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	6a1a      	ldr	r2, [r3, #32]
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	f003 031f 	and.w	r3, r3, #31
 800c06e:	6879      	ldr	r1, [r7, #4]
 800c070:	fa01 f303 	lsl.w	r3, r1, r3
 800c074:	431a      	orrs	r2, r3
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	621a      	str	r2, [r3, #32]
}
 800c07a:	bf00      	nop
 800c07c:	371c      	adds	r7, #28
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr
	...

0800c088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c088:	b480      	push	{r7}
 800c08a:	b085      	sub	sp, #20
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c098:	2b01      	cmp	r3, #1
 800c09a:	d101      	bne.n	800c0a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c09c:	2302      	movs	r3, #2
 800c09e:	e05a      	b.n	800c156 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2202      	movs	r2, #2
 800c0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	689b      	ldr	r3, [r3, #8]
 800c0be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	68fa      	ldr	r2, [r7, #12]
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	68fa      	ldr	r2, [r7, #12]
 800c0d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	4a21      	ldr	r2, [pc, #132]	; (800c164 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d022      	beq.n	800c12a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0ec:	d01d      	beq.n	800c12a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	4a1d      	ldr	r2, [pc, #116]	; (800c168 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d018      	beq.n	800c12a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4a1b      	ldr	r2, [pc, #108]	; (800c16c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d013      	beq.n	800c12a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4a1a      	ldr	r2, [pc, #104]	; (800c170 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c108:	4293      	cmp	r3, r2
 800c10a:	d00e      	beq.n	800c12a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4a18      	ldr	r2, [pc, #96]	; (800c174 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d009      	beq.n	800c12a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4a17      	ldr	r2, [pc, #92]	; (800c178 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d004      	beq.n	800c12a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a15      	ldr	r2, [pc, #84]	; (800c17c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d10c      	bne.n	800c144 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c130:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	685b      	ldr	r3, [r3, #4]
 800c136:	68ba      	ldr	r2, [r7, #8]
 800c138:	4313      	orrs	r3, r2
 800c13a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	68ba      	ldr	r2, [r7, #8]
 800c142:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2201      	movs	r2, #1
 800c148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2200      	movs	r2, #0
 800c150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c154:	2300      	movs	r3, #0
}
 800c156:	4618      	mov	r0, r3
 800c158:	3714      	adds	r7, #20
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr
 800c162:	bf00      	nop
 800c164:	40010000 	.word	0x40010000
 800c168:	40000400 	.word	0x40000400
 800c16c:	40000800 	.word	0x40000800
 800c170:	40000c00 	.word	0x40000c00
 800c174:	40010400 	.word	0x40010400
 800c178:	40014000 	.word	0x40014000
 800c17c:	40001800 	.word	0x40001800

0800c180 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c180:	b480      	push	{r7}
 800c182:	b083      	sub	sp, #12
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c188:	bf00      	nop
 800c18a:	370c      	adds	r7, #12
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr

0800c194 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c19c:	bf00      	nop
 800c19e:	370c      	adds	r7, #12
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c1a8:	b084      	sub	sp, #16
 800c1aa:	b580      	push	{r7, lr}
 800c1ac:	b084      	sub	sp, #16
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	6078      	str	r0, [r7, #4]
 800c1b2:	f107 001c 	add.w	r0, r7, #28
 800c1b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d122      	bne.n	800c206 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	68db      	ldr	r3, [r3, #12]
 800c1d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c1d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1d8:	687a      	ldr	r2, [r7, #4]
 800c1da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	68db      	ldr	r3, [r3, #12]
 800c1e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c1e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1ea:	2b01      	cmp	r3, #1
 800c1ec:	d105      	bne.n	800c1fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 f94a 	bl	800c494 <USB_CoreReset>
 800c200:	4603      	mov	r3, r0
 800c202:	73fb      	strb	r3, [r7, #15]
 800c204:	e01a      	b.n	800c23c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	68db      	ldr	r3, [r3, #12]
 800c20a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f000 f93e 	bl	800c494 <USB_CoreReset>
 800c218:	4603      	mov	r3, r0
 800c21a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c21c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d106      	bne.n	800c230 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c226:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	639a      	str	r2, [r3, #56]	; 0x38
 800c22e:	e005      	b.n	800c23c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c234:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23e:	2b01      	cmp	r3, #1
 800c240:	d10b      	bne.n	800c25a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	689b      	ldr	r3, [r3, #8]
 800c246:	f043 0206 	orr.w	r2, r3, #6
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	689b      	ldr	r3, [r3, #8]
 800c252:	f043 0220 	orr.w	r2, r3, #32
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3710      	adds	r7, #16
 800c260:	46bd      	mov	sp, r7
 800c262:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c266:	b004      	add	sp, #16
 800c268:	4770      	bx	lr

0800c26a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c26a:	b480      	push	{r7}
 800c26c:	b083      	sub	sp, #12
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	f043 0201 	orr.w	r2, r3, #1
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c27e:	2300      	movs	r3, #0
}
 800c280:	4618      	mov	r0, r3
 800c282:	370c      	adds	r7, #12
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b083      	sub	sp, #12
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	689b      	ldr	r3, [r3, #8]
 800c298:	f023 0201 	bic.w	r2, r3, #1
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c2a0:	2300      	movs	r3, #0
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	370c      	adds	r7, #12
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr

0800c2ae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c2ae:	b580      	push	{r7, lr}
 800c2b0:	b082      	sub	sp, #8
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	6078      	str	r0, [r7, #4]
 800c2b6:	460b      	mov	r3, r1
 800c2b8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	68db      	ldr	r3, [r3, #12]
 800c2be:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c2c6:	78fb      	ldrb	r3, [r7, #3]
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d106      	bne.n	800c2da <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	60da      	str	r2, [r3, #12]
 800c2d8:	e00b      	b.n	800c2f2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c2da:	78fb      	ldrb	r3, [r7, #3]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d106      	bne.n	800c2ee <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	60da      	str	r2, [r3, #12]
 800c2ec:	e001      	b.n	800c2f2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	e003      	b.n	800c2fa <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c2f2:	2032      	movs	r0, #50	; 0x32
 800c2f4:	f7f9 fc1a 	bl	8005b2c <HAL_Delay>

  return HAL_OK;
 800c2f8:	2300      	movs	r3, #0
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3708      	adds	r7, #8
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
	...

0800c304 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c304:	b480      	push	{r7}
 800c306:	b085      	sub	sp, #20
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c30e:	2300      	movs	r3, #0
 800c310:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	019b      	lsls	r3, r3, #6
 800c316:	f043 0220 	orr.w	r2, r3, #32
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	3301      	adds	r3, #1
 800c322:	60fb      	str	r3, [r7, #12]
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	4a09      	ldr	r2, [pc, #36]	; (800c34c <USB_FlushTxFifo+0x48>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d901      	bls.n	800c330 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c32c:	2303      	movs	r3, #3
 800c32e:	e006      	b.n	800c33e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	691b      	ldr	r3, [r3, #16]
 800c334:	f003 0320 	and.w	r3, r3, #32
 800c338:	2b20      	cmp	r3, #32
 800c33a:	d0f0      	beq.n	800c31e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c33c:	2300      	movs	r3, #0
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3714      	adds	r7, #20
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr
 800c34a:	bf00      	nop
 800c34c:	00030d40 	.word	0x00030d40

0800c350 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c350:	b480      	push	{r7}
 800c352:	b085      	sub	sp, #20
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c358:	2300      	movs	r3, #0
 800c35a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2210      	movs	r2, #16
 800c360:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	3301      	adds	r3, #1
 800c366:	60fb      	str	r3, [r7, #12]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	4a09      	ldr	r2, [pc, #36]	; (800c390 <USB_FlushRxFifo+0x40>)
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d901      	bls.n	800c374 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c370:	2303      	movs	r3, #3
 800c372:	e006      	b.n	800c382 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	691b      	ldr	r3, [r3, #16]
 800c378:	f003 0310 	and.w	r3, r3, #16
 800c37c:	2b10      	cmp	r3, #16
 800c37e:	d0f0      	beq.n	800c362 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c380:	2300      	movs	r3, #0
}
 800c382:	4618      	mov	r0, r3
 800c384:	3714      	adds	r7, #20
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr
 800c38e:	bf00      	nop
 800c390:	00030d40 	.word	0x00030d40

0800c394 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c394:	b480      	push	{r7}
 800c396:	b089      	sub	sp, #36	; 0x24
 800c398:	af00      	add	r7, sp, #0
 800c39a:	60f8      	str	r0, [r7, #12]
 800c39c:	60b9      	str	r1, [r7, #8]
 800c39e:	4611      	mov	r1, r2
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	460b      	mov	r3, r1
 800c3a4:	71fb      	strb	r3, [r7, #7]
 800c3a6:	4613      	mov	r3, r2
 800c3a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c3b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d11a      	bne.n	800c3f0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c3ba:	88bb      	ldrh	r3, [r7, #4]
 800c3bc:	3303      	adds	r3, #3
 800c3be:	089b      	lsrs	r3, r3, #2
 800c3c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	61bb      	str	r3, [r7, #24]
 800c3c6:	e00f      	b.n	800c3e8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c3c8:	79fb      	ldrb	r3, [r7, #7]
 800c3ca:	031a      	lsls	r2, r3, #12
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	4413      	add	r3, r2
 800c3d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	69fb      	ldr	r3, [r7, #28]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c3dc:	69fb      	ldr	r3, [r7, #28]
 800c3de:	3304      	adds	r3, #4
 800c3e0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c3e2:	69bb      	ldr	r3, [r7, #24]
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	61bb      	str	r3, [r7, #24]
 800c3e8:	69ba      	ldr	r2, [r7, #24]
 800c3ea:	693b      	ldr	r3, [r7, #16]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d3eb      	bcc.n	800c3c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c3f0:	2300      	movs	r3, #0
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3724      	adds	r7, #36	; 0x24
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fc:	4770      	bx	lr

0800c3fe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c3fe:	b480      	push	{r7}
 800c400:	b089      	sub	sp, #36	; 0x24
 800c402:	af00      	add	r7, sp, #0
 800c404:	60f8      	str	r0, [r7, #12]
 800c406:	60b9      	str	r1, [r7, #8]
 800c408:	4613      	mov	r3, r2
 800c40a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c414:	88fb      	ldrh	r3, [r7, #6]
 800c416:	3303      	adds	r3, #3
 800c418:	089b      	lsrs	r3, r3, #2
 800c41a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c41c:	2300      	movs	r3, #0
 800c41e:	61bb      	str	r3, [r7, #24]
 800c420:	e00b      	b.n	800c43a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c428:	681a      	ldr	r2, [r3, #0]
 800c42a:	69fb      	ldr	r3, [r7, #28]
 800c42c:	601a      	str	r2, [r3, #0]
    pDest++;
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	3304      	adds	r3, #4
 800c432:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c434:	69bb      	ldr	r3, [r7, #24]
 800c436:	3301      	adds	r3, #1
 800c438:	61bb      	str	r3, [r7, #24]
 800c43a:	69ba      	ldr	r2, [r7, #24]
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	429a      	cmp	r2, r3
 800c440:	d3ef      	bcc.n	800c422 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c442:	69fb      	ldr	r3, [r7, #28]
}
 800c444:	4618      	mov	r0, r3
 800c446:	3724      	adds	r7, #36	; 0x24
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr

0800c450 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c450:	b480      	push	{r7}
 800c452:	b085      	sub	sp, #20
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	695b      	ldr	r3, [r3, #20]
 800c45c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	699b      	ldr	r3, [r3, #24]
 800c462:	68fa      	ldr	r2, [r7, #12]
 800c464:	4013      	ands	r3, r2
 800c466:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c468:	68fb      	ldr	r3, [r7, #12]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3714      	adds	r7, #20
 800c46e:	46bd      	mov	sp, r7
 800c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c474:	4770      	bx	lr

0800c476 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c476:	b480      	push	{r7}
 800c478:	b083      	sub	sp, #12
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	695b      	ldr	r3, [r3, #20]
 800c482:	f003 0301 	and.w	r3, r3, #1
}
 800c486:	4618      	mov	r0, r3
 800c488:	370c      	adds	r7, #12
 800c48a:	46bd      	mov	sp, r7
 800c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c490:	4770      	bx	lr
	...

0800c494 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c494:	b480      	push	{r7}
 800c496:	b085      	sub	sp, #20
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c49c:	2300      	movs	r3, #0
 800c49e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	60fb      	str	r3, [r7, #12]
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	4a13      	ldr	r2, [pc, #76]	; (800c4f8 <USB_CoreReset+0x64>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d901      	bls.n	800c4b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c4ae:	2303      	movs	r3, #3
 800c4b0:	e01b      	b.n	800c4ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	691b      	ldr	r3, [r3, #16]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	daf2      	bge.n	800c4a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	691b      	ldr	r3, [r3, #16]
 800c4c2:	f043 0201 	orr.w	r2, r3, #1
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	60fb      	str	r3, [r7, #12]
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	4a09      	ldr	r2, [pc, #36]	; (800c4f8 <USB_CoreReset+0x64>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d901      	bls.n	800c4dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c4d8:	2303      	movs	r3, #3
 800c4da:	e006      	b.n	800c4ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	691b      	ldr	r3, [r3, #16]
 800c4e0:	f003 0301 	and.w	r3, r3, #1
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d0f0      	beq.n	800c4ca <USB_CoreReset+0x36>

  return HAL_OK;
 800c4e8:	2300      	movs	r3, #0
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3714      	adds	r7, #20
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop
 800c4f8:	00030d40 	.word	0x00030d40

0800c4fc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c4fc:	b084      	sub	sp, #16
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b084      	sub	sp, #16
 800c502:	af00      	add	r7, sp, #0
 800c504:	6078      	str	r0, [r7, #4]
 800c506:	f107 001c 	add.w	r0, r7, #28
 800c50a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c518:	461a      	mov	r2, r3
 800c51a:	2300      	movs	r3, #0
 800c51c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c522:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c52e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c53a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d018      	beq.n	800c580 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800c54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c550:	2b01      	cmp	r3, #1
 800c552:	d10a      	bne.n	800c56a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	68ba      	ldr	r2, [r7, #8]
 800c55e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c562:	f043 0304 	orr.w	r3, r3, #4
 800c566:	6013      	str	r3, [r2, #0]
 800c568:	e014      	b.n	800c594 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	68ba      	ldr	r2, [r7, #8]
 800c574:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c578:	f023 0304 	bic.w	r3, r3, #4
 800c57c:	6013      	str	r3, [r2, #0]
 800c57e:	e009      	b.n	800c594 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	68ba      	ldr	r2, [r7, #8]
 800c58a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c58e:	f023 0304 	bic.w	r3, r3, #4
 800c592:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800c594:	2110      	movs	r1, #16
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f7ff feb4 	bl	800c304 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f7ff fed7 	bl	800c350 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	60fb      	str	r3, [r7, #12]
 800c5a6:	e015      	b.n	800c5d4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	015a      	lsls	r2, r3, #5
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	4413      	add	r3, r2
 800c5b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5ba:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	015a      	lsls	r2, r3, #5
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	4413      	add	r3, r2
 800c5c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	60fb      	str	r3, [r7, #12]
 800c5d4:	6a3b      	ldr	r3, [r7, #32]
 800c5d6:	68fa      	ldr	r2, [r7, #12]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d3e5      	bcc.n	800c5a8 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800c5dc:	2101      	movs	r1, #1
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f000 f8ac 	bl	800c73c <USB_DriveVbus>

  HAL_Delay(200U);
 800c5e4:	20c8      	movs	r0, #200	; 0xc8
 800c5e6:	f7f9 faa1 	bl	8005b2c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5f6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c600:	2b00      	cmp	r3, #0
 800c602:	d00b      	beq.n	800c61c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c60a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	4a14      	ldr	r2, [pc, #80]	; (800c660 <USB_HostInit+0x164>)
 800c610:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	4a13      	ldr	r2, [pc, #76]	; (800c664 <USB_HostInit+0x168>)
 800c616:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800c61a:	e009      	b.n	800c630 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2280      	movs	r2, #128	; 0x80
 800c620:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	4a10      	ldr	r2, [pc, #64]	; (800c668 <USB_HostInit+0x16c>)
 800c626:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	4a10      	ldr	r2, [pc, #64]	; (800c66c <USB_HostInit+0x170>)
 800c62c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c632:	2b00      	cmp	r3, #0
 800c634:	d105      	bne.n	800c642 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	699b      	ldr	r3, [r3, #24]
 800c63a:	f043 0210 	orr.w	r2, r3, #16
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	699a      	ldr	r2, [r3, #24]
 800c646:	4b0a      	ldr	r3, [pc, #40]	; (800c670 <USB_HostInit+0x174>)
 800c648:	4313      	orrs	r3, r2
 800c64a:	687a      	ldr	r2, [r7, #4]
 800c64c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800c64e:	2300      	movs	r3, #0
}
 800c650:	4618      	mov	r0, r3
 800c652:	3710      	adds	r7, #16
 800c654:	46bd      	mov	sp, r7
 800c656:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c65a:	b004      	add	sp, #16
 800c65c:	4770      	bx	lr
 800c65e:	bf00      	nop
 800c660:	01000200 	.word	0x01000200
 800c664:	00e00300 	.word	0x00e00300
 800c668:	00600080 	.word	0x00600080
 800c66c:	004000e0 	.word	0x004000e0
 800c670:	a3200008 	.word	0xa3200008

0800c674 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c674:	b480      	push	{r7}
 800c676:	b085      	sub	sp, #20
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	460b      	mov	r3, r1
 800c67e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	68fa      	ldr	r2, [r7, #12]
 800c68e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c692:	f023 0303 	bic.w	r3, r3, #3
 800c696:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c69e:	681a      	ldr	r2, [r3, #0]
 800c6a0:	78fb      	ldrb	r3, [r7, #3]
 800c6a2:	f003 0303 	and.w	r3, r3, #3
 800c6a6:	68f9      	ldr	r1, [r7, #12]
 800c6a8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c6b0:	78fb      	ldrb	r3, [r7, #3]
 800c6b2:	2b01      	cmp	r3, #1
 800c6b4:	d107      	bne.n	800c6c6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c6bc:	461a      	mov	r2, r3
 800c6be:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c6c2:	6053      	str	r3, [r2, #4]
 800c6c4:	e009      	b.n	800c6da <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800c6c6:	78fb      	ldrb	r3, [r7, #3]
 800c6c8:	2b02      	cmp	r3, #2
 800c6ca:	d106      	bne.n	800c6da <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	f241 7370 	movw	r3, #6000	; 0x1770
 800c6d8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800c6da:	2300      	movs	r3, #0
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3714      	adds	r7, #20
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr

0800c6e8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b084      	sub	sp, #16
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c708:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c716:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800c718:	2064      	movs	r0, #100	; 0x64
 800c71a:	f7f9 fa07 	bl	8005b2c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	68fa      	ldr	r2, [r7, #12]
 800c722:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c726:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c72a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800c72c:	200a      	movs	r0, #10
 800c72e:	f7f9 f9fd 	bl	8005b2c <HAL_Delay>

  return HAL_OK;
 800c732:	2300      	movs	r3, #0
}
 800c734:	4618      	mov	r0, r3
 800c736:	3710      	adds	r7, #16
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c73c:	b480      	push	{r7}
 800c73e:	b085      	sub	sp, #20
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	460b      	mov	r3, r1
 800c746:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c74c:	2300      	movs	r3, #0
 800c74e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c760:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d109      	bne.n	800c780 <USB_DriveVbus+0x44>
 800c76c:	78fb      	ldrb	r3, [r7, #3]
 800c76e:	2b01      	cmp	r3, #1
 800c770:	d106      	bne.n	800c780 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	68fa      	ldr	r2, [r7, #12]
 800c776:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c77a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c77e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c78a:	d109      	bne.n	800c7a0 <USB_DriveVbus+0x64>
 800c78c:	78fb      	ldrb	r3, [r7, #3]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d106      	bne.n	800c7a0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	68fa      	ldr	r2, [r7, #12]
 800c796:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c79a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c79e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c7a0:	2300      	movs	r3, #0
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3714      	adds	r7, #20
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ac:	4770      	bx	lr

0800c7ae <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c7ae:	b480      	push	{r7}
 800c7b0:	b085      	sub	sp, #20
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	0c5b      	lsrs	r3, r3, #17
 800c7cc:	f003 0303 	and.w	r3, r3, #3
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3714      	adds	r7, #20
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr

0800c7dc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b085      	sub	sp, #20
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c7ee:	689b      	ldr	r3, [r3, #8]
 800c7f0:	b29b      	uxth	r3, r3
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3714      	adds	r7, #20
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fc:	4770      	bx	lr
	...

0800c800 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b088      	sub	sp, #32
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	4608      	mov	r0, r1
 800c80a:	4611      	mov	r1, r2
 800c80c:	461a      	mov	r2, r3
 800c80e:	4603      	mov	r3, r0
 800c810:	70fb      	strb	r3, [r7, #3]
 800c812:	460b      	mov	r3, r1
 800c814:	70bb      	strb	r3, [r7, #2]
 800c816:	4613      	mov	r3, r2
 800c818:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c81a:	2300      	movs	r3, #0
 800c81c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c822:	78fb      	ldrb	r3, [r7, #3]
 800c824:	015a      	lsls	r2, r3, #5
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	4413      	add	r3, r2
 800c82a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c82e:	461a      	mov	r2, r3
 800c830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c834:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c836:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c83a:	2b03      	cmp	r3, #3
 800c83c:	d87e      	bhi.n	800c93c <USB_HC_Init+0x13c>
 800c83e:	a201      	add	r2, pc, #4	; (adr r2, 800c844 <USB_HC_Init+0x44>)
 800c840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c844:	0800c855 	.word	0x0800c855
 800c848:	0800c8ff 	.word	0x0800c8ff
 800c84c:	0800c855 	.word	0x0800c855
 800c850:	0800c8c1 	.word	0x0800c8c1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c854:	78fb      	ldrb	r3, [r7, #3]
 800c856:	015a      	lsls	r2, r3, #5
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	4413      	add	r3, r2
 800c85c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c860:	461a      	mov	r2, r3
 800c862:	f240 439d 	movw	r3, #1181	; 0x49d
 800c866:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c868:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	da10      	bge.n	800c892 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c870:	78fb      	ldrb	r3, [r7, #3]
 800c872:	015a      	lsls	r2, r3, #5
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	4413      	add	r3, r2
 800c878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c87c:	68db      	ldr	r3, [r3, #12]
 800c87e:	78fa      	ldrb	r2, [r7, #3]
 800c880:	0151      	lsls	r1, r2, #5
 800c882:	693a      	ldr	r2, [r7, #16]
 800c884:	440a      	add	r2, r1
 800c886:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c88a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c88e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800c890:	e057      	b.n	800c942 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d051      	beq.n	800c942 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800c89e:	78fb      	ldrb	r3, [r7, #3]
 800c8a0:	015a      	lsls	r2, r3, #5
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	4413      	add	r3, r2
 800c8a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8aa:	68db      	ldr	r3, [r3, #12]
 800c8ac:	78fa      	ldrb	r2, [r7, #3]
 800c8ae:	0151      	lsls	r1, r2, #5
 800c8b0:	693a      	ldr	r2, [r7, #16]
 800c8b2:	440a      	add	r2, r1
 800c8b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c8b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c8bc:	60d3      	str	r3, [r2, #12]
      break;
 800c8be:	e040      	b.n	800c942 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c8c0:	78fb      	ldrb	r3, [r7, #3]
 800c8c2:	015a      	lsls	r2, r3, #5
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	4413      	add	r3, r2
 800c8c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8cc:	461a      	mov	r2, r3
 800c8ce:	f240 639d 	movw	r3, #1693	; 0x69d
 800c8d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c8d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	da34      	bge.n	800c946 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c8dc:	78fb      	ldrb	r3, [r7, #3]
 800c8de:	015a      	lsls	r2, r3, #5
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	4413      	add	r3, r2
 800c8e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	78fa      	ldrb	r2, [r7, #3]
 800c8ec:	0151      	lsls	r1, r2, #5
 800c8ee:	693a      	ldr	r2, [r7, #16]
 800c8f0:	440a      	add	r2, r1
 800c8f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c8f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c8fa:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c8fc:	e023      	b.n	800c946 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c8fe:	78fb      	ldrb	r3, [r7, #3]
 800c900:	015a      	lsls	r2, r3, #5
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	4413      	add	r3, r2
 800c906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c90a:	461a      	mov	r2, r3
 800c90c:	f240 2325 	movw	r3, #549	; 0x225
 800c910:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c912:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c916:	2b00      	cmp	r3, #0
 800c918:	da17      	bge.n	800c94a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c91a:	78fb      	ldrb	r3, [r7, #3]
 800c91c:	015a      	lsls	r2, r3, #5
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	4413      	add	r3, r2
 800c922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c926:	68db      	ldr	r3, [r3, #12]
 800c928:	78fa      	ldrb	r2, [r7, #3]
 800c92a:	0151      	lsls	r1, r2, #5
 800c92c:	693a      	ldr	r2, [r7, #16]
 800c92e:	440a      	add	r2, r1
 800c930:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c934:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c938:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c93a:	e006      	b.n	800c94a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800c93c:	2301      	movs	r3, #1
 800c93e:	77fb      	strb	r3, [r7, #31]
      break;
 800c940:	e004      	b.n	800c94c <USB_HC_Init+0x14c>
      break;
 800c942:	bf00      	nop
 800c944:	e002      	b.n	800c94c <USB_HC_Init+0x14c>
      break;
 800c946:	bf00      	nop
 800c948:	e000      	b.n	800c94c <USB_HC_Init+0x14c>
      break;
 800c94a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c952:	699a      	ldr	r2, [r3, #24]
 800c954:	78fb      	ldrb	r3, [r7, #3]
 800c956:	f003 030f 	and.w	r3, r3, #15
 800c95a:	2101      	movs	r1, #1
 800c95c:	fa01 f303 	lsl.w	r3, r1, r3
 800c960:	6939      	ldr	r1, [r7, #16]
 800c962:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c966:	4313      	orrs	r3, r2
 800c968:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	699b      	ldr	r3, [r3, #24]
 800c96e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c976:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	da03      	bge.n	800c986 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c97e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c982:	61bb      	str	r3, [r7, #24]
 800c984:	e001      	b.n	800c98a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800c986:	2300      	movs	r3, #0
 800c988:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f7ff ff0f 	bl	800c7ae <USB_GetHostSpeed>
 800c990:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800c992:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c996:	2b02      	cmp	r3, #2
 800c998:	d106      	bne.n	800c9a8 <USB_HC_Init+0x1a8>
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	2b02      	cmp	r3, #2
 800c99e:	d003      	beq.n	800c9a8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c9a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c9a4:	617b      	str	r3, [r7, #20]
 800c9a6:	e001      	b.n	800c9ac <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c9ac:	787b      	ldrb	r3, [r7, #1]
 800c9ae:	059b      	lsls	r3, r3, #22
 800c9b0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c9b4:	78bb      	ldrb	r3, [r7, #2]
 800c9b6:	02db      	lsls	r3, r3, #11
 800c9b8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c9bc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c9be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c9c2:	049b      	lsls	r3, r3, #18
 800c9c4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c9c8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c9ca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c9cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c9d0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c9d2:	69bb      	ldr	r3, [r7, #24]
 800c9d4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c9d6:	78fb      	ldrb	r3, [r7, #3]
 800c9d8:	0159      	lsls	r1, r3, #5
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	440b      	add	r3, r1
 800c9de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9e2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c9e8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800c9ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c9ee:	2b03      	cmp	r3, #3
 800c9f0:	d10f      	bne.n	800ca12 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800c9f2:	78fb      	ldrb	r3, [r7, #3]
 800c9f4:	015a      	lsls	r2, r3, #5
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	4413      	add	r3, r2
 800c9fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	78fa      	ldrb	r2, [r7, #3]
 800ca02:	0151      	lsls	r1, r2, #5
 800ca04:	693a      	ldr	r2, [r7, #16]
 800ca06:	440a      	add	r2, r1
 800ca08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca10:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800ca12:	7ffb      	ldrb	r3, [r7, #31]
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3720      	adds	r7, #32
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b08c      	sub	sp, #48	; 0x30
 800ca20:	af02      	add	r7, sp, #8
 800ca22:	60f8      	str	r0, [r7, #12]
 800ca24:	60b9      	str	r1, [r7, #8]
 800ca26:	4613      	mov	r3, r2
 800ca28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	785b      	ldrb	r3, [r3, #1]
 800ca32:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800ca34:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ca38:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d02d      	beq.n	800caa2 <USB_HC_StartXfer+0x86>
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	791b      	ldrb	r3, [r3, #4]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d129      	bne.n	800caa2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800ca4e:	79fb      	ldrb	r3, [r7, #7]
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d117      	bne.n	800ca84 <USB_HC_StartXfer+0x68>
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	79db      	ldrb	r3, [r3, #7]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d003      	beq.n	800ca64 <USB_HC_StartXfer+0x48>
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	79db      	ldrb	r3, [r3, #7]
 800ca60:	2b02      	cmp	r3, #2
 800ca62:	d10f      	bne.n	800ca84 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800ca64:	69fb      	ldr	r3, [r7, #28]
 800ca66:	015a      	lsls	r2, r3, #5
 800ca68:	6a3b      	ldr	r3, [r7, #32]
 800ca6a:	4413      	add	r3, r2
 800ca6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca70:	68db      	ldr	r3, [r3, #12]
 800ca72:	69fa      	ldr	r2, [r7, #28]
 800ca74:	0151      	lsls	r1, r2, #5
 800ca76:	6a3a      	ldr	r2, [r7, #32]
 800ca78:	440a      	add	r2, r1
 800ca7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca82:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800ca84:	79fb      	ldrb	r3, [r7, #7]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d10b      	bne.n	800caa2 <USB_HC_StartXfer+0x86>
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	795b      	ldrb	r3, [r3, #5]
 800ca8e:	2b01      	cmp	r3, #1
 800ca90:	d107      	bne.n	800caa2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	785b      	ldrb	r3, [r3, #1]
 800ca96:	4619      	mov	r1, r3
 800ca98:	68f8      	ldr	r0, [r7, #12]
 800ca9a:	f000 fa2f 	bl	800cefc <USB_DoPing>
      return HAL_OK;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	e0f8      	b.n	800cc94 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	695b      	ldr	r3, [r3, #20]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d018      	beq.n	800cadc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	695b      	ldr	r3, [r3, #20]
 800caae:	68ba      	ldr	r2, [r7, #8]
 800cab0:	8912      	ldrh	r2, [r2, #8]
 800cab2:	4413      	add	r3, r2
 800cab4:	3b01      	subs	r3, #1
 800cab6:	68ba      	ldr	r2, [r7, #8]
 800cab8:	8912      	ldrh	r2, [r2, #8]
 800caba:	fbb3 f3f2 	udiv	r3, r3, r2
 800cabe:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800cac0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cac2:	8b7b      	ldrh	r3, [r7, #26]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d90b      	bls.n	800cae0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800cac8:	8b7b      	ldrh	r3, [r7, #26]
 800caca:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800cacc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cace:	68ba      	ldr	r2, [r7, #8]
 800cad0:	8912      	ldrh	r2, [r2, #8]
 800cad2:	fb02 f203 	mul.w	r2, r2, r3
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	611a      	str	r2, [r3, #16]
 800cada:	e001      	b.n	800cae0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800cadc:	2301      	movs	r3, #1
 800cade:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	78db      	ldrb	r3, [r3, #3]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d007      	beq.n	800caf8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800cae8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800caea:	68ba      	ldr	r2, [r7, #8]
 800caec:	8912      	ldrh	r2, [r2, #8]
 800caee:	fb02 f203 	mul.w	r2, r2, r3
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	611a      	str	r2, [r3, #16]
 800caf6:	e003      	b.n	800cb00 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	695a      	ldr	r2, [r3, #20]
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	691b      	ldr	r3, [r3, #16]
 800cb04:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cb08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cb0a:	04d9      	lsls	r1, r3, #19
 800cb0c:	4b63      	ldr	r3, [pc, #396]	; (800cc9c <USB_HC_StartXfer+0x280>)
 800cb0e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cb10:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	7a9b      	ldrb	r3, [r3, #10]
 800cb16:	075b      	lsls	r3, r3, #29
 800cb18:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cb1c:	69f9      	ldr	r1, [r7, #28]
 800cb1e:	0148      	lsls	r0, r1, #5
 800cb20:	6a39      	ldr	r1, [r7, #32]
 800cb22:	4401      	add	r1, r0
 800cb24:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cb28:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cb2a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800cb2c:	79fb      	ldrb	r3, [r7, #7]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d009      	beq.n	800cb46 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	68d9      	ldr	r1, [r3, #12]
 800cb36:	69fb      	ldr	r3, [r7, #28]
 800cb38:	015a      	lsls	r2, r3, #5
 800cb3a:	6a3b      	ldr	r3, [r7, #32]
 800cb3c:	4413      	add	r3, r2
 800cb3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb42:	460a      	mov	r2, r1
 800cb44:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800cb46:	6a3b      	ldr	r3, [r7, #32]
 800cb48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb4c:	689b      	ldr	r3, [r3, #8]
 800cb4e:	f003 0301 	and.w	r3, r3, #1
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	bf0c      	ite	eq
 800cb56:	2301      	moveq	r3, #1
 800cb58:	2300      	movne	r3, #0
 800cb5a:	b2db      	uxtb	r3, r3
 800cb5c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800cb5e:	69fb      	ldr	r3, [r7, #28]
 800cb60:	015a      	lsls	r2, r3, #5
 800cb62:	6a3b      	ldr	r3, [r7, #32]
 800cb64:	4413      	add	r3, r2
 800cb66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	69fa      	ldr	r2, [r7, #28]
 800cb6e:	0151      	lsls	r1, r2, #5
 800cb70:	6a3a      	ldr	r2, [r7, #32]
 800cb72:	440a      	add	r2, r1
 800cb74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cb78:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cb7c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800cb7e:	69fb      	ldr	r3, [r7, #28]
 800cb80:	015a      	lsls	r2, r3, #5
 800cb82:	6a3b      	ldr	r3, [r7, #32]
 800cb84:	4413      	add	r3, r2
 800cb86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb8a:	681a      	ldr	r2, [r3, #0]
 800cb8c:	7e7b      	ldrb	r3, [r7, #25]
 800cb8e:	075b      	lsls	r3, r3, #29
 800cb90:	69f9      	ldr	r1, [r7, #28]
 800cb92:	0148      	lsls	r0, r1, #5
 800cb94:	6a39      	ldr	r1, [r7, #32]
 800cb96:	4401      	add	r1, r0
 800cb98:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800cb9c:	4313      	orrs	r3, r2
 800cb9e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800cba0:	69fb      	ldr	r3, [r7, #28]
 800cba2:	015a      	lsls	r2, r3, #5
 800cba4:	6a3b      	ldr	r3, [r7, #32]
 800cba6:	4413      	add	r3, r2
 800cba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cbb6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	78db      	ldrb	r3, [r3, #3]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d004      	beq.n	800cbca <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbc6:	613b      	str	r3, [r7, #16]
 800cbc8:	e003      	b.n	800cbd2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cbd0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cbd8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800cbda:	69fb      	ldr	r3, [r7, #28]
 800cbdc:	015a      	lsls	r2, r3, #5
 800cbde:	6a3b      	ldr	r3, [r7, #32]
 800cbe0:	4413      	add	r3, r2
 800cbe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800cbec:	79fb      	ldrb	r3, [r7, #7]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d001      	beq.n	800cbf6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	e04e      	b.n	800cc94 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	78db      	ldrb	r3, [r3, #3]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d149      	bne.n	800cc92 <USB_HC_StartXfer+0x276>
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	695b      	ldr	r3, [r3, #20]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d045      	beq.n	800cc92 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	79db      	ldrb	r3, [r3, #7]
 800cc0a:	2b03      	cmp	r3, #3
 800cc0c:	d830      	bhi.n	800cc70 <USB_HC_StartXfer+0x254>
 800cc0e:	a201      	add	r2, pc, #4	; (adr r2, 800cc14 <USB_HC_StartXfer+0x1f8>)
 800cc10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc14:	0800cc25 	.word	0x0800cc25
 800cc18:	0800cc49 	.word	0x0800cc49
 800cc1c:	0800cc25 	.word	0x0800cc25
 800cc20:	0800cc49 	.word	0x0800cc49
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	695b      	ldr	r3, [r3, #20]
 800cc28:	3303      	adds	r3, #3
 800cc2a:	089b      	lsrs	r3, r3, #2
 800cc2c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800cc2e:	8afa      	ldrh	r2, [r7, #22]
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc34:	b29b      	uxth	r3, r3
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d91c      	bls.n	800cc74 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	699b      	ldr	r3, [r3, #24]
 800cc3e:	f043 0220 	orr.w	r2, r3, #32
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	619a      	str	r2, [r3, #24]
        }
        break;
 800cc46:	e015      	b.n	800cc74 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	695b      	ldr	r3, [r3, #20]
 800cc4c:	3303      	adds	r3, #3
 800cc4e:	089b      	lsrs	r3, r3, #2
 800cc50:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800cc52:	8afa      	ldrh	r2, [r7, #22]
 800cc54:	6a3b      	ldr	r3, [r7, #32]
 800cc56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc5a:	691b      	ldr	r3, [r3, #16]
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d90a      	bls.n	800cc78 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	699b      	ldr	r3, [r3, #24]
 800cc66:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	619a      	str	r2, [r3, #24]
        }
        break;
 800cc6e:	e003      	b.n	800cc78 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800cc70:	bf00      	nop
 800cc72:	e002      	b.n	800cc7a <USB_HC_StartXfer+0x25e>
        break;
 800cc74:	bf00      	nop
 800cc76:	e000      	b.n	800cc7a <USB_HC_StartXfer+0x25e>
        break;
 800cc78:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	68d9      	ldr	r1, [r3, #12]
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	785a      	ldrb	r2, [r3, #1]
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	695b      	ldr	r3, [r3, #20]
 800cc86:	b29b      	uxth	r3, r3
 800cc88:	2000      	movs	r0, #0
 800cc8a:	9000      	str	r0, [sp, #0]
 800cc8c:	68f8      	ldr	r0, [r7, #12]
 800cc8e:	f7ff fb81 	bl	800c394 <USB_WritePacket>
  }

  return HAL_OK;
 800cc92:	2300      	movs	r3, #0
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3728      	adds	r7, #40	; 0x28
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}
 800cc9c:	1ff80000 	.word	0x1ff80000

0800cca0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b085      	sub	sp, #20
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccb2:	695b      	ldr	r3, [r3, #20]
 800ccb4:	b29b      	uxth	r3, r3
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3714      	adds	r7, #20
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr

0800ccc2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ccc2:	b480      	push	{r7}
 800ccc4:	b089      	sub	sp, #36	; 0x24
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	6078      	str	r0, [r7, #4]
 800ccca:	460b      	mov	r3, r1
 800cccc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800ccd2:	78fb      	ldrb	r3, [r7, #3]
 800ccd4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	015a      	lsls	r2, r3, #5
 800ccde:	69bb      	ldr	r3, [r7, #24]
 800cce0:	4413      	add	r3, r2
 800cce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	0c9b      	lsrs	r3, r3, #18
 800ccea:	f003 0303 	and.w	r3, r3, #3
 800ccee:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	015a      	lsls	r2, r3, #5
 800ccf4:	69bb      	ldr	r3, [r7, #24]
 800ccf6:	4413      	add	r3, r2
 800ccf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	0fdb      	lsrs	r3, r3, #31
 800cd00:	f003 0301 	and.w	r3, r3, #1
 800cd04:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	689b      	ldr	r3, [r3, #8]
 800cd0a:	f003 0320 	and.w	r3, r3, #32
 800cd0e:	2b20      	cmp	r3, #32
 800cd10:	d104      	bne.n	800cd1c <USB_HC_Halt+0x5a>
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d101      	bne.n	800cd1c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	e0e8      	b.n	800ceee <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d002      	beq.n	800cd28 <USB_HC_Halt+0x66>
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	2b02      	cmp	r3, #2
 800cd26:	d173      	bne.n	800ce10 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	015a      	lsls	r2, r3, #5
 800cd2c:	69bb      	ldr	r3, [r7, #24]
 800cd2e:	4413      	add	r3, r2
 800cd30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	697a      	ldr	r2, [r7, #20]
 800cd38:	0151      	lsls	r1, r2, #5
 800cd3a:	69ba      	ldr	r2, [r7, #24]
 800cd3c:	440a      	add	r2, r1
 800cd3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cd42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cd46:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	689b      	ldr	r3, [r3, #8]
 800cd4c:	f003 0320 	and.w	r3, r3, #32
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	f040 80cb 	bne.w	800ceec <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d143      	bne.n	800cdea <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	015a      	lsls	r2, r3, #5
 800cd66:	69bb      	ldr	r3, [r7, #24]
 800cd68:	4413      	add	r3, r2
 800cd6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	697a      	ldr	r2, [r7, #20]
 800cd72:	0151      	lsls	r1, r2, #5
 800cd74:	69ba      	ldr	r2, [r7, #24]
 800cd76:	440a      	add	r2, r1
 800cd78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cd7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd80:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	015a      	lsls	r2, r3, #5
 800cd86:	69bb      	ldr	r3, [r7, #24]
 800cd88:	4413      	add	r3, r2
 800cd8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	697a      	ldr	r2, [r7, #20]
 800cd92:	0151      	lsls	r1, r2, #5
 800cd94:	69ba      	ldr	r2, [r7, #24]
 800cd96:	440a      	add	r2, r1
 800cd98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cd9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cda0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	015a      	lsls	r2, r3, #5
 800cda6:	69bb      	ldr	r3, [r7, #24]
 800cda8:	4413      	add	r3, r2
 800cdaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	697a      	ldr	r2, [r7, #20]
 800cdb2:	0151      	lsls	r1, r2, #5
 800cdb4:	69ba      	ldr	r2, [r7, #24]
 800cdb6:	440a      	add	r2, r1
 800cdb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cdbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cdc0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800cdc2:	69fb      	ldr	r3, [r7, #28]
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	61fb      	str	r3, [r7, #28]
 800cdc8:	69fb      	ldr	r3, [r7, #28]
 800cdca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cdce:	d81d      	bhi.n	800ce0c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	015a      	lsls	r2, r3, #5
 800cdd4:	69bb      	ldr	r3, [r7, #24]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cde2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cde6:	d0ec      	beq.n	800cdc2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cde8:	e080      	b.n	800ceec <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	015a      	lsls	r2, r3, #5
 800cdee:	69bb      	ldr	r3, [r7, #24]
 800cdf0:	4413      	add	r3, r2
 800cdf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	697a      	ldr	r2, [r7, #20]
 800cdfa:	0151      	lsls	r1, r2, #5
 800cdfc:	69ba      	ldr	r2, [r7, #24]
 800cdfe:	440a      	add	r2, r1
 800ce00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ce08:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ce0a:	e06f      	b.n	800ceec <USB_HC_Halt+0x22a>
            break;
 800ce0c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ce0e:	e06d      	b.n	800ceec <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	015a      	lsls	r2, r3, #5
 800ce14:	69bb      	ldr	r3, [r7, #24]
 800ce16:	4413      	add	r3, r2
 800ce18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	697a      	ldr	r2, [r7, #20]
 800ce20:	0151      	lsls	r1, r2, #5
 800ce22:	69ba      	ldr	r2, [r7, #24]
 800ce24:	440a      	add	r2, r1
 800ce26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ce2e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ce30:	69bb      	ldr	r3, [r7, #24]
 800ce32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce36:	691b      	ldr	r3, [r3, #16]
 800ce38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d143      	bne.n	800cec8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	015a      	lsls	r2, r3, #5
 800ce44:	69bb      	ldr	r3, [r7, #24]
 800ce46:	4413      	add	r3, r2
 800ce48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	697a      	ldr	r2, [r7, #20]
 800ce50:	0151      	lsls	r1, r2, #5
 800ce52:	69ba      	ldr	r2, [r7, #24]
 800ce54:	440a      	add	r2, r1
 800ce56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce5e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	015a      	lsls	r2, r3, #5
 800ce64:	69bb      	ldr	r3, [r7, #24]
 800ce66:	4413      	add	r3, r2
 800ce68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	697a      	ldr	r2, [r7, #20]
 800ce70:	0151      	lsls	r1, r2, #5
 800ce72:	69ba      	ldr	r2, [r7, #24]
 800ce74:	440a      	add	r2, r1
 800ce76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ce7e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	015a      	lsls	r2, r3, #5
 800ce84:	69bb      	ldr	r3, [r7, #24]
 800ce86:	4413      	add	r3, r2
 800ce88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	697a      	ldr	r2, [r7, #20]
 800ce90:	0151      	lsls	r1, r2, #5
 800ce92:	69ba      	ldr	r2, [r7, #24]
 800ce94:	440a      	add	r2, r1
 800ce96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ce9e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800cea0:	69fb      	ldr	r3, [r7, #28]
 800cea2:	3301      	adds	r3, #1
 800cea4:	61fb      	str	r3, [r7, #28]
 800cea6:	69fb      	ldr	r3, [r7, #28]
 800cea8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ceac:	d81d      	bhi.n	800ceea <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	015a      	lsls	r2, r3, #5
 800ceb2:	69bb      	ldr	r3, [r7, #24]
 800ceb4:	4413      	add	r3, r2
 800ceb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cec0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cec4:	d0ec      	beq.n	800cea0 <USB_HC_Halt+0x1de>
 800cec6:	e011      	b.n	800ceec <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	015a      	lsls	r2, r3, #5
 800cecc:	69bb      	ldr	r3, [r7, #24]
 800cece:	4413      	add	r3, r2
 800ced0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	697a      	ldr	r2, [r7, #20]
 800ced8:	0151      	lsls	r1, r2, #5
 800ceda:	69ba      	ldr	r2, [r7, #24]
 800cedc:	440a      	add	r2, r1
 800cede:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cee2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cee6:	6013      	str	r3, [r2, #0]
 800cee8:	e000      	b.n	800ceec <USB_HC_Halt+0x22a>
          break;
 800ceea:	bf00      	nop
    }
  }

  return HAL_OK;
 800ceec:	2300      	movs	r3, #0
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3724      	adds	r7, #36	; 0x24
 800cef2:	46bd      	mov	sp, r7
 800cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef8:	4770      	bx	lr
	...

0800cefc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b087      	sub	sp, #28
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	460b      	mov	r3, r1
 800cf06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800cf0c:	78fb      	ldrb	r3, [r7, #3]
 800cf0e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800cf10:	2301      	movs	r3, #1
 800cf12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	04da      	lsls	r2, r3, #19
 800cf18:	4b15      	ldr	r3, [pc, #84]	; (800cf70 <USB_DoPing+0x74>)
 800cf1a:	4013      	ands	r3, r2
 800cf1c:	693a      	ldr	r2, [r7, #16]
 800cf1e:	0151      	lsls	r1, r2, #5
 800cf20:	697a      	ldr	r2, [r7, #20]
 800cf22:	440a      	add	r2, r1
 800cf24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cf2c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	015a      	lsls	r2, r3, #5
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	4413      	add	r3, r2
 800cf36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cf44:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cf4c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	015a      	lsls	r2, r3, #5
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	4413      	add	r3, r2
 800cf56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf5a:	461a      	mov	r2, r3
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800cf60:	2300      	movs	r3, #0
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	371c      	adds	r7, #28
 800cf66:	46bd      	mov	sp, r7
 800cf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6c:	4770      	bx	lr
 800cf6e:	bf00      	nop
 800cf70:	1ff80000 	.word	0x1ff80000

0800cf74 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b086      	sub	sp, #24
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800cf80:	2300      	movs	r3, #0
 800cf82:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f7ff f981 	bl	800c28c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800cf8a:	2110      	movs	r1, #16
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f7ff f9b9 	bl	800c304 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f7ff f9dc 	bl	800c350 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800cf98:	2300      	movs	r3, #0
 800cf9a:	613b      	str	r3, [r7, #16]
 800cf9c:	e01f      	b.n	800cfde <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	015a      	lsls	r2, r3, #5
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	4413      	add	r3, r2
 800cfa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cfb4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cfbc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cfc4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800cfc6:	693b      	ldr	r3, [r7, #16]
 800cfc8:	015a      	lsls	r2, r3, #5
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	4413      	add	r3, r2
 800cfce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfd2:	461a      	mov	r2, r3
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	3301      	adds	r3, #1
 800cfdc:	613b      	str	r3, [r7, #16]
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	2b0f      	cmp	r3, #15
 800cfe2:	d9dc      	bls.n	800cf9e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	613b      	str	r3, [r7, #16]
 800cfe8:	e034      	b.n	800d054 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	015a      	lsls	r2, r3, #5
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	4413      	add	r3, r2
 800cff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d000:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d008:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d010:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	015a      	lsls	r2, r3, #5
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	4413      	add	r3, r2
 800d01a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d01e:	461a      	mov	r2, r3
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	3301      	adds	r3, #1
 800d028:	617b      	str	r3, [r7, #20]
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d030:	d80c      	bhi.n	800d04c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	015a      	lsls	r2, r3, #5
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	4413      	add	r3, r2
 800d03a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d044:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d048:	d0ec      	beq.n	800d024 <USB_StopHost+0xb0>
 800d04a:	e000      	b.n	800d04e <USB_StopHost+0xda>
        break;
 800d04c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	3301      	adds	r3, #1
 800d052:	613b      	str	r3, [r7, #16]
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	2b0f      	cmp	r3, #15
 800d058:	d9c7      	bls.n	800cfea <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d060:	461a      	mov	r2, r3
 800d062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d066:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d06e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f7ff f8fa 	bl	800c26a <USB_EnableGlobalInt>

  return HAL_OK;
 800d076:	2300      	movs	r3, #0
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3718      	adds	r7, #24
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}

0800d080 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800d080:	b590      	push	{r4, r7, lr}
 800d082:	b089      	sub	sp, #36	; 0x24
 800d084:	af04      	add	r7, sp, #16
 800d086:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800d088:	2301      	movs	r3, #1
 800d08a:	2202      	movs	r2, #2
 800d08c:	2102      	movs	r1, #2
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f000 fc66 	bl	800d960 <USBH_FindInterface>
 800d094:	4603      	mov	r3, r0
 800d096:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d098:	7bfb      	ldrb	r3, [r7, #15]
 800d09a:	2bff      	cmp	r3, #255	; 0xff
 800d09c:	d002      	beq.n	800d0a4 <USBH_CDC_InterfaceInit+0x24>
 800d09e:	7bfb      	ldrb	r3, [r7, #15]
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	d901      	bls.n	800d0a8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d0a4:	2302      	movs	r3, #2
 800d0a6:	e13d      	b.n	800d324 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800d0a8:	7bfb      	ldrb	r3, [r7, #15]
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f000 fc3b 	bl	800d928 <USBH_SelectInterface>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800d0b6:	7bbb      	ldrb	r3, [r7, #14]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d001      	beq.n	800d0c0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800d0bc:	2302      	movs	r3, #2
 800d0be:	e131      	b.n	800d324 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800d0c6:	2050      	movs	r0, #80	; 0x50
 800d0c8:	f002 fa00 	bl	800f4cc <malloc>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d0d6:	69db      	ldr	r3, [r3, #28]
 800d0d8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d101      	bne.n	800d0e4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800d0e0:	2302      	movs	r3, #2
 800d0e2:	e11f      	b.n	800d324 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800d0e4:	2250      	movs	r2, #80	; 0x50
 800d0e6:	2100      	movs	r1, #0
 800d0e8:	68b8      	ldr	r0, [r7, #8]
 800d0ea:	f002 fa0d 	bl	800f508 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800d0ee:	7bfb      	ldrb	r3, [r7, #15]
 800d0f0:	687a      	ldr	r2, [r7, #4]
 800d0f2:	211a      	movs	r1, #26
 800d0f4:	fb01 f303 	mul.w	r3, r1, r3
 800d0f8:	4413      	add	r3, r2
 800d0fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	b25b      	sxtb	r3, r3
 800d102:	2b00      	cmp	r3, #0
 800d104:	da15      	bge.n	800d132 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d106:	7bfb      	ldrb	r3, [r7, #15]
 800d108:	687a      	ldr	r2, [r7, #4]
 800d10a:	211a      	movs	r1, #26
 800d10c:	fb01 f303 	mul.w	r3, r1, r3
 800d110:	4413      	add	r3, r2
 800d112:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d116:	781a      	ldrb	r2, [r3, #0]
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d11c:	7bfb      	ldrb	r3, [r7, #15]
 800d11e:	687a      	ldr	r2, [r7, #4]
 800d120:	211a      	movs	r1, #26
 800d122:	fb01 f303 	mul.w	r3, r1, r3
 800d126:	4413      	add	r3, r2
 800d128:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d12c:	881a      	ldrh	r2, [r3, #0]
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	785b      	ldrb	r3, [r3, #1]
 800d136:	4619      	mov	r1, r3
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f001 fe32 	bl	800eda2 <USBH_AllocPipe>
 800d13e:	4603      	mov	r3, r0
 800d140:	461a      	mov	r2, r3
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	7819      	ldrb	r1, [r3, #0]
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	7858      	ldrb	r0, [r3, #1]
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d15a:	68ba      	ldr	r2, [r7, #8]
 800d15c:	8952      	ldrh	r2, [r2, #10]
 800d15e:	9202      	str	r2, [sp, #8]
 800d160:	2203      	movs	r2, #3
 800d162:	9201      	str	r2, [sp, #4]
 800d164:	9300      	str	r3, [sp, #0]
 800d166:	4623      	mov	r3, r4
 800d168:	4602      	mov	r2, r0
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f001 fdea 	bl	800ed44 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	2200      	movs	r2, #0
 800d176:	4619      	mov	r1, r3
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f002 f8f9 	bl	800f370 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800d17e:	2300      	movs	r3, #0
 800d180:	2200      	movs	r2, #0
 800d182:	210a      	movs	r1, #10
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f000 fbeb 	bl	800d960 <USBH_FindInterface>
 800d18a:	4603      	mov	r3, r0
 800d18c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d18e:	7bfb      	ldrb	r3, [r7, #15]
 800d190:	2bff      	cmp	r3, #255	; 0xff
 800d192:	d002      	beq.n	800d19a <USBH_CDC_InterfaceInit+0x11a>
 800d194:	7bfb      	ldrb	r3, [r7, #15]
 800d196:	2b01      	cmp	r3, #1
 800d198:	d901      	bls.n	800d19e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d19a:	2302      	movs	r3, #2
 800d19c:	e0c2      	b.n	800d324 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800d19e:	7bfb      	ldrb	r3, [r7, #15]
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	211a      	movs	r1, #26
 800d1a4:	fb01 f303 	mul.w	r3, r1, r3
 800d1a8:	4413      	add	r3, r2
 800d1aa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	b25b      	sxtb	r3, r3
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	da16      	bge.n	800d1e4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d1b6:	7bfb      	ldrb	r3, [r7, #15]
 800d1b8:	687a      	ldr	r2, [r7, #4]
 800d1ba:	211a      	movs	r1, #26
 800d1bc:	fb01 f303 	mul.w	r3, r1, r3
 800d1c0:	4413      	add	r3, r2
 800d1c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d1c6:	781a      	ldrb	r2, [r3, #0]
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d1cc:	7bfb      	ldrb	r3, [r7, #15]
 800d1ce:	687a      	ldr	r2, [r7, #4]
 800d1d0:	211a      	movs	r1, #26
 800d1d2:	fb01 f303 	mul.w	r3, r1, r3
 800d1d6:	4413      	add	r3, r2
 800d1d8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d1dc:	881a      	ldrh	r2, [r3, #0]
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	835a      	strh	r2, [r3, #26]
 800d1e2:	e015      	b.n	800d210 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d1e4:	7bfb      	ldrb	r3, [r7, #15]
 800d1e6:	687a      	ldr	r2, [r7, #4]
 800d1e8:	211a      	movs	r1, #26
 800d1ea:	fb01 f303 	mul.w	r3, r1, r3
 800d1ee:	4413      	add	r3, r2
 800d1f0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d1f4:	781a      	ldrb	r2, [r3, #0]
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d1fa:	7bfb      	ldrb	r3, [r7, #15]
 800d1fc:	687a      	ldr	r2, [r7, #4]
 800d1fe:	211a      	movs	r1, #26
 800d200:	fb01 f303 	mul.w	r3, r1, r3
 800d204:	4413      	add	r3, r2
 800d206:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d20a:	881a      	ldrh	r2, [r3, #0]
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800d210:	7bfb      	ldrb	r3, [r7, #15]
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	211a      	movs	r1, #26
 800d216:	fb01 f303 	mul.w	r3, r1, r3
 800d21a:	4413      	add	r3, r2
 800d21c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	b25b      	sxtb	r3, r3
 800d224:	2b00      	cmp	r3, #0
 800d226:	da16      	bge.n	800d256 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d228:	7bfb      	ldrb	r3, [r7, #15]
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	211a      	movs	r1, #26
 800d22e:	fb01 f303 	mul.w	r3, r1, r3
 800d232:	4413      	add	r3, r2
 800d234:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d238:	781a      	ldrb	r2, [r3, #0]
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d23e:	7bfb      	ldrb	r3, [r7, #15]
 800d240:	687a      	ldr	r2, [r7, #4]
 800d242:	211a      	movs	r1, #26
 800d244:	fb01 f303 	mul.w	r3, r1, r3
 800d248:	4413      	add	r3, r2
 800d24a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800d24e:	881a      	ldrh	r2, [r3, #0]
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	835a      	strh	r2, [r3, #26]
 800d254:	e015      	b.n	800d282 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d256:	7bfb      	ldrb	r3, [r7, #15]
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	211a      	movs	r1, #26
 800d25c:	fb01 f303 	mul.w	r3, r1, r3
 800d260:	4413      	add	r3, r2
 800d262:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d266:	781a      	ldrb	r2, [r3, #0]
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d26c:	7bfb      	ldrb	r3, [r7, #15]
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	211a      	movs	r1, #26
 800d272:	fb01 f303 	mul.w	r3, r1, r3
 800d276:	4413      	add	r3, r2
 800d278:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800d27c:	881a      	ldrh	r2, [r3, #0]
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	7b9b      	ldrb	r3, [r3, #14]
 800d286:	4619      	mov	r1, r3
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f001 fd8a 	bl	800eda2 <USBH_AllocPipe>
 800d28e:	4603      	mov	r3, r0
 800d290:	461a      	mov	r2, r3
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	7bdb      	ldrb	r3, [r3, #15]
 800d29a:	4619      	mov	r1, r3
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f001 fd80 	bl	800eda2 <USBH_AllocPipe>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	461a      	mov	r2, r3
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	7b59      	ldrb	r1, [r3, #13]
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	7b98      	ldrb	r0, [r3, #14]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d2be:	68ba      	ldr	r2, [r7, #8]
 800d2c0:	8b12      	ldrh	r2, [r2, #24]
 800d2c2:	9202      	str	r2, [sp, #8]
 800d2c4:	2202      	movs	r2, #2
 800d2c6:	9201      	str	r2, [sp, #4]
 800d2c8:	9300      	str	r3, [sp, #0]
 800d2ca:	4623      	mov	r3, r4
 800d2cc:	4602      	mov	r2, r0
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f001 fd38 	bl	800ed44 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	7b19      	ldrb	r1, [r3, #12]
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	7bd8      	ldrb	r0, [r3, #15]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d2e8:	68ba      	ldr	r2, [r7, #8]
 800d2ea:	8b52      	ldrh	r2, [r2, #26]
 800d2ec:	9202      	str	r2, [sp, #8]
 800d2ee:	2202      	movs	r2, #2
 800d2f0:	9201      	str	r2, [sp, #4]
 800d2f2:	9300      	str	r3, [sp, #0]
 800d2f4:	4623      	mov	r3, r4
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f001 fd23 	bl	800ed44 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	2200      	movs	r2, #0
 800d302:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	7b5b      	ldrb	r3, [r3, #13]
 800d30a:	2200      	movs	r2, #0
 800d30c:	4619      	mov	r1, r3
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f002 f82e 	bl	800f370 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	7b1b      	ldrb	r3, [r3, #12]
 800d318:	2200      	movs	r2, #0
 800d31a:	4619      	mov	r1, r3
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f002 f827 	bl	800f370 <USBH_LL_SetToggle>

  return USBH_OK;
 800d322:	2300      	movs	r3, #0
}
 800d324:	4618      	mov	r0, r3
 800d326:	3714      	adds	r7, #20
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd90      	pop	{r4, r7, pc}

0800d32c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b084      	sub	sp, #16
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d33a:	69db      	ldr	r3, [r3, #28]
 800d33c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d00e      	beq.n	800d364 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	781b      	ldrb	r3, [r3, #0]
 800d34a:	4619      	mov	r1, r3
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f001 fd18 	bl	800ed82 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	781b      	ldrb	r3, [r3, #0]
 800d356:	4619      	mov	r1, r3
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f001 fd43 	bl	800ede4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	2200      	movs	r2, #0
 800d362:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	7b1b      	ldrb	r3, [r3, #12]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d00e      	beq.n	800d38a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	7b1b      	ldrb	r3, [r3, #12]
 800d370:	4619      	mov	r1, r3
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f001 fd05 	bl	800ed82 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	7b1b      	ldrb	r3, [r3, #12]
 800d37c:	4619      	mov	r1, r3
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f001 fd30 	bl	800ede4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2200      	movs	r2, #0
 800d388:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	7b5b      	ldrb	r3, [r3, #13]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d00e      	beq.n	800d3b0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	7b5b      	ldrb	r3, [r3, #13]
 800d396:	4619      	mov	r1, r3
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f001 fcf2 	bl	800ed82 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	7b5b      	ldrb	r3, [r3, #13]
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f001 fd1d 	bl	800ede4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d3b6:	69db      	ldr	r3, [r3, #28]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d00b      	beq.n	800d3d4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d3c2:	69db      	ldr	r3, [r3, #28]
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f002 f889 	bl	800f4dc <free>
    phost->pActiveClass->pData = 0U;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800d3d4:	2300      	movs	r3, #0
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3710      	adds	r7, #16
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}

0800d3de <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800d3de:	b580      	push	{r7, lr}
 800d3e0:	b084      	sub	sp, #16
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d3ec:	69db      	ldr	r3, [r3, #28]
 800d3ee:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	3340      	adds	r3, #64	; 0x40
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f000 f8b1 	bl	800d55e <GetLineCoding>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800d400:	7afb      	ldrb	r3, [r7, #11]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d105      	bne.n	800d412 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d40c:	2102      	movs	r1, #2
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800d412:	7afb      	ldrb	r3, [r7, #11]
}
 800d414:	4618      	mov	r0, r3
 800d416:	3710      	adds	r7, #16
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b084      	sub	sp, #16
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800d424:	2301      	movs	r3, #1
 800d426:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800d428:	2300      	movs	r3, #0
 800d42a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d432:	69db      	ldr	r3, [r3, #28]
 800d434:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800d43c:	2b04      	cmp	r3, #4
 800d43e:	d877      	bhi.n	800d530 <USBH_CDC_Process+0x114>
 800d440:	a201      	add	r2, pc, #4	; (adr r2, 800d448 <USBH_CDC_Process+0x2c>)
 800d442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d446:	bf00      	nop
 800d448:	0800d45d 	.word	0x0800d45d
 800d44c:	0800d463 	.word	0x0800d463
 800d450:	0800d493 	.word	0x0800d493
 800d454:	0800d507 	.word	0x0800d507
 800d458:	0800d515 	.word	0x0800d515
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800d45c:	2300      	movs	r3, #0
 800d45e:	73fb      	strb	r3, [r7, #15]
      break;
 800d460:	e06d      	b.n	800d53e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d466:	4619      	mov	r1, r3
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f000 f897 	bl	800d59c <SetLineCoding>
 800d46e:	4603      	mov	r3, r0
 800d470:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d472:	7bbb      	ldrb	r3, [r7, #14]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d104      	bne.n	800d482 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	2202      	movs	r2, #2
 800d47c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800d480:	e058      	b.n	800d534 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800d482:	7bbb      	ldrb	r3, [r7, #14]
 800d484:	2b01      	cmp	r3, #1
 800d486:	d055      	beq.n	800d534 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	2204      	movs	r2, #4
 800d48c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800d490:	e050      	b.n	800d534 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	3340      	adds	r3, #64	; 0x40
 800d496:	4619      	mov	r1, r3
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f000 f860 	bl	800d55e <GetLineCoding>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d4a2:	7bbb      	ldrb	r3, [r7, #14]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d126      	bne.n	800d4f6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4ba:	791b      	ldrb	r3, [r3, #4]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d13b      	bne.n	800d538 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4ca:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	d133      	bne.n	800d538 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4da:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d12b      	bne.n	800d538 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4e8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d124      	bne.n	800d538 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f000 f958 	bl	800d7a4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800d4f4:	e020      	b.n	800d538 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800d4f6:	7bbb      	ldrb	r3, [r7, #14]
 800d4f8:	2b01      	cmp	r3, #1
 800d4fa:	d01d      	beq.n	800d538 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	2204      	movs	r2, #4
 800d500:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800d504:	e018      	b.n	800d538 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f000 f867 	bl	800d5da <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f000 f8da 	bl	800d6c6 <CDC_ProcessReception>
      break;
 800d512:	e014      	b.n	800d53e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800d514:	2100      	movs	r1, #0
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f000 ffe3 	bl	800e4e2 <USBH_ClrFeature>
 800d51c:	4603      	mov	r3, r0
 800d51e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d520:	7bbb      	ldrb	r3, [r7, #14]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d10a      	bne.n	800d53c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	2200      	movs	r2, #0
 800d52a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800d52e:	e005      	b.n	800d53c <USBH_CDC_Process+0x120>

    default:
      break;
 800d530:	bf00      	nop
 800d532:	e004      	b.n	800d53e <USBH_CDC_Process+0x122>
      break;
 800d534:	bf00      	nop
 800d536:	e002      	b.n	800d53e <USBH_CDC_Process+0x122>
      break;
 800d538:	bf00      	nop
 800d53a:	e000      	b.n	800d53e <USBH_CDC_Process+0x122>
      break;
 800d53c:	bf00      	nop

  }

  return status;
 800d53e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d540:	4618      	mov	r0, r3
 800d542:	3710      	adds	r7, #16
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}

0800d548 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800d548:	b480      	push	{r7}
 800d54a:	b083      	sub	sp, #12
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800d550:	2300      	movs	r3, #0
}
 800d552:	4618      	mov	r0, r3
 800d554:	370c      	adds	r7, #12
 800d556:	46bd      	mov	sp, r7
 800d558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55c:	4770      	bx	lr

0800d55e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800d55e:	b580      	push	{r7, lr}
 800d560:	b082      	sub	sp, #8
 800d562:	af00      	add	r7, sp, #0
 800d564:	6078      	str	r0, [r7, #4]
 800d566:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	22a1      	movs	r2, #161	; 0xa1
 800d56c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2221      	movs	r2, #33	; 0x21
 800d572:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2200      	movs	r2, #0
 800d578:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2200      	movs	r2, #0
 800d57e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2207      	movs	r2, #7
 800d584:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	2207      	movs	r2, #7
 800d58a:	4619      	mov	r1, r3
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f001 f988 	bl	800e8a2 <USBH_CtlReq>
 800d592:	4603      	mov	r3, r0
}
 800d594:	4618      	mov	r0, r3
 800d596:	3708      	adds	r7, #8
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2221      	movs	r2, #33	; 0x21
 800d5aa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2220      	movs	r2, #32
 800d5b0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2207      	movs	r2, #7
 800d5c2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	2207      	movs	r2, #7
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f001 f969 	bl	800e8a2 <USBH_CtlReq>
 800d5d0:	4603      	mov	r3, r0
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3708      	adds	r7, #8
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}

0800d5da <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800d5da:	b580      	push	{r7, lr}
 800d5dc:	b086      	sub	sp, #24
 800d5de:	af02      	add	r7, sp, #8
 800d5e0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d5e8:	69db      	ldr	r3, [r3, #28]
 800d5ea:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800d5f6:	2b01      	cmp	r3, #1
 800d5f8:	d002      	beq.n	800d600 <CDC_ProcessTransmission+0x26>
 800d5fa:	2b02      	cmp	r3, #2
 800d5fc:	d023      	beq.n	800d646 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800d5fe:	e05e      	b.n	800d6be <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d604:	68fa      	ldr	r2, [r7, #12]
 800d606:	8b12      	ldrh	r2, [r2, #24]
 800d608:	4293      	cmp	r3, r2
 800d60a:	d90b      	bls.n	800d624 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	69d9      	ldr	r1, [r3, #28]
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	8b1a      	ldrh	r2, [r3, #24]
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	7b5b      	ldrb	r3, [r3, #13]
 800d618:	2001      	movs	r0, #1
 800d61a:	9000      	str	r0, [sp, #0]
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f001 fb4e 	bl	800ecbe <USBH_BulkSendData>
 800d622:	e00b      	b.n	800d63c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800d62c:	b29a      	uxth	r2, r3
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	7b5b      	ldrb	r3, [r3, #13]
 800d632:	2001      	movs	r0, #1
 800d634:	9000      	str	r0, [sp, #0]
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f001 fb41 	bl	800ecbe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2202      	movs	r2, #2
 800d640:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800d644:	e03b      	b.n	800d6be <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	7b5b      	ldrb	r3, [r3, #13]
 800d64a:	4619      	mov	r1, r3
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f001 fe65 	bl	800f31c <USBH_LL_GetURBState>
 800d652:	4603      	mov	r3, r0
 800d654:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800d656:	7afb      	ldrb	r3, [r7, #11]
 800d658:	2b01      	cmp	r3, #1
 800d65a:	d128      	bne.n	800d6ae <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d660:	68fa      	ldr	r2, [r7, #12]
 800d662:	8b12      	ldrh	r2, [r2, #24]
 800d664:	4293      	cmp	r3, r2
 800d666:	d90e      	bls.n	800d686 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d66c:	68fa      	ldr	r2, [r7, #12]
 800d66e:	8b12      	ldrh	r2, [r2, #24]
 800d670:	1a9a      	subs	r2, r3, r2
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	69db      	ldr	r3, [r3, #28]
 800d67a:	68fa      	ldr	r2, [r7, #12]
 800d67c:	8b12      	ldrh	r2, [r2, #24]
 800d67e:	441a      	add	r2, r3
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	61da      	str	r2, [r3, #28]
 800d684:	e002      	b.n	800d68c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2200      	movs	r2, #0
 800d68a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d690:	2b00      	cmp	r3, #0
 800d692:	d004      	beq.n	800d69e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2201      	movs	r2, #1
 800d698:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800d69c:	e00e      	b.n	800d6bc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f000 f868 	bl	800d77c <USBH_CDC_TransmitCallback>
      break;
 800d6ac:	e006      	b.n	800d6bc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800d6ae:	7afb      	ldrb	r3, [r7, #11]
 800d6b0:	2b02      	cmp	r3, #2
 800d6b2:	d103      	bne.n	800d6bc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	2201      	movs	r2, #1
 800d6b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800d6bc:	bf00      	nop
  }
}
 800d6be:	bf00      	nop
 800d6c0:	3710      	adds	r7, #16
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}

0800d6c6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800d6c6:	b580      	push	{r7, lr}
 800d6c8:	b086      	sub	sp, #24
 800d6ca:	af00      	add	r7, sp, #0
 800d6cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d6d4:	69db      	ldr	r3, [r3, #28]
 800d6d6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d6e2:	2b03      	cmp	r3, #3
 800d6e4:	d002      	beq.n	800d6ec <CDC_ProcessReception+0x26>
 800d6e6:	2b04      	cmp	r3, #4
 800d6e8:	d00e      	beq.n	800d708 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800d6ea:	e043      	b.n	800d774 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	6a19      	ldr	r1, [r3, #32]
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	8b5a      	ldrh	r2, [r3, #26]
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	7b1b      	ldrb	r3, [r3, #12]
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f001 fb05 	bl	800ed08 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	2204      	movs	r2, #4
 800d702:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800d706:	e035      	b.n	800d774 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	7b1b      	ldrb	r3, [r3, #12]
 800d70c:	4619      	mov	r1, r3
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f001 fe04 	bl	800f31c <USBH_LL_GetURBState>
 800d714:	4603      	mov	r3, r0
 800d716:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800d718:	7cfb      	ldrb	r3, [r7, #19]
 800d71a:	2b01      	cmp	r3, #1
 800d71c:	d129      	bne.n	800d772 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800d71e:	697b      	ldr	r3, [r7, #20]
 800d720:	7b1b      	ldrb	r3, [r3, #12]
 800d722:	4619      	mov	r1, r3
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f001 fd67 	bl	800f1f8 <USBH_LL_GetLastXferSize>
 800d72a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800d72c:	697b      	ldr	r3, [r7, #20]
 800d72e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d730:	68fa      	ldr	r2, [r7, #12]
 800d732:	429a      	cmp	r2, r3
 800d734:	d016      	beq.n	800d764 <CDC_ProcessReception+0x9e>
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	8b5b      	ldrh	r3, [r3, #26]
 800d73a:	461a      	mov	r2, r3
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	4293      	cmp	r3, r2
 800d740:	d910      	bls.n	800d764 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	1ad2      	subs	r2, r2, r3
 800d74a:	697b      	ldr	r3, [r7, #20]
 800d74c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	6a1a      	ldr	r2, [r3, #32]
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	441a      	add	r2, r3
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	2203      	movs	r2, #3
 800d75e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800d762:	e006      	b.n	800d772 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	2200      	movs	r2, #0
 800d768:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f000 f80f 	bl	800d790 <USBH_CDC_ReceiveCallback>
      break;
 800d772:	bf00      	nop
  }
}
 800d774:	bf00      	nop
 800d776:	3718      	adds	r7, #24
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b083      	sub	sp, #12
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d784:	bf00      	nop
 800d786:	370c      	adds	r7, #12
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr

0800d790 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800d790:	b480      	push	{r7}
 800d792:	b083      	sub	sp, #12
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d798:	bf00      	nop
 800d79a:	370c      	adds	r7, #12
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr

0800d7a4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b083      	sub	sp, #12
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d7ac:	bf00      	nop
 800d7ae:	370c      	adds	r7, #12
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr

0800d7b8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b084      	sub	sp, #16
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	60f8      	str	r0, [r7, #12]
 800d7c0:	60b9      	str	r1, [r7, #8]
 800d7c2:	4613      	mov	r3, r2
 800d7c4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d101      	bne.n	800d7d0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800d7cc:	2302      	movs	r3, #2
 800d7ce:	e029      	b.n	800d824 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	79fa      	ldrb	r2, [r7, #7]
 800d7d4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800d7e8:	68f8      	ldr	r0, [r7, #12]
 800d7ea:	f000 f81f 	bl	800d82c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2200      	movs	r2, #0
 800d802:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2200      	movs	r2, #0
 800d80a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d003      	beq.n	800d81c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	68ba      	ldr	r2, [r7, #8]
 800d818:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800d81c:	68f8      	ldr	r0, [r7, #12]
 800d81e:	f001 fc37 	bl	800f090 <USBH_LL_Init>

  return USBH_OK;
 800d822:	2300      	movs	r3, #0
}
 800d824:	4618      	mov	r0, r3
 800d826:	3710      	adds	r7, #16
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800d82c:	b480      	push	{r7}
 800d82e:	b085      	sub	sp, #20
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800d834:	2300      	movs	r3, #0
 800d836:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d838:	2300      	movs	r3, #0
 800d83a:	60fb      	str	r3, [r7, #12]
 800d83c:	e009      	b.n	800d852 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800d83e:	687a      	ldr	r2, [r7, #4]
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	33e0      	adds	r3, #224	; 0xe0
 800d844:	009b      	lsls	r3, r3, #2
 800d846:	4413      	add	r3, r2
 800d848:	2200      	movs	r2, #0
 800d84a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	3301      	adds	r3, #1
 800d850:	60fb      	str	r3, [r7, #12]
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2b0e      	cmp	r3, #14
 800d856:	d9f2      	bls.n	800d83e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d858:	2300      	movs	r3, #0
 800d85a:	60fb      	str	r3, [r7, #12]
 800d85c:	e009      	b.n	800d872 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800d85e:	687a      	ldr	r2, [r7, #4]
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	4413      	add	r3, r2
 800d864:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d868:	2200      	movs	r2, #0
 800d86a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	3301      	adds	r3, #1
 800d870:	60fb      	str	r3, [r7, #12]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d878:	d3f1      	bcc.n	800d85e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2200      	movs	r2, #0
 800d87e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2200      	movs	r2, #0
 800d884:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2201      	movs	r2, #1
 800d88a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2200      	movs	r2, #0
 800d890:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2201      	movs	r2, #1
 800d898:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2240      	movs	r2, #64	; 0x40
 800d89e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800d8c6:	2300      	movs	r3, #0
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3714      	adds	r7, #20
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d2:	4770      	bx	lr

0800d8d4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b085      	sub	sp, #20
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d016      	beq.n	800d916 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d10e      	bne.n	800d910 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d8f8:	1c59      	adds	r1, r3, #1
 800d8fa:	687a      	ldr	r2, [r7, #4]
 800d8fc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800d900:	687a      	ldr	r2, [r7, #4]
 800d902:	33de      	adds	r3, #222	; 0xde
 800d904:	6839      	ldr	r1, [r7, #0]
 800d906:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800d90a:	2300      	movs	r3, #0
 800d90c:	73fb      	strb	r3, [r7, #15]
 800d90e:	e004      	b.n	800d91a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800d910:	2302      	movs	r3, #2
 800d912:	73fb      	strb	r3, [r7, #15]
 800d914:	e001      	b.n	800d91a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800d916:	2302      	movs	r3, #2
 800d918:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d91a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3714      	adds	r7, #20
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr

0800d928 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800d928:	b480      	push	{r7}
 800d92a:	b085      	sub	sp, #20
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	460b      	mov	r3, r1
 800d932:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800d934:	2300      	movs	r3, #0
 800d936:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800d93e:	78fa      	ldrb	r2, [r7, #3]
 800d940:	429a      	cmp	r2, r3
 800d942:	d204      	bcs.n	800d94e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	78fa      	ldrb	r2, [r7, #3]
 800d948:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800d94c:	e001      	b.n	800d952 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800d94e:	2302      	movs	r3, #2
 800d950:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d952:	7bfb      	ldrb	r3, [r7, #15]
}
 800d954:	4618      	mov	r0, r3
 800d956:	3714      	adds	r7, #20
 800d958:	46bd      	mov	sp, r7
 800d95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95e:	4770      	bx	lr

0800d960 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800d960:	b480      	push	{r7}
 800d962:	b087      	sub	sp, #28
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
 800d968:	4608      	mov	r0, r1
 800d96a:	4611      	mov	r1, r2
 800d96c:	461a      	mov	r2, r3
 800d96e:	4603      	mov	r3, r0
 800d970:	70fb      	strb	r3, [r7, #3]
 800d972:	460b      	mov	r3, r1
 800d974:	70bb      	strb	r3, [r7, #2]
 800d976:	4613      	mov	r3, r2
 800d978:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800d97a:	2300      	movs	r3, #0
 800d97c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800d97e:	2300      	movs	r3, #0
 800d980:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d988:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d98a:	e025      	b.n	800d9d8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800d98c:	7dfb      	ldrb	r3, [r7, #23]
 800d98e:	221a      	movs	r2, #26
 800d990:	fb02 f303 	mul.w	r3, r2, r3
 800d994:	3308      	adds	r3, #8
 800d996:	68fa      	ldr	r2, [r7, #12]
 800d998:	4413      	add	r3, r2
 800d99a:	3302      	adds	r3, #2
 800d99c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	795b      	ldrb	r3, [r3, #5]
 800d9a2:	78fa      	ldrb	r2, [r7, #3]
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d002      	beq.n	800d9ae <USBH_FindInterface+0x4e>
 800d9a8:	78fb      	ldrb	r3, [r7, #3]
 800d9aa:	2bff      	cmp	r3, #255	; 0xff
 800d9ac:	d111      	bne.n	800d9d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d9b2:	78ba      	ldrb	r2, [r7, #2]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d002      	beq.n	800d9be <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d9b8:	78bb      	ldrb	r3, [r7, #2]
 800d9ba:	2bff      	cmp	r3, #255	; 0xff
 800d9bc:	d109      	bne.n	800d9d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d9c2:	787a      	ldrb	r2, [r7, #1]
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d002      	beq.n	800d9ce <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d9c8:	787b      	ldrb	r3, [r7, #1]
 800d9ca:	2bff      	cmp	r3, #255	; 0xff
 800d9cc:	d101      	bne.n	800d9d2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800d9ce:	7dfb      	ldrb	r3, [r7, #23]
 800d9d0:	e006      	b.n	800d9e0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800d9d2:	7dfb      	ldrb	r3, [r7, #23]
 800d9d4:	3301      	adds	r3, #1
 800d9d6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d9d8:	7dfb      	ldrb	r3, [r7, #23]
 800d9da:	2b01      	cmp	r3, #1
 800d9dc:	d9d6      	bls.n	800d98c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800d9de:	23ff      	movs	r3, #255	; 0xff
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	371c      	adds	r7, #28
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr

0800d9ec <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b082      	sub	sp, #8
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f001 fb87 	bl	800f108 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800d9fa:	2101      	movs	r1, #1
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f001 fca0 	bl	800f342 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800da02:	2300      	movs	r3, #0
}
 800da04:	4618      	mov	r0, r3
 800da06:	3708      	adds	r7, #8
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b088      	sub	sp, #32
 800da10:	af04      	add	r7, sp, #16
 800da12:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800da14:	2302      	movs	r3, #2
 800da16:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800da18:	2300      	movs	r3, #0
 800da1a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800da22:	b2db      	uxtb	r3, r3
 800da24:	2b01      	cmp	r3, #1
 800da26:	d102      	bne.n	800da2e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2203      	movs	r2, #3
 800da2c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	781b      	ldrb	r3, [r3, #0]
 800da32:	b2db      	uxtb	r3, r3
 800da34:	2b0b      	cmp	r3, #11
 800da36:	f200 81b3 	bhi.w	800dda0 <USBH_Process+0x394>
 800da3a:	a201      	add	r2, pc, #4	; (adr r2, 800da40 <USBH_Process+0x34>)
 800da3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da40:	0800da71 	.word	0x0800da71
 800da44:	0800daa3 	.word	0x0800daa3
 800da48:	0800db0b 	.word	0x0800db0b
 800da4c:	0800dd3b 	.word	0x0800dd3b
 800da50:	0800dda1 	.word	0x0800dda1
 800da54:	0800dbaf 	.word	0x0800dbaf
 800da58:	0800dce1 	.word	0x0800dce1
 800da5c:	0800dbe5 	.word	0x0800dbe5
 800da60:	0800dc05 	.word	0x0800dc05
 800da64:	0800dc25 	.word	0x0800dc25
 800da68:	0800dc53 	.word	0x0800dc53
 800da6c:	0800dd23 	.word	0x0800dd23
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800da76:	b2db      	uxtb	r3, r3
 800da78:	2b00      	cmp	r3, #0
 800da7a:	f000 8193 	beq.w	800dda4 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2201      	movs	r2, #1
 800da82:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800da84:	20c8      	movs	r0, #200	; 0xc8
 800da86:	f001 fca3 	bl	800f3d0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f001 fb99 	bl	800f1c2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2200      	movs	r2, #0
 800da94:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2200      	movs	r2, #0
 800da9c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800daa0:	e180      	b.n	800dda4 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d107      	bne.n	800dabc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2200      	movs	r2, #0
 800dab0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2202      	movs	r2, #2
 800dab8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800daba:	e182      	b.n	800ddc2 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800dac2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dac6:	d914      	bls.n	800daf2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800dace:	3301      	adds	r3, #1
 800dad0:	b2da      	uxtb	r2, r3
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800dade:	2b03      	cmp	r3, #3
 800dae0:	d903      	bls.n	800daea <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	220d      	movs	r2, #13
 800dae6:	701a      	strb	r2, [r3, #0]
      break;
 800dae8:	e16b      	b.n	800ddc2 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2200      	movs	r2, #0
 800daee:	701a      	strb	r2, [r3, #0]
      break;
 800daf0:	e167      	b.n	800ddc2 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800daf8:	f103 020a 	add.w	r2, r3, #10
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800db02:	200a      	movs	r0, #10
 800db04:	f001 fc64 	bl	800f3d0 <USBH_Delay>
      break;
 800db08:	e15b      	b.n	800ddc2 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800db10:	2b00      	cmp	r3, #0
 800db12:	d005      	beq.n	800db20 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800db1a:	2104      	movs	r1, #4
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800db20:	2064      	movs	r0, #100	; 0x64
 800db22:	f001 fc55 	bl	800f3d0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f001 fb24 	bl	800f174 <USBH_LL_GetSpeed>
 800db2c:	4603      	mov	r3, r0
 800db2e:	461a      	mov	r2, r3
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2205      	movs	r2, #5
 800db3a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800db3c:	2100      	movs	r1, #0
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f001 f92f 	bl	800eda2 <USBH_AllocPipe>
 800db44:	4603      	mov	r3, r0
 800db46:	461a      	mov	r2, r3
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800db4c:	2180      	movs	r1, #128	; 0x80
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f001 f927 	bl	800eda2 <USBH_AllocPipe>
 800db54:	4603      	mov	r3, r0
 800db56:	461a      	mov	r2, r3
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	7919      	ldrb	r1, [r3, #4]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800db6c:	687a      	ldr	r2, [r7, #4]
 800db6e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800db70:	b292      	uxth	r2, r2
 800db72:	9202      	str	r2, [sp, #8]
 800db74:	2200      	movs	r2, #0
 800db76:	9201      	str	r2, [sp, #4]
 800db78:	9300      	str	r3, [sp, #0]
 800db7a:	4603      	mov	r3, r0
 800db7c:	2280      	movs	r2, #128	; 0x80
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f001 f8e0 	bl	800ed44 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	7959      	ldrb	r1, [r3, #5]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800db94:	687a      	ldr	r2, [r7, #4]
 800db96:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800db98:	b292      	uxth	r2, r2
 800db9a:	9202      	str	r2, [sp, #8]
 800db9c:	2200      	movs	r2, #0
 800db9e:	9201      	str	r2, [sp, #4]
 800dba0:	9300      	str	r3, [sp, #0]
 800dba2:	4603      	mov	r3, r0
 800dba4:	2200      	movs	r2, #0
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f001 f8cc 	bl	800ed44 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800dbac:	e109      	b.n	800ddc2 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f000 f90c 	bl	800ddcc <USBH_HandleEnum>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800dbb8:	7bbb      	ldrb	r3, [r7, #14]
 800dbba:	b2db      	uxtb	r3, r3
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	f040 80f3 	bne.w	800dda8 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d103      	bne.n	800dbdc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2208      	movs	r2, #8
 800dbd8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800dbda:	e0e5      	b.n	800dda8 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2207      	movs	r2, #7
 800dbe0:	701a      	strb	r2, [r3, #0]
      break;
 800dbe2:	e0e1      	b.n	800dda8 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	f000 80de 	beq.w	800ddac <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dbf6:	2101      	movs	r1, #1
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2208      	movs	r2, #8
 800dc00:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800dc02:	e0d3      	b.n	800ddac <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800dc0a:	b29b      	uxth	r3, r3
 800dc0c:	4619      	mov	r1, r3
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f000 fc20 	bl	800e454 <USBH_SetCfg>
 800dc14:	4603      	mov	r3, r0
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	f040 80ca 	bne.w	800ddb0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2209      	movs	r2, #9
 800dc20:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800dc22:	e0c5      	b.n	800ddb0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800dc2a:	f003 0320 	and.w	r3, r3, #32
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d00b      	beq.n	800dc4a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800dc32:	2101      	movs	r1, #1
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f000 fc30 	bl	800e49a <USBH_SetFeature>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	f040 80b9 	bne.w	800ddb4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	220a      	movs	r2, #10
 800dc46:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800dc48:	e0b4      	b.n	800ddb4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	220a      	movs	r2, #10
 800dc4e:	701a      	strb	r2, [r3, #0]
      break;
 800dc50:	e0b0      	b.n	800ddb4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	f000 80ad 	beq.w	800ddb8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2200      	movs	r2, #0
 800dc62:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800dc66:	2300      	movs	r3, #0
 800dc68:	73fb      	strb	r3, [r7, #15]
 800dc6a:	e016      	b.n	800dc9a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800dc6c:	7bfa      	ldrb	r2, [r7, #15]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	32de      	adds	r2, #222	; 0xde
 800dc72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc76:	791a      	ldrb	r2, [r3, #4]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	d108      	bne.n	800dc94 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800dc82:	7bfa      	ldrb	r2, [r7, #15]
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	32de      	adds	r2, #222	; 0xde
 800dc88:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800dc92:	e005      	b.n	800dca0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800dc94:	7bfb      	ldrb	r3, [r7, #15]
 800dc96:	3301      	adds	r3, #1
 800dc98:	73fb      	strb	r3, [r7, #15]
 800dc9a:	7bfb      	ldrb	r3, [r7, #15]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d0e5      	beq.n	800dc6c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d016      	beq.n	800dcd8 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dcb0:	689b      	ldr	r3, [r3, #8]
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	4798      	blx	r3
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d109      	bne.n	800dcd0 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2206      	movs	r2, #6
 800dcc0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dcc8:	2103      	movs	r1, #3
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800dcce:	e073      	b.n	800ddb8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	220d      	movs	r2, #13
 800dcd4:	701a      	strb	r2, [r3, #0]
      break;
 800dcd6:	e06f      	b.n	800ddb8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	220d      	movs	r2, #13
 800dcdc:	701a      	strb	r2, [r3, #0]
      break;
 800dcde:	e06b      	b.n	800ddb8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d017      	beq.n	800dd1a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dcf0:	691b      	ldr	r3, [r3, #16]
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	4798      	blx	r3
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800dcfa:	7bbb      	ldrb	r3, [r7, #14]
 800dcfc:	b2db      	uxtb	r3, r3
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d103      	bne.n	800dd0a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	220b      	movs	r2, #11
 800dd06:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800dd08:	e058      	b.n	800ddbc <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800dd0a:	7bbb      	ldrb	r3, [r7, #14]
 800dd0c:	b2db      	uxtb	r3, r3
 800dd0e:	2b02      	cmp	r3, #2
 800dd10:	d154      	bne.n	800ddbc <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	220d      	movs	r2, #13
 800dd16:	701a      	strb	r2, [r3, #0]
      break;
 800dd18:	e050      	b.n	800ddbc <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	220d      	movs	r2, #13
 800dd1e:	701a      	strb	r2, [r3, #0]
      break;
 800dd20:	e04c      	b.n	800ddbc <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d049      	beq.n	800ddc0 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dd32:	695b      	ldr	r3, [r3, #20]
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	4798      	blx	r3
      }
      break;
 800dd38:	e042      	b.n	800ddc0 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f7ff fd72 	bl	800d82c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d009      	beq.n	800dd66 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dd58:	68db      	ldr	r3, [r3, #12]
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2200      	movs	r2, #0
 800dd62:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d005      	beq.n	800dd7c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dd76:	2105      	movs	r1, #5
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	2b01      	cmp	r3, #1
 800dd86:	d107      	bne.n	800dd98 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f7ff fe2b 	bl	800d9ec <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800dd96:	e014      	b.n	800ddc2 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f001 f9b5 	bl	800f108 <USBH_LL_Start>
      break;
 800dd9e:	e010      	b.n	800ddc2 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800dda0:	bf00      	nop
 800dda2:	e00e      	b.n	800ddc2 <USBH_Process+0x3b6>
      break;
 800dda4:	bf00      	nop
 800dda6:	e00c      	b.n	800ddc2 <USBH_Process+0x3b6>
      break;
 800dda8:	bf00      	nop
 800ddaa:	e00a      	b.n	800ddc2 <USBH_Process+0x3b6>
    break;
 800ddac:	bf00      	nop
 800ddae:	e008      	b.n	800ddc2 <USBH_Process+0x3b6>
      break;
 800ddb0:	bf00      	nop
 800ddb2:	e006      	b.n	800ddc2 <USBH_Process+0x3b6>
      break;
 800ddb4:	bf00      	nop
 800ddb6:	e004      	b.n	800ddc2 <USBH_Process+0x3b6>
      break;
 800ddb8:	bf00      	nop
 800ddba:	e002      	b.n	800ddc2 <USBH_Process+0x3b6>
      break;
 800ddbc:	bf00      	nop
 800ddbe:	e000      	b.n	800ddc2 <USBH_Process+0x3b6>
      break;
 800ddc0:	bf00      	nop
  }
  return USBH_OK;
 800ddc2:	2300      	movs	r3, #0
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3710      	adds	r7, #16
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}

0800ddcc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b088      	sub	sp, #32
 800ddd0:	af04      	add	r7, sp, #16
 800ddd2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ddd8:	2301      	movs	r3, #1
 800ddda:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	785b      	ldrb	r3, [r3, #1]
 800dde0:	2b07      	cmp	r3, #7
 800dde2:	f200 81c1 	bhi.w	800e168 <USBH_HandleEnum+0x39c>
 800dde6:	a201      	add	r2, pc, #4	; (adr r2, 800ddec <USBH_HandleEnum+0x20>)
 800dde8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddec:	0800de0d 	.word	0x0800de0d
 800ddf0:	0800decb 	.word	0x0800decb
 800ddf4:	0800df35 	.word	0x0800df35
 800ddf8:	0800dfc3 	.word	0x0800dfc3
 800ddfc:	0800e02d 	.word	0x0800e02d
 800de00:	0800e09d 	.word	0x0800e09d
 800de04:	0800e0e3 	.word	0x0800e0e3
 800de08:	0800e129 	.word	0x0800e129
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800de0c:	2108      	movs	r1, #8
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f000 fa50 	bl	800e2b4 <USBH_Get_DevDesc>
 800de14:	4603      	mov	r3, r0
 800de16:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800de18:	7bbb      	ldrb	r3, [r7, #14]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d130      	bne.n	800de80 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2201      	movs	r2, #1
 800de2c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	7919      	ldrb	r1, [r3, #4]
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800de42:	b292      	uxth	r2, r2
 800de44:	9202      	str	r2, [sp, #8]
 800de46:	2200      	movs	r2, #0
 800de48:	9201      	str	r2, [sp, #4]
 800de4a:	9300      	str	r3, [sp, #0]
 800de4c:	4603      	mov	r3, r0
 800de4e:	2280      	movs	r2, #128	; 0x80
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	f000 ff77 	bl	800ed44 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	7959      	ldrb	r1, [r3, #5]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800de66:	687a      	ldr	r2, [r7, #4]
 800de68:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800de6a:	b292      	uxth	r2, r2
 800de6c:	9202      	str	r2, [sp, #8]
 800de6e:	2200      	movs	r2, #0
 800de70:	9201      	str	r2, [sp, #4]
 800de72:	9300      	str	r3, [sp, #0]
 800de74:	4603      	mov	r3, r0
 800de76:	2200      	movs	r2, #0
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f000 ff63 	bl	800ed44 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800de7e:	e175      	b.n	800e16c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800de80:	7bbb      	ldrb	r3, [r7, #14]
 800de82:	2b03      	cmp	r3, #3
 800de84:	f040 8172 	bne.w	800e16c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800de8e:	3301      	adds	r3, #1
 800de90:	b2da      	uxtb	r2, r3
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800de9e:	2b03      	cmp	r3, #3
 800dea0:	d903      	bls.n	800deaa <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	220d      	movs	r2, #13
 800dea6:	701a      	strb	r2, [r3, #0]
      break;
 800dea8:	e160      	b.n	800e16c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	795b      	ldrb	r3, [r3, #5]
 800deae:	4619      	mov	r1, r3
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f000 ff97 	bl	800ede4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	791b      	ldrb	r3, [r3, #4]
 800deba:	4619      	mov	r1, r3
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f000 ff91 	bl	800ede4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	2200      	movs	r2, #0
 800dec6:	701a      	strb	r2, [r3, #0]
      break;
 800dec8:	e150      	b.n	800e16c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800deca:	2112      	movs	r1, #18
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f000 f9f1 	bl	800e2b4 <USBH_Get_DevDesc>
 800ded2:	4603      	mov	r3, r0
 800ded4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ded6:	7bbb      	ldrb	r3, [r7, #14]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d103      	bne.n	800dee4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2202      	movs	r2, #2
 800dee0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800dee2:	e145      	b.n	800e170 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dee4:	7bbb      	ldrb	r3, [r7, #14]
 800dee6:	2b03      	cmp	r3, #3
 800dee8:	f040 8142 	bne.w	800e170 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800def2:	3301      	adds	r3, #1
 800def4:	b2da      	uxtb	r2, r3
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800df02:	2b03      	cmp	r3, #3
 800df04:	d903      	bls.n	800df0e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	220d      	movs	r2, #13
 800df0a:	701a      	strb	r2, [r3, #0]
      break;
 800df0c:	e130      	b.n	800e170 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	795b      	ldrb	r3, [r3, #5]
 800df12:	4619      	mov	r1, r3
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f000 ff65 	bl	800ede4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	791b      	ldrb	r3, [r3, #4]
 800df1e:	4619      	mov	r1, r3
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f000 ff5f 	bl	800ede4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2200      	movs	r2, #0
 800df2a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2200      	movs	r2, #0
 800df30:	701a      	strb	r2, [r3, #0]
      break;
 800df32:	e11d      	b.n	800e170 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800df34:	2101      	movs	r1, #1
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f000 fa68 	bl	800e40c <USBH_SetAddress>
 800df3c:	4603      	mov	r3, r0
 800df3e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800df40:	7bbb      	ldrb	r3, [r7, #14]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d132      	bne.n	800dfac <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800df46:	2002      	movs	r0, #2
 800df48:	f001 fa42 	bl	800f3d0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2201      	movs	r2, #1
 800df50:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2203      	movs	r2, #3
 800df58:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	7919      	ldrb	r1, [r3, #4]
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800df6a:	687a      	ldr	r2, [r7, #4]
 800df6c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800df6e:	b292      	uxth	r2, r2
 800df70:	9202      	str	r2, [sp, #8]
 800df72:	2200      	movs	r2, #0
 800df74:	9201      	str	r2, [sp, #4]
 800df76:	9300      	str	r3, [sp, #0]
 800df78:	4603      	mov	r3, r0
 800df7a:	2280      	movs	r2, #128	; 0x80
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f000 fee1 	bl	800ed44 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	7959      	ldrb	r1, [r3, #5]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800df92:	687a      	ldr	r2, [r7, #4]
 800df94:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800df96:	b292      	uxth	r2, r2
 800df98:	9202      	str	r2, [sp, #8]
 800df9a:	2200      	movs	r2, #0
 800df9c:	9201      	str	r2, [sp, #4]
 800df9e:	9300      	str	r3, [sp, #0]
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f000 fecd 	bl	800ed44 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800dfaa:	e0e3      	b.n	800e174 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dfac:	7bbb      	ldrb	r3, [r7, #14]
 800dfae:	2b03      	cmp	r3, #3
 800dfb0:	f040 80e0 	bne.w	800e174 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	220d      	movs	r2, #13
 800dfb8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	705a      	strb	r2, [r3, #1]
      break;
 800dfc0:	e0d8      	b.n	800e174 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800dfc2:	2109      	movs	r1, #9
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f000 f99d 	bl	800e304 <USBH_Get_CfgDesc>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800dfce:	7bbb      	ldrb	r3, [r7, #14]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d103      	bne.n	800dfdc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2204      	movs	r2, #4
 800dfd8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800dfda:	e0cd      	b.n	800e178 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dfdc:	7bbb      	ldrb	r3, [r7, #14]
 800dfde:	2b03      	cmp	r3, #3
 800dfe0:	f040 80ca 	bne.w	800e178 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800dfea:	3301      	adds	r3, #1
 800dfec:	b2da      	uxtb	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800dffa:	2b03      	cmp	r3, #3
 800dffc:	d903      	bls.n	800e006 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	220d      	movs	r2, #13
 800e002:	701a      	strb	r2, [r3, #0]
      break;
 800e004:	e0b8      	b.n	800e178 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	795b      	ldrb	r3, [r3, #5]
 800e00a:	4619      	mov	r1, r3
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f000 fee9 	bl	800ede4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	791b      	ldrb	r3, [r3, #4]
 800e016:	4619      	mov	r1, r3
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f000 fee3 	bl	800ede4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2200      	movs	r2, #0
 800e022:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2200      	movs	r2, #0
 800e028:	701a      	strb	r2, [r3, #0]
      break;
 800e02a:	e0a5      	b.n	800e178 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800e032:	4619      	mov	r1, r3
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f000 f965 	bl	800e304 <USBH_Get_CfgDesc>
 800e03a:	4603      	mov	r3, r0
 800e03c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e03e:	7bbb      	ldrb	r3, [r7, #14]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d103      	bne.n	800e04c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2205      	movs	r2, #5
 800e048:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e04a:	e097      	b.n	800e17c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e04c:	7bbb      	ldrb	r3, [r7, #14]
 800e04e:	2b03      	cmp	r3, #3
 800e050:	f040 8094 	bne.w	800e17c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e05a:	3301      	adds	r3, #1
 800e05c:	b2da      	uxtb	r2, r3
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e06a:	2b03      	cmp	r3, #3
 800e06c:	d903      	bls.n	800e076 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	220d      	movs	r2, #13
 800e072:	701a      	strb	r2, [r3, #0]
      break;
 800e074:	e082      	b.n	800e17c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	795b      	ldrb	r3, [r3, #5]
 800e07a:	4619      	mov	r1, r3
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f000 feb1 	bl	800ede4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	791b      	ldrb	r3, [r3, #4]
 800e086:	4619      	mov	r1, r3
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f000 feab 	bl	800ede4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2200      	movs	r2, #0
 800e092:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2200      	movs	r2, #0
 800e098:	701a      	strb	r2, [r3, #0]
      break;
 800e09a:	e06f      	b.n	800e17c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d019      	beq.n	800e0da <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e0b2:	23ff      	movs	r3, #255	; 0xff
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f000 f949 	bl	800e34c <USBH_Get_StringDesc>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e0be:	7bbb      	ldrb	r3, [r7, #14]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d103      	bne.n	800e0cc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2206      	movs	r2, #6
 800e0c8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e0ca:	e059      	b.n	800e180 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e0cc:	7bbb      	ldrb	r3, [r7, #14]
 800e0ce:	2b03      	cmp	r3, #3
 800e0d0:	d156      	bne.n	800e180 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2206      	movs	r2, #6
 800e0d6:	705a      	strb	r2, [r3, #1]
      break;
 800e0d8:	e052      	b.n	800e180 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2206      	movs	r2, #6
 800e0de:	705a      	strb	r2, [r3, #1]
      break;
 800e0e0:	e04e      	b.n	800e180 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d019      	beq.n	800e120 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e0f8:	23ff      	movs	r3, #255	; 0xff
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f000 f926 	bl	800e34c <USBH_Get_StringDesc>
 800e100:	4603      	mov	r3, r0
 800e102:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e104:	7bbb      	ldrb	r3, [r7, #14]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d103      	bne.n	800e112 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2207      	movs	r2, #7
 800e10e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e110:	e038      	b.n	800e184 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e112:	7bbb      	ldrb	r3, [r7, #14]
 800e114:	2b03      	cmp	r3, #3
 800e116:	d135      	bne.n	800e184 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2207      	movs	r2, #7
 800e11c:	705a      	strb	r2, [r3, #1]
      break;
 800e11e:	e031      	b.n	800e184 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2207      	movs	r2, #7
 800e124:	705a      	strb	r2, [r3, #1]
      break;
 800e126:	e02d      	b.n	800e184 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d017      	beq.n	800e162 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e13e:	23ff      	movs	r3, #255	; 0xff
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	f000 f903 	bl	800e34c <USBH_Get_StringDesc>
 800e146:	4603      	mov	r3, r0
 800e148:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e14a:	7bbb      	ldrb	r3, [r7, #14]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d102      	bne.n	800e156 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800e150:	2300      	movs	r3, #0
 800e152:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800e154:	e018      	b.n	800e188 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e156:	7bbb      	ldrb	r3, [r7, #14]
 800e158:	2b03      	cmp	r3, #3
 800e15a:	d115      	bne.n	800e188 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800e15c:	2300      	movs	r3, #0
 800e15e:	73fb      	strb	r3, [r7, #15]
      break;
 800e160:	e012      	b.n	800e188 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800e162:	2300      	movs	r3, #0
 800e164:	73fb      	strb	r3, [r7, #15]
      break;
 800e166:	e00f      	b.n	800e188 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800e168:	bf00      	nop
 800e16a:	e00e      	b.n	800e18a <USBH_HandleEnum+0x3be>
      break;
 800e16c:	bf00      	nop
 800e16e:	e00c      	b.n	800e18a <USBH_HandleEnum+0x3be>
      break;
 800e170:	bf00      	nop
 800e172:	e00a      	b.n	800e18a <USBH_HandleEnum+0x3be>
      break;
 800e174:	bf00      	nop
 800e176:	e008      	b.n	800e18a <USBH_HandleEnum+0x3be>
      break;
 800e178:	bf00      	nop
 800e17a:	e006      	b.n	800e18a <USBH_HandleEnum+0x3be>
      break;
 800e17c:	bf00      	nop
 800e17e:	e004      	b.n	800e18a <USBH_HandleEnum+0x3be>
      break;
 800e180:	bf00      	nop
 800e182:	e002      	b.n	800e18a <USBH_HandleEnum+0x3be>
      break;
 800e184:	bf00      	nop
 800e186:	e000      	b.n	800e18a <USBH_HandleEnum+0x3be>
      break;
 800e188:	bf00      	nop
  }
  return Status;
 800e18a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3710      	adds	r7, #16
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}

0800e194 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800e194:	b480      	push	{r7}
 800e196:	b083      	sub	sp, #12
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	683a      	ldr	r2, [r7, #0]
 800e1a2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800e1a6:	bf00      	nop
 800e1a8:	370c      	adds	r7, #12
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b0:	4770      	bx	lr

0800e1b2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800e1b2:	b580      	push	{r7, lr}
 800e1b4:	b082      	sub	sp, #8
 800e1b6:	af00      	add	r7, sp, #0
 800e1b8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e1c0:	1c5a      	adds	r2, r3, #1
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	f000 f804 	bl	800e1d6 <USBH_HandleSof>
}
 800e1ce:	bf00      	nop
 800e1d0:	3708      	adds	r7, #8
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}

0800e1d6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800e1d6:	b580      	push	{r7, lr}
 800e1d8:	b082      	sub	sp, #8
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	781b      	ldrb	r3, [r3, #0]
 800e1e2:	b2db      	uxtb	r3, r3
 800e1e4:	2b0b      	cmp	r3, #11
 800e1e6:	d10a      	bne.n	800e1fe <USBH_HandleSof+0x28>
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d005      	beq.n	800e1fe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e1f8:	699b      	ldr	r3, [r3, #24]
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	4798      	blx	r3
  }
}
 800e1fe:	bf00      	nop
 800e200:	3708      	adds	r7, #8
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}

0800e206 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800e206:	b480      	push	{r7}
 800e208:	b083      	sub	sp, #12
 800e20a:	af00      	add	r7, sp, #0
 800e20c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2201      	movs	r2, #1
 800e212:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800e216:	bf00      	nop
}
 800e218:	370c      	adds	r7, #12
 800e21a:	46bd      	mov	sp, r7
 800e21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e220:	4770      	bx	lr

0800e222 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800e222:	b480      	push	{r7}
 800e224:	b083      	sub	sp, #12
 800e226:	af00      	add	r7, sp, #0
 800e228:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2200      	movs	r2, #0
 800e22e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800e232:	bf00      	nop
}
 800e234:	370c      	adds	r7, #12
 800e236:	46bd      	mov	sp, r7
 800e238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23c:	4770      	bx	lr

0800e23e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800e23e:	b480      	push	{r7}
 800e240:	b083      	sub	sp, #12
 800e242:	af00      	add	r7, sp, #0
 800e244:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2201      	movs	r2, #1
 800e24a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2200      	movs	r2, #0
 800e252:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2200      	movs	r2, #0
 800e25a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800e25e:	2300      	movs	r3, #0
}
 800e260:	4618      	mov	r0, r3
 800e262:	370c      	adds	r7, #12
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr

0800e26c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2201      	movs	r2, #1
 800e278:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2200      	movs	r2, #0
 800e280:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2200      	movs	r2, #0
 800e288:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f000 ff56 	bl	800f13e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	791b      	ldrb	r3, [r3, #4]
 800e296:	4619      	mov	r1, r3
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f000 fda3 	bl	800ede4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	795b      	ldrb	r3, [r3, #5]
 800e2a2:	4619      	mov	r1, r3
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f000 fd9d 	bl	800ede4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800e2aa:	2300      	movs	r3, #0
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3708      	adds	r7, #8
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b086      	sub	sp, #24
 800e2b8:	af02      	add	r7, sp, #8
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	460b      	mov	r3, r1
 800e2be:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800e2c6:	78fb      	ldrb	r3, [r7, #3]
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	9300      	str	r3, [sp, #0]
 800e2cc:	4613      	mov	r3, r2
 800e2ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e2d2:	2100      	movs	r1, #0
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f000 f864 	bl	800e3a2 <USBH_GetDescriptor>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	73fb      	strb	r3, [r7, #15]
 800e2de:	7bfb      	ldrb	r3, [r7, #15]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d10a      	bne.n	800e2fa <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f203 3026 	addw	r0, r3, #806	; 0x326
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e2f0:	78fa      	ldrb	r2, [r7, #3]
 800e2f2:	b292      	uxth	r2, r2
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	f000 f918 	bl	800e52a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800e2fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3710      	adds	r7, #16
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}

0800e304 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800e304:	b580      	push	{r7, lr}
 800e306:	b086      	sub	sp, #24
 800e308:	af02      	add	r7, sp, #8
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	460b      	mov	r3, r1
 800e30e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	331c      	adds	r3, #28
 800e314:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800e316:	887b      	ldrh	r3, [r7, #2]
 800e318:	9300      	str	r3, [sp, #0]
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e320:	2100      	movs	r1, #0
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f000 f83d 	bl	800e3a2 <USBH_GetDescriptor>
 800e328:	4603      	mov	r3, r0
 800e32a:	72fb      	strb	r3, [r7, #11]
 800e32c:	7afb      	ldrb	r3, [r7, #11]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d107      	bne.n	800e342 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e338:	887a      	ldrh	r2, [r7, #2]
 800e33a:	68f9      	ldr	r1, [r7, #12]
 800e33c:	4618      	mov	r0, r3
 800e33e:	f000 f964 	bl	800e60a <USBH_ParseCfgDesc>
  }

  return status;
 800e342:	7afb      	ldrb	r3, [r7, #11]
}
 800e344:	4618      	mov	r0, r3
 800e346:	3710      	adds	r7, #16
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}

0800e34c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b088      	sub	sp, #32
 800e350:	af02      	add	r7, sp, #8
 800e352:	60f8      	str	r0, [r7, #12]
 800e354:	607a      	str	r2, [r7, #4]
 800e356:	461a      	mov	r2, r3
 800e358:	460b      	mov	r3, r1
 800e35a:	72fb      	strb	r3, [r7, #11]
 800e35c:	4613      	mov	r3, r2
 800e35e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800e360:	7afb      	ldrb	r3, [r7, #11]
 800e362:	b29b      	uxth	r3, r3
 800e364:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800e368:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800e370:	893b      	ldrh	r3, [r7, #8]
 800e372:	9300      	str	r3, [sp, #0]
 800e374:	460b      	mov	r3, r1
 800e376:	2100      	movs	r1, #0
 800e378:	68f8      	ldr	r0, [r7, #12]
 800e37a:	f000 f812 	bl	800e3a2 <USBH_GetDescriptor>
 800e37e:	4603      	mov	r3, r0
 800e380:	75fb      	strb	r3, [r7, #23]
 800e382:	7dfb      	ldrb	r3, [r7, #23]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d107      	bne.n	800e398 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e38e:	893a      	ldrh	r2, [r7, #8]
 800e390:	6879      	ldr	r1, [r7, #4]
 800e392:	4618      	mov	r0, r3
 800e394:	f000 fa37 	bl	800e806 <USBH_ParseStringDesc>
  }

  return status;
 800e398:	7dfb      	ldrb	r3, [r7, #23]
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3718      	adds	r7, #24
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}

0800e3a2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800e3a2:	b580      	push	{r7, lr}
 800e3a4:	b084      	sub	sp, #16
 800e3a6:	af00      	add	r7, sp, #0
 800e3a8:	60f8      	str	r0, [r7, #12]
 800e3aa:	607b      	str	r3, [r7, #4]
 800e3ac:	460b      	mov	r3, r1
 800e3ae:	72fb      	strb	r3, [r7, #11]
 800e3b0:	4613      	mov	r3, r2
 800e3b2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	789b      	ldrb	r3, [r3, #2]
 800e3b8:	2b01      	cmp	r3, #1
 800e3ba:	d11c      	bne.n	800e3f6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800e3bc:	7afb      	ldrb	r3, [r7, #11]
 800e3be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e3c2:	b2da      	uxtb	r2, r3
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	2206      	movs	r2, #6
 800e3cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	893a      	ldrh	r2, [r7, #8]
 800e3d2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800e3d4:	893b      	ldrh	r3, [r7, #8]
 800e3d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e3da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e3de:	d104      	bne.n	800e3ea <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	f240 4209 	movw	r2, #1033	; 0x409
 800e3e6:	829a      	strh	r2, [r3, #20]
 800e3e8:	e002      	b.n	800e3f0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	8b3a      	ldrh	r2, [r7, #24]
 800e3f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800e3f6:	8b3b      	ldrh	r3, [r7, #24]
 800e3f8:	461a      	mov	r2, r3
 800e3fa:	6879      	ldr	r1, [r7, #4]
 800e3fc:	68f8      	ldr	r0, [r7, #12]
 800e3fe:	f000 fa50 	bl	800e8a2 <USBH_CtlReq>
 800e402:	4603      	mov	r3, r0
}
 800e404:	4618      	mov	r0, r3
 800e406:	3710      	adds	r7, #16
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}

0800e40c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b082      	sub	sp, #8
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
 800e414:	460b      	mov	r3, r1
 800e416:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	789b      	ldrb	r3, [r3, #2]
 800e41c:	2b01      	cmp	r3, #1
 800e41e:	d10f      	bne.n	800e440 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2200      	movs	r2, #0
 800e424:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2205      	movs	r2, #5
 800e42a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800e42c:	78fb      	ldrb	r3, [r7, #3]
 800e42e:	b29a      	uxth	r2, r3
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2200      	movs	r2, #0
 800e438:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2200      	movs	r2, #0
 800e43e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800e440:	2200      	movs	r2, #0
 800e442:	2100      	movs	r1, #0
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f000 fa2c 	bl	800e8a2 <USBH_CtlReq>
 800e44a:	4603      	mov	r3, r0
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3708      	adds	r7, #8
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}

0800e454 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b082      	sub	sp, #8
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	460b      	mov	r3, r1
 800e45e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	789b      	ldrb	r3, [r3, #2]
 800e464:	2b01      	cmp	r3, #1
 800e466:	d10e      	bne.n	800e486 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2200      	movs	r2, #0
 800e46c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2209      	movs	r2, #9
 800e472:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	887a      	ldrh	r2, [r7, #2]
 800e478:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2200      	movs	r2, #0
 800e47e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2200      	movs	r2, #0
 800e484:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800e486:	2200      	movs	r2, #0
 800e488:	2100      	movs	r1, #0
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f000 fa09 	bl	800e8a2 <USBH_CtlReq>
 800e490:	4603      	mov	r3, r0
}
 800e492:	4618      	mov	r0, r3
 800e494:	3708      	adds	r7, #8
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}

0800e49a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800e49a:	b580      	push	{r7, lr}
 800e49c:	b082      	sub	sp, #8
 800e49e:	af00      	add	r7, sp, #0
 800e4a0:	6078      	str	r0, [r7, #4]
 800e4a2:	460b      	mov	r3, r1
 800e4a4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	789b      	ldrb	r3, [r3, #2]
 800e4aa:	2b01      	cmp	r3, #1
 800e4ac:	d10f      	bne.n	800e4ce <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2203      	movs	r2, #3
 800e4b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800e4ba:	78fb      	ldrb	r3, [r7, #3]
 800e4bc:	b29a      	uxth	r2, r3
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	2100      	movs	r1, #0
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f000 f9e5 	bl	800e8a2 <USBH_CtlReq>
 800e4d8:	4603      	mov	r3, r0
}
 800e4da:	4618      	mov	r0, r3
 800e4dc:	3708      	adds	r7, #8
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}

0800e4e2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800e4e2:	b580      	push	{r7, lr}
 800e4e4:	b082      	sub	sp, #8
 800e4e6:	af00      	add	r7, sp, #0
 800e4e8:	6078      	str	r0, [r7, #4]
 800e4ea:	460b      	mov	r3, r1
 800e4ec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	789b      	ldrb	r3, [r3, #2]
 800e4f2:	2b01      	cmp	r3, #1
 800e4f4:	d10f      	bne.n	800e516 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2202      	movs	r2, #2
 800e4fa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2201      	movs	r2, #1
 800e500:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2200      	movs	r2, #0
 800e506:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800e508:	78fb      	ldrb	r3, [r7, #3]
 800e50a:	b29a      	uxth	r2, r3
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2200      	movs	r2, #0
 800e514:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800e516:	2200      	movs	r2, #0
 800e518:	2100      	movs	r1, #0
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f000 f9c1 	bl	800e8a2 <USBH_CtlReq>
 800e520:	4603      	mov	r3, r0
}
 800e522:	4618      	mov	r0, r3
 800e524:	3708      	adds	r7, #8
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}

0800e52a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800e52a:	b480      	push	{r7}
 800e52c:	b085      	sub	sp, #20
 800e52e:	af00      	add	r7, sp, #0
 800e530:	60f8      	str	r0, [r7, #12]
 800e532:	60b9      	str	r1, [r7, #8]
 800e534:	4613      	mov	r3, r2
 800e536:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	781a      	ldrb	r2, [r3, #0]
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	785a      	ldrb	r2, [r3, #1]
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	3302      	adds	r3, #2
 800e54c:	781b      	ldrb	r3, [r3, #0]
 800e54e:	b29a      	uxth	r2, r3
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	3303      	adds	r3, #3
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	b29b      	uxth	r3, r3
 800e558:	021b      	lsls	r3, r3, #8
 800e55a:	b29b      	uxth	r3, r3
 800e55c:	4313      	orrs	r3, r2
 800e55e:	b29a      	uxth	r2, r3
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	791a      	ldrb	r2, [r3, #4]
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	795a      	ldrb	r2, [r3, #5]
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	799a      	ldrb	r2, [r3, #6]
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	79da      	ldrb	r2, [r3, #7]
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800e584:	88fb      	ldrh	r3, [r7, #6]
 800e586:	2b08      	cmp	r3, #8
 800e588:	d939      	bls.n	800e5fe <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	3308      	adds	r3, #8
 800e58e:	781b      	ldrb	r3, [r3, #0]
 800e590:	b29a      	uxth	r2, r3
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	3309      	adds	r3, #9
 800e596:	781b      	ldrb	r3, [r3, #0]
 800e598:	b29b      	uxth	r3, r3
 800e59a:	021b      	lsls	r3, r3, #8
 800e59c:	b29b      	uxth	r3, r3
 800e59e:	4313      	orrs	r3, r2
 800e5a0:	b29a      	uxth	r2, r3
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	330a      	adds	r3, #10
 800e5aa:	781b      	ldrb	r3, [r3, #0]
 800e5ac:	b29a      	uxth	r2, r3
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	330b      	adds	r3, #11
 800e5b2:	781b      	ldrb	r3, [r3, #0]
 800e5b4:	b29b      	uxth	r3, r3
 800e5b6:	021b      	lsls	r3, r3, #8
 800e5b8:	b29b      	uxth	r3, r3
 800e5ba:	4313      	orrs	r3, r2
 800e5bc:	b29a      	uxth	r2, r3
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	330c      	adds	r3, #12
 800e5c6:	781b      	ldrb	r3, [r3, #0]
 800e5c8:	b29a      	uxth	r2, r3
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	330d      	adds	r3, #13
 800e5ce:	781b      	ldrb	r3, [r3, #0]
 800e5d0:	b29b      	uxth	r3, r3
 800e5d2:	021b      	lsls	r3, r3, #8
 800e5d4:	b29b      	uxth	r3, r3
 800e5d6:	4313      	orrs	r3, r2
 800e5d8:	b29a      	uxth	r2, r3
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	7b9a      	ldrb	r2, [r3, #14]
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	7bda      	ldrb	r2, [r3, #15]
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	7c1a      	ldrb	r2, [r3, #16]
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	7c5a      	ldrb	r2, [r3, #17]
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	745a      	strb	r2, [r3, #17]
  }
}
 800e5fe:	bf00      	nop
 800e600:	3714      	adds	r7, #20
 800e602:	46bd      	mov	sp, r7
 800e604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e608:	4770      	bx	lr

0800e60a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800e60a:	b580      	push	{r7, lr}
 800e60c:	b08a      	sub	sp, #40	; 0x28
 800e60e:	af00      	add	r7, sp, #0
 800e610:	60f8      	str	r0, [r7, #12]
 800e612:	60b9      	str	r1, [r7, #8]
 800e614:	4613      	mov	r3, r2
 800e616:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800e61c:	2300      	movs	r3, #0
 800e61e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800e622:	2300      	movs	r3, #0
 800e624:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	781a      	ldrb	r2, [r3, #0]
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	785a      	ldrb	r2, [r3, #1]
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	3302      	adds	r3, #2
 800e640:	781b      	ldrb	r3, [r3, #0]
 800e642:	b29a      	uxth	r2, r3
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	3303      	adds	r3, #3
 800e648:	781b      	ldrb	r3, [r3, #0]
 800e64a:	b29b      	uxth	r3, r3
 800e64c:	021b      	lsls	r3, r3, #8
 800e64e:	b29b      	uxth	r3, r3
 800e650:	4313      	orrs	r3, r2
 800e652:	b29a      	uxth	r2, r3
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	791a      	ldrb	r2, [r3, #4]
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	795a      	ldrb	r2, [r3, #5]
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	799a      	ldrb	r2, [r3, #6]
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	79da      	ldrb	r2, [r3, #7]
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	7a1a      	ldrb	r2, [r3, #8]
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800e680:	88fb      	ldrh	r3, [r7, #6]
 800e682:	2b09      	cmp	r3, #9
 800e684:	d95f      	bls.n	800e746 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800e686:	2309      	movs	r3, #9
 800e688:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800e68a:	2300      	movs	r3, #0
 800e68c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e68e:	e051      	b.n	800e734 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e690:	f107 0316 	add.w	r3, r7, #22
 800e694:	4619      	mov	r1, r3
 800e696:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e698:	f000 f8e8 	bl	800e86c <USBH_GetNextDesc>
 800e69c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800e69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a0:	785b      	ldrb	r3, [r3, #1]
 800e6a2:	2b04      	cmp	r3, #4
 800e6a4:	d146      	bne.n	800e734 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800e6a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e6aa:	221a      	movs	r2, #26
 800e6ac:	fb02 f303 	mul.w	r3, r2, r3
 800e6b0:	3308      	adds	r3, #8
 800e6b2:	68fa      	ldr	r2, [r7, #12]
 800e6b4:	4413      	add	r3, r2
 800e6b6:	3302      	adds	r3, #2
 800e6b8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800e6ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e6bc:	69f8      	ldr	r0, [r7, #28]
 800e6be:	f000 f846 	bl	800e74e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e6cc:	e022      	b.n	800e714 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e6ce:	f107 0316 	add.w	r3, r7, #22
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e6d6:	f000 f8c9 	bl	800e86c <USBH_GetNextDesc>
 800e6da:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800e6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6de:	785b      	ldrb	r3, [r3, #1]
 800e6e0:	2b05      	cmp	r3, #5
 800e6e2:	d117      	bne.n	800e714 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800e6e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e6e8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800e6ec:	3201      	adds	r2, #1
 800e6ee:	00d2      	lsls	r2, r2, #3
 800e6f0:	211a      	movs	r1, #26
 800e6f2:	fb01 f303 	mul.w	r3, r1, r3
 800e6f6:	4413      	add	r3, r2
 800e6f8:	3308      	adds	r3, #8
 800e6fa:	68fa      	ldr	r2, [r7, #12]
 800e6fc:	4413      	add	r3, r2
 800e6fe:	3304      	adds	r3, #4
 800e700:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800e702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e704:	69b8      	ldr	r0, [r7, #24]
 800e706:	f000 f851 	bl	800e7ac <USBH_ParseEPDesc>
            ep_ix++;
 800e70a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e70e:	3301      	adds	r3, #1
 800e710:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e714:	69fb      	ldr	r3, [r7, #28]
 800e716:	791b      	ldrb	r3, [r3, #4]
 800e718:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d204      	bcs.n	800e72a <USBH_ParseCfgDesc+0x120>
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	885a      	ldrh	r2, [r3, #2]
 800e724:	8afb      	ldrh	r3, [r7, #22]
 800e726:	429a      	cmp	r2, r3
 800e728:	d8d1      	bhi.n	800e6ce <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800e72a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e72e:	3301      	adds	r3, #1
 800e730:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e734:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e738:	2b01      	cmp	r3, #1
 800e73a:	d804      	bhi.n	800e746 <USBH_ParseCfgDesc+0x13c>
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	885a      	ldrh	r2, [r3, #2]
 800e740:	8afb      	ldrh	r3, [r7, #22]
 800e742:	429a      	cmp	r2, r3
 800e744:	d8a4      	bhi.n	800e690 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800e746:	bf00      	nop
 800e748:	3728      	adds	r7, #40	; 0x28
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}

0800e74e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800e74e:	b480      	push	{r7}
 800e750:	b083      	sub	sp, #12
 800e752:	af00      	add	r7, sp, #0
 800e754:	6078      	str	r0, [r7, #4]
 800e756:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	781a      	ldrb	r2, [r3, #0]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	785a      	ldrb	r2, [r3, #1]
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	789a      	ldrb	r2, [r3, #2]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	78da      	ldrb	r2, [r3, #3]
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	791a      	ldrb	r2, [r3, #4]
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	795a      	ldrb	r2, [r3, #5]
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	799a      	ldrb	r2, [r3, #6]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	79da      	ldrb	r2, [r3, #7]
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	7a1a      	ldrb	r2, [r3, #8]
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	721a      	strb	r2, [r3, #8]
}
 800e7a0:	bf00      	nop
 800e7a2:	370c      	adds	r7, #12
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7aa:	4770      	bx	lr

0800e7ac <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	b083      	sub	sp, #12
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
 800e7b4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	781a      	ldrb	r2, [r3, #0]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	785a      	ldrb	r2, [r3, #1]
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	789a      	ldrb	r2, [r3, #2]
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	78da      	ldrb	r2, [r3, #3]
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	3304      	adds	r3, #4
 800e7da:	781b      	ldrb	r3, [r3, #0]
 800e7dc:	b29a      	uxth	r2, r3
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	3305      	adds	r3, #5
 800e7e2:	781b      	ldrb	r3, [r3, #0]
 800e7e4:	b29b      	uxth	r3, r3
 800e7e6:	021b      	lsls	r3, r3, #8
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	4313      	orrs	r3, r2
 800e7ec:	b29a      	uxth	r2, r3
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	799a      	ldrb	r2, [r3, #6]
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	719a      	strb	r2, [r3, #6]
}
 800e7fa:	bf00      	nop
 800e7fc:	370c      	adds	r7, #12
 800e7fe:	46bd      	mov	sp, r7
 800e800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e804:	4770      	bx	lr

0800e806 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e806:	b480      	push	{r7}
 800e808:	b087      	sub	sp, #28
 800e80a:	af00      	add	r7, sp, #0
 800e80c:	60f8      	str	r0, [r7, #12]
 800e80e:	60b9      	str	r1, [r7, #8]
 800e810:	4613      	mov	r3, r2
 800e812:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	3301      	adds	r3, #1
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	2b03      	cmp	r3, #3
 800e81c:	d120      	bne.n	800e860 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	781b      	ldrb	r3, [r3, #0]
 800e822:	1e9a      	subs	r2, r3, #2
 800e824:	88fb      	ldrh	r3, [r7, #6]
 800e826:	4293      	cmp	r3, r2
 800e828:	bf28      	it	cs
 800e82a:	4613      	movcs	r3, r2
 800e82c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	3302      	adds	r3, #2
 800e832:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e834:	2300      	movs	r3, #0
 800e836:	82fb      	strh	r3, [r7, #22]
 800e838:	e00b      	b.n	800e852 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e83a:	8afb      	ldrh	r3, [r7, #22]
 800e83c:	68fa      	ldr	r2, [r7, #12]
 800e83e:	4413      	add	r3, r2
 800e840:	781a      	ldrb	r2, [r3, #0]
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	3301      	adds	r3, #1
 800e84a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e84c:	8afb      	ldrh	r3, [r7, #22]
 800e84e:	3302      	adds	r3, #2
 800e850:	82fb      	strh	r3, [r7, #22]
 800e852:	8afa      	ldrh	r2, [r7, #22]
 800e854:	8abb      	ldrh	r3, [r7, #20]
 800e856:	429a      	cmp	r2, r3
 800e858:	d3ef      	bcc.n	800e83a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	2200      	movs	r2, #0
 800e85e:	701a      	strb	r2, [r3, #0]
  }
}
 800e860:	bf00      	nop
 800e862:	371c      	adds	r7, #28
 800e864:	46bd      	mov	sp, r7
 800e866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86a:	4770      	bx	lr

0800e86c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800e86c:	b480      	push	{r7}
 800e86e:	b085      	sub	sp, #20
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	881a      	ldrh	r2, [r3, #0]
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	781b      	ldrb	r3, [r3, #0]
 800e87e:	b29b      	uxth	r3, r3
 800e880:	4413      	add	r3, r2
 800e882:	b29a      	uxth	r2, r3
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	781b      	ldrb	r3, [r3, #0]
 800e88c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	4413      	add	r3, r2
 800e892:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e894:	68fb      	ldr	r3, [r7, #12]
}
 800e896:	4618      	mov	r0, r3
 800e898:	3714      	adds	r7, #20
 800e89a:	46bd      	mov	sp, r7
 800e89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a0:	4770      	bx	lr

0800e8a2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e8a2:	b580      	push	{r7, lr}
 800e8a4:	b086      	sub	sp, #24
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	60f8      	str	r0, [r7, #12]
 800e8aa:	60b9      	str	r1, [r7, #8]
 800e8ac:	4613      	mov	r3, r2
 800e8ae:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	789b      	ldrb	r3, [r3, #2]
 800e8b8:	2b01      	cmp	r3, #1
 800e8ba:	d002      	beq.n	800e8c2 <USBH_CtlReq+0x20>
 800e8bc:	2b02      	cmp	r3, #2
 800e8be:	d00f      	beq.n	800e8e0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800e8c0:	e027      	b.n	800e912 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	68ba      	ldr	r2, [r7, #8]
 800e8c6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	88fa      	ldrh	r2, [r7, #6]
 800e8cc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	2201      	movs	r2, #1
 800e8d2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	2202      	movs	r2, #2
 800e8d8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e8da:	2301      	movs	r3, #1
 800e8dc:	75fb      	strb	r3, [r7, #23]
      break;
 800e8de:	e018      	b.n	800e912 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800e8e0:	68f8      	ldr	r0, [r7, #12]
 800e8e2:	f000 f81b 	bl	800e91c <USBH_HandleControl>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e8ea:	7dfb      	ldrb	r3, [r7, #23]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d002      	beq.n	800e8f6 <USBH_CtlReq+0x54>
 800e8f0:	7dfb      	ldrb	r3, [r7, #23]
 800e8f2:	2b03      	cmp	r3, #3
 800e8f4:	d106      	bne.n	800e904 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2201      	movs	r2, #1
 800e8fa:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	2200      	movs	r2, #0
 800e900:	761a      	strb	r2, [r3, #24]
      break;
 800e902:	e005      	b.n	800e910 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800e904:	7dfb      	ldrb	r3, [r7, #23]
 800e906:	2b02      	cmp	r3, #2
 800e908:	d102      	bne.n	800e910 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	2201      	movs	r2, #1
 800e90e:	709a      	strb	r2, [r3, #2]
      break;
 800e910:	bf00      	nop
  }
  return status;
 800e912:	7dfb      	ldrb	r3, [r7, #23]
}
 800e914:	4618      	mov	r0, r3
 800e916:	3718      	adds	r7, #24
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}

0800e91c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b086      	sub	sp, #24
 800e920:	af02      	add	r7, sp, #8
 800e922:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e924:	2301      	movs	r3, #1
 800e926:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e928:	2300      	movs	r3, #0
 800e92a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	7e1b      	ldrb	r3, [r3, #24]
 800e930:	3b01      	subs	r3, #1
 800e932:	2b0a      	cmp	r3, #10
 800e934:	f200 8156 	bhi.w	800ebe4 <USBH_HandleControl+0x2c8>
 800e938:	a201      	add	r2, pc, #4	; (adr r2, 800e940 <USBH_HandleControl+0x24>)
 800e93a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e93e:	bf00      	nop
 800e940:	0800e96d 	.word	0x0800e96d
 800e944:	0800e987 	.word	0x0800e987
 800e948:	0800e9f1 	.word	0x0800e9f1
 800e94c:	0800ea17 	.word	0x0800ea17
 800e950:	0800ea4f 	.word	0x0800ea4f
 800e954:	0800ea79 	.word	0x0800ea79
 800e958:	0800eacb 	.word	0x0800eacb
 800e95c:	0800eaed 	.word	0x0800eaed
 800e960:	0800eb29 	.word	0x0800eb29
 800e964:	0800eb4f 	.word	0x0800eb4f
 800e968:	0800eb8d 	.word	0x0800eb8d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	f103 0110 	add.w	r1, r3, #16
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	795b      	ldrb	r3, [r3, #5]
 800e976:	461a      	mov	r2, r3
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f000 f943 	bl	800ec04 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2202      	movs	r2, #2
 800e982:	761a      	strb	r2, [r3, #24]
      break;
 800e984:	e139      	b.n	800ebfa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	795b      	ldrb	r3, [r3, #5]
 800e98a:	4619      	mov	r1, r3
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f000 fcc5 	bl	800f31c <USBH_LL_GetURBState>
 800e992:	4603      	mov	r3, r0
 800e994:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e996:	7bbb      	ldrb	r3, [r7, #14]
 800e998:	2b01      	cmp	r3, #1
 800e99a:	d11e      	bne.n	800e9da <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	7c1b      	ldrb	r3, [r3, #16]
 800e9a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e9a4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	8adb      	ldrh	r3, [r3, #22]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d00a      	beq.n	800e9c4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e9ae:	7b7b      	ldrb	r3, [r7, #13]
 800e9b0:	2b80      	cmp	r3, #128	; 0x80
 800e9b2:	d103      	bne.n	800e9bc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2203      	movs	r2, #3
 800e9b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e9ba:	e115      	b.n	800ebe8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2205      	movs	r2, #5
 800e9c0:	761a      	strb	r2, [r3, #24]
      break;
 800e9c2:	e111      	b.n	800ebe8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800e9c4:	7b7b      	ldrb	r3, [r7, #13]
 800e9c6:	2b80      	cmp	r3, #128	; 0x80
 800e9c8:	d103      	bne.n	800e9d2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2209      	movs	r2, #9
 800e9ce:	761a      	strb	r2, [r3, #24]
      break;
 800e9d0:	e10a      	b.n	800ebe8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	2207      	movs	r2, #7
 800e9d6:	761a      	strb	r2, [r3, #24]
      break;
 800e9d8:	e106      	b.n	800ebe8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e9da:	7bbb      	ldrb	r3, [r7, #14]
 800e9dc:	2b04      	cmp	r3, #4
 800e9de:	d003      	beq.n	800e9e8 <USBH_HandleControl+0xcc>
 800e9e0:	7bbb      	ldrb	r3, [r7, #14]
 800e9e2:	2b02      	cmp	r3, #2
 800e9e4:	f040 8100 	bne.w	800ebe8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	220b      	movs	r2, #11
 800e9ec:	761a      	strb	r2, [r3, #24]
      break;
 800e9ee:	e0fb      	b.n	800ebe8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e9f6:	b29a      	uxth	r2, r3
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6899      	ldr	r1, [r3, #8]
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	899a      	ldrh	r2, [r3, #12]
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	791b      	ldrb	r3, [r3, #4]
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f000 f93a 	bl	800ec82 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2204      	movs	r2, #4
 800ea12:	761a      	strb	r2, [r3, #24]
      break;
 800ea14:	e0f1      	b.n	800ebfa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	791b      	ldrb	r3, [r3, #4]
 800ea1a:	4619      	mov	r1, r3
 800ea1c:	6878      	ldr	r0, [r7, #4]
 800ea1e:	f000 fc7d 	bl	800f31c <USBH_LL_GetURBState>
 800ea22:	4603      	mov	r3, r0
 800ea24:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ea26:	7bbb      	ldrb	r3, [r7, #14]
 800ea28:	2b01      	cmp	r3, #1
 800ea2a:	d102      	bne.n	800ea32 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2209      	movs	r2, #9
 800ea30:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ea32:	7bbb      	ldrb	r3, [r7, #14]
 800ea34:	2b05      	cmp	r3, #5
 800ea36:	d102      	bne.n	800ea3e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ea38:	2303      	movs	r3, #3
 800ea3a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ea3c:	e0d6      	b.n	800ebec <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ea3e:	7bbb      	ldrb	r3, [r7, #14]
 800ea40:	2b04      	cmp	r3, #4
 800ea42:	f040 80d3 	bne.w	800ebec <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	220b      	movs	r2, #11
 800ea4a:	761a      	strb	r2, [r3, #24]
      break;
 800ea4c:	e0ce      	b.n	800ebec <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6899      	ldr	r1, [r3, #8]
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	899a      	ldrh	r2, [r3, #12]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	795b      	ldrb	r3, [r3, #5]
 800ea5a:	2001      	movs	r0, #1
 800ea5c:	9000      	str	r0, [sp, #0]
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f000 f8ea 	bl	800ec38 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ea6a:	b29a      	uxth	r2, r3
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2206      	movs	r2, #6
 800ea74:	761a      	strb	r2, [r3, #24]
      break;
 800ea76:	e0c0      	b.n	800ebfa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	795b      	ldrb	r3, [r3, #5]
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f000 fc4c 	bl	800f31c <USBH_LL_GetURBState>
 800ea84:	4603      	mov	r3, r0
 800ea86:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ea88:	7bbb      	ldrb	r3, [r7, #14]
 800ea8a:	2b01      	cmp	r3, #1
 800ea8c:	d103      	bne.n	800ea96 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2207      	movs	r2, #7
 800ea92:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ea94:	e0ac      	b.n	800ebf0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ea96:	7bbb      	ldrb	r3, [r7, #14]
 800ea98:	2b05      	cmp	r3, #5
 800ea9a:	d105      	bne.n	800eaa8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	220c      	movs	r2, #12
 800eaa0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800eaa2:	2303      	movs	r3, #3
 800eaa4:	73fb      	strb	r3, [r7, #15]
      break;
 800eaa6:	e0a3      	b.n	800ebf0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800eaa8:	7bbb      	ldrb	r3, [r7, #14]
 800eaaa:	2b02      	cmp	r3, #2
 800eaac:	d103      	bne.n	800eab6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2205      	movs	r2, #5
 800eab2:	761a      	strb	r2, [r3, #24]
      break;
 800eab4:	e09c      	b.n	800ebf0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800eab6:	7bbb      	ldrb	r3, [r7, #14]
 800eab8:	2b04      	cmp	r3, #4
 800eaba:	f040 8099 	bne.w	800ebf0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	220b      	movs	r2, #11
 800eac2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800eac4:	2302      	movs	r3, #2
 800eac6:	73fb      	strb	r3, [r7, #15]
      break;
 800eac8:	e092      	b.n	800ebf0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	791b      	ldrb	r3, [r3, #4]
 800eace:	2200      	movs	r2, #0
 800ead0:	2100      	movs	r1, #0
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f000 f8d5 	bl	800ec82 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800eade:	b29a      	uxth	r2, r3
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2208      	movs	r2, #8
 800eae8:	761a      	strb	r2, [r3, #24]

      break;
 800eaea:	e086      	b.n	800ebfa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	791b      	ldrb	r3, [r3, #4]
 800eaf0:	4619      	mov	r1, r3
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f000 fc12 	bl	800f31c <USBH_LL_GetURBState>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800eafc:	7bbb      	ldrb	r3, [r7, #14]
 800eafe:	2b01      	cmp	r3, #1
 800eb00:	d105      	bne.n	800eb0e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	220d      	movs	r2, #13
 800eb06:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800eb0c:	e072      	b.n	800ebf4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800eb0e:	7bbb      	ldrb	r3, [r7, #14]
 800eb10:	2b04      	cmp	r3, #4
 800eb12:	d103      	bne.n	800eb1c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	220b      	movs	r2, #11
 800eb18:	761a      	strb	r2, [r3, #24]
      break;
 800eb1a:	e06b      	b.n	800ebf4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800eb1c:	7bbb      	ldrb	r3, [r7, #14]
 800eb1e:	2b05      	cmp	r3, #5
 800eb20:	d168      	bne.n	800ebf4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800eb22:	2303      	movs	r3, #3
 800eb24:	73fb      	strb	r3, [r7, #15]
      break;
 800eb26:	e065      	b.n	800ebf4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	795b      	ldrb	r3, [r3, #5]
 800eb2c:	2201      	movs	r2, #1
 800eb2e:	9200      	str	r2, [sp, #0]
 800eb30:	2200      	movs	r2, #0
 800eb32:	2100      	movs	r1, #0
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f000 f87f 	bl	800ec38 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800eb40:	b29a      	uxth	r2, r3
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	220a      	movs	r2, #10
 800eb4a:	761a      	strb	r2, [r3, #24]
      break;
 800eb4c:	e055      	b.n	800ebfa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	795b      	ldrb	r3, [r3, #5]
 800eb52:	4619      	mov	r1, r3
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f000 fbe1 	bl	800f31c <USBH_LL_GetURBState>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800eb5e:	7bbb      	ldrb	r3, [r7, #14]
 800eb60:	2b01      	cmp	r3, #1
 800eb62:	d105      	bne.n	800eb70 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800eb64:	2300      	movs	r3, #0
 800eb66:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	220d      	movs	r2, #13
 800eb6c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800eb6e:	e043      	b.n	800ebf8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800eb70:	7bbb      	ldrb	r3, [r7, #14]
 800eb72:	2b02      	cmp	r3, #2
 800eb74:	d103      	bne.n	800eb7e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2209      	movs	r2, #9
 800eb7a:	761a      	strb	r2, [r3, #24]
      break;
 800eb7c:	e03c      	b.n	800ebf8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800eb7e:	7bbb      	ldrb	r3, [r7, #14]
 800eb80:	2b04      	cmp	r3, #4
 800eb82:	d139      	bne.n	800ebf8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	220b      	movs	r2, #11
 800eb88:	761a      	strb	r2, [r3, #24]
      break;
 800eb8a:	e035      	b.n	800ebf8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	7e5b      	ldrb	r3, [r3, #25]
 800eb90:	3301      	adds	r3, #1
 800eb92:	b2da      	uxtb	r2, r3
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	765a      	strb	r2, [r3, #25]
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	7e5b      	ldrb	r3, [r3, #25]
 800eb9c:	2b02      	cmp	r3, #2
 800eb9e:	d806      	bhi.n	800ebae <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2201      	movs	r2, #1
 800eba4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2201      	movs	r2, #1
 800ebaa:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ebac:	e025      	b.n	800ebfa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ebb4:	2106      	movs	r1, #6
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	795b      	ldrb	r3, [r3, #5]
 800ebc4:	4619      	mov	r1, r3
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	f000 f90c 	bl	800ede4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	791b      	ldrb	r3, [r3, #4]
 800ebd0:	4619      	mov	r1, r3
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f000 f906 	bl	800ede4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ebde:	2302      	movs	r3, #2
 800ebe0:	73fb      	strb	r3, [r7, #15]
      break;
 800ebe2:	e00a      	b.n	800ebfa <USBH_HandleControl+0x2de>

    default:
      break;
 800ebe4:	bf00      	nop
 800ebe6:	e008      	b.n	800ebfa <USBH_HandleControl+0x2de>
      break;
 800ebe8:	bf00      	nop
 800ebea:	e006      	b.n	800ebfa <USBH_HandleControl+0x2de>
      break;
 800ebec:	bf00      	nop
 800ebee:	e004      	b.n	800ebfa <USBH_HandleControl+0x2de>
      break;
 800ebf0:	bf00      	nop
 800ebf2:	e002      	b.n	800ebfa <USBH_HandleControl+0x2de>
      break;
 800ebf4:	bf00      	nop
 800ebf6:	e000      	b.n	800ebfa <USBH_HandleControl+0x2de>
      break;
 800ebf8:	bf00      	nop
  }

  return status;
 800ebfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3710      	adds	r7, #16
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}

0800ec04 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b088      	sub	sp, #32
 800ec08:	af04      	add	r7, sp, #16
 800ec0a:	60f8      	str	r0, [r7, #12]
 800ec0c:	60b9      	str	r1, [r7, #8]
 800ec0e:	4613      	mov	r3, r2
 800ec10:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ec12:	79f9      	ldrb	r1, [r7, #7]
 800ec14:	2300      	movs	r3, #0
 800ec16:	9303      	str	r3, [sp, #12]
 800ec18:	2308      	movs	r3, #8
 800ec1a:	9302      	str	r3, [sp, #8]
 800ec1c:	68bb      	ldr	r3, [r7, #8]
 800ec1e:	9301      	str	r3, [sp, #4]
 800ec20:	2300      	movs	r3, #0
 800ec22:	9300      	str	r3, [sp, #0]
 800ec24:	2300      	movs	r3, #0
 800ec26:	2200      	movs	r2, #0
 800ec28:	68f8      	ldr	r0, [r7, #12]
 800ec2a:	f000 fb46 	bl	800f2ba <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800ec2e:	2300      	movs	r3, #0
}
 800ec30:	4618      	mov	r0, r3
 800ec32:	3710      	adds	r7, #16
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b088      	sub	sp, #32
 800ec3c:	af04      	add	r7, sp, #16
 800ec3e:	60f8      	str	r0, [r7, #12]
 800ec40:	60b9      	str	r1, [r7, #8]
 800ec42:	4611      	mov	r1, r2
 800ec44:	461a      	mov	r2, r3
 800ec46:	460b      	mov	r3, r1
 800ec48:	80fb      	strh	r3, [r7, #6]
 800ec4a:	4613      	mov	r3, r2
 800ec4c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d001      	beq.n	800ec5c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ec5c:	7979      	ldrb	r1, [r7, #5]
 800ec5e:	7e3b      	ldrb	r3, [r7, #24]
 800ec60:	9303      	str	r3, [sp, #12]
 800ec62:	88fb      	ldrh	r3, [r7, #6]
 800ec64:	9302      	str	r3, [sp, #8]
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	9301      	str	r3, [sp, #4]
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	9300      	str	r3, [sp, #0]
 800ec6e:	2300      	movs	r3, #0
 800ec70:	2200      	movs	r2, #0
 800ec72:	68f8      	ldr	r0, [r7, #12]
 800ec74:	f000 fb21 	bl	800f2ba <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ec78:	2300      	movs	r3, #0
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3710      	adds	r7, #16
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}

0800ec82 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ec82:	b580      	push	{r7, lr}
 800ec84:	b088      	sub	sp, #32
 800ec86:	af04      	add	r7, sp, #16
 800ec88:	60f8      	str	r0, [r7, #12]
 800ec8a:	60b9      	str	r1, [r7, #8]
 800ec8c:	4611      	mov	r1, r2
 800ec8e:	461a      	mov	r2, r3
 800ec90:	460b      	mov	r3, r1
 800ec92:	80fb      	strh	r3, [r7, #6]
 800ec94:	4613      	mov	r3, r2
 800ec96:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ec98:	7979      	ldrb	r1, [r7, #5]
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	9303      	str	r3, [sp, #12]
 800ec9e:	88fb      	ldrh	r3, [r7, #6]
 800eca0:	9302      	str	r3, [sp, #8]
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	9301      	str	r3, [sp, #4]
 800eca6:	2301      	movs	r3, #1
 800eca8:	9300      	str	r3, [sp, #0]
 800ecaa:	2300      	movs	r3, #0
 800ecac:	2201      	movs	r2, #1
 800ecae:	68f8      	ldr	r0, [r7, #12]
 800ecb0:	f000 fb03 	bl	800f2ba <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ecb4:	2300      	movs	r3, #0

}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3710      	adds	r7, #16
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}

0800ecbe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ecbe:	b580      	push	{r7, lr}
 800ecc0:	b088      	sub	sp, #32
 800ecc2:	af04      	add	r7, sp, #16
 800ecc4:	60f8      	str	r0, [r7, #12]
 800ecc6:	60b9      	str	r1, [r7, #8]
 800ecc8:	4611      	mov	r1, r2
 800ecca:	461a      	mov	r2, r3
 800eccc:	460b      	mov	r3, r1
 800ecce:	80fb      	strh	r3, [r7, #6]
 800ecd0:	4613      	mov	r3, r2
 800ecd2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d001      	beq.n	800ece2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ecde:	2300      	movs	r3, #0
 800ece0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ece2:	7979      	ldrb	r1, [r7, #5]
 800ece4:	7e3b      	ldrb	r3, [r7, #24]
 800ece6:	9303      	str	r3, [sp, #12]
 800ece8:	88fb      	ldrh	r3, [r7, #6]
 800ecea:	9302      	str	r3, [sp, #8]
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	9301      	str	r3, [sp, #4]
 800ecf0:	2301      	movs	r3, #1
 800ecf2:	9300      	str	r3, [sp, #0]
 800ecf4:	2302      	movs	r3, #2
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	68f8      	ldr	r0, [r7, #12]
 800ecfa:	f000 fade 	bl	800f2ba <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ecfe:	2300      	movs	r3, #0
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	3710      	adds	r7, #16
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}

0800ed08 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b088      	sub	sp, #32
 800ed0c:	af04      	add	r7, sp, #16
 800ed0e:	60f8      	str	r0, [r7, #12]
 800ed10:	60b9      	str	r1, [r7, #8]
 800ed12:	4611      	mov	r1, r2
 800ed14:	461a      	mov	r2, r3
 800ed16:	460b      	mov	r3, r1
 800ed18:	80fb      	strh	r3, [r7, #6]
 800ed1a:	4613      	mov	r3, r2
 800ed1c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ed1e:	7979      	ldrb	r1, [r7, #5]
 800ed20:	2300      	movs	r3, #0
 800ed22:	9303      	str	r3, [sp, #12]
 800ed24:	88fb      	ldrh	r3, [r7, #6]
 800ed26:	9302      	str	r3, [sp, #8]
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	9301      	str	r3, [sp, #4]
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	9300      	str	r3, [sp, #0]
 800ed30:	2302      	movs	r3, #2
 800ed32:	2201      	movs	r2, #1
 800ed34:	68f8      	ldr	r0, [r7, #12]
 800ed36:	f000 fac0 	bl	800f2ba <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ed3a:	2300      	movs	r3, #0
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3710      	adds	r7, #16
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}

0800ed44 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b086      	sub	sp, #24
 800ed48:	af04      	add	r7, sp, #16
 800ed4a:	6078      	str	r0, [r7, #4]
 800ed4c:	4608      	mov	r0, r1
 800ed4e:	4611      	mov	r1, r2
 800ed50:	461a      	mov	r2, r3
 800ed52:	4603      	mov	r3, r0
 800ed54:	70fb      	strb	r3, [r7, #3]
 800ed56:	460b      	mov	r3, r1
 800ed58:	70bb      	strb	r3, [r7, #2]
 800ed5a:	4613      	mov	r3, r2
 800ed5c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ed5e:	7878      	ldrb	r0, [r7, #1]
 800ed60:	78ba      	ldrb	r2, [r7, #2]
 800ed62:	78f9      	ldrb	r1, [r7, #3]
 800ed64:	8b3b      	ldrh	r3, [r7, #24]
 800ed66:	9302      	str	r3, [sp, #8]
 800ed68:	7d3b      	ldrb	r3, [r7, #20]
 800ed6a:	9301      	str	r3, [sp, #4]
 800ed6c:	7c3b      	ldrb	r3, [r7, #16]
 800ed6e:	9300      	str	r3, [sp, #0]
 800ed70:	4603      	mov	r3, r0
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f000 fa53 	bl	800f21e <USBH_LL_OpenPipe>

  return USBH_OK;
 800ed78:	2300      	movs	r3, #0
}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	3708      	adds	r7, #8
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bd80      	pop	{r7, pc}

0800ed82 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ed82:	b580      	push	{r7, lr}
 800ed84:	b082      	sub	sp, #8
 800ed86:	af00      	add	r7, sp, #0
 800ed88:	6078      	str	r0, [r7, #4]
 800ed8a:	460b      	mov	r3, r1
 800ed8c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800ed8e:	78fb      	ldrb	r3, [r7, #3]
 800ed90:	4619      	mov	r1, r3
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f000 fa72 	bl	800f27c <USBH_LL_ClosePipe>

  return USBH_OK;
 800ed98:	2300      	movs	r3, #0
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3708      	adds	r7, #8
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}

0800eda2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800eda2:	b580      	push	{r7, lr}
 800eda4:	b084      	sub	sp, #16
 800eda6:	af00      	add	r7, sp, #0
 800eda8:	6078      	str	r0, [r7, #4]
 800edaa:	460b      	mov	r3, r1
 800edac:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f000 f836 	bl	800ee20 <USBH_GetFreePipe>
 800edb4:	4603      	mov	r3, r0
 800edb6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800edb8:	89fb      	ldrh	r3, [r7, #14]
 800edba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800edbe:	4293      	cmp	r3, r2
 800edc0:	d00a      	beq.n	800edd8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800edc2:	78fa      	ldrb	r2, [r7, #3]
 800edc4:	89fb      	ldrh	r3, [r7, #14]
 800edc6:	f003 030f 	and.w	r3, r3, #15
 800edca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800edce:	6879      	ldr	r1, [r7, #4]
 800edd0:	33e0      	adds	r3, #224	; 0xe0
 800edd2:	009b      	lsls	r3, r3, #2
 800edd4:	440b      	add	r3, r1
 800edd6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800edd8:	89fb      	ldrh	r3, [r7, #14]
 800edda:	b2db      	uxtb	r3, r3
}
 800eddc:	4618      	mov	r0, r3
 800edde:	3710      	adds	r7, #16
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}

0800ede4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ede4:	b480      	push	{r7}
 800ede6:	b083      	sub	sp, #12
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
 800edec:	460b      	mov	r3, r1
 800edee:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800edf0:	78fb      	ldrb	r3, [r7, #3]
 800edf2:	2b0a      	cmp	r3, #10
 800edf4:	d80d      	bhi.n	800ee12 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800edf6:	78fb      	ldrb	r3, [r7, #3]
 800edf8:	687a      	ldr	r2, [r7, #4]
 800edfa:	33e0      	adds	r3, #224	; 0xe0
 800edfc:	009b      	lsls	r3, r3, #2
 800edfe:	4413      	add	r3, r2
 800ee00:	685a      	ldr	r2, [r3, #4]
 800ee02:	78fb      	ldrb	r3, [r7, #3]
 800ee04:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ee08:	6879      	ldr	r1, [r7, #4]
 800ee0a:	33e0      	adds	r3, #224	; 0xe0
 800ee0c:	009b      	lsls	r3, r3, #2
 800ee0e:	440b      	add	r3, r1
 800ee10:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ee12:	2300      	movs	r3, #0
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	370c      	adds	r7, #12
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1e:	4770      	bx	lr

0800ee20 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ee20:	b480      	push	{r7}
 800ee22:	b085      	sub	sp, #20
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	73fb      	strb	r3, [r7, #15]
 800ee30:	e00f      	b.n	800ee52 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ee32:	7bfb      	ldrb	r3, [r7, #15]
 800ee34:	687a      	ldr	r2, [r7, #4]
 800ee36:	33e0      	adds	r3, #224	; 0xe0
 800ee38:	009b      	lsls	r3, r3, #2
 800ee3a:	4413      	add	r3, r2
 800ee3c:	685b      	ldr	r3, [r3, #4]
 800ee3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d102      	bne.n	800ee4c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ee46:	7bfb      	ldrb	r3, [r7, #15]
 800ee48:	b29b      	uxth	r3, r3
 800ee4a:	e007      	b.n	800ee5c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800ee4c:	7bfb      	ldrb	r3, [r7, #15]
 800ee4e:	3301      	adds	r3, #1
 800ee50:	73fb      	strb	r3, [r7, #15]
 800ee52:	7bfb      	ldrb	r3, [r7, #15]
 800ee54:	2b0a      	cmp	r3, #10
 800ee56:	d9ec      	bls.n	800ee32 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ee58:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3714      	adds	r7, #20
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr

0800ee68 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ee6c:	2201      	movs	r2, #1
 800ee6e:	490e      	ldr	r1, [pc, #56]	; (800eea8 <MX_USB_HOST_Init+0x40>)
 800ee70:	480e      	ldr	r0, [pc, #56]	; (800eeac <MX_USB_HOST_Init+0x44>)
 800ee72:	f7fe fca1 	bl	800d7b8 <USBH_Init>
 800ee76:	4603      	mov	r3, r0
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d001      	beq.n	800ee80 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ee7c:	f7f2 fe72 	bl	8001b64 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ee80:	490b      	ldr	r1, [pc, #44]	; (800eeb0 <MX_USB_HOST_Init+0x48>)
 800ee82:	480a      	ldr	r0, [pc, #40]	; (800eeac <MX_USB_HOST_Init+0x44>)
 800ee84:	f7fe fd26 	bl	800d8d4 <USBH_RegisterClass>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d001      	beq.n	800ee92 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ee8e:	f7f2 fe69 	bl	8001b64 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ee92:	4806      	ldr	r0, [pc, #24]	; (800eeac <MX_USB_HOST_Init+0x44>)
 800ee94:	f7fe fdaa 	bl	800d9ec <USBH_Start>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d001      	beq.n	800eea2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ee9e:	f7f2 fe61 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800eea2:	bf00      	nop
 800eea4:	bd80      	pop	{r7, pc}
 800eea6:	bf00      	nop
 800eea8:	0800eec9 	.word	0x0800eec9
 800eeac:	20000668 	.word	0x20000668
 800eeb0:	200001e8 	.word	0x200001e8

0800eeb4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800eeb8:	4802      	ldr	r0, [pc, #8]	; (800eec4 <MX_USB_HOST_Process+0x10>)
 800eeba:	f7fe fda7 	bl	800da0c <USBH_Process>
}
 800eebe:	bf00      	nop
 800eec0:	bd80      	pop	{r7, pc}
 800eec2:	bf00      	nop
 800eec4:	20000668 	.word	0x20000668

0800eec8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800eec8:	b480      	push	{r7}
 800eeca:	b083      	sub	sp, #12
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	460b      	mov	r3, r1
 800eed2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800eed4:	78fb      	ldrb	r3, [r7, #3]
 800eed6:	3b01      	subs	r3, #1
 800eed8:	2b04      	cmp	r3, #4
 800eeda:	d819      	bhi.n	800ef10 <USBH_UserProcess+0x48>
 800eedc:	a201      	add	r2, pc, #4	; (adr r2, 800eee4 <USBH_UserProcess+0x1c>)
 800eede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eee2:	bf00      	nop
 800eee4:	0800ef11 	.word	0x0800ef11
 800eee8:	0800ef01 	.word	0x0800ef01
 800eeec:	0800ef11 	.word	0x0800ef11
 800eef0:	0800ef09 	.word	0x0800ef09
 800eef4:	0800eef9 	.word	0x0800eef9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800eef8:	4b09      	ldr	r3, [pc, #36]	; (800ef20 <USBH_UserProcess+0x58>)
 800eefa:	2203      	movs	r2, #3
 800eefc:	701a      	strb	r2, [r3, #0]
  break;
 800eefe:	e008      	b.n	800ef12 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ef00:	4b07      	ldr	r3, [pc, #28]	; (800ef20 <USBH_UserProcess+0x58>)
 800ef02:	2202      	movs	r2, #2
 800ef04:	701a      	strb	r2, [r3, #0]
  break;
 800ef06:	e004      	b.n	800ef12 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ef08:	4b05      	ldr	r3, [pc, #20]	; (800ef20 <USBH_UserProcess+0x58>)
 800ef0a:	2201      	movs	r2, #1
 800ef0c:	701a      	strb	r2, [r3, #0]
  break;
 800ef0e:	e000      	b.n	800ef12 <USBH_UserProcess+0x4a>

  default:
  break;
 800ef10:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ef12:	bf00      	nop
 800ef14:	370c      	adds	r7, #12
 800ef16:	46bd      	mov	sp, r7
 800ef18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1c:	4770      	bx	lr
 800ef1e:	bf00      	nop
 800ef20:	20000299 	.word	0x20000299

0800ef24 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b08a      	sub	sp, #40	; 0x28
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ef2c:	f107 0314 	add.w	r3, r7, #20
 800ef30:	2200      	movs	r2, #0
 800ef32:	601a      	str	r2, [r3, #0]
 800ef34:	605a      	str	r2, [r3, #4]
 800ef36:	609a      	str	r2, [r3, #8]
 800ef38:	60da      	str	r2, [r3, #12]
 800ef3a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ef44:	d147      	bne.n	800efd6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ef46:	2300      	movs	r3, #0
 800ef48:	613b      	str	r3, [r7, #16]
 800ef4a:	4b25      	ldr	r3, [pc, #148]	; (800efe0 <HAL_HCD_MspInit+0xbc>)
 800ef4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef4e:	4a24      	ldr	r2, [pc, #144]	; (800efe0 <HAL_HCD_MspInit+0xbc>)
 800ef50:	f043 0301 	orr.w	r3, r3, #1
 800ef54:	6313      	str	r3, [r2, #48]	; 0x30
 800ef56:	4b22      	ldr	r3, [pc, #136]	; (800efe0 <HAL_HCD_MspInit+0xbc>)
 800ef58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef5a:	f003 0301 	and.w	r3, r3, #1
 800ef5e:	613b      	str	r3, [r7, #16]
 800ef60:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ef62:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ef66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ef70:	f107 0314 	add.w	r3, r7, #20
 800ef74:	4619      	mov	r1, r3
 800ef76:	481b      	ldr	r0, [pc, #108]	; (800efe4 <HAL_HCD_MspInit+0xc0>)
 800ef78:	f7f6 ff0e 	bl	8005d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ef7c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ef80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ef82:	2302      	movs	r3, #2
 800ef84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef86:	2300      	movs	r3, #0
 800ef88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ef8e:	230a      	movs	r3, #10
 800ef90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ef92:	f107 0314 	add.w	r3, r7, #20
 800ef96:	4619      	mov	r1, r3
 800ef98:	4812      	ldr	r0, [pc, #72]	; (800efe4 <HAL_HCD_MspInit+0xc0>)
 800ef9a:	f7f6 fefd 	bl	8005d98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ef9e:	4b10      	ldr	r3, [pc, #64]	; (800efe0 <HAL_HCD_MspInit+0xbc>)
 800efa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efa2:	4a0f      	ldr	r2, [pc, #60]	; (800efe0 <HAL_HCD_MspInit+0xbc>)
 800efa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efa8:	6353      	str	r3, [r2, #52]	; 0x34
 800efaa:	2300      	movs	r3, #0
 800efac:	60fb      	str	r3, [r7, #12]
 800efae:	4b0c      	ldr	r3, [pc, #48]	; (800efe0 <HAL_HCD_MspInit+0xbc>)
 800efb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efb2:	4a0b      	ldr	r2, [pc, #44]	; (800efe0 <HAL_HCD_MspInit+0xbc>)
 800efb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800efb8:	6453      	str	r3, [r2, #68]	; 0x44
 800efba:	4b09      	ldr	r3, [pc, #36]	; (800efe0 <HAL_HCD_MspInit+0xbc>)
 800efbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800efc2:	60fb      	str	r3, [r7, #12]
 800efc4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800efc6:	2200      	movs	r2, #0
 800efc8:	2100      	movs	r1, #0
 800efca:	2043      	movs	r0, #67	; 0x43
 800efcc:	f7f6 fead 	bl	8005d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800efd0:	2043      	movs	r0, #67	; 0x43
 800efd2:	f7f6 fec6 	bl	8005d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800efd6:	bf00      	nop
 800efd8:	3728      	adds	r7, #40	; 0x28
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}
 800efde:	bf00      	nop
 800efe0:	40023800 	.word	0x40023800
 800efe4:	40020000 	.word	0x40020000

0800efe8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b082      	sub	sp, #8
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800eff6:	4618      	mov	r0, r3
 800eff8:	f7ff f8db 	bl	800e1b2 <USBH_LL_IncTimer>
}
 800effc:	bf00      	nop
 800effe:	3708      	adds	r7, #8
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}

0800f004 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b082      	sub	sp, #8
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f012:	4618      	mov	r0, r3
 800f014:	f7ff f913 	bl	800e23e <USBH_LL_Connect>
}
 800f018:	bf00      	nop
 800f01a:	3708      	adds	r7, #8
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}

0800f020 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b082      	sub	sp, #8
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f02e:	4618      	mov	r0, r3
 800f030:	f7ff f91c 	bl	800e26c <USBH_LL_Disconnect>
}
 800f034:	bf00      	nop
 800f036:	3708      	adds	r7, #8
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}

0800f03c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f03c:	b480      	push	{r7}
 800f03e:	b083      	sub	sp, #12
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
 800f044:	460b      	mov	r3, r1
 800f046:	70fb      	strb	r3, [r7, #3]
 800f048:	4613      	mov	r3, r2
 800f04a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800f04c:	bf00      	nop
 800f04e:	370c      	adds	r7, #12
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr

0800f058 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b082      	sub	sp, #8
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f066:	4618      	mov	r0, r3
 800f068:	f7ff f8cd 	bl	800e206 <USBH_LL_PortEnabled>
}
 800f06c:	bf00      	nop
 800f06e:	3708      	adds	r7, #8
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}

0800f074 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b082      	sub	sp, #8
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f082:	4618      	mov	r0, r3
 800f084:	f7ff f8cd 	bl	800e222 <USBH_LL_PortDisabled>
}
 800f088:	bf00      	nop
 800f08a:	3708      	adds	r7, #8
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f09e:	2b01      	cmp	r3, #1
 800f0a0:	d12a      	bne.n	800f0f8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f0a2:	4a18      	ldr	r2, [pc, #96]	; (800f104 <USBH_LL_Init+0x74>)
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	4a15      	ldr	r2, [pc, #84]	; (800f104 <USBH_LL_Init+0x74>)
 800f0ae:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f0b2:	4b14      	ldr	r3, [pc, #80]	; (800f104 <USBH_LL_Init+0x74>)
 800f0b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f0b8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800f0ba:	4b12      	ldr	r3, [pc, #72]	; (800f104 <USBH_LL_Init+0x74>)
 800f0bc:	2208      	movs	r2, #8
 800f0be:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f0c0:	4b10      	ldr	r3, [pc, #64]	; (800f104 <USBH_LL_Init+0x74>)
 800f0c2:	2201      	movs	r2, #1
 800f0c4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f0c6:	4b0f      	ldr	r3, [pc, #60]	; (800f104 <USBH_LL_Init+0x74>)
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f0cc:	4b0d      	ldr	r3, [pc, #52]	; (800f104 <USBH_LL_Init+0x74>)
 800f0ce:	2202      	movs	r2, #2
 800f0d0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f0d2:	4b0c      	ldr	r3, [pc, #48]	; (800f104 <USBH_LL_Init+0x74>)
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f0d8:	480a      	ldr	r0, [pc, #40]	; (800f104 <USBH_LL_Init+0x74>)
 800f0da:	f7f7 f844 	bl	8006166 <HAL_HCD_Init>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d001      	beq.n	800f0e8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f0e4:	f7f2 fd3e 	bl	8001b64 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f0e8:	4806      	ldr	r0, [pc, #24]	; (800f104 <USBH_LL_Init+0x74>)
 800f0ea:	f7f7 fc21 	bl	8006930 <HAL_HCD_GetCurrentFrame>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f7ff f84e 	bl	800e194 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f0f8:	2300      	movs	r3, #0
}
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	3708      	adds	r7, #8
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}
 800f102:	bf00      	nop
 800f104:	20000a40 	.word	0x20000a40

0800f108 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b084      	sub	sp, #16
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f110:	2300      	movs	r3, #0
 800f112:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f114:	2300      	movs	r3, #0
 800f116:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f11e:	4618      	mov	r0, r3
 800f120:	f7f7 fb90 	bl	8006844 <HAL_HCD_Start>
 800f124:	4603      	mov	r3, r0
 800f126:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f128:	7bfb      	ldrb	r3, [r7, #15]
 800f12a:	4618      	mov	r0, r3
 800f12c:	f000 f95c 	bl	800f3e8 <USBH_Get_USB_Status>
 800f130:	4603      	mov	r3, r0
 800f132:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f134:	7bbb      	ldrb	r3, [r7, #14]
}
 800f136:	4618      	mov	r0, r3
 800f138:	3710      	adds	r7, #16
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}

0800f13e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f13e:	b580      	push	{r7, lr}
 800f140:	b084      	sub	sp, #16
 800f142:	af00      	add	r7, sp, #0
 800f144:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f146:	2300      	movs	r3, #0
 800f148:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f14a:	2300      	movs	r3, #0
 800f14c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f154:	4618      	mov	r0, r3
 800f156:	f7f7 fb98 	bl	800688a <HAL_HCD_Stop>
 800f15a:	4603      	mov	r3, r0
 800f15c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f15e:	7bfb      	ldrb	r3, [r7, #15]
 800f160:	4618      	mov	r0, r3
 800f162:	f000 f941 	bl	800f3e8 <USBH_Get_USB_Status>
 800f166:	4603      	mov	r3, r0
 800f168:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f16a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f16c:	4618      	mov	r0, r3
 800f16e:	3710      	adds	r7, #16
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}

0800f174 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b084      	sub	sp, #16
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f17c:	2301      	movs	r3, #1
 800f17e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f186:	4618      	mov	r0, r3
 800f188:	f7f7 fbe0 	bl	800694c <HAL_HCD_GetCurrentSpeed>
 800f18c:	4603      	mov	r3, r0
 800f18e:	2b02      	cmp	r3, #2
 800f190:	d00c      	beq.n	800f1ac <USBH_LL_GetSpeed+0x38>
 800f192:	2b02      	cmp	r3, #2
 800f194:	d80d      	bhi.n	800f1b2 <USBH_LL_GetSpeed+0x3e>
 800f196:	2b00      	cmp	r3, #0
 800f198:	d002      	beq.n	800f1a0 <USBH_LL_GetSpeed+0x2c>
 800f19a:	2b01      	cmp	r3, #1
 800f19c:	d003      	beq.n	800f1a6 <USBH_LL_GetSpeed+0x32>
 800f19e:	e008      	b.n	800f1b2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	73fb      	strb	r3, [r7, #15]
    break;
 800f1a4:	e008      	b.n	800f1b8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	73fb      	strb	r3, [r7, #15]
    break;
 800f1aa:	e005      	b.n	800f1b8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f1ac:	2302      	movs	r3, #2
 800f1ae:	73fb      	strb	r3, [r7, #15]
    break;
 800f1b0:	e002      	b.n	800f1b8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800f1b2:	2301      	movs	r3, #1
 800f1b4:	73fb      	strb	r3, [r7, #15]
    break;
 800f1b6:	bf00      	nop
  }
  return  speed;
 800f1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	3710      	adds	r7, #16
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}

0800f1c2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f1c2:	b580      	push	{r7, lr}
 800f1c4:	b084      	sub	sp, #16
 800f1c6:	af00      	add	r7, sp, #0
 800f1c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f7f7 fb73 	bl	80068c4 <HAL_HCD_ResetPort>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f1e2:	7bfb      	ldrb	r3, [r7, #15]
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f000 f8ff 	bl	800f3e8 <USBH_Get_USB_Status>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	3710      	adds	r7, #16
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}

0800f1f8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b082      	sub	sp, #8
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	460b      	mov	r3, r1
 800f202:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f20a:	78fa      	ldrb	r2, [r7, #3]
 800f20c:	4611      	mov	r1, r2
 800f20e:	4618      	mov	r0, r3
 800f210:	f7f7 fb7a 	bl	8006908 <HAL_HCD_HC_GetXferCount>
 800f214:	4603      	mov	r3, r0
}
 800f216:	4618      	mov	r0, r3
 800f218:	3708      	adds	r7, #8
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}

0800f21e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f21e:	b590      	push	{r4, r7, lr}
 800f220:	b089      	sub	sp, #36	; 0x24
 800f222:	af04      	add	r7, sp, #16
 800f224:	6078      	str	r0, [r7, #4]
 800f226:	4608      	mov	r0, r1
 800f228:	4611      	mov	r1, r2
 800f22a:	461a      	mov	r2, r3
 800f22c:	4603      	mov	r3, r0
 800f22e:	70fb      	strb	r3, [r7, #3]
 800f230:	460b      	mov	r3, r1
 800f232:	70bb      	strb	r3, [r7, #2]
 800f234:	4613      	mov	r3, r2
 800f236:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f238:	2300      	movs	r3, #0
 800f23a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f23c:	2300      	movs	r3, #0
 800f23e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f246:	787c      	ldrb	r4, [r7, #1]
 800f248:	78ba      	ldrb	r2, [r7, #2]
 800f24a:	78f9      	ldrb	r1, [r7, #3]
 800f24c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f24e:	9302      	str	r3, [sp, #8]
 800f250:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f254:	9301      	str	r3, [sp, #4]
 800f256:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f25a:	9300      	str	r3, [sp, #0]
 800f25c:	4623      	mov	r3, r4
 800f25e:	f7f6 ffe4 	bl	800622a <HAL_HCD_HC_Init>
 800f262:	4603      	mov	r3, r0
 800f264:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f266:	7bfb      	ldrb	r3, [r7, #15]
 800f268:	4618      	mov	r0, r3
 800f26a:	f000 f8bd 	bl	800f3e8 <USBH_Get_USB_Status>
 800f26e:	4603      	mov	r3, r0
 800f270:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f272:	7bbb      	ldrb	r3, [r7, #14]
}
 800f274:	4618      	mov	r0, r3
 800f276:	3714      	adds	r7, #20
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd90      	pop	{r4, r7, pc}

0800f27c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b084      	sub	sp, #16
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	460b      	mov	r3, r1
 800f286:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f288:	2300      	movs	r3, #0
 800f28a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f28c:	2300      	movs	r3, #0
 800f28e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f296:	78fa      	ldrb	r2, [r7, #3]
 800f298:	4611      	mov	r1, r2
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7f7 f854 	bl	8006348 <HAL_HCD_HC_Halt>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f2a4:	7bfb      	ldrb	r3, [r7, #15]
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f000 f89e 	bl	800f3e8 <USBH_Get_USB_Status>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f2b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3710      	adds	r7, #16
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}

0800f2ba <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f2ba:	b590      	push	{r4, r7, lr}
 800f2bc:	b089      	sub	sp, #36	; 0x24
 800f2be:	af04      	add	r7, sp, #16
 800f2c0:	6078      	str	r0, [r7, #4]
 800f2c2:	4608      	mov	r0, r1
 800f2c4:	4611      	mov	r1, r2
 800f2c6:	461a      	mov	r2, r3
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	70fb      	strb	r3, [r7, #3]
 800f2cc:	460b      	mov	r3, r1
 800f2ce:	70bb      	strb	r3, [r7, #2]
 800f2d0:	4613      	mov	r3, r2
 800f2d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f2d8:	2300      	movs	r3, #0
 800f2da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f2e2:	787c      	ldrb	r4, [r7, #1]
 800f2e4:	78ba      	ldrb	r2, [r7, #2]
 800f2e6:	78f9      	ldrb	r1, [r7, #3]
 800f2e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f2ec:	9303      	str	r3, [sp, #12]
 800f2ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f2f0:	9302      	str	r3, [sp, #8]
 800f2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f4:	9301      	str	r3, [sp, #4]
 800f2f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f2fa:	9300      	str	r3, [sp, #0]
 800f2fc:	4623      	mov	r3, r4
 800f2fe:	f7f7 f847 	bl	8006390 <HAL_HCD_HC_SubmitRequest>
 800f302:	4603      	mov	r3, r0
 800f304:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f306:	7bfb      	ldrb	r3, [r7, #15]
 800f308:	4618      	mov	r0, r3
 800f30a:	f000 f86d 	bl	800f3e8 <USBH_Get_USB_Status>
 800f30e:	4603      	mov	r3, r0
 800f310:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f312:	7bbb      	ldrb	r3, [r7, #14]
}
 800f314:	4618      	mov	r0, r3
 800f316:	3714      	adds	r7, #20
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd90      	pop	{r4, r7, pc}

0800f31c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b082      	sub	sp, #8
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
 800f324:	460b      	mov	r3, r1
 800f326:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f32e:	78fa      	ldrb	r2, [r7, #3]
 800f330:	4611      	mov	r1, r2
 800f332:	4618      	mov	r0, r3
 800f334:	f7f7 fad4 	bl	80068e0 <HAL_HCD_HC_GetURBState>
 800f338:	4603      	mov	r3, r0
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3708      	adds	r7, #8
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}

0800f342 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f342:	b580      	push	{r7, lr}
 800f344:	b082      	sub	sp, #8
 800f346:	af00      	add	r7, sp, #0
 800f348:	6078      	str	r0, [r7, #4]
 800f34a:	460b      	mov	r3, r1
 800f34c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f354:	2b01      	cmp	r3, #1
 800f356:	d103      	bne.n	800f360 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f358:	78fb      	ldrb	r3, [r7, #3]
 800f35a:	4618      	mov	r0, r3
 800f35c:	f000 f870 	bl	800f440 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f360:	20c8      	movs	r0, #200	; 0xc8
 800f362:	f7f6 fbe3 	bl	8005b2c <HAL_Delay>
  return USBH_OK;
 800f366:	2300      	movs	r3, #0
}
 800f368:	4618      	mov	r0, r3
 800f36a:	3708      	adds	r7, #8
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd80      	pop	{r7, pc}

0800f370 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f370:	b480      	push	{r7}
 800f372:	b085      	sub	sp, #20
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
 800f378:	460b      	mov	r3, r1
 800f37a:	70fb      	strb	r3, [r7, #3]
 800f37c:	4613      	mov	r3, r2
 800f37e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f386:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f388:	78fb      	ldrb	r3, [r7, #3]
 800f38a:	68fa      	ldr	r2, [r7, #12]
 800f38c:	212c      	movs	r1, #44	; 0x2c
 800f38e:	fb01 f303 	mul.w	r3, r1, r3
 800f392:	4413      	add	r3, r2
 800f394:	333b      	adds	r3, #59	; 0x3b
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d009      	beq.n	800f3b0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f39c:	78fb      	ldrb	r3, [r7, #3]
 800f39e:	68fa      	ldr	r2, [r7, #12]
 800f3a0:	212c      	movs	r1, #44	; 0x2c
 800f3a2:	fb01 f303 	mul.w	r3, r1, r3
 800f3a6:	4413      	add	r3, r2
 800f3a8:	3354      	adds	r3, #84	; 0x54
 800f3aa:	78ba      	ldrb	r2, [r7, #2]
 800f3ac:	701a      	strb	r2, [r3, #0]
 800f3ae:	e008      	b.n	800f3c2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f3b0:	78fb      	ldrb	r3, [r7, #3]
 800f3b2:	68fa      	ldr	r2, [r7, #12]
 800f3b4:	212c      	movs	r1, #44	; 0x2c
 800f3b6:	fb01 f303 	mul.w	r3, r1, r3
 800f3ba:	4413      	add	r3, r2
 800f3bc:	3355      	adds	r3, #85	; 0x55
 800f3be:	78ba      	ldrb	r2, [r7, #2]
 800f3c0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f3c2:	2300      	movs	r3, #0
}
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	3714      	adds	r7, #20
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ce:	4770      	bx	lr

0800f3d0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b082      	sub	sp, #8
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f7f6 fba7 	bl	8005b2c <HAL_Delay>
}
 800f3de:	bf00      	nop
 800f3e0:	3708      	adds	r7, #8
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}
	...

0800f3e8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f3e8:	b480      	push	{r7}
 800f3ea:	b085      	sub	sp, #20
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f3f6:	79fb      	ldrb	r3, [r7, #7]
 800f3f8:	2b03      	cmp	r3, #3
 800f3fa:	d817      	bhi.n	800f42c <USBH_Get_USB_Status+0x44>
 800f3fc:	a201      	add	r2, pc, #4	; (adr r2, 800f404 <USBH_Get_USB_Status+0x1c>)
 800f3fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f402:	bf00      	nop
 800f404:	0800f415 	.word	0x0800f415
 800f408:	0800f41b 	.word	0x0800f41b
 800f40c:	0800f421 	.word	0x0800f421
 800f410:	0800f427 	.word	0x0800f427
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f414:	2300      	movs	r3, #0
 800f416:	73fb      	strb	r3, [r7, #15]
    break;
 800f418:	e00b      	b.n	800f432 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f41a:	2302      	movs	r3, #2
 800f41c:	73fb      	strb	r3, [r7, #15]
    break;
 800f41e:	e008      	b.n	800f432 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f420:	2301      	movs	r3, #1
 800f422:	73fb      	strb	r3, [r7, #15]
    break;
 800f424:	e005      	b.n	800f432 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f426:	2302      	movs	r3, #2
 800f428:	73fb      	strb	r3, [r7, #15]
    break;
 800f42a:	e002      	b.n	800f432 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f42c:	2302      	movs	r3, #2
 800f42e:	73fb      	strb	r3, [r7, #15]
    break;
 800f430:	bf00      	nop
  }
  return usb_status;
 800f432:	7bfb      	ldrb	r3, [r7, #15]
}
 800f434:	4618      	mov	r0, r3
 800f436:	3714      	adds	r7, #20
 800f438:	46bd      	mov	sp, r7
 800f43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43e:	4770      	bx	lr

0800f440 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b084      	sub	sp, #16
 800f444:	af00      	add	r7, sp, #0
 800f446:	4603      	mov	r3, r0
 800f448:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f44a:	79fb      	ldrb	r3, [r7, #7]
 800f44c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f44e:	79fb      	ldrb	r3, [r7, #7]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d102      	bne.n	800f45a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800f454:	2301      	movs	r3, #1
 800f456:	73fb      	strb	r3, [r7, #15]
 800f458:	e001      	b.n	800f45e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800f45a:	2300      	movs	r3, #0
 800f45c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800f45e:	7bfb      	ldrb	r3, [r7, #15]
 800f460:	461a      	mov	r2, r3
 800f462:	2101      	movs	r1, #1
 800f464:	4803      	ldr	r0, [pc, #12]	; (800f474 <MX_DriverVbusFS+0x34>)
 800f466:	f7f6 fe4b 	bl	8006100 <HAL_GPIO_WritePin>
}
 800f46a:	bf00      	nop
 800f46c:	3710      	adds	r7, #16
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}
 800f472:	bf00      	nop
 800f474:	40020800 	.word	0x40020800

0800f478 <__errno>:
 800f478:	4b01      	ldr	r3, [pc, #4]	; (800f480 <__errno+0x8>)
 800f47a:	6818      	ldr	r0, [r3, #0]
 800f47c:	4770      	bx	lr
 800f47e:	bf00      	nop
 800f480:	20000208 	.word	0x20000208

0800f484 <__libc_init_array>:
 800f484:	b570      	push	{r4, r5, r6, lr}
 800f486:	4d0d      	ldr	r5, [pc, #52]	; (800f4bc <__libc_init_array+0x38>)
 800f488:	4c0d      	ldr	r4, [pc, #52]	; (800f4c0 <__libc_init_array+0x3c>)
 800f48a:	1b64      	subs	r4, r4, r5
 800f48c:	10a4      	asrs	r4, r4, #2
 800f48e:	2600      	movs	r6, #0
 800f490:	42a6      	cmp	r6, r4
 800f492:	d109      	bne.n	800f4a8 <__libc_init_array+0x24>
 800f494:	4d0b      	ldr	r5, [pc, #44]	; (800f4c4 <__libc_init_array+0x40>)
 800f496:	4c0c      	ldr	r4, [pc, #48]	; (800f4c8 <__libc_init_array+0x44>)
 800f498:	f000 fc78 	bl	800fd8c <_init>
 800f49c:	1b64      	subs	r4, r4, r5
 800f49e:	10a4      	asrs	r4, r4, #2
 800f4a0:	2600      	movs	r6, #0
 800f4a2:	42a6      	cmp	r6, r4
 800f4a4:	d105      	bne.n	800f4b2 <__libc_init_array+0x2e>
 800f4a6:	bd70      	pop	{r4, r5, r6, pc}
 800f4a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4ac:	4798      	blx	r3
 800f4ae:	3601      	adds	r6, #1
 800f4b0:	e7ee      	b.n	800f490 <__libc_init_array+0xc>
 800f4b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4b6:	4798      	blx	r3
 800f4b8:	3601      	adds	r6, #1
 800f4ba:	e7f2      	b.n	800f4a2 <__libc_init_array+0x1e>
 800f4bc:	08010388 	.word	0x08010388
 800f4c0:	08010388 	.word	0x08010388
 800f4c4:	08010388 	.word	0x08010388
 800f4c8:	0801038c 	.word	0x0801038c

0800f4cc <malloc>:
 800f4cc:	4b02      	ldr	r3, [pc, #8]	; (800f4d8 <malloc+0xc>)
 800f4ce:	4601      	mov	r1, r0
 800f4d0:	6818      	ldr	r0, [r3, #0]
 800f4d2:	f000 b871 	b.w	800f5b8 <_malloc_r>
 800f4d6:	bf00      	nop
 800f4d8:	20000208 	.word	0x20000208

0800f4dc <free>:
 800f4dc:	4b02      	ldr	r3, [pc, #8]	; (800f4e8 <free+0xc>)
 800f4de:	4601      	mov	r1, r0
 800f4e0:	6818      	ldr	r0, [r3, #0]
 800f4e2:	f000 b819 	b.w	800f518 <_free_r>
 800f4e6:	bf00      	nop
 800f4e8:	20000208 	.word	0x20000208

0800f4ec <memcpy>:
 800f4ec:	440a      	add	r2, r1
 800f4ee:	4291      	cmp	r1, r2
 800f4f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f4f4:	d100      	bne.n	800f4f8 <memcpy+0xc>
 800f4f6:	4770      	bx	lr
 800f4f8:	b510      	push	{r4, lr}
 800f4fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f502:	4291      	cmp	r1, r2
 800f504:	d1f9      	bne.n	800f4fa <memcpy+0xe>
 800f506:	bd10      	pop	{r4, pc}

0800f508 <memset>:
 800f508:	4402      	add	r2, r0
 800f50a:	4603      	mov	r3, r0
 800f50c:	4293      	cmp	r3, r2
 800f50e:	d100      	bne.n	800f512 <memset+0xa>
 800f510:	4770      	bx	lr
 800f512:	f803 1b01 	strb.w	r1, [r3], #1
 800f516:	e7f9      	b.n	800f50c <memset+0x4>

0800f518 <_free_r>:
 800f518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f51a:	2900      	cmp	r1, #0
 800f51c:	d048      	beq.n	800f5b0 <_free_r+0x98>
 800f51e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f522:	9001      	str	r0, [sp, #4]
 800f524:	2b00      	cmp	r3, #0
 800f526:	f1a1 0404 	sub.w	r4, r1, #4
 800f52a:	bfb8      	it	lt
 800f52c:	18e4      	addlt	r4, r4, r3
 800f52e:	f000 f8c1 	bl	800f6b4 <__malloc_lock>
 800f532:	4a20      	ldr	r2, [pc, #128]	; (800f5b4 <_free_r+0x9c>)
 800f534:	9801      	ldr	r0, [sp, #4]
 800f536:	6813      	ldr	r3, [r2, #0]
 800f538:	4615      	mov	r5, r2
 800f53a:	b933      	cbnz	r3, 800f54a <_free_r+0x32>
 800f53c:	6063      	str	r3, [r4, #4]
 800f53e:	6014      	str	r4, [r2, #0]
 800f540:	b003      	add	sp, #12
 800f542:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f546:	f000 b8bb 	b.w	800f6c0 <__malloc_unlock>
 800f54a:	42a3      	cmp	r3, r4
 800f54c:	d90b      	bls.n	800f566 <_free_r+0x4e>
 800f54e:	6821      	ldr	r1, [r4, #0]
 800f550:	1862      	adds	r2, r4, r1
 800f552:	4293      	cmp	r3, r2
 800f554:	bf04      	itt	eq
 800f556:	681a      	ldreq	r2, [r3, #0]
 800f558:	685b      	ldreq	r3, [r3, #4]
 800f55a:	6063      	str	r3, [r4, #4]
 800f55c:	bf04      	itt	eq
 800f55e:	1852      	addeq	r2, r2, r1
 800f560:	6022      	streq	r2, [r4, #0]
 800f562:	602c      	str	r4, [r5, #0]
 800f564:	e7ec      	b.n	800f540 <_free_r+0x28>
 800f566:	461a      	mov	r2, r3
 800f568:	685b      	ldr	r3, [r3, #4]
 800f56a:	b10b      	cbz	r3, 800f570 <_free_r+0x58>
 800f56c:	42a3      	cmp	r3, r4
 800f56e:	d9fa      	bls.n	800f566 <_free_r+0x4e>
 800f570:	6811      	ldr	r1, [r2, #0]
 800f572:	1855      	adds	r5, r2, r1
 800f574:	42a5      	cmp	r5, r4
 800f576:	d10b      	bne.n	800f590 <_free_r+0x78>
 800f578:	6824      	ldr	r4, [r4, #0]
 800f57a:	4421      	add	r1, r4
 800f57c:	1854      	adds	r4, r2, r1
 800f57e:	42a3      	cmp	r3, r4
 800f580:	6011      	str	r1, [r2, #0]
 800f582:	d1dd      	bne.n	800f540 <_free_r+0x28>
 800f584:	681c      	ldr	r4, [r3, #0]
 800f586:	685b      	ldr	r3, [r3, #4]
 800f588:	6053      	str	r3, [r2, #4]
 800f58a:	4421      	add	r1, r4
 800f58c:	6011      	str	r1, [r2, #0]
 800f58e:	e7d7      	b.n	800f540 <_free_r+0x28>
 800f590:	d902      	bls.n	800f598 <_free_r+0x80>
 800f592:	230c      	movs	r3, #12
 800f594:	6003      	str	r3, [r0, #0]
 800f596:	e7d3      	b.n	800f540 <_free_r+0x28>
 800f598:	6825      	ldr	r5, [r4, #0]
 800f59a:	1961      	adds	r1, r4, r5
 800f59c:	428b      	cmp	r3, r1
 800f59e:	bf04      	itt	eq
 800f5a0:	6819      	ldreq	r1, [r3, #0]
 800f5a2:	685b      	ldreq	r3, [r3, #4]
 800f5a4:	6063      	str	r3, [r4, #4]
 800f5a6:	bf04      	itt	eq
 800f5a8:	1949      	addeq	r1, r1, r5
 800f5aa:	6021      	streq	r1, [r4, #0]
 800f5ac:	6054      	str	r4, [r2, #4]
 800f5ae:	e7c7      	b.n	800f540 <_free_r+0x28>
 800f5b0:	b003      	add	sp, #12
 800f5b2:	bd30      	pop	{r4, r5, pc}
 800f5b4:	2000029c 	.word	0x2000029c

0800f5b8 <_malloc_r>:
 800f5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5ba:	1ccd      	adds	r5, r1, #3
 800f5bc:	f025 0503 	bic.w	r5, r5, #3
 800f5c0:	3508      	adds	r5, #8
 800f5c2:	2d0c      	cmp	r5, #12
 800f5c4:	bf38      	it	cc
 800f5c6:	250c      	movcc	r5, #12
 800f5c8:	2d00      	cmp	r5, #0
 800f5ca:	4606      	mov	r6, r0
 800f5cc:	db01      	blt.n	800f5d2 <_malloc_r+0x1a>
 800f5ce:	42a9      	cmp	r1, r5
 800f5d0:	d903      	bls.n	800f5da <_malloc_r+0x22>
 800f5d2:	230c      	movs	r3, #12
 800f5d4:	6033      	str	r3, [r6, #0]
 800f5d6:	2000      	movs	r0, #0
 800f5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5da:	f000 f86b 	bl	800f6b4 <__malloc_lock>
 800f5de:	4921      	ldr	r1, [pc, #132]	; (800f664 <_malloc_r+0xac>)
 800f5e0:	680a      	ldr	r2, [r1, #0]
 800f5e2:	4614      	mov	r4, r2
 800f5e4:	b99c      	cbnz	r4, 800f60e <_malloc_r+0x56>
 800f5e6:	4f20      	ldr	r7, [pc, #128]	; (800f668 <_malloc_r+0xb0>)
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	b923      	cbnz	r3, 800f5f6 <_malloc_r+0x3e>
 800f5ec:	4621      	mov	r1, r4
 800f5ee:	4630      	mov	r0, r6
 800f5f0:	f000 f83c 	bl	800f66c <_sbrk_r>
 800f5f4:	6038      	str	r0, [r7, #0]
 800f5f6:	4629      	mov	r1, r5
 800f5f8:	4630      	mov	r0, r6
 800f5fa:	f000 f837 	bl	800f66c <_sbrk_r>
 800f5fe:	1c43      	adds	r3, r0, #1
 800f600:	d123      	bne.n	800f64a <_malloc_r+0x92>
 800f602:	230c      	movs	r3, #12
 800f604:	6033      	str	r3, [r6, #0]
 800f606:	4630      	mov	r0, r6
 800f608:	f000 f85a 	bl	800f6c0 <__malloc_unlock>
 800f60c:	e7e3      	b.n	800f5d6 <_malloc_r+0x1e>
 800f60e:	6823      	ldr	r3, [r4, #0]
 800f610:	1b5b      	subs	r3, r3, r5
 800f612:	d417      	bmi.n	800f644 <_malloc_r+0x8c>
 800f614:	2b0b      	cmp	r3, #11
 800f616:	d903      	bls.n	800f620 <_malloc_r+0x68>
 800f618:	6023      	str	r3, [r4, #0]
 800f61a:	441c      	add	r4, r3
 800f61c:	6025      	str	r5, [r4, #0]
 800f61e:	e004      	b.n	800f62a <_malloc_r+0x72>
 800f620:	6863      	ldr	r3, [r4, #4]
 800f622:	42a2      	cmp	r2, r4
 800f624:	bf0c      	ite	eq
 800f626:	600b      	streq	r3, [r1, #0]
 800f628:	6053      	strne	r3, [r2, #4]
 800f62a:	4630      	mov	r0, r6
 800f62c:	f000 f848 	bl	800f6c0 <__malloc_unlock>
 800f630:	f104 000b 	add.w	r0, r4, #11
 800f634:	1d23      	adds	r3, r4, #4
 800f636:	f020 0007 	bic.w	r0, r0, #7
 800f63a:	1ac2      	subs	r2, r0, r3
 800f63c:	d0cc      	beq.n	800f5d8 <_malloc_r+0x20>
 800f63e:	1a1b      	subs	r3, r3, r0
 800f640:	50a3      	str	r3, [r4, r2]
 800f642:	e7c9      	b.n	800f5d8 <_malloc_r+0x20>
 800f644:	4622      	mov	r2, r4
 800f646:	6864      	ldr	r4, [r4, #4]
 800f648:	e7cc      	b.n	800f5e4 <_malloc_r+0x2c>
 800f64a:	1cc4      	adds	r4, r0, #3
 800f64c:	f024 0403 	bic.w	r4, r4, #3
 800f650:	42a0      	cmp	r0, r4
 800f652:	d0e3      	beq.n	800f61c <_malloc_r+0x64>
 800f654:	1a21      	subs	r1, r4, r0
 800f656:	4630      	mov	r0, r6
 800f658:	f000 f808 	bl	800f66c <_sbrk_r>
 800f65c:	3001      	adds	r0, #1
 800f65e:	d1dd      	bne.n	800f61c <_malloc_r+0x64>
 800f660:	e7cf      	b.n	800f602 <_malloc_r+0x4a>
 800f662:	bf00      	nop
 800f664:	2000029c 	.word	0x2000029c
 800f668:	200002a0 	.word	0x200002a0

0800f66c <_sbrk_r>:
 800f66c:	b538      	push	{r3, r4, r5, lr}
 800f66e:	4d06      	ldr	r5, [pc, #24]	; (800f688 <_sbrk_r+0x1c>)
 800f670:	2300      	movs	r3, #0
 800f672:	4604      	mov	r4, r0
 800f674:	4608      	mov	r0, r1
 800f676:	602b      	str	r3, [r5, #0]
 800f678:	f7f2 fd88 	bl	800218c <_sbrk>
 800f67c:	1c43      	adds	r3, r0, #1
 800f67e:	d102      	bne.n	800f686 <_sbrk_r+0x1a>
 800f680:	682b      	ldr	r3, [r5, #0]
 800f682:	b103      	cbz	r3, 800f686 <_sbrk_r+0x1a>
 800f684:	6023      	str	r3, [r4, #0]
 800f686:	bd38      	pop	{r3, r4, r5, pc}
 800f688:	20000d44 	.word	0x20000d44

0800f68c <strncat>:
 800f68c:	b530      	push	{r4, r5, lr}
 800f68e:	4604      	mov	r4, r0
 800f690:	7825      	ldrb	r5, [r4, #0]
 800f692:	4623      	mov	r3, r4
 800f694:	3401      	adds	r4, #1
 800f696:	2d00      	cmp	r5, #0
 800f698:	d1fa      	bne.n	800f690 <strncat+0x4>
 800f69a:	3a01      	subs	r2, #1
 800f69c:	d304      	bcc.n	800f6a8 <strncat+0x1c>
 800f69e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6a2:	f803 4b01 	strb.w	r4, [r3], #1
 800f6a6:	b904      	cbnz	r4, 800f6aa <strncat+0x1e>
 800f6a8:	bd30      	pop	{r4, r5, pc}
 800f6aa:	2a00      	cmp	r2, #0
 800f6ac:	d1f5      	bne.n	800f69a <strncat+0xe>
 800f6ae:	701a      	strb	r2, [r3, #0]
 800f6b0:	e7f3      	b.n	800f69a <strncat+0xe>
	...

0800f6b4 <__malloc_lock>:
 800f6b4:	4801      	ldr	r0, [pc, #4]	; (800f6bc <__malloc_lock+0x8>)
 800f6b6:	f000 b809 	b.w	800f6cc <__retarget_lock_acquire_recursive>
 800f6ba:	bf00      	nop
 800f6bc:	20000d4c 	.word	0x20000d4c

0800f6c0 <__malloc_unlock>:
 800f6c0:	4801      	ldr	r0, [pc, #4]	; (800f6c8 <__malloc_unlock+0x8>)
 800f6c2:	f000 b804 	b.w	800f6ce <__retarget_lock_release_recursive>
 800f6c6:	bf00      	nop
 800f6c8:	20000d4c 	.word	0x20000d4c

0800f6cc <__retarget_lock_acquire_recursive>:
 800f6cc:	4770      	bx	lr

0800f6ce <__retarget_lock_release_recursive>:
 800f6ce:	4770      	bx	lr

0800f6d0 <atan>:
 800f6d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6d4:	ec55 4b10 	vmov	r4, r5, d0
 800f6d8:	4bc3      	ldr	r3, [pc, #780]	; (800f9e8 <atan+0x318>)
 800f6da:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f6de:	429e      	cmp	r6, r3
 800f6e0:	46ab      	mov	fp, r5
 800f6e2:	dd18      	ble.n	800f716 <atan+0x46>
 800f6e4:	4bc1      	ldr	r3, [pc, #772]	; (800f9ec <atan+0x31c>)
 800f6e6:	429e      	cmp	r6, r3
 800f6e8:	dc01      	bgt.n	800f6ee <atan+0x1e>
 800f6ea:	d109      	bne.n	800f700 <atan+0x30>
 800f6ec:	b144      	cbz	r4, 800f700 <atan+0x30>
 800f6ee:	4622      	mov	r2, r4
 800f6f0:	462b      	mov	r3, r5
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	4629      	mov	r1, r5
 800f6f6:	f7f0 fd6d 	bl	80001d4 <__adddf3>
 800f6fa:	4604      	mov	r4, r0
 800f6fc:	460d      	mov	r5, r1
 800f6fe:	e006      	b.n	800f70e <atan+0x3e>
 800f700:	f1bb 0f00 	cmp.w	fp, #0
 800f704:	f300 8131 	bgt.w	800f96a <atan+0x29a>
 800f708:	a59b      	add	r5, pc, #620	; (adr r5, 800f978 <atan+0x2a8>)
 800f70a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f70e:	ec45 4b10 	vmov	d0, r4, r5
 800f712:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f716:	4bb6      	ldr	r3, [pc, #728]	; (800f9f0 <atan+0x320>)
 800f718:	429e      	cmp	r6, r3
 800f71a:	dc14      	bgt.n	800f746 <atan+0x76>
 800f71c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800f720:	429e      	cmp	r6, r3
 800f722:	dc0d      	bgt.n	800f740 <atan+0x70>
 800f724:	a396      	add	r3, pc, #600	; (adr r3, 800f980 <atan+0x2b0>)
 800f726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72a:	ee10 0a10 	vmov	r0, s0
 800f72e:	4629      	mov	r1, r5
 800f730:	f7f0 fd50 	bl	80001d4 <__adddf3>
 800f734:	4baf      	ldr	r3, [pc, #700]	; (800f9f4 <atan+0x324>)
 800f736:	2200      	movs	r2, #0
 800f738:	f7f1 f992 	bl	8000a60 <__aeabi_dcmpgt>
 800f73c:	2800      	cmp	r0, #0
 800f73e:	d1e6      	bne.n	800f70e <atan+0x3e>
 800f740:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800f744:	e02b      	b.n	800f79e <atan+0xce>
 800f746:	f000 f963 	bl	800fa10 <fabs>
 800f74a:	4bab      	ldr	r3, [pc, #684]	; (800f9f8 <atan+0x328>)
 800f74c:	429e      	cmp	r6, r3
 800f74e:	ec55 4b10 	vmov	r4, r5, d0
 800f752:	f300 80bf 	bgt.w	800f8d4 <atan+0x204>
 800f756:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800f75a:	429e      	cmp	r6, r3
 800f75c:	f300 80a0 	bgt.w	800f8a0 <atan+0x1d0>
 800f760:	ee10 2a10 	vmov	r2, s0
 800f764:	ee10 0a10 	vmov	r0, s0
 800f768:	462b      	mov	r3, r5
 800f76a:	4629      	mov	r1, r5
 800f76c:	f7f0 fd32 	bl	80001d4 <__adddf3>
 800f770:	4ba0      	ldr	r3, [pc, #640]	; (800f9f4 <atan+0x324>)
 800f772:	2200      	movs	r2, #0
 800f774:	f7f0 fd2c 	bl	80001d0 <__aeabi_dsub>
 800f778:	2200      	movs	r2, #0
 800f77a:	4606      	mov	r6, r0
 800f77c:	460f      	mov	r7, r1
 800f77e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f782:	4620      	mov	r0, r4
 800f784:	4629      	mov	r1, r5
 800f786:	f7f0 fd25 	bl	80001d4 <__adddf3>
 800f78a:	4602      	mov	r2, r0
 800f78c:	460b      	mov	r3, r1
 800f78e:	4630      	mov	r0, r6
 800f790:	4639      	mov	r1, r7
 800f792:	f7f0 ffff 	bl	8000794 <__aeabi_ddiv>
 800f796:	f04f 0a00 	mov.w	sl, #0
 800f79a:	4604      	mov	r4, r0
 800f79c:	460d      	mov	r5, r1
 800f79e:	4622      	mov	r2, r4
 800f7a0:	462b      	mov	r3, r5
 800f7a2:	4620      	mov	r0, r4
 800f7a4:	4629      	mov	r1, r5
 800f7a6:	f7f0 fecb 	bl	8000540 <__aeabi_dmul>
 800f7aa:	4602      	mov	r2, r0
 800f7ac:	460b      	mov	r3, r1
 800f7ae:	4680      	mov	r8, r0
 800f7b0:	4689      	mov	r9, r1
 800f7b2:	f7f0 fec5 	bl	8000540 <__aeabi_dmul>
 800f7b6:	a374      	add	r3, pc, #464	; (adr r3, 800f988 <atan+0x2b8>)
 800f7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7bc:	4606      	mov	r6, r0
 800f7be:	460f      	mov	r7, r1
 800f7c0:	f7f0 febe 	bl	8000540 <__aeabi_dmul>
 800f7c4:	a372      	add	r3, pc, #456	; (adr r3, 800f990 <atan+0x2c0>)
 800f7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ca:	f7f0 fd03 	bl	80001d4 <__adddf3>
 800f7ce:	4632      	mov	r2, r6
 800f7d0:	463b      	mov	r3, r7
 800f7d2:	f7f0 feb5 	bl	8000540 <__aeabi_dmul>
 800f7d6:	a370      	add	r3, pc, #448	; (adr r3, 800f998 <atan+0x2c8>)
 800f7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7dc:	f7f0 fcfa 	bl	80001d4 <__adddf3>
 800f7e0:	4632      	mov	r2, r6
 800f7e2:	463b      	mov	r3, r7
 800f7e4:	f7f0 feac 	bl	8000540 <__aeabi_dmul>
 800f7e8:	a36d      	add	r3, pc, #436	; (adr r3, 800f9a0 <atan+0x2d0>)
 800f7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ee:	f7f0 fcf1 	bl	80001d4 <__adddf3>
 800f7f2:	4632      	mov	r2, r6
 800f7f4:	463b      	mov	r3, r7
 800f7f6:	f7f0 fea3 	bl	8000540 <__aeabi_dmul>
 800f7fa:	a36b      	add	r3, pc, #428	; (adr r3, 800f9a8 <atan+0x2d8>)
 800f7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f800:	f7f0 fce8 	bl	80001d4 <__adddf3>
 800f804:	4632      	mov	r2, r6
 800f806:	463b      	mov	r3, r7
 800f808:	f7f0 fe9a 	bl	8000540 <__aeabi_dmul>
 800f80c:	a368      	add	r3, pc, #416	; (adr r3, 800f9b0 <atan+0x2e0>)
 800f80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f812:	f7f0 fcdf 	bl	80001d4 <__adddf3>
 800f816:	4642      	mov	r2, r8
 800f818:	464b      	mov	r3, r9
 800f81a:	f7f0 fe91 	bl	8000540 <__aeabi_dmul>
 800f81e:	a366      	add	r3, pc, #408	; (adr r3, 800f9b8 <atan+0x2e8>)
 800f820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f824:	4680      	mov	r8, r0
 800f826:	4689      	mov	r9, r1
 800f828:	4630      	mov	r0, r6
 800f82a:	4639      	mov	r1, r7
 800f82c:	f7f0 fe88 	bl	8000540 <__aeabi_dmul>
 800f830:	a363      	add	r3, pc, #396	; (adr r3, 800f9c0 <atan+0x2f0>)
 800f832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f836:	f7f0 fccb 	bl	80001d0 <__aeabi_dsub>
 800f83a:	4632      	mov	r2, r6
 800f83c:	463b      	mov	r3, r7
 800f83e:	f7f0 fe7f 	bl	8000540 <__aeabi_dmul>
 800f842:	a361      	add	r3, pc, #388	; (adr r3, 800f9c8 <atan+0x2f8>)
 800f844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f848:	f7f0 fcc2 	bl	80001d0 <__aeabi_dsub>
 800f84c:	4632      	mov	r2, r6
 800f84e:	463b      	mov	r3, r7
 800f850:	f7f0 fe76 	bl	8000540 <__aeabi_dmul>
 800f854:	a35e      	add	r3, pc, #376	; (adr r3, 800f9d0 <atan+0x300>)
 800f856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f85a:	f7f0 fcb9 	bl	80001d0 <__aeabi_dsub>
 800f85e:	4632      	mov	r2, r6
 800f860:	463b      	mov	r3, r7
 800f862:	f7f0 fe6d 	bl	8000540 <__aeabi_dmul>
 800f866:	a35c      	add	r3, pc, #368	; (adr r3, 800f9d8 <atan+0x308>)
 800f868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f86c:	f7f0 fcb0 	bl	80001d0 <__aeabi_dsub>
 800f870:	4632      	mov	r2, r6
 800f872:	463b      	mov	r3, r7
 800f874:	f7f0 fe64 	bl	8000540 <__aeabi_dmul>
 800f878:	4602      	mov	r2, r0
 800f87a:	460b      	mov	r3, r1
 800f87c:	4640      	mov	r0, r8
 800f87e:	4649      	mov	r1, r9
 800f880:	f7f0 fca8 	bl	80001d4 <__adddf3>
 800f884:	4622      	mov	r2, r4
 800f886:	462b      	mov	r3, r5
 800f888:	f7f0 fe5a 	bl	8000540 <__aeabi_dmul>
 800f88c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800f890:	4602      	mov	r2, r0
 800f892:	460b      	mov	r3, r1
 800f894:	d14b      	bne.n	800f92e <atan+0x25e>
 800f896:	4620      	mov	r0, r4
 800f898:	4629      	mov	r1, r5
 800f89a:	f7f0 fc99 	bl	80001d0 <__aeabi_dsub>
 800f89e:	e72c      	b.n	800f6fa <atan+0x2a>
 800f8a0:	ee10 0a10 	vmov	r0, s0
 800f8a4:	4b53      	ldr	r3, [pc, #332]	; (800f9f4 <atan+0x324>)
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	4629      	mov	r1, r5
 800f8aa:	f7f0 fc91 	bl	80001d0 <__aeabi_dsub>
 800f8ae:	4b51      	ldr	r3, [pc, #324]	; (800f9f4 <atan+0x324>)
 800f8b0:	4606      	mov	r6, r0
 800f8b2:	460f      	mov	r7, r1
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	4620      	mov	r0, r4
 800f8b8:	4629      	mov	r1, r5
 800f8ba:	f7f0 fc8b 	bl	80001d4 <__adddf3>
 800f8be:	4602      	mov	r2, r0
 800f8c0:	460b      	mov	r3, r1
 800f8c2:	4630      	mov	r0, r6
 800f8c4:	4639      	mov	r1, r7
 800f8c6:	f7f0 ff65 	bl	8000794 <__aeabi_ddiv>
 800f8ca:	f04f 0a01 	mov.w	sl, #1
 800f8ce:	4604      	mov	r4, r0
 800f8d0:	460d      	mov	r5, r1
 800f8d2:	e764      	b.n	800f79e <atan+0xce>
 800f8d4:	4b49      	ldr	r3, [pc, #292]	; (800f9fc <atan+0x32c>)
 800f8d6:	429e      	cmp	r6, r3
 800f8d8:	da1d      	bge.n	800f916 <atan+0x246>
 800f8da:	ee10 0a10 	vmov	r0, s0
 800f8de:	4b48      	ldr	r3, [pc, #288]	; (800fa00 <atan+0x330>)
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	4629      	mov	r1, r5
 800f8e4:	f7f0 fc74 	bl	80001d0 <__aeabi_dsub>
 800f8e8:	4b45      	ldr	r3, [pc, #276]	; (800fa00 <atan+0x330>)
 800f8ea:	4606      	mov	r6, r0
 800f8ec:	460f      	mov	r7, r1
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	4620      	mov	r0, r4
 800f8f2:	4629      	mov	r1, r5
 800f8f4:	f7f0 fe24 	bl	8000540 <__aeabi_dmul>
 800f8f8:	4b3e      	ldr	r3, [pc, #248]	; (800f9f4 <atan+0x324>)
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	f7f0 fc6a 	bl	80001d4 <__adddf3>
 800f900:	4602      	mov	r2, r0
 800f902:	460b      	mov	r3, r1
 800f904:	4630      	mov	r0, r6
 800f906:	4639      	mov	r1, r7
 800f908:	f7f0 ff44 	bl	8000794 <__aeabi_ddiv>
 800f90c:	f04f 0a02 	mov.w	sl, #2
 800f910:	4604      	mov	r4, r0
 800f912:	460d      	mov	r5, r1
 800f914:	e743      	b.n	800f79e <atan+0xce>
 800f916:	462b      	mov	r3, r5
 800f918:	ee10 2a10 	vmov	r2, s0
 800f91c:	4939      	ldr	r1, [pc, #228]	; (800fa04 <atan+0x334>)
 800f91e:	2000      	movs	r0, #0
 800f920:	f7f0 ff38 	bl	8000794 <__aeabi_ddiv>
 800f924:	f04f 0a03 	mov.w	sl, #3
 800f928:	4604      	mov	r4, r0
 800f92a:	460d      	mov	r5, r1
 800f92c:	e737      	b.n	800f79e <atan+0xce>
 800f92e:	4b36      	ldr	r3, [pc, #216]	; (800fa08 <atan+0x338>)
 800f930:	4e36      	ldr	r6, [pc, #216]	; (800fa0c <atan+0x33c>)
 800f932:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f936:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800f93a:	e9da 2300 	ldrd	r2, r3, [sl]
 800f93e:	f7f0 fc47 	bl	80001d0 <__aeabi_dsub>
 800f942:	4622      	mov	r2, r4
 800f944:	462b      	mov	r3, r5
 800f946:	f7f0 fc43 	bl	80001d0 <__aeabi_dsub>
 800f94a:	4602      	mov	r2, r0
 800f94c:	460b      	mov	r3, r1
 800f94e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f952:	f7f0 fc3d 	bl	80001d0 <__aeabi_dsub>
 800f956:	f1bb 0f00 	cmp.w	fp, #0
 800f95a:	4604      	mov	r4, r0
 800f95c:	460d      	mov	r5, r1
 800f95e:	f6bf aed6 	bge.w	800f70e <atan+0x3e>
 800f962:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f966:	461d      	mov	r5, r3
 800f968:	e6d1      	b.n	800f70e <atan+0x3e>
 800f96a:	a51d      	add	r5, pc, #116	; (adr r5, 800f9e0 <atan+0x310>)
 800f96c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f970:	e6cd      	b.n	800f70e <atan+0x3e>
 800f972:	bf00      	nop
 800f974:	f3af 8000 	nop.w
 800f978:	54442d18 	.word	0x54442d18
 800f97c:	bff921fb 	.word	0xbff921fb
 800f980:	8800759c 	.word	0x8800759c
 800f984:	7e37e43c 	.word	0x7e37e43c
 800f988:	e322da11 	.word	0xe322da11
 800f98c:	3f90ad3a 	.word	0x3f90ad3a
 800f990:	24760deb 	.word	0x24760deb
 800f994:	3fa97b4b 	.word	0x3fa97b4b
 800f998:	a0d03d51 	.word	0xa0d03d51
 800f99c:	3fb10d66 	.word	0x3fb10d66
 800f9a0:	c54c206e 	.word	0xc54c206e
 800f9a4:	3fb745cd 	.word	0x3fb745cd
 800f9a8:	920083ff 	.word	0x920083ff
 800f9ac:	3fc24924 	.word	0x3fc24924
 800f9b0:	5555550d 	.word	0x5555550d
 800f9b4:	3fd55555 	.word	0x3fd55555
 800f9b8:	2c6a6c2f 	.word	0x2c6a6c2f
 800f9bc:	bfa2b444 	.word	0xbfa2b444
 800f9c0:	52defd9a 	.word	0x52defd9a
 800f9c4:	3fadde2d 	.word	0x3fadde2d
 800f9c8:	af749a6d 	.word	0xaf749a6d
 800f9cc:	3fb3b0f2 	.word	0x3fb3b0f2
 800f9d0:	fe231671 	.word	0xfe231671
 800f9d4:	3fbc71c6 	.word	0x3fbc71c6
 800f9d8:	9998ebc4 	.word	0x9998ebc4
 800f9dc:	3fc99999 	.word	0x3fc99999
 800f9e0:	54442d18 	.word	0x54442d18
 800f9e4:	3ff921fb 	.word	0x3ff921fb
 800f9e8:	440fffff 	.word	0x440fffff
 800f9ec:	7ff00000 	.word	0x7ff00000
 800f9f0:	3fdbffff 	.word	0x3fdbffff
 800f9f4:	3ff00000 	.word	0x3ff00000
 800f9f8:	3ff2ffff 	.word	0x3ff2ffff
 800f9fc:	40038000 	.word	0x40038000
 800fa00:	3ff80000 	.word	0x3ff80000
 800fa04:	bff00000 	.word	0xbff00000
 800fa08:	08010330 	.word	0x08010330
 800fa0c:	08010310 	.word	0x08010310

0800fa10 <fabs>:
 800fa10:	ec51 0b10 	vmov	r0, r1, d0
 800fa14:	ee10 2a10 	vmov	r2, s0
 800fa18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fa1c:	ec43 2b10 	vmov	d0, r2, r3
 800fa20:	4770      	bx	lr

0800fa22 <atan2>:
 800fa22:	f000 b835 	b.w	800fa90 <__ieee754_atan2>
	...

0800fa28 <sqrt>:
 800fa28:	b538      	push	{r3, r4, r5, lr}
 800fa2a:	ed2d 8b02 	vpush	{d8}
 800fa2e:	ec55 4b10 	vmov	r4, r5, d0
 800fa32:	f000 f8f7 	bl	800fc24 <__ieee754_sqrt>
 800fa36:	4b15      	ldr	r3, [pc, #84]	; (800fa8c <sqrt+0x64>)
 800fa38:	eeb0 8a40 	vmov.f32	s16, s0
 800fa3c:	eef0 8a60 	vmov.f32	s17, s1
 800fa40:	f993 3000 	ldrsb.w	r3, [r3]
 800fa44:	3301      	adds	r3, #1
 800fa46:	d019      	beq.n	800fa7c <sqrt+0x54>
 800fa48:	4622      	mov	r2, r4
 800fa4a:	462b      	mov	r3, r5
 800fa4c:	4620      	mov	r0, r4
 800fa4e:	4629      	mov	r1, r5
 800fa50:	f7f1 f810 	bl	8000a74 <__aeabi_dcmpun>
 800fa54:	b990      	cbnz	r0, 800fa7c <sqrt+0x54>
 800fa56:	2200      	movs	r2, #0
 800fa58:	2300      	movs	r3, #0
 800fa5a:	4620      	mov	r0, r4
 800fa5c:	4629      	mov	r1, r5
 800fa5e:	f7f0 ffe1 	bl	8000a24 <__aeabi_dcmplt>
 800fa62:	b158      	cbz	r0, 800fa7c <sqrt+0x54>
 800fa64:	f7ff fd08 	bl	800f478 <__errno>
 800fa68:	2321      	movs	r3, #33	; 0x21
 800fa6a:	6003      	str	r3, [r0, #0]
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	2300      	movs	r3, #0
 800fa70:	4610      	mov	r0, r2
 800fa72:	4619      	mov	r1, r3
 800fa74:	f7f0 fe8e 	bl	8000794 <__aeabi_ddiv>
 800fa78:	ec41 0b18 	vmov	d8, r0, r1
 800fa7c:	eeb0 0a48 	vmov.f32	s0, s16
 800fa80:	eef0 0a68 	vmov.f32	s1, s17
 800fa84:	ecbd 8b02 	vpop	{d8}
 800fa88:	bd38      	pop	{r3, r4, r5, pc}
 800fa8a:	bf00      	nop
 800fa8c:	2000026c 	.word	0x2000026c

0800fa90 <__ieee754_atan2>:
 800fa90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa94:	ec57 6b11 	vmov	r6, r7, d1
 800fa98:	4273      	negs	r3, r6
 800fa9a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800fc20 <__ieee754_atan2+0x190>
 800fa9e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800faa2:	4333      	orrs	r3, r6
 800faa4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800faa8:	4573      	cmp	r3, lr
 800faaa:	ec51 0b10 	vmov	r0, r1, d0
 800faae:	ee11 8a10 	vmov	r8, s2
 800fab2:	d80a      	bhi.n	800faca <__ieee754_atan2+0x3a>
 800fab4:	4244      	negs	r4, r0
 800fab6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800faba:	4304      	orrs	r4, r0
 800fabc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800fac0:	4574      	cmp	r4, lr
 800fac2:	ee10 9a10 	vmov	r9, s0
 800fac6:	468c      	mov	ip, r1
 800fac8:	d907      	bls.n	800fada <__ieee754_atan2+0x4a>
 800faca:	4632      	mov	r2, r6
 800facc:	463b      	mov	r3, r7
 800face:	f7f0 fb81 	bl	80001d4 <__adddf3>
 800fad2:	ec41 0b10 	vmov	d0, r0, r1
 800fad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fada:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800fade:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fae2:	4334      	orrs	r4, r6
 800fae4:	d103      	bne.n	800faee <__ieee754_atan2+0x5e>
 800fae6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800faea:	f7ff bdf1 	b.w	800f6d0 <atan>
 800faee:	17bc      	asrs	r4, r7, #30
 800faf0:	f004 0402 	and.w	r4, r4, #2
 800faf4:	ea53 0909 	orrs.w	r9, r3, r9
 800faf8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800fafc:	d107      	bne.n	800fb0e <__ieee754_atan2+0x7e>
 800fafe:	2c02      	cmp	r4, #2
 800fb00:	d060      	beq.n	800fbc4 <__ieee754_atan2+0x134>
 800fb02:	2c03      	cmp	r4, #3
 800fb04:	d1e5      	bne.n	800fad2 <__ieee754_atan2+0x42>
 800fb06:	a142      	add	r1, pc, #264	; (adr r1, 800fc10 <__ieee754_atan2+0x180>)
 800fb08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb0c:	e7e1      	b.n	800fad2 <__ieee754_atan2+0x42>
 800fb0e:	ea52 0808 	orrs.w	r8, r2, r8
 800fb12:	d106      	bne.n	800fb22 <__ieee754_atan2+0x92>
 800fb14:	f1bc 0f00 	cmp.w	ip, #0
 800fb18:	da5f      	bge.n	800fbda <__ieee754_atan2+0x14a>
 800fb1a:	a13f      	add	r1, pc, #252	; (adr r1, 800fc18 <__ieee754_atan2+0x188>)
 800fb1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb20:	e7d7      	b.n	800fad2 <__ieee754_atan2+0x42>
 800fb22:	4572      	cmp	r2, lr
 800fb24:	d10f      	bne.n	800fb46 <__ieee754_atan2+0xb6>
 800fb26:	4293      	cmp	r3, r2
 800fb28:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800fb2c:	d107      	bne.n	800fb3e <__ieee754_atan2+0xae>
 800fb2e:	2c02      	cmp	r4, #2
 800fb30:	d84c      	bhi.n	800fbcc <__ieee754_atan2+0x13c>
 800fb32:	4b35      	ldr	r3, [pc, #212]	; (800fc08 <__ieee754_atan2+0x178>)
 800fb34:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800fb38:	e9d4 0100 	ldrd	r0, r1, [r4]
 800fb3c:	e7c9      	b.n	800fad2 <__ieee754_atan2+0x42>
 800fb3e:	2c02      	cmp	r4, #2
 800fb40:	d848      	bhi.n	800fbd4 <__ieee754_atan2+0x144>
 800fb42:	4b32      	ldr	r3, [pc, #200]	; (800fc0c <__ieee754_atan2+0x17c>)
 800fb44:	e7f6      	b.n	800fb34 <__ieee754_atan2+0xa4>
 800fb46:	4573      	cmp	r3, lr
 800fb48:	d0e4      	beq.n	800fb14 <__ieee754_atan2+0x84>
 800fb4a:	1a9b      	subs	r3, r3, r2
 800fb4c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800fb50:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fb54:	da1e      	bge.n	800fb94 <__ieee754_atan2+0x104>
 800fb56:	2f00      	cmp	r7, #0
 800fb58:	da01      	bge.n	800fb5e <__ieee754_atan2+0xce>
 800fb5a:	323c      	adds	r2, #60	; 0x3c
 800fb5c:	db1e      	blt.n	800fb9c <__ieee754_atan2+0x10c>
 800fb5e:	4632      	mov	r2, r6
 800fb60:	463b      	mov	r3, r7
 800fb62:	f7f0 fe17 	bl	8000794 <__aeabi_ddiv>
 800fb66:	ec41 0b10 	vmov	d0, r0, r1
 800fb6a:	f7ff ff51 	bl	800fa10 <fabs>
 800fb6e:	f7ff fdaf 	bl	800f6d0 <atan>
 800fb72:	ec51 0b10 	vmov	r0, r1, d0
 800fb76:	2c01      	cmp	r4, #1
 800fb78:	d013      	beq.n	800fba2 <__ieee754_atan2+0x112>
 800fb7a:	2c02      	cmp	r4, #2
 800fb7c:	d015      	beq.n	800fbaa <__ieee754_atan2+0x11a>
 800fb7e:	2c00      	cmp	r4, #0
 800fb80:	d0a7      	beq.n	800fad2 <__ieee754_atan2+0x42>
 800fb82:	a319      	add	r3, pc, #100	; (adr r3, 800fbe8 <__ieee754_atan2+0x158>)
 800fb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb88:	f7f0 fb22 	bl	80001d0 <__aeabi_dsub>
 800fb8c:	a318      	add	r3, pc, #96	; (adr r3, 800fbf0 <__ieee754_atan2+0x160>)
 800fb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb92:	e014      	b.n	800fbbe <__ieee754_atan2+0x12e>
 800fb94:	a118      	add	r1, pc, #96	; (adr r1, 800fbf8 <__ieee754_atan2+0x168>)
 800fb96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb9a:	e7ec      	b.n	800fb76 <__ieee754_atan2+0xe6>
 800fb9c:	2000      	movs	r0, #0
 800fb9e:	2100      	movs	r1, #0
 800fba0:	e7e9      	b.n	800fb76 <__ieee754_atan2+0xe6>
 800fba2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fba6:	4619      	mov	r1, r3
 800fba8:	e793      	b.n	800fad2 <__ieee754_atan2+0x42>
 800fbaa:	a30f      	add	r3, pc, #60	; (adr r3, 800fbe8 <__ieee754_atan2+0x158>)
 800fbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb0:	f7f0 fb0e 	bl	80001d0 <__aeabi_dsub>
 800fbb4:	4602      	mov	r2, r0
 800fbb6:	460b      	mov	r3, r1
 800fbb8:	a10d      	add	r1, pc, #52	; (adr r1, 800fbf0 <__ieee754_atan2+0x160>)
 800fbba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbbe:	f7f0 fb07 	bl	80001d0 <__aeabi_dsub>
 800fbc2:	e786      	b.n	800fad2 <__ieee754_atan2+0x42>
 800fbc4:	a10a      	add	r1, pc, #40	; (adr r1, 800fbf0 <__ieee754_atan2+0x160>)
 800fbc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbca:	e782      	b.n	800fad2 <__ieee754_atan2+0x42>
 800fbcc:	a10c      	add	r1, pc, #48	; (adr r1, 800fc00 <__ieee754_atan2+0x170>)
 800fbce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbd2:	e77e      	b.n	800fad2 <__ieee754_atan2+0x42>
 800fbd4:	2000      	movs	r0, #0
 800fbd6:	2100      	movs	r1, #0
 800fbd8:	e77b      	b.n	800fad2 <__ieee754_atan2+0x42>
 800fbda:	a107      	add	r1, pc, #28	; (adr r1, 800fbf8 <__ieee754_atan2+0x168>)
 800fbdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbe0:	e777      	b.n	800fad2 <__ieee754_atan2+0x42>
 800fbe2:	bf00      	nop
 800fbe4:	f3af 8000 	nop.w
 800fbe8:	33145c07 	.word	0x33145c07
 800fbec:	3ca1a626 	.word	0x3ca1a626
 800fbf0:	54442d18 	.word	0x54442d18
 800fbf4:	400921fb 	.word	0x400921fb
 800fbf8:	54442d18 	.word	0x54442d18
 800fbfc:	3ff921fb 	.word	0x3ff921fb
 800fc00:	54442d18 	.word	0x54442d18
 800fc04:	3fe921fb 	.word	0x3fe921fb
 800fc08:	08010350 	.word	0x08010350
 800fc0c:	08010368 	.word	0x08010368
 800fc10:	54442d18 	.word	0x54442d18
 800fc14:	c00921fb 	.word	0xc00921fb
 800fc18:	54442d18 	.word	0x54442d18
 800fc1c:	bff921fb 	.word	0xbff921fb
 800fc20:	7ff00000 	.word	0x7ff00000

0800fc24 <__ieee754_sqrt>:
 800fc24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc28:	ec55 4b10 	vmov	r4, r5, d0
 800fc2c:	4e56      	ldr	r6, [pc, #344]	; (800fd88 <__ieee754_sqrt+0x164>)
 800fc2e:	43ae      	bics	r6, r5
 800fc30:	ee10 0a10 	vmov	r0, s0
 800fc34:	ee10 3a10 	vmov	r3, s0
 800fc38:	4629      	mov	r1, r5
 800fc3a:	462a      	mov	r2, r5
 800fc3c:	d110      	bne.n	800fc60 <__ieee754_sqrt+0x3c>
 800fc3e:	ee10 2a10 	vmov	r2, s0
 800fc42:	462b      	mov	r3, r5
 800fc44:	f7f0 fc7c 	bl	8000540 <__aeabi_dmul>
 800fc48:	4602      	mov	r2, r0
 800fc4a:	460b      	mov	r3, r1
 800fc4c:	4620      	mov	r0, r4
 800fc4e:	4629      	mov	r1, r5
 800fc50:	f7f0 fac0 	bl	80001d4 <__adddf3>
 800fc54:	4604      	mov	r4, r0
 800fc56:	460d      	mov	r5, r1
 800fc58:	ec45 4b10 	vmov	d0, r4, r5
 800fc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc60:	2d00      	cmp	r5, #0
 800fc62:	dc10      	bgt.n	800fc86 <__ieee754_sqrt+0x62>
 800fc64:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fc68:	4330      	orrs	r0, r6
 800fc6a:	d0f5      	beq.n	800fc58 <__ieee754_sqrt+0x34>
 800fc6c:	b15d      	cbz	r5, 800fc86 <__ieee754_sqrt+0x62>
 800fc6e:	ee10 2a10 	vmov	r2, s0
 800fc72:	462b      	mov	r3, r5
 800fc74:	ee10 0a10 	vmov	r0, s0
 800fc78:	f7f0 faaa 	bl	80001d0 <__aeabi_dsub>
 800fc7c:	4602      	mov	r2, r0
 800fc7e:	460b      	mov	r3, r1
 800fc80:	f7f0 fd88 	bl	8000794 <__aeabi_ddiv>
 800fc84:	e7e6      	b.n	800fc54 <__ieee754_sqrt+0x30>
 800fc86:	1509      	asrs	r1, r1, #20
 800fc88:	d076      	beq.n	800fd78 <__ieee754_sqrt+0x154>
 800fc8a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800fc8e:	07ce      	lsls	r6, r1, #31
 800fc90:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800fc94:	bf5e      	ittt	pl
 800fc96:	0fda      	lsrpl	r2, r3, #31
 800fc98:	005b      	lslpl	r3, r3, #1
 800fc9a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800fc9e:	0fda      	lsrs	r2, r3, #31
 800fca0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800fca4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800fca8:	2000      	movs	r0, #0
 800fcaa:	106d      	asrs	r5, r5, #1
 800fcac:	005b      	lsls	r3, r3, #1
 800fcae:	f04f 0e16 	mov.w	lr, #22
 800fcb2:	4684      	mov	ip, r0
 800fcb4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fcb8:	eb0c 0401 	add.w	r4, ip, r1
 800fcbc:	4294      	cmp	r4, r2
 800fcbe:	bfde      	ittt	le
 800fcc0:	1b12      	suble	r2, r2, r4
 800fcc2:	eb04 0c01 	addle.w	ip, r4, r1
 800fcc6:	1840      	addle	r0, r0, r1
 800fcc8:	0052      	lsls	r2, r2, #1
 800fcca:	f1be 0e01 	subs.w	lr, lr, #1
 800fcce:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800fcd2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fcd6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fcda:	d1ed      	bne.n	800fcb8 <__ieee754_sqrt+0x94>
 800fcdc:	4671      	mov	r1, lr
 800fcde:	2720      	movs	r7, #32
 800fce0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800fce4:	4562      	cmp	r2, ip
 800fce6:	eb04 060e 	add.w	r6, r4, lr
 800fcea:	dc02      	bgt.n	800fcf2 <__ieee754_sqrt+0xce>
 800fcec:	d113      	bne.n	800fd16 <__ieee754_sqrt+0xf2>
 800fcee:	429e      	cmp	r6, r3
 800fcf0:	d811      	bhi.n	800fd16 <__ieee754_sqrt+0xf2>
 800fcf2:	2e00      	cmp	r6, #0
 800fcf4:	eb06 0e04 	add.w	lr, r6, r4
 800fcf8:	da43      	bge.n	800fd82 <__ieee754_sqrt+0x15e>
 800fcfa:	f1be 0f00 	cmp.w	lr, #0
 800fcfe:	db40      	blt.n	800fd82 <__ieee754_sqrt+0x15e>
 800fd00:	f10c 0801 	add.w	r8, ip, #1
 800fd04:	eba2 020c 	sub.w	r2, r2, ip
 800fd08:	429e      	cmp	r6, r3
 800fd0a:	bf88      	it	hi
 800fd0c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800fd10:	1b9b      	subs	r3, r3, r6
 800fd12:	4421      	add	r1, r4
 800fd14:	46c4      	mov	ip, r8
 800fd16:	0052      	lsls	r2, r2, #1
 800fd18:	3f01      	subs	r7, #1
 800fd1a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800fd1e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800fd22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fd26:	d1dd      	bne.n	800fce4 <__ieee754_sqrt+0xc0>
 800fd28:	4313      	orrs	r3, r2
 800fd2a:	d006      	beq.n	800fd3a <__ieee754_sqrt+0x116>
 800fd2c:	1c4c      	adds	r4, r1, #1
 800fd2e:	bf13      	iteet	ne
 800fd30:	3101      	addne	r1, #1
 800fd32:	3001      	addeq	r0, #1
 800fd34:	4639      	moveq	r1, r7
 800fd36:	f021 0101 	bicne.w	r1, r1, #1
 800fd3a:	1043      	asrs	r3, r0, #1
 800fd3c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800fd40:	0849      	lsrs	r1, r1, #1
 800fd42:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800fd46:	07c2      	lsls	r2, r0, #31
 800fd48:	bf48      	it	mi
 800fd4a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800fd4e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800fd52:	460c      	mov	r4, r1
 800fd54:	463d      	mov	r5, r7
 800fd56:	e77f      	b.n	800fc58 <__ieee754_sqrt+0x34>
 800fd58:	0ada      	lsrs	r2, r3, #11
 800fd5a:	3815      	subs	r0, #21
 800fd5c:	055b      	lsls	r3, r3, #21
 800fd5e:	2a00      	cmp	r2, #0
 800fd60:	d0fa      	beq.n	800fd58 <__ieee754_sqrt+0x134>
 800fd62:	02d7      	lsls	r7, r2, #11
 800fd64:	d50a      	bpl.n	800fd7c <__ieee754_sqrt+0x158>
 800fd66:	f1c1 0420 	rsb	r4, r1, #32
 800fd6a:	fa23 f404 	lsr.w	r4, r3, r4
 800fd6e:	1e4d      	subs	r5, r1, #1
 800fd70:	408b      	lsls	r3, r1
 800fd72:	4322      	orrs	r2, r4
 800fd74:	1b41      	subs	r1, r0, r5
 800fd76:	e788      	b.n	800fc8a <__ieee754_sqrt+0x66>
 800fd78:	4608      	mov	r0, r1
 800fd7a:	e7f0      	b.n	800fd5e <__ieee754_sqrt+0x13a>
 800fd7c:	0052      	lsls	r2, r2, #1
 800fd7e:	3101      	adds	r1, #1
 800fd80:	e7ef      	b.n	800fd62 <__ieee754_sqrt+0x13e>
 800fd82:	46e0      	mov	r8, ip
 800fd84:	e7be      	b.n	800fd04 <__ieee754_sqrt+0xe0>
 800fd86:	bf00      	nop
 800fd88:	7ff00000 	.word	0x7ff00000

0800fd8c <_init>:
 800fd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd8e:	bf00      	nop
 800fd90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd92:	bc08      	pop	{r3}
 800fd94:	469e      	mov	lr, r3
 800fd96:	4770      	bx	lr

0800fd98 <_fini>:
 800fd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd9a:	bf00      	nop
 800fd9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd9e:	bc08      	pop	{r3}
 800fda0:	469e      	mov	lr, r3
 800fda2:	4770      	bx	lr
