
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007ed0  08007ed0  00017ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007eec  08007eec  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007eec  08007eec  00017eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ef4  08007ef4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ef4  08007ef4  00017ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ef8  08007ef8  00017ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000858  20000090  08007f8c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e8  08007f8c  000208e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f251  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fa2  00000000  00000000  0003f311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  000432b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f8  00000000  00000000  00044930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248ff  00000000  00000000  00045e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ea00  00000000  00000000  0006a727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d361f  00000000  00000000  00089127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c746  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006158  00000000  00000000  0015c79c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007eb8 	.word	0x08007eb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007eb8 	.word	0x08007eb8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fd1d 	bl	8000f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f83f 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f9d5 	bl	800087c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d2:	f000 f8c9 	bl	8000668 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d6:	f000 f8f5 	bl	80006c4 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004da:	f000 f923 	bl	8000724 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004de:	f007 f931 	bl	8007744 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80004e2:	f000 f955 	bl	8000790 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80004e6:	f000 f8b3 	bl	8000650 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  ////////////////////////////////////////////////////
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004ea:	2100      	movs	r1, #0
 80004ec:	4816      	ldr	r0, [pc, #88]	; (8000548 <main+0x88>)
 80004ee:	f004 fa65 	bl	80049bc <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int delay = 1;
 80004f2:	2301      	movs	r3, #1
 80004f4:	603b      	str	r3, [r7, #0]
  while (1)
  {
	for (int i = 0; i<= 1000; i ++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	607b      	str	r3, [r7, #4]
 80004fa:	e020      	b.n	800053e <main+0x7e>
	{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <main+0x88>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(delay);
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	4618      	mov	r0, r3
 8000508:	f000 fd6e 	bl	8000fe8 <HAL_Delay>
		if(i >= 1000)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000512:	db11      	blt.n	8000538 <main+0x78>
		{
			for(i = 1000; i>=0; i--)
 8000514:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000518:	607b      	str	r3, [r7, #4]
 800051a:	e00a      	b.n	8000532 <main+0x72>
			{
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 800051c:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <main+0x88>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(delay);
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	4618      	mov	r0, r3
 8000528:	f000 fd5e 	bl	8000fe8 <HAL_Delay>
			for(i = 1000; i>=0; i--)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	3b01      	subs	r3, #1
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b00      	cmp	r3, #0
 8000536:	daf1      	bge.n	800051c <main+0x5c>
	for (int i = 0; i<= 1000; i ++)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	3301      	adds	r3, #1
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000544:	ddda      	ble.n	80004fc <main+0x3c>
 8000546:	e7d6      	b.n	80004f6 <main+0x36>
 8000548:	20000168 	.word	0x20000168

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b098      	sub	sp, #96	; 0x60
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000556:	2230      	movs	r2, #48	; 0x30
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f007 fbdc 	bl	8007d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 031c 	add.w	r3, r7, #28
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	4b31      	ldr	r3, [pc, #196]	; (8000648 <SystemClock_Config+0xfc>)
 8000584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000586:	4a30      	ldr	r2, [pc, #192]	; (8000648 <SystemClock_Config+0xfc>)
 8000588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058c:	6413      	str	r3, [r2, #64]	; 0x40
 800058e:	4b2e      	ldr	r3, [pc, #184]	; (8000648 <SystemClock_Config+0xfc>)
 8000590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	4b2b      	ldr	r3, [pc, #172]	; (800064c <SystemClock_Config+0x100>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a2a      	ldr	r2, [pc, #168]	; (800064c <SystemClock_Config+0x100>)
 80005a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a8:	6013      	str	r3, [r2, #0]
 80005aa:	4b28      	ldr	r3, [pc, #160]	; (800064c <SystemClock_Config+0x100>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b6:	2301      	movs	r3, #1
 80005b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c0:	2302      	movs	r3, #2
 80005c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ca:	2308      	movs	r3, #8
 80005cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005ce:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005d2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d8:	2307      	movs	r3, #7
 80005da:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005e0:	4618      	mov	r0, r3
 80005e2:	f003 fb19 	bl	8003c18 <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005ec:	f000 fa44 	bl	8000a78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f4:	2302      	movs	r3, #2
 80005f6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000600:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000608:	f107 031c 	add.w	r3, r7, #28
 800060c:	2105      	movs	r1, #5
 800060e:	4618      	mov	r0, r3
 8000610:	f003 fd7a 	bl	8004108 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800061a:	f000 fa2d 	bl	8000a78 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800061e:	2301      	movs	r3, #1
 8000620:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000622:	23c0      	movs	r3, #192	; 0xc0
 8000624:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000626:	2302      	movs	r3, #2
 8000628:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	4618      	mov	r0, r3
 8000630:	f003 ff52 	bl	80044d8 <HAL_RCCEx_PeriphCLKConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800063a:	f000 fa1d 	bl	8000a78 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3760      	adds	r7, #96	; 0x60
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	2100      	movs	r1, #0
 8000658:	201c      	movs	r0, #28
 800065a:	f000 fdc4 	bl	80011e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800065e:	201c      	movs	r0, #28
 8000660:	f000 fddd 	bl	800121e <HAL_NVIC_EnableIRQ>
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}

08000668 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_I2C1_Init+0x50>)
 800066e:	4a13      	ldr	r2, [pc, #76]	; (80006bc <MX_I2C1_Init+0x54>)
 8000670:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000674:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <MX_I2C1_Init+0x58>)
 8000676:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000686:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800068a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <MX_I2C1_Init+0x50>)
 800068e:	2200      	movs	r2, #0
 8000690:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <MX_I2C1_Init+0x50>)
 80006a6:	f002 fcd3 	bl	8003050 <HAL_I2C_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b0:	f000 f9e2 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	200000bc 	.word	0x200000bc
 80006bc:	40005400 	.word	0x40005400
 80006c0:	000186a0 	.word	0x000186a0

080006c4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006c8:	4b13      	ldr	r3, [pc, #76]	; (8000718 <MX_I2S3_Init+0x54>)
 80006ca:	4a14      	ldr	r2, [pc, #80]	; (800071c <MX_I2S3_Init+0x58>)
 80006cc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_I2S3_Init+0x54>)
 80006d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_I2S3_Init+0x54>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006dc:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_I2S3_Init+0x54>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006e2:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <MX_I2S3_Init+0x54>)
 80006e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_I2S3_Init+0x54>)
 80006ec:	4a0c      	ldr	r2, [pc, #48]	; (8000720 <MX_I2S3_Init+0x5c>)
 80006ee:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_I2S3_Init+0x54>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <MX_I2S3_Init+0x54>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_I2S3_Init+0x54>)
 80006fe:	2200      	movs	r2, #0
 8000700:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_I2S3_Init+0x54>)
 8000704:	f002 fde8 	bl	80032d8 <HAL_I2S_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800070e:	f000 f9b3 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200001b0 	.word	0x200001b0
 800071c:	40003c00 	.word	0x40003c00
 8000720:	00017700 	.word	0x00017700

08000724 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <MX_SPI1_Init+0x64>)
 800072a:	4a18      	ldr	r2, [pc, #96]	; (800078c <MX_SPI1_Init+0x68>)
 800072c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MX_SPI1_Init+0x64>)
 8000730:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000734:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_SPI1_Init+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_SPI1_Init+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_SPI1_Init+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_SPI1_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_SPI1_Init+0x64>)
 8000750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000754:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_SPI1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <MX_SPI1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_SPI1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <MX_SPI1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_SPI1_Init+0x64>)
 8000770:	220a      	movs	r2, #10
 8000772:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_SPI1_Init+0x64>)
 8000776:	f003 ffef 	bl	8004758 <HAL_SPI_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000780:	f000 f97a 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000110 	.word	0x20000110
 800078c:	40013000 	.word	0x40013000

08000790 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08e      	sub	sp, #56	; 0x38
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000796:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a4:	f107 0320 	add.w	r3, r7, #32
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
 80007bc:	615a      	str	r2, [r3, #20]
 80007be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007c0:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <MX_TIM2_Init+0xe8>)
 80007c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 80007c8:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <MX_TIM2_Init+0xe8>)
 80007ca:	f240 3247 	movw	r2, #839	; 0x347
 80007ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d0:	4b29      	ldr	r3, [pc, #164]	; (8000878 <MX_TIM2_Init+0xe8>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80007d6:	4b28      	ldr	r3, [pc, #160]	; (8000878 <MX_TIM2_Init+0xe8>)
 80007d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007de:	4b26      	ldr	r3, [pc, #152]	; (8000878 <MX_TIM2_Init+0xe8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007e4:	4b24      	ldr	r3, [pc, #144]	; (8000878 <MX_TIM2_Init+0xe8>)
 80007e6:	2280      	movs	r2, #128	; 0x80
 80007e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007ea:	4823      	ldr	r0, [pc, #140]	; (8000878 <MX_TIM2_Init+0xe8>)
 80007ec:	f004 f83d 	bl	800486a <HAL_TIM_Base_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80007f6:	f000 f93f 	bl	8000a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000800:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000804:	4619      	mov	r1, r3
 8000806:	481c      	ldr	r0, [pc, #112]	; (8000878 <MX_TIM2_Init+0xe8>)
 8000808:	f004 fb66 	bl	8004ed8 <HAL_TIM_ConfigClockSource>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000812:	f000 f931 	bl	8000a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000816:	4818      	ldr	r0, [pc, #96]	; (8000878 <MX_TIM2_Init+0xe8>)
 8000818:	f004 f876 	bl	8004908 <HAL_TIM_PWM_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000822:	f000 f929 	bl	8000a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000826:	2310      	movs	r3, #16
 8000828:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800082e:	f107 0320 	add.w	r3, r7, #32
 8000832:	4619      	mov	r1, r3
 8000834:	4810      	ldr	r0, [pc, #64]	; (8000878 <MX_TIM2_Init+0xe8>)
 8000836:	f004 ff55 	bl	80056e4 <HAL_TIMEx_MasterConfigSynchronization>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000840:	f000 f91a 	bl	8000a78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000844:	2360      	movs	r3, #96	; 0x60
 8000846:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000848:	2332      	movs	r3, #50	; 0x32
 800084a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2200      	movs	r2, #0
 8000858:	4619      	mov	r1, r3
 800085a:	4807      	ldr	r0, [pc, #28]	; (8000878 <MX_TIM2_Init+0xe8>)
 800085c:	f004 fa7e 	bl	8004d5c <HAL_TIM_PWM_ConfigChannel>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000866:	f000 f907 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800086a:	4803      	ldr	r0, [pc, #12]	; (8000878 <MX_TIM2_Init+0xe8>)
 800086c:	f000 fa52 	bl	8000d14 <HAL_TIM_MspPostInit>

}
 8000870:	bf00      	nop
 8000872:	3738      	adds	r7, #56	; 0x38
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000168 	.word	0x20000168

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	; 0x30
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
 8000896:	4b71      	ldr	r3, [pc, #452]	; (8000a5c <MX_GPIO_Init+0x1e0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a70      	ldr	r2, [pc, #448]	; (8000a5c <MX_GPIO_Init+0x1e0>)
 800089c:	f043 0310 	orr.w	r3, r3, #16
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b6e      	ldr	r3, [pc, #440]	; (8000a5c <MX_GPIO_Init+0x1e0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0310 	and.w	r3, r3, #16
 80008aa:	61bb      	str	r3, [r7, #24]
 80008ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	4b6a      	ldr	r3, [pc, #424]	; (8000a5c <MX_GPIO_Init+0x1e0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a69      	ldr	r2, [pc, #420]	; (8000a5c <MX_GPIO_Init+0x1e0>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b67      	ldr	r3, [pc, #412]	; (8000a5c <MX_GPIO_Init+0x1e0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b63      	ldr	r3, [pc, #396]	; (8000a5c <MX_GPIO_Init+0x1e0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a62      	ldr	r2, [pc, #392]	; (8000a5c <MX_GPIO_Init+0x1e0>)
 80008d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b60      	ldr	r3, [pc, #384]	; (8000a5c <MX_GPIO_Init+0x1e0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b5c      	ldr	r3, [pc, #368]	; (8000a5c <MX_GPIO_Init+0x1e0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a5b      	ldr	r2, [pc, #364]	; (8000a5c <MX_GPIO_Init+0x1e0>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b59      	ldr	r3, [pc, #356]	; (8000a5c <MX_GPIO_Init+0x1e0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	4b55      	ldr	r3, [pc, #340]	; (8000a5c <MX_GPIO_Init+0x1e0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a54      	ldr	r2, [pc, #336]	; (8000a5c <MX_GPIO_Init+0x1e0>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b52      	ldr	r3, [pc, #328]	; (8000a5c <MX_GPIO_Init+0x1e0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b4e      	ldr	r3, [pc, #312]	; (8000a5c <MX_GPIO_Init+0x1e0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a4d      	ldr	r2, [pc, #308]	; (8000a5c <MX_GPIO_Init+0x1e0>)
 8000928:	f043 0308 	orr.w	r3, r3, #8
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b4b      	ldr	r3, [pc, #300]	; (8000a5c <MX_GPIO_Init+0x1e0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0308 	and.w	r3, r3, #8
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2108      	movs	r1, #8
 800093e:	4848      	ldr	r0, [pc, #288]	; (8000a60 <MX_GPIO_Init+0x1e4>)
 8000940:	f000 fe24 	bl	800158c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	2101      	movs	r1, #1
 8000948:	4846      	ldr	r0, [pc, #280]	; (8000a64 <MX_GPIO_Init+0x1e8>)
 800094a:	f000 fe1f 	bl	800158c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800094e:	2200      	movs	r2, #0
 8000950:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000954:	4844      	ldr	r0, [pc, #272]	; (8000a68 <MX_GPIO_Init+0x1ec>)
 8000956:	f000 fe19 	bl	800158c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800095a:	2308      	movs	r3, #8
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	483b      	ldr	r0, [pc, #236]	; (8000a60 <MX_GPIO_Init+0x1e4>)
 8000972:	f000 fc6f 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000976:	2301      	movs	r3, #1
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4835      	ldr	r0, [pc, #212]	; (8000a64 <MX_GPIO_Init+0x1e8>)
 800098e:	f000 fc61 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000992:	2308      	movs	r3, #8
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009a2:	2305      	movs	r3, #5
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	482d      	ldr	r0, [pc, #180]	; (8000a64 <MX_GPIO_Init+0x1e8>)
 80009ae:	f000 fc51 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b6:	4b2d      	ldr	r3, [pc, #180]	; (8000a6c <MX_GPIO_Init+0x1f0>)
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	482a      	ldr	r0, [pc, #168]	; (8000a70 <MX_GPIO_Init+0x1f4>)
 80009c6:	f000 fc45 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009ca:	2304      	movs	r3, #4
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4825      	ldr	r0, [pc, #148]	; (8000a74 <MX_GPIO_Init+0x1f8>)
 80009de:	f000 fc39 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009f4:	2305      	movs	r3, #5
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	481d      	ldr	r0, [pc, #116]	; (8000a74 <MX_GPIO_Init+0x1f8>)
 8000a00:	f000 fc28 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a04:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a08:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4812      	ldr	r0, [pc, #72]	; (8000a68 <MX_GPIO_Init+0x1ec>)
 8000a1e:	f000 fc19 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a22:	2320      	movs	r3, #32
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	480c      	ldr	r0, [pc, #48]	; (8000a68 <MX_GPIO_Init+0x1ec>)
 8000a36:	f000 fc0d 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_GPIO_Init+0x1f0>)
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4804      	ldr	r0, [pc, #16]	; (8000a60 <MX_GPIO_Init+0x1e4>)
 8000a4e:	f000 fc01 	bl	8001254 <HAL_GPIO_Init>

}
 8000a52:	bf00      	nop
 8000a54:	3730      	adds	r7, #48	; 0x30
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40020800 	.word	0x40020800
 8000a68:	40020c00 	.word	0x40020c00
 8000a6c:	10120000 	.word	0x10120000
 8000a70:	40020000 	.word	0x40020000
 8000a74:	40020400 	.word	0x40020400

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <Error_Handler+0x8>
	...

08000a84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <HAL_MspInit+0x5c>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <HAL_MspInit+0x5c>)
 8000a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a98:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_MspInit+0x5c>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	603b      	str	r3, [r7, #0]
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <HAL_MspInit+0x5c>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	4a0c      	ldr	r2, [pc, #48]	; (8000ae0 <HAL_MspInit+0x5c>)
 8000ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <HAL_MspInit+0x5c>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ac2:	2007      	movs	r0, #7
 8000ac4:	f000 fb84 	bl	80011d0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2100      	movs	r1, #0
 8000acc:	2005      	movs	r0, #5
 8000ace:	f000 fb8a 	bl	80011e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000ad2:	2005      	movs	r0, #5
 8000ad4:	f000 fba3 	bl	800121e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40023800 	.word	0x40023800

08000ae4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a19      	ldr	r2, [pc, #100]	; (8000b68 <HAL_I2C_MspInit+0x84>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d12c      	bne.n	8000b60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <HAL_I2C_MspInit+0x88>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a17      	ldr	r2, [pc, #92]	; (8000b6c <HAL_I2C_MspInit+0x88>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <HAL_I2C_MspInit+0x88>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b22:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b28:	2312      	movs	r3, #18
 8000b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b34:	2304      	movs	r3, #4
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480c      	ldr	r0, [pc, #48]	; (8000b70 <HAL_I2C_MspInit+0x8c>)
 8000b40:	f000 fb88 	bl	8001254 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <HAL_I2C_MspInit+0x88>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <HAL_I2C_MspInit+0x88>)
 8000b4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b52:	6413      	str	r3, [r2, #64]	; 0x40
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_I2C_MspInit+0x88>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b60:	bf00      	nop
 8000b62:	3728      	adds	r7, #40	; 0x28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40005400 	.word	0x40005400
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020400 	.word	0x40020400

08000b74 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a28      	ldr	r2, [pc, #160]	; (8000c34 <HAL_I2S_MspInit+0xc0>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d14a      	bne.n	8000c2c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b27      	ldr	r3, [pc, #156]	; (8000c38 <HAL_I2S_MspInit+0xc4>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	4a26      	ldr	r2, [pc, #152]	; (8000c38 <HAL_I2S_MspInit+0xc4>)
 8000ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba6:	4b24      	ldr	r3, [pc, #144]	; (8000c38 <HAL_I2S_MspInit+0xc4>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <HAL_I2S_MspInit+0xc4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a1f      	ldr	r2, [pc, #124]	; (8000c38 <HAL_I2S_MspInit+0xc4>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <HAL_I2S_MspInit+0xc4>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <HAL_I2S_MspInit+0xc4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a18      	ldr	r2, [pc, #96]	; (8000c38 <HAL_I2S_MspInit+0xc4>)
 8000bd8:	f043 0304 	orr.w	r3, r3, #4
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <HAL_I2S_MspInit+0xc4>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bea:	2310      	movs	r3, #16
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bfa:	2306      	movs	r3, #6
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	480d      	ldr	r0, [pc, #52]	; (8000c3c <HAL_I2S_MspInit+0xc8>)
 8000c06:	f000 fb25 	bl	8001254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c0a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c1c:	2306      	movs	r3, #6
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4619      	mov	r1, r3
 8000c26:	4806      	ldr	r0, [pc, #24]	; (8000c40 <HAL_I2S_MspInit+0xcc>)
 8000c28:	f000 fb14 	bl	8001254 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c2c:	bf00      	nop
 8000c2e:	3728      	adds	r7, #40	; 0x28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40003c00 	.word	0x40003c00
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020000 	.word	0x40020000
 8000c40:	40020800 	.word	0x40020800

08000c44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a19      	ldr	r2, [pc, #100]	; (8000cc8 <HAL_SPI_MspInit+0x84>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d12b      	bne.n	8000cbe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <HAL_SPI_MspInit+0x88>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	4a17      	ldr	r2, [pc, #92]	; (8000ccc <HAL_SPI_MspInit+0x88>)
 8000c70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c74:	6453      	str	r3, [r2, #68]	; 0x44
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <HAL_SPI_MspInit+0x88>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <HAL_SPI_MspInit+0x88>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a10      	ldr	r2, [pc, #64]	; (8000ccc <HAL_SPI_MspInit+0x88>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_SPI_MspInit+0x88>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c9e:	23e0      	movs	r3, #224	; 0xe0
 8000ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cae:	2305      	movs	r3, #5
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <HAL_SPI_MspInit+0x8c>)
 8000cba:	f000 facb 	bl	8001254 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cbe:	bf00      	nop
 8000cc0:	3728      	adds	r7, #40	; 0x28
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40013000 	.word	0x40013000
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020000 	.word	0x40020000

08000cd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ce4:	d10d      	bne.n	8000d02 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <HAL_TIM_Base_MspInit+0x3c>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	4a08      	ldr	r2, [pc, #32]	; (8000d10 <HAL_TIM_Base_MspInit+0x3c>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_TIM_Base_MspInit+0x3c>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d02:	bf00      	nop
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800

08000d14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d34:	d11e      	bne.n	8000d74 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <HAL_TIM_MspPostInit+0x68>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a0f      	ldr	r2, [pc, #60]	; (8000d7c <HAL_TIM_MspPostInit+0x68>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <HAL_TIM_MspPostInit+0x68>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d64:	2301      	movs	r3, #1
 8000d66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4804      	ldr	r0, [pc, #16]	; (8000d80 <HAL_TIM_MspPostInit+0x6c>)
 8000d70:	f000 fa70 	bl	8001254 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d74:	bf00      	nop
 8000d76:	3720      	adds	r7, #32
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020000 	.word	0x40020000

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <NMI_Handler+0x4>

08000d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <MemManage_Handler+0x4>

08000d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd0:	f000 f8ea 	bl	8000fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000dec:	2201      	movs	r2, #1
 8000dee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000df2:	4804      	ldr	r0, [pc, #16]	; (8000e04 <TIM2_IRQHandler+0x1c>)
 8000df4:	f000 fbca 	bl	800158c <HAL_GPIO_WritePin>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000df8:	4803      	ldr	r0, [pc, #12]	; (8000e08 <TIM2_IRQHandler+0x20>)
 8000dfa:	f003 fea7 	bl	8004b4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40020c00 	.word	0x40020c00
 8000e08:	20000168 	.word	0x20000168

08000e0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <OTG_FS_IRQHandler+0x10>)
 8000e12:	f000 fe3f 	bl	8001a94 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200005d4 	.word	0x200005d4

08000e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e28:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <_sbrk+0x5c>)
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <_sbrk+0x60>)
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d102      	bne.n	8000e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <_sbrk+0x64>)
 8000e3e:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <_sbrk+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d207      	bcs.n	8000e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e50:	f006 ff28 	bl	8007ca4 <__errno>
 8000e54:	4603      	mov	r3, r0
 8000e56:	220c      	movs	r2, #12
 8000e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e5e:	e009      	b.n	8000e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <_sbrk+0x64>)
 8000e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20020000 	.word	0x20020000
 8000e80:	00000400 	.word	0x00000400
 8000e84:	200000ac 	.word	0x200000ac
 8000e88:	200008e8 	.word	0x200008e8

08000e8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <SystemInit+0x20>)
 8000e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <SystemInit+0x20>)
 8000e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eb6:	490e      	ldr	r1, [pc, #56]	; (8000ef0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ebc:	e002      	b.n	8000ec4 <LoopCopyDataInit>

08000ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec2:	3304      	adds	r3, #4

08000ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec8:	d3f9      	bcc.n	8000ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eca:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ecc:	4c0b      	ldr	r4, [pc, #44]	; (8000efc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed0:	e001      	b.n	8000ed6 <LoopFillZerobss>

08000ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed4:	3204      	adds	r2, #4

08000ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed8:	d3fb      	bcc.n	8000ed2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000eda:	f7ff ffd7 	bl	8000e8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ede:	f006 fee7 	bl	8007cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee2:	f7ff faed 	bl	80004c0 <main>
  bx  lr    
 8000ee6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ee8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000ef4:	08007efc 	.word	0x08007efc
  ldr r2, =_sbss
 8000ef8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000efc:	200008e8 	.word	0x200008e8

08000f00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f00:	e7fe      	b.n	8000f00 <ADC_IRQHandler>
	...

08000f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <HAL_Init+0x40>)
 8000f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <HAL_Init+0x40>)
 8000f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <HAL_Init+0x40>)
 8000f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 f94f 	bl	80011d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f000 f808 	bl	8000f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f38:	f7ff fda4 	bl	8000a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40023c00 	.word	0x40023c00

08000f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_InitTick+0x54>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_InitTick+0x58>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f967 	bl	800123a <HAL_SYSTICK_Config>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00e      	b.n	8000f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b0f      	cmp	r3, #15
 8000f7a:	d80a      	bhi.n	8000f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f84:	f000 f92f 	bl	80011e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f88:	4a06      	ldr	r2, [pc, #24]	; (8000fa4 <HAL_InitTick+0x5c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e000      	b.n	8000f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20000004 	.word	0x20000004

08000fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_IncTick+0x20>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_IncTick+0x24>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <HAL_IncTick+0x24>)
 8000fba:	6013      	str	r3, [r2, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	200001f8 	.word	0x200001f8

08000fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <HAL_GetTick+0x14>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	200001f8 	.word	0x200001f8

08000fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff0:	f7ff ffee 	bl	8000fd0 <HAL_GetTick>
 8000ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001000:	d005      	beq.n	800100e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_Delay+0x44>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4413      	add	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800100e:	bf00      	nop
 8001010:	f7ff ffde 	bl	8000fd0 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	429a      	cmp	r2, r3
 800101e:	d8f7      	bhi.n	8001010 <HAL_Delay+0x28>
  {
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000008 	.word	0x20000008

08001030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800104c:	4013      	ands	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800105c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001062:	4a04      	ldr	r2, [pc, #16]	; (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	60d3      	str	r3, [r2, #12]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <__NVIC_GetPriorityGrouping+0x18>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	f003 0307 	and.w	r3, r3, #7
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	db0b      	blt.n	80010be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	f003 021f 	and.w	r2, r3, #31
 80010ac:	4907      	ldr	r1, [pc, #28]	; (80010cc <__NVIC_EnableIRQ+0x38>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	095b      	lsrs	r3, r3, #5
 80010b4:	2001      	movs	r0, #1
 80010b6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000e100 	.word	0xe000e100

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	; (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	; (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	2b04      	cmp	r3, #4
 8001140:	bf28      	it	cs
 8001142:	2304      	movcs	r3, #4
 8001144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3304      	adds	r3, #4
 800114a:	2b06      	cmp	r3, #6
 800114c:	d902      	bls.n	8001154 <NVIC_EncodePriority+0x30>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3b03      	subs	r3, #3
 8001152:	e000      	b.n	8001156 <NVIC_EncodePriority+0x32>
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800116c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	43d9      	mvns	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	4313      	orrs	r3, r2
         );
}
 800117e:	4618      	mov	r0, r3
 8001180:	3724      	adds	r7, #36	; 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800119c:	d301      	bcc.n	80011a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119e:	2301      	movs	r3, #1
 80011a0:	e00f      	b.n	80011c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <SysTick_Config+0x40>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011aa:	210f      	movs	r1, #15
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011b0:	f7ff ff8e 	bl	80010d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <SysTick_Config+0x40>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ba:	4b04      	ldr	r3, [pc, #16]	; (80011cc <SysTick_Config+0x40>)
 80011bc:	2207      	movs	r2, #7
 80011be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	e000e010 	.word	0xe000e010

080011d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff29 	bl	8001030 <__NVIC_SetPriorityGrouping>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f8:	f7ff ff3e 	bl	8001078 <__NVIC_GetPriorityGrouping>
 80011fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	6978      	ldr	r0, [r7, #20]
 8001204:	f7ff ff8e 	bl	8001124 <NVIC_EncodePriority>
 8001208:	4602      	mov	r2, r0
 800120a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff5d 	bl	80010d0 <__NVIC_SetPriority>
}
 8001216:	bf00      	nop
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff31 	bl	8001094 <__NVIC_EnableIRQ>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ffa2 	bl	800118c <SysTick_Config>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	; 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
 800126e:	e16b      	b.n	8001548 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001270:	2201      	movs	r2, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	429a      	cmp	r2, r3
 800128a:	f040 815a 	bne.w	8001542 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	2b01      	cmp	r3, #1
 8001298:	d005      	beq.n	80012a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d130      	bne.n	8001308 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	2203      	movs	r2, #3
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012dc:	2201      	movs	r2, #1
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	091b      	lsrs	r3, r3, #4
 80012f2:	f003 0201 	and.w	r2, r3, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	2b03      	cmp	r3, #3
 8001312:	d017      	beq.n	8001344 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d123      	bne.n	8001398 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	08da      	lsrs	r2, r3, #3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3208      	adds	r2, #8
 8001358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	220f      	movs	r2, #15
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	691a      	ldr	r2, [r3, #16]
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	08da      	lsrs	r2, r3, #3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3208      	adds	r2, #8
 8001392:	69b9      	ldr	r1, [r7, #24]
 8001394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2203      	movs	r2, #3
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0203 	and.w	r2, r3, #3
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 80b4 	beq.w	8001542 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b60      	ldr	r3, [pc, #384]	; (8001560 <HAL_GPIO_Init+0x30c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	4a5f      	ldr	r2, [pc, #380]	; (8001560 <HAL_GPIO_Init+0x30c>)
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	4b5d      	ldr	r3, [pc, #372]	; (8001560 <HAL_GPIO_Init+0x30c>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013f6:	4a5b      	ldr	r2, [pc, #364]	; (8001564 <HAL_GPIO_Init+0x310>)
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	3302      	adds	r3, #2
 80013fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	220f      	movs	r2, #15
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a52      	ldr	r2, [pc, #328]	; (8001568 <HAL_GPIO_Init+0x314>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d02b      	beq.n	800147a <HAL_GPIO_Init+0x226>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a51      	ldr	r2, [pc, #324]	; (800156c <HAL_GPIO_Init+0x318>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d025      	beq.n	8001476 <HAL_GPIO_Init+0x222>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a50      	ldr	r2, [pc, #320]	; (8001570 <HAL_GPIO_Init+0x31c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d01f      	beq.n	8001472 <HAL_GPIO_Init+0x21e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4f      	ldr	r2, [pc, #316]	; (8001574 <HAL_GPIO_Init+0x320>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d019      	beq.n	800146e <HAL_GPIO_Init+0x21a>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4e      	ldr	r2, [pc, #312]	; (8001578 <HAL_GPIO_Init+0x324>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d013      	beq.n	800146a <HAL_GPIO_Init+0x216>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4d      	ldr	r2, [pc, #308]	; (800157c <HAL_GPIO_Init+0x328>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d00d      	beq.n	8001466 <HAL_GPIO_Init+0x212>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a4c      	ldr	r2, [pc, #304]	; (8001580 <HAL_GPIO_Init+0x32c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d007      	beq.n	8001462 <HAL_GPIO_Init+0x20e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a4b      	ldr	r2, [pc, #300]	; (8001584 <HAL_GPIO_Init+0x330>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d101      	bne.n	800145e <HAL_GPIO_Init+0x20a>
 800145a:	2307      	movs	r3, #7
 800145c:	e00e      	b.n	800147c <HAL_GPIO_Init+0x228>
 800145e:	2308      	movs	r3, #8
 8001460:	e00c      	b.n	800147c <HAL_GPIO_Init+0x228>
 8001462:	2306      	movs	r3, #6
 8001464:	e00a      	b.n	800147c <HAL_GPIO_Init+0x228>
 8001466:	2305      	movs	r3, #5
 8001468:	e008      	b.n	800147c <HAL_GPIO_Init+0x228>
 800146a:	2304      	movs	r3, #4
 800146c:	e006      	b.n	800147c <HAL_GPIO_Init+0x228>
 800146e:	2303      	movs	r3, #3
 8001470:	e004      	b.n	800147c <HAL_GPIO_Init+0x228>
 8001472:	2302      	movs	r3, #2
 8001474:	e002      	b.n	800147c <HAL_GPIO_Init+0x228>
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <HAL_GPIO_Init+0x228>
 800147a:	2300      	movs	r3, #0
 800147c:	69fa      	ldr	r2, [r7, #28]
 800147e:	f002 0203 	and.w	r2, r2, #3
 8001482:	0092      	lsls	r2, r2, #2
 8001484:	4093      	lsls	r3, r2
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800148c:	4935      	ldr	r1, [pc, #212]	; (8001564 <HAL_GPIO_Init+0x310>)
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	089b      	lsrs	r3, r3, #2
 8001492:	3302      	adds	r3, #2
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800149a:	4b3b      	ldr	r3, [pc, #236]	; (8001588 <HAL_GPIO_Init+0x334>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014be:	4a32      	ldr	r2, [pc, #200]	; (8001588 <HAL_GPIO_Init+0x334>)
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014c4:	4b30      	ldr	r3, [pc, #192]	; (8001588 <HAL_GPIO_Init+0x334>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014e8:	4a27      	ldr	r2, [pc, #156]	; (8001588 <HAL_GPIO_Init+0x334>)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ee:	4b26      	ldr	r3, [pc, #152]	; (8001588 <HAL_GPIO_Init+0x334>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001512:	4a1d      	ldr	r2, [pc, #116]	; (8001588 <HAL_GPIO_Init+0x334>)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <HAL_GPIO_Init+0x334>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800153c:	4a12      	ldr	r2, [pc, #72]	; (8001588 <HAL_GPIO_Init+0x334>)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3301      	adds	r3, #1
 8001546:	61fb      	str	r3, [r7, #28]
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	2b0f      	cmp	r3, #15
 800154c:	f67f ae90 	bls.w	8001270 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001550:	bf00      	nop
 8001552:	bf00      	nop
 8001554:	3724      	adds	r7, #36	; 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40023800 	.word	0x40023800
 8001564:	40013800 	.word	0x40013800
 8001568:	40020000 	.word	0x40020000
 800156c:	40020400 	.word	0x40020400
 8001570:	40020800 	.word	0x40020800
 8001574:	40020c00 	.word	0x40020c00
 8001578:	40021000 	.word	0x40021000
 800157c:	40021400 	.word	0x40021400
 8001580:	40021800 	.word	0x40021800
 8001584:	40021c00 	.word	0x40021c00
 8001588:	40013c00 	.word	0x40013c00

0800158c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	807b      	strh	r3, [r7, #2]
 8001598:	4613      	mov	r3, r2
 800159a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800159c:	787b      	ldrb	r3, [r7, #1]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a2:	887a      	ldrh	r2, [r7, #2]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015a8:	e003      	b.n	80015b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015aa:	887b      	ldrh	r3, [r7, #2]
 80015ac:	041a      	lsls	r2, r3, #16
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	619a      	str	r2, [r3, #24]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c0:	b08f      	sub	sp, #60	; 0x3c
 80015c2:	af0a      	add	r7, sp, #40	; 0x28
 80015c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e054      	b.n	800167a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d106      	bne.n	80015f0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f006 f8fe 	bl	80077ec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2203      	movs	r2, #3
 80015f4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001600:	2b00      	cmp	r3, #0
 8001602:	d102      	bne.n	800160a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f004 f96a 	bl	80058e8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	687e      	ldr	r6, [r7, #4]
 800161c:	466d      	mov	r5, sp
 800161e:	f106 0410 	add.w	r4, r6, #16
 8001622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800162a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800162e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001632:	1d33      	adds	r3, r6, #4
 8001634:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001636:	6838      	ldr	r0, [r7, #0]
 8001638:	f004 f8e4 	bl	8005804 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2101      	movs	r1, #1
 8001642:	4618      	mov	r0, r3
 8001644:	f004 f961 	bl	800590a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	687e      	ldr	r6, [r7, #4]
 8001650:	466d      	mov	r5, sp
 8001652:	f106 0410 	add.w	r4, r6, #16
 8001656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001658:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800165a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800165c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800165e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001662:	e885 0003 	stmia.w	r5, {r0, r1}
 8001666:	1d33      	adds	r3, r6, #4
 8001668:	cb0e      	ldmia	r3, {r1, r2, r3}
 800166a:	6838      	ldr	r0, [r7, #0]
 800166c:	f004 fa74 	bl	8005b58 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001682 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001682:	b590      	push	{r4, r7, lr}
 8001684:	b089      	sub	sp, #36	; 0x24
 8001686:	af04      	add	r7, sp, #16
 8001688:	6078      	str	r0, [r7, #4]
 800168a:	4608      	mov	r0, r1
 800168c:	4611      	mov	r1, r2
 800168e:	461a      	mov	r2, r3
 8001690:	4603      	mov	r3, r0
 8001692:	70fb      	strb	r3, [r7, #3]
 8001694:	460b      	mov	r3, r1
 8001696:	70bb      	strb	r3, [r7, #2]
 8001698:	4613      	mov	r3, r2
 800169a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d101      	bne.n	80016aa <HAL_HCD_HC_Init+0x28>
 80016a6:	2302      	movs	r3, #2
 80016a8:	e076      	b.n	8001798 <HAL_HCD_HC_Init+0x116>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	212c      	movs	r1, #44	; 0x2c
 80016b8:	fb01 f303 	mul.w	r3, r1, r3
 80016bc:	4413      	add	r3, r2
 80016be:	333d      	adds	r3, #61	; 0x3d
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80016c4:	78fb      	ldrb	r3, [r7, #3]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	212c      	movs	r1, #44	; 0x2c
 80016ca:	fb01 f303 	mul.w	r3, r1, r3
 80016ce:	4413      	add	r3, r2
 80016d0:	3338      	adds	r3, #56	; 0x38
 80016d2:	787a      	ldrb	r2, [r7, #1]
 80016d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80016d6:	78fb      	ldrb	r3, [r7, #3]
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	212c      	movs	r1, #44	; 0x2c
 80016dc:	fb01 f303 	mul.w	r3, r1, r3
 80016e0:	4413      	add	r3, r2
 80016e2:	3340      	adds	r3, #64	; 0x40
 80016e4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80016e6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80016e8:	78fb      	ldrb	r3, [r7, #3]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	212c      	movs	r1, #44	; 0x2c
 80016ee:	fb01 f303 	mul.w	r3, r1, r3
 80016f2:	4413      	add	r3, r2
 80016f4:	3339      	adds	r3, #57	; 0x39
 80016f6:	78fa      	ldrb	r2, [r7, #3]
 80016f8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	212c      	movs	r1, #44	; 0x2c
 8001700:	fb01 f303 	mul.w	r3, r1, r3
 8001704:	4413      	add	r3, r2
 8001706:	333f      	adds	r3, #63	; 0x3f
 8001708:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800170c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	78ba      	ldrb	r2, [r7, #2]
 8001712:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001716:	b2d0      	uxtb	r0, r2
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	212c      	movs	r1, #44	; 0x2c
 800171c:	fb01 f303 	mul.w	r3, r1, r3
 8001720:	4413      	add	r3, r2
 8001722:	333a      	adds	r3, #58	; 0x3a
 8001724:	4602      	mov	r2, r0
 8001726:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001728:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800172c:	2b00      	cmp	r3, #0
 800172e:	da09      	bge.n	8001744 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	212c      	movs	r1, #44	; 0x2c
 8001736:	fb01 f303 	mul.w	r3, r1, r3
 800173a:	4413      	add	r3, r2
 800173c:	333b      	adds	r3, #59	; 0x3b
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
 8001742:	e008      	b.n	8001756 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001744:	78fb      	ldrb	r3, [r7, #3]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	212c      	movs	r1, #44	; 0x2c
 800174a:	fb01 f303 	mul.w	r3, r1, r3
 800174e:	4413      	add	r3, r2
 8001750:	333b      	adds	r3, #59	; 0x3b
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	212c      	movs	r1, #44	; 0x2c
 800175c:	fb01 f303 	mul.w	r3, r1, r3
 8001760:	4413      	add	r3, r2
 8001762:	333c      	adds	r3, #60	; 0x3c
 8001764:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001768:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6818      	ldr	r0, [r3, #0]
 800176e:	787c      	ldrb	r4, [r7, #1]
 8001770:	78ba      	ldrb	r2, [r7, #2]
 8001772:	78f9      	ldrb	r1, [r7, #3]
 8001774:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001776:	9302      	str	r3, [sp, #8]
 8001778:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800177c:	9301      	str	r3, [sp, #4]
 800177e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	4623      	mov	r3, r4
 8001786:	f004 fb3f 	bl	8005e08 <USB_HC_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	bd90      	pop	{r4, r7, pc}

080017a0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80017ac:	2300      	movs	r3, #0
 80017ae:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d101      	bne.n	80017be <HAL_HCD_HC_Halt+0x1e>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e00f      	b.n	80017de <HAL_HCD_HC_Halt+0x3e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	78fa      	ldrb	r2, [r7, #3]
 80017cc:	4611      	mov	r1, r2
 80017ce:	4618      	mov	r0, r3
 80017d0:	f004 fd7b 	bl	80062ca <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	4608      	mov	r0, r1
 80017f2:	4611      	mov	r1, r2
 80017f4:	461a      	mov	r2, r3
 80017f6:	4603      	mov	r3, r0
 80017f8:	70fb      	strb	r3, [r7, #3]
 80017fa:	460b      	mov	r3, r1
 80017fc:	70bb      	strb	r3, [r7, #2]
 80017fe:	4613      	mov	r3, r2
 8001800:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001802:	78fb      	ldrb	r3, [r7, #3]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	212c      	movs	r1, #44	; 0x2c
 8001808:	fb01 f303 	mul.w	r3, r1, r3
 800180c:	4413      	add	r3, r2
 800180e:	333b      	adds	r3, #59	; 0x3b
 8001810:	78ba      	ldrb	r2, [r7, #2]
 8001812:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001814:	78fb      	ldrb	r3, [r7, #3]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	212c      	movs	r1, #44	; 0x2c
 800181a:	fb01 f303 	mul.w	r3, r1, r3
 800181e:	4413      	add	r3, r2
 8001820:	333f      	adds	r3, #63	; 0x3f
 8001822:	787a      	ldrb	r2, [r7, #1]
 8001824:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001826:	7c3b      	ldrb	r3, [r7, #16]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d112      	bne.n	8001852 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	212c      	movs	r1, #44	; 0x2c
 8001832:	fb01 f303 	mul.w	r3, r1, r3
 8001836:	4413      	add	r3, r2
 8001838:	3342      	adds	r3, #66	; 0x42
 800183a:	2203      	movs	r2, #3
 800183c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800183e:	78fb      	ldrb	r3, [r7, #3]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	212c      	movs	r1, #44	; 0x2c
 8001844:	fb01 f303 	mul.w	r3, r1, r3
 8001848:	4413      	add	r3, r2
 800184a:	333d      	adds	r3, #61	; 0x3d
 800184c:	7f3a      	ldrb	r2, [r7, #28]
 800184e:	701a      	strb	r2, [r3, #0]
 8001850:	e008      	b.n	8001864 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001852:	78fb      	ldrb	r3, [r7, #3]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	212c      	movs	r1, #44	; 0x2c
 8001858:	fb01 f303 	mul.w	r3, r1, r3
 800185c:	4413      	add	r3, r2
 800185e:	3342      	adds	r3, #66	; 0x42
 8001860:	2202      	movs	r2, #2
 8001862:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001864:	787b      	ldrb	r3, [r7, #1]
 8001866:	2b03      	cmp	r3, #3
 8001868:	f200 80c6 	bhi.w	80019f8 <HAL_HCD_HC_SubmitRequest+0x210>
 800186c:	a201      	add	r2, pc, #4	; (adr r2, 8001874 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800186e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001872:	bf00      	nop
 8001874:	08001885 	.word	0x08001885
 8001878:	080019e5 	.word	0x080019e5
 800187c:	080018e9 	.word	0x080018e9
 8001880:	08001967 	.word	0x08001967
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001884:	7c3b      	ldrb	r3, [r7, #16]
 8001886:	2b01      	cmp	r3, #1
 8001888:	f040 80b8 	bne.w	80019fc <HAL_HCD_HC_SubmitRequest+0x214>
 800188c:	78bb      	ldrb	r3, [r7, #2]
 800188e:	2b00      	cmp	r3, #0
 8001890:	f040 80b4 	bne.w	80019fc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001894:	8b3b      	ldrh	r3, [r7, #24]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d108      	bne.n	80018ac <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	212c      	movs	r1, #44	; 0x2c
 80018a0:	fb01 f303 	mul.w	r3, r1, r3
 80018a4:	4413      	add	r3, r2
 80018a6:	3355      	adds	r3, #85	; 0x55
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	212c      	movs	r1, #44	; 0x2c
 80018b2:	fb01 f303 	mul.w	r3, r1, r3
 80018b6:	4413      	add	r3, r2
 80018b8:	3355      	adds	r3, #85	; 0x55
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d109      	bne.n	80018d4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	212c      	movs	r1, #44	; 0x2c
 80018c6:	fb01 f303 	mul.w	r3, r1, r3
 80018ca:	4413      	add	r3, r2
 80018cc:	3342      	adds	r3, #66	; 0x42
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018d2:	e093      	b.n	80019fc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	212c      	movs	r1, #44	; 0x2c
 80018da:	fb01 f303 	mul.w	r3, r1, r3
 80018de:	4413      	add	r3, r2
 80018e0:	3342      	adds	r3, #66	; 0x42
 80018e2:	2202      	movs	r2, #2
 80018e4:	701a      	strb	r2, [r3, #0]
      break;
 80018e6:	e089      	b.n	80019fc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018e8:	78bb      	ldrb	r3, [r7, #2]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d11d      	bne.n	800192a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018ee:	78fb      	ldrb	r3, [r7, #3]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	212c      	movs	r1, #44	; 0x2c
 80018f4:	fb01 f303 	mul.w	r3, r1, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	3355      	adds	r3, #85	; 0x55
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d109      	bne.n	8001916 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001902:	78fb      	ldrb	r3, [r7, #3]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	212c      	movs	r1, #44	; 0x2c
 8001908:	fb01 f303 	mul.w	r3, r1, r3
 800190c:	4413      	add	r3, r2
 800190e:	3342      	adds	r3, #66	; 0x42
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001914:	e073      	b.n	80019fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001916:	78fb      	ldrb	r3, [r7, #3]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	212c      	movs	r1, #44	; 0x2c
 800191c:	fb01 f303 	mul.w	r3, r1, r3
 8001920:	4413      	add	r3, r2
 8001922:	3342      	adds	r3, #66	; 0x42
 8001924:	2202      	movs	r2, #2
 8001926:	701a      	strb	r2, [r3, #0]
      break;
 8001928:	e069      	b.n	80019fe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	212c      	movs	r1, #44	; 0x2c
 8001930:	fb01 f303 	mul.w	r3, r1, r3
 8001934:	4413      	add	r3, r2
 8001936:	3354      	adds	r3, #84	; 0x54
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d109      	bne.n	8001952 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	212c      	movs	r1, #44	; 0x2c
 8001944:	fb01 f303 	mul.w	r3, r1, r3
 8001948:	4413      	add	r3, r2
 800194a:	3342      	adds	r3, #66	; 0x42
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
      break;
 8001950:	e055      	b.n	80019fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	212c      	movs	r1, #44	; 0x2c
 8001958:	fb01 f303 	mul.w	r3, r1, r3
 800195c:	4413      	add	r3, r2
 800195e:	3342      	adds	r3, #66	; 0x42
 8001960:	2202      	movs	r2, #2
 8001962:	701a      	strb	r2, [r3, #0]
      break;
 8001964:	e04b      	b.n	80019fe <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001966:	78bb      	ldrb	r3, [r7, #2]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d11d      	bne.n	80019a8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800196c:	78fb      	ldrb	r3, [r7, #3]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	212c      	movs	r1, #44	; 0x2c
 8001972:	fb01 f303 	mul.w	r3, r1, r3
 8001976:	4413      	add	r3, r2
 8001978:	3355      	adds	r3, #85	; 0x55
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d109      	bne.n	8001994 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	212c      	movs	r1, #44	; 0x2c
 8001986:	fb01 f303 	mul.w	r3, r1, r3
 800198a:	4413      	add	r3, r2
 800198c:	3342      	adds	r3, #66	; 0x42
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001992:	e034      	b.n	80019fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	212c      	movs	r1, #44	; 0x2c
 800199a:	fb01 f303 	mul.w	r3, r1, r3
 800199e:	4413      	add	r3, r2
 80019a0:	3342      	adds	r3, #66	; 0x42
 80019a2:	2202      	movs	r2, #2
 80019a4:	701a      	strb	r2, [r3, #0]
      break;
 80019a6:	e02a      	b.n	80019fe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	212c      	movs	r1, #44	; 0x2c
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	3354      	adds	r3, #84	; 0x54
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d109      	bne.n	80019d0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	212c      	movs	r1, #44	; 0x2c
 80019c2:	fb01 f303 	mul.w	r3, r1, r3
 80019c6:	4413      	add	r3, r2
 80019c8:	3342      	adds	r3, #66	; 0x42
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
      break;
 80019ce:	e016      	b.n	80019fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019d0:	78fb      	ldrb	r3, [r7, #3]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	212c      	movs	r1, #44	; 0x2c
 80019d6:	fb01 f303 	mul.w	r3, r1, r3
 80019da:	4413      	add	r3, r2
 80019dc:	3342      	adds	r3, #66	; 0x42
 80019de:	2202      	movs	r2, #2
 80019e0:	701a      	strb	r2, [r3, #0]
      break;
 80019e2:	e00c      	b.n	80019fe <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019e4:	78fb      	ldrb	r3, [r7, #3]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	212c      	movs	r1, #44	; 0x2c
 80019ea:	fb01 f303 	mul.w	r3, r1, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	3342      	adds	r3, #66	; 0x42
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
      break;
 80019f6:	e002      	b.n	80019fe <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80019f8:	bf00      	nop
 80019fa:	e000      	b.n	80019fe <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80019fc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019fe:	78fb      	ldrb	r3, [r7, #3]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	212c      	movs	r1, #44	; 0x2c
 8001a04:	fb01 f303 	mul.w	r3, r1, r3
 8001a08:	4413      	add	r3, r2
 8001a0a:	3344      	adds	r3, #68	; 0x44
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a10:	78fb      	ldrb	r3, [r7, #3]
 8001a12:	8b3a      	ldrh	r2, [r7, #24]
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	202c      	movs	r0, #44	; 0x2c
 8001a18:	fb00 f303 	mul.w	r3, r0, r3
 8001a1c:	440b      	add	r3, r1
 8001a1e:	334c      	adds	r3, #76	; 0x4c
 8001a20:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a22:	78fb      	ldrb	r3, [r7, #3]
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	212c      	movs	r1, #44	; 0x2c
 8001a28:	fb01 f303 	mul.w	r3, r1, r3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	3360      	adds	r3, #96	; 0x60
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a34:	78fb      	ldrb	r3, [r7, #3]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	212c      	movs	r1, #44	; 0x2c
 8001a3a:	fb01 f303 	mul.w	r3, r1, r3
 8001a3e:	4413      	add	r3, r2
 8001a40:	3350      	adds	r3, #80	; 0x50
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a46:	78fb      	ldrb	r3, [r7, #3]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	212c      	movs	r1, #44	; 0x2c
 8001a4c:	fb01 f303 	mul.w	r3, r1, r3
 8001a50:	4413      	add	r3, r2
 8001a52:	3339      	adds	r3, #57	; 0x39
 8001a54:	78fa      	ldrb	r2, [r7, #3]
 8001a56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	212c      	movs	r1, #44	; 0x2c
 8001a5e:	fb01 f303 	mul.w	r3, r1, r3
 8001a62:	4413      	add	r3, r2
 8001a64:	3361      	adds	r3, #97	; 0x61
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6818      	ldr	r0, [r3, #0]
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	222c      	movs	r2, #44	; 0x2c
 8001a72:	fb02 f303 	mul.w	r3, r2, r3
 8001a76:	3338      	adds	r3, #56	; 0x38
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	18d1      	adds	r1, r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	f004 face 	bl	8006024 <USB_HC_StartXfer>
 8001a88:	4603      	mov	r3, r0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop

08001a94 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f004 f811 	bl	8005ad2 <USB_GetMode>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	f040 80ef 	bne.w	8001c96 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f003 fff5 	bl	8005aac <USB_ReadInterrupts>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 80e5 	beq.w	8001c94 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 ffec 	bl	8005aac <USB_ReadInterrupts>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ada:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ade:	d104      	bne.n	8001aea <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ae8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f003 ffdc 	bl	8005aac <USB_ReadInterrupts>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001afa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001afe:	d104      	bne.n	8001b0a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f003 ffcc 	bl	8005aac <USB_ReadInterrupts>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b1e:	d104      	bne.n	8001b2a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f003 ffbc 	bl	8005aac <USB_ReadInterrupts>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d103      	bne.n	8001b46 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2202      	movs	r2, #2
 8001b44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f003 ffae 	bl	8005aac <USB_ReadInterrupts>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b5a:	d115      	bne.n	8001b88 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b64:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d108      	bne.n	8001b88 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f005 feb6 	bl	80078e8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2101      	movs	r1, #1
 8001b82:	4618      	mov	r0, r3
 8001b84:	f004 f8a4 	bl	8005cd0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f003 ff8d 	bl	8005aac <USB_ReadInterrupts>
 8001b92:	4603      	mov	r3, r0
 8001b94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b9c:	d102      	bne.n	8001ba4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f001 f9e3 	bl	8002f6a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f003 ff7f 	bl	8005aac <USB_ReadInterrupts>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d106      	bne.n	8001bc6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f005 fe79 	bl	80078b0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2208      	movs	r2, #8
 8001bc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f003 ff6e 	bl	8005aac <USB_ReadInterrupts>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f003 0310 	and.w	r3, r3, #16
 8001bd6:	2b10      	cmp	r3, #16
 8001bd8:	d101      	bne.n	8001bde <HAL_HCD_IRQHandler+0x14a>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <HAL_HCD_IRQHandler+0x14c>
 8001bde:	2300      	movs	r3, #0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d012      	beq.n	8001c0a <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	699a      	ldr	r2, [r3, #24]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0210 	bic.w	r2, r2, #16
 8001bf2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f001 f8e6 	bl	8002dc6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	699a      	ldr	r2, [r3, #24]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f042 0210 	orr.w	r2, r2, #16
 8001c08:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f003 ff4c 	bl	8005aac <USB_ReadInterrupts>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c1e:	d13a      	bne.n	8001c96 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f004 fb3f 	bl	80062a8 <USB_HC_ReadInterrupt>
 8001c2a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	e025      	b.n	8001c7e <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f003 030f 	and.w	r3, r3, #15
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d018      	beq.n	8001c78 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	015a      	lsls	r2, r3, #5
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c5c:	d106      	bne.n	8001c6c <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	4619      	mov	r1, r3
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f88f 	bl	8001d88 <HCD_HC_IN_IRQHandler>
 8001c6a:	e005      	b.n	8001c78 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	4619      	mov	r1, r3
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 fcaa 	bl	80025cc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d3d4      	bcc.n	8001c32 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c90:	615a      	str	r2, [r3, #20]
 8001c92:	e000      	b.n	8001c96 <HAL_HCD_IRQHandler+0x202>
      return;
 8001c94:	bf00      	nop
    }
  }
}
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_HCD_Start+0x16>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e013      	b.n	8001cda <HAL_HCD_Start+0x3e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f003 fe01 	bl	80058c6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2101      	movs	r1, #1
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f004 f83a 	bl	8005d44 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_HCD_Stop+0x16>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e00d      	b.n	8001d14 <HAL_HCD_Stop+0x32>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f004 fc39 	bl	800657c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d28:	78fb      	ldrb	r3, [r7, #3]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	212c      	movs	r1, #44	; 0x2c
 8001d2e:	fb01 f303 	mul.w	r3, r1, r3
 8001d32:	4413      	add	r3, r2
 8001d34:	3360      	adds	r3, #96	; 0x60
 8001d36:	781b      	ldrb	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	212c      	movs	r1, #44	; 0x2c
 8001d56:	fb01 f303 	mul.w	r3, r1, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3350      	adds	r3, #80	; 0x50
 8001d5e:	681b      	ldr	r3, [r3, #0]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f004 f833 	bl	8005de4 <USB_GetCurrentFrame>
 8001d7e:	4603      	mov	r3, r0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d119      	bne.n	8001dec <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	015a      	lsls	r2, r3, #5
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	015a      	lsls	r2, r3, #5
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	0151      	lsls	r1, r2, #5
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	440a      	add	r2, r1
 8001de0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001de4:	f043 0302 	orr.w	r3, r3, #2
 8001de8:	60d3      	str	r3, [r2, #12]
 8001dea:	e101      	b.n	8001ff0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	015a      	lsls	r2, r3, #5
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e02:	d12b      	bne.n	8001e5c <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	015a      	lsls	r2, r3, #5
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e10:	461a      	mov	r2, r3
 8001e12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e16:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	212c      	movs	r1, #44	; 0x2c
 8001e1e:	fb01 f303 	mul.w	r3, r1, r3
 8001e22:	4413      	add	r3, r2
 8001e24:	3361      	adds	r3, #97	; 0x61
 8001e26:	2207      	movs	r2, #7
 8001e28:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	015a      	lsls	r2, r3, #5
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4413      	add	r3, r2
 8001e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	0151      	lsls	r1, r2, #5
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	440a      	add	r2, r1
 8001e40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f004 fa38 	bl	80062ca <USB_HC_Halt>
 8001e5a:	e0c9      	b.n	8001ff0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 0320 	and.w	r3, r3, #32
 8001e6e:	2b20      	cmp	r3, #32
 8001e70:	d109      	bne.n	8001e86 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	015a      	lsls	r2, r3, #5
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4413      	add	r3, r2
 8001e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7e:	461a      	mov	r2, r3
 8001e80:	2320      	movs	r3, #32
 8001e82:	6093      	str	r3, [r2, #8]
 8001e84:	e0b4      	b.n	8001ff0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	015a      	lsls	r2, r3, #5
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d133      	bne.n	8001f04 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	015a      	lsls	r2, r3, #5
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	0151      	lsls	r1, r2, #5
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	440a      	add	r2, r1
 8001eb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eb6:	f043 0302 	orr.w	r3, r3, #2
 8001eba:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	212c      	movs	r1, #44	; 0x2c
 8001ec2:	fb01 f303 	mul.w	r3, r1, r3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3361      	adds	r3, #97	; 0x61
 8001eca:	2205      	movs	r2, #5
 8001ecc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	015a      	lsls	r2, r3, #5
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eda:	461a      	mov	r2, r3
 8001edc:	2310      	movs	r3, #16
 8001ede:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	015a      	lsls	r2, r3, #5
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eec:	461a      	mov	r2, r3
 8001eee:	2308      	movs	r3, #8
 8001ef0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	4611      	mov	r1, r2
 8001efc:	4618      	mov	r0, r3
 8001efe:	f004 f9e4 	bl	80062ca <USB_HC_Halt>
 8001f02:	e075      	b.n	8001ff0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	015a      	lsls	r2, r3, #5
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f1a:	d134      	bne.n	8001f86 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	015a      	lsls	r2, r3, #5
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4413      	add	r3, r2
 8001f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	0151      	lsls	r1, r2, #5
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	440a      	add	r2, r1
 8001f32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f36:	f043 0302 	orr.w	r3, r3, #2
 8001f3a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	212c      	movs	r1, #44	; 0x2c
 8001f42:	fb01 f303 	mul.w	r3, r1, r3
 8001f46:	4413      	add	r3, r2
 8001f48:	3361      	adds	r3, #97	; 0x61
 8001f4a:	2208      	movs	r2, #8
 8001f4c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	2310      	movs	r3, #16
 8001f5e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	015a      	lsls	r2, r3, #5
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f72:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f004 f9a3 	bl	80062ca <USB_HC_Halt>
 8001f84:	e034      	b.n	8001ff0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f98:	2b80      	cmp	r3, #128	; 0x80
 8001f9a:	d129      	bne.n	8001ff0 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	015a      	lsls	r2, r3, #5
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	0151      	lsls	r1, r2, #5
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	440a      	add	r2, r1
 8001fb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fb6:	f043 0302 	orr.w	r3, r3, #2
 8001fba:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	212c      	movs	r1, #44	; 0x2c
 8001fc2:	fb01 f303 	mul.w	r3, r1, r3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3361      	adds	r3, #97	; 0x61
 8001fca:	2206      	movs	r2, #6
 8001fcc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f004 f976 	bl	80062ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fea:	461a      	mov	r2, r3
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	015a      	lsls	r2, r3, #5
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002002:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002006:	d122      	bne.n	800204e <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4413      	add	r3, r2
 8002010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	0151      	lsls	r1, r2, #5
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	440a      	add	r2, r1
 800201e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002022:	f043 0302 	orr.w	r3, r3, #2
 8002026:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	4611      	mov	r1, r2
 8002032:	4618      	mov	r0, r3
 8002034:	f004 f949 	bl	80062ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	015a      	lsls	r2, r3, #5
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4413      	add	r3, r2
 8002040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002044:	461a      	mov	r2, r3
 8002046:	f44f 7300 	mov.w	r3, #512	; 0x200
 800204a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800204c:	e2ba      	b.n	80025c4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4413      	add	r3, r2
 8002056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b01      	cmp	r3, #1
 8002062:	f040 811b 	bne.w	800229c <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d019      	beq.n	80020a2 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	212c      	movs	r1, #44	; 0x2c
 8002074:	fb01 f303 	mul.w	r3, r1, r3
 8002078:	4413      	add	r3, r2
 800207a:	3348      	adds	r3, #72	; 0x48
 800207c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	0159      	lsls	r1, r3, #5
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	440b      	add	r3, r1
 8002086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002090:	1ad2      	subs	r2, r2, r3
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	202c      	movs	r0, #44	; 0x2c
 8002098:	fb00 f303 	mul.w	r3, r0, r3
 800209c:	440b      	add	r3, r1
 800209e:	3350      	adds	r3, #80	; 0x50
 80020a0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	212c      	movs	r1, #44	; 0x2c
 80020a8:	fb01 f303 	mul.w	r3, r1, r3
 80020ac:	4413      	add	r3, r2
 80020ae:	3361      	adds	r3, #97	; 0x61
 80020b0:	2201      	movs	r2, #1
 80020b2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	212c      	movs	r1, #44	; 0x2c
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	4413      	add	r3, r2
 80020c0:	335c      	adds	r3, #92	; 0x5c
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	015a      	lsls	r2, r3, #5
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4413      	add	r3, r2
 80020ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d2:	461a      	mov	r2, r3
 80020d4:	2301      	movs	r3, #1
 80020d6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	212c      	movs	r1, #44	; 0x2c
 80020de:	fb01 f303 	mul.w	r3, r1, r3
 80020e2:	4413      	add	r3, r2
 80020e4:	333f      	adds	r3, #63	; 0x3f
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d009      	beq.n	8002100 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	212c      	movs	r1, #44	; 0x2c
 80020f2:	fb01 f303 	mul.w	r3, r1, r3
 80020f6:	4413      	add	r3, r2
 80020f8:	333f      	adds	r3, #63	; 0x3f
 80020fa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d121      	bne.n	8002144 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	015a      	lsls	r2, r3, #5
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4413      	add	r3, r2
 8002108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	0151      	lsls	r1, r2, #5
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	440a      	add	r2, r1
 8002116:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800211a:	f043 0302 	orr.w	r3, r3, #2
 800211e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	4611      	mov	r1, r2
 800212a:	4618      	mov	r0, r3
 800212c:	f004 f8cd 	bl	80062ca <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	015a      	lsls	r2, r3, #5
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4413      	add	r3, r2
 8002138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213c:	461a      	mov	r2, r3
 800213e:	2310      	movs	r3, #16
 8002140:	6093      	str	r3, [r2, #8]
 8002142:	e066      	b.n	8002212 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	212c      	movs	r1, #44	; 0x2c
 800214a:	fb01 f303 	mul.w	r3, r1, r3
 800214e:	4413      	add	r3, r2
 8002150:	333f      	adds	r3, #63	; 0x3f
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d127      	bne.n	80021a8 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4413      	add	r3, r2
 8002160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	0151      	lsls	r1, r2, #5
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	440a      	add	r2, r1
 800216e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002172:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002176:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	212c      	movs	r1, #44	; 0x2c
 800217e:	fb01 f303 	mul.w	r3, r1, r3
 8002182:	4413      	add	r3, r2
 8002184:	3360      	adds	r3, #96	; 0x60
 8002186:	2201      	movs	r2, #1
 8002188:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	b2d9      	uxtb	r1, r3
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	202c      	movs	r0, #44	; 0x2c
 8002194:	fb00 f303 	mul.w	r3, r0, r3
 8002198:	4413      	add	r3, r2
 800219a:	3360      	adds	r3, #96	; 0x60
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	461a      	mov	r2, r3
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f005 fbaf 	bl	8007904 <HAL_HCD_HC_NotifyURBChange_Callback>
 80021a6:	e034      	b.n	8002212 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	212c      	movs	r1, #44	; 0x2c
 80021ae:	fb01 f303 	mul.w	r3, r1, r3
 80021b2:	4413      	add	r3, r2
 80021b4:	333f      	adds	r3, #63	; 0x3f
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d12a      	bne.n	8002212 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	212c      	movs	r1, #44	; 0x2c
 80021c2:	fb01 f303 	mul.w	r3, r1, r3
 80021c6:	4413      	add	r3, r2
 80021c8:	3360      	adds	r3, #96	; 0x60
 80021ca:	2201      	movs	r2, #1
 80021cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	212c      	movs	r1, #44	; 0x2c
 80021d4:	fb01 f303 	mul.w	r3, r1, r3
 80021d8:	4413      	add	r3, r2
 80021da:	3354      	adds	r3, #84	; 0x54
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	f083 0301 	eor.w	r3, r3, #1
 80021e2:	b2d8      	uxtb	r0, r3
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	212c      	movs	r1, #44	; 0x2c
 80021ea:	fb01 f303 	mul.w	r3, r1, r3
 80021ee:	4413      	add	r3, r2
 80021f0:	3354      	adds	r3, #84	; 0x54
 80021f2:	4602      	mov	r2, r0
 80021f4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	b2d9      	uxtb	r1, r3
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	202c      	movs	r0, #44	; 0x2c
 8002200:	fb00 f303 	mul.w	r3, r0, r3
 8002204:	4413      	add	r3, r2
 8002206:	3360      	adds	r3, #96	; 0x60
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	461a      	mov	r2, r3
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f005 fb79 	bl	8007904 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d12b      	bne.n	8002272 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	212c      	movs	r1, #44	; 0x2c
 8002220:	fb01 f303 	mul.w	r3, r1, r3
 8002224:	4413      	add	r3, r2
 8002226:	3348      	adds	r3, #72	; 0x48
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	202c      	movs	r0, #44	; 0x2c
 8002230:	fb00 f202 	mul.w	r2, r0, r2
 8002234:	440a      	add	r2, r1
 8002236:	3240      	adds	r2, #64	; 0x40
 8002238:	8812      	ldrh	r2, [r2, #0]
 800223a:	fbb3 f3f2 	udiv	r3, r3, r2
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 81be 	beq.w	80025c4 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	212c      	movs	r1, #44	; 0x2c
 800224e:	fb01 f303 	mul.w	r3, r1, r3
 8002252:	4413      	add	r3, r2
 8002254:	3354      	adds	r3, #84	; 0x54
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	f083 0301 	eor.w	r3, r3, #1
 800225c:	b2d8      	uxtb	r0, r3
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	212c      	movs	r1, #44	; 0x2c
 8002264:	fb01 f303 	mul.w	r3, r1, r3
 8002268:	4413      	add	r3, r2
 800226a:	3354      	adds	r3, #84	; 0x54
 800226c:	4602      	mov	r2, r0
 800226e:	701a      	strb	r2, [r3, #0]
}
 8002270:	e1a8      	b.n	80025c4 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	212c      	movs	r1, #44	; 0x2c
 8002278:	fb01 f303 	mul.w	r3, r1, r3
 800227c:	4413      	add	r3, r2
 800227e:	3354      	adds	r3, #84	; 0x54
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	f083 0301 	eor.w	r3, r3, #1
 8002286:	b2d8      	uxtb	r0, r3
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	212c      	movs	r1, #44	; 0x2c
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	4413      	add	r3, r2
 8002294:	3354      	adds	r3, #84	; 0x54
 8002296:	4602      	mov	r2, r0
 8002298:	701a      	strb	r2, [r3, #0]
}
 800229a:	e193      	b.n	80025c4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	f040 8106 	bne.w	80024c0 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	015a      	lsls	r2, r3, #5
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	0151      	lsls	r1, r2, #5
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	440a      	add	r2, r1
 80022ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022ce:	f023 0302 	bic.w	r3, r3, #2
 80022d2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	212c      	movs	r1, #44	; 0x2c
 80022da:	fb01 f303 	mul.w	r3, r1, r3
 80022de:	4413      	add	r3, r2
 80022e0:	3361      	adds	r3, #97	; 0x61
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d109      	bne.n	80022fc <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	212c      	movs	r1, #44	; 0x2c
 80022ee:	fb01 f303 	mul.w	r3, r1, r3
 80022f2:	4413      	add	r3, r2
 80022f4:	3360      	adds	r3, #96	; 0x60
 80022f6:	2201      	movs	r2, #1
 80022f8:	701a      	strb	r2, [r3, #0]
 80022fa:	e0c9      	b.n	8002490 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	212c      	movs	r1, #44	; 0x2c
 8002302:	fb01 f303 	mul.w	r3, r1, r3
 8002306:	4413      	add	r3, r2
 8002308:	3361      	adds	r3, #97	; 0x61
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b05      	cmp	r3, #5
 800230e:	d109      	bne.n	8002324 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	212c      	movs	r1, #44	; 0x2c
 8002316:	fb01 f303 	mul.w	r3, r1, r3
 800231a:	4413      	add	r3, r2
 800231c:	3360      	adds	r3, #96	; 0x60
 800231e:	2205      	movs	r2, #5
 8002320:	701a      	strb	r2, [r3, #0]
 8002322:	e0b5      	b.n	8002490 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	212c      	movs	r1, #44	; 0x2c
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	4413      	add	r3, r2
 8002330:	3361      	adds	r3, #97	; 0x61
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b06      	cmp	r3, #6
 8002336:	d009      	beq.n	800234c <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	212c      	movs	r1, #44	; 0x2c
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	4413      	add	r3, r2
 8002344:	3361      	adds	r3, #97	; 0x61
 8002346:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002348:	2b08      	cmp	r3, #8
 800234a:	d150      	bne.n	80023ee <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	212c      	movs	r1, #44	; 0x2c
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	335c      	adds	r3, #92	; 0x5c
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	202c      	movs	r0, #44	; 0x2c
 8002364:	fb00 f303 	mul.w	r3, r0, r3
 8002368:	440b      	add	r3, r1
 800236a:	335c      	adds	r3, #92	; 0x5c
 800236c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	212c      	movs	r1, #44	; 0x2c
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	4413      	add	r3, r2
 800237a:	335c      	adds	r3, #92	; 0x5c
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d912      	bls.n	80023a8 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	212c      	movs	r1, #44	; 0x2c
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	4413      	add	r3, r2
 800238e:	335c      	adds	r3, #92	; 0x5c
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	212c      	movs	r1, #44	; 0x2c
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	3360      	adds	r3, #96	; 0x60
 80023a2:	2204      	movs	r2, #4
 80023a4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80023a6:	e073      	b.n	8002490 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	212c      	movs	r1, #44	; 0x2c
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	3360      	adds	r3, #96	; 0x60
 80023b6:	2202      	movs	r2, #2
 80023b8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	015a      	lsls	r2, r3, #5
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4413      	add	r3, r2
 80023c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023d0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023d8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	015a      	lsls	r2, r3, #5
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4413      	add	r3, r2
 80023e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e6:	461a      	mov	r2, r3
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80023ec:	e050      	b.n	8002490 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	212c      	movs	r1, #44	; 0x2c
 80023f4:	fb01 f303 	mul.w	r3, r1, r3
 80023f8:	4413      	add	r3, r2
 80023fa:	3361      	adds	r3, #97	; 0x61
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d122      	bne.n	8002448 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	212c      	movs	r1, #44	; 0x2c
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	4413      	add	r3, r2
 800240e:	3360      	adds	r3, #96	; 0x60
 8002410:	2202      	movs	r2, #2
 8002412:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	015a      	lsls	r2, r3, #5
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4413      	add	r3, r2
 800241c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800242a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002432:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	015a      	lsls	r2, r3, #5
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4413      	add	r3, r2
 800243c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002440:	461a      	mov	r2, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	e023      	b.n	8002490 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	212c      	movs	r1, #44	; 0x2c
 800244e:	fb01 f303 	mul.w	r3, r1, r3
 8002452:	4413      	add	r3, r2
 8002454:	3361      	adds	r3, #97	; 0x61
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b07      	cmp	r3, #7
 800245a:	d119      	bne.n	8002490 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	212c      	movs	r1, #44	; 0x2c
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	4413      	add	r3, r2
 8002468:	335c      	adds	r3, #92	; 0x5c
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	202c      	movs	r0, #44	; 0x2c
 8002474:	fb00 f303 	mul.w	r3, r0, r3
 8002478:	440b      	add	r3, r1
 800247a:	335c      	adds	r3, #92	; 0x5c
 800247c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	212c      	movs	r1, #44	; 0x2c
 8002484:	fb01 f303 	mul.w	r3, r1, r3
 8002488:	4413      	add	r3, r2
 800248a:	3360      	adds	r3, #96	; 0x60
 800248c:	2204      	movs	r2, #4
 800248e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	015a      	lsls	r2, r3, #5
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4413      	add	r3, r2
 8002498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249c:	461a      	mov	r2, r3
 800249e:	2302      	movs	r3, #2
 80024a0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	b2d9      	uxtb	r1, r3
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	202c      	movs	r0, #44	; 0x2c
 80024ac:	fb00 f303 	mul.w	r3, r0, r3
 80024b0:	4413      	add	r3, r2
 80024b2:	3360      	adds	r3, #96	; 0x60
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f005 fa23 	bl	8007904 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80024be:	e081      	b.n	80025c4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 0310 	and.w	r3, r3, #16
 80024d2:	2b10      	cmp	r3, #16
 80024d4:	d176      	bne.n	80025c4 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	212c      	movs	r1, #44	; 0x2c
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	333f      	adds	r3, #63	; 0x3f
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d121      	bne.n	800252e <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	212c      	movs	r1, #44	; 0x2c
 80024f0:	fb01 f303 	mul.w	r3, r1, r3
 80024f4:	4413      	add	r3, r2
 80024f6:	335c      	adds	r3, #92	; 0x5c
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	015a      	lsls	r2, r3, #5
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4413      	add	r3, r2
 8002504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	0151      	lsls	r1, r2, #5
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	440a      	add	r2, r1
 8002512:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002516:	f043 0302 	orr.w	r3, r3, #2
 800251a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	4611      	mov	r1, r2
 8002526:	4618      	mov	r0, r3
 8002528:	f003 fecf 	bl	80062ca <USB_HC_Halt>
 800252c:	e041      	b.n	80025b2 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	212c      	movs	r1, #44	; 0x2c
 8002534:	fb01 f303 	mul.w	r3, r1, r3
 8002538:	4413      	add	r3, r2
 800253a:	333f      	adds	r3, #63	; 0x3f
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d009      	beq.n	8002556 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	212c      	movs	r1, #44	; 0x2c
 8002548:	fb01 f303 	mul.w	r3, r1, r3
 800254c:	4413      	add	r3, r2
 800254e:	333f      	adds	r3, #63	; 0x3f
 8002550:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002552:	2b02      	cmp	r3, #2
 8002554:	d12d      	bne.n	80025b2 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	212c      	movs	r1, #44	; 0x2c
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	4413      	add	r3, r2
 8002562:	335c      	adds	r3, #92	; 0x5c
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d120      	bne.n	80025b2 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	212c      	movs	r1, #44	; 0x2c
 8002576:	fb01 f303 	mul.w	r3, r1, r3
 800257a:	4413      	add	r3, r2
 800257c:	3361      	adds	r3, #97	; 0x61
 800257e:	2203      	movs	r2, #3
 8002580:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	015a      	lsls	r2, r3, #5
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4413      	add	r3, r2
 800258a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	0151      	lsls	r1, r2, #5
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	440a      	add	r2, r1
 8002598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800259c:	f043 0302 	orr.w	r3, r3, #2
 80025a0:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	4611      	mov	r1, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f003 fe8c 	bl	80062ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	015a      	lsls	r2, r3, #5
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025be:	461a      	mov	r2, r3
 80025c0:	2310      	movs	r3, #16
 80025c2:	6093      	str	r3, [r2, #8]
}
 80025c4:	bf00      	nop
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d119      	bne.n	8002630 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	015a      	lsls	r2, r3, #5
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	4413      	add	r3, r2
 8002604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002608:	461a      	mov	r2, r3
 800260a:	2304      	movs	r3, #4
 800260c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	015a      	lsls	r2, r3, #5
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	4413      	add	r3, r2
 8002616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	0151      	lsls	r1, r2, #5
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	440a      	add	r2, r1
 8002624:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002628:	f043 0302 	orr.w	r3, r3, #2
 800262c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800262e:	e3c6      	b.n	8002dbe <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	4413      	add	r3, r2
 8002638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 0320 	and.w	r3, r3, #32
 8002642:	2b20      	cmp	r3, #32
 8002644:	d13e      	bne.n	80026c4 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	015a      	lsls	r2, r3, #5
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	4413      	add	r3, r2
 800264e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002652:	461a      	mov	r2, r3
 8002654:	2320      	movs	r3, #32
 8002656:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	212c      	movs	r1, #44	; 0x2c
 800265e:	fb01 f303 	mul.w	r3, r1, r3
 8002662:	4413      	add	r3, r2
 8002664:	333d      	adds	r3, #61	; 0x3d
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b01      	cmp	r3, #1
 800266a:	f040 83a8 	bne.w	8002dbe <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	212c      	movs	r1, #44	; 0x2c
 8002674:	fb01 f303 	mul.w	r3, r1, r3
 8002678:	4413      	add	r3, r2
 800267a:	333d      	adds	r3, #61	; 0x3d
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	212c      	movs	r1, #44	; 0x2c
 8002686:	fb01 f303 	mul.w	r3, r1, r3
 800268a:	4413      	add	r3, r2
 800268c:	3360      	adds	r3, #96	; 0x60
 800268e:	2202      	movs	r2, #2
 8002690:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	4413      	add	r3, r2
 800269a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	0151      	lsls	r1, r2, #5
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	440a      	add	r2, r1
 80026a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026ac:	f043 0302 	orr.w	r3, r3, #2
 80026b0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	4611      	mov	r1, r2
 80026bc:	4618      	mov	r0, r3
 80026be:	f003 fe04 	bl	80062ca <USB_HC_Halt>
}
 80026c2:	e37c      	b.n	8002dbe <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	015a      	lsls	r2, r3, #5
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026da:	d122      	bne.n	8002722 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	0151      	lsls	r1, r2, #5
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	440a      	add	r2, r1
 80026f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026f6:	f043 0302 	orr.w	r3, r3, #2
 80026fa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	4611      	mov	r1, r2
 8002706:	4618      	mov	r0, r3
 8002708:	f003 fddf 	bl	80062ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	4413      	add	r3, r2
 8002714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002718:	461a      	mov	r2, r3
 800271a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800271e:	6093      	str	r3, [r2, #8]
}
 8002720:	e34d      	b.n	8002dbe <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	4413      	add	r3, r2
 800272a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b01      	cmp	r3, #1
 8002736:	d150      	bne.n	80027da <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	212c      	movs	r1, #44	; 0x2c
 800273e:	fb01 f303 	mul.w	r3, r1, r3
 8002742:	4413      	add	r3, r2
 8002744:	335c      	adds	r3, #92	; 0x5c
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	4413      	add	r3, r2
 8002752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275c:	2b40      	cmp	r3, #64	; 0x40
 800275e:	d111      	bne.n	8002784 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	212c      	movs	r1, #44	; 0x2c
 8002766:	fb01 f303 	mul.w	r3, r1, r3
 800276a:	4413      	add	r3, r2
 800276c:	333d      	adds	r3, #61	; 0x3d
 800276e:	2201      	movs	r2, #1
 8002770:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	015a      	lsls	r2, r3, #5
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	4413      	add	r3, r2
 800277a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277e:	461a      	mov	r2, r3
 8002780:	2340      	movs	r3, #64	; 0x40
 8002782:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	4413      	add	r3, r2
 800278c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	0151      	lsls	r1, r2, #5
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	440a      	add	r2, r1
 800279a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800279e:	f043 0302 	orr.w	r3, r3, #2
 80027a2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	4611      	mov	r1, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	f003 fd8b 	bl	80062ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c0:	461a      	mov	r2, r3
 80027c2:	2301      	movs	r3, #1
 80027c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	212c      	movs	r1, #44	; 0x2c
 80027cc:	fb01 f303 	mul.w	r3, r1, r3
 80027d0:	4413      	add	r3, r2
 80027d2:	3361      	adds	r3, #97	; 0x61
 80027d4:	2201      	movs	r2, #1
 80027d6:	701a      	strb	r2, [r3, #0]
}
 80027d8:	e2f1      	b.n	8002dbe <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ec:	2b40      	cmp	r3, #64	; 0x40
 80027ee:	d13c      	bne.n	800286a <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	212c      	movs	r1, #44	; 0x2c
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	4413      	add	r3, r2
 80027fc:	3361      	adds	r3, #97	; 0x61
 80027fe:	2204      	movs	r2, #4
 8002800:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	212c      	movs	r1, #44	; 0x2c
 8002808:	fb01 f303 	mul.w	r3, r1, r3
 800280c:	4413      	add	r3, r2
 800280e:	333d      	adds	r3, #61	; 0x3d
 8002810:	2201      	movs	r2, #1
 8002812:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	212c      	movs	r1, #44	; 0x2c
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	4413      	add	r3, r2
 8002820:	335c      	adds	r3, #92	; 0x5c
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	015a      	lsls	r2, r3, #5
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	4413      	add	r3, r2
 800282e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	0151      	lsls	r1, r2, #5
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	440a      	add	r2, r1
 800283c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002840:	f043 0302 	orr.w	r3, r3, #2
 8002844:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	4611      	mov	r1, r2
 8002850:	4618      	mov	r0, r3
 8002852:	f003 fd3a 	bl	80062ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	4413      	add	r3, r2
 800285e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002862:	461a      	mov	r2, r3
 8002864:	2340      	movs	r3, #64	; 0x40
 8002866:	6093      	str	r3, [r2, #8]
}
 8002868:	e2a9      	b.n	8002dbe <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	015a      	lsls	r2, r3, #5
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	4413      	add	r3, r2
 8002872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b08      	cmp	r3, #8
 800287e:	d12a      	bne.n	80028d6 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	015a      	lsls	r2, r3, #5
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	4413      	add	r3, r2
 8002888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288c:	461a      	mov	r2, r3
 800288e:	2308      	movs	r3, #8
 8002890:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	4413      	add	r3, r2
 800289a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	0151      	lsls	r1, r2, #5
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	440a      	add	r2, r1
 80028a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028ac:	f043 0302 	orr.w	r3, r3, #2
 80028b0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	4611      	mov	r1, r2
 80028bc:	4618      	mov	r0, r3
 80028be:	f003 fd04 	bl	80062ca <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	212c      	movs	r1, #44	; 0x2c
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	4413      	add	r3, r2
 80028ce:	3361      	adds	r3, #97	; 0x61
 80028d0:	2205      	movs	r2, #5
 80028d2:	701a      	strb	r2, [r3, #0]
}
 80028d4:	e273      	b.n	8002dbe <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 0310 	and.w	r3, r3, #16
 80028e8:	2b10      	cmp	r3, #16
 80028ea:	d150      	bne.n	800298e <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	335c      	adds	r3, #92	; 0x5c
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	212c      	movs	r1, #44	; 0x2c
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	4413      	add	r3, r2
 800290a:	3361      	adds	r3, #97	; 0x61
 800290c:	2203      	movs	r2, #3
 800290e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	212c      	movs	r1, #44	; 0x2c
 8002916:	fb01 f303 	mul.w	r3, r1, r3
 800291a:	4413      	add	r3, r2
 800291c:	333d      	adds	r3, #61	; 0x3d
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d112      	bne.n	800294a <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	212c      	movs	r1, #44	; 0x2c
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	4413      	add	r3, r2
 8002930:	333c      	adds	r3, #60	; 0x3c
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d108      	bne.n	800294a <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	333d      	adds	r3, #61	; 0x3d
 8002946:	2201      	movs	r2, #1
 8002948:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	4413      	add	r3, r2
 8002952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	0151      	lsls	r1, r2, #5
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	440a      	add	r2, r1
 8002960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002964:	f043 0302 	orr.w	r3, r3, #2
 8002968:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f003 fca8 	bl	80062ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	4413      	add	r3, r2
 8002982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002986:	461a      	mov	r2, r3
 8002988:	2310      	movs	r3, #16
 800298a:	6093      	str	r3, [r2, #8]
}
 800298c:	e217      	b.n	8002dbe <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	4413      	add	r3, r2
 8002996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a0:	2b80      	cmp	r3, #128	; 0x80
 80029a2:	d174      	bne.n	8002a8e <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d121      	bne.n	80029f0 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	3361      	adds	r3, #97	; 0x61
 80029ba:	2206      	movs	r2, #6
 80029bc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	015a      	lsls	r2, r3, #5
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	0151      	lsls	r1, r2, #5
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	440a      	add	r2, r1
 80029d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029d8:	f043 0302 	orr.w	r3, r3, #2
 80029dc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	4611      	mov	r1, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f003 fc6e 	bl	80062ca <USB_HC_Halt>
 80029ee:	e044      	b.n	8002a7a <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	212c      	movs	r1, #44	; 0x2c
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	335c      	adds	r3, #92	; 0x5c
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	202c      	movs	r0, #44	; 0x2c
 8002a08:	fb00 f303 	mul.w	r3, r0, r3
 8002a0c:	440b      	add	r3, r1
 8002a0e:	335c      	adds	r3, #92	; 0x5c
 8002a10:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	212c      	movs	r1, #44	; 0x2c
 8002a18:	fb01 f303 	mul.w	r3, r1, r3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	335c      	adds	r3, #92	; 0x5c
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d920      	bls.n	8002a68 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	212c      	movs	r1, #44	; 0x2c
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	335c      	adds	r3, #92	; 0x5c
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	212c      	movs	r1, #44	; 0x2c
 8002a3e:	fb01 f303 	mul.w	r3, r1, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	3360      	adds	r3, #96	; 0x60
 8002a46:	2204      	movs	r2, #4
 8002a48:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	b2d9      	uxtb	r1, r3
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	202c      	movs	r0, #44	; 0x2c
 8002a54:	fb00 f303 	mul.w	r3, r0, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	3360      	adds	r3, #96	; 0x60
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f004 ff4f 	bl	8007904 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a66:	e008      	b.n	8002a7a <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	212c      	movs	r1, #44	; 0x2c
 8002a6e:	fb01 f303 	mul.w	r3, r1, r3
 8002a72:	4413      	add	r3, r2
 8002a74:	3360      	adds	r3, #96	; 0x60
 8002a76:	2202      	movs	r2, #2
 8002a78:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	015a      	lsls	r2, r3, #5
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	4413      	add	r3, r2
 8002a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a86:	461a      	mov	r2, r3
 8002a88:	2380      	movs	r3, #128	; 0x80
 8002a8a:	6093      	str	r3, [r2, #8]
}
 8002a8c:	e197      	b.n	8002dbe <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	015a      	lsls	r2, r3, #5
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa4:	d134      	bne.n	8002b10 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	0151      	lsls	r1, r2, #5
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	440a      	add	r2, r1
 8002abc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ac0:	f043 0302 	orr.w	r3, r3, #2
 8002ac4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f003 fbfa 	bl	80062ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	2310      	movs	r3, #16
 8002ae6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af4:	461a      	mov	r2, r3
 8002af6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002afa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	212c      	movs	r1, #44	; 0x2c
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	3361      	adds	r3, #97	; 0x61
 8002b0a:	2208      	movs	r2, #8
 8002b0c:	701a      	strb	r2, [r3, #0]
}
 8002b0e:	e156      	b.n	8002dbe <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	f040 814b 	bne.w	8002dbe <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	0151      	lsls	r1, r2, #5
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	440a      	add	r2, r1
 8002b3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b42:	f023 0302 	bic.w	r3, r3, #2
 8002b46:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	212c      	movs	r1, #44	; 0x2c
 8002b4e:	fb01 f303 	mul.w	r3, r1, r3
 8002b52:	4413      	add	r3, r2
 8002b54:	3361      	adds	r3, #97	; 0x61
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d179      	bne.n	8002c50 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	212c      	movs	r1, #44	; 0x2c
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	4413      	add	r3, r2
 8002b68:	3360      	adds	r3, #96	; 0x60
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	212c      	movs	r1, #44	; 0x2c
 8002b74:	fb01 f303 	mul.w	r3, r1, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	333f      	adds	r3, #63	; 0x3f
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d00a      	beq.n	8002b98 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	212c      	movs	r1, #44	; 0x2c
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	333f      	adds	r3, #63	; 0x3f
 8002b90:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	f040 80fc 	bne.w	8002d90 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d142      	bne.n	8002c26 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	212c      	movs	r1, #44	; 0x2c
 8002ba6:	fb01 f303 	mul.w	r3, r1, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	334c      	adds	r3, #76	; 0x4c
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 80ed 	beq.w	8002d90 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	212c      	movs	r1, #44	; 0x2c
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	334c      	adds	r3, #76	; 0x4c
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	202c      	movs	r0, #44	; 0x2c
 8002bcc:	fb00 f202 	mul.w	r2, r0, r2
 8002bd0:	440a      	add	r2, r1
 8002bd2:	3240      	adds	r2, #64	; 0x40
 8002bd4:	8812      	ldrh	r2, [r2, #0]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	202c      	movs	r0, #44	; 0x2c
 8002be0:	fb00 f202 	mul.w	r2, r0, r2
 8002be4:	440a      	add	r2, r1
 8002be6:	3240      	adds	r2, #64	; 0x40
 8002be8:	8812      	ldrh	r2, [r2, #0]
 8002bea:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 80ca 	beq.w	8002d90 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	212c      	movs	r1, #44	; 0x2c
 8002c02:	fb01 f303 	mul.w	r3, r1, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	3355      	adds	r3, #85	; 0x55
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	f083 0301 	eor.w	r3, r3, #1
 8002c10:	b2d8      	uxtb	r0, r3
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	212c      	movs	r1, #44	; 0x2c
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3355      	adds	r3, #85	; 0x55
 8002c20:	4602      	mov	r2, r0
 8002c22:	701a      	strb	r2, [r3, #0]
 8002c24:	e0b4      	b.n	8002d90 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	212c      	movs	r1, #44	; 0x2c
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	3355      	adds	r3, #85	; 0x55
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	f083 0301 	eor.w	r3, r3, #1
 8002c3a:	b2d8      	uxtb	r0, r3
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	212c      	movs	r1, #44	; 0x2c
 8002c42:	fb01 f303 	mul.w	r3, r1, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	3355      	adds	r3, #85	; 0x55
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	701a      	strb	r2, [r3, #0]
 8002c4e:	e09f      	b.n	8002d90 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	212c      	movs	r1, #44	; 0x2c
 8002c56:	fb01 f303 	mul.w	r3, r1, r3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3361      	adds	r3, #97	; 0x61
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d109      	bne.n	8002c78 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	212c      	movs	r1, #44	; 0x2c
 8002c6a:	fb01 f303 	mul.w	r3, r1, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	3360      	adds	r3, #96	; 0x60
 8002c72:	2202      	movs	r2, #2
 8002c74:	701a      	strb	r2, [r3, #0]
 8002c76:	e08b      	b.n	8002d90 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	212c      	movs	r1, #44	; 0x2c
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	3361      	adds	r3, #97	; 0x61
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d109      	bne.n	8002ca0 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	212c      	movs	r1, #44	; 0x2c
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	3360      	adds	r3, #96	; 0x60
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	e077      	b.n	8002d90 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	212c      	movs	r1, #44	; 0x2c
 8002ca6:	fb01 f303 	mul.w	r3, r1, r3
 8002caa:	4413      	add	r3, r2
 8002cac:	3361      	adds	r3, #97	; 0x61
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b05      	cmp	r3, #5
 8002cb2:	d109      	bne.n	8002cc8 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	212c      	movs	r1, #44	; 0x2c
 8002cba:	fb01 f303 	mul.w	r3, r1, r3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3360      	adds	r3, #96	; 0x60
 8002cc2:	2205      	movs	r2, #5
 8002cc4:	701a      	strb	r2, [r3, #0]
 8002cc6:	e063      	b.n	8002d90 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	212c      	movs	r1, #44	; 0x2c
 8002cce:	fb01 f303 	mul.w	r3, r1, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3361      	adds	r3, #97	; 0x61
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b06      	cmp	r3, #6
 8002cda:	d009      	beq.n	8002cf0 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	212c      	movs	r1, #44	; 0x2c
 8002ce2:	fb01 f303 	mul.w	r3, r1, r3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3361      	adds	r3, #97	; 0x61
 8002cea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d14f      	bne.n	8002d90 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	212c      	movs	r1, #44	; 0x2c
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	335c      	adds	r3, #92	; 0x5c
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	202c      	movs	r0, #44	; 0x2c
 8002d08:	fb00 f303 	mul.w	r3, r0, r3
 8002d0c:	440b      	add	r3, r1
 8002d0e:	335c      	adds	r3, #92	; 0x5c
 8002d10:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	212c      	movs	r1, #44	; 0x2c
 8002d18:	fb01 f303 	mul.w	r3, r1, r3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	335c      	adds	r3, #92	; 0x5c
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d912      	bls.n	8002d4c <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	212c      	movs	r1, #44	; 0x2c
 8002d2c:	fb01 f303 	mul.w	r3, r1, r3
 8002d30:	4413      	add	r3, r2
 8002d32:	335c      	adds	r3, #92	; 0x5c
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	212c      	movs	r1, #44	; 0x2c
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	3360      	adds	r3, #96	; 0x60
 8002d46:	2204      	movs	r2, #4
 8002d48:	701a      	strb	r2, [r3, #0]
 8002d4a:	e021      	b.n	8002d90 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	212c      	movs	r1, #44	; 0x2c
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	3360      	adds	r3, #96	; 0x60
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d74:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d7c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	2302      	movs	r3, #2
 8002da0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	b2d9      	uxtb	r1, r3
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	202c      	movs	r0, #44	; 0x2c
 8002dac:	fb00 f303 	mul.w	r3, r0, r3
 8002db0:	4413      	add	r3, r2
 8002db2:	3360      	adds	r3, #96	; 0x60
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f004 fda3 	bl	8007904 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002dbe:	bf00      	nop
 8002dc0:	3720      	adds	r7, #32
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b08a      	sub	sp, #40	; 0x28
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	0c5b      	lsrs	r3, r3, #17
 8002dec:	f003 030f 	and.w	r3, r3, #15
 8002df0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	091b      	lsrs	r3, r3, #4
 8002df6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dfa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d004      	beq.n	8002e0c <HCD_RXQLVL_IRQHandler+0x46>
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2b05      	cmp	r3, #5
 8002e06:	f000 80a9 	beq.w	8002f5c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e0a:	e0aa      	b.n	8002f62 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 80a6 	beq.w	8002f60 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	212c      	movs	r1, #44	; 0x2c
 8002e1a:	fb01 f303 	mul.w	r3, r1, r3
 8002e1e:	4413      	add	r3, r2
 8002e20:	3344      	adds	r3, #68	; 0x44
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 809b 	beq.w	8002f60 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	212c      	movs	r1, #44	; 0x2c
 8002e30:	fb01 f303 	mul.w	r3, r1, r3
 8002e34:	4413      	add	r3, r2
 8002e36:	3350      	adds	r3, #80	; 0x50
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	441a      	add	r2, r3
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	202c      	movs	r0, #44	; 0x2c
 8002e44:	fb00 f303 	mul.w	r3, r0, r3
 8002e48:	440b      	add	r3, r1
 8002e4a:	334c      	adds	r3, #76	; 0x4c
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d87a      	bhi.n	8002f48 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6818      	ldr	r0, [r3, #0]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	212c      	movs	r1, #44	; 0x2c
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	3344      	adds	r3, #68	; 0x44
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	b292      	uxth	r2, r2
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	f002 fdf5 	bl	8005a5a <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	212c      	movs	r1, #44	; 0x2c
 8002e76:	fb01 f303 	mul.w	r3, r1, r3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3344      	adds	r3, #68	; 0x44
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	441a      	add	r2, r3
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	202c      	movs	r0, #44	; 0x2c
 8002e8a:	fb00 f303 	mul.w	r3, r0, r3
 8002e8e:	440b      	add	r3, r1
 8002e90:	3344      	adds	r3, #68	; 0x44
 8002e92:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	212c      	movs	r1, #44	; 0x2c
 8002e9a:	fb01 f303 	mul.w	r3, r1, r3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3350      	adds	r3, #80	; 0x50
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	441a      	add	r2, r3
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	202c      	movs	r0, #44	; 0x2c
 8002eae:	fb00 f303 	mul.w	r3, r0, r3
 8002eb2:	440b      	add	r3, r1
 8002eb4:	3350      	adds	r3, #80	; 0x50
 8002eb6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	0cdb      	lsrs	r3, r3, #19
 8002ec8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ecc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	212c      	movs	r1, #44	; 0x2c
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	4413      	add	r3, r2
 8002eda:	3340      	adds	r3, #64	; 0x40
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d13c      	bne.n	8002f60 <HCD_RXQLVL_IRQHandler+0x19a>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d039      	beq.n	8002f60 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f02:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f0a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	015a      	lsls	r2, r3, #5
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f18:	461a      	mov	r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	212c      	movs	r1, #44	; 0x2c
 8002f24:	fb01 f303 	mul.w	r3, r1, r3
 8002f28:	4413      	add	r3, r2
 8002f2a:	3354      	adds	r3, #84	; 0x54
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	f083 0301 	eor.w	r3, r3, #1
 8002f32:	b2d8      	uxtb	r0, r3
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	212c      	movs	r1, #44	; 0x2c
 8002f3a:	fb01 f303 	mul.w	r3, r1, r3
 8002f3e:	4413      	add	r3, r2
 8002f40:	3354      	adds	r3, #84	; 0x54
 8002f42:	4602      	mov	r2, r0
 8002f44:	701a      	strb	r2, [r3, #0]
      break;
 8002f46:	e00b      	b.n	8002f60 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	212c      	movs	r1, #44	; 0x2c
 8002f4e:	fb01 f303 	mul.w	r3, r1, r3
 8002f52:	4413      	add	r3, r2
 8002f54:	3360      	adds	r3, #96	; 0x60
 8002f56:	2204      	movs	r2, #4
 8002f58:	701a      	strb	r2, [r3, #0]
      break;
 8002f5a:	e001      	b.n	8002f60 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002f5c:	bf00      	nop
 8002f5e:	e000      	b.n	8002f62 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002f60:	bf00      	nop
  }
}
 8002f62:	bf00      	nop
 8002f64:	3728      	adds	r7, #40	; 0x28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b086      	sub	sp, #24
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f96:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d10b      	bne.n	8002fba <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d102      	bne.n	8002fb2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f004 fc8d 	bl	80078cc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f043 0302 	orr.w	r3, r3, #2
 8002fb8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d132      	bne.n	800302a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	f043 0308 	orr.w	r3, r3, #8
 8002fca:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d126      	bne.n	8003024 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d113      	bne.n	8003006 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002fe4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fe8:	d106      	bne.n	8002ff8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2102      	movs	r1, #2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f002 fe6d 	bl	8005cd0 <USB_InitFSLSPClkSel>
 8002ff6:	e011      	b.n	800301c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	4618      	mov	r0, r3
 8003000:	f002 fe66 	bl	8005cd0 <USB_InitFSLSPClkSel>
 8003004:	e00a      	b.n	800301c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d106      	bne.n	800301c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003014:	461a      	mov	r2, r3
 8003016:	f64e 2360 	movw	r3, #60000	; 0xea60
 800301a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f004 fc7f 	bl	8007920 <HAL_HCD_PortEnabled_Callback>
 8003022:	e002      	b.n	800302a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f004 fc89 	bl	800793c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f003 0320 	and.w	r3, r3, #32
 8003030:	2b20      	cmp	r3, #32
 8003032:	d103      	bne.n	800303c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f043 0320 	orr.w	r3, r3, #32
 800303a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003042:	461a      	mov	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	6013      	str	r3, [r2, #0]
}
 8003048:	bf00      	nop
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e12b      	b.n	80032ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d106      	bne.n	800307c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7fd fd34 	bl	8000ae4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2224      	movs	r2, #36	; 0x24
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0201 	bic.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030b4:	f001 f9fc 	bl	80044b0 <HAL_RCC_GetPCLK1Freq>
 80030b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	4a81      	ldr	r2, [pc, #516]	; (80032c4 <HAL_I2C_Init+0x274>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d807      	bhi.n	80030d4 <HAL_I2C_Init+0x84>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4a80      	ldr	r2, [pc, #512]	; (80032c8 <HAL_I2C_Init+0x278>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	bf94      	ite	ls
 80030cc:	2301      	movls	r3, #1
 80030ce:	2300      	movhi	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	e006      	b.n	80030e2 <HAL_I2C_Init+0x92>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4a7d      	ldr	r2, [pc, #500]	; (80032cc <HAL_I2C_Init+0x27c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	bf94      	ite	ls
 80030dc:	2301      	movls	r3, #1
 80030de:	2300      	movhi	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e0e7      	b.n	80032ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4a78      	ldr	r2, [pc, #480]	; (80032d0 <HAL_I2C_Init+0x280>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	0c9b      	lsrs	r3, r3, #18
 80030f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	430a      	orrs	r2, r1
 8003108:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4a6a      	ldr	r2, [pc, #424]	; (80032c4 <HAL_I2C_Init+0x274>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d802      	bhi.n	8003124 <HAL_I2C_Init+0xd4>
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	3301      	adds	r3, #1
 8003122:	e009      	b.n	8003138 <HAL_I2C_Init+0xe8>
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800312a:	fb02 f303 	mul.w	r3, r2, r3
 800312e:	4a69      	ldr	r2, [pc, #420]	; (80032d4 <HAL_I2C_Init+0x284>)
 8003130:	fba2 2303 	umull	r2, r3, r2, r3
 8003134:	099b      	lsrs	r3, r3, #6
 8003136:	3301      	adds	r3, #1
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6812      	ldr	r2, [r2, #0]
 800313c:	430b      	orrs	r3, r1
 800313e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800314a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	495c      	ldr	r1, [pc, #368]	; (80032c4 <HAL_I2C_Init+0x274>)
 8003154:	428b      	cmp	r3, r1
 8003156:	d819      	bhi.n	800318c <HAL_I2C_Init+0x13c>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	1e59      	subs	r1, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	fbb1 f3f3 	udiv	r3, r1, r3
 8003166:	1c59      	adds	r1, r3, #1
 8003168:	f640 73fc 	movw	r3, #4092	; 0xffc
 800316c:	400b      	ands	r3, r1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <HAL_I2C_Init+0x138>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	1e59      	subs	r1, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003180:	3301      	adds	r3, #1
 8003182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003186:	e051      	b.n	800322c <HAL_I2C_Init+0x1dc>
 8003188:	2304      	movs	r3, #4
 800318a:	e04f      	b.n	800322c <HAL_I2C_Init+0x1dc>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d111      	bne.n	80031b8 <HAL_I2C_Init+0x168>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1e58      	subs	r0, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6859      	ldr	r1, [r3, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	440b      	add	r3, r1
 80031a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031a6:	3301      	adds	r3, #1
 80031a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	bf0c      	ite	eq
 80031b0:	2301      	moveq	r3, #1
 80031b2:	2300      	movne	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	e012      	b.n	80031de <HAL_I2C_Init+0x18e>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1e58      	subs	r0, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6859      	ldr	r1, [r3, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	0099      	lsls	r1, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ce:	3301      	adds	r3, #1
 80031d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	bf0c      	ite	eq
 80031d8:	2301      	moveq	r3, #1
 80031da:	2300      	movne	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_I2C_Init+0x196>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e022      	b.n	800322c <HAL_I2C_Init+0x1dc>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10e      	bne.n	800320c <HAL_I2C_Init+0x1bc>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1e58      	subs	r0, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6859      	ldr	r1, [r3, #4]
 80031f6:	460b      	mov	r3, r1
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	440b      	add	r3, r1
 80031fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003200:	3301      	adds	r3, #1
 8003202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800320a:	e00f      	b.n	800322c <HAL_I2C_Init+0x1dc>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	1e58      	subs	r0, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6859      	ldr	r1, [r3, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	0099      	lsls	r1, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003222:	3301      	adds	r3, #1
 8003224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003228:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	6809      	ldr	r1, [r1, #0]
 8003230:	4313      	orrs	r3, r2
 8003232:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69da      	ldr	r2, [r3, #28]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800325a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6911      	ldr	r1, [r2, #16]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	68d2      	ldr	r2, [r2, #12]
 8003266:	4311      	orrs	r1, r2
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	430b      	orrs	r3, r1
 800326e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	695a      	ldr	r2, [r3, #20]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2220      	movs	r2, #32
 80032a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	000186a0 	.word	0x000186a0
 80032c8:	001e847f 	.word	0x001e847f
 80032cc:	003d08ff 	.word	0x003d08ff
 80032d0:	431bde83 	.word	0x431bde83
 80032d4:	10624dd3 	.word	0x10624dd3

080032d8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e128      	b.n	800353c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d109      	bne.n	800330a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a90      	ldr	r2, [pc, #576]	; (8003544 <HAL_I2S_Init+0x26c>)
 8003302:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f7fd fc35 	bl	8000b74 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2202      	movs	r2, #2
 800330e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003320:	f023 030f 	bic.w	r3, r3, #15
 8003324:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2202      	movs	r2, #2
 800332c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d060      	beq.n	80033f8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d102      	bne.n	8003344 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800333e:	2310      	movs	r3, #16
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	e001      	b.n	8003348 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003344:	2320      	movs	r3, #32
 8003346:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	2b20      	cmp	r3, #32
 800334e:	d802      	bhi.n	8003356 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003356:	2001      	movs	r0, #1
 8003358:	f001 f9a0 	bl	800469c <HAL_RCCEx_GetPeriphCLKFreq>
 800335c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003366:	d125      	bne.n	80033b4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d010      	beq.n	8003392 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	fbb2 f2f3 	udiv	r2, r2, r3
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	461a      	mov	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	fbb2 f3f3 	udiv	r3, r2, r3
 800338c:	3305      	adds	r3, #5
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	e01f      	b.n	80033d2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	fbb2 f2f3 	udiv	r2, r2, r3
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	461a      	mov	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ae:	3305      	adds	r3, #5
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	e00e      	b.n	80033d2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	461a      	mov	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ce:	3305      	adds	r3, #5
 80033d0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4a5c      	ldr	r2, [pc, #368]	; (8003548 <HAL_I2S_Init+0x270>)
 80033d6:	fba2 2303 	umull	r2, r3, r2, r3
 80033da:	08db      	lsrs	r3, r3, #3
 80033dc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	085b      	lsrs	r3, r3, #1
 80033ee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	021b      	lsls	r3, r3, #8
 80033f4:	61bb      	str	r3, [r7, #24]
 80033f6:	e003      	b.n	8003400 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80033f8:	2302      	movs	r3, #2
 80033fa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d902      	bls.n	800340c <HAL_I2S_Init+0x134>
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	2bff      	cmp	r3, #255	; 0xff
 800340a:	d907      	bls.n	800341c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003410:	f043 0210 	orr.w	r2, r3, #16
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e08f      	b.n	800353c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	ea42 0103 	orr.w	r1, r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69fa      	ldr	r2, [r7, #28]
 800342c:	430a      	orrs	r2, r1
 800342e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800343a:	f023 030f 	bic.w	r3, r3, #15
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6851      	ldr	r1, [r2, #4]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6892      	ldr	r2, [r2, #8]
 8003446:	4311      	orrs	r1, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	68d2      	ldr	r2, [r2, #12]
 800344c:	4311      	orrs	r1, r2
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6992      	ldr	r2, [r2, #24]
 8003452:	430a      	orrs	r2, r1
 8003454:	431a      	orrs	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800345e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d161      	bne.n	800352c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a38      	ldr	r2, [pc, #224]	; (800354c <HAL_I2S_Init+0x274>)
 800346c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a37      	ldr	r2, [pc, #220]	; (8003550 <HAL_I2S_Init+0x278>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d101      	bne.n	800347c <HAL_I2S_Init+0x1a4>
 8003478:	4b36      	ldr	r3, [pc, #216]	; (8003554 <HAL_I2S_Init+0x27c>)
 800347a:	e001      	b.n	8003480 <HAL_I2S_Init+0x1a8>
 800347c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6812      	ldr	r2, [r2, #0]
 8003486:	4932      	ldr	r1, [pc, #200]	; (8003550 <HAL_I2S_Init+0x278>)
 8003488:	428a      	cmp	r2, r1
 800348a:	d101      	bne.n	8003490 <HAL_I2S_Init+0x1b8>
 800348c:	4a31      	ldr	r2, [pc, #196]	; (8003554 <HAL_I2S_Init+0x27c>)
 800348e:	e001      	b.n	8003494 <HAL_I2S_Init+0x1bc>
 8003490:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003494:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003498:	f023 030f 	bic.w	r3, r3, #15
 800349c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a2b      	ldr	r2, [pc, #172]	; (8003550 <HAL_I2S_Init+0x278>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d101      	bne.n	80034ac <HAL_I2S_Init+0x1d4>
 80034a8:	4b2a      	ldr	r3, [pc, #168]	; (8003554 <HAL_I2S_Init+0x27c>)
 80034aa:	e001      	b.n	80034b0 <HAL_I2S_Init+0x1d8>
 80034ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034b0:	2202      	movs	r2, #2
 80034b2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a25      	ldr	r2, [pc, #148]	; (8003550 <HAL_I2S_Init+0x278>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d101      	bne.n	80034c2 <HAL_I2S_Init+0x1ea>
 80034be:	4b25      	ldr	r3, [pc, #148]	; (8003554 <HAL_I2S_Init+0x27c>)
 80034c0:	e001      	b.n	80034c6 <HAL_I2S_Init+0x1ee>
 80034c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d2:	d003      	beq.n	80034dc <HAL_I2S_Init+0x204>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d103      	bne.n	80034e4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80034dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	e001      	b.n	80034e8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80034e4:	2300      	movs	r3, #0
 80034e6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034f2:	4313      	orrs	r3, r2
 80034f4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034fc:	4313      	orrs	r3, r2
 80034fe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003506:	4313      	orrs	r3, r2
 8003508:	b29a      	uxth	r2, r3
 800350a:	897b      	ldrh	r3, [r7, #10]
 800350c:	4313      	orrs	r3, r2
 800350e:	b29b      	uxth	r3, r3
 8003510:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003514:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a0d      	ldr	r2, [pc, #52]	; (8003550 <HAL_I2S_Init+0x278>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d101      	bne.n	8003524 <HAL_I2S_Init+0x24c>
 8003520:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <HAL_I2S_Init+0x27c>)
 8003522:	e001      	b.n	8003528 <HAL_I2S_Init+0x250>
 8003524:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003528:	897a      	ldrh	r2, [r7, #10]
 800352a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3720      	adds	r7, #32
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	0800364f 	.word	0x0800364f
 8003548:	cccccccd 	.word	0xcccccccd
 800354c:	08003765 	.word	0x08003765
 8003550:	40003800 	.word	0x40003800
 8003554:	40003400 	.word	0x40003400

08003558 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	881a      	ldrh	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	1c9a      	adds	r2, r3, #2
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10e      	bne.n	80035e8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035d8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7ff ffb8 	bl	8003558 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80035e8:	bf00      	nop
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003602:	b292      	uxth	r2, r2
 8003604:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	1c9a      	adds	r2, r3, #2
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003614:	b29b      	uxth	r3, r3
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003622:	b29b      	uxth	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10e      	bne.n	8003646 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003636:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff ff93 	bl	800356c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003646:	bf00      	nop
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b086      	sub	sp, #24
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b04      	cmp	r3, #4
 8003668:	d13a      	bne.n	80036e0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b01      	cmp	r3, #1
 8003672:	d109      	bne.n	8003688 <I2S_IRQHandler+0x3a>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367e:	2b40      	cmp	r3, #64	; 0x40
 8003680:	d102      	bne.n	8003688 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff ffb4 	bl	80035f0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368e:	2b40      	cmp	r3, #64	; 0x40
 8003690:	d126      	bne.n	80036e0 <I2S_IRQHandler+0x92>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b20      	cmp	r3, #32
 800369e:	d11f      	bne.n	80036e0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80036b0:	2300      	movs	r3, #0
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	613b      	str	r3, [r7, #16]
 80036c4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	f043 0202 	orr.w	r2, r3, #2
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7ff ff50 	bl	8003580 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d136      	bne.n	800375a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d109      	bne.n	800370a <I2S_IRQHandler+0xbc>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003700:	2b80      	cmp	r3, #128	; 0x80
 8003702:	d102      	bne.n	800370a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff ff45 	bl	8003594 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b08      	cmp	r3, #8
 8003712:	d122      	bne.n	800375a <I2S_IRQHandler+0x10c>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b20      	cmp	r3, #32
 8003720:	d11b      	bne.n	800375a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003730:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374c:	f043 0204 	orr.w	r2, r3, #4
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff ff13 	bl	8003580 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800375a:	bf00      	nop
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b088      	sub	sp, #32
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4aa2      	ldr	r2, [pc, #648]	; (8003a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d101      	bne.n	8003782 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800377e:	4ba2      	ldr	r3, [pc, #648]	; (8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003780:	e001      	b.n	8003786 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003782:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a9b      	ldr	r2, [pc, #620]	; (8003a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d101      	bne.n	80037a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800379c:	4b9a      	ldr	r3, [pc, #616]	; (8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800379e:	e001      	b.n	80037a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80037a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b0:	d004      	beq.n	80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f040 8099 	bne.w	80038ee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d107      	bne.n	80037d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f925 	bl	8003a20 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d107      	bne.n	80037f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f9c8 	bl	8003b80 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f6:	2b40      	cmp	r3, #64	; 0x40
 80037f8:	d13a      	bne.n	8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f003 0320 	and.w	r3, r3, #32
 8003800:	2b00      	cmp	r3, #0
 8003802:	d035      	beq.n	8003870 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a7e      	ldr	r2, [pc, #504]	; (8003a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d101      	bne.n	8003812 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800380e:	4b7e      	ldr	r3, [pc, #504]	; (8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003810:	e001      	b.n	8003816 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003812:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4979      	ldr	r1, [pc, #484]	; (8003a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800381e:	428b      	cmp	r3, r1
 8003820:	d101      	bne.n	8003826 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003822:	4b79      	ldr	r3, [pc, #484]	; (8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003824:	e001      	b.n	800382a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003826:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800382a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800382e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800383e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003840:	2300      	movs	r3, #0
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003862:	f043 0202 	orr.w	r2, r3, #2
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff fe88 	bl	8003580 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b08      	cmp	r3, #8
 8003878:	f040 80be 	bne.w	80039f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f003 0320 	and.w	r3, r3, #32
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 80b8 	beq.w	80039f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003896:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a59      	ldr	r2, [pc, #356]	; (8003a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d101      	bne.n	80038a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80038a2:	4b59      	ldr	r3, [pc, #356]	; (8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038a4:	e001      	b.n	80038aa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80038a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4954      	ldr	r1, [pc, #336]	; (8003a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038b2:	428b      	cmp	r3, r1
 80038b4:	d101      	bne.n	80038ba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80038b6:	4b54      	ldr	r3, [pc, #336]	; (8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038b8:	e001      	b.n	80038be <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80038ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038c2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038c4:	2300      	movs	r3, #0
 80038c6:	60bb      	str	r3, [r7, #8]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	60bb      	str	r3, [r7, #8]
 80038d0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038de:	f043 0204 	orr.w	r2, r3, #4
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff fe4a 	bl	8003580 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038ec:	e084      	b.n	80039f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d107      	bne.n	8003908 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f8be 	bl	8003a84 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b01      	cmp	r3, #1
 8003910:	d107      	bne.n	8003922 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f8fd 	bl	8003b1c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003928:	2b40      	cmp	r3, #64	; 0x40
 800392a:	d12f      	bne.n	800398c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b00      	cmp	r3, #0
 8003934:	d02a      	beq.n	800398c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003944:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a2e      	ldr	r2, [pc, #184]	; (8003a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d101      	bne.n	8003954 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003950:	4b2d      	ldr	r3, [pc, #180]	; (8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003952:	e001      	b.n	8003958 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003954:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4929      	ldr	r1, [pc, #164]	; (8003a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003960:	428b      	cmp	r3, r1
 8003962:	d101      	bne.n	8003968 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003964:	4b28      	ldr	r3, [pc, #160]	; (8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003966:	e001      	b.n	800396c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003968:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800396c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003970:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	f043 0202 	orr.w	r2, r3, #2
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7ff fdfa 	bl	8003580 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b08      	cmp	r3, #8
 8003994:	d131      	bne.n	80039fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f003 0320 	and.w	r3, r3, #32
 800399c:	2b00      	cmp	r3, #0
 800399e:	d02c      	beq.n	80039fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a17      	ldr	r2, [pc, #92]	; (8003a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d101      	bne.n	80039ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80039aa:	4b17      	ldr	r3, [pc, #92]	; (8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039ac:	e001      	b.n	80039b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80039ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4912      	ldr	r1, [pc, #72]	; (8003a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039ba:	428b      	cmp	r3, r1
 80039bc:	d101      	bne.n	80039c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80039be:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039c0:	e001      	b.n	80039c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80039c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039ca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039da:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e8:	f043 0204 	orr.w	r2, r3, #4
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff fdc5 	bl	8003580 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039f6:	e000      	b.n	80039fa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039f8:	bf00      	nop
}
 80039fa:	bf00      	nop
 80039fc:	3720      	adds	r7, #32
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40003800 	.word	0x40003800
 8003a08:	40003400 	.word	0x40003400

08003a0c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	1c99      	adds	r1, r3, #2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6251      	str	r1, [r2, #36]	; 0x24
 8003a32:	881a      	ldrh	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d113      	bne.n	8003a7a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a60:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d106      	bne.n	8003a7a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff ffc9 	bl	8003a0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	1c99      	adds	r1, r3, #2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6251      	str	r1, [r2, #36]	; 0x24
 8003a96:	8819      	ldrh	r1, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a1d      	ldr	r2, [pc, #116]	; (8003b14 <I2SEx_TxISR_I2SExt+0x90>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d101      	bne.n	8003aa6 <I2SEx_TxISR_I2SExt+0x22>
 8003aa2:	4b1d      	ldr	r3, [pc, #116]	; (8003b18 <I2SEx_TxISR_I2SExt+0x94>)
 8003aa4:	e001      	b.n	8003aaa <I2SEx_TxISR_I2SExt+0x26>
 8003aa6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aaa:	460a      	mov	r2, r1
 8003aac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d121      	bne.n	8003b0a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a12      	ldr	r2, [pc, #72]	; (8003b14 <I2SEx_TxISR_I2SExt+0x90>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d101      	bne.n	8003ad4 <I2SEx_TxISR_I2SExt+0x50>
 8003ad0:	4b11      	ldr	r3, [pc, #68]	; (8003b18 <I2SEx_TxISR_I2SExt+0x94>)
 8003ad2:	e001      	b.n	8003ad8 <I2SEx_TxISR_I2SExt+0x54>
 8003ad4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	490d      	ldr	r1, [pc, #52]	; (8003b14 <I2SEx_TxISR_I2SExt+0x90>)
 8003ae0:	428b      	cmp	r3, r1
 8003ae2:	d101      	bne.n	8003ae8 <I2SEx_TxISR_I2SExt+0x64>
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <I2SEx_TxISR_I2SExt+0x94>)
 8003ae6:	e001      	b.n	8003aec <I2SEx_TxISR_I2SExt+0x68>
 8003ae8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003af0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d106      	bne.n	8003b0a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7ff ff81 	bl	8003a0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40003800 	.word	0x40003800
 8003b18:	40003400 	.word	0x40003400

08003b1c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68d8      	ldr	r0, [r3, #12]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	1c99      	adds	r1, r3, #2
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b34:	b282      	uxth	r2, r0
 8003b36:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d113      	bne.n	8003b78 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b5e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7ff ff4a 	bl	8003a0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b78:	bf00      	nop
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a20      	ldr	r2, [pc, #128]	; (8003c10 <I2SEx_RxISR_I2SExt+0x90>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d101      	bne.n	8003b96 <I2SEx_RxISR_I2SExt+0x16>
 8003b92:	4b20      	ldr	r3, [pc, #128]	; (8003c14 <I2SEx_RxISR_I2SExt+0x94>)
 8003b94:	e001      	b.n	8003b9a <I2SEx_RxISR_I2SExt+0x1a>
 8003b96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b9a:	68d8      	ldr	r0, [r3, #12]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	1c99      	adds	r1, r3, #2
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ba6:	b282      	uxth	r2, r0
 8003ba8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d121      	bne.n	8003c06 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a12      	ldr	r2, [pc, #72]	; (8003c10 <I2SEx_RxISR_I2SExt+0x90>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d101      	bne.n	8003bd0 <I2SEx_RxISR_I2SExt+0x50>
 8003bcc:	4b11      	ldr	r3, [pc, #68]	; (8003c14 <I2SEx_RxISR_I2SExt+0x94>)
 8003bce:	e001      	b.n	8003bd4 <I2SEx_RxISR_I2SExt+0x54>
 8003bd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	490d      	ldr	r1, [pc, #52]	; (8003c10 <I2SEx_RxISR_I2SExt+0x90>)
 8003bdc:	428b      	cmp	r3, r1
 8003bde:	d101      	bne.n	8003be4 <I2SEx_RxISR_I2SExt+0x64>
 8003be0:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <I2SEx_RxISR_I2SExt+0x94>)
 8003be2:	e001      	b.n	8003be8 <I2SEx_RxISR_I2SExt+0x68>
 8003be4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003be8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d106      	bne.n	8003c06 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff ff03 	bl	8003a0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c06:	bf00      	nop
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40003800 	.word	0x40003800
 8003c14:	40003400 	.word	0x40003400

08003c18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e264      	b.n	80040f4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d075      	beq.n	8003d22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c36:	4ba3      	ldr	r3, [pc, #652]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 030c 	and.w	r3, r3, #12
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d00c      	beq.n	8003c5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c42:	4ba0      	ldr	r3, [pc, #640]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d112      	bne.n	8003c74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c4e:	4b9d      	ldr	r3, [pc, #628]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c5a:	d10b      	bne.n	8003c74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c5c:	4b99      	ldr	r3, [pc, #612]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d05b      	beq.n	8003d20 <HAL_RCC_OscConfig+0x108>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d157      	bne.n	8003d20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e23f      	b.n	80040f4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c7c:	d106      	bne.n	8003c8c <HAL_RCC_OscConfig+0x74>
 8003c7e:	4b91      	ldr	r3, [pc, #580]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a90      	ldr	r2, [pc, #576]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	e01d      	b.n	8003cc8 <HAL_RCC_OscConfig+0xb0>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c94:	d10c      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x98>
 8003c96:	4b8b      	ldr	r3, [pc, #556]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a8a      	ldr	r2, [pc, #552]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	4b88      	ldr	r3, [pc, #544]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a87      	ldr	r2, [pc, #540]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	e00b      	b.n	8003cc8 <HAL_RCC_OscConfig+0xb0>
 8003cb0:	4b84      	ldr	r3, [pc, #528]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a83      	ldr	r2, [pc, #524]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cba:	6013      	str	r3, [r2, #0]
 8003cbc:	4b81      	ldr	r3, [pc, #516]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a80      	ldr	r2, [pc, #512]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d013      	beq.n	8003cf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd0:	f7fd f97e 	bl	8000fd0 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cd8:	f7fd f97a 	bl	8000fd0 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b64      	cmp	r3, #100	; 0x64
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e204      	b.n	80040f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cea:	4b76      	ldr	r3, [pc, #472]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCC_OscConfig+0xc0>
 8003cf6:	e014      	b.n	8003d22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf8:	f7fd f96a 	bl	8000fd0 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d00:	f7fd f966 	bl	8000fd0 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b64      	cmp	r3, #100	; 0x64
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e1f0      	b.n	80040f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d12:	4b6c      	ldr	r3, [pc, #432]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0xe8>
 8003d1e:	e000      	b.n	8003d22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d063      	beq.n	8003df6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d2e:	4b65      	ldr	r3, [pc, #404]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 030c 	and.w	r3, r3, #12
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00b      	beq.n	8003d52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d3a:	4b62      	ldr	r3, [pc, #392]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d11c      	bne.n	8003d80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d46:	4b5f      	ldr	r3, [pc, #380]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d116      	bne.n	8003d80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d52:	4b5c      	ldr	r3, [pc, #368]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d005      	beq.n	8003d6a <HAL_RCC_OscConfig+0x152>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d001      	beq.n	8003d6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e1c4      	b.n	80040f4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d6a:	4b56      	ldr	r3, [pc, #344]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4952      	ldr	r1, [pc, #328]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7e:	e03a      	b.n	8003df6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d020      	beq.n	8003dca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d88:	4b4f      	ldr	r3, [pc, #316]	; (8003ec8 <HAL_RCC_OscConfig+0x2b0>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8e:	f7fd f91f 	bl	8000fd0 <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d96:	f7fd f91b 	bl	8000fd0 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e1a5      	b.n	80040f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da8:	4b46      	ldr	r3, [pc, #280]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db4:	4b43      	ldr	r3, [pc, #268]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	4940      	ldr	r1, [pc, #256]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	600b      	str	r3, [r1, #0]
 8003dc8:	e015      	b.n	8003df6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dca:	4b3f      	ldr	r3, [pc, #252]	; (8003ec8 <HAL_RCC_OscConfig+0x2b0>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd0:	f7fd f8fe 	bl	8000fd0 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dd8:	f7fd f8fa 	bl	8000fd0 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e184      	b.n	80040f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dea:	4b36      	ldr	r3, [pc, #216]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d030      	beq.n	8003e64 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d016      	beq.n	8003e38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e0a:	4b30      	ldr	r3, [pc, #192]	; (8003ecc <HAL_RCC_OscConfig+0x2b4>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e10:	f7fd f8de 	bl	8000fd0 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e18:	f7fd f8da 	bl	8000fd0 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e164      	b.n	80040f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e2a:	4b26      	ldr	r3, [pc, #152]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0f0      	beq.n	8003e18 <HAL_RCC_OscConfig+0x200>
 8003e36:	e015      	b.n	8003e64 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e38:	4b24      	ldr	r3, [pc, #144]	; (8003ecc <HAL_RCC_OscConfig+0x2b4>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e3e:	f7fd f8c7 	bl	8000fd0 <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e46:	f7fd f8c3 	bl	8000fd0 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e14d      	b.n	80040f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e58:	4b1a      	ldr	r3, [pc, #104]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1f0      	bne.n	8003e46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 80a0 	beq.w	8003fb2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e72:	2300      	movs	r3, #0
 8003e74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e76:	4b13      	ldr	r3, [pc, #76]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10f      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e82:	2300      	movs	r3, #0
 8003e84:	60bb      	str	r3, [r7, #8]
 8003e86:	4b0f      	ldr	r3, [pc, #60]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	4a0e      	ldr	r2, [pc, #56]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e90:	6413      	str	r3, [r2, #64]	; 0x40
 8003e92:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <HAL_RCC_OscConfig+0x2ac>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9a:	60bb      	str	r3, [r7, #8]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea2:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <HAL_RCC_OscConfig+0x2b8>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d121      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eae:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <HAL_RCC_OscConfig+0x2b8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a07      	ldr	r2, [pc, #28]	; (8003ed0 <HAL_RCC_OscConfig+0x2b8>)
 8003eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eba:	f7fd f889 	bl	8000fd0 <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec0:	e011      	b.n	8003ee6 <HAL_RCC_OscConfig+0x2ce>
 8003ec2:	bf00      	nop
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	42470000 	.word	0x42470000
 8003ecc:	42470e80 	.word	0x42470e80
 8003ed0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ed4:	f7fd f87c 	bl	8000fd0 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e106      	b.n	80040f4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee6:	4b85      	ldr	r3, [pc, #532]	; (80040fc <HAL_RCC_OscConfig+0x4e4>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d106      	bne.n	8003f08 <HAL_RCC_OscConfig+0x2f0>
 8003efa:	4b81      	ldr	r3, [pc, #516]	; (8004100 <HAL_RCC_OscConfig+0x4e8>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	4a80      	ldr	r2, [pc, #512]	; (8004100 <HAL_RCC_OscConfig+0x4e8>)
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	6713      	str	r3, [r2, #112]	; 0x70
 8003f06:	e01c      	b.n	8003f42 <HAL_RCC_OscConfig+0x32a>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2b05      	cmp	r3, #5
 8003f0e:	d10c      	bne.n	8003f2a <HAL_RCC_OscConfig+0x312>
 8003f10:	4b7b      	ldr	r3, [pc, #492]	; (8004100 <HAL_RCC_OscConfig+0x4e8>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f14:	4a7a      	ldr	r2, [pc, #488]	; (8004100 <HAL_RCC_OscConfig+0x4e8>)
 8003f16:	f043 0304 	orr.w	r3, r3, #4
 8003f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f1c:	4b78      	ldr	r3, [pc, #480]	; (8004100 <HAL_RCC_OscConfig+0x4e8>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f20:	4a77      	ldr	r2, [pc, #476]	; (8004100 <HAL_RCC_OscConfig+0x4e8>)
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	6713      	str	r3, [r2, #112]	; 0x70
 8003f28:	e00b      	b.n	8003f42 <HAL_RCC_OscConfig+0x32a>
 8003f2a:	4b75      	ldr	r3, [pc, #468]	; (8004100 <HAL_RCC_OscConfig+0x4e8>)
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2e:	4a74      	ldr	r2, [pc, #464]	; (8004100 <HAL_RCC_OscConfig+0x4e8>)
 8003f30:	f023 0301 	bic.w	r3, r3, #1
 8003f34:	6713      	str	r3, [r2, #112]	; 0x70
 8003f36:	4b72      	ldr	r3, [pc, #456]	; (8004100 <HAL_RCC_OscConfig+0x4e8>)
 8003f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3a:	4a71      	ldr	r2, [pc, #452]	; (8004100 <HAL_RCC_OscConfig+0x4e8>)
 8003f3c:	f023 0304 	bic.w	r3, r3, #4
 8003f40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d015      	beq.n	8003f76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4a:	f7fd f841 	bl	8000fd0 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f50:	e00a      	b.n	8003f68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f52:	f7fd f83d 	bl	8000fd0 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e0c5      	b.n	80040f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f68:	4b65      	ldr	r3, [pc, #404]	; (8004100 <HAL_RCC_OscConfig+0x4e8>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0ee      	beq.n	8003f52 <HAL_RCC_OscConfig+0x33a>
 8003f74:	e014      	b.n	8003fa0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f76:	f7fd f82b 	bl	8000fd0 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f7c:	e00a      	b.n	8003f94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f7e:	f7fd f827 	bl	8000fd0 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e0af      	b.n	80040f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f94:	4b5a      	ldr	r3, [pc, #360]	; (8004100 <HAL_RCC_OscConfig+0x4e8>)
 8003f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1ee      	bne.n	8003f7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fa0:	7dfb      	ldrb	r3, [r7, #23]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d105      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa6:	4b56      	ldr	r3, [pc, #344]	; (8004100 <HAL_RCC_OscConfig+0x4e8>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	4a55      	ldr	r2, [pc, #340]	; (8004100 <HAL_RCC_OscConfig+0x4e8>)
 8003fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 809b 	beq.w	80040f2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fbc:	4b50      	ldr	r3, [pc, #320]	; (8004100 <HAL_RCC_OscConfig+0x4e8>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 030c 	and.w	r3, r3, #12
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d05c      	beq.n	8004082 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d141      	bne.n	8004054 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd0:	4b4c      	ldr	r3, [pc, #304]	; (8004104 <HAL_RCC_OscConfig+0x4ec>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd6:	f7fc fffb 	bl	8000fd0 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fde:	f7fc fff7 	bl	8000fd0 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e081      	b.n	80040f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff0:	4b43      	ldr	r3, [pc, #268]	; (8004100 <HAL_RCC_OscConfig+0x4e8>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1f0      	bne.n	8003fde <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	69da      	ldr	r2, [r3, #28]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	019b      	lsls	r3, r3, #6
 800400c:	431a      	orrs	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004012:	085b      	lsrs	r3, r3, #1
 8004014:	3b01      	subs	r3, #1
 8004016:	041b      	lsls	r3, r3, #16
 8004018:	431a      	orrs	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401e:	061b      	lsls	r3, r3, #24
 8004020:	4937      	ldr	r1, [pc, #220]	; (8004100 <HAL_RCC_OscConfig+0x4e8>)
 8004022:	4313      	orrs	r3, r2
 8004024:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004026:	4b37      	ldr	r3, [pc, #220]	; (8004104 <HAL_RCC_OscConfig+0x4ec>)
 8004028:	2201      	movs	r2, #1
 800402a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402c:	f7fc ffd0 	bl	8000fd0 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004034:	f7fc ffcc 	bl	8000fd0 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e056      	b.n	80040f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004046:	4b2e      	ldr	r3, [pc, #184]	; (8004100 <HAL_RCC_OscConfig+0x4e8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0f0      	beq.n	8004034 <HAL_RCC_OscConfig+0x41c>
 8004052:	e04e      	b.n	80040f2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004054:	4b2b      	ldr	r3, [pc, #172]	; (8004104 <HAL_RCC_OscConfig+0x4ec>)
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405a:	f7fc ffb9 	bl	8000fd0 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004062:	f7fc ffb5 	bl	8000fd0 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e03f      	b.n	80040f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004074:	4b22      	ldr	r3, [pc, #136]	; (8004100 <HAL_RCC_OscConfig+0x4e8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1f0      	bne.n	8004062 <HAL_RCC_OscConfig+0x44a>
 8004080:	e037      	b.n	80040f2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e032      	b.n	80040f4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800408e:	4b1c      	ldr	r3, [pc, #112]	; (8004100 <HAL_RCC_OscConfig+0x4e8>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d028      	beq.n	80040ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d121      	bne.n	80040ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d11a      	bne.n	80040ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040be:	4013      	ands	r3, r2
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040c4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d111      	bne.n	80040ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d4:	085b      	lsrs	r3, r3, #1
 80040d6:	3b01      	subs	r3, #1
 80040d8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040da:	429a      	cmp	r2, r3
 80040dc:	d107      	bne.n	80040ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d001      	beq.n	80040f2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3718      	adds	r7, #24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40007000 	.word	0x40007000
 8004100:	40023800 	.word	0x40023800
 8004104:	42470060 	.word	0x42470060

08004108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e0cc      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800411c:	4b68      	ldr	r3, [pc, #416]	; (80042c0 <HAL_RCC_ClockConfig+0x1b8>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d90c      	bls.n	8004144 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412a:	4b65      	ldr	r3, [pc, #404]	; (80042c0 <HAL_RCC_ClockConfig+0x1b8>)
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004132:	4b63      	ldr	r3, [pc, #396]	; (80042c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d001      	beq.n	8004144 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0b8      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d020      	beq.n	8004192 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800415c:	4b59      	ldr	r3, [pc, #356]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	4a58      	ldr	r2, [pc, #352]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004166:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004174:	4b53      	ldr	r3, [pc, #332]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	4a52      	ldr	r2, [pc, #328]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800417e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004180:	4b50      	ldr	r3, [pc, #320]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	494d      	ldr	r1, [pc, #308]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	4313      	orrs	r3, r2
 8004190:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d044      	beq.n	8004228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d107      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a6:	4b47      	ldr	r3, [pc, #284]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d119      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e07f      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d003      	beq.n	80041c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041c2:	2b03      	cmp	r3, #3
 80041c4:	d107      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c6:	4b3f      	ldr	r3, [pc, #252]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d109      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e06f      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d6:	4b3b      	ldr	r3, [pc, #236]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e067      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041e6:	4b37      	ldr	r3, [pc, #220]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f023 0203 	bic.w	r2, r3, #3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	4934      	ldr	r1, [pc, #208]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041f8:	f7fc feea 	bl	8000fd0 <HAL_GetTick>
 80041fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fe:	e00a      	b.n	8004216 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004200:	f7fc fee6 	bl	8000fd0 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	f241 3288 	movw	r2, #5000	; 0x1388
 800420e:	4293      	cmp	r3, r2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e04f      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004216:	4b2b      	ldr	r3, [pc, #172]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 020c 	and.w	r2, r3, #12
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	429a      	cmp	r2, r3
 8004226:	d1eb      	bne.n	8004200 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004228:	4b25      	ldr	r3, [pc, #148]	; (80042c0 <HAL_RCC_ClockConfig+0x1b8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d20c      	bcs.n	8004250 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004236:	4b22      	ldr	r3, [pc, #136]	; (80042c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800423e:	4b20      	ldr	r3, [pc, #128]	; (80042c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0307 	and.w	r3, r3, #7
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d001      	beq.n	8004250 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e032      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800425c:	4b19      	ldr	r3, [pc, #100]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	4916      	ldr	r1, [pc, #88]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	4313      	orrs	r3, r2
 800426c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d009      	beq.n	800428e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800427a:	4b12      	ldr	r3, [pc, #72]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	490e      	ldr	r1, [pc, #56]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	4313      	orrs	r3, r2
 800428c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800428e:	f000 f821 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 8004292:	4602      	mov	r2, r0
 8004294:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	091b      	lsrs	r3, r3, #4
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	490a      	ldr	r1, [pc, #40]	; (80042c8 <HAL_RCC_ClockConfig+0x1c0>)
 80042a0:	5ccb      	ldrb	r3, [r1, r3]
 80042a2:	fa22 f303 	lsr.w	r3, r2, r3
 80042a6:	4a09      	ldr	r2, [pc, #36]	; (80042cc <HAL_RCC_ClockConfig+0x1c4>)
 80042a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042aa:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <HAL_RCC_ClockConfig+0x1c8>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fc fe4a 	bl	8000f48 <HAL_InitTick>

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40023c00 	.word	0x40023c00
 80042c4:	40023800 	.word	0x40023800
 80042c8:	08007ed4 	.word	0x08007ed4
 80042cc:	20000000 	.word	0x20000000
 80042d0:	20000004 	.word	0x20000004

080042d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80042d8:	b084      	sub	sp, #16
 80042da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	607b      	str	r3, [r7, #4]
 80042e0:	2300      	movs	r3, #0
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	2300      	movs	r3, #0
 80042e6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042ec:	4b67      	ldr	r3, [pc, #412]	; (800448c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 030c 	and.w	r3, r3, #12
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d00d      	beq.n	8004314 <HAL_RCC_GetSysClockFreq+0x40>
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	f200 80bd 	bhi.w	8004478 <HAL_RCC_GetSysClockFreq+0x1a4>
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <HAL_RCC_GetSysClockFreq+0x34>
 8004302:	2b04      	cmp	r3, #4
 8004304:	d003      	beq.n	800430e <HAL_RCC_GetSysClockFreq+0x3a>
 8004306:	e0b7      	b.n	8004478 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004308:	4b61      	ldr	r3, [pc, #388]	; (8004490 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800430a:	60bb      	str	r3, [r7, #8]
       break;
 800430c:	e0b7      	b.n	800447e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800430e:	4b61      	ldr	r3, [pc, #388]	; (8004494 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004310:	60bb      	str	r3, [r7, #8]
      break;
 8004312:	e0b4      	b.n	800447e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004314:	4b5d      	ldr	r3, [pc, #372]	; (800448c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800431c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800431e:	4b5b      	ldr	r3, [pc, #364]	; (800448c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d04d      	beq.n	80043c6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800432a:	4b58      	ldr	r3, [pc, #352]	; (800448c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	099b      	lsrs	r3, r3, #6
 8004330:	461a      	mov	r2, r3
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	f240 10ff 	movw	r0, #511	; 0x1ff
 800433a:	f04f 0100 	mov.w	r1, #0
 800433e:	ea02 0800 	and.w	r8, r2, r0
 8004342:	ea03 0901 	and.w	r9, r3, r1
 8004346:	4640      	mov	r0, r8
 8004348:	4649      	mov	r1, r9
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	014b      	lsls	r3, r1, #5
 8004354:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004358:	0142      	lsls	r2, r0, #5
 800435a:	4610      	mov	r0, r2
 800435c:	4619      	mov	r1, r3
 800435e:	ebb0 0008 	subs.w	r0, r0, r8
 8004362:	eb61 0109 	sbc.w	r1, r1, r9
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	018b      	lsls	r3, r1, #6
 8004370:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004374:	0182      	lsls	r2, r0, #6
 8004376:	1a12      	subs	r2, r2, r0
 8004378:	eb63 0301 	sbc.w	r3, r3, r1
 800437c:	f04f 0000 	mov.w	r0, #0
 8004380:	f04f 0100 	mov.w	r1, #0
 8004384:	00d9      	lsls	r1, r3, #3
 8004386:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800438a:	00d0      	lsls	r0, r2, #3
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	eb12 0208 	adds.w	r2, r2, r8
 8004394:	eb43 0309 	adc.w	r3, r3, r9
 8004398:	f04f 0000 	mov.w	r0, #0
 800439c:	f04f 0100 	mov.w	r1, #0
 80043a0:	0259      	lsls	r1, r3, #9
 80043a2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80043a6:	0250      	lsls	r0, r2, #9
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4610      	mov	r0, r2
 80043ae:	4619      	mov	r1, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	461a      	mov	r2, r3
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	f7fb ff06 	bl	80001c8 <__aeabi_uldivmod>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4613      	mov	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	e04a      	b.n	800445c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043c6:	4b31      	ldr	r3, [pc, #196]	; (800448c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	099b      	lsrs	r3, r3, #6
 80043cc:	461a      	mov	r2, r3
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043d6:	f04f 0100 	mov.w	r1, #0
 80043da:	ea02 0400 	and.w	r4, r2, r0
 80043de:	ea03 0501 	and.w	r5, r3, r1
 80043e2:	4620      	mov	r0, r4
 80043e4:	4629      	mov	r1, r5
 80043e6:	f04f 0200 	mov.w	r2, #0
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	014b      	lsls	r3, r1, #5
 80043f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043f4:	0142      	lsls	r2, r0, #5
 80043f6:	4610      	mov	r0, r2
 80043f8:	4619      	mov	r1, r3
 80043fa:	1b00      	subs	r0, r0, r4
 80043fc:	eb61 0105 	sbc.w	r1, r1, r5
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	018b      	lsls	r3, r1, #6
 800440a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800440e:	0182      	lsls	r2, r0, #6
 8004410:	1a12      	subs	r2, r2, r0
 8004412:	eb63 0301 	sbc.w	r3, r3, r1
 8004416:	f04f 0000 	mov.w	r0, #0
 800441a:	f04f 0100 	mov.w	r1, #0
 800441e:	00d9      	lsls	r1, r3, #3
 8004420:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004424:	00d0      	lsls	r0, r2, #3
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	1912      	adds	r2, r2, r4
 800442c:	eb45 0303 	adc.w	r3, r5, r3
 8004430:	f04f 0000 	mov.w	r0, #0
 8004434:	f04f 0100 	mov.w	r1, #0
 8004438:	0299      	lsls	r1, r3, #10
 800443a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800443e:	0290      	lsls	r0, r2, #10
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	4610      	mov	r0, r2
 8004446:	4619      	mov	r1, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	461a      	mov	r2, r3
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	f7fb feba 	bl	80001c8 <__aeabi_uldivmod>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4613      	mov	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800445c:	4b0b      	ldr	r3, [pc, #44]	; (800448c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	0c1b      	lsrs	r3, r3, #16
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	3301      	adds	r3, #1
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	fbb2 f3f3 	udiv	r3, r2, r3
 8004474:	60bb      	str	r3, [r7, #8]
      break;
 8004476:	e002      	b.n	800447e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004478:	4b05      	ldr	r3, [pc, #20]	; (8004490 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800447a:	60bb      	str	r3, [r7, #8]
      break;
 800447c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800447e:	68bb      	ldr	r3, [r7, #8]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800448a:	bf00      	nop
 800448c:	40023800 	.word	0x40023800
 8004490:	00f42400 	.word	0x00f42400
 8004494:	007a1200 	.word	0x007a1200

08004498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800449c:	4b03      	ldr	r3, [pc, #12]	; (80044ac <HAL_RCC_GetHCLKFreq+0x14>)
 800449e:	681b      	ldr	r3, [r3, #0]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	20000000 	.word	0x20000000

080044b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044b4:	f7ff fff0 	bl	8004498 <HAL_RCC_GetHCLKFreq>
 80044b8:	4602      	mov	r2, r0
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	0a9b      	lsrs	r3, r3, #10
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	4903      	ldr	r1, [pc, #12]	; (80044d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044c6:	5ccb      	ldrb	r3, [r1, r3]
 80044c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40023800 	.word	0x40023800
 80044d4:	08007ee4 	.word	0x08007ee4

080044d8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d105      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d035      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004500:	4b62      	ldr	r3, [pc, #392]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004506:	f7fc fd63 	bl	8000fd0 <HAL_GetTick>
 800450a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800450c:	e008      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800450e:	f7fc fd5f 	bl	8000fd0 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e0b0      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004520:	4b5b      	ldr	r3, [pc, #364]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1f0      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	019a      	lsls	r2, r3, #6
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	071b      	lsls	r3, r3, #28
 8004538:	4955      	ldr	r1, [pc, #340]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800453a:	4313      	orrs	r3, r2
 800453c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004540:	4b52      	ldr	r3, [pc, #328]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004542:	2201      	movs	r2, #1
 8004544:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004546:	f7fc fd43 	bl	8000fd0 <HAL_GetTick>
 800454a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800454c:	e008      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800454e:	f7fc fd3f 	bl	8000fd0 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d901      	bls.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e090      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004560:	4b4b      	ldr	r3, [pc, #300]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0f0      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 8083 	beq.w	8004680 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800457a:	2300      	movs	r3, #0
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	4b44      	ldr	r3, [pc, #272]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	4a43      	ldr	r2, [pc, #268]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004588:	6413      	str	r3, [r2, #64]	; 0x40
 800458a:	4b41      	ldr	r3, [pc, #260]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004596:	4b3f      	ldr	r3, [pc, #252]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a3e      	ldr	r2, [pc, #248]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800459c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045a2:	f7fc fd15 	bl	8000fd0 <HAL_GetTick>
 80045a6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80045aa:	f7fc fd11 	bl	8000fd0 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e062      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045bc:	4b35      	ldr	r3, [pc, #212]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045c8:	4b31      	ldr	r3, [pc, #196]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d02f      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d028      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045e6:	4b2a      	ldr	r3, [pc, #168]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045f0:	4b29      	ldr	r3, [pc, #164]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80045f2:	2201      	movs	r2, #1
 80045f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045f6:	4b28      	ldr	r3, [pc, #160]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80045fc:	4a24      	ldr	r2, [pc, #144]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004602:	4b23      	ldr	r3, [pc, #140]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b01      	cmp	r3, #1
 800460c:	d114      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800460e:	f7fc fcdf 	bl	8000fd0 <HAL_GetTick>
 8004612:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004614:	e00a      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004616:	f7fc fcdb 	bl	8000fd0 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	f241 3288 	movw	r2, #5000	; 0x1388
 8004624:	4293      	cmp	r3, r2
 8004626:	d901      	bls.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e02a      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462c:	4b18      	ldr	r3, [pc, #96]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800462e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0ee      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004640:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004644:	d10d      	bne.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004646:	4b12      	ldr	r3, [pc, #72]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800465a:	490d      	ldr	r1, [pc, #52]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800465c:	4313      	orrs	r3, r2
 800465e:	608b      	str	r3, [r1, #8]
 8004660:	e005      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004662:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	4a0a      	ldr	r2, [pc, #40]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004668:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800466c:	6093      	str	r3, [r2, #8]
 800466e:	4b08      	ldr	r3, [pc, #32]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004670:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800467a:	4905      	ldr	r1, [pc, #20]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800467c:	4313      	orrs	r3, r2
 800467e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	42470068 	.word	0x42470068
 8004690:	40023800 	.word	0x40023800
 8004694:	40007000 	.word	0x40007000
 8004698:	42470e40 	.word	0x42470e40

0800469c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800469c:	b480      	push	{r7}
 800469e:	b087      	sub	sp, #28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d13e      	bne.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80046ba:	4b23      	ldr	r3, [pc, #140]	; (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d005      	beq.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d12f      	bne.n	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80046d0:	4b1e      	ldr	r3, [pc, #120]	; (800474c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046d2:	617b      	str	r3, [r7, #20]
          break;
 80046d4:	e02f      	b.n	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80046d6:	4b1c      	ldr	r3, [pc, #112]	; (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046e2:	d108      	bne.n	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046e4:	4b18      	ldr	r3, [pc, #96]	; (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046ec:	4a18      	ldr	r2, [pc, #96]	; (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80046ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f2:	613b      	str	r3, [r7, #16]
 80046f4:	e007      	b.n	8004706 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046f6:	4b14      	ldr	r3, [pc, #80]	; (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046fe:	4a15      	ldr	r2, [pc, #84]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004700:	fbb2 f3f3 	udiv	r3, r2, r3
 8004704:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004706:	4b10      	ldr	r3, [pc, #64]	; (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004708:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800470c:	099b      	lsrs	r3, r3, #6
 800470e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	fb02 f303 	mul.w	r3, r2, r3
 8004718:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800471a:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800471c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004720:	0f1b      	lsrs	r3, r3, #28
 8004722:	f003 0307 	and.w	r3, r3, #7
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	fbb2 f3f3 	udiv	r3, r2, r3
 800472c:	617b      	str	r3, [r7, #20]
          break;
 800472e:	e002      	b.n	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]
          break;
 8004734:	bf00      	nop
        }
      }
      break;
 8004736:	bf00      	nop
    }
  }
  return frequency;
 8004738:	697b      	ldr	r3, [r7, #20]
}
 800473a:	4618      	mov	r0, r3
 800473c:	371c      	adds	r7, #28
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40023800 	.word	0x40023800
 800474c:	00bb8000 	.word	0x00bb8000
 8004750:	007a1200 	.word	0x007a1200
 8004754:	00f42400 	.word	0x00f42400

08004758 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e07b      	b.n	8004862 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	2b00      	cmp	r3, #0
 8004770:	d108      	bne.n	8004784 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800477a:	d009      	beq.n	8004790 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	61da      	str	r2, [r3, #28]
 8004782:	e005      	b.n	8004790 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d106      	bne.n	80047b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7fc fa4a 	bl	8000c44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047d8:	431a      	orrs	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	431a      	orrs	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004814:	ea42 0103 	orr.w	r1, r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	0c1b      	lsrs	r3, r3, #16
 800482e:	f003 0104 	and.w	r1, r3, #4
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	f003 0210 	and.w	r2, r3, #16
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69da      	ldr	r2, [r3, #28]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004850:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b082      	sub	sp, #8
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e041      	b.n	8004900 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	d106      	bne.n	8004896 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7fc fa1f 	bl	8000cd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2202      	movs	r2, #2
 800489a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3304      	adds	r3, #4
 80048a6:	4619      	mov	r1, r3
 80048a8:	4610      	mov	r0, r2
 80048aa:	f000 fc0b 	bl	80050c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e041      	b.n	800499e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d106      	bne.n	8004934 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f839 	bl	80049a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3304      	adds	r3, #4
 8004944:	4619      	mov	r1, r3
 8004946:	4610      	mov	r0, r2
 8004948:	f000 fbbc 	bl	80050c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
	...

080049bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d109      	bne.n	80049e0 <HAL_TIM_PWM_Start+0x24>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	bf14      	ite	ne
 80049d8:	2301      	movne	r3, #1
 80049da:	2300      	moveq	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	e022      	b.n	8004a26 <HAL_TIM_PWM_Start+0x6a>
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d109      	bne.n	80049fa <HAL_TIM_PWM_Start+0x3e>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	bf14      	ite	ne
 80049f2:	2301      	movne	r3, #1
 80049f4:	2300      	moveq	r3, #0
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	e015      	b.n	8004a26 <HAL_TIM_PWM_Start+0x6a>
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d109      	bne.n	8004a14 <HAL_TIM_PWM_Start+0x58>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	bf14      	ite	ne
 8004a0c:	2301      	movne	r3, #1
 8004a0e:	2300      	moveq	r3, #0
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	e008      	b.n	8004a26 <HAL_TIM_PWM_Start+0x6a>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	bf14      	ite	ne
 8004a20:	2301      	movne	r3, #1
 8004a22:	2300      	moveq	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e07c      	b.n	8004b28 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d104      	bne.n	8004a3e <HAL_TIM_PWM_Start+0x82>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a3c:	e013      	b.n	8004a66 <HAL_TIM_PWM_Start+0xaa>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	d104      	bne.n	8004a4e <HAL_TIM_PWM_Start+0x92>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a4c:	e00b      	b.n	8004a66 <HAL_TIM_PWM_Start+0xaa>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d104      	bne.n	8004a5e <HAL_TIM_PWM_Start+0xa2>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a5c:	e003      	b.n	8004a66 <HAL_TIM_PWM_Start+0xaa>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2202      	movs	r2, #2
 8004a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	6839      	ldr	r1, [r7, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fe12 	bl	8005698 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a2d      	ldr	r2, [pc, #180]	; (8004b30 <HAL_TIM_PWM_Start+0x174>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d004      	beq.n	8004a88 <HAL_TIM_PWM_Start+0xcc>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a2c      	ldr	r2, [pc, #176]	; (8004b34 <HAL_TIM_PWM_Start+0x178>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d101      	bne.n	8004a8c <HAL_TIM_PWM_Start+0xd0>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e000      	b.n	8004a8e <HAL_TIM_PWM_Start+0xd2>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d007      	beq.n	8004aa2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004aa0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a22      	ldr	r2, [pc, #136]	; (8004b30 <HAL_TIM_PWM_Start+0x174>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d022      	beq.n	8004af2 <HAL_TIM_PWM_Start+0x136>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab4:	d01d      	beq.n	8004af2 <HAL_TIM_PWM_Start+0x136>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a1f      	ldr	r2, [pc, #124]	; (8004b38 <HAL_TIM_PWM_Start+0x17c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d018      	beq.n	8004af2 <HAL_TIM_PWM_Start+0x136>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a1d      	ldr	r2, [pc, #116]	; (8004b3c <HAL_TIM_PWM_Start+0x180>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d013      	beq.n	8004af2 <HAL_TIM_PWM_Start+0x136>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a1c      	ldr	r2, [pc, #112]	; (8004b40 <HAL_TIM_PWM_Start+0x184>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00e      	beq.n	8004af2 <HAL_TIM_PWM_Start+0x136>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a16      	ldr	r2, [pc, #88]	; (8004b34 <HAL_TIM_PWM_Start+0x178>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d009      	beq.n	8004af2 <HAL_TIM_PWM_Start+0x136>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a18      	ldr	r2, [pc, #96]	; (8004b44 <HAL_TIM_PWM_Start+0x188>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d004      	beq.n	8004af2 <HAL_TIM_PWM_Start+0x136>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a16      	ldr	r2, [pc, #88]	; (8004b48 <HAL_TIM_PWM_Start+0x18c>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d111      	bne.n	8004b16 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b06      	cmp	r3, #6
 8004b02:	d010      	beq.n	8004b26 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0201 	orr.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b14:	e007      	b.n	8004b26 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0201 	orr.w	r2, r2, #1
 8004b24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40010000 	.word	0x40010000
 8004b34:	40010400 	.word	0x40010400
 8004b38:	40000400 	.word	0x40000400
 8004b3c:	40000800 	.word	0x40000800
 8004b40:	40000c00 	.word	0x40000c00
 8004b44:	40014000 	.word	0x40014000
 8004b48:	40001800 	.word	0x40001800

08004b4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d122      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d11b      	bne.n	8004ba8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f06f 0202 	mvn.w	r2, #2
 8004b78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fa7a 	bl	8005088 <HAL_TIM_IC_CaptureCallback>
 8004b94:	e005      	b.n	8004ba2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 fa6c 	bl	8005074 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 fa7d 	bl	800509c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d122      	bne.n	8004bfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	2b04      	cmp	r3, #4
 8004bc2:	d11b      	bne.n	8004bfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0204 	mvn.w	r2, #4
 8004bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fa50 	bl	8005088 <HAL_TIM_IC_CaptureCallback>
 8004be8:	e005      	b.n	8004bf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fa42 	bl	8005074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 fa53 	bl	800509c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d122      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f003 0308 	and.w	r3, r3, #8
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d11b      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0208 	mvn.w	r2, #8
 8004c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2204      	movs	r2, #4
 8004c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 fa26 	bl	8005088 <HAL_TIM_IC_CaptureCallback>
 8004c3c:	e005      	b.n	8004c4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 fa18 	bl	8005074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 fa29 	bl	800509c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	f003 0310 	and.w	r3, r3, #16
 8004c5a:	2b10      	cmp	r3, #16
 8004c5c:	d122      	bne.n	8004ca4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f003 0310 	and.w	r3, r3, #16
 8004c68:	2b10      	cmp	r3, #16
 8004c6a:	d11b      	bne.n	8004ca4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f06f 0210 	mvn.w	r2, #16
 8004c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2208      	movs	r2, #8
 8004c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f9fc 	bl	8005088 <HAL_TIM_IC_CaptureCallback>
 8004c90:	e005      	b.n	8004c9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f9ee 	bl	8005074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f9ff 	bl	800509c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d10e      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d107      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f06f 0201 	mvn.w	r2, #1
 8004cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f9c8 	bl	8005060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cda:	2b80      	cmp	r3, #128	; 0x80
 8004cdc:	d10e      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce8:	2b80      	cmp	r3, #128	; 0x80
 8004cea:	d107      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fd7a 	bl	80057f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d06:	2b40      	cmp	r3, #64	; 0x40
 8004d08:	d10e      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d14:	2b40      	cmp	r3, #64	; 0x40
 8004d16:	d107      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f9c4 	bl	80050b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f003 0320 	and.w	r3, r3, #32
 8004d32:	2b20      	cmp	r3, #32
 8004d34:	d10e      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f003 0320 	and.w	r3, r3, #32
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	d107      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0220 	mvn.w	r2, #32
 8004d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 fd44 	bl	80057dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d54:	bf00      	nop
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d101      	bne.n	8004d76 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d72:	2302      	movs	r3, #2
 8004d74:	e0ac      	b.n	8004ed0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b0c      	cmp	r3, #12
 8004d82:	f200 809f 	bhi.w	8004ec4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004d86:	a201      	add	r2, pc, #4	; (adr r2, 8004d8c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8c:	08004dc1 	.word	0x08004dc1
 8004d90:	08004ec5 	.word	0x08004ec5
 8004d94:	08004ec5 	.word	0x08004ec5
 8004d98:	08004ec5 	.word	0x08004ec5
 8004d9c:	08004e01 	.word	0x08004e01
 8004da0:	08004ec5 	.word	0x08004ec5
 8004da4:	08004ec5 	.word	0x08004ec5
 8004da8:	08004ec5 	.word	0x08004ec5
 8004dac:	08004e43 	.word	0x08004e43
 8004db0:	08004ec5 	.word	0x08004ec5
 8004db4:	08004ec5 	.word	0x08004ec5
 8004db8:	08004ec5 	.word	0x08004ec5
 8004dbc:	08004e83 	.word	0x08004e83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68b9      	ldr	r1, [r7, #8]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fa1c 	bl	8005204 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699a      	ldr	r2, [r3, #24]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 0208 	orr.w	r2, r2, #8
 8004dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699a      	ldr	r2, [r3, #24]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0204 	bic.w	r2, r2, #4
 8004dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6999      	ldr	r1, [r3, #24]
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	691a      	ldr	r2, [r3, #16]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	619a      	str	r2, [r3, #24]
      break;
 8004dfe:	e062      	b.n	8004ec6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68b9      	ldr	r1, [r7, #8]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fa6c 	bl	80052e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699a      	ldr	r2, [r3, #24]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6999      	ldr	r1, [r3, #24]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	021a      	lsls	r2, r3, #8
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	619a      	str	r2, [r3, #24]
      break;
 8004e40:	e041      	b.n	8004ec6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68b9      	ldr	r1, [r7, #8]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 fac1 	bl	80053d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69da      	ldr	r2, [r3, #28]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f042 0208 	orr.w	r2, r2, #8
 8004e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69da      	ldr	r2, [r3, #28]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 0204 	bic.w	r2, r2, #4
 8004e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	69d9      	ldr	r1, [r3, #28]
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	691a      	ldr	r2, [r3, #16]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	61da      	str	r2, [r3, #28]
      break;
 8004e80:	e021      	b.n	8004ec6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68b9      	ldr	r1, [r7, #8]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fb15 	bl	80054b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	69da      	ldr	r2, [r3, #28]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69da      	ldr	r2, [r3, #28]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	69d9      	ldr	r1, [r3, #28]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	021a      	lsls	r2, r3, #8
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	61da      	str	r2, [r3, #28]
      break;
 8004ec2:	e000      	b.n	8004ec6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004ec4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d101      	bne.n	8004ef0 <HAL_TIM_ConfigClockSource+0x18>
 8004eec:	2302      	movs	r3, #2
 8004eee:	e0b3      	b.n	8005058 <HAL_TIM_ConfigClockSource+0x180>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f16:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f28:	d03e      	beq.n	8004fa8 <HAL_TIM_ConfigClockSource+0xd0>
 8004f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f2e:	f200 8087 	bhi.w	8005040 <HAL_TIM_ConfigClockSource+0x168>
 8004f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f36:	f000 8085 	beq.w	8005044 <HAL_TIM_ConfigClockSource+0x16c>
 8004f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f3e:	d87f      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x168>
 8004f40:	2b70      	cmp	r3, #112	; 0x70
 8004f42:	d01a      	beq.n	8004f7a <HAL_TIM_ConfigClockSource+0xa2>
 8004f44:	2b70      	cmp	r3, #112	; 0x70
 8004f46:	d87b      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x168>
 8004f48:	2b60      	cmp	r3, #96	; 0x60
 8004f4a:	d050      	beq.n	8004fee <HAL_TIM_ConfigClockSource+0x116>
 8004f4c:	2b60      	cmp	r3, #96	; 0x60
 8004f4e:	d877      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x168>
 8004f50:	2b50      	cmp	r3, #80	; 0x50
 8004f52:	d03c      	beq.n	8004fce <HAL_TIM_ConfigClockSource+0xf6>
 8004f54:	2b50      	cmp	r3, #80	; 0x50
 8004f56:	d873      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x168>
 8004f58:	2b40      	cmp	r3, #64	; 0x40
 8004f5a:	d058      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x136>
 8004f5c:	2b40      	cmp	r3, #64	; 0x40
 8004f5e:	d86f      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x168>
 8004f60:	2b30      	cmp	r3, #48	; 0x30
 8004f62:	d064      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x156>
 8004f64:	2b30      	cmp	r3, #48	; 0x30
 8004f66:	d86b      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x168>
 8004f68:	2b20      	cmp	r3, #32
 8004f6a:	d060      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x156>
 8004f6c:	2b20      	cmp	r3, #32
 8004f6e:	d867      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x168>
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d05c      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x156>
 8004f74:	2b10      	cmp	r3, #16
 8004f76:	d05a      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004f78:	e062      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	6899      	ldr	r1, [r3, #8]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f000 fb65 	bl	8005658 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f9c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	609a      	str	r2, [r3, #8]
      break;
 8004fa6:	e04e      	b.n	8005046 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6818      	ldr	r0, [r3, #0]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	6899      	ldr	r1, [r3, #8]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f000 fb4e 	bl	8005658 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689a      	ldr	r2, [r3, #8]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fca:	609a      	str	r2, [r3, #8]
      break;
 8004fcc:	e03b      	b.n	8005046 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6818      	ldr	r0, [r3, #0]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	6859      	ldr	r1, [r3, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	f000 fac2 	bl	8005564 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2150      	movs	r1, #80	; 0x50
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fb1b 	bl	8005622 <TIM_ITRx_SetConfig>
      break;
 8004fec:	e02b      	b.n	8005046 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6818      	ldr	r0, [r3, #0]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	6859      	ldr	r1, [r3, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f000 fae1 	bl	80055c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2160      	movs	r1, #96	; 0x60
 8005006:	4618      	mov	r0, r3
 8005008:	f000 fb0b 	bl	8005622 <TIM_ITRx_SetConfig>
      break;
 800500c:	e01b      	b.n	8005046 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	6859      	ldr	r1, [r3, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	461a      	mov	r2, r3
 800501c:	f000 faa2 	bl	8005564 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2140      	movs	r1, #64	; 0x40
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fafb 	bl	8005622 <TIM_ITRx_SetConfig>
      break;
 800502c:	e00b      	b.n	8005046 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4619      	mov	r1, r3
 8005038:	4610      	mov	r0, r2
 800503a:	f000 faf2 	bl	8005622 <TIM_ITRx_SetConfig>
        break;
 800503e:	e002      	b.n	8005046 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005040:	bf00      	nop
 8005042:	e000      	b.n	8005046 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005044:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a40      	ldr	r2, [pc, #256]	; (80051d8 <TIM_Base_SetConfig+0x114>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d013      	beq.n	8005104 <TIM_Base_SetConfig+0x40>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e2:	d00f      	beq.n	8005104 <TIM_Base_SetConfig+0x40>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a3d      	ldr	r2, [pc, #244]	; (80051dc <TIM_Base_SetConfig+0x118>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00b      	beq.n	8005104 <TIM_Base_SetConfig+0x40>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a3c      	ldr	r2, [pc, #240]	; (80051e0 <TIM_Base_SetConfig+0x11c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d007      	beq.n	8005104 <TIM_Base_SetConfig+0x40>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a3b      	ldr	r2, [pc, #236]	; (80051e4 <TIM_Base_SetConfig+0x120>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d003      	beq.n	8005104 <TIM_Base_SetConfig+0x40>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a3a      	ldr	r2, [pc, #232]	; (80051e8 <TIM_Base_SetConfig+0x124>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d108      	bne.n	8005116 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a2f      	ldr	r2, [pc, #188]	; (80051d8 <TIM_Base_SetConfig+0x114>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d02b      	beq.n	8005176 <TIM_Base_SetConfig+0xb2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005124:	d027      	beq.n	8005176 <TIM_Base_SetConfig+0xb2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a2c      	ldr	r2, [pc, #176]	; (80051dc <TIM_Base_SetConfig+0x118>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d023      	beq.n	8005176 <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a2b      	ldr	r2, [pc, #172]	; (80051e0 <TIM_Base_SetConfig+0x11c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d01f      	beq.n	8005176 <TIM_Base_SetConfig+0xb2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a2a      	ldr	r2, [pc, #168]	; (80051e4 <TIM_Base_SetConfig+0x120>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d01b      	beq.n	8005176 <TIM_Base_SetConfig+0xb2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a29      	ldr	r2, [pc, #164]	; (80051e8 <TIM_Base_SetConfig+0x124>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d017      	beq.n	8005176 <TIM_Base_SetConfig+0xb2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a28      	ldr	r2, [pc, #160]	; (80051ec <TIM_Base_SetConfig+0x128>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d013      	beq.n	8005176 <TIM_Base_SetConfig+0xb2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a27      	ldr	r2, [pc, #156]	; (80051f0 <TIM_Base_SetConfig+0x12c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00f      	beq.n	8005176 <TIM_Base_SetConfig+0xb2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a26      	ldr	r2, [pc, #152]	; (80051f4 <TIM_Base_SetConfig+0x130>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00b      	beq.n	8005176 <TIM_Base_SetConfig+0xb2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a25      	ldr	r2, [pc, #148]	; (80051f8 <TIM_Base_SetConfig+0x134>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d007      	beq.n	8005176 <TIM_Base_SetConfig+0xb2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a24      	ldr	r2, [pc, #144]	; (80051fc <TIM_Base_SetConfig+0x138>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d003      	beq.n	8005176 <TIM_Base_SetConfig+0xb2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a23      	ldr	r2, [pc, #140]	; (8005200 <TIM_Base_SetConfig+0x13c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d108      	bne.n	8005188 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800517c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4313      	orrs	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	689a      	ldr	r2, [r3, #8]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a0a      	ldr	r2, [pc, #40]	; (80051d8 <TIM_Base_SetConfig+0x114>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d003      	beq.n	80051bc <TIM_Base_SetConfig+0xf8>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a0c      	ldr	r2, [pc, #48]	; (80051e8 <TIM_Base_SetConfig+0x124>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d103      	bne.n	80051c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	615a      	str	r2, [r3, #20]
}
 80051ca:	bf00      	nop
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	40010000 	.word	0x40010000
 80051dc:	40000400 	.word	0x40000400
 80051e0:	40000800 	.word	0x40000800
 80051e4:	40000c00 	.word	0x40000c00
 80051e8:	40010400 	.word	0x40010400
 80051ec:	40014000 	.word	0x40014000
 80051f0:	40014400 	.word	0x40014400
 80051f4:	40014800 	.word	0x40014800
 80051f8:	40001800 	.word	0x40001800
 80051fc:	40001c00 	.word	0x40001c00
 8005200:	40002000 	.word	0x40002000

08005204 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005204:	b480      	push	{r7}
 8005206:	b087      	sub	sp, #28
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	f023 0201 	bic.w	r2, r3, #1
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0303 	bic.w	r3, r3, #3
 800523a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4313      	orrs	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f023 0302 	bic.w	r3, r3, #2
 800524c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	4313      	orrs	r3, r2
 8005256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a20      	ldr	r2, [pc, #128]	; (80052dc <TIM_OC1_SetConfig+0xd8>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d003      	beq.n	8005268 <TIM_OC1_SetConfig+0x64>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a1f      	ldr	r2, [pc, #124]	; (80052e0 <TIM_OC1_SetConfig+0xdc>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d10c      	bne.n	8005282 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f023 0308 	bic.w	r3, r3, #8
 800526e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	4313      	orrs	r3, r2
 8005278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f023 0304 	bic.w	r3, r3, #4
 8005280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a15      	ldr	r2, [pc, #84]	; (80052dc <TIM_OC1_SetConfig+0xd8>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d003      	beq.n	8005292 <TIM_OC1_SetConfig+0x8e>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a14      	ldr	r2, [pc, #80]	; (80052e0 <TIM_OC1_SetConfig+0xdc>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d111      	bne.n	80052b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	621a      	str	r2, [r3, #32]
}
 80052d0:	bf00      	nop
 80052d2:	371c      	adds	r7, #28
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	40010000 	.word	0x40010000
 80052e0:	40010400 	.word	0x40010400

080052e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	f023 0210 	bic.w	r2, r3, #16
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800531a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	021b      	lsls	r3, r3, #8
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	4313      	orrs	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f023 0320 	bic.w	r3, r3, #32
 800532e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4313      	orrs	r3, r2
 800533a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a22      	ldr	r2, [pc, #136]	; (80053c8 <TIM_OC2_SetConfig+0xe4>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d003      	beq.n	800534c <TIM_OC2_SetConfig+0x68>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a21      	ldr	r2, [pc, #132]	; (80053cc <TIM_OC2_SetConfig+0xe8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d10d      	bne.n	8005368 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005352:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4313      	orrs	r3, r2
 800535e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005366:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a17      	ldr	r2, [pc, #92]	; (80053c8 <TIM_OC2_SetConfig+0xe4>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d003      	beq.n	8005378 <TIM_OC2_SetConfig+0x94>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a16      	ldr	r2, [pc, #88]	; (80053cc <TIM_OC2_SetConfig+0xe8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d113      	bne.n	80053a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800537e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005386:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	4313      	orrs	r3, r2
 800539e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	621a      	str	r2, [r3, #32]
}
 80053ba:	bf00      	nop
 80053bc:	371c      	adds	r7, #28
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40010000 	.word	0x40010000
 80053cc:	40010400 	.word	0x40010400

080053d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0303 	bic.w	r3, r3, #3
 8005406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	021b      	lsls	r3, r3, #8
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	4313      	orrs	r3, r2
 8005424:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a21      	ldr	r2, [pc, #132]	; (80054b0 <TIM_OC3_SetConfig+0xe0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d003      	beq.n	8005436 <TIM_OC3_SetConfig+0x66>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a20      	ldr	r2, [pc, #128]	; (80054b4 <TIM_OC3_SetConfig+0xe4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d10d      	bne.n	8005452 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800543c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	021b      	lsls	r3, r3, #8
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	4313      	orrs	r3, r2
 8005448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a16      	ldr	r2, [pc, #88]	; (80054b0 <TIM_OC3_SetConfig+0xe0>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d003      	beq.n	8005462 <TIM_OC3_SetConfig+0x92>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a15      	ldr	r2, [pc, #84]	; (80054b4 <TIM_OC3_SetConfig+0xe4>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d113      	bne.n	800548a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005468:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005470:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	4313      	orrs	r3, r2
 8005488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	621a      	str	r2, [r3, #32]
}
 80054a4:	bf00      	nop
 80054a6:	371c      	adds	r7, #28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	40010000 	.word	0x40010000
 80054b4:	40010400 	.word	0x40010400

080054b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	021b      	lsls	r3, r3, #8
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005502:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	031b      	lsls	r3, r3, #12
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a12      	ldr	r2, [pc, #72]	; (800555c <TIM_OC4_SetConfig+0xa4>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d003      	beq.n	8005520 <TIM_OC4_SetConfig+0x68>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a11      	ldr	r2, [pc, #68]	; (8005560 <TIM_OC4_SetConfig+0xa8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d109      	bne.n	8005534 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005526:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	019b      	lsls	r3, r3, #6
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	4313      	orrs	r3, r2
 8005532:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	621a      	str	r2, [r3, #32]
}
 800554e:	bf00      	nop
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40010000 	.word	0x40010000
 8005560:	40010400 	.word	0x40010400

08005564 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005564:	b480      	push	{r7}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	f023 0201 	bic.w	r2, r3, #1
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800558e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	011b      	lsls	r3, r3, #4
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	4313      	orrs	r3, r2
 8005598:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f023 030a 	bic.w	r3, r3, #10
 80055a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	621a      	str	r2, [r3, #32]
}
 80055b6:	bf00      	nop
 80055b8:	371c      	adds	r7, #28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b087      	sub	sp, #28
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	60f8      	str	r0, [r7, #12]
 80055ca:	60b9      	str	r1, [r7, #8]
 80055cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	f023 0210 	bic.w	r2, r3, #16
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	031b      	lsls	r3, r3, #12
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	011b      	lsls	r3, r3, #4
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	621a      	str	r2, [r3, #32]
}
 8005616:	bf00      	nop
 8005618:	371c      	adds	r7, #28
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005622:	b480      	push	{r7}
 8005624:	b085      	sub	sp, #20
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005638:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4313      	orrs	r3, r2
 8005640:	f043 0307 	orr.w	r3, r3, #7
 8005644:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	609a      	str	r2, [r3, #8]
}
 800564c:	bf00      	nop
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
 8005664:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005672:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	021a      	lsls	r2, r3, #8
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	431a      	orrs	r2, r3
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	4313      	orrs	r3, r2
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	4313      	orrs	r3, r2
 8005684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	609a      	str	r2, [r3, #8]
}
 800568c:	bf00      	nop
 800568e:	371c      	adds	r7, #28
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	f003 031f 	and.w	r3, r3, #31
 80056aa:	2201      	movs	r2, #1
 80056ac:	fa02 f303 	lsl.w	r3, r2, r3
 80056b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6a1a      	ldr	r2, [r3, #32]
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	43db      	mvns	r3, r3
 80056ba:	401a      	ands	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6a1a      	ldr	r2, [r3, #32]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f003 031f 	and.w	r3, r3, #31
 80056ca:	6879      	ldr	r1, [r7, #4]
 80056cc:	fa01 f303 	lsl.w	r3, r1, r3
 80056d0:	431a      	orrs	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	621a      	str	r2, [r3, #32]
}
 80056d6:	bf00      	nop
 80056d8:	371c      	adds	r7, #28
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
	...

080056e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d101      	bne.n	80056fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056f8:	2302      	movs	r3, #2
 80056fa:	e05a      	b.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005722:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a21      	ldr	r2, [pc, #132]	; (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d022      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005748:	d01d      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a1d      	ldr	r2, [pc, #116]	; (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d018      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a1b      	ldr	r2, [pc, #108]	; (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d013      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a1a      	ldr	r2, [pc, #104]	; (80057cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00e      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a18      	ldr	r2, [pc, #96]	; (80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d009      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a17      	ldr	r2, [pc, #92]	; (80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d004      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a15      	ldr	r2, [pc, #84]	; (80057d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d10c      	bne.n	80057a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800578c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	4313      	orrs	r3, r2
 8005796:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	40010000 	.word	0x40010000
 80057c4:	40000400 	.word	0x40000400
 80057c8:	40000800 	.word	0x40000800
 80057cc:	40000c00 	.word	0x40000c00
 80057d0:	40010400 	.word	0x40010400
 80057d4:	40014000 	.word	0x40014000
 80057d8:	40001800 	.word	0x40001800

080057dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005804:	b084      	sub	sp, #16
 8005806:	b580      	push	{r7, lr}
 8005808:	b084      	sub	sp, #16
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
 800580e:	f107 001c 	add.w	r0, r7, #28
 8005812:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005818:	2b01      	cmp	r3, #1
 800581a:	d122      	bne.n	8005862 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005820:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005846:	2b01      	cmp	r3, #1
 8005848:	d105      	bne.n	8005856 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f94a 	bl	8005af0 <USB_CoreReset>
 800585c:	4603      	mov	r3, r0
 800585e:	73fb      	strb	r3, [r7, #15]
 8005860:	e01a      	b.n	8005898 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f93e 	bl	8005af0 <USB_CoreReset>
 8005874:	4603      	mov	r3, r0
 8005876:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800587a:	2b00      	cmp	r3, #0
 800587c:	d106      	bne.n	800588c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005882:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	639a      	str	r2, [r3, #56]	; 0x38
 800588a:	e005      	b.n	8005898 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005890:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589a:	2b01      	cmp	r3, #1
 800589c:	d10b      	bne.n	80058b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f043 0206 	orr.w	r2, r3, #6
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f043 0220 	orr.w	r2, r3, #32
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058c2:	b004      	add	sp, #16
 80058c4:	4770      	bx	lr

080058c6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f043 0201 	orr.w	r2, r3, #1
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f023 0201 	bic.w	r2, r3, #1
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b082      	sub	sp, #8
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	460b      	mov	r3, r1
 8005914:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005922:	78fb      	ldrb	r3, [r7, #3]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d106      	bne.n	8005936 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	60da      	str	r2, [r3, #12]
 8005934:	e00b      	b.n	800594e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005936:	78fb      	ldrb	r3, [r7, #3]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d106      	bne.n	800594a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	60da      	str	r2, [r3, #12]
 8005948:	e001      	b.n	800594e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e003      	b.n	8005956 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800594e:	2032      	movs	r0, #50	; 0x32
 8005950:	f7fb fb4a 	bl	8000fe8 <HAL_Delay>

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
	...

08005960 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	019b      	lsls	r3, r3, #6
 8005972:	f043 0220 	orr.w	r2, r3, #32
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	3301      	adds	r3, #1
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4a09      	ldr	r2, [pc, #36]	; (80059a8 <USB_FlushTxFifo+0x48>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d901      	bls.n	800598c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e006      	b.n	800599a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	f003 0320 	and.w	r3, r3, #32
 8005994:	2b20      	cmp	r3, #32
 8005996:	d0f0      	beq.n	800597a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	00030d40 	.word	0x00030d40

080059ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80059b4:	2300      	movs	r3, #0
 80059b6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2210      	movs	r2, #16
 80059bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	3301      	adds	r3, #1
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4a09      	ldr	r2, [pc, #36]	; (80059ec <USB_FlushRxFifo+0x40>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d901      	bls.n	80059d0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e006      	b.n	80059de <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f003 0310 	and.w	r3, r3, #16
 80059d8:	2b10      	cmp	r3, #16
 80059da:	d0f0      	beq.n	80059be <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	00030d40 	.word	0x00030d40

080059f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b089      	sub	sp, #36	; 0x24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	4611      	mov	r1, r2
 80059fc:	461a      	mov	r2, r3
 80059fe:	460b      	mov	r3, r1
 8005a00:	71fb      	strb	r3, [r7, #7]
 8005a02:	4613      	mov	r3, r2
 8005a04:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005a0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d11a      	bne.n	8005a4c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a16:	88bb      	ldrh	r3, [r7, #4]
 8005a18:	3303      	adds	r3, #3
 8005a1a:	089b      	lsrs	r3, r3, #2
 8005a1c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a1e:	2300      	movs	r3, #0
 8005a20:	61bb      	str	r3, [r7, #24]
 8005a22:	e00f      	b.n	8005a44 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a24:	79fb      	ldrb	r3, [r7, #7]
 8005a26:	031a      	lsls	r2, r3, #12
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a30:	461a      	mov	r2, r3
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	3301      	adds	r3, #1
 8005a42:	61bb      	str	r3, [r7, #24]
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d3eb      	bcc.n	8005a24 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3724      	adds	r7, #36	; 0x24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b089      	sub	sp, #36	; 0x24
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	60f8      	str	r0, [r7, #12]
 8005a62:	60b9      	str	r1, [r7, #8]
 8005a64:	4613      	mov	r3, r2
 8005a66:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005a70:	88fb      	ldrh	r3, [r7, #6]
 8005a72:	3303      	adds	r3, #3
 8005a74:	089b      	lsrs	r3, r3, #2
 8005a76:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005a78:	2300      	movs	r3, #0
 8005a7a:	61bb      	str	r3, [r7, #24]
 8005a7c:	e00b      	b.n	8005a96 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	3301      	adds	r3, #1
 8005a94:	61bb      	str	r3, [r7, #24]
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d3ef      	bcc.n	8005a7e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005a9e:	69fb      	ldr	r3, [r7, #28]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3724      	adds	r7, #36	; 0x24
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	f003 0301 	and.w	r3, r3, #1
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
	...

08005af0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005af8:	2300      	movs	r3, #0
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	3301      	adds	r3, #1
 8005b00:	60fb      	str	r3, [r7, #12]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	4a13      	ldr	r2, [pc, #76]	; (8005b54 <USB_CoreReset+0x64>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d901      	bls.n	8005b0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e01b      	b.n	8005b46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	daf2      	bge.n	8005afc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b16:	2300      	movs	r3, #0
 8005b18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	f043 0201 	orr.w	r2, r3, #1
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4a09      	ldr	r2, [pc, #36]	; (8005b54 <USB_CoreReset+0x64>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d901      	bls.n	8005b38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e006      	b.n	8005b46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d0f0      	beq.n	8005b26 <USB_CoreReset+0x36>

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	00030d40 	.word	0x00030d40

08005b58 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b58:	b084      	sub	sp, #16
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
 8005b62:	f107 001c 	add.w	r0, r7, #28
 8005b66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b74:	461a      	mov	r2, r3
 8005b76:	2300      	movs	r3, #0
 8005b78:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b96:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d018      	beq.n	8005bdc <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d10a      	bne.n	8005bc6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bbe:	f043 0304 	orr.w	r3, r3, #4
 8005bc2:	6013      	str	r3, [r2, #0]
 8005bc4:	e014      	b.n	8005bf0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bd4:	f023 0304 	bic.w	r3, r3, #4
 8005bd8:	6013      	str	r3, [r2, #0]
 8005bda:	e009      	b.n	8005bf0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bea:	f023 0304 	bic.w	r3, r3, #4
 8005bee:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005bf0:	2110      	movs	r1, #16
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7ff feb4 	bl	8005960 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7ff fed7 	bl	80059ac <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	e015      	b.n	8005c30 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c10:	461a      	mov	r2, r3
 8005c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c16:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c24:	461a      	mov	r2, r3
 8005c26:	2300      	movs	r3, #0
 8005c28:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d3e5      	bcc.n	8005c04 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005c38:	2101      	movs	r1, #1
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f882 	bl	8005d44 <USB_DriveVbus>

  HAL_Delay(200U);
 8005c40:	20c8      	movs	r0, #200	; 0xc8
 8005c42:	f7fb f9d1 	bl	8000fe8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c52:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00b      	beq.n	8005c78 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c66:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a14      	ldr	r2, [pc, #80]	; (8005cbc <USB_HostInit+0x164>)
 8005c6c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a13      	ldr	r2, [pc, #76]	; (8005cc0 <USB_HostInit+0x168>)
 8005c72:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005c76:	e009      	b.n	8005c8c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2280      	movs	r2, #128	; 0x80
 8005c7c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a10      	ldr	r2, [pc, #64]	; (8005cc4 <USB_HostInit+0x16c>)
 8005c82:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a10      	ldr	r2, [pc, #64]	; (8005cc8 <USB_HostInit+0x170>)
 8005c88:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d105      	bne.n	8005c9e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	f043 0210 	orr.w	r2, r3, #16
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	699a      	ldr	r2, [r3, #24]
 8005ca2:	4b0a      	ldr	r3, [pc, #40]	; (8005ccc <USB_HostInit+0x174>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cb6:	b004      	add	sp, #16
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	01000200 	.word	0x01000200
 8005cc0:	00e00300 	.word	0x00e00300
 8005cc4:	00600080 	.word	0x00600080
 8005cc8:	004000e0 	.word	0x004000e0
 8005ccc:	a3200008 	.word	0xa3200008

08005cd0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cee:	f023 0303 	bic.w	r3, r3, #3
 8005cf2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	78fb      	ldrb	r3, [r7, #3]
 8005cfe:	f003 0303 	and.w	r3, r3, #3
 8005d02:	68f9      	ldr	r1, [r7, #12]
 8005d04:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005d0c:	78fb      	ldrb	r3, [r7, #3]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d107      	bne.n	8005d22 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d18:	461a      	mov	r2, r3
 8005d1a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005d1e:	6053      	str	r3, [r2, #4]
 8005d20:	e009      	b.n	8005d36 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d106      	bne.n	8005d36 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f241 7370 	movw	r3, #6000	; 0x1770
 8005d34:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005d68:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d109      	bne.n	8005d88 <USB_DriveVbus+0x44>
 8005d74:	78fb      	ldrb	r3, [r7, #3]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d106      	bne.n	8005d88 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d86:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d92:	d109      	bne.n	8005da8 <USB_DriveVbus+0x64>
 8005d94:	78fb      	ldrb	r3, [r7, #3]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d106      	bne.n	8005da8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005da2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005da6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b085      	sub	sp, #20
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	0c5b      	lsrs	r3, r3, #17
 8005dd4:	f003 0303 	and.w	r3, r3, #3
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3714      	adds	r7, #20
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	b29b      	uxth	r3, r3
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
	...

08005e08 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	4608      	mov	r0, r1
 8005e12:	4611      	mov	r1, r2
 8005e14:	461a      	mov	r2, r3
 8005e16:	4603      	mov	r3, r0
 8005e18:	70fb      	strb	r3, [r7, #3]
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	70bb      	strb	r3, [r7, #2]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005e2a:	78fb      	ldrb	r3, [r7, #3]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e36:	461a      	mov	r2, r3
 8005e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e3c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005e3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	d87e      	bhi.n	8005f44 <USB_HC_Init+0x13c>
 8005e46:	a201      	add	r2, pc, #4	; (adr r2, 8005e4c <USB_HC_Init+0x44>)
 8005e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4c:	08005e5d 	.word	0x08005e5d
 8005e50:	08005f07 	.word	0x08005f07
 8005e54:	08005e5d 	.word	0x08005e5d
 8005e58:	08005ec9 	.word	0x08005ec9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e5c:	78fb      	ldrb	r3, [r7, #3]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e68:	461a      	mov	r2, r3
 8005e6a:	f240 439d 	movw	r3, #1181	; 0x49d
 8005e6e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005e70:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	da10      	bge.n	8005e9a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e78:	78fb      	ldrb	r3, [r7, #3]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	78fa      	ldrb	r2, [r7, #3]
 8005e88:	0151      	lsls	r1, r2, #5
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	440a      	add	r2, r1
 8005e8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e96:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005e98:	e057      	b.n	8005f4a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d051      	beq.n	8005f4a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005ea6:	78fb      	ldrb	r3, [r7, #3]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	78fa      	ldrb	r2, [r7, #3]
 8005eb6:	0151      	lsls	r1, r2, #5
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	440a      	add	r2, r1
 8005ebc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ec0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ec4:	60d3      	str	r3, [r2, #12]
      break;
 8005ec6:	e040      	b.n	8005f4a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ec8:	78fb      	ldrb	r3, [r7, #3]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	f240 639d 	movw	r3, #1693	; 0x69d
 8005eda:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005edc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	da34      	bge.n	8005f4e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ee4:	78fb      	ldrb	r3, [r7, #3]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	78fa      	ldrb	r2, [r7, #3]
 8005ef4:	0151      	lsls	r1, r2, #5
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	440a      	add	r2, r1
 8005efa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f02:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005f04:	e023      	b.n	8005f4e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f06:	78fb      	ldrb	r3, [r7, #3]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f12:	461a      	mov	r2, r3
 8005f14:	f240 2325 	movw	r3, #549	; 0x225
 8005f18:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f1a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	da17      	bge.n	8005f52 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005f22:	78fb      	ldrb	r3, [r7, #3]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	78fa      	ldrb	r2, [r7, #3]
 8005f32:	0151      	lsls	r1, r2, #5
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	440a      	add	r2, r1
 8005f38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f3c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005f40:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005f42:	e006      	b.n	8005f52 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	77fb      	strb	r3, [r7, #31]
      break;
 8005f48:	e004      	b.n	8005f54 <USB_HC_Init+0x14c>
      break;
 8005f4a:	bf00      	nop
 8005f4c:	e002      	b.n	8005f54 <USB_HC_Init+0x14c>
      break;
 8005f4e:	bf00      	nop
 8005f50:	e000      	b.n	8005f54 <USB_HC_Init+0x14c>
      break;
 8005f52:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f5a:	699a      	ldr	r2, [r3, #24]
 8005f5c:	78fb      	ldrb	r3, [r7, #3]
 8005f5e:	f003 030f 	and.w	r3, r3, #15
 8005f62:	2101      	movs	r1, #1
 8005f64:	fa01 f303 	lsl.w	r3, r1, r3
 8005f68:	6939      	ldr	r1, [r7, #16]
 8005f6a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005f7e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	da03      	bge.n	8005f8e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f8a:	61bb      	str	r3, [r7, #24]
 8005f8c:	e001      	b.n	8005f92 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff ff0f 	bl	8005db6 <USB_GetHostSpeed>
 8005f98:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005f9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d106      	bne.n	8005fb0 <USB_HC_Init+0x1a8>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d003      	beq.n	8005fb0 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005fa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005fac:	617b      	str	r3, [r7, #20]
 8005fae:	e001      	b.n	8005fb4 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005fb4:	787b      	ldrb	r3, [r7, #1]
 8005fb6:	059b      	lsls	r3, r3, #22
 8005fb8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005fbc:	78bb      	ldrb	r3, [r7, #2]
 8005fbe:	02db      	lsls	r3, r3, #11
 8005fc0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005fc4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005fc6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005fca:	049b      	lsls	r3, r3, #18
 8005fcc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005fd0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005fd2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005fd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005fd8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005fde:	78fb      	ldrb	r3, [r7, #3]
 8005fe0:	0159      	lsls	r1, r3, #5
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	440b      	add	r3, r1
 8005fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fea:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ff0:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005ff2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ff6:	2b03      	cmp	r3, #3
 8005ff8:	d10f      	bne.n	800601a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005ffa:	78fb      	ldrb	r3, [r7, #3]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	4413      	add	r3, r2
 8006002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	78fa      	ldrb	r2, [r7, #3]
 800600a:	0151      	lsls	r1, r2, #5
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	440a      	add	r2, r1
 8006010:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006014:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006018:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800601a:	7ffb      	ldrb	r3, [r7, #31]
}
 800601c:	4618      	mov	r0, r3
 800601e:	3720      	adds	r7, #32
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b08c      	sub	sp, #48	; 0x30
 8006028:	af02      	add	r7, sp, #8
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	4613      	mov	r3, r2
 8006030:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	785b      	ldrb	r3, [r3, #1]
 800603a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800603c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006040:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604a:	2b00      	cmp	r3, #0
 800604c:	d02d      	beq.n	80060aa <USB_HC_StartXfer+0x86>
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	791b      	ldrb	r3, [r3, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d129      	bne.n	80060aa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006056:	79fb      	ldrb	r3, [r7, #7]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d117      	bne.n	800608c <USB_HC_StartXfer+0x68>
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	79db      	ldrb	r3, [r3, #7]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d003      	beq.n	800606c <USB_HC_StartXfer+0x48>
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	79db      	ldrb	r3, [r3, #7]
 8006068:	2b02      	cmp	r3, #2
 800606a:	d10f      	bne.n	800608c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	4413      	add	r3, r2
 8006074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	69fa      	ldr	r2, [r7, #28]
 800607c:	0151      	lsls	r1, r2, #5
 800607e:	6a3a      	ldr	r2, [r7, #32]
 8006080:	440a      	add	r2, r1
 8006082:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800608c:	79fb      	ldrb	r3, [r7, #7]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10b      	bne.n	80060aa <USB_HC_StartXfer+0x86>
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	795b      	ldrb	r3, [r3, #5]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d107      	bne.n	80060aa <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	785b      	ldrb	r3, [r3, #1]
 800609e:	4619      	mov	r1, r3
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 fa2f 	bl	8006504 <USB_DoPing>
      return HAL_OK;
 80060a6:	2300      	movs	r3, #0
 80060a8:	e0f8      	b.n	800629c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d018      	beq.n	80060e4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	8912      	ldrh	r2, [r2, #8]
 80060ba:	4413      	add	r3, r2
 80060bc:	3b01      	subs	r3, #1
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	8912      	ldrh	r2, [r2, #8]
 80060c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80060c6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80060c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80060ca:	8b7b      	ldrh	r3, [r7, #26]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d90b      	bls.n	80060e8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80060d0:	8b7b      	ldrh	r3, [r7, #26]
 80060d2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80060d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	8912      	ldrh	r2, [r2, #8]
 80060da:	fb02 f203 	mul.w	r2, r2, r3
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	611a      	str	r2, [r3, #16]
 80060e2:	e001      	b.n	80060e8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80060e4:	2301      	movs	r3, #1
 80060e6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	78db      	ldrb	r3, [r3, #3]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d007      	beq.n	8006100 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80060f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	8912      	ldrh	r2, [r2, #8]
 80060f6:	fb02 f203 	mul.w	r2, r2, r3
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	611a      	str	r2, [r3, #16]
 80060fe:	e003      	b.n	8006108 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	695a      	ldr	r2, [r3, #20]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006110:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006112:	04d9      	lsls	r1, r3, #19
 8006114:	4b63      	ldr	r3, [pc, #396]	; (80062a4 <USB_HC_StartXfer+0x280>)
 8006116:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006118:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	7a9b      	ldrb	r3, [r3, #10]
 800611e:	075b      	lsls	r3, r3, #29
 8006120:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006124:	69f9      	ldr	r1, [r7, #28]
 8006126:	0148      	lsls	r0, r1, #5
 8006128:	6a39      	ldr	r1, [r7, #32]
 800612a:	4401      	add	r1, r0
 800612c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006130:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006132:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006134:	79fb      	ldrb	r3, [r7, #7]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d009      	beq.n	800614e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	68d9      	ldr	r1, [r3, #12]
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	4413      	add	r3, r2
 8006146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800614a:	460a      	mov	r2, r1
 800614c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	bf0c      	ite	eq
 800615e:	2301      	moveq	r3, #1
 8006160:	2300      	movne	r3, #0
 8006162:	b2db      	uxtb	r3, r3
 8006164:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	4413      	add	r3, r2
 800616e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	69fa      	ldr	r2, [r7, #28]
 8006176:	0151      	lsls	r1, r2, #5
 8006178:	6a3a      	ldr	r2, [r7, #32]
 800617a:	440a      	add	r2, r1
 800617c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006180:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006184:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	4413      	add	r3, r2
 800618e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	7e7b      	ldrb	r3, [r7, #25]
 8006196:	075b      	lsls	r3, r3, #29
 8006198:	69f9      	ldr	r1, [r7, #28]
 800619a:	0148      	lsls	r0, r1, #5
 800619c:	6a39      	ldr	r1, [r7, #32]
 800619e:	4401      	add	r1, r0
 80061a0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80061a4:	4313      	orrs	r3, r2
 80061a6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061be:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	78db      	ldrb	r3, [r3, #3]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d004      	beq.n	80061d2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ce:	613b      	str	r3, [r7, #16]
 80061d0:	e003      	b.n	80061da <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061d8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061e0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ee:	461a      	mov	r2, r3
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80061f4:	79fb      	ldrb	r3, [r7, #7]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80061fa:	2300      	movs	r3, #0
 80061fc:	e04e      	b.n	800629c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	78db      	ldrb	r3, [r3, #3]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d149      	bne.n	800629a <USB_HC_StartXfer+0x276>
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d045      	beq.n	800629a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	79db      	ldrb	r3, [r3, #7]
 8006212:	2b03      	cmp	r3, #3
 8006214:	d830      	bhi.n	8006278 <USB_HC_StartXfer+0x254>
 8006216:	a201      	add	r2, pc, #4	; (adr r2, 800621c <USB_HC_StartXfer+0x1f8>)
 8006218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621c:	0800622d 	.word	0x0800622d
 8006220:	08006251 	.word	0x08006251
 8006224:	0800622d 	.word	0x0800622d
 8006228:	08006251 	.word	0x08006251
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	3303      	adds	r3, #3
 8006232:	089b      	lsrs	r3, r3, #2
 8006234:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006236:	8afa      	ldrh	r2, [r7, #22]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623c:	b29b      	uxth	r3, r3
 800623e:	429a      	cmp	r2, r3
 8006240:	d91c      	bls.n	800627c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	f043 0220 	orr.w	r2, r3, #32
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	619a      	str	r2, [r3, #24]
        }
        break;
 800624e:	e015      	b.n	800627c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	3303      	adds	r3, #3
 8006256:	089b      	lsrs	r3, r3, #2
 8006258:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800625a:	8afa      	ldrh	r2, [r7, #22]
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	b29b      	uxth	r3, r3
 8006266:	429a      	cmp	r2, r3
 8006268:	d90a      	bls.n	8006280 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	619a      	str	r2, [r3, #24]
        }
        break;
 8006276:	e003      	b.n	8006280 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006278:	bf00      	nop
 800627a:	e002      	b.n	8006282 <USB_HC_StartXfer+0x25e>
        break;
 800627c:	bf00      	nop
 800627e:	e000      	b.n	8006282 <USB_HC_StartXfer+0x25e>
        break;
 8006280:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	68d9      	ldr	r1, [r3, #12]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	785a      	ldrb	r2, [r3, #1]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	b29b      	uxth	r3, r3
 8006290:	2000      	movs	r0, #0
 8006292:	9000      	str	r0, [sp, #0]
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f7ff fbab 	bl	80059f0 <USB_WritePacket>
  }

  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3728      	adds	r7, #40	; 0x28
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	1ff80000 	.word	0x1ff80000

080062a8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	b29b      	uxth	r3, r3
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b089      	sub	sp, #36	; 0x24
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	460b      	mov	r3, r1
 80062d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80062da:	78fb      	ldrb	r3, [r7, #3]
 80062dc:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80062de:	2300      	movs	r3, #0
 80062e0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	0c9b      	lsrs	r3, r3, #18
 80062f2:	f003 0303 	and.w	r3, r3, #3
 80062f6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	015a      	lsls	r2, r3, #5
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	0fdb      	lsrs	r3, r3, #31
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f003 0320 	and.w	r3, r3, #32
 8006316:	2b20      	cmp	r3, #32
 8006318:	d104      	bne.n	8006324 <USB_HC_Halt+0x5a>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006320:	2300      	movs	r3, #0
 8006322:	e0e8      	b.n	80064f6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d002      	beq.n	8006330 <USB_HC_Halt+0x66>
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	2b02      	cmp	r3, #2
 800632e:	d173      	bne.n	8006418 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	4413      	add	r3, r2
 8006338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	0151      	lsls	r1, r2, #5
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	440a      	add	r2, r1
 8006346:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800634a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800634e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f003 0320 	and.w	r3, r3, #32
 8006358:	2b00      	cmp	r3, #0
 800635a:	f040 80cb 	bne.w	80064f4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006362:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d143      	bne.n	80063f2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	4413      	add	r3, r2
 8006372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	0151      	lsls	r1, r2, #5
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	440a      	add	r2, r1
 8006380:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006384:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006388:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	4413      	add	r3, r2
 8006392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	0151      	lsls	r1, r2, #5
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	440a      	add	r2, r1
 80063a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063a8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	0151      	lsls	r1, r2, #5
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	440a      	add	r2, r1
 80063c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063c8:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	3301      	adds	r3, #1
 80063ce:	61fb      	str	r3, [r7, #28]
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063d6:	d81d      	bhi.n	8006414 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063ee:	d0ec      	beq.n	80063ca <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063f0:	e080      	b.n	80064f4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	0151      	lsls	r1, r2, #5
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	440a      	add	r2, r1
 8006408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800640c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006410:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006412:	e06f      	b.n	80064f4 <USB_HC_Halt+0x22a>
            break;
 8006414:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006416:	e06d      	b.n	80064f4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	4413      	add	r3, r2
 8006420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	0151      	lsls	r1, r2, #5
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	440a      	add	r2, r1
 800642e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006432:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006436:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d143      	bne.n	80064d0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	4413      	add	r3, r2
 8006450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	0151      	lsls	r1, r2, #5
 800645a:	69ba      	ldr	r2, [r7, #24]
 800645c:	440a      	add	r2, r1
 800645e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006462:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006466:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	4413      	add	r3, r2
 8006470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	0151      	lsls	r1, r2, #5
 800647a:	69ba      	ldr	r2, [r7, #24]
 800647c:	440a      	add	r2, r1
 800647e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006482:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006486:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	4413      	add	r3, r2
 8006490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	0151      	lsls	r1, r2, #5
 800649a:	69ba      	ldr	r2, [r7, #24]
 800649c:	440a      	add	r2, r1
 800649e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064a6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	3301      	adds	r3, #1
 80064ac:	61fb      	str	r3, [r7, #28]
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064b4:	d81d      	bhi.n	80064f2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064cc:	d0ec      	beq.n	80064a8 <USB_HC_Halt+0x1de>
 80064ce:	e011      	b.n	80064f4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	0151      	lsls	r1, r2, #5
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	440a      	add	r2, r1
 80064e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064ee:	6013      	str	r3, [r2, #0]
 80064f0:	e000      	b.n	80064f4 <USB_HC_Halt+0x22a>
          break;
 80064f2:	bf00      	nop
    }
  }

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3724      	adds	r7, #36	; 0x24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
	...

08006504 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006504:	b480      	push	{r7}
 8006506:	b087      	sub	sp, #28
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	460b      	mov	r3, r1
 800650e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006514:	78fb      	ldrb	r3, [r7, #3]
 8006516:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006518:	2301      	movs	r3, #1
 800651a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	04da      	lsls	r2, r3, #19
 8006520:	4b15      	ldr	r3, [pc, #84]	; (8006578 <USB_DoPing+0x74>)
 8006522:	4013      	ands	r3, r2
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	0151      	lsls	r1, r2, #5
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	440a      	add	r2, r1
 800652c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006530:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006534:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	4413      	add	r3, r2
 800653e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800654c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006554:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	4413      	add	r3, r2
 800655e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006562:	461a      	mov	r2, r3
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	371c      	adds	r7, #28
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	1ff80000 	.word	0x1ff80000

0800657c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006588:	2300      	movs	r3, #0
 800658a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7ff f9ab 	bl	80058e8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006592:	2110      	movs	r1, #16
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7ff f9e3 	bl	8005960 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7ff fa06 	bl	80059ac <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80065a0:	2300      	movs	r3, #0
 80065a2:	613b      	str	r3, [r7, #16]
 80065a4:	e01f      	b.n	80065e6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065bc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065c4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065cc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065da:	461a      	mov	r2, r3
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	3301      	adds	r3, #1
 80065e4:	613b      	str	r3, [r7, #16]
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	2b0f      	cmp	r3, #15
 80065ea:	d9dc      	bls.n	80065a6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80065ec:	2300      	movs	r3, #0
 80065ee:	613b      	str	r3, [r7, #16]
 80065f0:	e034      	b.n	800665c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	015a      	lsls	r2, r3, #5
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	4413      	add	r3, r2
 80065fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006608:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006610:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006618:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4413      	add	r3, r2
 8006622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006626:	461a      	mov	r2, r3
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	3301      	adds	r3, #1
 8006630:	617b      	str	r3, [r7, #20]
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006638:	d80c      	bhi.n	8006654 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	4413      	add	r3, r2
 8006642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800664c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006650:	d0ec      	beq.n	800662c <USB_StopHost+0xb0>
 8006652:	e000      	b.n	8006656 <USB_StopHost+0xda>
        break;
 8006654:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	3301      	adds	r3, #1
 800665a:	613b      	str	r3, [r7, #16]
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	2b0f      	cmp	r3, #15
 8006660:	d9c7      	bls.n	80065f2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006668:	461a      	mov	r2, r3
 800666a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800666e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006676:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7ff f924 	bl	80058c6 <USB_EnableGlobalInt>

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006688:	b590      	push	{r4, r7, lr}
 800668a:	b089      	sub	sp, #36	; 0x24
 800668c:	af04      	add	r7, sp, #16
 800668e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006690:	2301      	movs	r3, #1
 8006692:	2202      	movs	r2, #2
 8006694:	2102      	movs	r1, #2
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fc66 	bl	8006f68 <USBH_FindInterface>
 800669c:	4603      	mov	r3, r0
 800669e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
 80066a2:	2bff      	cmp	r3, #255	; 0xff
 80066a4:	d002      	beq.n	80066ac <USBH_CDC_InterfaceInit+0x24>
 80066a6:	7bfb      	ldrb	r3, [r7, #15]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d901      	bls.n	80066b0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80066ac:	2302      	movs	r3, #2
 80066ae:	e13d      	b.n	800692c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
 80066b2:	4619      	mov	r1, r3
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fc3b 	bl	8006f30 <USBH_SelectInterface>
 80066ba:	4603      	mov	r3, r0
 80066bc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80066be:	7bbb      	ldrb	r3, [r7, #14]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d001      	beq.n	80066c8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80066c4:	2302      	movs	r3, #2
 80066c6:	e131      	b.n	800692c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80066ce:	2050      	movs	r0, #80	; 0x50
 80066d0:	f001 fb12 	bl	8007cf8 <malloc>
 80066d4:	4603      	mov	r3, r0
 80066d6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80066e8:	2302      	movs	r3, #2
 80066ea:	e11f      	b.n	800692c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80066ec:	2250      	movs	r2, #80	; 0x50
 80066ee:	2100      	movs	r1, #0
 80066f0:	68b8      	ldr	r0, [r7, #8]
 80066f2:	f001 fb11 	bl	8007d18 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	211a      	movs	r1, #26
 80066fc:	fb01 f303 	mul.w	r3, r1, r3
 8006700:	4413      	add	r3, r2
 8006702:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	b25b      	sxtb	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	da15      	bge.n	800673a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800670e:	7bfb      	ldrb	r3, [r7, #15]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	211a      	movs	r1, #26
 8006714:	fb01 f303 	mul.w	r3, r1, r3
 8006718:	4413      	add	r3, r2
 800671a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800671e:	781a      	ldrb	r2, [r3, #0]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006724:	7bfb      	ldrb	r3, [r7, #15]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	211a      	movs	r1, #26
 800672a:	fb01 f303 	mul.w	r3, r1, r3
 800672e:	4413      	add	r3, r2
 8006730:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006734:	881a      	ldrh	r2, [r3, #0]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	785b      	ldrb	r3, [r3, #1]
 800673e:	4619      	mov	r1, r3
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 ff9c 	bl	800767e <USBH_AllocPipe>
 8006746:	4603      	mov	r3, r0
 8006748:	461a      	mov	r2, r3
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	7819      	ldrb	r1, [r3, #0]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	7858      	ldrb	r0, [r3, #1]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006762:	68ba      	ldr	r2, [r7, #8]
 8006764:	8952      	ldrh	r2, [r2, #10]
 8006766:	9202      	str	r2, [sp, #8]
 8006768:	2203      	movs	r2, #3
 800676a:	9201      	str	r2, [sp, #4]
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	4623      	mov	r3, r4
 8006770:	4602      	mov	r2, r0
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 ff54 	bl	8007620 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2200      	movs	r2, #0
 800677e:	4619      	mov	r1, r3
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f001 fa17 	bl	8007bb4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006786:	2300      	movs	r3, #0
 8006788:	2200      	movs	r2, #0
 800678a:	210a      	movs	r1, #10
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fbeb 	bl	8006f68 <USBH_FindInterface>
 8006792:	4603      	mov	r3, r0
 8006794:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006796:	7bfb      	ldrb	r3, [r7, #15]
 8006798:	2bff      	cmp	r3, #255	; 0xff
 800679a:	d002      	beq.n	80067a2 <USBH_CDC_InterfaceInit+0x11a>
 800679c:	7bfb      	ldrb	r3, [r7, #15]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d901      	bls.n	80067a6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80067a2:	2302      	movs	r3, #2
 80067a4:	e0c2      	b.n	800692c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	211a      	movs	r1, #26
 80067ac:	fb01 f303 	mul.w	r3, r1, r3
 80067b0:	4413      	add	r3, r2
 80067b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	b25b      	sxtb	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	da16      	bge.n	80067ec <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80067be:	7bfb      	ldrb	r3, [r7, #15]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	211a      	movs	r1, #26
 80067c4:	fb01 f303 	mul.w	r3, r1, r3
 80067c8:	4413      	add	r3, r2
 80067ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80067ce:	781a      	ldrb	r2, [r3, #0]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80067d4:	7bfb      	ldrb	r3, [r7, #15]
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	211a      	movs	r1, #26
 80067da:	fb01 f303 	mul.w	r3, r1, r3
 80067de:	4413      	add	r3, r2
 80067e0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80067e4:	881a      	ldrh	r2, [r3, #0]
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	835a      	strh	r2, [r3, #26]
 80067ea:	e015      	b.n	8006818 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80067ec:	7bfb      	ldrb	r3, [r7, #15]
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	211a      	movs	r1, #26
 80067f2:	fb01 f303 	mul.w	r3, r1, r3
 80067f6:	4413      	add	r3, r2
 80067f8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80067fc:	781a      	ldrb	r2, [r3, #0]
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006802:	7bfb      	ldrb	r3, [r7, #15]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	211a      	movs	r1, #26
 8006808:	fb01 f303 	mul.w	r3, r1, r3
 800680c:	4413      	add	r3, r2
 800680e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006812:	881a      	ldrh	r2, [r3, #0]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006818:	7bfb      	ldrb	r3, [r7, #15]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	211a      	movs	r1, #26
 800681e:	fb01 f303 	mul.w	r3, r1, r3
 8006822:	4413      	add	r3, r2
 8006824:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	b25b      	sxtb	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	da16      	bge.n	800685e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006830:	7bfb      	ldrb	r3, [r7, #15]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	211a      	movs	r1, #26
 8006836:	fb01 f303 	mul.w	r3, r1, r3
 800683a:	4413      	add	r3, r2
 800683c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006840:	781a      	ldrb	r2, [r3, #0]
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006846:	7bfb      	ldrb	r3, [r7, #15]
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	211a      	movs	r1, #26
 800684c:	fb01 f303 	mul.w	r3, r1, r3
 8006850:	4413      	add	r3, r2
 8006852:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006856:	881a      	ldrh	r2, [r3, #0]
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	835a      	strh	r2, [r3, #26]
 800685c:	e015      	b.n	800688a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800685e:	7bfb      	ldrb	r3, [r7, #15]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	211a      	movs	r1, #26
 8006864:	fb01 f303 	mul.w	r3, r1, r3
 8006868:	4413      	add	r3, r2
 800686a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800686e:	781a      	ldrb	r2, [r3, #0]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006874:	7bfb      	ldrb	r3, [r7, #15]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	211a      	movs	r1, #26
 800687a:	fb01 f303 	mul.w	r3, r1, r3
 800687e:	4413      	add	r3, r2
 8006880:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006884:	881a      	ldrh	r2, [r3, #0]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	7b9b      	ldrb	r3, [r3, #14]
 800688e:	4619      	mov	r1, r3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fef4 	bl	800767e <USBH_AllocPipe>
 8006896:	4603      	mov	r3, r0
 8006898:	461a      	mov	r2, r3
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	7bdb      	ldrb	r3, [r3, #15]
 80068a2:	4619      	mov	r1, r3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 feea 	bl	800767e <USBH_AllocPipe>
 80068aa:	4603      	mov	r3, r0
 80068ac:	461a      	mov	r2, r3
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	7b59      	ldrb	r1, [r3, #13]
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	7b98      	ldrb	r0, [r3, #14]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	8b12      	ldrh	r2, [r2, #24]
 80068ca:	9202      	str	r2, [sp, #8]
 80068cc:	2202      	movs	r2, #2
 80068ce:	9201      	str	r2, [sp, #4]
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	4623      	mov	r3, r4
 80068d4:	4602      	mov	r2, r0
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fea2 	bl	8007620 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	7b19      	ldrb	r1, [r3, #12]
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	7bd8      	ldrb	r0, [r3, #15]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	8b52      	ldrh	r2, [r2, #26]
 80068f4:	9202      	str	r2, [sp, #8]
 80068f6:	2202      	movs	r2, #2
 80068f8:	9201      	str	r2, [sp, #4]
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	4623      	mov	r3, r4
 80068fe:	4602      	mov	r2, r0
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fe8d 	bl	8007620 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	7b5b      	ldrb	r3, [r3, #13]
 8006912:	2200      	movs	r2, #0
 8006914:	4619      	mov	r1, r3
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f001 f94c 	bl	8007bb4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	7b1b      	ldrb	r3, [r3, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	4619      	mov	r1, r3
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f001 f945 	bl	8007bb4 <USBH_LL_SetToggle>

  return USBH_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3714      	adds	r7, #20
 8006930:	46bd      	mov	sp, r7
 8006932:	bd90      	pop	{r4, r7, pc}

08006934 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006942:	69db      	ldr	r3, [r3, #28]
 8006944:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00e      	beq.n	800696c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	4619      	mov	r1, r3
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fe82 	bl	800765e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	4619      	mov	r1, r3
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 fead 	bl	80076c0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	7b1b      	ldrb	r3, [r3, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00e      	beq.n	8006992 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	7b1b      	ldrb	r3, [r3, #12]
 8006978:	4619      	mov	r1, r3
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fe6f 	bl	800765e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	7b1b      	ldrb	r3, [r3, #12]
 8006984:	4619      	mov	r1, r3
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 fe9a 	bl	80076c0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	7b5b      	ldrb	r3, [r3, #13]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00e      	beq.n	80069b8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	7b5b      	ldrb	r3, [r3, #13]
 800699e:	4619      	mov	r1, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fe5c 	bl	800765e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	7b5b      	ldrb	r3, [r3, #13]
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fe87 	bl	80076c0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00b      	beq.n	80069dc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f001 f99b 	bl	8007d08 <free>
    phost->pActiveClass->pData = 0U;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069d8:	2200      	movs	r2, #0
 80069da:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b084      	sub	sp, #16
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	3340      	adds	r3, #64	; 0x40
 80069fc:	4619      	mov	r1, r3
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f8b1 	bl	8006b66 <GetLineCoding>
 8006a04:	4603      	mov	r3, r0
 8006a06:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006a08:	7afb      	ldrb	r3, [r7, #11]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d105      	bne.n	8006a1a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a14:	2102      	movs	r1, #2
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006a1a:	7afb      	ldrb	r3, [r7, #11]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a3a:	69db      	ldr	r3, [r3, #28]
 8006a3c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006a44:	2b04      	cmp	r3, #4
 8006a46:	d877      	bhi.n	8006b38 <USBH_CDC_Process+0x114>
 8006a48:	a201      	add	r2, pc, #4	; (adr r2, 8006a50 <USBH_CDC_Process+0x2c>)
 8006a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4e:	bf00      	nop
 8006a50:	08006a65 	.word	0x08006a65
 8006a54:	08006a6b 	.word	0x08006a6b
 8006a58:	08006a9b 	.word	0x08006a9b
 8006a5c:	08006b0f 	.word	0x08006b0f
 8006a60:	08006b1d 	.word	0x08006b1d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006a64:	2300      	movs	r3, #0
 8006a66:	73fb      	strb	r3, [r7, #15]
      break;
 8006a68:	e06d      	b.n	8006b46 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a6e:	4619      	mov	r1, r3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f897 	bl	8006ba4 <SetLineCoding>
 8006a76:	4603      	mov	r3, r0
 8006a78:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a7a:	7bbb      	ldrb	r3, [r7, #14]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d104      	bne.n	8006a8a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a88:	e058      	b.n	8006b3c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006a8a:	7bbb      	ldrb	r3, [r7, #14]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d055      	beq.n	8006b3c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2204      	movs	r2, #4
 8006a94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006a98:	e050      	b.n	8006b3c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	3340      	adds	r3, #64	; 0x40
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 f860 	bl	8006b66 <GetLineCoding>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006aaa:	7bbb      	ldrb	r3, [r7, #14]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d126      	bne.n	8006afe <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ac2:	791b      	ldrb	r3, [r3, #4]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d13b      	bne.n	8006b40 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ad2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d133      	bne.n	8006b40 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ae2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d12b      	bne.n	8006b40 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d124      	bne.n	8006b40 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f958 	bl	8006dac <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006afc:	e020      	b.n	8006b40 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006afe:	7bbb      	ldrb	r3, [r7, #14]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d01d      	beq.n	8006b40 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	2204      	movs	r2, #4
 8006b08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006b0c:	e018      	b.n	8006b40 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f867 	bl	8006be2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f8da 	bl	8006cce <CDC_ProcessReception>
      break;
 8006b1a:	e014      	b.n	8006b46 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fb08 	bl	8007134 <USBH_ClrFeature>
 8006b24:	4603      	mov	r3, r0
 8006b26:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b28:	7bbb      	ldrb	r3, [r7, #14]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10a      	bne.n	8006b44 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006b36:	e005      	b.n	8006b44 <USBH_CDC_Process+0x120>

    default:
      break;
 8006b38:	bf00      	nop
 8006b3a:	e004      	b.n	8006b46 <USBH_CDC_Process+0x122>
      break;
 8006b3c:	bf00      	nop
 8006b3e:	e002      	b.n	8006b46 <USBH_CDC_Process+0x122>
      break;
 8006b40:	bf00      	nop
 8006b42:	e000      	b.n	8006b46 <USBH_CDC_Process+0x122>
      break;
 8006b44:	bf00      	nop

  }

  return status;
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b082      	sub	sp, #8
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
 8006b6e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	22a1      	movs	r2, #161	; 0xa1
 8006b74:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2221      	movs	r2, #33	; 0x21
 8006b7a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2207      	movs	r2, #7
 8006b8c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2207      	movs	r2, #7
 8006b92:	4619      	mov	r1, r3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 faf1 	bl	800717c <USBH_CtlReq>
 8006b9a:	4603      	mov	r3, r0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2221      	movs	r2, #33	; 0x21
 8006bb2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2207      	movs	r2, #7
 8006bca:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	2207      	movs	r2, #7
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fad2 	bl	800717c <USBH_CtlReq>
 8006bd8:	4603      	mov	r3, r0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3708      	adds	r7, #8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b086      	sub	sp, #24
 8006be6:	af02      	add	r7, sp, #8
 8006be8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d002      	beq.n	8006c08 <CDC_ProcessTransmission+0x26>
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d023      	beq.n	8006c4e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006c06:	e05e      	b.n	8006cc6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	8b12      	ldrh	r2, [r2, #24]
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d90b      	bls.n	8006c2c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	69d9      	ldr	r1, [r3, #28]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	8b1a      	ldrh	r2, [r3, #24]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	7b5b      	ldrb	r3, [r3, #13]
 8006c20:	2001      	movs	r0, #1
 8006c22:	9000      	str	r0, [sp, #0]
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fcb8 	bl	800759a <USBH_BulkSendData>
 8006c2a:	e00b      	b.n	8006c44 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	7b5b      	ldrb	r3, [r3, #13]
 8006c3a:	2001      	movs	r0, #1
 8006c3c:	9000      	str	r0, [sp, #0]
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fcab 	bl	800759a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006c4c:	e03b      	b.n	8006cc6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	7b5b      	ldrb	r3, [r3, #13]
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 ff83 	bl	8007b60 <USBH_LL_GetURBState>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006c5e:	7afb      	ldrb	r3, [r7, #11]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d128      	bne.n	8006cb6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	8b12      	ldrh	r2, [r2, #24]
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d90e      	bls.n	8006c8e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	8b12      	ldrh	r2, [r2, #24]
 8006c78:	1a9a      	subs	r2, r3, r2
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	8b12      	ldrh	r2, [r2, #24]
 8006c86:	441a      	add	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	61da      	str	r2, [r3, #28]
 8006c8c:	e002      	b.n	8006c94 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d004      	beq.n	8006ca6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006ca4:	e00e      	b.n	8006cc4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f868 	bl	8006d84 <USBH_CDC_TransmitCallback>
      break;
 8006cb4:	e006      	b.n	8006cc4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006cb6:	7afb      	ldrb	r3, [r7, #11]
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d103      	bne.n	8006cc4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006cc4:	bf00      	nop
  }
}
 8006cc6:	bf00      	nop
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b086      	sub	sp, #24
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	d002      	beq.n	8006cf4 <CDC_ProcessReception+0x26>
 8006cee:	2b04      	cmp	r3, #4
 8006cf0:	d00e      	beq.n	8006d10 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006cf2:	e043      	b.n	8006d7c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	6a19      	ldr	r1, [r3, #32]
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	8b5a      	ldrh	r2, [r3, #26]
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	7b1b      	ldrb	r3, [r3, #12]
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fc6f 	bl	80075e4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	2204      	movs	r2, #4
 8006d0a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006d0e:	e035      	b.n	8006d7c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	7b1b      	ldrb	r3, [r3, #12]
 8006d14:	4619      	mov	r1, r3
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 ff22 	bl	8007b60 <USBH_LL_GetURBState>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006d20:	7cfb      	ldrb	r3, [r7, #19]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d129      	bne.n	8006d7a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	7b1b      	ldrb	r3, [r3, #12]
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 fe85 	bl	8007a3c <USBH_LL_GetLastXferSize>
 8006d32:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d016      	beq.n	8006d6c <CDC_ProcessReception+0x9e>
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	8b5b      	ldrh	r3, [r3, #26]
 8006d42:	461a      	mov	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d910      	bls.n	8006d6c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	1ad2      	subs	r2, r2, r3
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	6a1a      	ldr	r2, [r3, #32]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	441a      	add	r2, r3
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	2203      	movs	r2, #3
 8006d66:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006d6a:	e006      	b.n	8006d7a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f80f 	bl	8006d98 <USBH_CDC_ReceiveCallback>
      break;
 8006d7a:	bf00      	nop
  }
}
 8006d7c:	bf00      	nop
 8006d7e:	3718      	adds	r7, #24
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d101      	bne.n	8006dd8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	e029      	b.n	8006e2c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	79fa      	ldrb	r2, [r7, #7]
 8006ddc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 f81f 	bl	8006e34 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 fd97 	bl	8007958 <USBH_LL_Init>

  return USBH_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006e40:	2300      	movs	r3, #0
 8006e42:	60fb      	str	r3, [r7, #12]
 8006e44:	e009      	b.n	8006e5a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	33e0      	adds	r3, #224	; 0xe0
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	2200      	movs	r2, #0
 8006e52:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	3301      	adds	r3, #1
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2b0e      	cmp	r3, #14
 8006e5e:	d9f2      	bls.n	8006e46 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006e60:	2300      	movs	r3, #0
 8006e62:	60fb      	str	r3, [r7, #12]
 8006e64:	e009      	b.n	8006e7a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006e70:	2200      	movs	r2, #0
 8006e72:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	3301      	adds	r3, #1
 8006e78:	60fb      	str	r3, [r7, #12]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e80:	d3f1      	bcc.n	8006e66 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2240      	movs	r2, #64	; 0x40
 8006ea6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d016      	beq.n	8006f1e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10e      	bne.n	8006f18 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f00:	1c59      	adds	r1, r3, #1
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	33de      	adds	r3, #222	; 0xde
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	73fb      	strb	r3, [r7, #15]
 8006f16:	e004      	b.n	8006f22 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006f18:	2302      	movs	r3, #2
 8006f1a:	73fb      	strb	r3, [r7, #15]
 8006f1c:	e001      	b.n	8006f22 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006f1e:	2302      	movs	r3, #2
 8006f20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006f46:	78fa      	ldrb	r2, [r7, #3]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d204      	bcs.n	8006f56 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	78fa      	ldrb	r2, [r7, #3]
 8006f50:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006f54:	e001      	b.n	8006f5a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006f56:	2302      	movs	r3, #2
 8006f58:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b087      	sub	sp, #28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	4608      	mov	r0, r1
 8006f72:	4611      	mov	r1, r2
 8006f74:	461a      	mov	r2, r3
 8006f76:	4603      	mov	r3, r0
 8006f78:	70fb      	strb	r3, [r7, #3]
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	70bb      	strb	r3, [r7, #2]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006f86:	2300      	movs	r3, #0
 8006f88:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006f90:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f92:	e025      	b.n	8006fe0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006f94:	7dfb      	ldrb	r3, [r7, #23]
 8006f96:	221a      	movs	r2, #26
 8006f98:	fb02 f303 	mul.w	r3, r2, r3
 8006f9c:	3308      	adds	r3, #8
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	3302      	adds	r3, #2
 8006fa4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	795b      	ldrb	r3, [r3, #5]
 8006faa:	78fa      	ldrb	r2, [r7, #3]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d002      	beq.n	8006fb6 <USBH_FindInterface+0x4e>
 8006fb0:	78fb      	ldrb	r3, [r7, #3]
 8006fb2:	2bff      	cmp	r3, #255	; 0xff
 8006fb4:	d111      	bne.n	8006fda <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006fba:	78ba      	ldrb	r2, [r7, #2]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d002      	beq.n	8006fc6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006fc0:	78bb      	ldrb	r3, [r7, #2]
 8006fc2:	2bff      	cmp	r3, #255	; 0xff
 8006fc4:	d109      	bne.n	8006fda <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006fca:	787a      	ldrb	r2, [r7, #1]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d002      	beq.n	8006fd6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006fd0:	787b      	ldrb	r3, [r7, #1]
 8006fd2:	2bff      	cmp	r3, #255	; 0xff
 8006fd4:	d101      	bne.n	8006fda <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006fd6:	7dfb      	ldrb	r3, [r7, #23]
 8006fd8:	e006      	b.n	8006fe8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006fda:	7dfb      	ldrb	r3, [r7, #23]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006fe0:	7dfb      	ldrb	r3, [r7, #23]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d9d6      	bls.n	8006f94 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006fe6:	23ff      	movs	r3, #255	; 0xff
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	371c      	adds	r7, #28
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 fce7 	bl	80079d0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007002:	2101      	movs	r1, #1
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 fdbe 	bl	8007b86 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	683a      	ldr	r2, [r7, #0]
 8007022:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007026:	bf00      	nop
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b082      	sub	sp, #8
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007040:	1c5a      	adds	r2, r3, #1
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f804 	bl	8007056 <USBH_HandleSof>
}
 800704e:	bf00      	nop
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b082      	sub	sp, #8
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b0b      	cmp	r3, #11
 8007066:	d10a      	bne.n	800707e <USBH_HandleSof+0x28>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800706e:	2b00      	cmp	r3, #0
 8007070:	d005      	beq.n	800707e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	4798      	blx	r3
  }
}
 800707e:	bf00      	nop
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007086:	b480      	push	{r7}
 8007088:	b083      	sub	sp, #12
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007096:	bf00      	nop
}
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b083      	sub	sp, #12
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80070b2:	bf00      	nop
}
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80070be:	b480      	push	{r7}
 80070c0:	b083      	sub	sp, #12
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fc7a 	bl	8007a06 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	791b      	ldrb	r3, [r3, #4]
 8007116:	4619      	mov	r1, r3
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fad1 	bl	80076c0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	795b      	ldrb	r3, [r3, #5]
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 facb 	bl	80076c0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	460b      	mov	r3, r1
 800713e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	789b      	ldrb	r3, [r3, #2]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d10f      	bne.n	8007168 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2202      	movs	r2, #2
 800714c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800715a:	78fb      	ldrb	r3, [r7, #3]
 800715c:	b29a      	uxth	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007168:	2200      	movs	r2, #0
 800716a:	2100      	movs	r1, #0
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f805 	bl	800717c <USBH_CtlReq>
 8007172:	4603      	mov	r3, r0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	4613      	mov	r3, r2
 8007188:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800718a:	2301      	movs	r3, #1
 800718c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	789b      	ldrb	r3, [r3, #2]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d002      	beq.n	800719c <USBH_CtlReq+0x20>
 8007196:	2b02      	cmp	r3, #2
 8007198:	d00f      	beq.n	80071ba <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800719a:	e027      	b.n	80071ec <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	88fa      	ldrh	r2, [r7, #6]
 80071a6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2201      	movs	r2, #1
 80071ac:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2202      	movs	r2, #2
 80071b2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80071b4:	2301      	movs	r3, #1
 80071b6:	75fb      	strb	r3, [r7, #23]
      break;
 80071b8:	e018      	b.n	80071ec <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 f81c 	bl	80071f8 <USBH_HandleControl>
 80071c0:	4603      	mov	r3, r0
 80071c2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80071c4:	7dfb      	ldrb	r3, [r7, #23]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <USBH_CtlReq+0x54>
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
 80071cc:	2b03      	cmp	r3, #3
 80071ce:	d106      	bne.n	80071de <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2201      	movs	r2, #1
 80071d4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	761a      	strb	r2, [r3, #24]
      break;
 80071dc:	e005      	b.n	80071ea <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80071de:	7dfb      	ldrb	r3, [r7, #23]
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d102      	bne.n	80071ea <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2201      	movs	r2, #1
 80071e8:	709a      	strb	r2, [r3, #2]
      break;
 80071ea:	bf00      	nop
  }
  return status;
 80071ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3718      	adds	r7, #24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
	...

080071f8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af02      	add	r7, sp, #8
 80071fe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007200:	2301      	movs	r3, #1
 8007202:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007204:	2300      	movs	r3, #0
 8007206:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	7e1b      	ldrb	r3, [r3, #24]
 800720c:	3b01      	subs	r3, #1
 800720e:	2b0a      	cmp	r3, #10
 8007210:	f200 8156 	bhi.w	80074c0 <USBH_HandleControl+0x2c8>
 8007214:	a201      	add	r2, pc, #4	; (adr r2, 800721c <USBH_HandleControl+0x24>)
 8007216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721a:	bf00      	nop
 800721c:	08007249 	.word	0x08007249
 8007220:	08007263 	.word	0x08007263
 8007224:	080072cd 	.word	0x080072cd
 8007228:	080072f3 	.word	0x080072f3
 800722c:	0800732b 	.word	0x0800732b
 8007230:	08007355 	.word	0x08007355
 8007234:	080073a7 	.word	0x080073a7
 8007238:	080073c9 	.word	0x080073c9
 800723c:	08007405 	.word	0x08007405
 8007240:	0800742b 	.word	0x0800742b
 8007244:	08007469 	.word	0x08007469
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f103 0110 	add.w	r1, r3, #16
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	795b      	ldrb	r3, [r3, #5]
 8007252:	461a      	mov	r2, r3
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f943 	bl	80074e0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2202      	movs	r2, #2
 800725e:	761a      	strb	r2, [r3, #24]
      break;
 8007260:	e139      	b.n	80074d6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	795b      	ldrb	r3, [r3, #5]
 8007266:	4619      	mov	r1, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fc79 	bl	8007b60 <USBH_LL_GetURBState>
 800726e:	4603      	mov	r3, r0
 8007270:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007272:	7bbb      	ldrb	r3, [r7, #14]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d11e      	bne.n	80072b6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	7c1b      	ldrb	r3, [r3, #16]
 800727c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007280:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	8adb      	ldrh	r3, [r3, #22]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00a      	beq.n	80072a0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800728a:	7b7b      	ldrb	r3, [r7, #13]
 800728c:	2b80      	cmp	r3, #128	; 0x80
 800728e:	d103      	bne.n	8007298 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2203      	movs	r2, #3
 8007294:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007296:	e115      	b.n	80074c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2205      	movs	r2, #5
 800729c:	761a      	strb	r2, [r3, #24]
      break;
 800729e:	e111      	b.n	80074c4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80072a0:	7b7b      	ldrb	r3, [r7, #13]
 80072a2:	2b80      	cmp	r3, #128	; 0x80
 80072a4:	d103      	bne.n	80072ae <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2209      	movs	r2, #9
 80072aa:	761a      	strb	r2, [r3, #24]
      break;
 80072ac:	e10a      	b.n	80074c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2207      	movs	r2, #7
 80072b2:	761a      	strb	r2, [r3, #24]
      break;
 80072b4:	e106      	b.n	80074c4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80072b6:	7bbb      	ldrb	r3, [r7, #14]
 80072b8:	2b04      	cmp	r3, #4
 80072ba:	d003      	beq.n	80072c4 <USBH_HandleControl+0xcc>
 80072bc:	7bbb      	ldrb	r3, [r7, #14]
 80072be:	2b02      	cmp	r3, #2
 80072c0:	f040 8100 	bne.w	80074c4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	220b      	movs	r2, #11
 80072c8:	761a      	strb	r2, [r3, #24]
      break;
 80072ca:	e0fb      	b.n	80074c4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6899      	ldr	r1, [r3, #8]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	899a      	ldrh	r2, [r3, #12]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	791b      	ldrb	r3, [r3, #4]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 f93a 	bl	800755e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2204      	movs	r2, #4
 80072ee:	761a      	strb	r2, [r3, #24]
      break;
 80072f0:	e0f1      	b.n	80074d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	791b      	ldrb	r3, [r3, #4]
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 fc31 	bl	8007b60 <USBH_LL_GetURBState>
 80072fe:	4603      	mov	r3, r0
 8007300:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007302:	7bbb      	ldrb	r3, [r7, #14]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d102      	bne.n	800730e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2209      	movs	r2, #9
 800730c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800730e:	7bbb      	ldrb	r3, [r7, #14]
 8007310:	2b05      	cmp	r3, #5
 8007312:	d102      	bne.n	800731a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007314:	2303      	movs	r3, #3
 8007316:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007318:	e0d6      	b.n	80074c8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800731a:	7bbb      	ldrb	r3, [r7, #14]
 800731c:	2b04      	cmp	r3, #4
 800731e:	f040 80d3 	bne.w	80074c8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	220b      	movs	r2, #11
 8007326:	761a      	strb	r2, [r3, #24]
      break;
 8007328:	e0ce      	b.n	80074c8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6899      	ldr	r1, [r3, #8]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	899a      	ldrh	r2, [r3, #12]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	795b      	ldrb	r3, [r3, #5]
 8007336:	2001      	movs	r0, #1
 8007338:	9000      	str	r0, [sp, #0]
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f8ea 	bl	8007514 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007346:	b29a      	uxth	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2206      	movs	r2, #6
 8007350:	761a      	strb	r2, [r3, #24]
      break;
 8007352:	e0c0      	b.n	80074d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	795b      	ldrb	r3, [r3, #5]
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fc00 	bl	8007b60 <USBH_LL_GetURBState>
 8007360:	4603      	mov	r3, r0
 8007362:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007364:	7bbb      	ldrb	r3, [r7, #14]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d103      	bne.n	8007372 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2207      	movs	r2, #7
 800736e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007370:	e0ac      	b.n	80074cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007372:	7bbb      	ldrb	r3, [r7, #14]
 8007374:	2b05      	cmp	r3, #5
 8007376:	d105      	bne.n	8007384 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	220c      	movs	r2, #12
 800737c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800737e:	2303      	movs	r3, #3
 8007380:	73fb      	strb	r3, [r7, #15]
      break;
 8007382:	e0a3      	b.n	80074cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007384:	7bbb      	ldrb	r3, [r7, #14]
 8007386:	2b02      	cmp	r3, #2
 8007388:	d103      	bne.n	8007392 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2205      	movs	r2, #5
 800738e:	761a      	strb	r2, [r3, #24]
      break;
 8007390:	e09c      	b.n	80074cc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007392:	7bbb      	ldrb	r3, [r7, #14]
 8007394:	2b04      	cmp	r3, #4
 8007396:	f040 8099 	bne.w	80074cc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	220b      	movs	r2, #11
 800739e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80073a0:	2302      	movs	r3, #2
 80073a2:	73fb      	strb	r3, [r7, #15]
      break;
 80073a4:	e092      	b.n	80074cc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	791b      	ldrb	r3, [r3, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	2100      	movs	r1, #0
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f8d5 	bl	800755e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2208      	movs	r2, #8
 80073c4:	761a      	strb	r2, [r3, #24]

      break;
 80073c6:	e086      	b.n	80074d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	791b      	ldrb	r3, [r3, #4]
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fbc6 	bl	8007b60 <USBH_LL_GetURBState>
 80073d4:	4603      	mov	r3, r0
 80073d6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80073d8:	7bbb      	ldrb	r3, [r7, #14]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d105      	bne.n	80073ea <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	220d      	movs	r2, #13
 80073e2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80073e4:	2300      	movs	r3, #0
 80073e6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80073e8:	e072      	b.n	80074d0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80073ea:	7bbb      	ldrb	r3, [r7, #14]
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	d103      	bne.n	80073f8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	220b      	movs	r2, #11
 80073f4:	761a      	strb	r2, [r3, #24]
      break;
 80073f6:	e06b      	b.n	80074d0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80073f8:	7bbb      	ldrb	r3, [r7, #14]
 80073fa:	2b05      	cmp	r3, #5
 80073fc:	d168      	bne.n	80074d0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80073fe:	2303      	movs	r3, #3
 8007400:	73fb      	strb	r3, [r7, #15]
      break;
 8007402:	e065      	b.n	80074d0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	795b      	ldrb	r3, [r3, #5]
 8007408:	2201      	movs	r2, #1
 800740a:	9200      	str	r2, [sp, #0]
 800740c:	2200      	movs	r2, #0
 800740e:	2100      	movs	r1, #0
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f87f 	bl	8007514 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800741c:	b29a      	uxth	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	220a      	movs	r2, #10
 8007426:	761a      	strb	r2, [r3, #24]
      break;
 8007428:	e055      	b.n	80074d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	795b      	ldrb	r3, [r3, #5]
 800742e:	4619      	mov	r1, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fb95 	bl	8007b60 <USBH_LL_GetURBState>
 8007436:	4603      	mov	r3, r0
 8007438:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800743a:	7bbb      	ldrb	r3, [r7, #14]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d105      	bne.n	800744c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007440:	2300      	movs	r3, #0
 8007442:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	220d      	movs	r2, #13
 8007448:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800744a:	e043      	b.n	80074d4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800744c:	7bbb      	ldrb	r3, [r7, #14]
 800744e:	2b02      	cmp	r3, #2
 8007450:	d103      	bne.n	800745a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2209      	movs	r2, #9
 8007456:	761a      	strb	r2, [r3, #24]
      break;
 8007458:	e03c      	b.n	80074d4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800745a:	7bbb      	ldrb	r3, [r7, #14]
 800745c:	2b04      	cmp	r3, #4
 800745e:	d139      	bne.n	80074d4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	220b      	movs	r2, #11
 8007464:	761a      	strb	r2, [r3, #24]
      break;
 8007466:	e035      	b.n	80074d4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	7e5b      	ldrb	r3, [r3, #25]
 800746c:	3301      	adds	r3, #1
 800746e:	b2da      	uxtb	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	765a      	strb	r2, [r3, #25]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	7e5b      	ldrb	r3, [r3, #25]
 8007478:	2b02      	cmp	r3, #2
 800747a:	d806      	bhi.n	800748a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007488:	e025      	b.n	80074d6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007490:	2106      	movs	r1, #6
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	795b      	ldrb	r3, [r3, #5]
 80074a0:	4619      	mov	r1, r3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f90c 	bl	80076c0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	791b      	ldrb	r3, [r3, #4]
 80074ac:	4619      	mov	r1, r3
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f906 	bl	80076c0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80074ba:	2302      	movs	r3, #2
 80074bc:	73fb      	strb	r3, [r7, #15]
      break;
 80074be:	e00a      	b.n	80074d6 <USBH_HandleControl+0x2de>

    default:
      break;
 80074c0:	bf00      	nop
 80074c2:	e008      	b.n	80074d6 <USBH_HandleControl+0x2de>
      break;
 80074c4:	bf00      	nop
 80074c6:	e006      	b.n	80074d6 <USBH_HandleControl+0x2de>
      break;
 80074c8:	bf00      	nop
 80074ca:	e004      	b.n	80074d6 <USBH_HandleControl+0x2de>
      break;
 80074cc:	bf00      	nop
 80074ce:	e002      	b.n	80074d6 <USBH_HandleControl+0x2de>
      break;
 80074d0:	bf00      	nop
 80074d2:	e000      	b.n	80074d6 <USBH_HandleControl+0x2de>
      break;
 80074d4:	bf00      	nop
  }

  return status;
 80074d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b088      	sub	sp, #32
 80074e4:	af04      	add	r7, sp, #16
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	4613      	mov	r3, r2
 80074ec:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80074ee:	79f9      	ldrb	r1, [r7, #7]
 80074f0:	2300      	movs	r3, #0
 80074f2:	9303      	str	r3, [sp, #12]
 80074f4:	2308      	movs	r3, #8
 80074f6:	9302      	str	r3, [sp, #8]
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	9301      	str	r3, [sp, #4]
 80074fc:	2300      	movs	r3, #0
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	2300      	movs	r3, #0
 8007502:	2200      	movs	r2, #0
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f000 fafa 	bl	8007afe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b088      	sub	sp, #32
 8007518:	af04      	add	r7, sp, #16
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	4611      	mov	r1, r2
 8007520:	461a      	mov	r2, r3
 8007522:	460b      	mov	r3, r1
 8007524:	80fb      	strh	r3, [r7, #6]
 8007526:	4613      	mov	r3, r2
 8007528:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007530:	2b00      	cmp	r3, #0
 8007532:	d001      	beq.n	8007538 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007534:	2300      	movs	r3, #0
 8007536:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007538:	7979      	ldrb	r1, [r7, #5]
 800753a:	7e3b      	ldrb	r3, [r7, #24]
 800753c:	9303      	str	r3, [sp, #12]
 800753e:	88fb      	ldrh	r3, [r7, #6]
 8007540:	9302      	str	r3, [sp, #8]
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	9301      	str	r3, [sp, #4]
 8007546:	2301      	movs	r3, #1
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	2300      	movs	r3, #0
 800754c:	2200      	movs	r2, #0
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f000 fad5 	bl	8007afe <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b088      	sub	sp, #32
 8007562:	af04      	add	r7, sp, #16
 8007564:	60f8      	str	r0, [r7, #12]
 8007566:	60b9      	str	r1, [r7, #8]
 8007568:	4611      	mov	r1, r2
 800756a:	461a      	mov	r2, r3
 800756c:	460b      	mov	r3, r1
 800756e:	80fb      	strh	r3, [r7, #6]
 8007570:	4613      	mov	r3, r2
 8007572:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007574:	7979      	ldrb	r1, [r7, #5]
 8007576:	2300      	movs	r3, #0
 8007578:	9303      	str	r3, [sp, #12]
 800757a:	88fb      	ldrh	r3, [r7, #6]
 800757c:	9302      	str	r3, [sp, #8]
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	9301      	str	r3, [sp, #4]
 8007582:	2301      	movs	r3, #1
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	2300      	movs	r3, #0
 8007588:	2201      	movs	r2, #1
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f000 fab7 	bl	8007afe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007590:	2300      	movs	r3, #0

}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b088      	sub	sp, #32
 800759e:	af04      	add	r7, sp, #16
 80075a0:	60f8      	str	r0, [r7, #12]
 80075a2:	60b9      	str	r1, [r7, #8]
 80075a4:	4611      	mov	r1, r2
 80075a6:	461a      	mov	r2, r3
 80075a8:	460b      	mov	r3, r1
 80075aa:	80fb      	strh	r3, [r7, #6]
 80075ac:	4613      	mov	r3, r2
 80075ae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80075ba:	2300      	movs	r3, #0
 80075bc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80075be:	7979      	ldrb	r1, [r7, #5]
 80075c0:	7e3b      	ldrb	r3, [r7, #24]
 80075c2:	9303      	str	r3, [sp, #12]
 80075c4:	88fb      	ldrh	r3, [r7, #6]
 80075c6:	9302      	str	r3, [sp, #8]
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	9301      	str	r3, [sp, #4]
 80075cc:	2301      	movs	r3, #1
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	2302      	movs	r3, #2
 80075d2:	2200      	movs	r2, #0
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f000 fa92 	bl	8007afe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b088      	sub	sp, #32
 80075e8:	af04      	add	r7, sp, #16
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	4611      	mov	r1, r2
 80075f0:	461a      	mov	r2, r3
 80075f2:	460b      	mov	r3, r1
 80075f4:	80fb      	strh	r3, [r7, #6]
 80075f6:	4613      	mov	r3, r2
 80075f8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80075fa:	7979      	ldrb	r1, [r7, #5]
 80075fc:	2300      	movs	r3, #0
 80075fe:	9303      	str	r3, [sp, #12]
 8007600:	88fb      	ldrh	r3, [r7, #6]
 8007602:	9302      	str	r3, [sp, #8]
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	9301      	str	r3, [sp, #4]
 8007608:	2301      	movs	r3, #1
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	2302      	movs	r3, #2
 800760e:	2201      	movs	r2, #1
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f000 fa74 	bl	8007afe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b086      	sub	sp, #24
 8007624:	af04      	add	r7, sp, #16
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	4608      	mov	r0, r1
 800762a:	4611      	mov	r1, r2
 800762c:	461a      	mov	r2, r3
 800762e:	4603      	mov	r3, r0
 8007630:	70fb      	strb	r3, [r7, #3]
 8007632:	460b      	mov	r3, r1
 8007634:	70bb      	strb	r3, [r7, #2]
 8007636:	4613      	mov	r3, r2
 8007638:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800763a:	7878      	ldrb	r0, [r7, #1]
 800763c:	78ba      	ldrb	r2, [r7, #2]
 800763e:	78f9      	ldrb	r1, [r7, #3]
 8007640:	8b3b      	ldrh	r3, [r7, #24]
 8007642:	9302      	str	r3, [sp, #8]
 8007644:	7d3b      	ldrb	r3, [r7, #20]
 8007646:	9301      	str	r3, [sp, #4]
 8007648:	7c3b      	ldrb	r3, [r7, #16]
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	4603      	mov	r3, r0
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fa07 	bl	8007a62 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b082      	sub	sp, #8
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	460b      	mov	r3, r1
 8007668:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800766a:	78fb      	ldrb	r3, [r7, #3]
 800766c:	4619      	mov	r1, r3
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fa26 	bl	8007ac0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3708      	adds	r7, #8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b084      	sub	sp, #16
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	460b      	mov	r3, r1
 8007688:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f836 	bl	80076fc <USBH_GetFreePipe>
 8007690:	4603      	mov	r3, r0
 8007692:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007694:	89fb      	ldrh	r3, [r7, #14]
 8007696:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800769a:	4293      	cmp	r3, r2
 800769c:	d00a      	beq.n	80076b4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800769e:	78fa      	ldrb	r2, [r7, #3]
 80076a0:	89fb      	ldrh	r3, [r7, #14]
 80076a2:	f003 030f 	and.w	r3, r3, #15
 80076a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80076aa:	6879      	ldr	r1, [r7, #4]
 80076ac:	33e0      	adds	r3, #224	; 0xe0
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	440b      	add	r3, r1
 80076b2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80076b4:	89fb      	ldrh	r3, [r7, #14]
 80076b6:	b2db      	uxtb	r3, r3
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	460b      	mov	r3, r1
 80076ca:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80076cc:	78fb      	ldrb	r3, [r7, #3]
 80076ce:	2b0a      	cmp	r3, #10
 80076d0:	d80d      	bhi.n	80076ee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80076d2:	78fb      	ldrb	r3, [r7, #3]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	33e0      	adds	r3, #224	; 0xe0
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	78fb      	ldrb	r3, [r7, #3]
 80076e0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80076e4:	6879      	ldr	r1, [r7, #4]
 80076e6:	33e0      	adds	r3, #224	; 0xe0
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	440b      	add	r3, r1
 80076ec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007704:	2300      	movs	r3, #0
 8007706:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007708:	2300      	movs	r3, #0
 800770a:	73fb      	strb	r3, [r7, #15]
 800770c:	e00f      	b.n	800772e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800770e:	7bfb      	ldrb	r3, [r7, #15]
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	33e0      	adds	r3, #224	; 0xe0
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4413      	add	r3, r2
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d102      	bne.n	8007728 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007722:	7bfb      	ldrb	r3, [r7, #15]
 8007724:	b29b      	uxth	r3, r3
 8007726:	e007      	b.n	8007738 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007728:	7bfb      	ldrb	r3, [r7, #15]
 800772a:	3301      	adds	r3, #1
 800772c:	73fb      	strb	r3, [r7, #15]
 800772e:	7bfb      	ldrb	r3, [r7, #15]
 8007730:	2b0a      	cmp	r3, #10
 8007732:	d9ec      	bls.n	800770e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007734:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007738:	4618      	mov	r0, r3
 800773a:	3714      	adds	r7, #20
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007748:	2201      	movs	r2, #1
 800774a:	490e      	ldr	r1, [pc, #56]	; (8007784 <MX_USB_HOST_Init+0x40>)
 800774c:	480e      	ldr	r0, [pc, #56]	; (8007788 <MX_USB_HOST_Init+0x44>)
 800774e:	f7ff fb37 	bl	8006dc0 <USBH_Init>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007758:	f7f9 f98e 	bl	8000a78 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800775c:	490b      	ldr	r1, [pc, #44]	; (800778c <MX_USB_HOST_Init+0x48>)
 800775e:	480a      	ldr	r0, [pc, #40]	; (8007788 <MX_USB_HOST_Init+0x44>)
 8007760:	f7ff fbbc 	bl	8006edc <USBH_RegisterClass>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800776a:	f7f9 f985 	bl	8000a78 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800776e:	4806      	ldr	r0, [pc, #24]	; (8007788 <MX_USB_HOST_Init+0x44>)
 8007770:	f7ff fc40 	bl	8006ff4 <USBH_Start>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d001      	beq.n	800777e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800777a:	f7f9 f97d 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800777e:	bf00      	nop
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	08007791 	.word	0x08007791
 8007788:	200001fc 	.word	0x200001fc
 800778c:	2000000c 	.word	0x2000000c

08007790 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	460b      	mov	r3, r1
 800779a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800779c:	78fb      	ldrb	r3, [r7, #3]
 800779e:	3b01      	subs	r3, #1
 80077a0:	2b04      	cmp	r3, #4
 80077a2:	d819      	bhi.n	80077d8 <USBH_UserProcess+0x48>
 80077a4:	a201      	add	r2, pc, #4	; (adr r2, 80077ac <USBH_UserProcess+0x1c>)
 80077a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077aa:	bf00      	nop
 80077ac:	080077d9 	.word	0x080077d9
 80077b0:	080077c9 	.word	0x080077c9
 80077b4:	080077d9 	.word	0x080077d9
 80077b8:	080077d1 	.word	0x080077d1
 80077bc:	080077c1 	.word	0x080077c1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80077c0:	4b09      	ldr	r3, [pc, #36]	; (80077e8 <USBH_UserProcess+0x58>)
 80077c2:	2203      	movs	r2, #3
 80077c4:	701a      	strb	r2, [r3, #0]
  break;
 80077c6:	e008      	b.n	80077da <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80077c8:	4b07      	ldr	r3, [pc, #28]	; (80077e8 <USBH_UserProcess+0x58>)
 80077ca:	2202      	movs	r2, #2
 80077cc:	701a      	strb	r2, [r3, #0]
  break;
 80077ce:	e004      	b.n	80077da <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80077d0:	4b05      	ldr	r3, [pc, #20]	; (80077e8 <USBH_UserProcess+0x58>)
 80077d2:	2201      	movs	r2, #1
 80077d4:	701a      	strb	r2, [r3, #0]
  break;
 80077d6:	e000      	b.n	80077da <USBH_UserProcess+0x4a>

  default:
  break;
 80077d8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80077da:	bf00      	nop
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	200000b0 	.word	0x200000b0

080077ec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08a      	sub	sp, #40	; 0x28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077f4:	f107 0314 	add.w	r3, r7, #20
 80077f8:	2200      	movs	r2, #0
 80077fa:	601a      	str	r2, [r3, #0]
 80077fc:	605a      	str	r2, [r3, #4]
 80077fe:	609a      	str	r2, [r3, #8]
 8007800:	60da      	str	r2, [r3, #12]
 8007802:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800780c:	d147      	bne.n	800789e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800780e:	2300      	movs	r3, #0
 8007810:	613b      	str	r3, [r7, #16]
 8007812:	4b25      	ldr	r3, [pc, #148]	; (80078a8 <HAL_HCD_MspInit+0xbc>)
 8007814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007816:	4a24      	ldr	r2, [pc, #144]	; (80078a8 <HAL_HCD_MspInit+0xbc>)
 8007818:	f043 0301 	orr.w	r3, r3, #1
 800781c:	6313      	str	r3, [r2, #48]	; 0x30
 800781e:	4b22      	ldr	r3, [pc, #136]	; (80078a8 <HAL_HCD_MspInit+0xbc>)
 8007820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	613b      	str	r3, [r7, #16]
 8007828:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800782a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800782e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007830:	2300      	movs	r3, #0
 8007832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007834:	2300      	movs	r3, #0
 8007836:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007838:	f107 0314 	add.w	r3, r7, #20
 800783c:	4619      	mov	r1, r3
 800783e:	481b      	ldr	r0, [pc, #108]	; (80078ac <HAL_HCD_MspInit+0xc0>)
 8007840:	f7f9 fd08 	bl	8001254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007844:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800784a:	2302      	movs	r3, #2
 800784c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800784e:	2300      	movs	r3, #0
 8007850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007852:	2300      	movs	r3, #0
 8007854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007856:	230a      	movs	r3, #10
 8007858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800785a:	f107 0314 	add.w	r3, r7, #20
 800785e:	4619      	mov	r1, r3
 8007860:	4812      	ldr	r0, [pc, #72]	; (80078ac <HAL_HCD_MspInit+0xc0>)
 8007862:	f7f9 fcf7 	bl	8001254 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007866:	4b10      	ldr	r3, [pc, #64]	; (80078a8 <HAL_HCD_MspInit+0xbc>)
 8007868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800786a:	4a0f      	ldr	r2, [pc, #60]	; (80078a8 <HAL_HCD_MspInit+0xbc>)
 800786c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007870:	6353      	str	r3, [r2, #52]	; 0x34
 8007872:	2300      	movs	r3, #0
 8007874:	60fb      	str	r3, [r7, #12]
 8007876:	4b0c      	ldr	r3, [pc, #48]	; (80078a8 <HAL_HCD_MspInit+0xbc>)
 8007878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800787a:	4a0b      	ldr	r2, [pc, #44]	; (80078a8 <HAL_HCD_MspInit+0xbc>)
 800787c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007880:	6453      	str	r3, [r2, #68]	; 0x44
 8007882:	4b09      	ldr	r3, [pc, #36]	; (80078a8 <HAL_HCD_MspInit+0xbc>)
 8007884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800788a:	60fb      	str	r3, [r7, #12]
 800788c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800788e:	2200      	movs	r2, #0
 8007890:	2100      	movs	r1, #0
 8007892:	2043      	movs	r0, #67	; 0x43
 8007894:	f7f9 fca7 	bl	80011e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007898:	2043      	movs	r0, #67	; 0x43
 800789a:	f7f9 fcc0 	bl	800121e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800789e:	bf00      	nop
 80078a0:	3728      	adds	r7, #40	; 0x28
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	40023800 	.word	0x40023800
 80078ac:	40020000 	.word	0x40020000

080078b0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80078be:	4618      	mov	r0, r3
 80078c0:	f7ff fbb7 	bl	8007032 <USBH_LL_IncTimer>
}
 80078c4:	bf00      	nop
 80078c6:	3708      	adds	r7, #8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80078da:	4618      	mov	r0, r3
 80078dc:	f7ff fbef 	bl	80070be <USBH_LL_Connect>
}
 80078e0:	bf00      	nop
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7ff fbf8 	bl	80070ec <USBH_LL_Disconnect>
}
 80078fc:	bf00      	nop
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	460b      	mov	r3, r1
 800790e:	70fb      	strb	r3, [r7, #3]
 8007910:	4613      	mov	r3, r2
 8007912:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800792e:	4618      	mov	r0, r3
 8007930:	f7ff fba9 	bl	8007086 <USBH_LL_PortEnabled>
}
 8007934:	bf00      	nop
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800794a:	4618      	mov	r0, r3
 800794c:	f7ff fba9 	bl	80070a2 <USBH_LL_PortDisabled>
}
 8007950:	bf00      	nop
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007966:	2b01      	cmp	r3, #1
 8007968:	d12a      	bne.n	80079c0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800796a:	4a18      	ldr	r2, [pc, #96]	; (80079cc <USBH_LL_Init+0x74>)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a15      	ldr	r2, [pc, #84]	; (80079cc <USBH_LL_Init+0x74>)
 8007976:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800797a:	4b14      	ldr	r3, [pc, #80]	; (80079cc <USBH_LL_Init+0x74>)
 800797c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007980:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007982:	4b12      	ldr	r3, [pc, #72]	; (80079cc <USBH_LL_Init+0x74>)
 8007984:	2208      	movs	r2, #8
 8007986:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007988:	4b10      	ldr	r3, [pc, #64]	; (80079cc <USBH_LL_Init+0x74>)
 800798a:	2201      	movs	r2, #1
 800798c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800798e:	4b0f      	ldr	r3, [pc, #60]	; (80079cc <USBH_LL_Init+0x74>)
 8007990:	2200      	movs	r2, #0
 8007992:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007994:	4b0d      	ldr	r3, [pc, #52]	; (80079cc <USBH_LL_Init+0x74>)
 8007996:	2202      	movs	r2, #2
 8007998:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800799a:	4b0c      	ldr	r3, [pc, #48]	; (80079cc <USBH_LL_Init+0x74>)
 800799c:	2200      	movs	r2, #0
 800799e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80079a0:	480a      	ldr	r0, [pc, #40]	; (80079cc <USBH_LL_Init+0x74>)
 80079a2:	f7f9 fe0c 	bl	80015be <HAL_HCD_Init>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d001      	beq.n	80079b0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80079ac:	f7f9 f864 	bl	8000a78 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80079b0:	4806      	ldr	r0, [pc, #24]	; (80079cc <USBH_LL_Init+0x74>)
 80079b2:	f7fa f9db 	bl	8001d6c <HAL_HCD_GetCurrentFrame>
 80079b6:	4603      	mov	r3, r0
 80079b8:	4619      	mov	r1, r3
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7ff fb2a 	bl	8007014 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	200005d4 	.word	0x200005d4

080079d0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079d8:	2300      	movs	r3, #0
 80079da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079dc:	2300      	movs	r3, #0
 80079de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fa f958 	bl	8001c9c <HAL_HCD_Start>
 80079ec:	4603      	mov	r3, r0
 80079ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80079f0:	7bfb      	ldrb	r3, [r7, #15]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 f90e 	bl	8007c14 <USBH_Get_USB_Status>
 80079f8:	4603      	mov	r3, r0
 80079fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b084      	sub	sp, #16
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7fa f960 	bl	8001ce2 <HAL_HCD_Stop>
 8007a22:	4603      	mov	r3, r0
 8007a24:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f000 f8f3 	bl	8007c14 <USBH_Get_USB_Status>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a32:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	460b      	mov	r3, r1
 8007a46:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a4e:	78fa      	ldrb	r2, [r7, #3]
 8007a50:	4611      	mov	r1, r2
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fa f976 	bl	8001d44 <HAL_HCD_HC_GetXferCount>
 8007a58:	4603      	mov	r3, r0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3708      	adds	r7, #8
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007a62:	b590      	push	{r4, r7, lr}
 8007a64:	b089      	sub	sp, #36	; 0x24
 8007a66:	af04      	add	r7, sp, #16
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	4608      	mov	r0, r1
 8007a6c:	4611      	mov	r1, r2
 8007a6e:	461a      	mov	r2, r3
 8007a70:	4603      	mov	r3, r0
 8007a72:	70fb      	strb	r3, [r7, #3]
 8007a74:	460b      	mov	r3, r1
 8007a76:	70bb      	strb	r3, [r7, #2]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007a8a:	787c      	ldrb	r4, [r7, #1]
 8007a8c:	78ba      	ldrb	r2, [r7, #2]
 8007a8e:	78f9      	ldrb	r1, [r7, #3]
 8007a90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a92:	9302      	str	r3, [sp, #8]
 8007a94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007a98:	9301      	str	r3, [sp, #4]
 8007a9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	4623      	mov	r3, r4
 8007aa2:	f7f9 fdee 	bl	8001682 <HAL_HCD_HC_Init>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007aaa:	7bfb      	ldrb	r3, [r7, #15]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f000 f8b1 	bl	8007c14 <USBH_Get_USB_Status>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ab6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd90      	pop	{r4, r7, pc}

08007ac0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007acc:	2300      	movs	r3, #0
 8007ace:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ada:	78fa      	ldrb	r2, [r7, #3]
 8007adc:	4611      	mov	r1, r2
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7f9 fe5e 	bl	80017a0 <HAL_HCD_HC_Halt>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 f892 	bl	8007c14 <USBH_Get_USB_Status>
 8007af0:	4603      	mov	r3, r0
 8007af2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007af4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007afe:	b590      	push	{r4, r7, lr}
 8007b00:	b089      	sub	sp, #36	; 0x24
 8007b02:	af04      	add	r7, sp, #16
 8007b04:	6078      	str	r0, [r7, #4]
 8007b06:	4608      	mov	r0, r1
 8007b08:	4611      	mov	r1, r2
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	70fb      	strb	r3, [r7, #3]
 8007b10:	460b      	mov	r3, r1
 8007b12:	70bb      	strb	r3, [r7, #2]
 8007b14:	4613      	mov	r3, r2
 8007b16:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007b26:	787c      	ldrb	r4, [r7, #1]
 8007b28:	78ba      	ldrb	r2, [r7, #2]
 8007b2a:	78f9      	ldrb	r1, [r7, #3]
 8007b2c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007b30:	9303      	str	r3, [sp, #12]
 8007b32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b34:	9302      	str	r3, [sp, #8]
 8007b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b38:	9301      	str	r3, [sp, #4]
 8007b3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	4623      	mov	r3, r4
 8007b42:	f7f9 fe51 	bl	80017e8 <HAL_HCD_HC_SubmitRequest>
 8007b46:	4603      	mov	r3, r0
 8007b48:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007b4a:	7bfb      	ldrb	r3, [r7, #15]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f000 f861 	bl	8007c14 <USBH_Get_USB_Status>
 8007b52:	4603      	mov	r3, r0
 8007b54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b56:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3714      	adds	r7, #20
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd90      	pop	{r4, r7, pc}

08007b60 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b72:	78fa      	ldrb	r2, [r7, #3]
 8007b74:	4611      	mov	r1, r2
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fa f8d0 	bl	8001d1c <HAL_HCD_HC_GetURBState>
 8007b7c:	4603      	mov	r3, r0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3708      	adds	r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b082      	sub	sp, #8
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
 8007b8e:	460b      	mov	r3, r1
 8007b90:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d103      	bne.n	8007ba4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007b9c:	78fb      	ldrb	r3, [r7, #3]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f000 f864 	bl	8007c6c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007ba4:	20c8      	movs	r0, #200	; 0xc8
 8007ba6:	f7f9 fa1f 	bl	8000fe8 <HAL_Delay>
  return USBH_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	70fb      	strb	r3, [r7, #3]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007bca:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007bcc:	78fb      	ldrb	r3, [r7, #3]
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	212c      	movs	r1, #44	; 0x2c
 8007bd2:	fb01 f303 	mul.w	r3, r1, r3
 8007bd6:	4413      	add	r3, r2
 8007bd8:	333b      	adds	r3, #59	; 0x3b
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d009      	beq.n	8007bf4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007be0:	78fb      	ldrb	r3, [r7, #3]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	212c      	movs	r1, #44	; 0x2c
 8007be6:	fb01 f303 	mul.w	r3, r1, r3
 8007bea:	4413      	add	r3, r2
 8007bec:	3354      	adds	r3, #84	; 0x54
 8007bee:	78ba      	ldrb	r2, [r7, #2]
 8007bf0:	701a      	strb	r2, [r3, #0]
 8007bf2:	e008      	b.n	8007c06 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007bf4:	78fb      	ldrb	r3, [r7, #3]
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	212c      	movs	r1, #44	; 0x2c
 8007bfa:	fb01 f303 	mul.w	r3, r1, r3
 8007bfe:	4413      	add	r3, r2
 8007c00:	3355      	adds	r3, #85	; 0x55
 8007c02:	78ba      	ldrb	r2, [r7, #2]
 8007c04:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007c22:	79fb      	ldrb	r3, [r7, #7]
 8007c24:	2b03      	cmp	r3, #3
 8007c26:	d817      	bhi.n	8007c58 <USBH_Get_USB_Status+0x44>
 8007c28:	a201      	add	r2, pc, #4	; (adr r2, 8007c30 <USBH_Get_USB_Status+0x1c>)
 8007c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2e:	bf00      	nop
 8007c30:	08007c41 	.word	0x08007c41
 8007c34:	08007c47 	.word	0x08007c47
 8007c38:	08007c4d 	.word	0x08007c4d
 8007c3c:	08007c53 	.word	0x08007c53
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007c40:	2300      	movs	r3, #0
 8007c42:	73fb      	strb	r3, [r7, #15]
    break;
 8007c44:	e00b      	b.n	8007c5e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007c46:	2302      	movs	r3, #2
 8007c48:	73fb      	strb	r3, [r7, #15]
    break;
 8007c4a:	e008      	b.n	8007c5e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c50:	e005      	b.n	8007c5e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007c52:	2302      	movs	r3, #2
 8007c54:	73fb      	strb	r3, [r7, #15]
    break;
 8007c56:	e002      	b.n	8007c5e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007c58:	2302      	movs	r3, #2
 8007c5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c5c:	bf00      	nop
  }
  return usb_status;
 8007c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3714      	adds	r7, #20
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	4603      	mov	r3, r0
 8007c74:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007c76:	79fb      	ldrb	r3, [r7, #7]
 8007c78:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007c7a:	79fb      	ldrb	r3, [r7, #7]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d102      	bne.n	8007c86 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8007c80:	2301      	movs	r3, #1
 8007c82:	73fb      	strb	r3, [r7, #15]
 8007c84:	e001      	b.n	8007c8a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8007c86:	2300      	movs	r3, #0
 8007c88:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007c8a:	7bfb      	ldrb	r3, [r7, #15]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	2101      	movs	r1, #1
 8007c90:	4803      	ldr	r0, [pc, #12]	; (8007ca0 <MX_DriverVbusFS+0x34>)
 8007c92:	f7f9 fc7b 	bl	800158c <HAL_GPIO_WritePin>
}
 8007c96:	bf00      	nop
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	40020800 	.word	0x40020800

08007ca4 <__errno>:
 8007ca4:	4b01      	ldr	r3, [pc, #4]	; (8007cac <__errno+0x8>)
 8007ca6:	6818      	ldr	r0, [r3, #0]
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	2000002c 	.word	0x2000002c

08007cb0 <__libc_init_array>:
 8007cb0:	b570      	push	{r4, r5, r6, lr}
 8007cb2:	4d0d      	ldr	r5, [pc, #52]	; (8007ce8 <__libc_init_array+0x38>)
 8007cb4:	4c0d      	ldr	r4, [pc, #52]	; (8007cec <__libc_init_array+0x3c>)
 8007cb6:	1b64      	subs	r4, r4, r5
 8007cb8:	10a4      	asrs	r4, r4, #2
 8007cba:	2600      	movs	r6, #0
 8007cbc:	42a6      	cmp	r6, r4
 8007cbe:	d109      	bne.n	8007cd4 <__libc_init_array+0x24>
 8007cc0:	4d0b      	ldr	r5, [pc, #44]	; (8007cf0 <__libc_init_array+0x40>)
 8007cc2:	4c0c      	ldr	r4, [pc, #48]	; (8007cf4 <__libc_init_array+0x44>)
 8007cc4:	f000 f8f8 	bl	8007eb8 <_init>
 8007cc8:	1b64      	subs	r4, r4, r5
 8007cca:	10a4      	asrs	r4, r4, #2
 8007ccc:	2600      	movs	r6, #0
 8007cce:	42a6      	cmp	r6, r4
 8007cd0:	d105      	bne.n	8007cde <__libc_init_array+0x2e>
 8007cd2:	bd70      	pop	{r4, r5, r6, pc}
 8007cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cd8:	4798      	blx	r3
 8007cda:	3601      	adds	r6, #1
 8007cdc:	e7ee      	b.n	8007cbc <__libc_init_array+0xc>
 8007cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ce2:	4798      	blx	r3
 8007ce4:	3601      	adds	r6, #1
 8007ce6:	e7f2      	b.n	8007cce <__libc_init_array+0x1e>
 8007ce8:	08007ef4 	.word	0x08007ef4
 8007cec:	08007ef4 	.word	0x08007ef4
 8007cf0:	08007ef4 	.word	0x08007ef4
 8007cf4:	08007ef8 	.word	0x08007ef8

08007cf8 <malloc>:
 8007cf8:	4b02      	ldr	r3, [pc, #8]	; (8007d04 <malloc+0xc>)
 8007cfa:	4601      	mov	r1, r0
 8007cfc:	6818      	ldr	r0, [r3, #0]
 8007cfe:	f000 b863 	b.w	8007dc8 <_malloc_r>
 8007d02:	bf00      	nop
 8007d04:	2000002c 	.word	0x2000002c

08007d08 <free>:
 8007d08:	4b02      	ldr	r3, [pc, #8]	; (8007d14 <free+0xc>)
 8007d0a:	4601      	mov	r1, r0
 8007d0c:	6818      	ldr	r0, [r3, #0]
 8007d0e:	f000 b80b 	b.w	8007d28 <_free_r>
 8007d12:	bf00      	nop
 8007d14:	2000002c 	.word	0x2000002c

08007d18 <memset>:
 8007d18:	4402      	add	r2, r0
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d100      	bne.n	8007d22 <memset+0xa>
 8007d20:	4770      	bx	lr
 8007d22:	f803 1b01 	strb.w	r1, [r3], #1
 8007d26:	e7f9      	b.n	8007d1c <memset+0x4>

08007d28 <_free_r>:
 8007d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d2a:	2900      	cmp	r1, #0
 8007d2c:	d048      	beq.n	8007dc0 <_free_r+0x98>
 8007d2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d32:	9001      	str	r0, [sp, #4]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f1a1 0404 	sub.w	r4, r1, #4
 8007d3a:	bfb8      	it	lt
 8007d3c:	18e4      	addlt	r4, r4, r3
 8007d3e:	f000 f8ad 	bl	8007e9c <__malloc_lock>
 8007d42:	4a20      	ldr	r2, [pc, #128]	; (8007dc4 <_free_r+0x9c>)
 8007d44:	9801      	ldr	r0, [sp, #4]
 8007d46:	6813      	ldr	r3, [r2, #0]
 8007d48:	4615      	mov	r5, r2
 8007d4a:	b933      	cbnz	r3, 8007d5a <_free_r+0x32>
 8007d4c:	6063      	str	r3, [r4, #4]
 8007d4e:	6014      	str	r4, [r2, #0]
 8007d50:	b003      	add	sp, #12
 8007d52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d56:	f000 b8a7 	b.w	8007ea8 <__malloc_unlock>
 8007d5a:	42a3      	cmp	r3, r4
 8007d5c:	d90b      	bls.n	8007d76 <_free_r+0x4e>
 8007d5e:	6821      	ldr	r1, [r4, #0]
 8007d60:	1862      	adds	r2, r4, r1
 8007d62:	4293      	cmp	r3, r2
 8007d64:	bf04      	itt	eq
 8007d66:	681a      	ldreq	r2, [r3, #0]
 8007d68:	685b      	ldreq	r3, [r3, #4]
 8007d6a:	6063      	str	r3, [r4, #4]
 8007d6c:	bf04      	itt	eq
 8007d6e:	1852      	addeq	r2, r2, r1
 8007d70:	6022      	streq	r2, [r4, #0]
 8007d72:	602c      	str	r4, [r5, #0]
 8007d74:	e7ec      	b.n	8007d50 <_free_r+0x28>
 8007d76:	461a      	mov	r2, r3
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	b10b      	cbz	r3, 8007d80 <_free_r+0x58>
 8007d7c:	42a3      	cmp	r3, r4
 8007d7e:	d9fa      	bls.n	8007d76 <_free_r+0x4e>
 8007d80:	6811      	ldr	r1, [r2, #0]
 8007d82:	1855      	adds	r5, r2, r1
 8007d84:	42a5      	cmp	r5, r4
 8007d86:	d10b      	bne.n	8007da0 <_free_r+0x78>
 8007d88:	6824      	ldr	r4, [r4, #0]
 8007d8a:	4421      	add	r1, r4
 8007d8c:	1854      	adds	r4, r2, r1
 8007d8e:	42a3      	cmp	r3, r4
 8007d90:	6011      	str	r1, [r2, #0]
 8007d92:	d1dd      	bne.n	8007d50 <_free_r+0x28>
 8007d94:	681c      	ldr	r4, [r3, #0]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	6053      	str	r3, [r2, #4]
 8007d9a:	4421      	add	r1, r4
 8007d9c:	6011      	str	r1, [r2, #0]
 8007d9e:	e7d7      	b.n	8007d50 <_free_r+0x28>
 8007da0:	d902      	bls.n	8007da8 <_free_r+0x80>
 8007da2:	230c      	movs	r3, #12
 8007da4:	6003      	str	r3, [r0, #0]
 8007da6:	e7d3      	b.n	8007d50 <_free_r+0x28>
 8007da8:	6825      	ldr	r5, [r4, #0]
 8007daa:	1961      	adds	r1, r4, r5
 8007dac:	428b      	cmp	r3, r1
 8007dae:	bf04      	itt	eq
 8007db0:	6819      	ldreq	r1, [r3, #0]
 8007db2:	685b      	ldreq	r3, [r3, #4]
 8007db4:	6063      	str	r3, [r4, #4]
 8007db6:	bf04      	itt	eq
 8007db8:	1949      	addeq	r1, r1, r5
 8007dba:	6021      	streq	r1, [r4, #0]
 8007dbc:	6054      	str	r4, [r2, #4]
 8007dbe:	e7c7      	b.n	8007d50 <_free_r+0x28>
 8007dc0:	b003      	add	sp, #12
 8007dc2:	bd30      	pop	{r4, r5, pc}
 8007dc4:	200000b4 	.word	0x200000b4

08007dc8 <_malloc_r>:
 8007dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dca:	1ccd      	adds	r5, r1, #3
 8007dcc:	f025 0503 	bic.w	r5, r5, #3
 8007dd0:	3508      	adds	r5, #8
 8007dd2:	2d0c      	cmp	r5, #12
 8007dd4:	bf38      	it	cc
 8007dd6:	250c      	movcc	r5, #12
 8007dd8:	2d00      	cmp	r5, #0
 8007dda:	4606      	mov	r6, r0
 8007ddc:	db01      	blt.n	8007de2 <_malloc_r+0x1a>
 8007dde:	42a9      	cmp	r1, r5
 8007de0:	d903      	bls.n	8007dea <_malloc_r+0x22>
 8007de2:	230c      	movs	r3, #12
 8007de4:	6033      	str	r3, [r6, #0]
 8007de6:	2000      	movs	r0, #0
 8007de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dea:	f000 f857 	bl	8007e9c <__malloc_lock>
 8007dee:	4921      	ldr	r1, [pc, #132]	; (8007e74 <_malloc_r+0xac>)
 8007df0:	680a      	ldr	r2, [r1, #0]
 8007df2:	4614      	mov	r4, r2
 8007df4:	b99c      	cbnz	r4, 8007e1e <_malloc_r+0x56>
 8007df6:	4f20      	ldr	r7, [pc, #128]	; (8007e78 <_malloc_r+0xb0>)
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	b923      	cbnz	r3, 8007e06 <_malloc_r+0x3e>
 8007dfc:	4621      	mov	r1, r4
 8007dfe:	4630      	mov	r0, r6
 8007e00:	f000 f83c 	bl	8007e7c <_sbrk_r>
 8007e04:	6038      	str	r0, [r7, #0]
 8007e06:	4629      	mov	r1, r5
 8007e08:	4630      	mov	r0, r6
 8007e0a:	f000 f837 	bl	8007e7c <_sbrk_r>
 8007e0e:	1c43      	adds	r3, r0, #1
 8007e10:	d123      	bne.n	8007e5a <_malloc_r+0x92>
 8007e12:	230c      	movs	r3, #12
 8007e14:	6033      	str	r3, [r6, #0]
 8007e16:	4630      	mov	r0, r6
 8007e18:	f000 f846 	bl	8007ea8 <__malloc_unlock>
 8007e1c:	e7e3      	b.n	8007de6 <_malloc_r+0x1e>
 8007e1e:	6823      	ldr	r3, [r4, #0]
 8007e20:	1b5b      	subs	r3, r3, r5
 8007e22:	d417      	bmi.n	8007e54 <_malloc_r+0x8c>
 8007e24:	2b0b      	cmp	r3, #11
 8007e26:	d903      	bls.n	8007e30 <_malloc_r+0x68>
 8007e28:	6023      	str	r3, [r4, #0]
 8007e2a:	441c      	add	r4, r3
 8007e2c:	6025      	str	r5, [r4, #0]
 8007e2e:	e004      	b.n	8007e3a <_malloc_r+0x72>
 8007e30:	6863      	ldr	r3, [r4, #4]
 8007e32:	42a2      	cmp	r2, r4
 8007e34:	bf0c      	ite	eq
 8007e36:	600b      	streq	r3, [r1, #0]
 8007e38:	6053      	strne	r3, [r2, #4]
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	f000 f834 	bl	8007ea8 <__malloc_unlock>
 8007e40:	f104 000b 	add.w	r0, r4, #11
 8007e44:	1d23      	adds	r3, r4, #4
 8007e46:	f020 0007 	bic.w	r0, r0, #7
 8007e4a:	1ac2      	subs	r2, r0, r3
 8007e4c:	d0cc      	beq.n	8007de8 <_malloc_r+0x20>
 8007e4e:	1a1b      	subs	r3, r3, r0
 8007e50:	50a3      	str	r3, [r4, r2]
 8007e52:	e7c9      	b.n	8007de8 <_malloc_r+0x20>
 8007e54:	4622      	mov	r2, r4
 8007e56:	6864      	ldr	r4, [r4, #4]
 8007e58:	e7cc      	b.n	8007df4 <_malloc_r+0x2c>
 8007e5a:	1cc4      	adds	r4, r0, #3
 8007e5c:	f024 0403 	bic.w	r4, r4, #3
 8007e60:	42a0      	cmp	r0, r4
 8007e62:	d0e3      	beq.n	8007e2c <_malloc_r+0x64>
 8007e64:	1a21      	subs	r1, r4, r0
 8007e66:	4630      	mov	r0, r6
 8007e68:	f000 f808 	bl	8007e7c <_sbrk_r>
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	d1dd      	bne.n	8007e2c <_malloc_r+0x64>
 8007e70:	e7cf      	b.n	8007e12 <_malloc_r+0x4a>
 8007e72:	bf00      	nop
 8007e74:	200000b4 	.word	0x200000b4
 8007e78:	200000b8 	.word	0x200000b8

08007e7c <_sbrk_r>:
 8007e7c:	b538      	push	{r3, r4, r5, lr}
 8007e7e:	4d06      	ldr	r5, [pc, #24]	; (8007e98 <_sbrk_r+0x1c>)
 8007e80:	2300      	movs	r3, #0
 8007e82:	4604      	mov	r4, r0
 8007e84:	4608      	mov	r0, r1
 8007e86:	602b      	str	r3, [r5, #0]
 8007e88:	f7f8 ffca 	bl	8000e20 <_sbrk>
 8007e8c:	1c43      	adds	r3, r0, #1
 8007e8e:	d102      	bne.n	8007e96 <_sbrk_r+0x1a>
 8007e90:	682b      	ldr	r3, [r5, #0]
 8007e92:	b103      	cbz	r3, 8007e96 <_sbrk_r+0x1a>
 8007e94:	6023      	str	r3, [r4, #0]
 8007e96:	bd38      	pop	{r3, r4, r5, pc}
 8007e98:	200008d8 	.word	0x200008d8

08007e9c <__malloc_lock>:
 8007e9c:	4801      	ldr	r0, [pc, #4]	; (8007ea4 <__malloc_lock+0x8>)
 8007e9e:	f000 b809 	b.w	8007eb4 <__retarget_lock_acquire_recursive>
 8007ea2:	bf00      	nop
 8007ea4:	200008e0 	.word	0x200008e0

08007ea8 <__malloc_unlock>:
 8007ea8:	4801      	ldr	r0, [pc, #4]	; (8007eb0 <__malloc_unlock+0x8>)
 8007eaa:	f000 b804 	b.w	8007eb6 <__retarget_lock_release_recursive>
 8007eae:	bf00      	nop
 8007eb0:	200008e0 	.word	0x200008e0

08007eb4 <__retarget_lock_acquire_recursive>:
 8007eb4:	4770      	bx	lr

08007eb6 <__retarget_lock_release_recursive>:
 8007eb6:	4770      	bx	lr

08007eb8 <_init>:
 8007eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eba:	bf00      	nop
 8007ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ebe:	bc08      	pop	{r3}
 8007ec0:	469e      	mov	lr, r3
 8007ec2:	4770      	bx	lr

08007ec4 <_fini>:
 8007ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ec6:	bf00      	nop
 8007ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eca:	bc08      	pop	{r3}
 8007ecc:	469e      	mov	lr, r3
 8007ece:	4770      	bx	lr
