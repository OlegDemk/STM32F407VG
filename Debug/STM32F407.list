
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2c4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002500  0800d450  0800d450  0001d450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f950  0800f950  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  0800f950  0800f950  0001f950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f958  0800f958  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f958  0800f958  0001f958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f95c  0800f95c  0001f95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  0800f960  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c44  20000130  0800fa90  00020130  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000d74  0800fa90  00020d74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027a51  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005440  00000000  00000000  00047bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a20  00000000  00000000  0004cff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001820  00000000  00000000  0004ea18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027052  00000000  00000000  00050238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000257fe  00000000  00000000  0007728a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7422  00000000  00000000  0009ca88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00173eaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071e8  00000000  00000000  00173f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000130 	.word	0x20000130
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d434 	.word	0x0800d434

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000134 	.word	0x20000134
 80001c4:	0800d434 	.word	0x0800d434

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_uldivmod>:
 8000aa0:	b953      	cbnz	r3, 8000ab8 <__aeabi_uldivmod+0x18>
 8000aa2:	b94a      	cbnz	r2, 8000ab8 <__aeabi_uldivmod+0x18>
 8000aa4:	2900      	cmp	r1, #0
 8000aa6:	bf08      	it	eq
 8000aa8:	2800      	cmpeq	r0, #0
 8000aaa:	bf1c      	itt	ne
 8000aac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ab0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ab4:	f000 b96e 	b.w	8000d94 <__aeabi_idiv0>
 8000ab8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000abc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac0:	f000 f806 	bl	8000ad0 <__udivmoddi4>
 8000ac4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000acc:	b004      	add	sp, #16
 8000ace:	4770      	bx	lr

08000ad0 <__udivmoddi4>:
 8000ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad4:	9d08      	ldr	r5, [sp, #32]
 8000ad6:	4604      	mov	r4, r0
 8000ad8:	468c      	mov	ip, r1
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f040 8083 	bne.w	8000be6 <__udivmoddi4+0x116>
 8000ae0:	428a      	cmp	r2, r1
 8000ae2:	4617      	mov	r7, r2
 8000ae4:	d947      	bls.n	8000b76 <__udivmoddi4+0xa6>
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	b142      	cbz	r2, 8000afe <__udivmoddi4+0x2e>
 8000aec:	f1c2 0020 	rsb	r0, r2, #32
 8000af0:	fa24 f000 	lsr.w	r0, r4, r0
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4097      	lsls	r7, r2
 8000af8:	ea40 0c01 	orr.w	ip, r0, r1
 8000afc:	4094      	lsls	r4, r2
 8000afe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b02:	0c23      	lsrs	r3, r4, #16
 8000b04:	fbbc f6f8 	udiv	r6, ip, r8
 8000b08:	fa1f fe87 	uxth.w	lr, r7
 8000b0c:	fb08 c116 	mls	r1, r8, r6, ip
 8000b10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b14:	fb06 f10e 	mul.w	r1, r6, lr
 8000b18:	4299      	cmp	r1, r3
 8000b1a:	d909      	bls.n	8000b30 <__udivmoddi4+0x60>
 8000b1c:	18fb      	adds	r3, r7, r3
 8000b1e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b22:	f080 8119 	bcs.w	8000d58 <__udivmoddi4+0x288>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 8116 	bls.w	8000d58 <__udivmoddi4+0x288>
 8000b2c:	3e02      	subs	r6, #2
 8000b2e:	443b      	add	r3, r7
 8000b30:	1a5b      	subs	r3, r3, r1
 8000b32:	b2a4      	uxth	r4, r4
 8000b34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b38:	fb08 3310 	mls	r3, r8, r0, r3
 8000b3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b44:	45a6      	cmp	lr, r4
 8000b46:	d909      	bls.n	8000b5c <__udivmoddi4+0x8c>
 8000b48:	193c      	adds	r4, r7, r4
 8000b4a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b4e:	f080 8105 	bcs.w	8000d5c <__udivmoddi4+0x28c>
 8000b52:	45a6      	cmp	lr, r4
 8000b54:	f240 8102 	bls.w	8000d5c <__udivmoddi4+0x28c>
 8000b58:	3802      	subs	r0, #2
 8000b5a:	443c      	add	r4, r7
 8000b5c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b60:	eba4 040e 	sub.w	r4, r4, lr
 8000b64:	2600      	movs	r6, #0
 8000b66:	b11d      	cbz	r5, 8000b70 <__udivmoddi4+0xa0>
 8000b68:	40d4      	lsrs	r4, r2
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	b902      	cbnz	r2, 8000b7a <__udivmoddi4+0xaa>
 8000b78:	deff      	udf	#255	; 0xff
 8000b7a:	fab2 f282 	clz	r2, r2
 8000b7e:	2a00      	cmp	r2, #0
 8000b80:	d150      	bne.n	8000c24 <__udivmoddi4+0x154>
 8000b82:	1bcb      	subs	r3, r1, r7
 8000b84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b88:	fa1f f887 	uxth.w	r8, r7
 8000b8c:	2601      	movs	r6, #1
 8000b8e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b92:	0c21      	lsrs	r1, r4, #16
 8000b94:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b9c:	fb08 f30c 	mul.w	r3, r8, ip
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	d907      	bls.n	8000bb4 <__udivmoddi4+0xe4>
 8000ba4:	1879      	adds	r1, r7, r1
 8000ba6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000baa:	d202      	bcs.n	8000bb2 <__udivmoddi4+0xe2>
 8000bac:	428b      	cmp	r3, r1
 8000bae:	f200 80e9 	bhi.w	8000d84 <__udivmoddi4+0x2b4>
 8000bb2:	4684      	mov	ip, r0
 8000bb4:	1ac9      	subs	r1, r1, r3
 8000bb6:	b2a3      	uxth	r3, r4
 8000bb8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bbc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bc0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bc4:	fb08 f800 	mul.w	r8, r8, r0
 8000bc8:	45a0      	cmp	r8, r4
 8000bca:	d907      	bls.n	8000bdc <__udivmoddi4+0x10c>
 8000bcc:	193c      	adds	r4, r7, r4
 8000bce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bd2:	d202      	bcs.n	8000bda <__udivmoddi4+0x10a>
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	f200 80d9 	bhi.w	8000d8c <__udivmoddi4+0x2bc>
 8000bda:	4618      	mov	r0, r3
 8000bdc:	eba4 0408 	sub.w	r4, r4, r8
 8000be0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be4:	e7bf      	b.n	8000b66 <__udivmoddi4+0x96>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0x12e>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	f000 80b1 	beq.w	8000d52 <__udivmoddi4+0x282>
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f683 	clz	r6, r3
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d14a      	bne.n	8000c9c <__udivmoddi4+0x1cc>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0x140>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80b8 	bhi.w	8000d80 <__udivmoddi4+0x2b0>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0103 	sbc.w	r1, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	468c      	mov	ip, r1
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d0a8      	beq.n	8000b70 <__udivmoddi4+0xa0>
 8000c1e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c22:	e7a5      	b.n	8000b70 <__udivmoddi4+0xa0>
 8000c24:	f1c2 0320 	rsb	r3, r2, #32
 8000c28:	fa20 f603 	lsr.w	r6, r0, r3
 8000c2c:	4097      	lsls	r7, r2
 8000c2e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c32:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c36:	40d9      	lsrs	r1, r3
 8000c38:	4330      	orrs	r0, r6
 8000c3a:	0c03      	lsrs	r3, r0, #16
 8000c3c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c40:	fa1f f887 	uxth.w	r8, r7
 8000c44:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb06 f108 	mul.w	r1, r6, r8
 8000c50:	4299      	cmp	r1, r3
 8000c52:	fa04 f402 	lsl.w	r4, r4, r2
 8000c56:	d909      	bls.n	8000c6c <__udivmoddi4+0x19c>
 8000c58:	18fb      	adds	r3, r7, r3
 8000c5a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c5e:	f080 808d 	bcs.w	8000d7c <__udivmoddi4+0x2ac>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 808a 	bls.w	8000d7c <__udivmoddi4+0x2ac>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	443b      	add	r3, r7
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b281      	uxth	r1, r0
 8000c70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7c:	fb00 f308 	mul.w	r3, r0, r8
 8000c80:	428b      	cmp	r3, r1
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x1c4>
 8000c84:	1879      	adds	r1, r7, r1
 8000c86:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c8a:	d273      	bcs.n	8000d74 <__udivmoddi4+0x2a4>
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d971      	bls.n	8000d74 <__udivmoddi4+0x2a4>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4439      	add	r1, r7
 8000c94:	1acb      	subs	r3, r1, r3
 8000c96:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c9a:	e778      	b.n	8000b8e <__udivmoddi4+0xbe>
 8000c9c:	f1c6 0c20 	rsb	ip, r6, #32
 8000ca0:	fa03 f406 	lsl.w	r4, r3, r6
 8000ca4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ca8:	431c      	orrs	r4, r3
 8000caa:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cae:	fa01 f306 	lsl.w	r3, r1, r6
 8000cb2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cb6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cba:	431f      	orrs	r7, r3
 8000cbc:	0c3b      	lsrs	r3, r7, #16
 8000cbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cc2:	fa1f f884 	uxth.w	r8, r4
 8000cc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cce:	fb09 fa08 	mul.w	sl, r9, r8
 8000cd2:	458a      	cmp	sl, r1
 8000cd4:	fa02 f206 	lsl.w	r2, r2, r6
 8000cd8:	fa00 f306 	lsl.w	r3, r0, r6
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x220>
 8000cde:	1861      	adds	r1, r4, r1
 8000ce0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ce4:	d248      	bcs.n	8000d78 <__udivmoddi4+0x2a8>
 8000ce6:	458a      	cmp	sl, r1
 8000ce8:	d946      	bls.n	8000d78 <__udivmoddi4+0x2a8>
 8000cea:	f1a9 0902 	sub.w	r9, r9, #2
 8000cee:	4421      	add	r1, r4
 8000cf0:	eba1 010a 	sub.w	r1, r1, sl
 8000cf4:	b2bf      	uxth	r7, r7
 8000cf6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cfa:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cfe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d02:	fb00 f808 	mul.w	r8, r0, r8
 8000d06:	45b8      	cmp	r8, r7
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x24a>
 8000d0a:	19e7      	adds	r7, r4, r7
 8000d0c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d10:	d22e      	bcs.n	8000d70 <__udivmoddi4+0x2a0>
 8000d12:	45b8      	cmp	r8, r7
 8000d14:	d92c      	bls.n	8000d70 <__udivmoddi4+0x2a0>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4427      	add	r7, r4
 8000d1a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1e:	eba7 0708 	sub.w	r7, r7, r8
 8000d22:	fba0 8902 	umull	r8, r9, r0, r2
 8000d26:	454f      	cmp	r7, r9
 8000d28:	46c6      	mov	lr, r8
 8000d2a:	4649      	mov	r1, r9
 8000d2c:	d31a      	bcc.n	8000d64 <__udivmoddi4+0x294>
 8000d2e:	d017      	beq.n	8000d60 <__udivmoddi4+0x290>
 8000d30:	b15d      	cbz	r5, 8000d4a <__udivmoddi4+0x27a>
 8000d32:	ebb3 020e 	subs.w	r2, r3, lr
 8000d36:	eb67 0701 	sbc.w	r7, r7, r1
 8000d3a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d3e:	40f2      	lsrs	r2, r6
 8000d40:	ea4c 0202 	orr.w	r2, ip, r2
 8000d44:	40f7      	lsrs	r7, r6
 8000d46:	e9c5 2700 	strd	r2, r7, [r5]
 8000d4a:	2600      	movs	r6, #0
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	462e      	mov	r6, r5
 8000d54:	4628      	mov	r0, r5
 8000d56:	e70b      	b.n	8000b70 <__udivmoddi4+0xa0>
 8000d58:	4606      	mov	r6, r0
 8000d5a:	e6e9      	b.n	8000b30 <__udivmoddi4+0x60>
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	e6fd      	b.n	8000b5c <__udivmoddi4+0x8c>
 8000d60:	4543      	cmp	r3, r8
 8000d62:	d2e5      	bcs.n	8000d30 <__udivmoddi4+0x260>
 8000d64:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d68:	eb69 0104 	sbc.w	r1, r9, r4
 8000d6c:	3801      	subs	r0, #1
 8000d6e:	e7df      	b.n	8000d30 <__udivmoddi4+0x260>
 8000d70:	4608      	mov	r0, r1
 8000d72:	e7d2      	b.n	8000d1a <__udivmoddi4+0x24a>
 8000d74:	4660      	mov	r0, ip
 8000d76:	e78d      	b.n	8000c94 <__udivmoddi4+0x1c4>
 8000d78:	4681      	mov	r9, r0
 8000d7a:	e7b9      	b.n	8000cf0 <__udivmoddi4+0x220>
 8000d7c:	4666      	mov	r6, ip
 8000d7e:	e775      	b.n	8000c6c <__udivmoddi4+0x19c>
 8000d80:	4630      	mov	r0, r6
 8000d82:	e74a      	b.n	8000c1a <__udivmoddi4+0x14a>
 8000d84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d88:	4439      	add	r1, r7
 8000d8a:	e713      	b.n	8000bb4 <__udivmoddi4+0xe4>
 8000d8c:	3802      	subs	r0, #2
 8000d8e:	443c      	add	r4, r7
 8000d90:	e724      	b.n	8000bdc <__udivmoddi4+0x10c>
 8000d92:	bf00      	nop

08000d94 <__aeabi_idiv0>:
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <read_digits>:
#include <stdbool.h>


//----------------------------------------------------------------------------------------
void read_digits(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
	char digith = 0;;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	71fb      	strb	r3, [r7, #7]

	digith = read_one_digit_from_keyboard();
 8000da2:	f000 f853 	bl	8000e4c <read_one_digit_from_keyboard>
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
	if(digith == '#')						// Clean buffer
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	2b23      	cmp	r3, #35	; 0x23
 8000dae:	d10a      	bne.n	8000dc6 <read_digits+0x2e>
	{
		memset(keyboard.keyboard_digits_buffer, '\0', sizeof(keyboard.keyboard_digits_buffer));
 8000db0:	221e      	movs	r2, #30
 8000db2:	2100      	movs	r1, #0
 8000db4:	4824      	ldr	r0, [pc, #144]	; (8000e48 <read_digits+0xb0>)
 8000db6:	f00b ff0d 	bl	800cbd4 <memset>
		keyboard.read_digits_position = 0;
 8000dba:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <read_digits+0xb0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	625a      	str	r2, [r3, #36]	; 0x24
		keyboard.read_one_digit_status = false;
 8000dc0:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <read_digits+0xb0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	77da      	strb	r2, [r3, #31]
	}
	if(digith == '*')						// If pressed enter
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8000dca:	d109      	bne.n	8000de0 <read_digits+0x48>
	{
		keyboard.all_digits_was_read = true;
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <read_digits+0xb0>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	f883 2020 	strb.w	r2, [r3, #32]
		keyboard.read_one_digit_status = false;
 8000dd4:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <read_digits+0xb0>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	77da      	strb	r2, [r3, #31]
		keyboard.read_digits_position = 0;
 8000dda:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <read_digits+0xb0>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if((digith != '\0') && (digith != '#')&& (digith != '*'))
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d028      	beq.n	8000e38 <read_digits+0xa0>
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	2b23      	cmp	r3, #35	; 0x23
 8000dea:	d025      	beq.n	8000e38 <read_digits+0xa0>
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	2b2a      	cmp	r3, #42	; 0x2a
 8000df0:	d022      	beq.n	8000e38 <read_digits+0xa0>
	{
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <read_digits+0xb0>)
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <read_digits+0xb0>)
 8000df8:	7f92      	ldrb	r2, [r2, #30]
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	dc11      	bgt.n	8000e22 <read_digits+0x8a>
		{
			keyboard.keyboard_digits_buffer[keyboard.read_digits_position] = digith;
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <read_digits+0xb0>)
 8000e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e02:	4911      	ldr	r1, [pc, #68]	; (8000e48 <read_digits+0xb0>)
 8000e04:	79fa      	ldrb	r2, [r7, #7]
 8000e06:	54ca      	strb	r2, [r1, r3]
			keyboard.read_digits_position++;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <read_digits+0xb0>)
 8000e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <read_digits+0xb0>)
 8000e10:	6253      	str	r3, [r2, #36]	; 0x24
			keyboard.all_digits_was_read = false;
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <read_digits+0xb0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = true;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <read_digits+0xb0>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	77da      	strb	r2, [r3, #31]
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000e20:	e00e      	b.n	8000e40 <read_digits+0xa8>
		}
		else								// If entered all digits
		{
			keyboard.all_digits_was_read = true;
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <read_digits+0xb0>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = false;
 8000e2a:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <read_digits+0xb0>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	77da      	strb	r2, [r3, #31]
			keyboard.read_digits_position = 0;
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <read_digits+0xb0>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	625a      	str	r2, [r3, #36]	; 0x24
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000e36:	e003      	b.n	8000e40 <read_digits+0xa8>
		}
	}
	else									// If didn't enter any key
	{
		keyboard.read_one_digit_status = false;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <read_digits+0xb0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	77da      	strb	r2, [r3, #31]
	}
}
 8000e3e:	bf00      	nop
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000160 	.word	0x20000160

08000e4c <read_one_digit_from_keyboard>:

//----------------------------------------------------------------------------------------
char read_one_digit_from_keyboard(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
	char digit = '\0';
 8000e52:	2300      	movs	r3, #0
 8000e54:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e5c:	48cf      	ldr	r0, [pc, #828]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000e5e:	f002 ffb7 	bl	8003dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e68:	48cc      	ldr	r0, [pc, #816]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000e6a:	f002 ffb1 	bl	8003dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e74:	48c9      	ldr	r0, [pc, #804]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000e76:	f002 ffab 	bl	8003dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e80:	48c6      	ldr	r0, [pc, #792]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000e82:	f002 ffa5 	bl	8003dd0 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000e86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e8a:	48c5      	ldr	r0, [pc, #788]	; (80011a0 <read_one_digit_from_keyboard+0x354>)
 8000e8c:	f002 ff88 	bl	8003da0 <HAL_GPIO_ReadPin>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d169      	bne.n	8000f6a <read_one_digit_from_keyboard+0x11e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e9c:	48bf      	ldr	r0, [pc, #764]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000e9e:	f002 ff97 	bl	8003dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea8:	48bc      	ldr	r0, [pc, #752]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000eaa:	f002 ff91 	bl	8003dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eb4:	48b9      	ldr	r0, [pc, #740]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000eb6:	f002 ff8b 	bl	8003dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec0:	48b6      	ldr	r0, [pc, #728]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000ec2:	f002 ff85 	bl	8003dd0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000ec6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eca:	48b5      	ldr	r0, [pc, #724]	; (80011a0 <read_one_digit_from_keyboard+0x354>)
 8000ecc:	f002 ff68 	bl	8003da0 <HAL_GPIO_ReadPin>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <read_one_digit_from_keyboard+0x8e>
		{
			digit = '1';
 8000ed6:	2331      	movs	r3, #49	; 0x31
 8000ed8:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ee0:	48ae      	ldr	r0, [pc, #696]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000ee2:	f002 ff75 	bl	8003dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eec:	48ab      	ldr	r0, [pc, #684]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000eee:	f002 ff6f 	bl	8003dd0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000ef2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ef6:	48aa      	ldr	r0, [pc, #680]	; (80011a0 <read_one_digit_from_keyboard+0x354>)
 8000ef8:	f002 ff52 	bl	8003da0 <HAL_GPIO_ReadPin>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <read_one_digit_from_keyboard+0xba>
		{
			digit = '4';
 8000f02:	2334      	movs	r3, #52	; 0x34
 8000f04:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000f06:	2201      	movs	r2, #1
 8000f08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f0c:	48a3      	ldr	r0, [pc, #652]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000f0e:	f002 ff5f 	bl	8003dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f18:	48a0      	ldr	r0, [pc, #640]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000f1a:	f002 ff59 	bl	8003dd0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000f1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f22:	489f      	ldr	r0, [pc, #636]	; (80011a0 <read_one_digit_from_keyboard+0x354>)
 8000f24:	f002 ff3c 	bl	8003da0 <HAL_GPIO_ReadPin>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <read_one_digit_from_keyboard+0xe6>
		{
			digit =  '7';
 8000f2e:	2337      	movs	r3, #55	; 0x37
 8000f30:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f38:	4898      	ldr	r0, [pc, #608]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000f3a:	f002 ff49 	bl	8003dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f44:	4895      	ldr	r0, [pc, #596]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000f46:	f002 ff43 	bl	8003dd0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000f4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f4e:	4894      	ldr	r0, [pc, #592]	; (80011a0 <read_one_digit_from_keyboard+0x354>)
 8000f50:	f002 ff26 	bl	8003da0 <HAL_GPIO_ReadPin>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <read_one_digit_from_keyboard+0x112>
		{
			digit =  '*';
 8000f5a:	232a      	movs	r3, #42	; 0x2a
 8000f5c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f64:	488d      	ldr	r0, [pc, #564]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000f66:	f002 ff33 	bl	8003dd0 <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f70:	488a      	ldr	r0, [pc, #552]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000f72:	f002 ff2d 	bl	8003dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7c:	4887      	ldr	r0, [pc, #540]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000f7e:	f002 ff27 	bl	8003dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f88:	4884      	ldr	r0, [pc, #528]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000f8a:	f002 ff21 	bl	8003dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f94:	4881      	ldr	r0, [pc, #516]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000f96:	f002 ff1b 	bl	8003dd0 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 8000f9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f9e:	4880      	ldr	r0, [pc, #512]	; (80011a0 <read_one_digit_from_keyboard+0x354>)
 8000fa0:	f002 fefe 	bl	8003da0 <HAL_GPIO_ReadPin>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d169      	bne.n	800107e <read_one_digit_from_keyboard+0x232>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb0:	487a      	ldr	r0, [pc, #488]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000fb2:	f002 ff0d 	bl	8003dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fbc:	4877      	ldr	r0, [pc, #476]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000fbe:	f002 ff07 	bl	8003dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc8:	4874      	ldr	r0, [pc, #464]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000fca:	f002 ff01 	bl	8003dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fd4:	4871      	ldr	r0, [pc, #452]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000fd6:	f002 fefb 	bl	8003dd0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8000fda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fde:	4870      	ldr	r0, [pc, #448]	; (80011a0 <read_one_digit_from_keyboard+0x354>)
 8000fe0:	f002 fede 	bl	8003da0 <HAL_GPIO_ReadPin>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <read_one_digit_from_keyboard+0x1a2>
		{
			digit =  '2';
 8000fea:	2332      	movs	r3, #50	; 0x32
 8000fec:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ff4:	4869      	ldr	r0, [pc, #420]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8000ff6:	f002 feeb 	bl	8003dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001000:	4866      	ldr	r0, [pc, #408]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8001002:	f002 fee5 	bl	8003dd0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001006:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800100a:	4865      	ldr	r0, [pc, #404]	; (80011a0 <read_one_digit_from_keyboard+0x354>)
 800100c:	f002 fec8 	bl	8003da0 <HAL_GPIO_ReadPin>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <read_one_digit_from_keyboard+0x1ce>
		{
			digit =  '5';
 8001016:	2335      	movs	r3, #53	; 0x35
 8001018:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001020:	485e      	ldr	r0, [pc, #376]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8001022:	f002 fed5 	bl	8003dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 7100 	mov.w	r1, #512	; 0x200
 800102c:	485b      	ldr	r0, [pc, #364]	; (800119c <read_one_digit_from_keyboard+0x350>)
 800102e:	f002 fecf 	bl	8003dd0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001032:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001036:	485a      	ldr	r0, [pc, #360]	; (80011a0 <read_one_digit_from_keyboard+0x354>)
 8001038:	f002 feb2 	bl	8003da0 <HAL_GPIO_ReadPin>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <read_one_digit_from_keyboard+0x1fa>
		{
			digit = '8';
 8001042:	2338      	movs	r3, #56	; 0x38
 8001044:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001046:	2201      	movs	r2, #1
 8001048:	f44f 7100 	mov.w	r1, #512	; 0x200
 800104c:	4853      	ldr	r0, [pc, #332]	; (800119c <read_one_digit_from_keyboard+0x350>)
 800104e:	f002 febf 	bl	8003dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001058:	4850      	ldr	r0, [pc, #320]	; (800119c <read_one_digit_from_keyboard+0x350>)
 800105a:	f002 feb9 	bl	8003dd0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800105e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001062:	484f      	ldr	r0, [pc, #316]	; (80011a0 <read_one_digit_from_keyboard+0x354>)
 8001064:	f002 fe9c 	bl	8003da0 <HAL_GPIO_ReadPin>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <read_one_digit_from_keyboard+0x226>
		{
			digit = '0';
 800106e:	2330      	movs	r3, #48	; 0x30
 8001070:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001072:	2201      	movs	r2, #1
 8001074:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001078:	4848      	ldr	r0, [pc, #288]	; (800119c <read_one_digit_from_keyboard+0x350>)
 800107a:	f002 fea9 	bl	8003dd0 <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001084:	4845      	ldr	r0, [pc, #276]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8001086:	f002 fea3 	bl	8003dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001090:	4842      	ldr	r0, [pc, #264]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8001092:	f002 fe9d 	bl	8003dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	f44f 7100 	mov.w	r1, #512	; 0x200
 800109c:	483f      	ldr	r0, [pc, #252]	; (800119c <read_one_digit_from_keyboard+0x350>)
 800109e:	f002 fe97 	bl	8003dd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a8:	483c      	ldr	r0, [pc, #240]	; (800119c <read_one_digit_from_keyboard+0x350>)
 80010aa:	f002 fe91 	bl	8003dd0 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №   // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 80010ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010b2:	483c      	ldr	r0, [pc, #240]	; (80011a4 <read_one_digit_from_keyboard+0x358>)
 80010b4:	f002 fe74 	bl	8003da0 <HAL_GPIO_ReadPin>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d169      	bne.n	8001192 <read_one_digit_from_keyboard+0x346>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010c4:	4835      	ldr	r0, [pc, #212]	; (800119c <read_one_digit_from_keyboard+0x350>)
 80010c6:	f002 fe83 	bl	8003dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d0:	4832      	ldr	r0, [pc, #200]	; (800119c <read_one_digit_from_keyboard+0x350>)
 80010d2:	f002 fe7d 	bl	8003dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010dc:	482f      	ldr	r0, [pc, #188]	; (800119c <read_one_digit_from_keyboard+0x350>)
 80010de:	f002 fe77 	bl	8003dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e8:	482c      	ldr	r0, [pc, #176]	; (800119c <read_one_digit_from_keyboard+0x350>)
 80010ea:	f002 fe71 	bl	8003dd0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 80010ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010f2:	482c      	ldr	r0, [pc, #176]	; (80011a4 <read_one_digit_from_keyboard+0x358>)
 80010f4:	f002 fe54 	bl	8003da0 <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <read_one_digit_from_keyboard+0x2b6>
		{
			digit = '3';
 80010fe:	2333      	movs	r3, #51	; 0x33
 8001100:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8001102:	2201      	movs	r2, #1
 8001104:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001108:	4824      	ldr	r0, [pc, #144]	; (800119c <read_one_digit_from_keyboard+0x350>)
 800110a:	f002 fe61 	bl	8003dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001114:	4821      	ldr	r0, [pc, #132]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8001116:	f002 fe5b 	bl	8003dd0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800111a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800111e:	4821      	ldr	r0, [pc, #132]	; (80011a4 <read_one_digit_from_keyboard+0x358>)
 8001120:	f002 fe3e 	bl	8003da0 <HAL_GPIO_ReadPin>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <read_one_digit_from_keyboard+0x2e2>
		{
			digit = '6';
 800112a:	2336      	movs	r3, #54	; 0x36
 800112c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001134:	4819      	ldr	r0, [pc, #100]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8001136:	f002 fe4b 	bl	8003dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001140:	4816      	ldr	r0, [pc, #88]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8001142:	f002 fe45 	bl	8003dd0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001146:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800114a:	4816      	ldr	r0, [pc, #88]	; (80011a4 <read_one_digit_from_keyboard+0x358>)
 800114c:	f002 fe28 	bl	8003da0 <HAL_GPIO_ReadPin>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <read_one_digit_from_keyboard+0x30e>
		{
			digit = '9';
 8001156:	2339      	movs	r3, #57	; 0x39
 8001158:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001160:	480e      	ldr	r0, [pc, #56]	; (800119c <read_one_digit_from_keyboard+0x350>)
 8001162:	f002 fe35 	bl	8003dd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116c:	480b      	ldr	r0, [pc, #44]	; (800119c <read_one_digit_from_keyboard+0x350>)
 800116e:	f002 fe2f 	bl	8003dd0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001172:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001176:	480b      	ldr	r0, [pc, #44]	; (80011a4 <read_one_digit_from_keyboard+0x358>)
 8001178:	f002 fe12 	bl	8003da0 <HAL_GPIO_ReadPin>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <read_one_digit_from_keyboard+0x33a>
		{
			digit = '#';
 8001182:	2323      	movs	r3, #35	; 0x23
 8001184:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800118c:	4803      	ldr	r0, [pc, #12]	; (800119c <read_one_digit_from_keyboard+0x350>)
 800118e:	f002 fe1f 	bl	8003dd0 <HAL_GPIO_WritePin>
	}
	return digit;
 8001192:	79fb      	ldrb	r3, [r7, #7]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40020c00 	.word	0x40020c00
 80011a0:	40020400 	.word	0x40020400
 80011a4:	40021000 	.word	0x40021000

080011a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ae:	f002 fab3 	bl	8003718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b2:	f000 f8b7 	bl	8001324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b6:	f000 fb69 	bl	800188c <MX_GPIO_Init>
  MX_I2S3_Init();
 80011ba:	f000 f99d 	bl	80014f8 <MX_I2S3_Init>
  MX_SPI1_Init();
 80011be:	f000 f9df 	bl	8001580 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80011c2:	f00b f9c5 	bl	800c550 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80011c6:	f000 fa9f 	bl	8001708 <MX_TIM2_Init>
  MX_SPI2_Init();
 80011ca:	f000 fa0f 	bl	80015ec <MX_SPI2_Init>
  MX_RNG_Init();
 80011ce:	f000 f9c3 	bl	8001558 <MX_RNG_Init>
  MX_TIM3_Init();
 80011d2:	f000 fae7 	bl	80017a4 <MX_TIM3_Init>
  MX_TIM1_Init();
 80011d6:	f000 fa3f 	bl	8001658 <MX_TIM1_Init>
  MX_I2C3_Init();
 80011da:	f000 f95f 	bl	800149c <MX_I2C3_Init>
  MX_I2C2_Init();
 80011de:	f000 f92f 	bl	8001440 <MX_I2C2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80011e2:	f000 f921 	bl	8001428 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 80011e6:	f001 f9bd 	bl	8002564 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f001 fb60 	bl	80028b0 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 80011f0:	2003      	movs	r0, #3
 80011f2:	f001 f959 	bl	80024a8 <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 80011f6:	2000      	movs	r0, #0
 80011f8:	f001 fb5a 	bl	80028b0 <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 80011fc:	2364      	movs	r3, #100	; 0x64
 80011fe:	617b      	str	r3, [r7, #20]
  speed_test_LCD(number_of_tests);
 8001200:	6978      	ldr	r0, [r7, #20]
 8001202:	f001 fc43 	bl	8002a8c <speed_test_LCD>

  ILI9341_Fill_Screen(BLACK);
 8001206:	2000      	movs	r0, #0
 8001208:	f001 fb52 	bl	80028b0 <ILI9341_Fill_Screen>

  // Start scan digits ///////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);			// Start read digits
 800120c:	483f      	ldr	r0, [pc, #252]	; (800130c <main+0x164>)
 800120e:	f007 fa65 	bl	80086dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001212:	2100      	movs	r1, #0
 8001214:	483d      	ldr	r0, [pc, #244]	; (800130c <main+0x164>)
 8001216:	f007 fad1 	bl	80087bc <HAL_TIM_OC_Start_IT>
  keyboard.how_meny_digits_must_be_written = 10;
 800121a:	4b3d      	ldr	r3, [pc, #244]	; (8001310 <main+0x168>)
 800121c:	220a      	movs	r2, #10
 800121e:	779a      	strb	r2, [r3, #30]
    // 0x246				//  ????
    // 0x247				// MEMS
    // 0x255              //  ????

    // Read ID from BME280 ////////////////////////////////////////////////////////////////
    uint16_t STATUS=0;
 8001220:	2300      	movs	r3, #0
 8001222:	827b      	strh	r3, [r7, #18]
    uint16_t addres_devise = 0x76;   // BME280
 8001224:	2376      	movs	r3, #118	; 0x76
 8001226:	823b      	strh	r3, [r7, #16]
    uint16_t addr = 0xD0;
 8001228:	23d0      	movs	r3, #208	; 0xd0
 800122a:	81fb      	strh	r3, [r7, #14]
    uint8_t buff=0;         // Return 0x96 -> Dec 60
 800122c:	2300      	movs	r3, #0
 800122e:	71fb      	strb	r3, [r7, #7]
    STATUS=HAL_I2C_Mem_Read(&hi2c3, (uint16_t)addres_devise<<1,(uint16_t)addr, 1, &buff, 1, 1000);
 8001230:	8a3b      	ldrh	r3, [r7, #16]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	b299      	uxth	r1, r3
 8001236:	89fa      	ldrh	r2, [r7, #14]
 8001238:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123c:	9302      	str	r3, [sp, #8]
 800123e:	2301      	movs	r3, #1
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2301      	movs	r3, #1
 8001248:	4832      	ldr	r0, [pc, #200]	; (8001314 <main+0x16c>)
 800124a:	f004 fe95 	bl	8005f78 <HAL_I2C_Mem_Read>
 800124e:	4603      	mov	r3, r0
 8001250:	827b      	strh	r3, [r7, #18]
    /////////////////////////////////////////////////////////////////////////////////////////

    // Read ID from DS3231 ////////////////////////////////////////////////////////////////
    addres_devise = 0x68;            // DS3231
 8001252:	2368      	movs	r3, #104	; 0x68
 8001254:	823b      	strh	r3, [r7, #16]
    addr = 0x00;						// Read seconds register
 8001256:	2300      	movs	r3, #0
 8001258:	81fb      	strh	r3, [r7, #14]
    buff=0;
 800125a:	2300      	movs	r3, #0
 800125c:	71fb      	strb	r3, [r7, #7]
    STATUS=HAL_I2C_Mem_Read(&hi2c3, (uint16_t)addres_devise<<1,(uint16_t)addr, 1, &buff, 1, 1000);
 800125e:	8a3b      	ldrh	r3, [r7, #16]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	b299      	uxth	r1, r3
 8001264:	89fa      	ldrh	r2, [r7, #14]
 8001266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126a:	9302      	str	r3, [sp, #8]
 800126c:	2301      	movs	r3, #1
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	1dfb      	adds	r3, r7, #7
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2301      	movs	r3, #1
 8001276:	4827      	ldr	r0, [pc, #156]	; (8001314 <main+0x16c>)
 8001278:	f004 fe7e 	bl	8005f78 <HAL_I2C_Mem_Read>
 800127c:	4603      	mov	r3, r0
 800127e:	827b      	strh	r3, [r7, #18]
    /////////////////////////////////////////////////////////////////////////////////////////

    // Test OLED  ////////////////////////////////////////////////////////////////
    oled_init();
 8001280:	f001 fe14 	bl	8002eac <oled_init>
    char oled_buff[] = "TEST";
 8001284:	4a24      	ldr	r2, [pc, #144]	; (8001318 <main+0x170>)
 8001286:	463b      	mov	r3, r7
 8001288:	e892 0003 	ldmia.w	r2, {r0, r1}
 800128c:	6018      	str	r0, [r3, #0]
 800128e:	3304      	adds	r3, #4
 8001290:	7019      	strb	r1, [r3, #0]
    // draw_pixel(10, 10, WHITE);
    graphics_text(1, 1, 1, oled_buff);
 8001292:	463b      	mov	r3, r7
 8001294:	2201      	movs	r2, #1
 8001296:	2101      	movs	r1, #1
 8001298:	2001      	movs	r0, #1
 800129a:	f001 fcff 	bl	8002c9c <graphics_text>
    graphics_text(1, 20, 2, oled_buff);
 800129e:	463b      	mov	r3, r7
 80012a0:	2202      	movs	r2, #2
 80012a2:	2114      	movs	r1, #20
 80012a4:	2001      	movs	r0, #1
 80012a6:	f001 fcf9 	bl	8002c9c <graphics_text>
    graphics_text(50, 1, 3, oled_buff);
 80012aa:	463b      	mov	r3, r7
 80012ac:	2203      	movs	r2, #3
 80012ae:	2101      	movs	r1, #1
 80012b0:	2032      	movs	r0, #50	; 0x32
 80012b2:	f001 fcf3 	bl	8002c9c <graphics_text>
    oled_update();
 80012b6:	f001 fda5 	bl	8002e04 <oled_update>
    /////////////////////////////////////////////////////////////////////////////////////////

    // Test MPU6050  //////////////////////////////////////////////////////////////////////
    while (MPU6050_Init(&hi2c2) == 1);
 80012ba:	bf00      	nop
 80012bc:	4817      	ldr	r0, [pc, #92]	; (800131c <main+0x174>)
 80012be:	f001 fe67 	bl	8002f90 <MPU6050_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d0f9      	beq.n	80012bc <main+0x114>
    MPU6050_Read_All(&hi2c2, &MPU6050);
 80012c8:	4915      	ldr	r1, [pc, #84]	; (8001320 <main+0x178>)
 80012ca:	4814      	ldr	r0, [pc, #80]	; (800131c <main+0x174>)
 80012cc:	f001 feb8 	bl	8003040 <MPU6050_Read_All>

    /////////////////////////////////////////////////////////////////////////////////////////


    // Connect to motion sensor apds9960   ////////////////////////////////////////////////////
    addres_devise = 0x39;
 80012d0:	2339      	movs	r3, #57	; 0x39
 80012d2:	823b      	strh	r3, [r7, #16]
    addr = 0x92;						// HMC5883L_REG_IDENT_A
 80012d4:	2392      	movs	r3, #146	; 0x92
 80012d6:	81fb      	strh	r3, [r7, #14]
    buff=0;
 80012d8:	2300      	movs	r3, #0
 80012da:	71fb      	strb	r3, [r7, #7]
    STATUS=HAL_I2C_Mem_Read(&hi2c2, (uint16_t)addres_devise<<1,(uint16_t)addr, 1, &buff, 1, 1000);
 80012dc:	8a3b      	ldrh	r3, [r7, #16]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	b299      	uxth	r1, r3
 80012e2:	89fa      	ldrh	r2, [r7, #14]
 80012e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	2301      	movs	r3, #1
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2301      	movs	r3, #1
 80012f4:	4809      	ldr	r0, [pc, #36]	; (800131c <main+0x174>)
 80012f6:	f004 fe3f 	bl	8005f78 <HAL_I2C_Mem_Read>
 80012fa:	4603      	mov	r3, r0
 80012fc:	827b      	strh	r3, [r7, #18]
	//////////////////////////////////////////////////////////////////////////////////////


    int g = 999;
 80012fe:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001302:	60bb      	str	r3, [r7, #8]
//	  HAL_TIM_Base_Stop_IT(&htim3);				// Stop timer measure
//	  ARR_REG = TIM3-> CNT;


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001304:	f00b f94a 	bl	800c59c <MX_USB_HOST_Process>
 8001308:	e7fc      	b.n	8001304 <main+0x15c>
 800130a:	bf00      	nop
 800130c:	200002e4 	.word	0x200002e4
 8001310:	20000160 	.word	0x20000160
 8001314:	20000188 	.word	0x20000188
 8001318:	0800d450 	.word	0x0800d450
 800131c:	20000234 	.word	0x20000234
 8001320:	20000288 	.word	0x20000288

08001324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b098      	sub	sp, #96	; 0x60
 8001328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800132e:	2230      	movs	r2, #48	; 0x30
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f00b fc4e 	bl	800cbd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	4b31      	ldr	r3, [pc, #196]	; (8001420 <SystemClock_Config+0xfc>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	4a30      	ldr	r2, [pc, #192]	; (8001420 <SystemClock_Config+0xfc>)
 8001360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001364:	6413      	str	r3, [r2, #64]	; 0x40
 8001366:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <SystemClock_Config+0xfc>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <SystemClock_Config+0x100>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a2a      	ldr	r2, [pc, #168]	; (8001424 <SystemClock_Config+0x100>)
 800137c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	4b28      	ldr	r3, [pc, #160]	; (8001424 <SystemClock_Config+0x100>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800138e:	2301      	movs	r3, #1
 8001390:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001392:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001396:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001398:	2302      	movs	r3, #2
 800139a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800139c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013a2:	2308      	movs	r3, #8
 80013a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013a6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013aa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013ac:	2302      	movs	r3, #2
 80013ae:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013b0:	2307      	movs	r3, #7
 80013b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013b8:	4618      	mov	r0, r3
 80013ba:	f006 f881 	bl	80074c0 <HAL_RCC_OscConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80013c4:	f000 fbca 	bl	8001b5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c8:	230f      	movs	r3, #15
 80013ca:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013cc:	2302      	movs	r3, #2
 80013ce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	2105      	movs	r1, #5
 80013e6:	4618      	mov	r0, r3
 80013e8:	f006 fae2 	bl	80079b0 <HAL_RCC_ClockConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80013f2:	f000 fbb3 	bl	8001b5c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80013f6:	2301      	movs	r3, #1
 80013f8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80013fa:	23c0      	movs	r3, #192	; 0xc0
 80013fc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80013fe:	2302      	movs	r3, #2
 8001400:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	4618      	mov	r0, r3
 8001408:	f006 fcba 	bl	8007d80 <HAL_RCCEx_PeriphCLKConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001412:	f000 fba3 	bl	8001b5c <Error_Handler>
  }
}
 8001416:	bf00      	nop
 8001418:	3760      	adds	r7, #96	; 0x60
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800
 8001424:	40007000 	.word	0x40007000

08001428 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	2100      	movs	r1, #0
 8001430:	201c      	movs	r0, #28
 8001432:	f002 fae2 	bl	80039fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001436:	201c      	movs	r0, #28
 8001438:	f002 fafb 	bl	8003a32 <HAL_NVIC_EnableIRQ>
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}

08001440 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <MX_I2C2_Init+0x50>)
 8001446:	4a13      	ldr	r2, [pc, #76]	; (8001494 <MX_I2C2_Init+0x54>)
 8001448:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_I2C2_Init+0x50>)
 800144c:	4a12      	ldr	r2, [pc, #72]	; (8001498 <MX_I2C2_Init+0x58>)
 800144e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MX_I2C2_Init+0x50>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <MX_I2C2_Init+0x50>)
 8001458:	2200      	movs	r2, #0
 800145a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_I2C2_Init+0x50>)
 800145e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001462:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <MX_I2C2_Init+0x50>)
 8001466:	2200      	movs	r2, #0
 8001468:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MX_I2C2_Init+0x50>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001470:	4b07      	ldr	r3, [pc, #28]	; (8001490 <MX_I2C2_Init+0x50>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <MX_I2C2_Init+0x50>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800147c:	4804      	ldr	r0, [pc, #16]	; (8001490 <MX_I2C2_Init+0x50>)
 800147e:	f004 fa3f 	bl	8005900 <HAL_I2C_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001488:	f000 fb68 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000234 	.word	0x20000234
 8001494:	40005800 	.word	0x40005800
 8001498:	000186a0 	.word	0x000186a0

0800149c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <MX_I2C3_Init+0x50>)
 80014a2:	4a13      	ldr	r2, [pc, #76]	; (80014f0 <MX_I2C3_Init+0x54>)
 80014a4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_I2C3_Init+0x50>)
 80014a8:	4a12      	ldr	r2, [pc, #72]	; (80014f4 <MX_I2C3_Init+0x58>)
 80014aa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_I2C3_Init+0x50>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <MX_I2C3_Init+0x50>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <MX_I2C3_Init+0x50>)
 80014ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014be:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c0:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <MX_I2C3_Init+0x50>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <MX_I2C3_Init+0x50>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014cc:	4b07      	ldr	r3, [pc, #28]	; (80014ec <MX_I2C3_Init+0x50>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <MX_I2C3_Init+0x50>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014d8:	4804      	ldr	r0, [pc, #16]	; (80014ec <MX_I2C3_Init+0x50>)
 80014da:	f004 fa11 	bl	8005900 <HAL_I2C_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80014e4:	f000 fb3a 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000188 	.word	0x20000188
 80014f0:	40005c00 	.word	0x40005c00
 80014f4:	000186a0 	.word	0x000186a0

080014f8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <MX_I2S3_Init+0x54>)
 80014fe:	4a14      	ldr	r2, [pc, #80]	; (8001550 <MX_I2S3_Init+0x58>)
 8001500:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001502:	4b12      	ldr	r3, [pc, #72]	; (800154c <MX_I2S3_Init+0x54>)
 8001504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001508:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <MX_I2S3_Init+0x54>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001510:	4b0e      	ldr	r3, [pc, #56]	; (800154c <MX_I2S3_Init+0x54>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <MX_I2S3_Init+0x54>)
 8001518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800151c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <MX_I2S3_Init+0x54>)
 8001520:	4a0c      	ldr	r2, [pc, #48]	; (8001554 <MX_I2S3_Init+0x5c>)
 8001522:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_I2S3_Init+0x54>)
 8001526:	2200      	movs	r2, #0
 8001528:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <MX_I2S3_Init+0x54>)
 800152c:	2200      	movs	r2, #0
 800152e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_I2S3_Init+0x54>)
 8001532:	2200      	movs	r2, #0
 8001534:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001536:	4805      	ldr	r0, [pc, #20]	; (800154c <MX_I2S3_Init+0x54>)
 8001538:	f005 fb22 	bl	8006b80 <HAL_I2S_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001542:	f000 fb0b 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000434 	.word	0x20000434
 8001550:	40003c00 	.word	0x40003c00
 8001554:	00017700 	.word	0x00017700

08001558 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_RNG_Init+0x20>)
 800155e:	4a07      	ldr	r2, [pc, #28]	; (800157c <MX_RNG_Init+0x24>)
 8001560:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_RNG_Init+0x20>)
 8001564:	f006 fd4c 	bl	8008000 <HAL_RNG_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800156e:	f000 faf5 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000380 	.word	0x20000380
 800157c:	50060800 	.word	0x50060800

08001580 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001584:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <MX_SPI1_Init+0x64>)
 8001586:	4a18      	ldr	r2, [pc, #96]	; (80015e8 <MX_SPI1_Init+0x68>)
 8001588:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800158a:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <MX_SPI1_Init+0x64>)
 800158c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001590:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001592:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <MX_SPI1_Init+0x64>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <MX_SPI1_Init+0x64>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_SPI1_Init+0x64>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <MX_SPI1_Init+0x64>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <MX_SPI1_Init+0x64>)
 80015ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <MX_SPI1_Init+0x64>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015b8:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <MX_SPI1_Init+0x64>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <MX_SPI1_Init+0x64>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015c4:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <MX_SPI1_Init+0x64>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <MX_SPI1_Init+0x64>)
 80015cc:	220a      	movs	r2, #10
 80015ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015d0:	4804      	ldr	r0, [pc, #16]	; (80015e4 <MX_SPI1_Init+0x64>)
 80015d2:	f006 fda3 	bl	800811c <HAL_SPI_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015dc:	f000 fabe 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000390 	.word	0x20000390
 80015e8:	40013000 	.word	0x40013000

080015ec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015f0:	4b17      	ldr	r3, [pc, #92]	; (8001650 <MX_SPI2_Init+0x64>)
 80015f2:	4a18      	ldr	r2, [pc, #96]	; (8001654 <MX_SPI2_Init+0x68>)
 80015f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015f6:	4b16      	ldr	r3, [pc, #88]	; (8001650 <MX_SPI2_Init+0x64>)
 80015f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_SPI2_Init+0x64>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_SPI2_Init+0x64>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_SPI2_Init+0x64>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_SPI2_Init+0x64>)
 8001612:	2200      	movs	r2, #0
 8001614:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_SPI2_Init+0x64>)
 8001618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800161c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_SPI2_Init+0x64>)
 8001620:	2200      	movs	r2, #0
 8001622:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <MX_SPI2_Init+0x64>)
 8001626:	2200      	movs	r2, #0
 8001628:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_SPI2_Init+0x64>)
 800162c:	2200      	movs	r2, #0
 800162e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <MX_SPI2_Init+0x64>)
 8001632:	2200      	movs	r2, #0
 8001634:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_SPI2_Init+0x64>)
 8001638:	220a      	movs	r2, #10
 800163a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800163c:	4804      	ldr	r0, [pc, #16]	; (8001650 <MX_SPI2_Init+0x64>)
 800163e:	f006 fd6d 	bl	800811c <HAL_SPI_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001648:	f000 fa88 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	200001dc 	.word	0x200001dc
 8001654:	40003800 	.word	0x40003800

08001658 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08c      	sub	sp, #48	; 0x30
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	2224      	movs	r2, #36	; 0x24
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f00b fab4 	bl	800cbd4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <MX_TIM1_Init+0xa8>)
 8001676:	4a23      	ldr	r2, [pc, #140]	; (8001704 <MX_TIM1_Init+0xac>)
 8001678:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800167a:	4b21      	ldr	r3, [pc, #132]	; (8001700 <MX_TIM1_Init+0xa8>)
 800167c:	2200      	movs	r2, #0
 800167e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <MX_TIM1_Init+0xa8>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001686:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <MX_TIM1_Init+0xa8>)
 8001688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800168c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168e:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <MX_TIM1_Init+0xa8>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001694:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <MX_TIM1_Init+0xa8>)
 8001696:	2200      	movs	r2, #0
 8001698:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <MX_TIM1_Init+0xa8>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80016a0:	2301      	movs	r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016a4:	2300      	movs	r3, #0
 80016a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016a8:	2301      	movs	r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016b4:	2300      	movs	r3, #0
 80016b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016b8:	2301      	movs	r3, #1
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016bc:	2300      	movs	r3, #0
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	4619      	mov	r1, r3
 80016ca:	480d      	ldr	r0, [pc, #52]	; (8001700 <MX_TIM1_Init+0xa8>)
 80016cc:	f007 f9dd 	bl	8008a8a <HAL_TIM_Encoder_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80016d6:	f000 fa41 	bl	8001b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	4619      	mov	r1, r3
 80016e6:	4806      	ldr	r0, [pc, #24]	; (8001700 <MX_TIM1_Init+0xa8>)
 80016e8:	f008 f842 	bl	8009770 <HAL_TIMEx_MasterConfigSynchronization>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80016f2:	f000 fa33 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	3730      	adds	r7, #48	; 0x30
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000338 	.word	0x20000338
 8001704:	40010000 	.word	0x40010000

08001708 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800170e:	f107 0308 	add.w	r3, r7, #8
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800171c:	463b      	mov	r3, r7
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001724:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <MX_TIM2_Init+0x98>)
 8001726:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800172a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 800172c:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <MX_TIM2_Init+0x98>)
 800172e:	f240 3247 	movw	r2, #839	; 0x347
 8001732:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <MX_TIM2_Init+0x98>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <MX_TIM2_Init+0x98>)
 800173c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001740:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001742:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <MX_TIM2_Init+0x98>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <MX_TIM2_Init+0x98>)
 800174a:	2280      	movs	r2, #128	; 0x80
 800174c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800174e:	4814      	ldr	r0, [pc, #80]	; (80017a0 <MX_TIM2_Init+0x98>)
 8001750:	f006 ff74 	bl	800863c <HAL_TIM_Base_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800175a:	f000 f9ff 	bl	8001b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800175e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001762:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001764:	f107 0308 	add.w	r3, r7, #8
 8001768:	4619      	mov	r1, r3
 800176a:	480d      	ldr	r0, [pc, #52]	; (80017a0 <MX_TIM2_Init+0x98>)
 800176c:	f007 fbfa 	bl	8008f64 <HAL_TIM_ConfigClockSource>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001776:	f000 f9f1 	bl	8001b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800177a:	2310      	movs	r3, #16
 800177c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001782:	463b      	mov	r3, r7
 8001784:	4619      	mov	r1, r3
 8001786:	4806      	ldr	r0, [pc, #24]	; (80017a0 <MX_TIM2_Init+0x98>)
 8001788:	f007 fff2 	bl	8009770 <HAL_TIMEx_MasterConfigSynchronization>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001792:	f000 f9e3 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200003e8 	.word	0x200003e8

080017a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08e      	sub	sp, #56	; 0x38
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b8:	f107 0320 	add.w	r3, r7, #32
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
 80017d0:	615a      	str	r2, [r3, #20]
 80017d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017d4:	4b2b      	ldr	r3, [pc, #172]	; (8001884 <MX_TIM3_Init+0xe0>)
 80017d6:	4a2c      	ldr	r2, [pc, #176]	; (8001888 <MX_TIM3_Init+0xe4>)
 80017d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 80017da:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <MX_TIM3_Init+0xe0>)
 80017dc:	f640 0233 	movw	r2, #2099	; 0x833
 80017e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e2:	4b28      	ldr	r3, [pc, #160]	; (8001884 <MX_TIM3_Init+0xe0>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80017e8:	4b26      	ldr	r3, [pc, #152]	; (8001884 <MX_TIM3_Init+0xe0>)
 80017ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80017ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f0:	4b24      	ldr	r3, [pc, #144]	; (8001884 <MX_TIM3_Init+0xe0>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017f6:	4b23      	ldr	r3, [pc, #140]	; (8001884 <MX_TIM3_Init+0xe0>)
 80017f8:	2280      	movs	r2, #128	; 0x80
 80017fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017fc:	4821      	ldr	r0, [pc, #132]	; (8001884 <MX_TIM3_Init+0xe0>)
 80017fe:	f006 ff1d 	bl	800863c <HAL_TIM_Base_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001808:	f000 f9a8 	bl	8001b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800180c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001812:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001816:	4619      	mov	r1, r3
 8001818:	481a      	ldr	r0, [pc, #104]	; (8001884 <MX_TIM3_Init+0xe0>)
 800181a:	f007 fba3 	bl	8008f64 <HAL_TIM_ConfigClockSource>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001824:	f000 f99a 	bl	8001b5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001828:	4816      	ldr	r0, [pc, #88]	; (8001884 <MX_TIM3_Init+0xe0>)
 800182a:	f007 f8d5 	bl	80089d8 <HAL_TIM_PWM_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001834:	f000 f992 	bl	8001b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001838:	2300      	movs	r3, #0
 800183a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183c:	2300      	movs	r3, #0
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001840:	f107 0320 	add.w	r3, r7, #32
 8001844:	4619      	mov	r1, r3
 8001846:	480f      	ldr	r0, [pc, #60]	; (8001884 <MX_TIM3_Init+0xe0>)
 8001848:	f007 ff92 	bl	8009770 <HAL_TIMEx_MasterConfigSynchronization>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001852:	f000 f983 	bl	8001b5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001856:	2360      	movs	r3, #96	; 0x60
 8001858:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	2200      	movs	r2, #0
 800186a:	4619      	mov	r1, r3
 800186c:	4805      	ldr	r0, [pc, #20]	; (8001884 <MX_TIM3_Init+0xe0>)
 800186e:	f007 fabb 	bl	8008de8 <HAL_TIM_PWM_ConfigChannel>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001878:	f000 f970 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800187c:	bf00      	nop
 800187e:	3738      	adds	r7, #56	; 0x38
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	200002e4 	.word	0x200002e4
 8001888:	40000400 	.word	0x40000400

0800188c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08c      	sub	sp, #48	; 0x30
 8001890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
 80018a6:	4ba6      	ldr	r3, [pc, #664]	; (8001b40 <MX_GPIO_Init+0x2b4>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4aa5      	ldr	r2, [pc, #660]	; (8001b40 <MX_GPIO_Init+0x2b4>)
 80018ac:	f043 0310 	orr.w	r3, r3, #16
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4ba3      	ldr	r3, [pc, #652]	; (8001b40 <MX_GPIO_Init+0x2b4>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0310 	and.w	r3, r3, #16
 80018ba:	61bb      	str	r3, [r7, #24]
 80018bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	4b9f      	ldr	r3, [pc, #636]	; (8001b40 <MX_GPIO_Init+0x2b4>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a9e      	ldr	r2, [pc, #632]	; (8001b40 <MX_GPIO_Init+0x2b4>)
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b9c      	ldr	r3, [pc, #624]	; (8001b40 <MX_GPIO_Init+0x2b4>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	4b98      	ldr	r3, [pc, #608]	; (8001b40 <MX_GPIO_Init+0x2b4>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a97      	ldr	r2, [pc, #604]	; (8001b40 <MX_GPIO_Init+0x2b4>)
 80018e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b95      	ldr	r3, [pc, #596]	; (8001b40 <MX_GPIO_Init+0x2b4>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	4b91      	ldr	r3, [pc, #580]	; (8001b40 <MX_GPIO_Init+0x2b4>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a90      	ldr	r2, [pc, #576]	; (8001b40 <MX_GPIO_Init+0x2b4>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b8e      	ldr	r3, [pc, #568]	; (8001b40 <MX_GPIO_Init+0x2b4>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	4b8a      	ldr	r3, [pc, #552]	; (8001b40 <MX_GPIO_Init+0x2b4>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a89      	ldr	r2, [pc, #548]	; (8001b40 <MX_GPIO_Init+0x2b4>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b87      	ldr	r3, [pc, #540]	; (8001b40 <MX_GPIO_Init+0x2b4>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	4b83      	ldr	r3, [pc, #524]	; (8001b40 <MX_GPIO_Init+0x2b4>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a82      	ldr	r2, [pc, #520]	; (8001b40 <MX_GPIO_Init+0x2b4>)
 8001938:	f043 0308 	orr.w	r3, r3, #8
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b80      	ldr	r3, [pc, #512]	; (8001b40 <MX_GPIO_Init+0x2b4>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 800194a:	2200      	movs	r2, #0
 800194c:	217c      	movs	r1, #124	; 0x7c
 800194e:	487d      	ldr	r0, [pc, #500]	; (8001b44 <MX_GPIO_Init+0x2b8>)
 8001950:	f002 fa3e 	bl	8003dd0 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001954:	2201      	movs	r2, #1
 8001956:	2101      	movs	r1, #1
 8001958:	487b      	ldr	r0, [pc, #492]	; (8001b48 <MX_GPIO_Init+0x2bc>)
 800195a:	f002 fa39 	bl	8003dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 800195e:	2200      	movs	r2, #0
 8001960:	f64f 7110 	movw	r1, #65296	; 0xff10
 8001964:	4879      	ldr	r0, [pc, #484]	; (8001b4c <MX_GPIO_Init+0x2c0>)
 8001966:	f002 fa33 	bl	8003dd0 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_mcroSD_Pin|CS_M25Q_Pin, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8001970:	4875      	ldr	r0, [pc, #468]	; (8001b48 <MX_GPIO_Init+0x2bc>)
 8001972:	f002 fa2d 	bl	8003dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8001976:	2200      	movs	r2, #0
 8001978:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800197c:	4874      	ldr	r0, [pc, #464]	; (8001b50 <MX_GPIO_Init+0x2c4>)
 800197e:	f002 fa27 	bl	8003dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 8001982:	2374      	movs	r3, #116	; 0x74
 8001984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001986:	2301      	movs	r3, #1
 8001988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001992:	f107 031c 	add.w	r3, r7, #28
 8001996:	4619      	mov	r1, r3
 8001998:	486a      	ldr	r0, [pc, #424]	; (8001b44 <MX_GPIO_Init+0x2b8>)
 800199a:	f002 f865 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800199e:	2308      	movs	r3, #8
 80019a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	4619      	mov	r1, r3
 80019b4:	4863      	ldr	r0, [pc, #396]	; (8001b44 <MX_GPIO_Init+0x2b8>)
 80019b6:	f002 f857 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 80019ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c0:	2300      	movs	r3, #0
 80019c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80019c8:	f107 031c 	add.w	r3, r7, #28
 80019cc:	4619      	mov	r1, r3
 80019ce:	485e      	ldr	r0, [pc, #376]	; (8001b48 <MX_GPIO_Init+0x2bc>)
 80019d0:	f002 f84a 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_mcroSD_Pin CS_M25Q_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_mcroSD_Pin|CS_M25Q_Pin;
 80019d4:	f640 0341 	movw	r3, #2113	; 0x841
 80019d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019da:	2301      	movs	r3, #1
 80019dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e2:	2300      	movs	r3, #0
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e6:	f107 031c 	add.w	r3, r7, #28
 80019ea:	4619      	mov	r1, r3
 80019ec:	4856      	ldr	r0, [pc, #344]	; (8001b48 <MX_GPIO_Init+0x2bc>)
 80019ee:	f002 f83b 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80019f2:	2308      	movs	r3, #8
 80019f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a02:	2305      	movs	r3, #5
 8001a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001a06:	f107 031c 	add.w	r3, r7, #28
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	484e      	ldr	r0, [pc, #312]	; (8001b48 <MX_GPIO_Init+0x2bc>)
 8001a0e:	f002 f82b 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a12:	2301      	movs	r3, #1
 8001a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a16:	4b4f      	ldr	r3, [pc, #316]	; (8001b54 <MX_GPIO_Init+0x2c8>)
 8001a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a1e:	f107 031c 	add.w	r3, r7, #28
 8001a22:	4619      	mov	r1, r3
 8001a24:	484c      	ldr	r0, [pc, #304]	; (8001b58 <MX_GPIO_Init+0x2cc>)
 8001a26:	f002 f81f 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001a2a:	2304      	movs	r3, #4
 8001a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001a36:	f107 031c 	add.w	r3, r7, #28
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4844      	ldr	r0, [pc, #272]	; (8001b50 <MX_GPIO_Init+0x2c4>)
 8001a3e:	f002 f813 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTION_SENSOR_9960_Pin KEYBOARD_COLUMN_3_Pin encoder_button_Pin */
  GPIO_InitStruct.Pin = MOTION_SENSOR_9960_Pin|KEYBOARD_COLUMN_3_Pin|encoder_button_Pin;
 8001a42:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	4619      	mov	r1, r3
 8001a56:	483b      	ldr	r0, [pc, #236]	; (8001b44 <MX_GPIO_Init+0x2b8>)
 8001a58:	f002 f806 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 8001a5c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a62:	2300      	movs	r3, #0
 8001a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a66:	2301      	movs	r3, #1
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6a:	f107 031c 	add.w	r3, r7, #28
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4837      	ldr	r0, [pc, #220]	; (8001b50 <MX_GPIO_Init+0x2c4>)
 8001a72:	f001 fff9 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001a76:	f64f 7310 	movw	r3, #65296	; 0xff10
 8001a7a:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	482f      	ldr	r0, [pc, #188]	; (8001b4c <MX_GPIO_Init+0x2c0>)
 8001a90:	f001 ffea 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a94:	2320      	movs	r3, #32
 8001a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4829      	ldr	r0, [pc, #164]	; (8001b4c <MX_GPIO_Init+0x2c0>)
 8001aa8:	f001 ffde 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001aac:	2340      	movs	r3, #64	; 0x40
 8001aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abc:	f107 031c 	add.w	r3, r7, #28
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4823      	ldr	r0, [pc, #140]	; (8001b50 <MX_GPIO_Init+0x2c4>)
 8001ac4:	f001 ffd0 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8001ac8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ada:	f107 031c 	add.w	r3, r7, #28
 8001ade:	4619      	mov	r1, r3
 8001ae0:	481b      	ldr	r0, [pc, #108]	; (8001b50 <MX_GPIO_Init+0x2c4>)
 8001ae2:	f001 ffc1 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aec:	2312      	movs	r3, #18
 8001aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001af0:	2301      	movs	r3, #1
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001af8:	2304      	movs	r3, #4
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8001afc:	f107 031c 	add.w	r3, r7, #28
 8001b00:	4619      	mov	r1, r3
 8001b02:	4813      	ldr	r0, [pc, #76]	; (8001b50 <MX_GPIO_Init+0x2c4>)
 8001b04:	f001 ffb0 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8001b14:	f107 031c 	add.w	r3, r7, #28
 8001b18:	4619      	mov	r1, r3
 8001b1a:	480a      	ldr	r0, [pc, #40]	; (8001b44 <MX_GPIO_Init+0x2b8>)
 8001b1c:	f001 ffa4 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001b20:	2302      	movs	r3, #2
 8001b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <MX_GPIO_Init+0x2c8>)
 8001b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001b2c:	f107 031c 	add.w	r3, r7, #28
 8001b30:	4619      	mov	r1, r3
 8001b32:	4804      	ldr	r0, [pc, #16]	; (8001b44 <MX_GPIO_Init+0x2b8>)
 8001b34:	f001 ff98 	bl	8003a68 <HAL_GPIO_Init>

}
 8001b38:	bf00      	nop
 8001b3a:	3730      	adds	r7, #48	; 0x30
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40020800 	.word	0x40020800
 8001b4c:	40020c00 	.word	0x40020c00
 8001b50:	40020400 	.word	0x40020400
 8001b54:	10120000 	.word	0x10120000
 8001b58:	40020000 	.word	0x40020000

08001b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b60:	b672      	cpsid	i
}
 8001b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <Error_Handler+0x8>
	...

08001b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <HAL_MspInit+0x5c>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	4a13      	ldr	r2, [pc, #76]	; (8001bc4 <HAL_MspInit+0x5c>)
 8001b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7e:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <HAL_MspInit+0x5c>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	603b      	str	r3, [r7, #0]
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <HAL_MspInit+0x5c>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	4a0c      	ldr	r2, [pc, #48]	; (8001bc4 <HAL_MspInit+0x5c>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b98:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <HAL_MspInit+0x5c>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ba6:	2007      	movs	r0, #7
 8001ba8:	f001 ff1c 	bl	80039e4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001bac:	2200      	movs	r2, #0
 8001bae:	2100      	movs	r1, #0
 8001bb0:	2005      	movs	r0, #5
 8001bb2:	f001 ff22 	bl	80039fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001bb6:	2005      	movs	r0, #5
 8001bb8:	f001 ff3b 	bl	8003a32 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40023800 	.word	0x40023800

08001bc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08c      	sub	sp, #48	; 0x30
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 031c 	add.w	r3, r7, #28
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a42      	ldr	r2, [pc, #264]	; (8001cf0 <HAL_I2C_MspInit+0x128>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d12d      	bne.n	8001c46 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	61bb      	str	r3, [r7, #24]
 8001bee:	4b41      	ldr	r3, [pc, #260]	; (8001cf4 <HAL_I2C_MspInit+0x12c>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a40      	ldr	r2, [pc, #256]	; (8001cf4 <HAL_I2C_MspInit+0x12c>)
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b3e      	ldr	r3, [pc, #248]	; (8001cf4 <HAL_I2C_MspInit+0x12c>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	61bb      	str	r3, [r7, #24]
 8001c04:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c06:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c0c:	2312      	movs	r3, #18
 8001c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c10:	2301      	movs	r3, #1
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c18:	2304      	movs	r3, #4
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1c:	f107 031c 	add.w	r3, r7, #28
 8001c20:	4619      	mov	r1, r3
 8001c22:	4835      	ldr	r0, [pc, #212]	; (8001cf8 <HAL_I2C_MspInit+0x130>)
 8001c24:	f001 ff20 	bl	8003a68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	4b31      	ldr	r3, [pc, #196]	; (8001cf4 <HAL_I2C_MspInit+0x12c>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	4a30      	ldr	r2, [pc, #192]	; (8001cf4 <HAL_I2C_MspInit+0x12c>)
 8001c32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c36:	6413      	str	r3, [r2, #64]	; 0x40
 8001c38:	4b2e      	ldr	r3, [pc, #184]	; (8001cf4 <HAL_I2C_MspInit+0x12c>)
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001c44:	e050      	b.n	8001ce8 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a2c      	ldr	r2, [pc, #176]	; (8001cfc <HAL_I2C_MspInit+0x134>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d14b      	bne.n	8001ce8 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	4b27      	ldr	r3, [pc, #156]	; (8001cf4 <HAL_I2C_MspInit+0x12c>)
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c58:	4a26      	ldr	r2, [pc, #152]	; (8001cf4 <HAL_I2C_MspInit+0x12c>)
 8001c5a:	f043 0304 	orr.w	r3, r3, #4
 8001c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c60:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <HAL_I2C_MspInit+0x12c>)
 8001c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <HAL_I2C_MspInit+0x12c>)
 8001c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c74:	4a1f      	ldr	r2, [pc, #124]	; (8001cf4 <HAL_I2C_MspInit+0x12c>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <HAL_I2C_MspInit+0x12c>)
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c8e:	2312      	movs	r3, #18
 8001c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c92:	2301      	movs	r3, #1
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c96:	2303      	movs	r3, #3
 8001c98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9e:	f107 031c 	add.w	r3, r7, #28
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4816      	ldr	r0, [pc, #88]	; (8001d00 <HAL_I2C_MspInit+0x138>)
 8001ca6:	f001 fedf 	bl	8003a68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cb0:	2312      	movs	r3, #18
 8001cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc0:	f107 031c 	add.w	r3, r7, #28
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	480f      	ldr	r0, [pc, #60]	; (8001d04 <HAL_I2C_MspInit+0x13c>)
 8001cc8:	f001 fece 	bl	8003a68 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <HAL_I2C_MspInit+0x12c>)
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	4a07      	ldr	r2, [pc, #28]	; (8001cf4 <HAL_I2C_MspInit+0x12c>)
 8001cd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cda:	6413      	str	r3, [r2, #64]	; 0x40
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_I2C_MspInit+0x12c>)
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
}
 8001ce8:	bf00      	nop
 8001cea:	3730      	adds	r7, #48	; 0x30
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40005800 	.word	0x40005800
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020400 	.word	0x40020400
 8001cfc:	40005c00 	.word	0x40005c00
 8001d00:	40020800 	.word	0x40020800
 8001d04:	40020000 	.word	0x40020000

08001d08 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	; 0x28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a28      	ldr	r2, [pc, #160]	; (8001dc8 <HAL_I2S_MspInit+0xc0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d14a      	bne.n	8001dc0 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <HAL_I2S_MspInit+0xc4>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	4a26      	ldr	r2, [pc, #152]	; (8001dcc <HAL_I2S_MspInit+0xc4>)
 8001d34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d38:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3a:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <HAL_I2S_MspInit+0xc4>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <HAL_I2S_MspInit+0xc4>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a1f      	ldr	r2, [pc, #124]	; (8001dcc <HAL_I2S_MspInit+0xc4>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <HAL_I2S_MspInit+0xc4>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <HAL_I2S_MspInit+0xc4>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	4a18      	ldr	r2, [pc, #96]	; (8001dcc <HAL_I2S_MspInit+0xc4>)
 8001d6c:	f043 0304 	orr.w	r3, r3, #4
 8001d70:	6313      	str	r3, [r2, #48]	; 0x30
 8001d72:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <HAL_I2S_MspInit+0xc4>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001d7e:	2310      	movs	r3, #16
 8001d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d8e:	2306      	movs	r3, #6
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	4619      	mov	r1, r3
 8001d98:	480d      	ldr	r0, [pc, #52]	; (8001dd0 <HAL_I2S_MspInit+0xc8>)
 8001d9a:	f001 fe65 	bl	8003a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001d9e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001db0:	2306      	movs	r3, #6
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	4619      	mov	r1, r3
 8001dba:	4806      	ldr	r0, [pc, #24]	; (8001dd4 <HAL_I2S_MspInit+0xcc>)
 8001dbc:	f001 fe54 	bl	8003a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001dc0:	bf00      	nop
 8001dc2:	3728      	adds	r7, #40	; 0x28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40003c00 	.word	0x40003c00
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40020000 	.word	0x40020000
 8001dd4:	40020800 	.word	0x40020800

08001dd8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0b      	ldr	r2, [pc, #44]	; (8001e14 <HAL_RNG_MspInit+0x3c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d10d      	bne.n	8001e06 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <HAL_RNG_MspInit+0x40>)
 8001df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df2:	4a09      	ldr	r2, [pc, #36]	; (8001e18 <HAL_RNG_MspInit+0x40>)
 8001df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001df8:	6353      	str	r3, [r2, #52]	; 0x34
 8001dfa:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <HAL_RNG_MspInit+0x40>)
 8001dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	50060800 	.word	0x50060800
 8001e18:	40023800 	.word	0x40023800

08001e1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08c      	sub	sp, #48	; 0x30
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 031c 	add.w	r3, r7, #28
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a41      	ldr	r2, [pc, #260]	; (8001f40 <HAL_SPI_MspInit+0x124>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d12c      	bne.n	8001e98 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61bb      	str	r3, [r7, #24]
 8001e42:	4b40      	ldr	r3, [pc, #256]	; (8001f44 <HAL_SPI_MspInit+0x128>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	4a3f      	ldr	r2, [pc, #252]	; (8001f44 <HAL_SPI_MspInit+0x128>)
 8001e48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4e:	4b3d      	ldr	r3, [pc, #244]	; (8001f44 <HAL_SPI_MspInit+0x128>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e56:	61bb      	str	r3, [r7, #24]
 8001e58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	4b39      	ldr	r3, [pc, #228]	; (8001f44 <HAL_SPI_MspInit+0x128>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a38      	ldr	r2, [pc, #224]	; (8001f44 <HAL_SPI_MspInit+0x128>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b36      	ldr	r3, [pc, #216]	; (8001f44 <HAL_SPI_MspInit+0x128>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001e76:	23e0      	movs	r3, #224	; 0xe0
 8001e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e82:	2303      	movs	r3, #3
 8001e84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e86:	2305      	movs	r3, #5
 8001e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8a:	f107 031c 	add.w	r3, r7, #28
 8001e8e:	4619      	mov	r1, r3
 8001e90:	482d      	ldr	r0, [pc, #180]	; (8001f48 <HAL_SPI_MspInit+0x12c>)
 8001e92:	f001 fde9 	bl	8003a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e96:	e04f      	b.n	8001f38 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a2b      	ldr	r2, [pc, #172]	; (8001f4c <HAL_SPI_MspInit+0x130>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d14a      	bne.n	8001f38 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <HAL_SPI_MspInit+0x128>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	4a26      	ldr	r2, [pc, #152]	; (8001f44 <HAL_SPI_MspInit+0x128>)
 8001eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb2:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <HAL_SPI_MspInit+0x128>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <HAL_SPI_MspInit+0x128>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a1f      	ldr	r2, [pc, #124]	; (8001f44 <HAL_SPI_MspInit+0x128>)
 8001ec8:	f043 0304 	orr.w	r3, r3, #4
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <HAL_SPI_MspInit+0x128>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <HAL_SPI_MspInit+0x128>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a18      	ldr	r2, [pc, #96]	; (8001f44 <HAL_SPI_MspInit+0x128>)
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <HAL_SPI_MspInit+0x128>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ef6:	2304      	movs	r3, #4
 8001ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f02:	2303      	movs	r3, #3
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f06:	2305      	movs	r3, #5
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f0a:	f107 031c 	add.w	r3, r7, #28
 8001f0e:	4619      	mov	r1, r3
 8001f10:	480f      	ldr	r0, [pc, #60]	; (8001f50 <HAL_SPI_MspInit+0x134>)
 8001f12:	f001 fda9 	bl	8003a68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001f16:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f24:	2303      	movs	r3, #3
 8001f26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f28:	2305      	movs	r3, #5
 8001f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2c:	f107 031c 	add.w	r3, r7, #28
 8001f30:	4619      	mov	r1, r3
 8001f32:	4808      	ldr	r0, [pc, #32]	; (8001f54 <HAL_SPI_MspInit+0x138>)
 8001f34:	f001 fd98 	bl	8003a68 <HAL_GPIO_Init>
}
 8001f38:	bf00      	nop
 8001f3a:	3730      	adds	r7, #48	; 0x30
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40013000 	.word	0x40013000
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40020000 	.word	0x40020000
 8001f4c:	40003800 	.word	0x40003800
 8001f50:	40020800 	.word	0x40020800
 8001f54:	40020400 	.word	0x40020400

08001f58 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a19      	ldr	r2, [pc, #100]	; (8001fdc <HAL_TIM_Encoder_MspInit+0x84>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d12c      	bne.n	8001fd4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	4a17      	ldr	r2, [pc, #92]	; (8001fe0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6453      	str	r3, [r2, #68]	; 0x44
 8001f8a:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4a10      	ldr	r2, [pc, #64]	; (8001fe0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001fa0:	f043 0310 	orr.w	r3, r3, #16
 8001fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f003 0310 	and.w	r3, r3, #16
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001fb2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4805      	ldr	r0, [pc, #20]	; (8001fe4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001fd0:	f001 fd4a 	bl	8003a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001fd4:	bf00      	nop
 8001fd6:	3728      	adds	r7, #40	; 0x28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40010000 	.word	0x40010000
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40021000 	.word	0x40021000

08001fe8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff8:	d10e      	bne.n	8002018 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	4b16      	ldr	r3, [pc, #88]	; (8002058 <HAL_TIM_Base_MspInit+0x70>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	4a15      	ldr	r2, [pc, #84]	; (8002058 <HAL_TIM_Base_MspInit+0x70>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6413      	str	r3, [r2, #64]	; 0x40
 800200a:	4b13      	ldr	r3, [pc, #76]	; (8002058 <HAL_TIM_Base_MspInit+0x70>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002016:	e01a      	b.n	800204e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a0f      	ldr	r2, [pc, #60]	; (800205c <HAL_TIM_Base_MspInit+0x74>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d115      	bne.n	800204e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <HAL_TIM_Base_MspInit+0x70>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	4a0b      	ldr	r2, [pc, #44]	; (8002058 <HAL_TIM_Base_MspInit+0x70>)
 800202c:	f043 0302 	orr.w	r3, r3, #2
 8002030:	6413      	str	r3, [r2, #64]	; 0x40
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_TIM_Base_MspInit+0x70>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	2100      	movs	r1, #0
 8002042:	201d      	movs	r0, #29
 8002044:	f001 fcd9 	bl	80039fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002048:	201d      	movs	r0, #29
 800204a:	f001 fcf2 	bl	8003a32 <HAL_NVIC_EnableIRQ>
}
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800
 800205c:	40000400 	.word	0x40000400

08002060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002064:	e7fe      	b.n	8002064 <NMI_Handler+0x4>

08002066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800206a:	e7fe      	b.n	800206a <HardFault_Handler+0x4>

0800206c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002070:	e7fe      	b.n	8002070 <MemManage_Handler+0x4>

08002072 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002076:	e7fe      	b.n	8002076 <BusFault_Handler+0x4>

08002078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800207c:	e7fe      	b.n	800207c <UsageFault_Handler+0x4>

0800207e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ac:	f001 fb86 	bl	80037bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 80020c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020cc:	481b      	ldr	r0, [pc, #108]	; (800213c <TIM2_IRQHandler+0x78>)
 80020ce:	f001 fe98 	bl	8003e02 <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 80020d2:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <TIM2_IRQHandler+0x7c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d111      	bne.n	80020fe <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 80020da:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <TIM2_IRQHandler+0x80>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2bc8      	cmp	r3, #200	; 0xc8
 80020e0:	dc0a      	bgt.n	80020f8 <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 80020e2:	4b18      	ldr	r3, [pc, #96]	; (8002144 <TIM2_IRQHandler+0x80>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	4b18      	ldr	r3, [pc, #96]	; (8002148 <TIM2_IRQHandler+0x84>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 80020ec:	4b15      	ldr	r3, [pc, #84]	; (8002144 <TIM2_IRQHandler+0x80>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	3301      	adds	r3, #1
 80020f2:	4a14      	ldr	r2, [pc, #80]	; (8002144 <TIM2_IRQHandler+0x80>)
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	e002      	b.n	80020fe <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <TIM2_IRQHandler+0x7c>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 80020fe:	4b10      	ldr	r3, [pc, #64]	; (8002140 <TIM2_IRQHandler+0x7c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d114      	bne.n	8002130 <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 8002106:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <TIM2_IRQHandler+0x80>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b63      	cmp	r3, #99	; 0x63
 800210c:	dd0a      	ble.n	8002124 <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 800210e:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <TIM2_IRQHandler+0x80>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <TIM2_IRQHandler+0x84>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 8002118:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <TIM2_IRQHandler+0x80>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	3b01      	subs	r3, #1
 800211e:	4a09      	ldr	r2, [pc, #36]	; (8002144 <TIM2_IRQHandler+0x80>)
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	e005      	b.n	8002130 <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <TIM2_IRQHandler+0x7c>)
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
		  i = 100;
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <TIM2_IRQHandler+0x80>)
 800212c:	2264      	movs	r2, #100	; 0x64
 800212e:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002130:	4805      	ldr	r0, [pc, #20]	; (8002148 <TIM2_IRQHandler+0x84>)
 8002132:	f006 fd50 	bl	8008bd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40020c00 	.word	0x40020c00
 8002140:	2000014c 	.word	0x2000014c
 8002144:	20000000 	.word	0x20000000
 8002148:	200003e8 	.word	0x200003e8

0800214c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8002150:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002154:	4804      	ldr	r0, [pc, #16]	; (8002168 <TIM3_IRQHandler+0x1c>)
 8002156:	f001 fe54 	bl	8003e02 <HAL_GPIO_TogglePin>
  read_digits();
 800215a:	f7fe fe1d 	bl	8000d98 <read_digits>

	//keyboard_test();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800215e:	4803      	ldr	r0, [pc, #12]	; (800216c <TIM3_IRQHandler+0x20>)
 8002160:	f006 fd39 	bl	8008bd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002164:	bf00      	nop
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40020c00 	.word	0x40020c00
 800216c:	200002e4 	.word	0x200002e4

08002170 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002174:	4802      	ldr	r0, [pc, #8]	; (8002180 <OTG_FS_IRQHandler+0x10>)
 8002176:	f002 f8c9 	bl	800430c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000a60 	.word	0x20000a60

08002184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800218c:	4a14      	ldr	r2, [pc, #80]	; (80021e0 <_sbrk+0x5c>)
 800218e:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <_sbrk+0x60>)
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002198:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <_sbrk+0x64>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d102      	bne.n	80021a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021a0:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <_sbrk+0x64>)
 80021a2:	4a12      	ldr	r2, [pc, #72]	; (80021ec <_sbrk+0x68>)
 80021a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021a6:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <_sbrk+0x64>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d207      	bcs.n	80021c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021b4:	f00a fcd4 	bl	800cb60 <__errno>
 80021b8:	4603      	mov	r3, r0
 80021ba:	220c      	movs	r2, #12
 80021bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021c2:	e009      	b.n	80021d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021c4:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <_sbrk+0x64>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ca:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <_sbrk+0x64>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	4a05      	ldr	r2, [pc, #20]	; (80021e8 <_sbrk+0x64>)
 80021d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021d6:	68fb      	ldr	r3, [r7, #12]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20020000 	.word	0x20020000
 80021e4:	00000400 	.word	0x00000400
 80021e8:	20000150 	.word	0x20000150
 80021ec:	20000d78 	.word	0x20000d78

080021f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <SystemInit+0x20>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fa:	4a05      	ldr	r2, [pc, #20]	; (8002210 <SystemInit+0x20>)
 80021fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b08b      	sub	sp, #44	; 0x2c
 8002218:	af00      	add	r7, sp, #0
 800221a:	4604      	mov	r4, r0
 800221c:	4608      	mov	r0, r1
 800221e:	4611      	mov	r1, r2
 8002220:	461a      	mov	r2, r3
 8002222:	4623      	mov	r3, r4
 8002224:	80fb      	strh	r3, [r7, #6]
 8002226:	4603      	mov	r3, r0
 8002228:	80bb      	strh	r3, [r7, #4]
 800222a:	460b      	mov	r3, r1
 800222c:	807b      	strh	r3, [r7, #2]
 800222e:	4613      	mov	r3, r2
 8002230:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8002232:	887b      	ldrh	r3, [r7, #2]
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 800223a:	887b      	ldrh	r3, [r7, #2]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	f1c3 0301 	rsb	r3, r3, #1
 8002242:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]

    while (x >= y)
 800224c:	e061      	b.n	8002312 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 800224e:	88fa      	ldrh	r2, [r7, #6]
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	e018      	b.n	800228a <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	b298      	uxth	r0, r3
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	b29a      	uxth	r2, r3
 8002260:	88bb      	ldrh	r3, [r7, #4]
 8002262:	4413      	add	r3, r2
 8002264:	b29b      	uxth	r3, r3
 8002266:	883a      	ldrh	r2, [r7, #0]
 8002268:	4619      	mov	r1, r3
 800226a:	f000 fb47 	bl	80028fc <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	b298      	uxth	r0, r3
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	b29b      	uxth	r3, r3
 8002276:	88ba      	ldrh	r2, [r7, #4]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	b29b      	uxth	r3, r3
 800227c:	883a      	ldrh	r2, [r7, #0]
 800227e:	4619      	mov	r1, r3
 8002280:	f000 fb3c 	bl	80028fc <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	3301      	adds	r3, #1
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	88fa      	ldrh	r2, [r7, #6]
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	4413      	add	r3, r2
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	429a      	cmp	r2, r3
 8002294:	dde0      	ble.n	8002258 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8002296:	88fa      	ldrh	r2, [r7, #6]
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	e018      	b.n	80022d2 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	b298      	uxth	r0, r3
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	88bb      	ldrh	r3, [r7, #4]
 80022aa:	4413      	add	r3, r2
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	883a      	ldrh	r2, [r7, #0]
 80022b0:	4619      	mov	r1, r3
 80022b2:	f000 fb23 	bl	80028fc <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	b298      	uxth	r0, r3
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	b29b      	uxth	r3, r3
 80022be:	88ba      	ldrh	r2, [r7, #4]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	883a      	ldrh	r2, [r7, #0]
 80022c6:	4619      	mov	r1, r3
 80022c8:	f000 fb18 	bl	80028fc <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	3301      	adds	r3, #1
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	88fa      	ldrh	r2, [r7, #6]
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	4413      	add	r3, r2
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	429a      	cmp	r2, r3
 80022dc:	dde0      	ble.n	80022a0 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	3301      	adds	r3, #1
 80022e2:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	4413      	add	r3, r2
 80022ea:	617b      	str	r3, [r7, #20]
        yChange += 2;
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	3302      	adds	r3, #2
 80022f0:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	005a      	lsls	r2, r3, #1
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	4413      	add	r3, r2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	dd09      	ble.n	8002312 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	3b01      	subs	r3, #1
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	4413      	add	r3, r2
 800230a:	617b      	str	r3, [r7, #20]
            xChange += 2;
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	3302      	adds	r3, #2
 8002310:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8002312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002314:	6a3b      	ldr	r3, [r7, #32]
 8002316:	429a      	cmp	r2, r3
 8002318:	da99      	bge.n	800224e <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 800231a:	bf00      	nop
 800231c:	bf00      	nop
 800231e:	372c      	adds	r7, #44	; 0x2c
 8002320:	46bd      	mov	sp, r7
 8002322:	bd90      	pop	{r4, r7, pc}

08002324 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8002328:	2200      	movs	r2, #0
 800232a:	2110      	movs	r1, #16
 800232c:	4802      	ldr	r0, [pc, #8]	; (8002338 <ILI9341_SPI_Init+0x14>)
 800232e:	f001 fd4f 	bl	8003dd0 <HAL_GPIO_WritePin>
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000

0800233c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8002346:	1df9      	adds	r1, r7, #7
 8002348:	2301      	movs	r3, #1
 800234a:	2201      	movs	r2, #1
 800234c:	4803      	ldr	r0, [pc, #12]	; (800235c <ILI9341_SPI_Send+0x20>)
 800234e:	f005 ff6e 	bl	800822e <HAL_SPI_Transmit>
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	200001dc 	.word	0x200001dc

08002360 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800236a:	2200      	movs	r2, #0
 800236c:	2110      	movs	r1, #16
 800236e:	480a      	ldr	r0, [pc, #40]	; (8002398 <ILI9341_Write_Command+0x38>)
 8002370:	f001 fd2e 	bl	8003dd0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002374:	2200      	movs	r2, #0
 8002376:	2140      	movs	r1, #64	; 0x40
 8002378:	4807      	ldr	r0, [pc, #28]	; (8002398 <ILI9341_Write_Command+0x38>)
 800237a:	f001 fd29 	bl	8003dd0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ffdb 	bl	800233c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002386:	2201      	movs	r2, #1
 8002388:	2110      	movs	r1, #16
 800238a:	4803      	ldr	r0, [pc, #12]	; (8002398 <ILI9341_Write_Command+0x38>)
 800238c:	f001 fd20 	bl	8003dd0 <HAL_GPIO_WritePin>
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40021000 	.word	0x40021000

0800239c <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80023a6:	2201      	movs	r2, #1
 80023a8:	2140      	movs	r1, #64	; 0x40
 80023aa:	480a      	ldr	r0, [pc, #40]	; (80023d4 <ILI9341_Write_Data+0x38>)
 80023ac:	f001 fd10 	bl	8003dd0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80023b0:	2200      	movs	r2, #0
 80023b2:	2110      	movs	r1, #16
 80023b4:	4807      	ldr	r0, [pc, #28]	; (80023d4 <ILI9341_Write_Data+0x38>)
 80023b6:	f001 fd0b 	bl	8003dd0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ffbd 	bl	800233c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80023c2:	2201      	movs	r2, #1
 80023c4:	2110      	movs	r1, #16
 80023c6:	4803      	ldr	r0, [pc, #12]	; (80023d4 <ILI9341_Write_Data+0x38>)
 80023c8:	f001 fd02 	bl	8003dd0 <HAL_GPIO_WritePin>
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40021000 	.word	0x40021000

080023d8 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80023d8:	b590      	push	{r4, r7, lr}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4604      	mov	r4, r0
 80023e0:	4608      	mov	r0, r1
 80023e2:	4611      	mov	r1, r2
 80023e4:	461a      	mov	r2, r3
 80023e6:	4623      	mov	r3, r4
 80023e8:	80fb      	strh	r3, [r7, #6]
 80023ea:	4603      	mov	r3, r0
 80023ec:	80bb      	strh	r3, [r7, #4]
 80023ee:	460b      	mov	r3, r1
 80023f0:	807b      	strh	r3, [r7, #2]
 80023f2:	4613      	mov	r3, r2
 80023f4:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80023f6:	202a      	movs	r0, #42	; 0x2a
 80023f8:	f7ff ffb2 	bl	8002360 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80023fc:	88fb      	ldrh	r3, [r7, #6]
 80023fe:	0a1b      	lsrs	r3, r3, #8
 8002400:	b29b      	uxth	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ffc9 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800240a:	88fb      	ldrh	r3, [r7, #6]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff ffc4 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8002414:	887b      	ldrh	r3, [r7, #2]
 8002416:	0a1b      	lsrs	r3, r3, #8
 8002418:	b29b      	uxth	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ffbd 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8002422:	887b      	ldrh	r3, [r7, #2]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff ffb8 	bl	800239c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 800242c:	202b      	movs	r0, #43	; 0x2b
 800242e:	f7ff ff97 	bl	8002360 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8002432:	88bb      	ldrh	r3, [r7, #4]
 8002434:	0a1b      	lsrs	r3, r3, #8
 8002436:	b29b      	uxth	r3, r3
 8002438:	b2db      	uxtb	r3, r3
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff ffae 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8002440:	88bb      	ldrh	r3, [r7, #4]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ffa9 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800244a:	883b      	ldrh	r3, [r7, #0]
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	b29b      	uxth	r3, r3
 8002450:	b2db      	uxtb	r3, r3
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ffa2 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8002458:	883b      	ldrh	r3, [r7, #0]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff9d 	bl	800239c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8002462:	202c      	movs	r0, #44	; 0x2c
 8002464:	f7ff ff7c 	bl	8002360 <ILI9341_Write_Command>
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	bd90      	pop	{r4, r7, pc}

08002470 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8002474:	2200      	movs	r2, #0
 8002476:	2120      	movs	r1, #32
 8002478:	480a      	ldr	r0, [pc, #40]	; (80024a4 <ILI9341_Reset+0x34>)
 800247a:	f001 fca9 	bl	8003dd0 <HAL_GPIO_WritePin>
HAL_Delay(200);
 800247e:	20c8      	movs	r0, #200	; 0xc8
 8002480:	f001 f9bc 	bl	80037fc <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002484:	2200      	movs	r2, #0
 8002486:	2110      	movs	r1, #16
 8002488:	4806      	ldr	r0, [pc, #24]	; (80024a4 <ILI9341_Reset+0x34>)
 800248a:	f001 fca1 	bl	8003dd0 <HAL_GPIO_WritePin>
HAL_Delay(200);
 800248e:	20c8      	movs	r0, #200	; 0xc8
 8002490:	f001 f9b4 	bl	80037fc <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8002494:	2201      	movs	r2, #1
 8002496:	2120      	movs	r1, #32
 8002498:	4802      	ldr	r0, [pc, #8]	; (80024a4 <ILI9341_Reset+0x34>)
 800249a:	f001 fc99 	bl	8003dd0 <HAL_GPIO_WritePin>
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40021000 	.word	0x40021000

080024a8 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80024b6:	2036      	movs	r0, #54	; 0x36
 80024b8:	f7ff ff52 	bl	8002360 <ILI9341_Write_Command>
HAL_Delay(1);
 80024bc:	2001      	movs	r0, #1
 80024be:	f001 f99d 	bl	80037fc <HAL_Delay>
	
switch(screen_rotation) 
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d837      	bhi.n	8002538 <ILI9341_Set_Rotation+0x90>
 80024c8:	a201      	add	r2, pc, #4	; (adr r2, 80024d0 <ILI9341_Set_Rotation+0x28>)
 80024ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ce:	bf00      	nop
 80024d0:	080024e1 	.word	0x080024e1
 80024d4:	080024f7 	.word	0x080024f7
 80024d8:	0800250d 	.word	0x0800250d
 80024dc:	08002523 	.word	0x08002523
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80024e0:	2048      	movs	r0, #72	; 0x48
 80024e2:	f7ff ff5b 	bl	800239c <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80024e6:	4b17      	ldr	r3, [pc, #92]	; (8002544 <ILI9341_Set_Rotation+0x9c>)
 80024e8:	22f0      	movs	r2, #240	; 0xf0
 80024ea:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80024ec:	4b16      	ldr	r3, [pc, #88]	; (8002548 <ILI9341_Set_Rotation+0xa0>)
 80024ee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80024f2:	801a      	strh	r2, [r3, #0]
			break;
 80024f4:	e021      	b.n	800253a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80024f6:	2028      	movs	r0, #40	; 0x28
 80024f8:	f7ff ff50 	bl	800239c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80024fc:	4b11      	ldr	r3, [pc, #68]	; (8002544 <ILI9341_Set_Rotation+0x9c>)
 80024fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002502:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002504:	4b10      	ldr	r3, [pc, #64]	; (8002548 <ILI9341_Set_Rotation+0xa0>)
 8002506:	22f0      	movs	r2, #240	; 0xf0
 8002508:	801a      	strh	r2, [r3, #0]
			break;
 800250a:	e016      	b.n	800253a <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 800250c:	2088      	movs	r0, #136	; 0x88
 800250e:	f7ff ff45 	bl	800239c <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8002512:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <ILI9341_Set_Rotation+0x9c>)
 8002514:	22f0      	movs	r2, #240	; 0xf0
 8002516:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <ILI9341_Set_Rotation+0xa0>)
 800251a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800251e:	801a      	strh	r2, [r3, #0]
			break;
 8002520:	e00b      	b.n	800253a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8002522:	20e8      	movs	r0, #232	; 0xe8
 8002524:	f7ff ff3a 	bl	800239c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <ILI9341_Set_Rotation+0x9c>)
 800252a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800252e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <ILI9341_Set_Rotation+0xa0>)
 8002532:	22f0      	movs	r2, #240	; 0xf0
 8002534:	801a      	strh	r2, [r3, #0]
			break;
 8002536:	e000      	b.n	800253a <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002538:	bf00      	nop
	}
}
 800253a:	bf00      	nop
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	2000000a 	.word	0x2000000a
 8002548:	20000008 	.word	0x20000008

0800254c <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002550:	2201      	movs	r2, #1
 8002552:	2120      	movs	r1, #32
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <ILI9341_Enable+0x14>)
 8002556:	f001 fc3b 	bl	8003dd0 <HAL_GPIO_WritePin>
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40021000 	.word	0x40021000

08002564 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8002568:	f7ff fff0 	bl	800254c <ILI9341_Enable>
ILI9341_SPI_Init();
 800256c:	f7ff feda 	bl	8002324 <ILI9341_SPI_Init>
ILI9341_Reset();
 8002570:	f7ff ff7e 	bl	8002470 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8002574:	2001      	movs	r0, #1
 8002576:	f7ff fef3 	bl	8002360 <ILI9341_Write_Command>
HAL_Delay(1000);
 800257a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800257e:	f001 f93d 	bl	80037fc <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8002582:	20cb      	movs	r0, #203	; 0xcb
 8002584:	f7ff feec 	bl	8002360 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8002588:	2039      	movs	r0, #57	; 0x39
 800258a:	f7ff ff07 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 800258e:	202c      	movs	r0, #44	; 0x2c
 8002590:	f7ff ff04 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002594:	2000      	movs	r0, #0
 8002596:	f7ff ff01 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 800259a:	2034      	movs	r0, #52	; 0x34
 800259c:	f7ff fefe 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80025a0:	2002      	movs	r0, #2
 80025a2:	f7ff fefb 	bl	800239c <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80025a6:	20cf      	movs	r0, #207	; 0xcf
 80025a8:	f7ff feda 	bl	8002360 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80025ac:	2000      	movs	r0, #0
 80025ae:	f7ff fef5 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80025b2:	20c1      	movs	r0, #193	; 0xc1
 80025b4:	f7ff fef2 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80025b8:	2030      	movs	r0, #48	; 0x30
 80025ba:	f7ff feef 	bl	800239c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80025be:	20e8      	movs	r0, #232	; 0xe8
 80025c0:	f7ff fece 	bl	8002360 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80025c4:	2085      	movs	r0, #133	; 0x85
 80025c6:	f7ff fee9 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80025ca:	2000      	movs	r0, #0
 80025cc:	f7ff fee6 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80025d0:	2078      	movs	r0, #120	; 0x78
 80025d2:	f7ff fee3 	bl	800239c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80025d6:	20ea      	movs	r0, #234	; 0xea
 80025d8:	f7ff fec2 	bl	8002360 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80025dc:	2000      	movs	r0, #0
 80025de:	f7ff fedd 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7ff feda 	bl	800239c <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80025e8:	20ed      	movs	r0, #237	; 0xed
 80025ea:	f7ff feb9 	bl	8002360 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80025ee:	2064      	movs	r0, #100	; 0x64
 80025f0:	f7ff fed4 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80025f4:	2003      	movs	r0, #3
 80025f6:	f7ff fed1 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80025fa:	2012      	movs	r0, #18
 80025fc:	f7ff fece 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8002600:	2081      	movs	r0, #129	; 0x81
 8002602:	f7ff fecb 	bl	800239c <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8002606:	20f7      	movs	r0, #247	; 0xf7
 8002608:	f7ff feaa 	bl	8002360 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 800260c:	2020      	movs	r0, #32
 800260e:	f7ff fec5 	bl	800239c <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8002612:	20c0      	movs	r0, #192	; 0xc0
 8002614:	f7ff fea4 	bl	8002360 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8002618:	2023      	movs	r0, #35	; 0x23
 800261a:	f7ff febf 	bl	800239c <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 800261e:	20c1      	movs	r0, #193	; 0xc1
 8002620:	f7ff fe9e 	bl	8002360 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8002624:	2010      	movs	r0, #16
 8002626:	f7ff feb9 	bl	800239c <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800262a:	20c5      	movs	r0, #197	; 0xc5
 800262c:	f7ff fe98 	bl	8002360 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8002630:	203e      	movs	r0, #62	; 0x3e
 8002632:	f7ff feb3 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8002636:	2028      	movs	r0, #40	; 0x28
 8002638:	f7ff feb0 	bl	800239c <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 800263c:	20c7      	movs	r0, #199	; 0xc7
 800263e:	f7ff fe8f 	bl	8002360 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8002642:	2086      	movs	r0, #134	; 0x86
 8002644:	f7ff feaa 	bl	800239c <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8002648:	2036      	movs	r0, #54	; 0x36
 800264a:	f7ff fe89 	bl	8002360 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 800264e:	2048      	movs	r0, #72	; 0x48
 8002650:	f7ff fea4 	bl	800239c <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8002654:	203a      	movs	r0, #58	; 0x3a
 8002656:	f7ff fe83 	bl	8002360 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 800265a:	2055      	movs	r0, #85	; 0x55
 800265c:	f7ff fe9e 	bl	800239c <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8002660:	20b1      	movs	r0, #177	; 0xb1
 8002662:	f7ff fe7d 	bl	8002360 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002666:	2000      	movs	r0, #0
 8002668:	f7ff fe98 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 800266c:	2018      	movs	r0, #24
 800266e:	f7ff fe95 	bl	800239c <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8002672:	20b6      	movs	r0, #182	; 0xb6
 8002674:	f7ff fe74 	bl	8002360 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8002678:	2008      	movs	r0, #8
 800267a:	f7ff fe8f 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800267e:	2082      	movs	r0, #130	; 0x82
 8002680:	f7ff fe8c 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8002684:	2027      	movs	r0, #39	; 0x27
 8002686:	f7ff fe89 	bl	800239c <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 800268a:	20f2      	movs	r0, #242	; 0xf2
 800268c:	f7ff fe68 	bl	8002360 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002690:	2000      	movs	r0, #0
 8002692:	f7ff fe83 	bl	800239c <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8002696:	2026      	movs	r0, #38	; 0x26
 8002698:	f7ff fe62 	bl	8002360 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 800269c:	2001      	movs	r0, #1
 800269e:	f7ff fe7d 	bl	800239c <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80026a2:	20e0      	movs	r0, #224	; 0xe0
 80026a4:	f7ff fe5c 	bl	8002360 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80026a8:	200f      	movs	r0, #15
 80026aa:	f7ff fe77 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80026ae:	2031      	movs	r0, #49	; 0x31
 80026b0:	f7ff fe74 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80026b4:	202b      	movs	r0, #43	; 0x2b
 80026b6:	f7ff fe71 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80026ba:	200c      	movs	r0, #12
 80026bc:	f7ff fe6e 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80026c0:	200e      	movs	r0, #14
 80026c2:	f7ff fe6b 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80026c6:	2008      	movs	r0, #8
 80026c8:	f7ff fe68 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80026cc:	204e      	movs	r0, #78	; 0x4e
 80026ce:	f7ff fe65 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80026d2:	20f1      	movs	r0, #241	; 0xf1
 80026d4:	f7ff fe62 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80026d8:	2037      	movs	r0, #55	; 0x37
 80026da:	f7ff fe5f 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80026de:	2007      	movs	r0, #7
 80026e0:	f7ff fe5c 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80026e4:	2010      	movs	r0, #16
 80026e6:	f7ff fe59 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80026ea:	2003      	movs	r0, #3
 80026ec:	f7ff fe56 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80026f0:	200e      	movs	r0, #14
 80026f2:	f7ff fe53 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80026f6:	2009      	movs	r0, #9
 80026f8:	f7ff fe50 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80026fc:	2000      	movs	r0, #0
 80026fe:	f7ff fe4d 	bl	800239c <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8002702:	20e1      	movs	r0, #225	; 0xe1
 8002704:	f7ff fe2c 	bl	8002360 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002708:	2000      	movs	r0, #0
 800270a:	f7ff fe47 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800270e:	200e      	movs	r0, #14
 8002710:	f7ff fe44 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8002714:	2014      	movs	r0, #20
 8002716:	f7ff fe41 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800271a:	2003      	movs	r0, #3
 800271c:	f7ff fe3e 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8002720:	2011      	movs	r0, #17
 8002722:	f7ff fe3b 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002726:	2007      	movs	r0, #7
 8002728:	f7ff fe38 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800272c:	2031      	movs	r0, #49	; 0x31
 800272e:	f7ff fe35 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002732:	20c1      	movs	r0, #193	; 0xc1
 8002734:	f7ff fe32 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8002738:	2048      	movs	r0, #72	; 0x48
 800273a:	f7ff fe2f 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800273e:	2008      	movs	r0, #8
 8002740:	f7ff fe2c 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002744:	200f      	movs	r0, #15
 8002746:	f7ff fe29 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800274a:	200c      	movs	r0, #12
 800274c:	f7ff fe26 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002750:	2031      	movs	r0, #49	; 0x31
 8002752:	f7ff fe23 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8002756:	2036      	movs	r0, #54	; 0x36
 8002758:	f7ff fe20 	bl	800239c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 800275c:	200f      	movs	r0, #15
 800275e:	f7ff fe1d 	bl	800239c <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8002762:	2011      	movs	r0, #17
 8002764:	f7ff fdfc 	bl	8002360 <ILI9341_Write_Command>
HAL_Delay(120);
 8002768:	2078      	movs	r0, #120	; 0x78
 800276a:	f001 f847 	bl	80037fc <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800276e:	2029      	movs	r0, #41	; 0x29
 8002770:	f7ff fdf6 	bl	8002360 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8002774:	2003      	movs	r0, #3
 8002776:	f7ff fe97 	bl	80024a8 <ILI9341_Set_Rotation>

HAL_Delay(10);
 800277a:	200a      	movs	r0, #10
 800277c:	f001 f83e 	bl	80037fc <HAL_Delay>
//
}
 8002780:	bf00      	nop
 8002782:	bd80      	pop	{r7, pc}

08002784 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002784:	b5b0      	push	{r4, r5, r7, lr}
 8002786:	b08c      	sub	sp, #48	; 0x30
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	6039      	str	r1, [r7, #0]
 800278e:	80fb      	strh	r3, [r7, #6]
 8002790:	466b      	mov	r3, sp
 8002792:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80027a0:	d202      	bcs.n	80027a8 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
 80027a6:	e002      	b.n	80027ae <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80027a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80027ae:	2201      	movs	r2, #1
 80027b0:	2140      	movs	r1, #64	; 0x40
 80027b2:	483d      	ldr	r0, [pc, #244]	; (80028a8 <ILI9341_Draw_Colour_Burst+0x124>)
 80027b4:	f001 fb0c 	bl	8003dd0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80027b8:	2200      	movs	r2, #0
 80027ba:	2110      	movs	r1, #16
 80027bc:	483a      	ldr	r0, [pc, #232]	; (80028a8 <ILI9341_Draw_Colour_Burst+0x124>)
 80027be:	f001 fb07 	bl	8003dd0 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80027c2:	88fb      	ldrh	r3, [r7, #6]
 80027c4:	0a1b      	lsrs	r3, r3, #8
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 80027cc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80027ce:	4623      	mov	r3, r4
 80027d0:	3b01      	subs	r3, #1
 80027d2:	61fb      	str	r3, [r7, #28]
 80027d4:	4620      	mov	r0, r4
 80027d6:	f04f 0100 	mov.w	r1, #0
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	00cb      	lsls	r3, r1, #3
 80027e4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80027e8:	00c2      	lsls	r2, r0, #3
 80027ea:	4620      	mov	r0, r4
 80027ec:	f04f 0100 	mov.w	r1, #0
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	00cb      	lsls	r3, r1, #3
 80027fa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80027fe:	00c2      	lsls	r2, r0, #3
 8002800:	1de3      	adds	r3, r4, #7
 8002802:	08db      	lsrs	r3, r3, #3
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	ebad 0d03 	sub.w	sp, sp, r3
 800280a:	466b      	mov	r3, sp
 800280c:	3300      	adds	r3, #0
 800280e:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002810:	2300      	movs	r3, #0
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28
 8002814:	e00e      	b.n	8002834 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281a:	4413      	add	r3, r2
 800281c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002820:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8002822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002824:	3301      	adds	r3, #1
 8002826:	88fa      	ldrh	r2, [r7, #6]
 8002828:	b2d1      	uxtb	r1, r2
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800282e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002830:	3302      	adds	r3, #2
 8002832:	62bb      	str	r3, [r7, #40]	; 0x28
 8002834:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	429a      	cmp	r2, r3
 800283a:	d3ec      	bcc.n	8002816 <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	fbb2 f3f3 	udiv	r3, r2, r3
 800284a:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002850:	fbb3 f2f2 	udiv	r2, r3, r2
 8002854:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002856:	fb01 f202 	mul.w	r2, r1, r2
 800285a:	1a9b      	subs	r3, r3, r2
 800285c:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d010      	beq.n	8002886 <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002864:	2300      	movs	r3, #0
 8002866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002868:	e009      	b.n	800287e <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 800286a:	69b9      	ldr	r1, [r7, #24]
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	b29a      	uxth	r2, r3
 8002870:	230a      	movs	r3, #10
 8002872:	480e      	ldr	r0, [pc, #56]	; (80028ac <ILI9341_Draw_Colour_Burst+0x128>)
 8002874:	f005 fcdb 	bl	800822e <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287a:	3301      	adds	r3, #1
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800287e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	429a      	cmp	r2, r3
 8002884:	d3f1      	bcc.n	800286a <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002886:	69b9      	ldr	r1, [r7, #24]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	b29a      	uxth	r2, r3
 800288c:	230a      	movs	r3, #10
 800288e:	4807      	ldr	r0, [pc, #28]	; (80028ac <ILI9341_Draw_Colour_Burst+0x128>)
 8002890:	f005 fccd 	bl	800822e <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002894:	2201      	movs	r2, #1
 8002896:	2110      	movs	r1, #16
 8002898:	4803      	ldr	r0, [pc, #12]	; (80028a8 <ILI9341_Draw_Colour_Burst+0x124>)
 800289a:	f001 fa99 	bl	8003dd0 <HAL_GPIO_WritePin>
 800289e:	46ad      	mov	sp, r5
}
 80028a0:	bf00      	nop
 80028a2:	3730      	adds	r7, #48	; 0x30
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bdb0      	pop	{r4, r5, r7, pc}
 80028a8:	40021000 	.word	0x40021000
 80028ac:	200001dc 	.word	0x200001dc

080028b0 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 80028ba:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <ILI9341_Fill_Screen+0x44>)
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	b29a      	uxth	r2, r3
 80028c0:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <ILI9341_Fill_Screen+0x48>)
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2100      	movs	r1, #0
 80028c8:	2000      	movs	r0, #0
 80028ca:	f7ff fd85 	bl	80023d8 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80028ce:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <ILI9341_Fill_Screen+0x44>)
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	461a      	mov	r2, r3
 80028d6:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <ILI9341_Fill_Screen+0x48>)
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	b29b      	uxth	r3, r3
 80028dc:	fb03 f302 	mul.w	r3, r3, r2
 80028e0:	461a      	mov	r2, r3
 80028e2:	88fb      	ldrh	r3, [r7, #6]
 80028e4:	4611      	mov	r1, r2
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff ff4c 	bl	8002784 <ILI9341_Draw_Colour_Burst>
}
 80028ec:	bf00      	nop
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	2000000a 	.word	0x2000000a
 80028f8:	20000008 	.word	0x20000008

080028fc <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	80fb      	strh	r3, [r7, #6]
 8002906:	460b      	mov	r3, r1
 8002908:	80bb      	strh	r3, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800290e:	4b5b      	ldr	r3, [pc, #364]	; (8002a7c <ILI9341_Draw_Pixel+0x180>)
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	b29b      	uxth	r3, r3
 8002914:	88fa      	ldrh	r2, [r7, #6]
 8002916:	429a      	cmp	r2, r3
 8002918:	f080 80ac 	bcs.w	8002a74 <ILI9341_Draw_Pixel+0x178>
 800291c:	4b58      	ldr	r3, [pc, #352]	; (8002a80 <ILI9341_Draw_Pixel+0x184>)
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	b29b      	uxth	r3, r3
 8002922:	88ba      	ldrh	r2, [r7, #4]
 8002924:	429a      	cmp	r2, r3
 8002926:	f080 80a5 	bcs.w	8002a74 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800292a:	2200      	movs	r2, #0
 800292c:	2140      	movs	r1, #64	; 0x40
 800292e:	4855      	ldr	r0, [pc, #340]	; (8002a84 <ILI9341_Draw_Pixel+0x188>)
 8002930:	f001 fa4e 	bl	8003dd0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002934:	2200      	movs	r2, #0
 8002936:	2110      	movs	r1, #16
 8002938:	4852      	ldr	r0, [pc, #328]	; (8002a84 <ILI9341_Draw_Pixel+0x188>)
 800293a:	f001 fa49 	bl	8003dd0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 800293e:	202a      	movs	r0, #42	; 0x2a
 8002940:	f7ff fcfc 	bl	800233c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002944:	2201      	movs	r2, #1
 8002946:	2140      	movs	r1, #64	; 0x40
 8002948:	484e      	ldr	r0, [pc, #312]	; (8002a84 <ILI9341_Draw_Pixel+0x188>)
 800294a:	f001 fa41 	bl	8003dd0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800294e:	2201      	movs	r2, #1
 8002950:	2110      	movs	r1, #16
 8002952:	484c      	ldr	r0, [pc, #304]	; (8002a84 <ILI9341_Draw_Pixel+0x188>)
 8002954:	f001 fa3c 	bl	8003dd0 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002958:	2200      	movs	r2, #0
 800295a:	2110      	movs	r1, #16
 800295c:	4849      	ldr	r0, [pc, #292]	; (8002a84 <ILI9341_Draw_Pixel+0x188>)
 800295e:	f001 fa37 	bl	8003dd0 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002962:	88fb      	ldrh	r3, [r7, #6]
 8002964:	0a1b      	lsrs	r3, r3, #8
 8002966:	b29b      	uxth	r3, r3
 8002968:	b2db      	uxtb	r3, r3
 800296a:	753b      	strb	r3, [r7, #20]
 800296c:	88fb      	ldrh	r3, [r7, #6]
 800296e:	b2db      	uxtb	r3, r3
 8002970:	757b      	strb	r3, [r7, #21]
 8002972:	88fb      	ldrh	r3, [r7, #6]
 8002974:	3301      	adds	r3, #1
 8002976:	121b      	asrs	r3, r3, #8
 8002978:	b2db      	uxtb	r3, r3
 800297a:	75bb      	strb	r3, [r7, #22]
 800297c:	88fb      	ldrh	r3, [r7, #6]
 800297e:	b2db      	uxtb	r3, r3
 8002980:	3301      	adds	r3, #1
 8002982:	b2db      	uxtb	r3, r3
 8002984:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002986:	f107 0114 	add.w	r1, r7, #20
 800298a:	2301      	movs	r3, #1
 800298c:	2204      	movs	r2, #4
 800298e:	483e      	ldr	r0, [pc, #248]	; (8002a88 <ILI9341_Draw_Pixel+0x18c>)
 8002990:	f005 fc4d 	bl	800822e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002994:	2201      	movs	r2, #1
 8002996:	2110      	movs	r1, #16
 8002998:	483a      	ldr	r0, [pc, #232]	; (8002a84 <ILI9341_Draw_Pixel+0x188>)
 800299a:	f001 fa19 	bl	8003dd0 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800299e:	2200      	movs	r2, #0
 80029a0:	2140      	movs	r1, #64	; 0x40
 80029a2:	4838      	ldr	r0, [pc, #224]	; (8002a84 <ILI9341_Draw_Pixel+0x188>)
 80029a4:	f001 fa14 	bl	8003dd0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80029a8:	2200      	movs	r2, #0
 80029aa:	2110      	movs	r1, #16
 80029ac:	4835      	ldr	r0, [pc, #212]	; (8002a84 <ILI9341_Draw_Pixel+0x188>)
 80029ae:	f001 fa0f 	bl	8003dd0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 80029b2:	202b      	movs	r0, #43	; 0x2b
 80029b4:	f7ff fcc2 	bl	800233c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80029b8:	2201      	movs	r2, #1
 80029ba:	2140      	movs	r1, #64	; 0x40
 80029bc:	4831      	ldr	r0, [pc, #196]	; (8002a84 <ILI9341_Draw_Pixel+0x188>)
 80029be:	f001 fa07 	bl	8003dd0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80029c2:	2201      	movs	r2, #1
 80029c4:	2110      	movs	r1, #16
 80029c6:	482f      	ldr	r0, [pc, #188]	; (8002a84 <ILI9341_Draw_Pixel+0x188>)
 80029c8:	f001 fa02 	bl	8003dd0 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80029cc:	2200      	movs	r2, #0
 80029ce:	2110      	movs	r1, #16
 80029d0:	482c      	ldr	r0, [pc, #176]	; (8002a84 <ILI9341_Draw_Pixel+0x188>)
 80029d2:	f001 f9fd 	bl	8003dd0 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80029d6:	88bb      	ldrh	r3, [r7, #4]
 80029d8:	0a1b      	lsrs	r3, r3, #8
 80029da:	b29b      	uxth	r3, r3
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	743b      	strb	r3, [r7, #16]
 80029e0:	88bb      	ldrh	r3, [r7, #4]
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	747b      	strb	r3, [r7, #17]
 80029e6:	88bb      	ldrh	r3, [r7, #4]
 80029e8:	3301      	adds	r3, #1
 80029ea:	121b      	asrs	r3, r3, #8
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	74bb      	strb	r3, [r7, #18]
 80029f0:	88bb      	ldrh	r3, [r7, #4]
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	3301      	adds	r3, #1
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80029fa:	f107 0110 	add.w	r1, r7, #16
 80029fe:	2301      	movs	r3, #1
 8002a00:	2204      	movs	r2, #4
 8002a02:	4821      	ldr	r0, [pc, #132]	; (8002a88 <ILI9341_Draw_Pixel+0x18c>)
 8002a04:	f005 fc13 	bl	800822e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002a08:	2201      	movs	r2, #1
 8002a0a:	2110      	movs	r1, #16
 8002a0c:	481d      	ldr	r0, [pc, #116]	; (8002a84 <ILI9341_Draw_Pixel+0x188>)
 8002a0e:	f001 f9df 	bl	8003dd0 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002a12:	2200      	movs	r2, #0
 8002a14:	2140      	movs	r1, #64	; 0x40
 8002a16:	481b      	ldr	r0, [pc, #108]	; (8002a84 <ILI9341_Draw_Pixel+0x188>)
 8002a18:	f001 f9da 	bl	8003dd0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2110      	movs	r1, #16
 8002a20:	4818      	ldr	r0, [pc, #96]	; (8002a84 <ILI9341_Draw_Pixel+0x188>)
 8002a22:	f001 f9d5 	bl	8003dd0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8002a26:	202c      	movs	r0, #44	; 0x2c
 8002a28:	f7ff fc88 	bl	800233c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	2140      	movs	r1, #64	; 0x40
 8002a30:	4814      	ldr	r0, [pc, #80]	; (8002a84 <ILI9341_Draw_Pixel+0x188>)
 8002a32:	f001 f9cd 	bl	8003dd0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002a36:	2201      	movs	r2, #1
 8002a38:	2110      	movs	r1, #16
 8002a3a:	4812      	ldr	r0, [pc, #72]	; (8002a84 <ILI9341_Draw_Pixel+0x188>)
 8002a3c:	f001 f9c8 	bl	8003dd0 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002a40:	2200      	movs	r2, #0
 8002a42:	2110      	movs	r1, #16
 8002a44:	480f      	ldr	r0, [pc, #60]	; (8002a84 <ILI9341_Draw_Pixel+0x188>)
 8002a46:	f001 f9c3 	bl	8003dd0 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002a4a:	887b      	ldrh	r3, [r7, #2]
 8002a4c:	0a1b      	lsrs	r3, r3, #8
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	733b      	strb	r3, [r7, #12]
 8002a54:	887b      	ldrh	r3, [r7, #2]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002a5a:	f107 010c 	add.w	r1, r7, #12
 8002a5e:	2301      	movs	r3, #1
 8002a60:	2202      	movs	r2, #2
 8002a62:	4809      	ldr	r0, [pc, #36]	; (8002a88 <ILI9341_Draw_Pixel+0x18c>)
 8002a64:	f005 fbe3 	bl	800822e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002a68:	2201      	movs	r2, #1
 8002a6a:	2110      	movs	r1, #16
 8002a6c:	4805      	ldr	r0, [pc, #20]	; (8002a84 <ILI9341_Draw_Pixel+0x188>)
 8002a6e:	f001 f9af 	bl	8003dd0 <HAL_GPIO_WritePin>
 8002a72:	e000      	b.n	8002a76 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002a74:	bf00      	nop
	
}
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	2000000a 	.word	0x2000000a
 8002a80:	20000008 	.word	0x20000008
 8002a84:	40021000 	.word	0x40021000
 8002a88:	200001dc 	.word	0x200001dc

08002a8c <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
	int i =0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 8002a98:	e036      	b.n	8002b08 <speed_test_LCD+0x7c>
	{
		i ++;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8002ab4:	4819      	ldr	r0, [pc, #100]	; (8002b1c <speed_test_LCD+0x90>)
 8002ab6:	f005 fb1c 	bl	80080f2 <HAL_RNG_GetRandomNumber>
 8002aba:	6138      	str	r0, [r7, #16]
		xr = random_num;
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8002ac0:	4816      	ldr	r0, [pc, #88]	; (8002b1c <speed_test_LCD+0x90>)
 8002ac2:	f005 fb16 	bl	80080f2 <HAL_RNG_GetRandomNumber>
 8002ac6:	6138      	str	r0, [r7, #16]
		yr = random_num;
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8002acc:	4813      	ldr	r0, [pc, #76]	; (8002b1c <speed_test_LCD+0x90>)
 8002ace:	f005 fb10 	bl	80080f2 <HAL_RNG_GetRandomNumber>
 8002ad2:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8002ad8:	4810      	ldr	r0, [pc, #64]	; (8002b1c <speed_test_LCD+0x90>)
 8002ada:	f005 fb0a 	bl	80080f2 <HAL_RNG_GetRandomNumber>
 8002ade:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 8002ae4:	89fb      	ldrh	r3, [r7, #14]
 8002ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aea:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 8002aec:	89bb      	ldrh	r3, [r7, #12]
 8002aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002af2:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 8002af4:	897b      	ldrh	r3, [r7, #10]
 8002af6:	f003 031f 	and.w	r3, r3, #31
 8002afa:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 8002afc:	893b      	ldrh	r3, [r7, #8]
 8002afe:	897a      	ldrh	r2, [r7, #10]
 8002b00:	89b9      	ldrh	r1, [r7, #12]
 8002b02:	89f8      	ldrh	r0, [r7, #14]
 8002b04:	f7ff fb86 	bl	8002214 <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	ddc4      	ble.n	8002a9a <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 8002b10:	bf00      	nop
 8002b12:	bf00      	nop
 8002b14:	3718      	adds	r7, #24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000380 	.word	0x20000380

08002b20 <draw_pixel>:

uint8_t gddram[4][128];


void draw_pixel(uint8_t x, uint8_t y, uint8_t color)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	71fb      	strb	r3, [r7, #7]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	71bb      	strb	r3, [r7, #6]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	717b      	strb	r3, [r7, #5]
	if(x<128 && y<32)
 8002b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	db3b      	blt.n	8002bb2 <draw_pixel+0x92>
 8002b3a:	79bb      	ldrb	r3, [r7, #6]
 8002b3c:	2b1f      	cmp	r3, #31
 8002b3e:	d838      	bhi.n	8002bb2 <draw_pixel+0x92>
	{
		uint8_t pixel = 0x01;
 8002b40:	2301      	movs	r3, #1
 8002b42:	73fb      	strb	r3, [r7, #15]
		uint8_t line = y>>3;
 8002b44:	79bb      	ldrb	r3, [r7, #6]
 8002b46:	08db      	lsrs	r3, r3, #3
 8002b48:	73bb      	strb	r3, [r7, #14]
		uint8_t byte = pixel<<(y%8);
 8002b4a:	7bfa      	ldrb	r2, [r7, #15]
 8002b4c:	79bb      	ldrb	r3, [r7, #6]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	737b      	strb	r3, [r7, #13]
		if(color)
 8002b58:	797b      	ldrb	r3, [r7, #5]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d012      	beq.n	8002b84 <draw_pixel+0x64>
			gddram[line][x] |= byte;
 8002b5e:	7bba      	ldrb	r2, [r7, #14]
 8002b60:	79fb      	ldrb	r3, [r7, #7]
 8002b62:	4917      	ldr	r1, [pc, #92]	; (8002bc0 <draw_pixel+0xa0>)
 8002b64:	01d2      	lsls	r2, r2, #7
 8002b66:	440a      	add	r2, r1
 8002b68:	4413      	add	r3, r2
 8002b6a:	7818      	ldrb	r0, [r3, #0]
 8002b6c:	7bba      	ldrb	r2, [r7, #14]
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	7b79      	ldrb	r1, [r7, #13]
 8002b72:	4301      	orrs	r1, r0
 8002b74:	b2c8      	uxtb	r0, r1
 8002b76:	4912      	ldr	r1, [pc, #72]	; (8002bc0 <draw_pixel+0xa0>)
 8002b78:	01d2      	lsls	r2, r2, #7
 8002b7a:	440a      	add	r2, r1
 8002b7c:	4413      	add	r3, r2
 8002b7e:	4602      	mov	r2, r0
 8002b80:	701a      	strb	r2, [r3, #0]
		else
			gddram[line][x] &= ~byte;
	}
}
 8002b82:	e016      	b.n	8002bb2 <draw_pixel+0x92>
			gddram[line][x] &= ~byte;
 8002b84:	7bba      	ldrb	r2, [r7, #14]
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	490d      	ldr	r1, [pc, #52]	; (8002bc0 <draw_pixel+0xa0>)
 8002b8a:	01d2      	lsls	r2, r2, #7
 8002b8c:	440a      	add	r2, r1
 8002b8e:	4413      	add	r3, r2
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	b25a      	sxtb	r2, r3
 8002b94:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	b25b      	sxtb	r3, r3
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	b259      	sxtb	r1, r3
 8002ba0:	7bba      	ldrb	r2, [r7, #14]
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	b2c8      	uxtb	r0, r1
 8002ba6:	4906      	ldr	r1, [pc, #24]	; (8002bc0 <draw_pixel+0xa0>)
 8002ba8:	01d2      	lsls	r2, r2, #7
 8002baa:	440a      	add	r2, r1
 8002bac:	4413      	add	r3, r2
 8002bae:	4602      	mov	r2, r0
 8002bb0:	701a      	strb	r2, [r3, #0]
}
 8002bb2:	bf00      	nop
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000480 	.word	0x20000480

08002bc4 <graphics_Glyph>:


void graphics_Glyph(unsigned char left, unsigned char top,
			   unsigned char width, unsigned char height,
			   const unsigned char *glyph, unsigned char store_width)
{
 8002bc4:	b590      	push	{r4, r7, lr}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4604      	mov	r4, r0
 8002bcc:	4608      	mov	r0, r1
 8002bce:	4611      	mov	r1, r2
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4623      	mov	r3, r4
 8002bd4:	71fb      	strb	r3, [r7, #7]
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	71bb      	strb	r3, [r7, #6]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	717b      	strb	r3, [r7, #5]
 8002bde:	4613      	mov	r3, r2
 8002be0:	713b      	strb	r3, [r7, #4]
	unsigned char x,b,glyph_idx, bitmask;
	int8_t y;
	const unsigned char *glyph_scan = glyph;
 8002be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be4:	613b      	str	r3, [r7, #16]

	for (x=0; x<width; x++)
 8002be6:	2300      	movs	r3, #0
 8002be8:	75fb      	strb	r3, [r7, #23]
 8002bea:	e04d      	b.n	8002c88 <graphics_Glyph+0xc4>
	{
		for (y=0; y<height; y++)
 8002bec:	2300      	movs	r3, #0
 8002bee:	75bb      	strb	r3, [r7, #22]
 8002bf0:	e042      	b.n	8002c78 <graphics_Glyph+0xb4>
		{
			glyph_idx = (x / 8) + y*store_width;
 8002bf2:	7dfb      	ldrb	r3, [r7, #23]
 8002bf4:	08db      	lsrs	r3, r3, #3
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	7dbb      	ldrb	r3, [r7, #22]
 8002bfa:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8002bfe:	fb11 f303 	smulbb	r3, r1, r3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	73fb      	strb	r3, [r7, #15]
			b = glyph_scan[glyph_idx];
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	73bb      	strb	r3, [r7, #14]
			bitmask = 1<<(7-(x % 8));
 8002c12:	7dfb      	ldrb	r3, [r7, #23]
 8002c14:	43db      	mvns	r3, r3
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	737b      	strb	r3, [r7, #13]
			if (b & bitmask)
 8002c22:	7bba      	ldrb	r2, [r7, #14]
 8002c24:	7b7b      	ldrb	r3, [r7, #13]
 8002c26:	4013      	ands	r3, r2
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00f      	beq.n	8002c4e <graphics_Glyph+0x8a>
				draw_pixel(left-width+x,top+y,1);
 8002c2e:	79fa      	ldrb	r2, [r7, #7]
 8002c30:	797b      	ldrb	r3, [r7, #5]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	7dfb      	ldrb	r3, [r7, #23]
 8002c38:	4413      	add	r3, r2
 8002c3a:	b2d8      	uxtb	r0, r3
 8002c3c:	7dba      	ldrb	r2, [r7, #22]
 8002c3e:	79bb      	ldrb	r3, [r7, #6]
 8002c40:	4413      	add	r3, r2
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2201      	movs	r2, #1
 8002c46:	4619      	mov	r1, r3
 8002c48:	f7ff ff6a 	bl	8002b20 <draw_pixel>
 8002c4c:	e00e      	b.n	8002c6c <graphics_Glyph+0xa8>
			else
				draw_pixel(left-width+x,top+y,0);
 8002c4e:	79fa      	ldrb	r2, [r7, #7]
 8002c50:	797b      	ldrb	r3, [r7, #5]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	7dfb      	ldrb	r3, [r7, #23]
 8002c58:	4413      	add	r3, r2
 8002c5a:	b2d8      	uxtb	r0, r3
 8002c5c:	7dba      	ldrb	r2, [r7, #22]
 8002c5e:	79bb      	ldrb	r3, [r7, #6]
 8002c60:	4413      	add	r3, r2
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2200      	movs	r2, #0
 8002c66:	4619      	mov	r1, r3
 8002c68:	f7ff ff5a 	bl	8002b20 <draw_pixel>
		for (y=0; y<height; y++)
 8002c6c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	3301      	adds	r3, #1
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	75bb      	strb	r3, [r7, #22]
 8002c78:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8002c7c:	793b      	ldrb	r3, [r7, #4]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	dbb7      	blt.n	8002bf2 <graphics_Glyph+0x2e>
	for (x=0; x<width; x++)
 8002c82:	7dfb      	ldrb	r3, [r7, #23]
 8002c84:	3301      	adds	r3, #1
 8002c86:	75fb      	strb	r3, [r7, #23]
 8002c88:	7dfa      	ldrb	r2, [r7, #23]
 8002c8a:	797b      	ldrb	r3, [r7, #5]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d3ad      	bcc.n	8002bec <graphics_Glyph+0x28>
		}
	}
}
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	371c      	adds	r7, #28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd90      	pop	{r4, r7, pc}
	...

08002c9c <graphics_text>:

void graphics_text(unsigned char left, unsigned char top, unsigned char font, char *str)
{
 8002c9c:	b590      	push	{r4, r7, lr}
 8002c9e:	b089      	sub	sp, #36	; 0x24
 8002ca0:	af02      	add	r7, sp, #8
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	71fb      	strb	r3, [r7, #7]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	71bb      	strb	r3, [r7, #6]
 8002cac:	4613      	mov	r3, r2
 8002cae:	717b      	strb	r3, [r7, #5]
	unsigned char x = left;
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	75fb      	strb	r3, [r7, #23]
 	unsigned char width;
	unsigned char height;
	unsigned char store_width;
	const unsigned char *glyph_ptr;

  while(*str != 0x00)
 8002cb4:	e081      	b.n	8002dba <graphics_text+0x11e>
  {

		glyph = (unsigned char)*str;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	75bb      	strb	r3, [r7, #22]

		/* check to make sure the symbol is a legal one */
		/* if not then just replace it with the default character */
		if((glyph < fonts[font].glyph_beg) || (glyph > fonts[font].glyph_end))
 8002cbc:	797a      	ldrb	r2, [r7, #5]
 8002cbe:	4944      	ldr	r1, [pc, #272]	; (8002dd0 <graphics_text+0x134>)
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	3310      	adds	r3, #16
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	7dba      	ldrb	r2, [r7, #22]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d30b      	bcc.n	8002cec <graphics_text+0x50>
 8002cd4:	797a      	ldrb	r2, [r7, #5]
 8002cd6:	493e      	ldr	r1, [pc, #248]	; (8002dd0 <graphics_text+0x134>)
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	3311      	adds	r3, #17
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	7dba      	ldrb	r2, [r7, #22]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d909      	bls.n	8002d00 <graphics_text+0x64>
		{
			glyph = fonts[font].glyph_def;
 8002cec:	797a      	ldrb	r2, [r7, #5]
 8002cee:	4938      	ldr	r1, [pc, #224]	; (8002dd0 <graphics_text+0x134>)
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	3312      	adds	r3, #18
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	75bb      	strb	r3, [r7, #22]
		}


		/* make zero based index into the font data arrays */
		glyph -= fonts[font].glyph_beg;
 8002d00:	797a      	ldrb	r2, [r7, #5]
 8002d02:	4933      	ldr	r1, [pc, #204]	; (8002dd0 <graphics_text+0x134>)
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	3310      	adds	r3, #16
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	7dba      	ldrb	r2, [r7, #22]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	75bb      	strb	r3, [r7, #22]
		width = fonts[font].fixed_width;	/* check if it is a fixed width */
 8002d18:	797a      	ldrb	r2, [r7, #5]
 8002d1a:	492d      	ldr	r1, [pc, #180]	; (8002dd0 <graphics_text+0x134>)
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	3308      	adds	r3, #8
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	757b      	strb	r3, [r7, #21]
		if(width == 0)
 8002d2c:	7d7b      	ldrb	r3, [r7, #21]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10c      	bne.n	8002d4c <graphics_text+0xb0>
		{
			width=fonts[font].width_table[glyph];	/* get the variable width instead */
 8002d32:	797a      	ldrb	r2, [r7, #5]
 8002d34:	4926      	ldr	r1, [pc, #152]	; (8002dd0 <graphics_text+0x134>)
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	330c      	adds	r3, #12
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	7dbb      	ldrb	r3, [r7, #22]
 8002d46:	4413      	add	r3, r2
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	757b      	strb	r3, [r7, #21]
		}

		height = fonts[font].glyph_height;
 8002d4c:	797a      	ldrb	r2, [r7, #5]
 8002d4e:	4920      	ldr	r1, [pc, #128]	; (8002dd0 <graphics_text+0x134>)
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	753b      	strb	r3, [r7, #20]
		store_width = fonts[font].store_width;
 8002d60:	797a      	ldrb	r2, [r7, #5]
 8002d62:	491b      	ldr	r1, [pc, #108]	; (8002dd0 <graphics_text+0x134>)
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	74fb      	strb	r3, [r7, #19]

		glyph_ptr = fonts[font].glyph_table + ((unsigned int)glyph * (unsigned int)store_width * (unsigned int)height);
 8002d72:	797a      	ldrb	r2, [r7, #5]
 8002d74:	4916      	ldr	r1, [pc, #88]	; (8002dd0 <graphics_text+0x134>)
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	440b      	add	r3, r1
 8002d80:	3304      	adds	r3, #4
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	7dbb      	ldrb	r3, [r7, #22]
 8002d86:	7cf9      	ldrb	r1, [r7, #19]
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	7d39      	ldrb	r1, [r7, #20]
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]


		x+=width;
 8002d96:	7dfa      	ldrb	r2, [r7, #23]
 8002d98:	7d7b      	ldrb	r3, [r7, #21]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	75fb      	strb	r3, [r7, #23]
		graphics_Glyph(x,top,width,height,glyph_ptr,store_width);  /* plug symbol into buffer */
 8002d9e:	7d3c      	ldrb	r4, [r7, #20]
 8002da0:	7d7a      	ldrb	r2, [r7, #21]
 8002da2:	79b9      	ldrb	r1, [r7, #6]
 8002da4:	7df8      	ldrb	r0, [r7, #23]
 8002da6:	7cfb      	ldrb	r3, [r7, #19]
 8002da8:	9301      	str	r3, [sp, #4]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	4623      	mov	r3, r4
 8002db0:	f7ff ff08 	bl	8002bc4 <graphics_Glyph>
		str++;								/* point to next character in string */
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	3301      	adds	r3, #1
 8002db8:	603b      	str	r3, [r7, #0]
  while(*str != 0x00)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f47f af79 	bne.w	8002cb6 <graphics_text+0x1a>
	}

}
 8002dc4:	bf00      	nop
 8002dc6:	bf00      	nop
 8002dc8:	371c      	adds	r7, #28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd90      	pop	{r4, r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	0800d474 	.word	0x0800d474

08002dd4 <ssd1306_command>:
extern I2C_HandleTypeDef hi2c3;

extern uint8_t gddram[4][128];

void ssd1306_command(uint8_t byte)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	4603      	mov	r3, r0
 8002ddc:	71fb      	strb	r3, [r7, #7]
   uint8_t buffer[2];
	buffer[0] = 0x00;
 8002dde:	2300      	movs	r3, #0
 8002de0:	733b      	strb	r3, [r7, #12]
	buffer[1] = byte;
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,2,50);
 8002de6:	f107 020c 	add.w	r2, r7, #12
 8002dea:	2332      	movs	r3, #50	; 0x32
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	2302      	movs	r3, #2
 8002df0:	2178      	movs	r1, #120	; 0x78
 8002df2:	4803      	ldr	r0, [pc, #12]	; (8002e00 <ssd1306_command+0x2c>)
 8002df4:	f002 fec8 	bl	8005b88 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&hi2c1,0x78,&buffer[1],1,50);

}
 8002df8:	bf00      	nop
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	20000188 	.word	0x20000188

08002e04 <oled_update>:

void oled_update(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af02      	add	r7, sp, #8
  ssd1306_command(SSD1306_COLUMNADDR);
 8002e0a:	2021      	movs	r0, #33	; 0x21
 8002e0c:	f7ff ffe2 	bl	8002dd4 <ssd1306_command>
  ssd1306_command(0);   // Column start address (0 = reset)
 8002e10:	2000      	movs	r0, #0
 8002e12:	f7ff ffdf 	bl	8002dd4 <ssd1306_command>
  ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
 8002e16:	207f      	movs	r0, #127	; 0x7f
 8002e18:	f7ff ffdc 	bl	8002dd4 <ssd1306_command>

  ssd1306_command(SSD1306_PAGEADDR);
 8002e1c:	2022      	movs	r0, #34	; 0x22
 8002e1e:	f7ff ffd9 	bl	8002dd4 <ssd1306_command>
  ssd1306_command(0); // Page start address (0 = reset)
 8002e22:	2000      	movs	r0, #0
 8002e24:	f7ff ffd6 	bl	8002dd4 <ssd1306_command>
  ssd1306_command(3); // Page end address
 8002e28:	2003      	movs	r0, #3
 8002e2a:	f7ff ffd3 	bl	8002dd4 <ssd1306_command>



	//SEND data in 16byte packs
	uint8_t buffer[17];
	buffer[0] = 0x40;
 8002e2e:	2340      	movs	r3, #64	; 0x40
 8002e30:	703b      	strb	r3, [r7, #0]
	for(uint16_t line=0; line<4; line++)
 8002e32:	2300      	movs	r3, #0
 8002e34:	82fb      	strh	r3, [r7, #22]
 8002e36:	e02d      	b.n	8002e94 <oled_update+0x90>
	{
		for(uint8_t x=0;x<127;x+=16)
 8002e38:	2300      	movs	r3, #0
 8002e3a:	757b      	strb	r3, [r7, #21]
 8002e3c:	e024      	b.n	8002e88 <oled_update+0x84>
		{
			for(uint8_t i=1;i<17;i++)
 8002e3e:	2301      	movs	r3, #1
 8002e40:	753b      	strb	r3, [r7, #20]
 8002e42:	e012      	b.n	8002e6a <oled_update+0x66>
			{
				buffer[i] = gddram[line][x+i-1];
 8002e44:	8af9      	ldrh	r1, [r7, #22]
 8002e46:	7d7a      	ldrb	r2, [r7, #21]
 8002e48:	7d3b      	ldrb	r3, [r7, #20]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	1e5a      	subs	r2, r3, #1
 8002e4e:	7d3b      	ldrb	r3, [r7, #20]
 8002e50:	4814      	ldr	r0, [pc, #80]	; (8002ea4 <oled_update+0xa0>)
 8002e52:	01c9      	lsls	r1, r1, #7
 8002e54:	4401      	add	r1, r0
 8002e56:	440a      	add	r2, r1
 8002e58:	7812      	ldrb	r2, [r2, #0]
 8002e5a:	f107 0118 	add.w	r1, r7, #24
 8002e5e:	440b      	add	r3, r1
 8002e60:	f803 2c18 	strb.w	r2, [r3, #-24]
			for(uint8_t i=1;i<17;i++)
 8002e64:	7d3b      	ldrb	r3, [r7, #20]
 8002e66:	3301      	adds	r3, #1
 8002e68:	753b      	strb	r3, [r7, #20]
 8002e6a:	7d3b      	ldrb	r3, [r7, #20]
 8002e6c:	2b10      	cmp	r3, #16
 8002e6e:	d9e9      	bls.n	8002e44 <oled_update+0x40>
			}
			HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,17,1000);
 8002e70:	463a      	mov	r2, r7
 8002e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	2311      	movs	r3, #17
 8002e7a:	2178      	movs	r1, #120	; 0x78
 8002e7c:	480a      	ldr	r0, [pc, #40]	; (8002ea8 <oled_update+0xa4>)
 8002e7e:	f002 fe83 	bl	8005b88 <HAL_I2C_Master_Transmit>
		for(uint8_t x=0;x<127;x+=16)
 8002e82:	7d7b      	ldrb	r3, [r7, #21]
 8002e84:	3310      	adds	r3, #16
 8002e86:	757b      	strb	r3, [r7, #21]
 8002e88:	7d7b      	ldrb	r3, [r7, #21]
 8002e8a:	2b7e      	cmp	r3, #126	; 0x7e
 8002e8c:	d9d7      	bls.n	8002e3e <oled_update+0x3a>
	for(uint16_t line=0; line<4; line++)
 8002e8e:	8afb      	ldrh	r3, [r7, #22]
 8002e90:	3301      	adds	r3, #1
 8002e92:	82fb      	strh	r3, [r7, #22]
 8002e94:	8afb      	ldrh	r3, [r7, #22]
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d9ce      	bls.n	8002e38 <oled_update+0x34>
		}
	}

}
 8002e9a:	bf00      	nop
 8002e9c:	bf00      	nop
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	20000480 	.word	0x20000480
 8002ea8:	20000188 	.word	0x20000188

08002eac <oled_init>:

void oled_init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
	// Init sequence
  ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 8002eb2:	20ae      	movs	r0, #174	; 0xae
 8002eb4:	f7ff ff8e 	bl	8002dd4 <ssd1306_command>
  ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 8002eb8:	20d5      	movs	r0, #213	; 0xd5
 8002eba:	f7ff ff8b 	bl	8002dd4 <ssd1306_command>
  ssd1306_command(0x80);                                  // the suggested ratio 0x80
 8002ebe:	2080      	movs	r0, #128	; 0x80
 8002ec0:	f7ff ff88 	bl	8002dd4 <ssd1306_command>

  ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 8002ec4:	20a8      	movs	r0, #168	; 0xa8
 8002ec6:	f7ff ff85 	bl	8002dd4 <ssd1306_command>
  ssd1306_command(SSD1306_LCDHEIGHT - 1);
 8002eca:	201f      	movs	r0, #31
 8002ecc:	f7ff ff82 	bl	8002dd4 <ssd1306_command>

  ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 8002ed0:	20d3      	movs	r0, #211	; 0xd3
 8002ed2:	f7ff ff7f 	bl	8002dd4 <ssd1306_command>
  ssd1306_command(0x0);                                   // no offset
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	f7ff ff7c 	bl	8002dd4 <ssd1306_command>
  ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 8002edc:	2040      	movs	r0, #64	; 0x40
 8002ede:	f7ff ff79 	bl	8002dd4 <ssd1306_command>
  ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 8002ee2:	208d      	movs	r0, #141	; 0x8d
 8002ee4:	f7ff ff76 	bl	8002dd4 <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x10); }
  else
    { ssd1306_command(0x14); }
 8002ee8:	2014      	movs	r0, #20
 8002eea:	f7ff ff73 	bl	8002dd4 <ssd1306_command>
  ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 8002eee:	2020      	movs	r0, #32
 8002ef0:	f7ff ff70 	bl	8002dd4 <ssd1306_command>
  ssd1306_command(0x00);                                  // 0x0 act like ks0108
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	f7ff ff6d 	bl	8002dd4 <ssd1306_command>
  ssd1306_command(SSD1306_SEGREMAP | 0x1);
 8002efa:	20a1      	movs	r0, #161	; 0xa1
 8002efc:	f7ff ff6a 	bl	8002dd4 <ssd1306_command>
  ssd1306_command(SSD1306_COMSCANDEC);
 8002f00:	20c8      	movs	r0, #200	; 0xc8
 8002f02:	f7ff ff67 	bl	8002dd4 <ssd1306_command>

 #if defined SSD1306_128_32
  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 8002f06:	20da      	movs	r0, #218	; 0xda
 8002f08:	f7ff ff64 	bl	8002dd4 <ssd1306_command>
  ssd1306_command(0x02);
 8002f0c:	2002      	movs	r0, #2
 8002f0e:	f7ff ff61 	bl	8002dd4 <ssd1306_command>
  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 8002f12:	2081      	movs	r0, #129	; 0x81
 8002f14:	f7ff ff5e 	bl	8002dd4 <ssd1306_command>
  ssd1306_command(0x8F);
 8002f18:	208f      	movs	r0, #143	; 0x8f
 8002f1a:	f7ff ff5b 	bl	8002dd4 <ssd1306_command>
  else
    { ssd1306_command(0xAF); }

#endif

  ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 8002f1e:	20d9      	movs	r0, #217	; 0xd9
 8002f20:	f7ff ff58 	bl	8002dd4 <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x22); }
  else
    { ssd1306_command(0xF1); }
 8002f24:	20f1      	movs	r0, #241	; 0xf1
 8002f26:	f7ff ff55 	bl	8002dd4 <ssd1306_command>
  ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 8002f2a:	20db      	movs	r0, #219	; 0xdb
 8002f2c:	f7ff ff52 	bl	8002dd4 <ssd1306_command>
  ssd1306_command(0x40);
 8002f30:	2040      	movs	r0, #64	; 0x40
 8002f32:	f7ff ff4f 	bl	8002dd4 <ssd1306_command>
  ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 8002f36:	20a4      	movs	r0, #164	; 0xa4
 8002f38:	f7ff ff4c 	bl	8002dd4 <ssd1306_command>
  ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 8002f3c:	20a6      	movs	r0, #166	; 0xa6
 8002f3e:	f7ff ff49 	bl	8002dd4 <ssd1306_command>

  ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
 8002f42:	202e      	movs	r0, #46	; 0x2e
 8002f44:	f7ff ff46 	bl	8002dd4 <ssd1306_command>

  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 8002f48:	20af      	movs	r0, #175	; 0xaf
 8002f4a:	f7ff ff43 	bl	8002dd4 <ssd1306_command>

	//init buffer
	 for(int i = 0; i<4; i++)
 8002f4e:	2300      	movs	r3, #0
 8002f50:	607b      	str	r3, [r7, #4]
 8002f52:	e013      	b.n	8002f7c <oled_init+0xd0>
		for(int j = 0; j<128; j++)
 8002f54:	2300      	movs	r3, #0
 8002f56:	603b      	str	r3, [r7, #0]
 8002f58:	e00a      	b.n	8002f70 <oled_init+0xc4>
			gddram[i][j] = 0x00;
 8002f5a:	4a0c      	ldr	r2, [pc, #48]	; (8002f8c <oled_init+0xe0>)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	01db      	lsls	r3, r3, #7
 8002f60:	441a      	add	r2, r3
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	4413      	add	r3, r2
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j<128; j++)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	2b7f      	cmp	r3, #127	; 0x7f
 8002f74:	ddf1      	ble.n	8002f5a <oled_init+0xae>
	 for(int i = 0; i<4; i++)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	607b      	str	r3, [r7, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	dde8      	ble.n	8002f54 <oled_init+0xa8>
}
 8002f82:	bf00      	nop
 8002f84:	bf00      	nop
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	20000480 	.word	0x20000480

08002f90 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af04      	add	r7, sp, #16
 8002f96:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002f98:	2364      	movs	r3, #100	; 0x64
 8002f9a:	9302      	str	r3, [sp, #8]
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	9301      	str	r3, [sp, #4]
 8002fa0:	f107 030f 	add.w	r3, r7, #15
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	2275      	movs	r2, #117	; 0x75
 8002faa:	21d0      	movs	r1, #208	; 0xd0
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f002 ffe3 	bl	8005f78 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	2b68      	cmp	r3, #104	; 0x68
 8002fb6:	d13d      	bne.n	8003034 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002fbc:	2364      	movs	r3, #100	; 0x64
 8002fbe:	9302      	str	r3, [sp, #8]
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	9301      	str	r3, [sp, #4]
 8002fc4:	f107 030e 	add.w	r3, r7, #14
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	2301      	movs	r3, #1
 8002fcc:	226b      	movs	r2, #107	; 0x6b
 8002fce:	21d0      	movs	r1, #208	; 0xd0
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f002 fed7 	bl	8005d84 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002fd6:	2307      	movs	r3, #7
 8002fd8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002fda:	2364      	movs	r3, #100	; 0x64
 8002fdc:	9302      	str	r3, [sp, #8]
 8002fde:	2301      	movs	r3, #1
 8002fe0:	9301      	str	r3, [sp, #4]
 8002fe2:	f107 030e 	add.w	r3, r7, #14
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	2301      	movs	r3, #1
 8002fea:	2219      	movs	r2, #25
 8002fec:	21d0      	movs	r1, #208	; 0xd0
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f002 fec8 	bl	8005d84 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002ff8:	2364      	movs	r3, #100	; 0x64
 8002ffa:	9302      	str	r3, [sp, #8]
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	9301      	str	r3, [sp, #4]
 8003000:	f107 030e 	add.w	r3, r7, #14
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	2301      	movs	r3, #1
 8003008:	221c      	movs	r2, #28
 800300a:	21d0      	movs	r1, #208	; 0xd0
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f002 feb9 	bl	8005d84 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8003012:	2300      	movs	r3, #0
 8003014:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8003016:	2364      	movs	r3, #100	; 0x64
 8003018:	9302      	str	r3, [sp, #8]
 800301a:	2301      	movs	r3, #1
 800301c:	9301      	str	r3, [sp, #4]
 800301e:	f107 030e 	add.w	r3, r7, #14
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	2301      	movs	r3, #1
 8003026:	221b      	movs	r2, #27
 8003028:	21d0      	movs	r1, #208	; 0xd0
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f002 feaa 	bl	8005d84 <HAL_I2C_Mem_Write>
        return 0;
 8003030:	2300      	movs	r3, #0
 8003032:	e000      	b.n	8003036 <MPU6050_Init+0xa6>
    }
    return 1;
 8003034:	2301      	movs	r3, #1
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8003040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003044:	b094      	sub	sp, #80	; 0x50
 8003046:	af04      	add	r7, sp, #16
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800304c:	2364      	movs	r3, #100	; 0x64
 800304e:	9302      	str	r3, [sp, #8]
 8003050:	230e      	movs	r3, #14
 8003052:	9301      	str	r3, [sp, #4]
 8003054:	f107 0308 	add.w	r3, r7, #8
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	2301      	movs	r3, #1
 800305c:	223b      	movs	r2, #59	; 0x3b
 800305e:	21d0      	movs	r1, #208	; 0xd0
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f002 ff89 	bl	8005f78 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8003066:	7a3b      	ldrb	r3, [r7, #8]
 8003068:	021b      	lsls	r3, r3, #8
 800306a:	b21a      	sxth	r2, r3
 800306c:	7a7b      	ldrb	r3, [r7, #9]
 800306e:	b21b      	sxth	r3, r3
 8003070:	4313      	orrs	r3, r2
 8003072:	b21a      	sxth	r2, r3
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8003078:	7abb      	ldrb	r3, [r7, #10]
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	b21a      	sxth	r2, r3
 800307e:	7afb      	ldrb	r3, [r7, #11]
 8003080:	b21b      	sxth	r3, r3
 8003082:	4313      	orrs	r3, r2
 8003084:	b21a      	sxth	r2, r3
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800308a:	7b3b      	ldrb	r3, [r7, #12]
 800308c:	021b      	lsls	r3, r3, #8
 800308e:	b21a      	sxth	r2, r3
 8003090:	7b7b      	ldrb	r3, [r7, #13]
 8003092:	b21b      	sxth	r3, r3
 8003094:	4313      	orrs	r3, r2
 8003096:	b21a      	sxth	r2, r3
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 800309c:	7bbb      	ldrb	r3, [r7, #14]
 800309e:	021b      	lsls	r3, r3, #8
 80030a0:	b21a      	sxth	r2, r3
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	b21b      	sxth	r3, r3
 80030a6:	4313      	orrs	r3, r2
 80030a8:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80030aa:	7c3b      	ldrb	r3, [r7, #16]
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	b21a      	sxth	r2, r3
 80030b0:	7c7b      	ldrb	r3, [r7, #17]
 80030b2:	b21b      	sxth	r3, r3
 80030b4:	4313      	orrs	r3, r2
 80030b6:	b21a      	sxth	r2, r3
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80030bc:	7cbb      	ldrb	r3, [r7, #18]
 80030be:	021b      	lsls	r3, r3, #8
 80030c0:	b21a      	sxth	r2, r3
 80030c2:	7cfb      	ldrb	r3, [r7, #19]
 80030c4:	b21b      	sxth	r3, r3
 80030c6:	4313      	orrs	r3, r2
 80030c8:	b21a      	sxth	r2, r3
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 80030ce:	7d3b      	ldrb	r3, [r7, #20]
 80030d0:	021b      	lsls	r3, r3, #8
 80030d2:	b21a      	sxth	r2, r3
 80030d4:	7d7b      	ldrb	r3, [r7, #21]
 80030d6:	b21b      	sxth	r3, r3
 80030d8:	4313      	orrs	r3, r2
 80030da:	b21a      	sxth	r2, r3
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fd f9c0 	bl	800046c <__aeabi_i2d>
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	4bbd      	ldr	r3, [pc, #756]	; (80033e8 <MPU6050_Read_All+0x3a8>)
 80030f2:	f7fd fb4f 	bl	8000794 <__aeabi_ddiv>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	6839      	ldr	r1, [r7, #0]
 80030fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003106:	4618      	mov	r0, r3
 8003108:	f7fd f9b0 	bl	800046c <__aeabi_i2d>
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	4bb5      	ldr	r3, [pc, #724]	; (80033e8 <MPU6050_Read_All+0x3a8>)
 8003112:	f7fd fb3f 	bl	8000794 <__aeabi_ddiv>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	6839      	ldr	r1, [r7, #0]
 800311c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003126:	4618      	mov	r0, r3
 8003128:	f7fd f9a0 	bl	800046c <__aeabi_i2d>
 800312c:	a3a8      	add	r3, pc, #672	; (adr r3, 80033d0 <MPU6050_Read_All+0x390>)
 800312e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003132:	f7fd fb2f 	bl	8000794 <__aeabi_ddiv>
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
 800313a:	6839      	ldr	r1, [r7, #0]
 800313c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8003140:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003144:	ee07 3a90 	vmov	s15, r3
 8003148:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800314c:	eddf 6aa7 	vldr	s13, [pc, #668]	; 80033ec <MPU6050_Read_All+0x3ac>
 8003150:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003154:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80033f0 <MPU6050_Read_All+0x3b0>
 8003158:	ee77 7a87 	vadd.f32	s15, s15, s14
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003168:	4618      	mov	r0, r3
 800316a:	f7fd f97f 	bl	800046c <__aeabi_i2d>
 800316e:	a39a      	add	r3, pc, #616	; (adr r3, 80033d8 <MPU6050_Read_All+0x398>)
 8003170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003174:	f7fd fb0e 	bl	8000794 <__aeabi_ddiv>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	6839      	ldr	r1, [r7, #0]
 800317e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003188:	4618      	mov	r0, r3
 800318a:	f7fd f96f 	bl	800046c <__aeabi_i2d>
 800318e:	a392      	add	r3, pc, #584	; (adr r3, 80033d8 <MPU6050_Read_All+0x398>)
 8003190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003194:	f7fd fafe 	bl	8000794 <__aeabi_ddiv>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	6839      	ldr	r1, [r7, #0]
 800319e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fd f95f 	bl	800046c <__aeabi_i2d>
 80031ae:	a38a      	add	r3, pc, #552	; (adr r3, 80033d8 <MPU6050_Read_All+0x398>)
 80031b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b4:	f7fd faee 	bl	8000794 <__aeabi_ddiv>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	6839      	ldr	r1, [r7, #0]
 80031be:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 80031c2:	f000 fb0f 	bl	80037e4 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	4b8a      	ldr	r3, [pc, #552]	; (80033f4 <MPU6050_Read_All+0x3b4>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fd f93c 	bl	800044c <__aeabi_ui2d>
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	4b87      	ldr	r3, [pc, #540]	; (80033f8 <MPU6050_Read_All+0x3b8>)
 80031da:	f7fd fadb 	bl	8000794 <__aeabi_ddiv>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80031e6:	f000 fafd 	bl	80037e4 <HAL_GetTick>
 80031ea:	4603      	mov	r3, r0
 80031ec:	4a81      	ldr	r2, [pc, #516]	; (80033f4 <MPU6050_Read_All+0x3b4>)
 80031ee:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031f6:	461a      	mov	r2, r3
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031fe:	fb03 f202 	mul.w	r2, r3, r2
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003208:	4619      	mov	r1, r3
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003210:	fb03 f301 	mul.w	r3, r3, r1
 8003214:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd f928 	bl	800046c <__aeabi_i2d>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	ec43 2b10 	vmov	d0, r2, r3
 8003224:	f009 ff54 	bl	800d0d0 <sqrt>
 8003228:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	f04f 0300 	mov.w	r3, #0
 8003234:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003238:	f7fd fbea 	bl	8000a10 <__aeabi_dcmpeq>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d11f      	bne.n	8003282 <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003248:	4618      	mov	r0, r3
 800324a:	f7fd f90f 	bl	800046c <__aeabi_i2d>
 800324e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003252:	f7fd fa9f 	bl	8000794 <__aeabi_ddiv>
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	ec43 2b17 	vmov	d7, r2, r3
 800325e:	eeb0 0a47 	vmov.f32	s0, s14
 8003262:	eef0 0a67 	vmov.f32	s1, s15
 8003266:	f009 fd87 	bl	800cd78 <atan>
 800326a:	ec51 0b10 	vmov	r0, r1, d0
 800326e:	a35c      	add	r3, pc, #368	; (adr r3, 80033e0 <MPU6050_Read_All+0x3a0>)
 8003270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003274:	f7fd f964 	bl	8000540 <__aeabi_dmul>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8003280:	e005      	b.n	800328e <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003294:	425b      	negs	r3, r3
 8003296:	4618      	mov	r0, r3
 8003298:	f7fd f8e8 	bl	800046c <__aeabi_i2d>
 800329c:	4682      	mov	sl, r0
 800329e:	468b      	mov	fp, r1
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fd f8e0 	bl	800046c <__aeabi_i2d>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	ec43 2b11 	vmov	d1, r2, r3
 80032b4:	ec4b ab10 	vmov	d0, sl, fp
 80032b8:	f009 ff07 	bl	800d0ca <atan2>
 80032bc:	ec51 0b10 	vmov	r0, r1, d0
 80032c0:	a347      	add	r3, pc, #284	; (adr r3, 80033e0 <MPU6050_Read_All+0x3a0>)
 80032c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c6:	f7fd f93b 	bl	8000540 <__aeabi_dmul>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	4b49      	ldr	r3, [pc, #292]	; (80033fc <MPU6050_Read_All+0x3bc>)
 80032d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032dc:	f7fd fba2 	bl	8000a24 <__aeabi_dcmplt>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <MPU6050_Read_All+0x2bc>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	4b43      	ldr	r3, [pc, #268]	; (8003400 <MPU6050_Read_All+0x3c0>)
 80032f2:	f7fd fbb5 	bl	8000a60 <__aeabi_dcmpgt>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d114      	bne.n	8003326 <MPU6050_Read_All+0x2e6>
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	4b3f      	ldr	r3, [pc, #252]	; (8003400 <MPU6050_Read_All+0x3c0>)
 8003302:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003306:	f7fd fbab 	bl	8000a60 <__aeabi_dcmpgt>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d015      	beq.n	800333c <MPU6050_Read_All+0x2fc>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	4b38      	ldr	r3, [pc, #224]	; (80033fc <MPU6050_Read_All+0x3bc>)
 800331c:	f7fd fb82 	bl	8000a24 <__aeabi_dcmplt>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 8003326:	4937      	ldr	r1, [pc, #220]	; (8003404 <MPU6050_Read_All+0x3c4>)
 8003328:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800332c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8003330:	6839      	ldr	r1, [r7, #0]
 8003332:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003336:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800333a:	e014      	b.n	8003366 <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8003342:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8003346:	eeb0 1a47 	vmov.f32	s2, s14
 800334a:	eef0 1a67 	vmov.f32	s3, s15
 800334e:	ed97 0b06 	vldr	d0, [r7, #24]
 8003352:	482c      	ldr	r0, [pc, #176]	; (8003404 <MPU6050_Read_All+0x3c4>)
 8003354:	f000 f85a 	bl	800340c <Kalman_getAngle>
 8003358:	eeb0 7a40 	vmov.f32	s14, s0
 800335c:	eef0 7a60 	vmov.f32	s15, s1
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800336c:	4690      	mov	r8, r2
 800336e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	4b22      	ldr	r3, [pc, #136]	; (8003400 <MPU6050_Read_All+0x3c0>)
 8003378:	4640      	mov	r0, r8
 800337a:	4649      	mov	r1, r9
 800337c:	f7fd fb70 	bl	8000a60 <__aeabi_dcmpgt>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d008      	beq.n	8003398 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800338c:	4614      	mov	r4, r2
 800338e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800339e:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80033a2:	eeb0 1a47 	vmov.f32	s2, s14
 80033a6:	eef0 1a67 	vmov.f32	s3, s15
 80033aa:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80033ae:	4816      	ldr	r0, [pc, #88]	; (8003408 <MPU6050_Read_All+0x3c8>)
 80033b0:	f000 f82c 	bl	800340c <Kalman_getAngle>
 80033b4:	eeb0 7a40 	vmov.f32	s14, s0
 80033b8:	eef0 7a60 	vmov.f32	s15, s1
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 80033c2:	bf00      	nop
 80033c4:	3740      	adds	r7, #64	; 0x40
 80033c6:	46bd      	mov	sp, r7
 80033c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033cc:	f3af 8000 	nop.w
 80033d0:	00000000 	.word	0x00000000
 80033d4:	40cc2900 	.word	0x40cc2900
 80033d8:	00000000 	.word	0x00000000
 80033dc:	40606000 	.word	0x40606000
 80033e0:	1a63c1f8 	.word	0x1a63c1f8
 80033e4:	404ca5dc 	.word	0x404ca5dc
 80033e8:	40d00000 	.word	0x40d00000
 80033ec:	43aa0000 	.word	0x43aa0000
 80033f0:	42121eb8 	.word	0x42121eb8
 80033f4:	20000680 	.word	0x20000680
 80033f8:	408f4000 	.word	0x408f4000
 80033fc:	c0568000 	.word	0xc0568000
 8003400:	40568000 	.word	0x40568000
 8003404:	20000058 	.word	0x20000058
 8003408:	20000010 	.word	0x20000010

0800340c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 800340c:	b5b0      	push	{r4, r5, r7, lr}
 800340e:	b096      	sub	sp, #88	; 0x58
 8003410:	af00      	add	r7, sp, #0
 8003412:	61f8      	str	r0, [r7, #28]
 8003414:	ed87 0b04 	vstr	d0, [r7, #16]
 8003418:	ed87 1b02 	vstr	d1, [r7, #8]
 800341c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003426:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800342a:	f7fc fed1 	bl	80001d0 <__aeabi_dsub>
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800343c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003440:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003444:	f7fd f87c 	bl	8000540 <__aeabi_dmul>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4620      	mov	r0, r4
 800344e:	4629      	mov	r1, r5
 8003450:	f7fc fec0 	bl	80001d4 <__adddf3>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	69f9      	ldr	r1, [r7, #28]
 800345a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800346a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800346e:	f7fd f867 	bl	8000540 <__aeabi_dmul>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4610      	mov	r0, r2
 8003478:	4619      	mov	r1, r3
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003480:	f7fc fea6 	bl	80001d0 <__aeabi_dsub>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4610      	mov	r0, r2
 800348a:	4619      	mov	r1, r3
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003492:	f7fc fe9d 	bl	80001d0 <__aeabi_dsub>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4610      	mov	r0, r2
 800349c:	4619      	mov	r1, r3
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a4:	f7fc fe96 	bl	80001d4 <__adddf3>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4610      	mov	r0, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034b4:	f7fd f844 	bl	8000540 <__aeabi_dmul>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4620      	mov	r0, r4
 80034be:	4629      	mov	r1, r5
 80034c0:	f7fc fe88 	bl	80001d4 <__adddf3>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	69f9      	ldr	r1, [r7, #28]
 80034ca:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80034da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034de:	f7fd f82f 	bl	8000540 <__aeabi_dmul>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4620      	mov	r0, r4
 80034e8:	4629      	mov	r1, r5
 80034ea:	f7fc fe71 	bl	80001d0 <__aeabi_dsub>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	69f9      	ldr	r1, [r7, #28]
 80034f4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003504:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003508:	f7fd f81a 	bl	8000540 <__aeabi_dmul>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4620      	mov	r0, r4
 8003512:	4629      	mov	r1, r5
 8003514:	f7fc fe5c 	bl	80001d0 <__aeabi_dsub>
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	69f9      	ldr	r1, [r7, #28]
 800351e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800352e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003532:	f7fd f805 	bl	8000540 <__aeabi_dmul>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4620      	mov	r0, r4
 800353c:	4629      	mov	r1, r5
 800353e:	f7fc fe49 	bl	80001d4 <__adddf3>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	69f9      	ldr	r1, [r7, #28]
 8003548:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003558:	f7fc fe3c 	bl	80001d4 <__adddf3>
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800356a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800356e:	f7fd f911 	bl	8000794 <__aeabi_ddiv>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003580:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003584:	f7fd f906 	bl	8000794 <__aeabi_ddiv>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003596:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800359a:	f7fc fe19 	bl	80001d0 <__aeabi_dsub>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80035ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80035b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035b4:	f7fc ffc4 	bl	8000540 <__aeabi_dmul>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4620      	mov	r0, r4
 80035be:	4629      	mov	r1, r5
 80035c0:	f7fc fe08 	bl	80001d4 <__adddf3>
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	69f9      	ldr	r1, [r7, #28]
 80035ca:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80035d4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035dc:	f7fc ffb0 	bl	8000540 <__aeabi_dmul>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4620      	mov	r0, r4
 80035e6:	4629      	mov	r1, r5
 80035e8:	f7fc fdf4 	bl	80001d4 <__adddf3>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	69f9      	ldr	r1, [r7, #28]
 80035f2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80035fc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003606:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003610:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003614:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003618:	f7fc ff92 	bl	8000540 <__aeabi_dmul>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4620      	mov	r0, r4
 8003622:	4629      	mov	r1, r5
 8003624:	f7fc fdd4 	bl	80001d0 <__aeabi_dsub>
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	69f9      	ldr	r1, [r7, #28]
 800362e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003638:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800363c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003640:	f7fc ff7e 	bl	8000540 <__aeabi_dmul>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4620      	mov	r0, r4
 800364a:	4629      	mov	r1, r5
 800364c:	f7fc fdc0 	bl	80001d0 <__aeabi_dsub>
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	69f9      	ldr	r1, [r7, #28]
 8003656:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003660:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003664:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003668:	f7fc ff6a 	bl	8000540 <__aeabi_dmul>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4620      	mov	r0, r4
 8003672:	4629      	mov	r1, r5
 8003674:	f7fc fdac 	bl	80001d0 <__aeabi_dsub>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	69f9      	ldr	r1, [r7, #28]
 800367e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003688:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800368c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003690:	f7fc ff56 	bl	8000540 <__aeabi_dmul>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4620      	mov	r0, r4
 800369a:	4629      	mov	r1, r5
 800369c:	f7fc fd98 	bl	80001d0 <__aeabi_dsub>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	69f9      	ldr	r1, [r7, #28]
 80036a6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80036b0:	ec43 2b17 	vmov	d7, r2, r3
};
 80036b4:	eeb0 0a47 	vmov.f32	s0, s14
 80036b8:	eef0 0a67 	vmov.f32	s1, s15
 80036bc:	3758      	adds	r7, #88	; 0x58
 80036be:	46bd      	mov	sp, r7
 80036c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080036c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80036c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036c8:	480d      	ldr	r0, [pc, #52]	; (8003700 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80036ca:	490e      	ldr	r1, [pc, #56]	; (8003704 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80036cc:	4a0e      	ldr	r2, [pc, #56]	; (8003708 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80036ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036d0:	e002      	b.n	80036d8 <LoopCopyDataInit>

080036d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036d6:	3304      	adds	r3, #4

080036d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036dc:	d3f9      	bcc.n	80036d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036de:	4a0b      	ldr	r2, [pc, #44]	; (800370c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80036e0:	4c0b      	ldr	r4, [pc, #44]	; (8003710 <LoopFillZerobss+0x26>)
  movs r3, #0
 80036e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036e4:	e001      	b.n	80036ea <LoopFillZerobss>

080036e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036e8:	3204      	adds	r2, #4

080036ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036ec:	d3fb      	bcc.n	80036e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80036ee:	f7fe fd7f 	bl	80021f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036f2:	f009 fa3b 	bl	800cb6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036f6:	f7fd fd57 	bl	80011a8 <main>
  bx  lr    
 80036fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80036fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003704:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8003708:	0800f960 	.word	0x0800f960
  ldr r2, =_sbss
 800370c:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8003710:	20000d74 	.word	0x20000d74

08003714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003714:	e7fe      	b.n	8003714 <ADC_IRQHandler>
	...

08003718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800371c:	4b0e      	ldr	r3, [pc, #56]	; (8003758 <HAL_Init+0x40>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a0d      	ldr	r2, [pc, #52]	; (8003758 <HAL_Init+0x40>)
 8003722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003726:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <HAL_Init+0x40>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <HAL_Init+0x40>)
 800372e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003732:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003734:	4b08      	ldr	r3, [pc, #32]	; (8003758 <HAL_Init+0x40>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a07      	ldr	r2, [pc, #28]	; (8003758 <HAL_Init+0x40>)
 800373a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003740:	2003      	movs	r0, #3
 8003742:	f000 f94f 	bl	80039e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003746:	2000      	movs	r0, #0
 8003748:	f000 f808 	bl	800375c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800374c:	f7fe fa0c 	bl	8001b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40023c00 	.word	0x40023c00

0800375c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003764:	4b12      	ldr	r3, [pc, #72]	; (80037b0 <HAL_InitTick+0x54>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	4b12      	ldr	r3, [pc, #72]	; (80037b4 <HAL_InitTick+0x58>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	4619      	mov	r1, r3
 800376e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003772:	fbb3 f3f1 	udiv	r3, r3, r1
 8003776:	fbb2 f3f3 	udiv	r3, r2, r3
 800377a:	4618      	mov	r0, r3
 800377c:	f000 f967 	bl	8003a4e <HAL_SYSTICK_Config>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e00e      	b.n	80037a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b0f      	cmp	r3, #15
 800378e:	d80a      	bhi.n	80037a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003790:	2200      	movs	r2, #0
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003798:	f000 f92f 	bl	80039fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800379c:	4a06      	ldr	r2, [pc, #24]	; (80037b8 <HAL_InitTick+0x5c>)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	e000      	b.n	80037a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	20000004 	.word	0x20000004
 80037b4:	200000a4 	.word	0x200000a4
 80037b8:	200000a0 	.word	0x200000a0

080037bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037c0:	4b06      	ldr	r3, [pc, #24]	; (80037dc <HAL_IncTick+0x20>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	461a      	mov	r2, r3
 80037c6:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <HAL_IncTick+0x24>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4413      	add	r3, r2
 80037cc:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <HAL_IncTick+0x24>)
 80037ce:	6013      	str	r3, [r2, #0]
}
 80037d0:	bf00      	nop
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	200000a4 	.word	0x200000a4
 80037e0:	20000684 	.word	0x20000684

080037e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  return uwTick;
 80037e8:	4b03      	ldr	r3, [pc, #12]	; (80037f8 <HAL_GetTick+0x14>)
 80037ea:	681b      	ldr	r3, [r3, #0]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	20000684 	.word	0x20000684

080037fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003804:	f7ff ffee 	bl	80037e4 <HAL_GetTick>
 8003808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003814:	d005      	beq.n	8003822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003816:	4b0a      	ldr	r3, [pc, #40]	; (8003840 <HAL_Delay+0x44>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	461a      	mov	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4413      	add	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003822:	bf00      	nop
 8003824:	f7ff ffde 	bl	80037e4 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	429a      	cmp	r2, r3
 8003832:	d8f7      	bhi.n	8003824 <HAL_Delay+0x28>
  {
  }
}
 8003834:	bf00      	nop
 8003836:	bf00      	nop
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	200000a4 	.word	0x200000a4

08003844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003854:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <__NVIC_SetPriorityGrouping+0x44>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003860:	4013      	ands	r3, r2
 8003862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800386c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003876:	4a04      	ldr	r2, [pc, #16]	; (8003888 <__NVIC_SetPriorityGrouping+0x44>)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	60d3      	str	r3, [r2, #12]
}
 800387c:	bf00      	nop
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	e000ed00 	.word	0xe000ed00

0800388c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003890:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	0a1b      	lsrs	r3, r3, #8
 8003896:	f003 0307 	and.w	r3, r3, #7
}
 800389a:	4618      	mov	r0, r3
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	e000ed00 	.word	0xe000ed00

080038a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	db0b      	blt.n	80038d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	f003 021f 	and.w	r2, r3, #31
 80038c0:	4907      	ldr	r1, [pc, #28]	; (80038e0 <__NVIC_EnableIRQ+0x38>)
 80038c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	2001      	movs	r0, #1
 80038ca:	fa00 f202 	lsl.w	r2, r0, r2
 80038ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	e000e100 	.word	0xe000e100

080038e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	4603      	mov	r3, r0
 80038ec:	6039      	str	r1, [r7, #0]
 80038ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	db0a      	blt.n	800390e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	490c      	ldr	r1, [pc, #48]	; (8003930 <__NVIC_SetPriority+0x4c>)
 80038fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003902:	0112      	lsls	r2, r2, #4
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	440b      	add	r3, r1
 8003908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800390c:	e00a      	b.n	8003924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	b2da      	uxtb	r2, r3
 8003912:	4908      	ldr	r1, [pc, #32]	; (8003934 <__NVIC_SetPriority+0x50>)
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	3b04      	subs	r3, #4
 800391c:	0112      	lsls	r2, r2, #4
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	440b      	add	r3, r1
 8003922:	761a      	strb	r2, [r3, #24]
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	e000e100 	.word	0xe000e100
 8003934:	e000ed00 	.word	0xe000ed00

08003938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003938:	b480      	push	{r7}
 800393a:	b089      	sub	sp, #36	; 0x24
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f1c3 0307 	rsb	r3, r3, #7
 8003952:	2b04      	cmp	r3, #4
 8003954:	bf28      	it	cs
 8003956:	2304      	movcs	r3, #4
 8003958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	3304      	adds	r3, #4
 800395e:	2b06      	cmp	r3, #6
 8003960:	d902      	bls.n	8003968 <NVIC_EncodePriority+0x30>
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	3b03      	subs	r3, #3
 8003966:	e000      	b.n	800396a <NVIC_EncodePriority+0x32>
 8003968:	2300      	movs	r3, #0
 800396a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800396c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	43da      	mvns	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	401a      	ands	r2, r3
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003980:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	fa01 f303 	lsl.w	r3, r1, r3
 800398a:	43d9      	mvns	r1, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003990:	4313      	orrs	r3, r2
         );
}
 8003992:	4618      	mov	r0, r3
 8003994:	3724      	adds	r7, #36	; 0x24
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039b0:	d301      	bcc.n	80039b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039b2:	2301      	movs	r3, #1
 80039b4:	e00f      	b.n	80039d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039b6:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <SysTick_Config+0x40>)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039be:	210f      	movs	r1, #15
 80039c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039c4:	f7ff ff8e 	bl	80038e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039c8:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <SysTick_Config+0x40>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ce:	4b04      	ldr	r3, [pc, #16]	; (80039e0 <SysTick_Config+0x40>)
 80039d0:	2207      	movs	r2, #7
 80039d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	e000e010 	.word	0xe000e010

080039e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff ff29 	bl	8003844 <__NVIC_SetPriorityGrouping>
}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b086      	sub	sp, #24
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	4603      	mov	r3, r0
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	607a      	str	r2, [r7, #4]
 8003a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a0c:	f7ff ff3e 	bl	800388c <__NVIC_GetPriorityGrouping>
 8003a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	68b9      	ldr	r1, [r7, #8]
 8003a16:	6978      	ldr	r0, [r7, #20]
 8003a18:	f7ff ff8e 	bl	8003938 <NVIC_EncodePriority>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a22:	4611      	mov	r1, r2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff ff5d 	bl	80038e4 <__NVIC_SetPriority>
}
 8003a2a:	bf00      	nop
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	4603      	mov	r3, r0
 8003a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff ff31 	bl	80038a8 <__NVIC_EnableIRQ>
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b082      	sub	sp, #8
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff ffa2 	bl	80039a0 <SysTick_Config>
 8003a5c:	4603      	mov	r3, r0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b089      	sub	sp, #36	; 0x24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61fb      	str	r3, [r7, #28]
 8003a82:	e16b      	b.n	8003d5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a84:	2201      	movs	r2, #1
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	4013      	ands	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	f040 815a 	bne.w	8003d56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d005      	beq.n	8003aba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d130      	bne.n	8003b1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	2203      	movs	r2, #3
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	43db      	mvns	r3, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003af0:	2201      	movs	r2, #1
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	43db      	mvns	r3, r3
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4013      	ands	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	091b      	lsrs	r3, r3, #4
 8003b06:	f003 0201 	and.w	r2, r3, #1
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f003 0303 	and.w	r3, r3, #3
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	d017      	beq.n	8003b58 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	2203      	movs	r2, #3
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f003 0303 	and.w	r3, r3, #3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d123      	bne.n	8003bac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	08da      	lsrs	r2, r3, #3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3208      	adds	r2, #8
 8003b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	220f      	movs	r2, #15
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	08da      	lsrs	r2, r3, #3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3208      	adds	r2, #8
 8003ba6:	69b9      	ldr	r1, [r7, #24]
 8003ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	2203      	movs	r2, #3
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 0203 	and.w	r2, r3, #3
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 80b4 	beq.w	8003d56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	4b60      	ldr	r3, [pc, #384]	; (8003d74 <HAL_GPIO_Init+0x30c>)
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	4a5f      	ldr	r2, [pc, #380]	; (8003d74 <HAL_GPIO_Init+0x30c>)
 8003bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8003bfe:	4b5d      	ldr	r3, [pc, #372]	; (8003d74 <HAL_GPIO_Init+0x30c>)
 8003c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c0a:	4a5b      	ldr	r2, [pc, #364]	; (8003d78 <HAL_GPIO_Init+0x310>)
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	089b      	lsrs	r3, r3, #2
 8003c10:	3302      	adds	r3, #2
 8003c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	220f      	movs	r2, #15
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	43db      	mvns	r3, r3
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a52      	ldr	r2, [pc, #328]	; (8003d7c <HAL_GPIO_Init+0x314>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d02b      	beq.n	8003c8e <HAL_GPIO_Init+0x226>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a51      	ldr	r2, [pc, #324]	; (8003d80 <HAL_GPIO_Init+0x318>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d025      	beq.n	8003c8a <HAL_GPIO_Init+0x222>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a50      	ldr	r2, [pc, #320]	; (8003d84 <HAL_GPIO_Init+0x31c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d01f      	beq.n	8003c86 <HAL_GPIO_Init+0x21e>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a4f      	ldr	r2, [pc, #316]	; (8003d88 <HAL_GPIO_Init+0x320>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d019      	beq.n	8003c82 <HAL_GPIO_Init+0x21a>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a4e      	ldr	r2, [pc, #312]	; (8003d8c <HAL_GPIO_Init+0x324>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d013      	beq.n	8003c7e <HAL_GPIO_Init+0x216>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a4d      	ldr	r2, [pc, #308]	; (8003d90 <HAL_GPIO_Init+0x328>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00d      	beq.n	8003c7a <HAL_GPIO_Init+0x212>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a4c      	ldr	r2, [pc, #304]	; (8003d94 <HAL_GPIO_Init+0x32c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d007      	beq.n	8003c76 <HAL_GPIO_Init+0x20e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a4b      	ldr	r2, [pc, #300]	; (8003d98 <HAL_GPIO_Init+0x330>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d101      	bne.n	8003c72 <HAL_GPIO_Init+0x20a>
 8003c6e:	2307      	movs	r3, #7
 8003c70:	e00e      	b.n	8003c90 <HAL_GPIO_Init+0x228>
 8003c72:	2308      	movs	r3, #8
 8003c74:	e00c      	b.n	8003c90 <HAL_GPIO_Init+0x228>
 8003c76:	2306      	movs	r3, #6
 8003c78:	e00a      	b.n	8003c90 <HAL_GPIO_Init+0x228>
 8003c7a:	2305      	movs	r3, #5
 8003c7c:	e008      	b.n	8003c90 <HAL_GPIO_Init+0x228>
 8003c7e:	2304      	movs	r3, #4
 8003c80:	e006      	b.n	8003c90 <HAL_GPIO_Init+0x228>
 8003c82:	2303      	movs	r3, #3
 8003c84:	e004      	b.n	8003c90 <HAL_GPIO_Init+0x228>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e002      	b.n	8003c90 <HAL_GPIO_Init+0x228>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <HAL_GPIO_Init+0x228>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	f002 0203 	and.w	r2, r2, #3
 8003c96:	0092      	lsls	r2, r2, #2
 8003c98:	4093      	lsls	r3, r2
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ca0:	4935      	ldr	r1, [pc, #212]	; (8003d78 <HAL_GPIO_Init+0x310>)
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	089b      	lsrs	r3, r3, #2
 8003ca6:	3302      	adds	r3, #2
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cae:	4b3b      	ldr	r3, [pc, #236]	; (8003d9c <HAL_GPIO_Init+0x334>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cd2:	4a32      	ldr	r2, [pc, #200]	; (8003d9c <HAL_GPIO_Init+0x334>)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003cd8:	4b30      	ldr	r3, [pc, #192]	; (8003d9c <HAL_GPIO_Init+0x334>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cfc:	4a27      	ldr	r2, [pc, #156]	; (8003d9c <HAL_GPIO_Init+0x334>)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d02:	4b26      	ldr	r3, [pc, #152]	; (8003d9c <HAL_GPIO_Init+0x334>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d26:	4a1d      	ldr	r2, [pc, #116]	; (8003d9c <HAL_GPIO_Init+0x334>)
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d2c:	4b1b      	ldr	r3, [pc, #108]	; (8003d9c <HAL_GPIO_Init+0x334>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	43db      	mvns	r3, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d50:	4a12      	ldr	r2, [pc, #72]	; (8003d9c <HAL_GPIO_Init+0x334>)
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	61fb      	str	r3, [r7, #28]
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	2b0f      	cmp	r3, #15
 8003d60:	f67f ae90 	bls.w	8003a84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop
 8003d68:	3724      	adds	r7, #36	; 0x24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40023800 	.word	0x40023800
 8003d78:	40013800 	.word	0x40013800
 8003d7c:	40020000 	.word	0x40020000
 8003d80:	40020400 	.word	0x40020400
 8003d84:	40020800 	.word	0x40020800
 8003d88:	40020c00 	.word	0x40020c00
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	40021400 	.word	0x40021400
 8003d94:	40021800 	.word	0x40021800
 8003d98:	40021c00 	.word	0x40021c00
 8003d9c:	40013c00 	.word	0x40013c00

08003da0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	887b      	ldrh	r3, [r7, #2]
 8003db2:	4013      	ands	r3, r2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
 8003dbc:	e001      	b.n	8003dc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	807b      	strh	r3, [r7, #2]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003de0:	787b      	ldrb	r3, [r7, #1]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003de6:	887a      	ldrh	r2, [r7, #2]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dec:	e003      	b.n	8003df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dee:	887b      	ldrh	r3, [r7, #2]
 8003df0:	041a      	lsls	r2, r3, #16
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	619a      	str	r2, [r3, #24]
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b085      	sub	sp, #20
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e14:	887a      	ldrh	r2, [r7, #2]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	041a      	lsls	r2, r3, #16
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	43d9      	mvns	r1, r3
 8003e20:	887b      	ldrh	r3, [r7, #2]
 8003e22:	400b      	ands	r3, r1
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	619a      	str	r2, [r3, #24]
}
 8003e2a:	bf00      	nop
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003e36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e38:	b08f      	sub	sp, #60	; 0x3c
 8003e3a:	af0a      	add	r7, sp, #40	; 0x28
 8003e3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e054      	b.n	8003ef2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f008 fbd2 	bl	800c60c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2203      	movs	r2, #3
 8003e6c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d102      	bne.n	8003e82 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f005 fd74 	bl	8009974 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	603b      	str	r3, [r7, #0]
 8003e92:	687e      	ldr	r6, [r7, #4]
 8003e94:	466d      	mov	r5, sp
 8003e96:	f106 0410 	add.w	r4, r6, #16
 8003e9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ea0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ea2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ea6:	e885 0003 	stmia.w	r5, {r0, r1}
 8003eaa:	1d33      	adds	r3, r6, #4
 8003eac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003eae:	6838      	ldr	r0, [r7, #0]
 8003eb0:	f005 fcee 	bl	8009890 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2101      	movs	r1, #1
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f005 fd6b 	bl	8009996 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	603b      	str	r3, [r7, #0]
 8003ec6:	687e      	ldr	r6, [r7, #4]
 8003ec8:	466d      	mov	r5, sp
 8003eca:	f106 0410 	add.w	r4, r6, #16
 8003ece:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ed0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ed4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ed6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003eda:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ede:	1d33      	adds	r3, r6, #4
 8003ee0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ee2:	6838      	ldr	r0, [r7, #0]
 8003ee4:	f005 fe7e 	bl	8009be4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003efa <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003efa:	b590      	push	{r4, r7, lr}
 8003efc:	b089      	sub	sp, #36	; 0x24
 8003efe:	af04      	add	r7, sp, #16
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	4608      	mov	r0, r1
 8003f04:	4611      	mov	r1, r2
 8003f06:	461a      	mov	r2, r3
 8003f08:	4603      	mov	r3, r0
 8003f0a:	70fb      	strb	r3, [r7, #3]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	70bb      	strb	r3, [r7, #2]
 8003f10:	4613      	mov	r3, r2
 8003f12:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_HCD_HC_Init+0x28>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e076      	b.n	8004010 <HAL_HCD_HC_Init+0x116>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003f2a:	78fb      	ldrb	r3, [r7, #3]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	212c      	movs	r1, #44	; 0x2c
 8003f30:	fb01 f303 	mul.w	r3, r1, r3
 8003f34:	4413      	add	r3, r2
 8003f36:	333d      	adds	r3, #61	; 0x3d
 8003f38:	2200      	movs	r2, #0
 8003f3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003f3c:	78fb      	ldrb	r3, [r7, #3]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	212c      	movs	r1, #44	; 0x2c
 8003f42:	fb01 f303 	mul.w	r3, r1, r3
 8003f46:	4413      	add	r3, r2
 8003f48:	3338      	adds	r3, #56	; 0x38
 8003f4a:	787a      	ldrb	r2, [r7, #1]
 8003f4c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003f4e:	78fb      	ldrb	r3, [r7, #3]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	212c      	movs	r1, #44	; 0x2c
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	4413      	add	r3, r2
 8003f5a:	3340      	adds	r3, #64	; 0x40
 8003f5c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003f5e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003f60:	78fb      	ldrb	r3, [r7, #3]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	212c      	movs	r1, #44	; 0x2c
 8003f66:	fb01 f303 	mul.w	r3, r1, r3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3339      	adds	r3, #57	; 0x39
 8003f6e:	78fa      	ldrb	r2, [r7, #3]
 8003f70:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003f72:	78fb      	ldrb	r3, [r7, #3]
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	212c      	movs	r1, #44	; 0x2c
 8003f78:	fb01 f303 	mul.w	r3, r1, r3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	333f      	adds	r3, #63	; 0x3f
 8003f80:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003f84:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003f86:	78fb      	ldrb	r3, [r7, #3]
 8003f88:	78ba      	ldrb	r2, [r7, #2]
 8003f8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f8e:	b2d0      	uxtb	r0, r2
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	212c      	movs	r1, #44	; 0x2c
 8003f94:	fb01 f303 	mul.w	r3, r1, r3
 8003f98:	4413      	add	r3, r2
 8003f9a:	333a      	adds	r3, #58	; 0x3a
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003fa0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	da09      	bge.n	8003fbc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003fa8:	78fb      	ldrb	r3, [r7, #3]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	212c      	movs	r1, #44	; 0x2c
 8003fae:	fb01 f303 	mul.w	r3, r1, r3
 8003fb2:	4413      	add	r3, r2
 8003fb4:	333b      	adds	r3, #59	; 0x3b
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	701a      	strb	r2, [r3, #0]
 8003fba:	e008      	b.n	8003fce <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003fbc:	78fb      	ldrb	r3, [r7, #3]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	212c      	movs	r1, #44	; 0x2c
 8003fc2:	fb01 f303 	mul.w	r3, r1, r3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	333b      	adds	r3, #59	; 0x3b
 8003fca:	2200      	movs	r2, #0
 8003fcc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003fce:	78fb      	ldrb	r3, [r7, #3]
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	212c      	movs	r1, #44	; 0x2c
 8003fd4:	fb01 f303 	mul.w	r3, r1, r3
 8003fd8:	4413      	add	r3, r2
 8003fda:	333c      	adds	r3, #60	; 0x3c
 8003fdc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003fe0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6818      	ldr	r0, [r3, #0]
 8003fe6:	787c      	ldrb	r4, [r7, #1]
 8003fe8:	78ba      	ldrb	r2, [r7, #2]
 8003fea:	78f9      	ldrb	r1, [r7, #3]
 8003fec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003fee:	9302      	str	r3, [sp, #8]
 8003ff0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003ff4:	9301      	str	r3, [sp, #4]
 8003ff6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	4623      	mov	r3, r4
 8003ffe:	f005 ff73 	bl	8009ee8 <USB_HC_Init>
 8004002:	4603      	mov	r3, r0
 8004004:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800400e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	bd90      	pop	{r4, r7, pc}

08004018 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	460b      	mov	r3, r1
 8004022:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800402e:	2b01      	cmp	r3, #1
 8004030:	d101      	bne.n	8004036 <HAL_HCD_HC_Halt+0x1e>
 8004032:	2302      	movs	r3, #2
 8004034:	e00f      	b.n	8004056 <HAL_HCD_HC_Halt+0x3e>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	78fa      	ldrb	r2, [r7, #3]
 8004044:	4611      	mov	r1, r2
 8004046:	4618      	mov	r0, r3
 8004048:	f006 f9af 	bl	800a3aa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004054:	7bfb      	ldrb	r3, [r7, #15]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	4608      	mov	r0, r1
 800406a:	4611      	mov	r1, r2
 800406c:	461a      	mov	r2, r3
 800406e:	4603      	mov	r3, r0
 8004070:	70fb      	strb	r3, [r7, #3]
 8004072:	460b      	mov	r3, r1
 8004074:	70bb      	strb	r3, [r7, #2]
 8004076:	4613      	mov	r3, r2
 8004078:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800407a:	78fb      	ldrb	r3, [r7, #3]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	212c      	movs	r1, #44	; 0x2c
 8004080:	fb01 f303 	mul.w	r3, r1, r3
 8004084:	4413      	add	r3, r2
 8004086:	333b      	adds	r3, #59	; 0x3b
 8004088:	78ba      	ldrb	r2, [r7, #2]
 800408a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800408c:	78fb      	ldrb	r3, [r7, #3]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	212c      	movs	r1, #44	; 0x2c
 8004092:	fb01 f303 	mul.w	r3, r1, r3
 8004096:	4413      	add	r3, r2
 8004098:	333f      	adds	r3, #63	; 0x3f
 800409a:	787a      	ldrb	r2, [r7, #1]
 800409c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800409e:	7c3b      	ldrb	r3, [r7, #16]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d112      	bne.n	80040ca <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80040a4:	78fb      	ldrb	r3, [r7, #3]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	212c      	movs	r1, #44	; 0x2c
 80040aa:	fb01 f303 	mul.w	r3, r1, r3
 80040ae:	4413      	add	r3, r2
 80040b0:	3342      	adds	r3, #66	; 0x42
 80040b2:	2203      	movs	r2, #3
 80040b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80040b6:	78fb      	ldrb	r3, [r7, #3]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	212c      	movs	r1, #44	; 0x2c
 80040bc:	fb01 f303 	mul.w	r3, r1, r3
 80040c0:	4413      	add	r3, r2
 80040c2:	333d      	adds	r3, #61	; 0x3d
 80040c4:	7f3a      	ldrb	r2, [r7, #28]
 80040c6:	701a      	strb	r2, [r3, #0]
 80040c8:	e008      	b.n	80040dc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040ca:	78fb      	ldrb	r3, [r7, #3]
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	212c      	movs	r1, #44	; 0x2c
 80040d0:	fb01 f303 	mul.w	r3, r1, r3
 80040d4:	4413      	add	r3, r2
 80040d6:	3342      	adds	r3, #66	; 0x42
 80040d8:	2202      	movs	r2, #2
 80040da:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80040dc:	787b      	ldrb	r3, [r7, #1]
 80040de:	2b03      	cmp	r3, #3
 80040e0:	f200 80c6 	bhi.w	8004270 <HAL_HCD_HC_SubmitRequest+0x210>
 80040e4:	a201      	add	r2, pc, #4	; (adr r2, 80040ec <HAL_HCD_HC_SubmitRequest+0x8c>)
 80040e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ea:	bf00      	nop
 80040ec:	080040fd 	.word	0x080040fd
 80040f0:	0800425d 	.word	0x0800425d
 80040f4:	08004161 	.word	0x08004161
 80040f8:	080041df 	.word	0x080041df
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80040fc:	7c3b      	ldrb	r3, [r7, #16]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	f040 80b8 	bne.w	8004274 <HAL_HCD_HC_SubmitRequest+0x214>
 8004104:	78bb      	ldrb	r3, [r7, #2]
 8004106:	2b00      	cmp	r3, #0
 8004108:	f040 80b4 	bne.w	8004274 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800410c:	8b3b      	ldrh	r3, [r7, #24]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d108      	bne.n	8004124 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004112:	78fb      	ldrb	r3, [r7, #3]
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	212c      	movs	r1, #44	; 0x2c
 8004118:	fb01 f303 	mul.w	r3, r1, r3
 800411c:	4413      	add	r3, r2
 800411e:	3355      	adds	r3, #85	; 0x55
 8004120:	2201      	movs	r2, #1
 8004122:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004124:	78fb      	ldrb	r3, [r7, #3]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	212c      	movs	r1, #44	; 0x2c
 800412a:	fb01 f303 	mul.w	r3, r1, r3
 800412e:	4413      	add	r3, r2
 8004130:	3355      	adds	r3, #85	; 0x55
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d109      	bne.n	800414c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	212c      	movs	r1, #44	; 0x2c
 800413e:	fb01 f303 	mul.w	r3, r1, r3
 8004142:	4413      	add	r3, r2
 8004144:	3342      	adds	r3, #66	; 0x42
 8004146:	2200      	movs	r2, #0
 8004148:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800414a:	e093      	b.n	8004274 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800414c:	78fb      	ldrb	r3, [r7, #3]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	212c      	movs	r1, #44	; 0x2c
 8004152:	fb01 f303 	mul.w	r3, r1, r3
 8004156:	4413      	add	r3, r2
 8004158:	3342      	adds	r3, #66	; 0x42
 800415a:	2202      	movs	r2, #2
 800415c:	701a      	strb	r2, [r3, #0]
      break;
 800415e:	e089      	b.n	8004274 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004160:	78bb      	ldrb	r3, [r7, #2]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d11d      	bne.n	80041a2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004166:	78fb      	ldrb	r3, [r7, #3]
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	212c      	movs	r1, #44	; 0x2c
 800416c:	fb01 f303 	mul.w	r3, r1, r3
 8004170:	4413      	add	r3, r2
 8004172:	3355      	adds	r3, #85	; 0x55
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d109      	bne.n	800418e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800417a:	78fb      	ldrb	r3, [r7, #3]
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	212c      	movs	r1, #44	; 0x2c
 8004180:	fb01 f303 	mul.w	r3, r1, r3
 8004184:	4413      	add	r3, r2
 8004186:	3342      	adds	r3, #66	; 0x42
 8004188:	2200      	movs	r2, #0
 800418a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800418c:	e073      	b.n	8004276 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800418e:	78fb      	ldrb	r3, [r7, #3]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	212c      	movs	r1, #44	; 0x2c
 8004194:	fb01 f303 	mul.w	r3, r1, r3
 8004198:	4413      	add	r3, r2
 800419a:	3342      	adds	r3, #66	; 0x42
 800419c:	2202      	movs	r2, #2
 800419e:	701a      	strb	r2, [r3, #0]
      break;
 80041a0:	e069      	b.n	8004276 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80041a2:	78fb      	ldrb	r3, [r7, #3]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	212c      	movs	r1, #44	; 0x2c
 80041a8:	fb01 f303 	mul.w	r3, r1, r3
 80041ac:	4413      	add	r3, r2
 80041ae:	3354      	adds	r3, #84	; 0x54
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d109      	bne.n	80041ca <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041b6:	78fb      	ldrb	r3, [r7, #3]
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	212c      	movs	r1, #44	; 0x2c
 80041bc:	fb01 f303 	mul.w	r3, r1, r3
 80041c0:	4413      	add	r3, r2
 80041c2:	3342      	adds	r3, #66	; 0x42
 80041c4:	2200      	movs	r2, #0
 80041c6:	701a      	strb	r2, [r3, #0]
      break;
 80041c8:	e055      	b.n	8004276 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80041ca:	78fb      	ldrb	r3, [r7, #3]
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	212c      	movs	r1, #44	; 0x2c
 80041d0:	fb01 f303 	mul.w	r3, r1, r3
 80041d4:	4413      	add	r3, r2
 80041d6:	3342      	adds	r3, #66	; 0x42
 80041d8:	2202      	movs	r2, #2
 80041da:	701a      	strb	r2, [r3, #0]
      break;
 80041dc:	e04b      	b.n	8004276 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80041de:	78bb      	ldrb	r3, [r7, #2]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d11d      	bne.n	8004220 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80041e4:	78fb      	ldrb	r3, [r7, #3]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	212c      	movs	r1, #44	; 0x2c
 80041ea:	fb01 f303 	mul.w	r3, r1, r3
 80041ee:	4413      	add	r3, r2
 80041f0:	3355      	adds	r3, #85	; 0x55
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d109      	bne.n	800420c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041f8:	78fb      	ldrb	r3, [r7, #3]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	212c      	movs	r1, #44	; 0x2c
 80041fe:	fb01 f303 	mul.w	r3, r1, r3
 8004202:	4413      	add	r3, r2
 8004204:	3342      	adds	r3, #66	; 0x42
 8004206:	2200      	movs	r2, #0
 8004208:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800420a:	e034      	b.n	8004276 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	212c      	movs	r1, #44	; 0x2c
 8004212:	fb01 f303 	mul.w	r3, r1, r3
 8004216:	4413      	add	r3, r2
 8004218:	3342      	adds	r3, #66	; 0x42
 800421a:	2202      	movs	r2, #2
 800421c:	701a      	strb	r2, [r3, #0]
      break;
 800421e:	e02a      	b.n	8004276 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	212c      	movs	r1, #44	; 0x2c
 8004226:	fb01 f303 	mul.w	r3, r1, r3
 800422a:	4413      	add	r3, r2
 800422c:	3354      	adds	r3, #84	; 0x54
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d109      	bne.n	8004248 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004234:	78fb      	ldrb	r3, [r7, #3]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	212c      	movs	r1, #44	; 0x2c
 800423a:	fb01 f303 	mul.w	r3, r1, r3
 800423e:	4413      	add	r3, r2
 8004240:	3342      	adds	r3, #66	; 0x42
 8004242:	2200      	movs	r2, #0
 8004244:	701a      	strb	r2, [r3, #0]
      break;
 8004246:	e016      	b.n	8004276 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	212c      	movs	r1, #44	; 0x2c
 800424e:	fb01 f303 	mul.w	r3, r1, r3
 8004252:	4413      	add	r3, r2
 8004254:	3342      	adds	r3, #66	; 0x42
 8004256:	2202      	movs	r2, #2
 8004258:	701a      	strb	r2, [r3, #0]
      break;
 800425a:	e00c      	b.n	8004276 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800425c:	78fb      	ldrb	r3, [r7, #3]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	212c      	movs	r1, #44	; 0x2c
 8004262:	fb01 f303 	mul.w	r3, r1, r3
 8004266:	4413      	add	r3, r2
 8004268:	3342      	adds	r3, #66	; 0x42
 800426a:	2200      	movs	r2, #0
 800426c:	701a      	strb	r2, [r3, #0]
      break;
 800426e:	e002      	b.n	8004276 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004270:	bf00      	nop
 8004272:	e000      	b.n	8004276 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004274:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004276:	78fb      	ldrb	r3, [r7, #3]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	212c      	movs	r1, #44	; 0x2c
 800427c:	fb01 f303 	mul.w	r3, r1, r3
 8004280:	4413      	add	r3, r2
 8004282:	3344      	adds	r3, #68	; 0x44
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	8b3a      	ldrh	r2, [r7, #24]
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	202c      	movs	r0, #44	; 0x2c
 8004290:	fb00 f303 	mul.w	r3, r0, r3
 8004294:	440b      	add	r3, r1
 8004296:	334c      	adds	r3, #76	; 0x4c
 8004298:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800429a:	78fb      	ldrb	r3, [r7, #3]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	212c      	movs	r1, #44	; 0x2c
 80042a0:	fb01 f303 	mul.w	r3, r1, r3
 80042a4:	4413      	add	r3, r2
 80042a6:	3360      	adds	r3, #96	; 0x60
 80042a8:	2200      	movs	r2, #0
 80042aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	212c      	movs	r1, #44	; 0x2c
 80042b2:	fb01 f303 	mul.w	r3, r1, r3
 80042b6:	4413      	add	r3, r2
 80042b8:	3350      	adds	r3, #80	; 0x50
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80042be:	78fb      	ldrb	r3, [r7, #3]
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	212c      	movs	r1, #44	; 0x2c
 80042c4:	fb01 f303 	mul.w	r3, r1, r3
 80042c8:	4413      	add	r3, r2
 80042ca:	3339      	adds	r3, #57	; 0x39
 80042cc:	78fa      	ldrb	r2, [r7, #3]
 80042ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	212c      	movs	r1, #44	; 0x2c
 80042d6:	fb01 f303 	mul.w	r3, r1, r3
 80042da:	4413      	add	r3, r2
 80042dc:	3361      	adds	r3, #97	; 0x61
 80042de:	2200      	movs	r2, #0
 80042e0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6818      	ldr	r0, [r3, #0]
 80042e6:	78fb      	ldrb	r3, [r7, #3]
 80042e8:	222c      	movs	r2, #44	; 0x2c
 80042ea:	fb02 f303 	mul.w	r3, r2, r3
 80042ee:	3338      	adds	r3, #56	; 0x38
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	18d1      	adds	r1, r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	461a      	mov	r2, r3
 80042fc:	f005 ff02 	bl	800a104 <USB_HC_StartXfer>
 8004300:	4603      	mov	r3, r0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop

0800430c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f005 fc1b 	bl	8009b5e <USB_GetMode>
 8004328:	4603      	mov	r3, r0
 800432a:	2b01      	cmp	r3, #1
 800432c:	f040 80ef 	bne.w	800450e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4618      	mov	r0, r3
 8004336:	f005 fbff 	bl	8009b38 <USB_ReadInterrupts>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 80e5 	beq.w	800450c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4618      	mov	r0, r3
 8004348:	f005 fbf6 	bl	8009b38 <USB_ReadInterrupts>
 800434c:	4603      	mov	r3, r0
 800434e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004352:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004356:	d104      	bne.n	8004362 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004360:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f005 fbe6 	bl	8009b38 <USB_ReadInterrupts>
 800436c:	4603      	mov	r3, r0
 800436e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004376:	d104      	bne.n	8004382 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004380:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f005 fbd6 	bl	8009b38 <USB_ReadInterrupts>
 800438c:	4603      	mov	r3, r0
 800438e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004392:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004396:	d104      	bne.n	80043a2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80043a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f005 fbc6 	bl	8009b38 <USB_ReadInterrupts>
 80043ac:	4603      	mov	r3, r0
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d103      	bne.n	80043be <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2202      	movs	r2, #2
 80043bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f005 fbb8 	bl	8009b38 <USB_ReadInterrupts>
 80043c8:	4603      	mov	r3, r0
 80043ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043d2:	d115      	bne.n	8004400 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80043dc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d108      	bne.n	8004400 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f008 f98a 	bl	800c708 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2101      	movs	r1, #1
 80043fa:	4618      	mov	r0, r3
 80043fc:	f005 fcae 	bl	8009d5c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4618      	mov	r0, r3
 8004406:	f005 fb97 	bl	8009b38 <USB_ReadInterrupts>
 800440a:	4603      	mov	r3, r0
 800440c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004414:	d102      	bne.n	800441c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f001 f9ff 	bl	800581a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f005 fb89 	bl	8009b38 <USB_ReadInterrupts>
 8004426:	4603      	mov	r3, r0
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b08      	cmp	r3, #8
 800442e:	d106      	bne.n	800443e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f008 f94d 	bl	800c6d0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2208      	movs	r2, #8
 800443c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f005 fb78 	bl	8009b38 <USB_ReadInterrupts>
 8004448:	4603      	mov	r3, r0
 800444a:	f003 0310 	and.w	r3, r3, #16
 800444e:	2b10      	cmp	r3, #16
 8004450:	d101      	bne.n	8004456 <HAL_HCD_IRQHandler+0x14a>
 8004452:	2301      	movs	r3, #1
 8004454:	e000      	b.n	8004458 <HAL_HCD_IRQHandler+0x14c>
 8004456:	2300      	movs	r3, #0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d012      	beq.n	8004482 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699a      	ldr	r2, [r3, #24]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0210 	bic.w	r2, r2, #16
 800446a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f001 f902 	bl	8005676 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	699a      	ldr	r2, [r3, #24]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 0210 	orr.w	r2, r2, #16
 8004480:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f005 fb56 	bl	8009b38 <USB_ReadInterrupts>
 800448c:	4603      	mov	r3, r0
 800448e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004492:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004496:	d13a      	bne.n	800450e <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4618      	mov	r0, r3
 800449e:	f005 ff73 	bl	800a388 <USB_HC_ReadInterrupt>
 80044a2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	e025      	b.n	80044f6 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	fa22 f303 	lsr.w	r3, r2, r3
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d018      	beq.n	80044f0 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044d4:	d106      	bne.n	80044e4 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	4619      	mov	r1, r3
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f8ab 	bl	8004638 <HCD_HC_IN_IRQHandler>
 80044e2:	e005      	b.n	80044f0 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	4619      	mov	r1, r3
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fcc6 	bl	8004e7c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	3301      	adds	r3, #1
 80044f4:	617b      	str	r3, [r7, #20]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d3d4      	bcc.n	80044aa <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004508:	615a      	str	r2, [r3, #20]
 800450a:	e000      	b.n	800450e <HAL_HCD_IRQHandler+0x202>
      return;
 800450c:	bf00      	nop
    }
  }
}
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004522:	2b01      	cmp	r3, #1
 8004524:	d101      	bne.n	800452a <HAL_HCD_Start+0x16>
 8004526:	2302      	movs	r3, #2
 8004528:	e013      	b.n	8004552 <HAL_HCD_Start+0x3e>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f005 fa0b 	bl	8009952 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2101      	movs	r1, #1
 8004542:	4618      	mov	r0, r3
 8004544:	f005 fc6e 	bl	8009e24 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b082      	sub	sp, #8
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_HCD_Stop+0x16>
 800456c:	2302      	movs	r3, #2
 800456e:	e00d      	b.n	800458c <HAL_HCD_Stop+0x32>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f006 f86d 	bl	800a65c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f005 fc15 	bl	8009dd0 <USB_ResetPort>
 80045a6:	4603      	mov	r3, r0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3708      	adds	r7, #8
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	460b      	mov	r3, r1
 80045ba:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80045bc:	78fb      	ldrb	r3, [r7, #3]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	212c      	movs	r1, #44	; 0x2c
 80045c2:	fb01 f303 	mul.w	r3, r1, r3
 80045c6:	4413      	add	r3, r2
 80045c8:	3360      	adds	r3, #96	; 0x60
 80045ca:	781b      	ldrb	r3, [r3, #0]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	460b      	mov	r3, r1
 80045e2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	212c      	movs	r1, #44	; 0x2c
 80045ea:	fb01 f303 	mul.w	r3, r1, r3
 80045ee:	4413      	add	r3, r2
 80045f0:	3350      	adds	r3, #80	; 0x50
 80045f2:	681b      	ldr	r3, [r3, #0]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f005 fc59 	bl	8009ec4 <USB_GetCurrentFrame>
 8004612:	4603      	mov	r3, r0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f005 fc34 	bl	8009e96 <USB_GetHostSpeed>
 800462e:	4603      	mov	r3, r0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800464e:	78fb      	ldrb	r3, [r7, #3]
 8004650:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	4413      	add	r3, r2
 800465a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b04      	cmp	r3, #4
 8004666:	d119      	bne.n	800469c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	4413      	add	r3, r2
 8004670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004674:	461a      	mov	r2, r3
 8004676:	2304      	movs	r3, #4
 8004678:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	4413      	add	r3, r2
 8004682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	0151      	lsls	r1, r2, #5
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	440a      	add	r2, r1
 8004690:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004694:	f043 0302 	orr.w	r3, r3, #2
 8004698:	60d3      	str	r3, [r2, #12]
 800469a:	e101      	b.n	80048a0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046b2:	d12b      	bne.n	800470c <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c0:	461a      	mov	r2, r3
 80046c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	212c      	movs	r1, #44	; 0x2c
 80046ce:	fb01 f303 	mul.w	r3, r1, r3
 80046d2:	4413      	add	r3, r2
 80046d4:	3361      	adds	r3, #97	; 0x61
 80046d6:	2207      	movs	r2, #7
 80046d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	0151      	lsls	r1, r2, #5
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	440a      	add	r2, r1
 80046f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046f4:	f043 0302 	orr.w	r3, r3, #2
 80046f8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	4611      	mov	r1, r2
 8004704:	4618      	mov	r0, r3
 8004706:	f005 fe50 	bl	800a3aa <USB_HC_Halt>
 800470a:	e0c9      	b.n	80048a0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	4413      	add	r3, r2
 8004714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 0320 	and.w	r3, r3, #32
 800471e:	2b20      	cmp	r3, #32
 8004720:	d109      	bne.n	8004736 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	4413      	add	r3, r2
 800472a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800472e:	461a      	mov	r2, r3
 8004730:	2320      	movs	r3, #32
 8004732:	6093      	str	r3, [r2, #8]
 8004734:	e0b4      	b.n	80048a0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4413      	add	r3, r2
 800473e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b08      	cmp	r3, #8
 800474a:	d133      	bne.n	80047b4 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	4413      	add	r3, r2
 8004754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	0151      	lsls	r1, r2, #5
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	440a      	add	r2, r1
 8004762:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004766:	f043 0302 	orr.w	r3, r3, #2
 800476a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	212c      	movs	r1, #44	; 0x2c
 8004772:	fb01 f303 	mul.w	r3, r1, r3
 8004776:	4413      	add	r3, r2
 8004778:	3361      	adds	r3, #97	; 0x61
 800477a:	2205      	movs	r2, #5
 800477c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	4413      	add	r3, r2
 8004786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800478a:	461a      	mov	r2, r3
 800478c:	2310      	movs	r3, #16
 800478e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4413      	add	r3, r2
 8004798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800479c:	461a      	mov	r2, r3
 800479e:	2308      	movs	r3, #8
 80047a0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	4611      	mov	r1, r2
 80047ac:	4618      	mov	r0, r3
 80047ae:	f005 fdfc 	bl	800a3aa <USB_HC_Halt>
 80047b2:	e075      	b.n	80048a0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ca:	d134      	bne.n	8004836 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	0151      	lsls	r1, r2, #5
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	440a      	add	r2, r1
 80047e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047e6:	f043 0302 	orr.w	r3, r3, #2
 80047ea:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	212c      	movs	r1, #44	; 0x2c
 80047f2:	fb01 f303 	mul.w	r3, r1, r3
 80047f6:	4413      	add	r3, r2
 80047f8:	3361      	adds	r3, #97	; 0x61
 80047fa:	2208      	movs	r2, #8
 80047fc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	4413      	add	r3, r2
 8004806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800480a:	461a      	mov	r2, r3
 800480c:	2310      	movs	r3, #16
 800480e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	4413      	add	r3, r2
 8004818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800481c:	461a      	mov	r2, r3
 800481e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004822:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	4611      	mov	r1, r2
 800482e:	4618      	mov	r0, r3
 8004830:	f005 fdbb 	bl	800a3aa <USB_HC_Halt>
 8004834:	e034      	b.n	80048a0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	4413      	add	r3, r2
 800483e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004848:	2b80      	cmp	r3, #128	; 0x80
 800484a:	d129      	bne.n	80048a0 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	4413      	add	r3, r2
 8004854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	0151      	lsls	r1, r2, #5
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	440a      	add	r2, r1
 8004862:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004866:	f043 0302 	orr.w	r3, r3, #2
 800486a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	212c      	movs	r1, #44	; 0x2c
 8004872:	fb01 f303 	mul.w	r3, r1, r3
 8004876:	4413      	add	r3, r2
 8004878:	3361      	adds	r3, #97	; 0x61
 800487a:	2206      	movs	r2, #6
 800487c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	4611      	mov	r1, r2
 8004888:	4618      	mov	r0, r3
 800488a:	f005 fd8e 	bl	800a3aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	4413      	add	r3, r2
 8004896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489a:	461a      	mov	r2, r3
 800489c:	2380      	movs	r3, #128	; 0x80
 800489e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048b6:	d122      	bne.n	80048fe <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	0151      	lsls	r1, r2, #5
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	440a      	add	r2, r1
 80048ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048d2:	f043 0302 	orr.w	r3, r3, #2
 80048d6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	4611      	mov	r1, r2
 80048e2:	4618      	mov	r0, r3
 80048e4:	f005 fd61 	bl	800a3aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f4:	461a      	mov	r2, r3
 80048f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048fa:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80048fc:	e2ba      	b.n	8004e74 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	015a      	lsls	r2, r3, #5
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	4413      	add	r3, r2
 8004906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b01      	cmp	r3, #1
 8004912:	f040 811b 	bne.w	8004b4c <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d019      	beq.n	8004952 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	212c      	movs	r1, #44	; 0x2c
 8004924:	fb01 f303 	mul.w	r3, r1, r3
 8004928:	4413      	add	r3, r2
 800492a:	3348      	adds	r3, #72	; 0x48
 800492c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	0159      	lsls	r1, r3, #5
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	440b      	add	r3, r1
 8004936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004940:	1ad2      	subs	r2, r2, r3
 8004942:	6879      	ldr	r1, [r7, #4]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	202c      	movs	r0, #44	; 0x2c
 8004948:	fb00 f303 	mul.w	r3, r0, r3
 800494c:	440b      	add	r3, r1
 800494e:	3350      	adds	r3, #80	; 0x50
 8004950:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	212c      	movs	r1, #44	; 0x2c
 8004958:	fb01 f303 	mul.w	r3, r1, r3
 800495c:	4413      	add	r3, r2
 800495e:	3361      	adds	r3, #97	; 0x61
 8004960:	2201      	movs	r2, #1
 8004962:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	212c      	movs	r1, #44	; 0x2c
 800496a:	fb01 f303 	mul.w	r3, r1, r3
 800496e:	4413      	add	r3, r2
 8004970:	335c      	adds	r3, #92	; 0x5c
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	4413      	add	r3, r2
 800497e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004982:	461a      	mov	r2, r3
 8004984:	2301      	movs	r3, #1
 8004986:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	212c      	movs	r1, #44	; 0x2c
 800498e:	fb01 f303 	mul.w	r3, r1, r3
 8004992:	4413      	add	r3, r2
 8004994:	333f      	adds	r3, #63	; 0x3f
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d009      	beq.n	80049b0 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	212c      	movs	r1, #44	; 0x2c
 80049a2:	fb01 f303 	mul.w	r3, r1, r3
 80049a6:	4413      	add	r3, r2
 80049a8:	333f      	adds	r3, #63	; 0x3f
 80049aa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d121      	bne.n	80049f4 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	0151      	lsls	r1, r2, #5
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	440a      	add	r2, r1
 80049c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049ca:	f043 0302 	orr.w	r3, r3, #2
 80049ce:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	4611      	mov	r1, r2
 80049da:	4618      	mov	r0, r3
 80049dc:	f005 fce5 	bl	800a3aa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ec:	461a      	mov	r2, r3
 80049ee:	2310      	movs	r3, #16
 80049f0:	6093      	str	r3, [r2, #8]
 80049f2:	e066      	b.n	8004ac2 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	212c      	movs	r1, #44	; 0x2c
 80049fa:	fb01 f303 	mul.w	r3, r1, r3
 80049fe:	4413      	add	r3, r2
 8004a00:	333f      	adds	r3, #63	; 0x3f
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2b03      	cmp	r3, #3
 8004a06:	d127      	bne.n	8004a58 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	0151      	lsls	r1, r2, #5
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	440a      	add	r2, r1
 8004a1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a26:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	212c      	movs	r1, #44	; 0x2c
 8004a2e:	fb01 f303 	mul.w	r3, r1, r3
 8004a32:	4413      	add	r3, r2
 8004a34:	3360      	adds	r3, #96	; 0x60
 8004a36:	2201      	movs	r2, #1
 8004a38:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	b2d9      	uxtb	r1, r3
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	202c      	movs	r0, #44	; 0x2c
 8004a44:	fb00 f303 	mul.w	r3, r0, r3
 8004a48:	4413      	add	r3, r2
 8004a4a:	3360      	adds	r3, #96	; 0x60
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f007 fe67 	bl	800c724 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004a56:	e034      	b.n	8004ac2 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	212c      	movs	r1, #44	; 0x2c
 8004a5e:	fb01 f303 	mul.w	r3, r1, r3
 8004a62:	4413      	add	r3, r2
 8004a64:	333f      	adds	r3, #63	; 0x3f
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d12a      	bne.n	8004ac2 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	212c      	movs	r1, #44	; 0x2c
 8004a72:	fb01 f303 	mul.w	r3, r1, r3
 8004a76:	4413      	add	r3, r2
 8004a78:	3360      	adds	r3, #96	; 0x60
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	212c      	movs	r1, #44	; 0x2c
 8004a84:	fb01 f303 	mul.w	r3, r1, r3
 8004a88:	4413      	add	r3, r2
 8004a8a:	3354      	adds	r3, #84	; 0x54
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	f083 0301 	eor.w	r3, r3, #1
 8004a92:	b2d8      	uxtb	r0, r3
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	212c      	movs	r1, #44	; 0x2c
 8004a9a:	fb01 f303 	mul.w	r3, r1, r3
 8004a9e:	4413      	add	r3, r2
 8004aa0:	3354      	adds	r3, #84	; 0x54
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	b2d9      	uxtb	r1, r3
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	202c      	movs	r0, #44	; 0x2c
 8004ab0:	fb00 f303 	mul.w	r3, r0, r3
 8004ab4:	4413      	add	r3, r2
 8004ab6:	3360      	adds	r3, #96	; 0x60
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	461a      	mov	r2, r3
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f007 fe31 	bl	800c724 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d12b      	bne.n	8004b22 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	212c      	movs	r1, #44	; 0x2c
 8004ad0:	fb01 f303 	mul.w	r3, r1, r3
 8004ad4:	4413      	add	r3, r2
 8004ad6:	3348      	adds	r3, #72	; 0x48
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6879      	ldr	r1, [r7, #4]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	202c      	movs	r0, #44	; 0x2c
 8004ae0:	fb00 f202 	mul.w	r2, r0, r2
 8004ae4:	440a      	add	r2, r1
 8004ae6:	3240      	adds	r2, #64	; 0x40
 8004ae8:	8812      	ldrh	r2, [r2, #0]
 8004aea:	fbb3 f3f2 	udiv	r3, r3, r2
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 81be 	beq.w	8004e74 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	212c      	movs	r1, #44	; 0x2c
 8004afe:	fb01 f303 	mul.w	r3, r1, r3
 8004b02:	4413      	add	r3, r2
 8004b04:	3354      	adds	r3, #84	; 0x54
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	f083 0301 	eor.w	r3, r3, #1
 8004b0c:	b2d8      	uxtb	r0, r3
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	212c      	movs	r1, #44	; 0x2c
 8004b14:	fb01 f303 	mul.w	r3, r1, r3
 8004b18:	4413      	add	r3, r2
 8004b1a:	3354      	adds	r3, #84	; 0x54
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	701a      	strb	r2, [r3, #0]
}
 8004b20:	e1a8      	b.n	8004e74 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	212c      	movs	r1, #44	; 0x2c
 8004b28:	fb01 f303 	mul.w	r3, r1, r3
 8004b2c:	4413      	add	r3, r2
 8004b2e:	3354      	adds	r3, #84	; 0x54
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	f083 0301 	eor.w	r3, r3, #1
 8004b36:	b2d8      	uxtb	r0, r3
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	212c      	movs	r1, #44	; 0x2c
 8004b3e:	fb01 f303 	mul.w	r3, r1, r3
 8004b42:	4413      	add	r3, r2
 8004b44:	3354      	adds	r3, #84	; 0x54
 8004b46:	4602      	mov	r2, r0
 8004b48:	701a      	strb	r2, [r3, #0]
}
 8004b4a:	e193      	b.n	8004e74 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	f040 8106 	bne.w	8004d70 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	0151      	lsls	r1, r2, #5
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	440a      	add	r2, r1
 8004b7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b7e:	f023 0302 	bic.w	r3, r3, #2
 8004b82:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	212c      	movs	r1, #44	; 0x2c
 8004b8a:	fb01 f303 	mul.w	r3, r1, r3
 8004b8e:	4413      	add	r3, r2
 8004b90:	3361      	adds	r3, #97	; 0x61
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d109      	bne.n	8004bac <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	212c      	movs	r1, #44	; 0x2c
 8004b9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ba2:	4413      	add	r3, r2
 8004ba4:	3360      	adds	r3, #96	; 0x60
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	e0c9      	b.n	8004d40 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	212c      	movs	r1, #44	; 0x2c
 8004bb2:	fb01 f303 	mul.w	r3, r1, r3
 8004bb6:	4413      	add	r3, r2
 8004bb8:	3361      	adds	r3, #97	; 0x61
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	2b05      	cmp	r3, #5
 8004bbe:	d109      	bne.n	8004bd4 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	212c      	movs	r1, #44	; 0x2c
 8004bc6:	fb01 f303 	mul.w	r3, r1, r3
 8004bca:	4413      	add	r3, r2
 8004bcc:	3360      	adds	r3, #96	; 0x60
 8004bce:	2205      	movs	r2, #5
 8004bd0:	701a      	strb	r2, [r3, #0]
 8004bd2:	e0b5      	b.n	8004d40 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	212c      	movs	r1, #44	; 0x2c
 8004bda:	fb01 f303 	mul.w	r3, r1, r3
 8004bde:	4413      	add	r3, r2
 8004be0:	3361      	adds	r3, #97	; 0x61
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b06      	cmp	r3, #6
 8004be6:	d009      	beq.n	8004bfc <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	212c      	movs	r1, #44	; 0x2c
 8004bee:	fb01 f303 	mul.w	r3, r1, r3
 8004bf2:	4413      	add	r3, r2
 8004bf4:	3361      	adds	r3, #97	; 0x61
 8004bf6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d150      	bne.n	8004c9e <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	212c      	movs	r1, #44	; 0x2c
 8004c02:	fb01 f303 	mul.w	r3, r1, r3
 8004c06:	4413      	add	r3, r2
 8004c08:	335c      	adds	r3, #92	; 0x5c
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	1c5a      	adds	r2, r3, #1
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	202c      	movs	r0, #44	; 0x2c
 8004c14:	fb00 f303 	mul.w	r3, r0, r3
 8004c18:	440b      	add	r3, r1
 8004c1a:	335c      	adds	r3, #92	; 0x5c
 8004c1c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	212c      	movs	r1, #44	; 0x2c
 8004c24:	fb01 f303 	mul.w	r3, r1, r3
 8004c28:	4413      	add	r3, r2
 8004c2a:	335c      	adds	r3, #92	; 0x5c
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d912      	bls.n	8004c58 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	212c      	movs	r1, #44	; 0x2c
 8004c38:	fb01 f303 	mul.w	r3, r1, r3
 8004c3c:	4413      	add	r3, r2
 8004c3e:	335c      	adds	r3, #92	; 0x5c
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	212c      	movs	r1, #44	; 0x2c
 8004c4a:	fb01 f303 	mul.w	r3, r1, r3
 8004c4e:	4413      	add	r3, r2
 8004c50:	3360      	adds	r3, #96	; 0x60
 8004c52:	2204      	movs	r2, #4
 8004c54:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004c56:	e073      	b.n	8004d40 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	212c      	movs	r1, #44	; 0x2c
 8004c5e:	fb01 f303 	mul.w	r3, r1, r3
 8004c62:	4413      	add	r3, r2
 8004c64:	3360      	adds	r3, #96	; 0x60
 8004c66:	2202      	movs	r2, #2
 8004c68:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c80:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c88:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c96:	461a      	mov	r2, r3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004c9c:	e050      	b.n	8004d40 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	212c      	movs	r1, #44	; 0x2c
 8004ca4:	fb01 f303 	mul.w	r3, r1, r3
 8004ca8:	4413      	add	r3, r2
 8004caa:	3361      	adds	r3, #97	; 0x61
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	d122      	bne.n	8004cf8 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	212c      	movs	r1, #44	; 0x2c
 8004cb8:	fb01 f303 	mul.w	r3, r1, r3
 8004cbc:	4413      	add	r3, r2
 8004cbe:	3360      	adds	r3, #96	; 0x60
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004cda:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ce2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	e023      	b.n	8004d40 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	212c      	movs	r1, #44	; 0x2c
 8004cfe:	fb01 f303 	mul.w	r3, r1, r3
 8004d02:	4413      	add	r3, r2
 8004d04:	3361      	adds	r3, #97	; 0x61
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	2b07      	cmp	r3, #7
 8004d0a:	d119      	bne.n	8004d40 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	212c      	movs	r1, #44	; 0x2c
 8004d12:	fb01 f303 	mul.w	r3, r1, r3
 8004d16:	4413      	add	r3, r2
 8004d18:	335c      	adds	r3, #92	; 0x5c
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	6879      	ldr	r1, [r7, #4]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	202c      	movs	r0, #44	; 0x2c
 8004d24:	fb00 f303 	mul.w	r3, r0, r3
 8004d28:	440b      	add	r3, r1
 8004d2a:	335c      	adds	r3, #92	; 0x5c
 8004d2c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	212c      	movs	r1, #44	; 0x2c
 8004d34:	fb01 f303 	mul.w	r3, r1, r3
 8004d38:	4413      	add	r3, r2
 8004d3a:	3360      	adds	r3, #96	; 0x60
 8004d3c:	2204      	movs	r2, #4
 8004d3e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	2302      	movs	r3, #2
 8004d50:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	b2d9      	uxtb	r1, r3
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	202c      	movs	r0, #44	; 0x2c
 8004d5c:	fb00 f303 	mul.w	r3, r0, r3
 8004d60:	4413      	add	r3, r2
 8004d62:	3360      	adds	r3, #96	; 0x60
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	461a      	mov	r2, r3
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f007 fcdb 	bl	800c724 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004d6e:	e081      	b.n	8004e74 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 0310 	and.w	r3, r3, #16
 8004d82:	2b10      	cmp	r3, #16
 8004d84:	d176      	bne.n	8004e74 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	212c      	movs	r1, #44	; 0x2c
 8004d8c:	fb01 f303 	mul.w	r3, r1, r3
 8004d90:	4413      	add	r3, r2
 8004d92:	333f      	adds	r3, #63	; 0x3f
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	2b03      	cmp	r3, #3
 8004d98:	d121      	bne.n	8004dde <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	212c      	movs	r1, #44	; 0x2c
 8004da0:	fb01 f303 	mul.w	r3, r1, r3
 8004da4:	4413      	add	r3, r2
 8004da6:	335c      	adds	r3, #92	; 0x5c
 8004da8:	2200      	movs	r2, #0
 8004daa:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	0151      	lsls	r1, r2, #5
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	440a      	add	r2, r1
 8004dc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dc6:	f043 0302 	orr.w	r3, r3, #2
 8004dca:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	4611      	mov	r1, r2
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f005 fae7 	bl	800a3aa <USB_HC_Halt>
 8004ddc:	e041      	b.n	8004e62 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	212c      	movs	r1, #44	; 0x2c
 8004de4:	fb01 f303 	mul.w	r3, r1, r3
 8004de8:	4413      	add	r3, r2
 8004dea:	333f      	adds	r3, #63	; 0x3f
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d009      	beq.n	8004e06 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	212c      	movs	r1, #44	; 0x2c
 8004df8:	fb01 f303 	mul.w	r3, r1, r3
 8004dfc:	4413      	add	r3, r2
 8004dfe:	333f      	adds	r3, #63	; 0x3f
 8004e00:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d12d      	bne.n	8004e62 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	212c      	movs	r1, #44	; 0x2c
 8004e0c:	fb01 f303 	mul.w	r3, r1, r3
 8004e10:	4413      	add	r3, r2
 8004e12:	335c      	adds	r3, #92	; 0x5c
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d120      	bne.n	8004e62 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	212c      	movs	r1, #44	; 0x2c
 8004e26:	fb01 f303 	mul.w	r3, r1, r3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	3361      	adds	r3, #97	; 0x61
 8004e2e:	2203      	movs	r2, #3
 8004e30:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	0151      	lsls	r1, r2, #5
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	440a      	add	r2, r1
 8004e48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e4c:	f043 0302 	orr.w	r3, r3, #2
 8004e50:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f005 faa4 	bl	800a3aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e6e:	461a      	mov	r2, r3
 8004e70:	2310      	movs	r3, #16
 8004e72:	6093      	str	r3, [r2, #8]
}
 8004e74:	bf00      	nop
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	460b      	mov	r3, r1
 8004e86:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004e92:	78fb      	ldrb	r3, [r7, #3]
 8004e94:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d119      	bne.n	8004ee0 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb8:	461a      	mov	r2, r3
 8004eba:	2304      	movs	r3, #4
 8004ebc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	0151      	lsls	r1, r2, #5
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	440a      	add	r2, r1
 8004ed4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ed8:	f043 0302 	orr.w	r3, r3, #2
 8004edc:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004ede:	e3c6      	b.n	800566e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 0320 	and.w	r3, r3, #32
 8004ef2:	2b20      	cmp	r3, #32
 8004ef4:	d13e      	bne.n	8004f74 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f02:	461a      	mov	r2, r3
 8004f04:	2320      	movs	r3, #32
 8004f06:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	212c      	movs	r1, #44	; 0x2c
 8004f0e:	fb01 f303 	mul.w	r3, r1, r3
 8004f12:	4413      	add	r3, r2
 8004f14:	333d      	adds	r3, #61	; 0x3d
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	f040 83a8 	bne.w	800566e <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	212c      	movs	r1, #44	; 0x2c
 8004f24:	fb01 f303 	mul.w	r3, r1, r3
 8004f28:	4413      	add	r3, r2
 8004f2a:	333d      	adds	r3, #61	; 0x3d
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	212c      	movs	r1, #44	; 0x2c
 8004f36:	fb01 f303 	mul.w	r3, r1, r3
 8004f3a:	4413      	add	r3, r2
 8004f3c:	3360      	adds	r3, #96	; 0x60
 8004f3e:	2202      	movs	r2, #2
 8004f40:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	0151      	lsls	r1, r2, #5
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	440a      	add	r2, r1
 8004f58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f5c:	f043 0302 	orr.w	r3, r3, #2
 8004f60:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	b2d2      	uxtb	r2, r2
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f005 fa1c 	bl	800a3aa <USB_HC_Halt>
}
 8004f72:	e37c      	b.n	800566e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f8a:	d122      	bne.n	8004fd2 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	0151      	lsls	r1, r2, #5
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	440a      	add	r2, r1
 8004fa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fa6:	f043 0302 	orr.w	r3, r3, #2
 8004faa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	4611      	mov	r1, r2
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f005 f9f7 	bl	800a3aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc8:	461a      	mov	r2, r3
 8004fca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fce:	6093      	str	r3, [r2, #8]
}
 8004fd0:	e34d      	b.n	800566e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d150      	bne.n	800508a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	212c      	movs	r1, #44	; 0x2c
 8004fee:	fb01 f303 	mul.w	r3, r1, r3
 8004ff2:	4413      	add	r3, r2
 8004ff4:	335c      	adds	r3, #92	; 0x5c
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	4413      	add	r3, r2
 8005002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500c:	2b40      	cmp	r3, #64	; 0x40
 800500e:	d111      	bne.n	8005034 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	212c      	movs	r1, #44	; 0x2c
 8005016:	fb01 f303 	mul.w	r3, r1, r3
 800501a:	4413      	add	r3, r2
 800501c:	333d      	adds	r3, #61	; 0x3d
 800501e:	2201      	movs	r2, #1
 8005020:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	4413      	add	r3, r2
 800502a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800502e:	461a      	mov	r2, r3
 8005030:	2340      	movs	r3, #64	; 0x40
 8005032:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	4413      	add	r3, r2
 800503c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	0151      	lsls	r1, r2, #5
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	440a      	add	r2, r1
 800504a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800504e:	f043 0302 	orr.w	r3, r3, #2
 8005052:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	4611      	mov	r1, r2
 800505e:	4618      	mov	r0, r3
 8005060:	f005 f9a3 	bl	800a3aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	4413      	add	r3, r2
 800506c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005070:	461a      	mov	r2, r3
 8005072:	2301      	movs	r3, #1
 8005074:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	212c      	movs	r1, #44	; 0x2c
 800507c:	fb01 f303 	mul.w	r3, r1, r3
 8005080:	4413      	add	r3, r2
 8005082:	3361      	adds	r3, #97	; 0x61
 8005084:	2201      	movs	r2, #1
 8005086:	701a      	strb	r2, [r3, #0]
}
 8005088:	e2f1      	b.n	800566e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	4413      	add	r3, r2
 8005092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509c:	2b40      	cmp	r3, #64	; 0x40
 800509e:	d13c      	bne.n	800511a <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	212c      	movs	r1, #44	; 0x2c
 80050a6:	fb01 f303 	mul.w	r3, r1, r3
 80050aa:	4413      	add	r3, r2
 80050ac:	3361      	adds	r3, #97	; 0x61
 80050ae:	2204      	movs	r2, #4
 80050b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	212c      	movs	r1, #44	; 0x2c
 80050b8:	fb01 f303 	mul.w	r3, r1, r3
 80050bc:	4413      	add	r3, r2
 80050be:	333d      	adds	r3, #61	; 0x3d
 80050c0:	2201      	movs	r2, #1
 80050c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	212c      	movs	r1, #44	; 0x2c
 80050ca:	fb01 f303 	mul.w	r3, r1, r3
 80050ce:	4413      	add	r3, r2
 80050d0:	335c      	adds	r3, #92	; 0x5c
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	0151      	lsls	r1, r2, #5
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	440a      	add	r2, r1
 80050ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050f0:	f043 0302 	orr.w	r3, r3, #2
 80050f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	4611      	mov	r1, r2
 8005100:	4618      	mov	r0, r3
 8005102:	f005 f952 	bl	800a3aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	4413      	add	r3, r2
 800510e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005112:	461a      	mov	r2, r3
 8005114:	2340      	movs	r3, #64	; 0x40
 8005116:	6093      	str	r3, [r2, #8]
}
 8005118:	e2a9      	b.n	800566e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	4413      	add	r3, r2
 8005122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f003 0308 	and.w	r3, r3, #8
 800512c:	2b08      	cmp	r3, #8
 800512e:	d12a      	bne.n	8005186 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	4413      	add	r3, r2
 8005138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800513c:	461a      	mov	r2, r3
 800513e:	2308      	movs	r3, #8
 8005140:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	4413      	add	r3, r2
 800514a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	0151      	lsls	r1, r2, #5
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	440a      	add	r2, r1
 8005158:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800515c:	f043 0302 	orr.w	r3, r3, #2
 8005160:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	b2d2      	uxtb	r2, r2
 800516a:	4611      	mov	r1, r2
 800516c:	4618      	mov	r0, r3
 800516e:	f005 f91c 	bl	800a3aa <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	212c      	movs	r1, #44	; 0x2c
 8005178:	fb01 f303 	mul.w	r3, r1, r3
 800517c:	4413      	add	r3, r2
 800517e:	3361      	adds	r3, #97	; 0x61
 8005180:	2205      	movs	r2, #5
 8005182:	701a      	strb	r2, [r3, #0]
}
 8005184:	e273      	b.n	800566e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	4413      	add	r3, r2
 800518e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 0310 	and.w	r3, r3, #16
 8005198:	2b10      	cmp	r3, #16
 800519a:	d150      	bne.n	800523e <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	212c      	movs	r1, #44	; 0x2c
 80051a2:	fb01 f303 	mul.w	r3, r1, r3
 80051a6:	4413      	add	r3, r2
 80051a8:	335c      	adds	r3, #92	; 0x5c
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	212c      	movs	r1, #44	; 0x2c
 80051b4:	fb01 f303 	mul.w	r3, r1, r3
 80051b8:	4413      	add	r3, r2
 80051ba:	3361      	adds	r3, #97	; 0x61
 80051bc:	2203      	movs	r2, #3
 80051be:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	212c      	movs	r1, #44	; 0x2c
 80051c6:	fb01 f303 	mul.w	r3, r1, r3
 80051ca:	4413      	add	r3, r2
 80051cc:	333d      	adds	r3, #61	; 0x3d
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d112      	bne.n	80051fa <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	212c      	movs	r1, #44	; 0x2c
 80051da:	fb01 f303 	mul.w	r3, r1, r3
 80051de:	4413      	add	r3, r2
 80051e0:	333c      	adds	r3, #60	; 0x3c
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d108      	bne.n	80051fa <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	212c      	movs	r1, #44	; 0x2c
 80051ee:	fb01 f303 	mul.w	r3, r1, r3
 80051f2:	4413      	add	r3, r2
 80051f4:	333d      	adds	r3, #61	; 0x3d
 80051f6:	2201      	movs	r2, #1
 80051f8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	4413      	add	r3, r2
 8005202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	0151      	lsls	r1, r2, #5
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	440a      	add	r2, r1
 8005210:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005214:	f043 0302 	orr.w	r3, r3, #2
 8005218:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	4611      	mov	r1, r2
 8005224:	4618      	mov	r0, r3
 8005226:	f005 f8c0 	bl	800a3aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	4413      	add	r3, r2
 8005232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005236:	461a      	mov	r2, r3
 8005238:	2310      	movs	r3, #16
 800523a:	6093      	str	r3, [r2, #8]
}
 800523c:	e217      	b.n	800566e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	4413      	add	r3, r2
 8005246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005250:	2b80      	cmp	r3, #128	; 0x80
 8005252:	d174      	bne.n	800533e <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d121      	bne.n	80052a0 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	212c      	movs	r1, #44	; 0x2c
 8005262:	fb01 f303 	mul.w	r3, r1, r3
 8005266:	4413      	add	r3, r2
 8005268:	3361      	adds	r3, #97	; 0x61
 800526a:	2206      	movs	r2, #6
 800526c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	4413      	add	r3, r2
 8005276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	0151      	lsls	r1, r2, #5
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	440a      	add	r2, r1
 8005284:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005288:	f043 0302 	orr.w	r3, r3, #2
 800528c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	4611      	mov	r1, r2
 8005298:	4618      	mov	r0, r3
 800529a:	f005 f886 	bl	800a3aa <USB_HC_Halt>
 800529e:	e044      	b.n	800532a <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	212c      	movs	r1, #44	; 0x2c
 80052a6:	fb01 f303 	mul.w	r3, r1, r3
 80052aa:	4413      	add	r3, r2
 80052ac:	335c      	adds	r3, #92	; 0x5c
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	202c      	movs	r0, #44	; 0x2c
 80052b8:	fb00 f303 	mul.w	r3, r0, r3
 80052bc:	440b      	add	r3, r1
 80052be:	335c      	adds	r3, #92	; 0x5c
 80052c0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	212c      	movs	r1, #44	; 0x2c
 80052c8:	fb01 f303 	mul.w	r3, r1, r3
 80052cc:	4413      	add	r3, r2
 80052ce:	335c      	adds	r3, #92	; 0x5c
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d920      	bls.n	8005318 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	212c      	movs	r1, #44	; 0x2c
 80052dc:	fb01 f303 	mul.w	r3, r1, r3
 80052e0:	4413      	add	r3, r2
 80052e2:	335c      	adds	r3, #92	; 0x5c
 80052e4:	2200      	movs	r2, #0
 80052e6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	212c      	movs	r1, #44	; 0x2c
 80052ee:	fb01 f303 	mul.w	r3, r1, r3
 80052f2:	4413      	add	r3, r2
 80052f4:	3360      	adds	r3, #96	; 0x60
 80052f6:	2204      	movs	r2, #4
 80052f8:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	b2d9      	uxtb	r1, r3
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	202c      	movs	r0, #44	; 0x2c
 8005304:	fb00 f303 	mul.w	r3, r0, r3
 8005308:	4413      	add	r3, r2
 800530a:	3360      	adds	r3, #96	; 0x60
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f007 fa07 	bl	800c724 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005316:	e008      	b.n	800532a <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	212c      	movs	r1, #44	; 0x2c
 800531e:	fb01 f303 	mul.w	r3, r1, r3
 8005322:	4413      	add	r3, r2
 8005324:	3360      	adds	r3, #96	; 0x60
 8005326:	2202      	movs	r2, #2
 8005328:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	4413      	add	r3, r2
 8005332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005336:	461a      	mov	r2, r3
 8005338:	2380      	movs	r3, #128	; 0x80
 800533a:	6093      	str	r3, [r2, #8]
}
 800533c:	e197      	b.n	800566e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	4413      	add	r3, r2
 8005346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005354:	d134      	bne.n	80053c0 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	4413      	add	r3, r2
 800535e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	0151      	lsls	r1, r2, #5
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	440a      	add	r2, r1
 800536c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005370:	f043 0302 	orr.w	r3, r3, #2
 8005374:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	4611      	mov	r1, r2
 8005380:	4618      	mov	r0, r3
 8005382:	f005 f812 	bl	800a3aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	4413      	add	r3, r2
 800538e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005392:	461a      	mov	r2, r3
 8005394:	2310      	movs	r3, #16
 8005396:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a4:	461a      	mov	r2, r3
 80053a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	212c      	movs	r1, #44	; 0x2c
 80053b2:	fb01 f303 	mul.w	r3, r1, r3
 80053b6:	4413      	add	r3, r2
 80053b8:	3361      	adds	r3, #97	; 0x61
 80053ba:	2208      	movs	r2, #8
 80053bc:	701a      	strb	r2, [r3, #0]
}
 80053be:	e156      	b.n	800566e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	f040 814b 	bne.w	800566e <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	0151      	lsls	r1, r2, #5
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	440a      	add	r2, r1
 80053ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053f2:	f023 0302 	bic.w	r3, r3, #2
 80053f6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	212c      	movs	r1, #44	; 0x2c
 80053fe:	fb01 f303 	mul.w	r3, r1, r3
 8005402:	4413      	add	r3, r2
 8005404:	3361      	adds	r3, #97	; 0x61
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d179      	bne.n	8005500 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	212c      	movs	r1, #44	; 0x2c
 8005412:	fb01 f303 	mul.w	r3, r1, r3
 8005416:	4413      	add	r3, r2
 8005418:	3360      	adds	r3, #96	; 0x60
 800541a:	2201      	movs	r2, #1
 800541c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	212c      	movs	r1, #44	; 0x2c
 8005424:	fb01 f303 	mul.w	r3, r1, r3
 8005428:	4413      	add	r3, r2
 800542a:	333f      	adds	r3, #63	; 0x3f
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	2b02      	cmp	r3, #2
 8005430:	d00a      	beq.n	8005448 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	212c      	movs	r1, #44	; 0x2c
 8005438:	fb01 f303 	mul.w	r3, r1, r3
 800543c:	4413      	add	r3, r2
 800543e:	333f      	adds	r3, #63	; 0x3f
 8005440:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005442:	2b03      	cmp	r3, #3
 8005444:	f040 80fc 	bne.w	8005640 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d142      	bne.n	80054d6 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	212c      	movs	r1, #44	; 0x2c
 8005456:	fb01 f303 	mul.w	r3, r1, r3
 800545a:	4413      	add	r3, r2
 800545c:	334c      	adds	r3, #76	; 0x4c
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 80ed 	beq.w	8005640 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	212c      	movs	r1, #44	; 0x2c
 800546c:	fb01 f303 	mul.w	r3, r1, r3
 8005470:	4413      	add	r3, r2
 8005472:	334c      	adds	r3, #76	; 0x4c
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6879      	ldr	r1, [r7, #4]
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	202c      	movs	r0, #44	; 0x2c
 800547c:	fb00 f202 	mul.w	r2, r0, r2
 8005480:	440a      	add	r2, r1
 8005482:	3240      	adds	r2, #64	; 0x40
 8005484:	8812      	ldrh	r2, [r2, #0]
 8005486:	4413      	add	r3, r2
 8005488:	3b01      	subs	r3, #1
 800548a:	6879      	ldr	r1, [r7, #4]
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	202c      	movs	r0, #44	; 0x2c
 8005490:	fb00 f202 	mul.w	r2, r0, r2
 8005494:	440a      	add	r2, r1
 8005496:	3240      	adds	r2, #64	; 0x40
 8005498:	8812      	ldrh	r2, [r2, #0]
 800549a:	fbb3 f3f2 	udiv	r3, r3, r2
 800549e:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 80ca 	beq.w	8005640 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	212c      	movs	r1, #44	; 0x2c
 80054b2:	fb01 f303 	mul.w	r3, r1, r3
 80054b6:	4413      	add	r3, r2
 80054b8:	3355      	adds	r3, #85	; 0x55
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	f083 0301 	eor.w	r3, r3, #1
 80054c0:	b2d8      	uxtb	r0, r3
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	212c      	movs	r1, #44	; 0x2c
 80054c8:	fb01 f303 	mul.w	r3, r1, r3
 80054cc:	4413      	add	r3, r2
 80054ce:	3355      	adds	r3, #85	; 0x55
 80054d0:	4602      	mov	r2, r0
 80054d2:	701a      	strb	r2, [r3, #0]
 80054d4:	e0b4      	b.n	8005640 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	212c      	movs	r1, #44	; 0x2c
 80054dc:	fb01 f303 	mul.w	r3, r1, r3
 80054e0:	4413      	add	r3, r2
 80054e2:	3355      	adds	r3, #85	; 0x55
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	f083 0301 	eor.w	r3, r3, #1
 80054ea:	b2d8      	uxtb	r0, r3
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	212c      	movs	r1, #44	; 0x2c
 80054f2:	fb01 f303 	mul.w	r3, r1, r3
 80054f6:	4413      	add	r3, r2
 80054f8:	3355      	adds	r3, #85	; 0x55
 80054fa:	4602      	mov	r2, r0
 80054fc:	701a      	strb	r2, [r3, #0]
 80054fe:	e09f      	b.n	8005640 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	212c      	movs	r1, #44	; 0x2c
 8005506:	fb01 f303 	mul.w	r3, r1, r3
 800550a:	4413      	add	r3, r2
 800550c:	3361      	adds	r3, #97	; 0x61
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b03      	cmp	r3, #3
 8005512:	d109      	bne.n	8005528 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	212c      	movs	r1, #44	; 0x2c
 800551a:	fb01 f303 	mul.w	r3, r1, r3
 800551e:	4413      	add	r3, r2
 8005520:	3360      	adds	r3, #96	; 0x60
 8005522:	2202      	movs	r2, #2
 8005524:	701a      	strb	r2, [r3, #0]
 8005526:	e08b      	b.n	8005640 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	212c      	movs	r1, #44	; 0x2c
 800552e:	fb01 f303 	mul.w	r3, r1, r3
 8005532:	4413      	add	r3, r2
 8005534:	3361      	adds	r3, #97	; 0x61
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b04      	cmp	r3, #4
 800553a:	d109      	bne.n	8005550 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	212c      	movs	r1, #44	; 0x2c
 8005542:	fb01 f303 	mul.w	r3, r1, r3
 8005546:	4413      	add	r3, r2
 8005548:	3360      	adds	r3, #96	; 0x60
 800554a:	2202      	movs	r2, #2
 800554c:	701a      	strb	r2, [r3, #0]
 800554e:	e077      	b.n	8005640 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	212c      	movs	r1, #44	; 0x2c
 8005556:	fb01 f303 	mul.w	r3, r1, r3
 800555a:	4413      	add	r3, r2
 800555c:	3361      	adds	r3, #97	; 0x61
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b05      	cmp	r3, #5
 8005562:	d109      	bne.n	8005578 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	212c      	movs	r1, #44	; 0x2c
 800556a:	fb01 f303 	mul.w	r3, r1, r3
 800556e:	4413      	add	r3, r2
 8005570:	3360      	adds	r3, #96	; 0x60
 8005572:	2205      	movs	r2, #5
 8005574:	701a      	strb	r2, [r3, #0]
 8005576:	e063      	b.n	8005640 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	212c      	movs	r1, #44	; 0x2c
 800557e:	fb01 f303 	mul.w	r3, r1, r3
 8005582:	4413      	add	r3, r2
 8005584:	3361      	adds	r3, #97	; 0x61
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	2b06      	cmp	r3, #6
 800558a:	d009      	beq.n	80055a0 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	212c      	movs	r1, #44	; 0x2c
 8005592:	fb01 f303 	mul.w	r3, r1, r3
 8005596:	4413      	add	r3, r2
 8005598:	3361      	adds	r3, #97	; 0x61
 800559a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800559c:	2b08      	cmp	r3, #8
 800559e:	d14f      	bne.n	8005640 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	212c      	movs	r1, #44	; 0x2c
 80055a6:	fb01 f303 	mul.w	r3, r1, r3
 80055aa:	4413      	add	r3, r2
 80055ac:	335c      	adds	r3, #92	; 0x5c
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	1c5a      	adds	r2, r3, #1
 80055b2:	6879      	ldr	r1, [r7, #4]
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	202c      	movs	r0, #44	; 0x2c
 80055b8:	fb00 f303 	mul.w	r3, r0, r3
 80055bc:	440b      	add	r3, r1
 80055be:	335c      	adds	r3, #92	; 0x5c
 80055c0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	212c      	movs	r1, #44	; 0x2c
 80055c8:	fb01 f303 	mul.w	r3, r1, r3
 80055cc:	4413      	add	r3, r2
 80055ce:	335c      	adds	r3, #92	; 0x5c
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d912      	bls.n	80055fc <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	212c      	movs	r1, #44	; 0x2c
 80055dc:	fb01 f303 	mul.w	r3, r1, r3
 80055e0:	4413      	add	r3, r2
 80055e2:	335c      	adds	r3, #92	; 0x5c
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	212c      	movs	r1, #44	; 0x2c
 80055ee:	fb01 f303 	mul.w	r3, r1, r3
 80055f2:	4413      	add	r3, r2
 80055f4:	3360      	adds	r3, #96	; 0x60
 80055f6:	2204      	movs	r2, #4
 80055f8:	701a      	strb	r2, [r3, #0]
 80055fa:	e021      	b.n	8005640 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	212c      	movs	r1, #44	; 0x2c
 8005602:	fb01 f303 	mul.w	r3, r1, r3
 8005606:	4413      	add	r3, r2
 8005608:	3360      	adds	r3, #96	; 0x60
 800560a:	2202      	movs	r2, #2
 800560c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	4413      	add	r3, r2
 8005616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005624:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800562c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	4413      	add	r3, r2
 8005636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800563a:	461a      	mov	r2, r3
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	4413      	add	r3, r2
 8005648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800564c:	461a      	mov	r2, r3
 800564e:	2302      	movs	r3, #2
 8005650:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	b2d9      	uxtb	r1, r3
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	202c      	movs	r0, #44	; 0x2c
 800565c:	fb00 f303 	mul.w	r3, r0, r3
 8005660:	4413      	add	r3, r2
 8005662:	3360      	adds	r3, #96	; 0x60
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f007 f85b 	bl	800c724 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800566e:	bf00      	nop
 8005670:	3720      	adds	r7, #32
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b08a      	sub	sp, #40	; 0x28
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	f003 030f 	and.w	r3, r3, #15
 8005696:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	0c5b      	lsrs	r3, r3, #17
 800569c:	f003 030f 	and.w	r3, r3, #15
 80056a0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	091b      	lsrs	r3, r3, #4
 80056a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056aa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d004      	beq.n	80056bc <HCD_RXQLVL_IRQHandler+0x46>
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2b05      	cmp	r3, #5
 80056b6:	f000 80a9 	beq.w	800580c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80056ba:	e0aa      	b.n	8005812 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 80a6 	beq.w	8005810 <HCD_RXQLVL_IRQHandler+0x19a>
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	212c      	movs	r1, #44	; 0x2c
 80056ca:	fb01 f303 	mul.w	r3, r1, r3
 80056ce:	4413      	add	r3, r2
 80056d0:	3344      	adds	r3, #68	; 0x44
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 809b 	beq.w	8005810 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	212c      	movs	r1, #44	; 0x2c
 80056e0:	fb01 f303 	mul.w	r3, r1, r3
 80056e4:	4413      	add	r3, r2
 80056e6:	3350      	adds	r3, #80	; 0x50
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	441a      	add	r2, r3
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	202c      	movs	r0, #44	; 0x2c
 80056f4:	fb00 f303 	mul.w	r3, r0, r3
 80056f8:	440b      	add	r3, r1
 80056fa:	334c      	adds	r3, #76	; 0x4c
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d87a      	bhi.n	80057f8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6818      	ldr	r0, [r3, #0]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	212c      	movs	r1, #44	; 0x2c
 800570c:	fb01 f303 	mul.w	r3, r1, r3
 8005710:	4413      	add	r3, r2
 8005712:	3344      	adds	r3, #68	; 0x44
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	b292      	uxth	r2, r2
 800571a:	4619      	mov	r1, r3
 800571c:	f004 f9e3 	bl	8009ae6 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	212c      	movs	r1, #44	; 0x2c
 8005726:	fb01 f303 	mul.w	r3, r1, r3
 800572a:	4413      	add	r3, r2
 800572c:	3344      	adds	r3, #68	; 0x44
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	441a      	add	r2, r3
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	202c      	movs	r0, #44	; 0x2c
 800573a:	fb00 f303 	mul.w	r3, r0, r3
 800573e:	440b      	add	r3, r1
 8005740:	3344      	adds	r3, #68	; 0x44
 8005742:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	212c      	movs	r1, #44	; 0x2c
 800574a:	fb01 f303 	mul.w	r3, r1, r3
 800574e:	4413      	add	r3, r2
 8005750:	3350      	adds	r3, #80	; 0x50
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	441a      	add	r2, r3
 8005758:	6879      	ldr	r1, [r7, #4]
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	202c      	movs	r0, #44	; 0x2c
 800575e:	fb00 f303 	mul.w	r3, r0, r3
 8005762:	440b      	add	r3, r1
 8005764:	3350      	adds	r3, #80	; 0x50
 8005766:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	4413      	add	r3, r2
 8005770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	0cdb      	lsrs	r3, r3, #19
 8005778:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800577c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	212c      	movs	r1, #44	; 0x2c
 8005784:	fb01 f303 	mul.w	r3, r1, r3
 8005788:	4413      	add	r3, r2
 800578a:	3340      	adds	r3, #64	; 0x40
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	461a      	mov	r2, r3
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	4293      	cmp	r3, r2
 8005794:	d13c      	bne.n	8005810 <HCD_RXQLVL_IRQHandler+0x19a>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d039      	beq.n	8005810 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057b2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057ba:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c8:	461a      	mov	r2, r3
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	212c      	movs	r1, #44	; 0x2c
 80057d4:	fb01 f303 	mul.w	r3, r1, r3
 80057d8:	4413      	add	r3, r2
 80057da:	3354      	adds	r3, #84	; 0x54
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	f083 0301 	eor.w	r3, r3, #1
 80057e2:	b2d8      	uxtb	r0, r3
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	212c      	movs	r1, #44	; 0x2c
 80057ea:	fb01 f303 	mul.w	r3, r1, r3
 80057ee:	4413      	add	r3, r2
 80057f0:	3354      	adds	r3, #84	; 0x54
 80057f2:	4602      	mov	r2, r0
 80057f4:	701a      	strb	r2, [r3, #0]
      break;
 80057f6:	e00b      	b.n	8005810 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	212c      	movs	r1, #44	; 0x2c
 80057fe:	fb01 f303 	mul.w	r3, r1, r3
 8005802:	4413      	add	r3, r2
 8005804:	3360      	adds	r3, #96	; 0x60
 8005806:	2204      	movs	r2, #4
 8005808:	701a      	strb	r2, [r3, #0]
      break;
 800580a:	e001      	b.n	8005810 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800580c:	bf00      	nop
 800580e:	e000      	b.n	8005812 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005810:	bf00      	nop
  }
}
 8005812:	bf00      	nop
 8005814:	3728      	adds	r7, #40	; 0x28
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b086      	sub	sp, #24
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005846:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b02      	cmp	r3, #2
 8005850:	d10b      	bne.n	800586a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b01      	cmp	r3, #1
 800585a:	d102      	bne.n	8005862 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f006 ff45 	bl	800c6ec <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	f043 0302 	orr.w	r3, r3, #2
 8005868:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f003 0308 	and.w	r3, r3, #8
 8005870:	2b08      	cmp	r3, #8
 8005872:	d132      	bne.n	80058da <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f043 0308 	orr.w	r3, r3, #8
 800587a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f003 0304 	and.w	r3, r3, #4
 8005882:	2b04      	cmp	r3, #4
 8005884:	d126      	bne.n	80058d4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	2b02      	cmp	r3, #2
 800588c:	d113      	bne.n	80058b6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005894:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005898:	d106      	bne.n	80058a8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2102      	movs	r1, #2
 80058a0:	4618      	mov	r0, r3
 80058a2:	f004 fa5b 	bl	8009d5c <USB_InitFSLSPClkSel>
 80058a6:	e011      	b.n	80058cc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2101      	movs	r1, #1
 80058ae:	4618      	mov	r0, r3
 80058b0:	f004 fa54 	bl	8009d5c <USB_InitFSLSPClkSel>
 80058b4:	e00a      	b.n	80058cc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d106      	bne.n	80058cc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058c4:	461a      	mov	r2, r3
 80058c6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80058ca:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f006 ff37 	bl	800c740 <HAL_HCD_PortEnabled_Callback>
 80058d2:	e002      	b.n	80058da <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f006 ff41 	bl	800c75c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f003 0320 	and.w	r3, r3, #32
 80058e0:	2b20      	cmp	r3, #32
 80058e2:	d103      	bne.n	80058ec <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	f043 0320 	orr.w	r3, r3, #32
 80058ea:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058f2:	461a      	mov	r2, r3
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	6013      	str	r3, [r2, #0]
}
 80058f8:	bf00      	nop
 80058fa:	3718      	adds	r7, #24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e12b      	b.n	8005b6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d106      	bne.n	800592c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7fc f94e 	bl	8001bc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2224      	movs	r2, #36	; 0x24
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0201 	bic.w	r2, r2, #1
 8005942:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005952:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005962:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005964:	f002 f9f8 	bl	8007d58 <HAL_RCC_GetPCLK1Freq>
 8005968:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	4a81      	ldr	r2, [pc, #516]	; (8005b74 <HAL_I2C_Init+0x274>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d807      	bhi.n	8005984 <HAL_I2C_Init+0x84>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4a80      	ldr	r2, [pc, #512]	; (8005b78 <HAL_I2C_Init+0x278>)
 8005978:	4293      	cmp	r3, r2
 800597a:	bf94      	ite	ls
 800597c:	2301      	movls	r3, #1
 800597e:	2300      	movhi	r3, #0
 8005980:	b2db      	uxtb	r3, r3
 8005982:	e006      	b.n	8005992 <HAL_I2C_Init+0x92>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4a7d      	ldr	r2, [pc, #500]	; (8005b7c <HAL_I2C_Init+0x27c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	bf94      	ite	ls
 800598c:	2301      	movls	r3, #1
 800598e:	2300      	movhi	r3, #0
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e0e7      	b.n	8005b6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4a78      	ldr	r2, [pc, #480]	; (8005b80 <HAL_I2C_Init+0x280>)
 800599e:	fba2 2303 	umull	r2, r3, r2, r3
 80059a2:	0c9b      	lsrs	r3, r3, #18
 80059a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	4a6a      	ldr	r2, [pc, #424]	; (8005b74 <HAL_I2C_Init+0x274>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d802      	bhi.n	80059d4 <HAL_I2C_Init+0xd4>
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	3301      	adds	r3, #1
 80059d2:	e009      	b.n	80059e8 <HAL_I2C_Init+0xe8>
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80059da:	fb02 f303 	mul.w	r3, r2, r3
 80059de:	4a69      	ldr	r2, [pc, #420]	; (8005b84 <HAL_I2C_Init+0x284>)
 80059e0:	fba2 2303 	umull	r2, r3, r2, r3
 80059e4:	099b      	lsrs	r3, r3, #6
 80059e6:	3301      	adds	r3, #1
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6812      	ldr	r2, [r2, #0]
 80059ec:	430b      	orrs	r3, r1
 80059ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80059fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	495c      	ldr	r1, [pc, #368]	; (8005b74 <HAL_I2C_Init+0x274>)
 8005a04:	428b      	cmp	r3, r1
 8005a06:	d819      	bhi.n	8005a3c <HAL_I2C_Init+0x13c>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	1e59      	subs	r1, r3, #1
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a16:	1c59      	adds	r1, r3, #1
 8005a18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005a1c:	400b      	ands	r3, r1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00a      	beq.n	8005a38 <HAL_I2C_Init+0x138>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	1e59      	subs	r1, r3, #1
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a30:	3301      	adds	r3, #1
 8005a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a36:	e051      	b.n	8005adc <HAL_I2C_Init+0x1dc>
 8005a38:	2304      	movs	r3, #4
 8005a3a:	e04f      	b.n	8005adc <HAL_I2C_Init+0x1dc>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d111      	bne.n	8005a68 <HAL_I2C_Init+0x168>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	1e58      	subs	r0, r3, #1
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6859      	ldr	r1, [r3, #4]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	440b      	add	r3, r1
 8005a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a56:	3301      	adds	r3, #1
 8005a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	bf0c      	ite	eq
 8005a60:	2301      	moveq	r3, #1
 8005a62:	2300      	movne	r3, #0
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	e012      	b.n	8005a8e <HAL_I2C_Init+0x18e>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	1e58      	subs	r0, r3, #1
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6859      	ldr	r1, [r3, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	440b      	add	r3, r1
 8005a76:	0099      	lsls	r1, r3, #2
 8005a78:	440b      	add	r3, r1
 8005a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a7e:	3301      	adds	r3, #1
 8005a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	bf0c      	ite	eq
 8005a88:	2301      	moveq	r3, #1
 8005a8a:	2300      	movne	r3, #0
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <HAL_I2C_Init+0x196>
 8005a92:	2301      	movs	r3, #1
 8005a94:	e022      	b.n	8005adc <HAL_I2C_Init+0x1dc>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10e      	bne.n	8005abc <HAL_I2C_Init+0x1bc>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	1e58      	subs	r0, r3, #1
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6859      	ldr	r1, [r3, #4]
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	440b      	add	r3, r1
 8005aac:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aba:	e00f      	b.n	8005adc <HAL_I2C_Init+0x1dc>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	1e58      	subs	r0, r3, #1
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6859      	ldr	r1, [r3, #4]
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	440b      	add	r3, r1
 8005aca:	0099      	lsls	r1, r3, #2
 8005acc:	440b      	add	r3, r1
 8005ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ad8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005adc:	6879      	ldr	r1, [r7, #4]
 8005ade:	6809      	ldr	r1, [r1, #0]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69da      	ldr	r2, [r3, #28]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	431a      	orrs	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005b0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	6911      	ldr	r1, [r2, #16]
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	68d2      	ldr	r2, [r2, #12]
 8005b16:	4311      	orrs	r1, r2
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6812      	ldr	r2, [r2, #0]
 8005b1c:	430b      	orrs	r3, r1
 8005b1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	695a      	ldr	r2, [r3, #20]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0201 	orr.w	r2, r2, #1
 8005b4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	000186a0 	.word	0x000186a0
 8005b78:	001e847f 	.word	0x001e847f
 8005b7c:	003d08ff 	.word	0x003d08ff
 8005b80:	431bde83 	.word	0x431bde83
 8005b84:	10624dd3 	.word	0x10624dd3

08005b88 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af02      	add	r7, sp, #8
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	607a      	str	r2, [r7, #4]
 8005b92:	461a      	mov	r2, r3
 8005b94:	460b      	mov	r3, r1
 8005b96:	817b      	strh	r3, [r7, #10]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b9c:	f7fd fe22 	bl	80037e4 <HAL_GetTick>
 8005ba0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b20      	cmp	r3, #32
 8005bac:	f040 80e0 	bne.w	8005d70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	2319      	movs	r3, #25
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	4970      	ldr	r1, [pc, #448]	; (8005d7c <HAL_I2C_Master_Transmit+0x1f4>)
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 fe02 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e0d3      	b.n	8005d72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d101      	bne.n	8005bd8 <HAL_I2C_Master_Transmit+0x50>
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	e0cc      	b.n	8005d72 <HAL_I2C_Master_Transmit+0x1ea>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d007      	beq.n	8005bfe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0201 	orr.w	r2, r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2221      	movs	r2, #33	; 0x21
 8005c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2210      	movs	r2, #16
 8005c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	893a      	ldrh	r2, [r7, #8]
 8005c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	4a50      	ldr	r2, [pc, #320]	; (8005d80 <HAL_I2C_Master_Transmit+0x1f8>)
 8005c3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005c40:	8979      	ldrh	r1, [r7, #10]
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	6a3a      	ldr	r2, [r7, #32]
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 fbbc 	bl	80063c4 <I2C_MasterRequestWrite>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e08d      	b.n	8005d72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c56:	2300      	movs	r3, #0
 8005c58:	613b      	str	r3, [r7, #16]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	613b      	str	r3, [r7, #16]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	613b      	str	r3, [r7, #16]
 8005c6a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005c6c:	e066      	b.n	8005d3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	6a39      	ldr	r1, [r7, #32]
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 fe7c 	bl	8006970 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00d      	beq.n	8005c9a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d107      	bne.n	8005c96 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e06b      	b.n	8005d72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	781a      	ldrb	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b04      	cmp	r3, #4
 8005cd6:	d11b      	bne.n	8005d10 <HAL_I2C_Master_Transmit+0x188>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d017      	beq.n	8005d10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	781a      	ldrb	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	1c5a      	adds	r2, r3, #1
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	6a39      	ldr	r1, [r7, #32]
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 fe6c 	bl	80069f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00d      	beq.n	8005d3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d24:	2b04      	cmp	r3, #4
 8005d26:	d107      	bne.n	8005d38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e01a      	b.n	8005d72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d194      	bne.n	8005c6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2220      	movs	r2, #32
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	e000      	b.n	8005d72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005d70:	2302      	movs	r3, #2
  }
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3718      	adds	r7, #24
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	00100002 	.word	0x00100002
 8005d80:	ffff0000 	.word	0xffff0000

08005d84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b088      	sub	sp, #32
 8005d88:	af02      	add	r7, sp, #8
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	4608      	mov	r0, r1
 8005d8e:	4611      	mov	r1, r2
 8005d90:	461a      	mov	r2, r3
 8005d92:	4603      	mov	r3, r0
 8005d94:	817b      	strh	r3, [r7, #10]
 8005d96:	460b      	mov	r3, r1
 8005d98:	813b      	strh	r3, [r7, #8]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d9e:	f7fd fd21 	bl	80037e4 <HAL_GetTick>
 8005da2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b20      	cmp	r3, #32
 8005dae:	f040 80d9 	bne.w	8005f64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	2319      	movs	r3, #25
 8005db8:	2201      	movs	r2, #1
 8005dba:	496d      	ldr	r1, [pc, #436]	; (8005f70 <HAL_I2C_Mem_Write+0x1ec>)
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f000 fd01 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e0cc      	b.n	8005f66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d101      	bne.n	8005dda <HAL_I2C_Mem_Write+0x56>
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	e0c5      	b.n	8005f66 <HAL_I2C_Mem_Write+0x1e2>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d007      	beq.n	8005e00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0201 	orr.w	r2, r2, #1
 8005dfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2221      	movs	r2, #33	; 0x21
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2240      	movs	r2, #64	; 0x40
 8005e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a3a      	ldr	r2, [r7, #32]
 8005e2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4a4d      	ldr	r2, [pc, #308]	; (8005f74 <HAL_I2C_Mem_Write+0x1f0>)
 8005e40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e42:	88f8      	ldrh	r0, [r7, #6]
 8005e44:	893a      	ldrh	r2, [r7, #8]
 8005e46:	8979      	ldrh	r1, [r7, #10]
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	9301      	str	r3, [sp, #4]
 8005e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	4603      	mov	r3, r0
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 fb38 	bl	80064c8 <I2C_RequestMemoryWrite>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d052      	beq.n	8005f04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e081      	b.n	8005f66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 fd82 	bl	8006970 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00d      	beq.n	8005e8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	d107      	bne.n	8005e8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e06b      	b.n	8005f66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	781a      	ldrb	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	1c5a      	adds	r2, r3, #1
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	695b      	ldr	r3, [r3, #20]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d11b      	bne.n	8005f04 <HAL_I2C_Mem_Write+0x180>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d017      	beq.n	8005f04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	781a      	ldrb	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	1c5a      	adds	r2, r3, #1
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	3b01      	subs	r3, #1
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1aa      	bne.n	8005e62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f000 fd6e 	bl	80069f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00d      	beq.n	8005f38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d107      	bne.n	8005f34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e016      	b.n	8005f66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f60:	2300      	movs	r3, #0
 8005f62:	e000      	b.n	8005f66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005f64:	2302      	movs	r3, #2
  }
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	00100002 	.word	0x00100002
 8005f74:	ffff0000 	.word	0xffff0000

08005f78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08c      	sub	sp, #48	; 0x30
 8005f7c:	af02      	add	r7, sp, #8
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	4608      	mov	r0, r1
 8005f82:	4611      	mov	r1, r2
 8005f84:	461a      	mov	r2, r3
 8005f86:	4603      	mov	r3, r0
 8005f88:	817b      	strh	r3, [r7, #10]
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	813b      	strh	r3, [r7, #8]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f92:	f7fd fc27 	bl	80037e4 <HAL_GetTick>
 8005f96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	f040 8208 	bne.w	80063b6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	2319      	movs	r3, #25
 8005fac:	2201      	movs	r2, #1
 8005fae:	497b      	ldr	r1, [pc, #492]	; (800619c <HAL_I2C_Mem_Read+0x224>)
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 fc07 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	e1fb      	b.n	80063b8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d101      	bne.n	8005fce <HAL_I2C_Mem_Read+0x56>
 8005fca:	2302      	movs	r3, #2
 8005fcc:	e1f4      	b.n	80063b8 <HAL_I2C_Mem_Read+0x440>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d007      	beq.n	8005ff4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f042 0201 	orr.w	r2, r2, #1
 8005ff2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006002:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2222      	movs	r2, #34	; 0x22
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2240      	movs	r2, #64	; 0x40
 8006010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800601e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006024:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800602a:	b29a      	uxth	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4a5b      	ldr	r2, [pc, #364]	; (80061a0 <HAL_I2C_Mem_Read+0x228>)
 8006034:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006036:	88f8      	ldrh	r0, [r7, #6]
 8006038:	893a      	ldrh	r2, [r7, #8]
 800603a:	8979      	ldrh	r1, [r7, #10]
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603e:	9301      	str	r3, [sp, #4]
 8006040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	4603      	mov	r3, r0
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 fad4 	bl	80065f4 <I2C_RequestMemoryRead>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e1b0      	b.n	80063b8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800605a:	2b00      	cmp	r3, #0
 800605c:	d113      	bne.n	8006086 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800605e:	2300      	movs	r3, #0
 8006060:	623b      	str	r3, [r7, #32]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	623b      	str	r3, [r7, #32]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	623b      	str	r3, [r7, #32]
 8006072:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	e184      	b.n	8006390 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800608a:	2b01      	cmp	r3, #1
 800608c:	d11b      	bne.n	80060c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800609c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800609e:	2300      	movs	r3, #0
 80060a0:	61fb      	str	r3, [r7, #28]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	61fb      	str	r3, [r7, #28]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	61fb      	str	r3, [r7, #28]
 80060b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	e164      	b.n	8006390 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d11b      	bne.n	8006106 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ee:	2300      	movs	r3, #0
 80060f0:	61bb      	str	r3, [r7, #24]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	61bb      	str	r3, [r7, #24]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	61bb      	str	r3, [r7, #24]
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	e144      	b.n	8006390 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006106:	2300      	movs	r3, #0
 8006108:	617b      	str	r3, [r7, #20]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	617b      	str	r3, [r7, #20]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	617b      	str	r3, [r7, #20]
 800611a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800611c:	e138      	b.n	8006390 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006122:	2b03      	cmp	r3, #3
 8006124:	f200 80f1 	bhi.w	800630a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800612c:	2b01      	cmp	r3, #1
 800612e:	d123      	bne.n	8006178 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006132:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 fc9d 	bl	8006a74 <I2C_WaitOnRXNEFlagUntilTimeout>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e139      	b.n	80063b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	691a      	ldr	r2, [r3, #16]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614e:	b2d2      	uxtb	r2, r2
 8006150:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006160:	3b01      	subs	r3, #1
 8006162:	b29a      	uxth	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616c:	b29b      	uxth	r3, r3
 800616e:	3b01      	subs	r3, #1
 8006170:	b29a      	uxth	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006176:	e10b      	b.n	8006390 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800617c:	2b02      	cmp	r3, #2
 800617e:	d14e      	bne.n	800621e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006186:	2200      	movs	r2, #0
 8006188:	4906      	ldr	r1, [pc, #24]	; (80061a4 <HAL_I2C_Mem_Read+0x22c>)
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 fb1a 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d008      	beq.n	80061a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e10e      	b.n	80063b8 <HAL_I2C_Mem_Read+0x440>
 800619a:	bf00      	nop
 800619c:	00100002 	.word	0x00100002
 80061a0:	ffff0000 	.word	0xffff0000
 80061a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	691a      	ldr	r2, [r3, #16]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c2:	b2d2      	uxtb	r2, r2
 80061c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	1c5a      	adds	r2, r3, #1
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d4:	3b01      	subs	r3, #1
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	3b01      	subs	r3, #1
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	691a      	ldr	r2, [r3, #16]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	b2d2      	uxtb	r2, r2
 80061f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006206:	3b01      	subs	r3, #1
 8006208:	b29a      	uxth	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006212:	b29b      	uxth	r3, r3
 8006214:	3b01      	subs	r3, #1
 8006216:	b29a      	uxth	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800621c:	e0b8      	b.n	8006390 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006224:	2200      	movs	r2, #0
 8006226:	4966      	ldr	r1, [pc, #408]	; (80063c0 <HAL_I2C_Mem_Read+0x448>)
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f000 facb 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d001      	beq.n	8006238 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e0bf      	b.n	80063b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	691a      	ldr	r2, [r3, #16]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006264:	3b01      	subs	r3, #1
 8006266:	b29a      	uxth	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006270:	b29b      	uxth	r3, r3
 8006272:	3b01      	subs	r3, #1
 8006274:	b29a      	uxth	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006280:	2200      	movs	r2, #0
 8006282:	494f      	ldr	r1, [pc, #316]	; (80063c0 <HAL_I2C_Mem_Read+0x448>)
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f000 fa9d 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e091      	b.n	80063b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	691a      	ldr	r2, [r3, #16]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	b2d2      	uxtb	r2, r2
 80062b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b6:	1c5a      	adds	r2, r3, #1
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c0:	3b01      	subs	r3, #1
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	3b01      	subs	r3, #1
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	691a      	ldr	r2, [r3, #16]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f2:	3b01      	subs	r3, #1
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062fe:	b29b      	uxth	r3, r3
 8006300:	3b01      	subs	r3, #1
 8006302:	b29a      	uxth	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006308:	e042      	b.n	8006390 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800630a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800630c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f000 fbb0 	bl	8006a74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d001      	beq.n	800631e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e04c      	b.n	80063b8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	691a      	ldr	r2, [r3, #16]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800633a:	3b01      	subs	r3, #1
 800633c:	b29a      	uxth	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006346:	b29b      	uxth	r3, r3
 8006348:	3b01      	subs	r3, #1
 800634a:	b29a      	uxth	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	f003 0304 	and.w	r3, r3, #4
 800635a:	2b04      	cmp	r3, #4
 800635c:	d118      	bne.n	8006390 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	691a      	ldr	r2, [r3, #16]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	b2d2      	uxtb	r2, r2
 800636a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800637a:	3b01      	subs	r3, #1
 800637c:	b29a      	uxth	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006386:	b29b      	uxth	r3, r3
 8006388:	3b01      	subs	r3, #1
 800638a:	b29a      	uxth	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006394:	2b00      	cmp	r3, #0
 8006396:	f47f aec2 	bne.w	800611e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2220      	movs	r2, #32
 800639e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	e000      	b.n	80063b8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80063b6:	2302      	movs	r3, #2
  }
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3728      	adds	r7, #40	; 0x28
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	00010004 	.word	0x00010004

080063c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b088      	sub	sp, #32
 80063c8:	af02      	add	r7, sp, #8
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	607a      	str	r2, [r7, #4]
 80063ce:	603b      	str	r3, [r7, #0]
 80063d0:	460b      	mov	r3, r1
 80063d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	2b08      	cmp	r3, #8
 80063de:	d006      	beq.n	80063ee <I2C_MasterRequestWrite+0x2a>
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d003      	beq.n	80063ee <I2C_MasterRequestWrite+0x2a>
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063ec:	d108      	bne.n	8006400 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	e00b      	b.n	8006418 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006404:	2b12      	cmp	r3, #18
 8006406:	d107      	bne.n	8006418 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006416:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 f9cd 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00d      	beq.n	800644c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800643a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800643e:	d103      	bne.n	8006448 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006446:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e035      	b.n	80064b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006454:	d108      	bne.n	8006468 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006456:	897b      	ldrh	r3, [r7, #10]
 8006458:	b2db      	uxtb	r3, r3
 800645a:	461a      	mov	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006464:	611a      	str	r2, [r3, #16]
 8006466:	e01b      	b.n	80064a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006468:	897b      	ldrh	r3, [r7, #10]
 800646a:	11db      	asrs	r3, r3, #7
 800646c:	b2db      	uxtb	r3, r3
 800646e:	f003 0306 	and.w	r3, r3, #6
 8006472:	b2db      	uxtb	r3, r3
 8006474:	f063 030f 	orn	r3, r3, #15
 8006478:	b2da      	uxtb	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	490e      	ldr	r1, [pc, #56]	; (80064c0 <I2C_MasterRequestWrite+0xfc>)
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 f9f3 	bl	8006872 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e010      	b.n	80064b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006496:	897b      	ldrh	r3, [r7, #10]
 8006498:	b2da      	uxtb	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	4907      	ldr	r1, [pc, #28]	; (80064c4 <I2C_MasterRequestWrite+0x100>)
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f000 f9e3 	bl	8006872 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e000      	b.n	80064b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3718      	adds	r7, #24
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	00010008 	.word	0x00010008
 80064c4:	00010002 	.word	0x00010002

080064c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b088      	sub	sp, #32
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	4608      	mov	r0, r1
 80064d2:	4611      	mov	r1, r2
 80064d4:	461a      	mov	r2, r3
 80064d6:	4603      	mov	r3, r0
 80064d8:	817b      	strh	r3, [r7, #10]
 80064da:	460b      	mov	r3, r1
 80064dc:	813b      	strh	r3, [r7, #8]
 80064de:	4613      	mov	r3, r2
 80064e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f000 f960 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00d      	beq.n	8006526 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006518:	d103      	bne.n	8006522 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006520:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e05f      	b.n	80065e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006526:	897b      	ldrh	r3, [r7, #10]
 8006528:	b2db      	uxtb	r3, r3
 800652a:	461a      	mov	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006534:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	6a3a      	ldr	r2, [r7, #32]
 800653a:	492d      	ldr	r1, [pc, #180]	; (80065f0 <I2C_RequestMemoryWrite+0x128>)
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 f998 	bl	8006872 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e04c      	b.n	80065e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800654c:	2300      	movs	r3, #0
 800654e:	617b      	str	r3, [r7, #20]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	617b      	str	r3, [r7, #20]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006564:	6a39      	ldr	r1, [r7, #32]
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 fa02 	bl	8006970 <I2C_WaitOnTXEFlagUntilTimeout>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00d      	beq.n	800658e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006576:	2b04      	cmp	r3, #4
 8006578:	d107      	bne.n	800658a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006588:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e02b      	b.n	80065e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800658e:	88fb      	ldrh	r3, [r7, #6]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d105      	bne.n	80065a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006594:	893b      	ldrh	r3, [r7, #8]
 8006596:	b2da      	uxtb	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	611a      	str	r2, [r3, #16]
 800659e:	e021      	b.n	80065e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80065a0:	893b      	ldrh	r3, [r7, #8]
 80065a2:	0a1b      	lsrs	r3, r3, #8
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065b0:	6a39      	ldr	r1, [r7, #32]
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 f9dc 	bl	8006970 <I2C_WaitOnTXEFlagUntilTimeout>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00d      	beq.n	80065da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	d107      	bne.n	80065d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e005      	b.n	80065e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065da:	893b      	ldrh	r3, [r7, #8]
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3718      	adds	r7, #24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	00010002 	.word	0x00010002

080065f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b088      	sub	sp, #32
 80065f8:	af02      	add	r7, sp, #8
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	4608      	mov	r0, r1
 80065fe:	4611      	mov	r1, r2
 8006600:	461a      	mov	r2, r3
 8006602:	4603      	mov	r3, r0
 8006604:	817b      	strh	r3, [r7, #10]
 8006606:	460b      	mov	r3, r1
 8006608:	813b      	strh	r3, [r7, #8]
 800660a:	4613      	mov	r3, r2
 800660c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800661c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800662c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	9300      	str	r3, [sp, #0]
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	2200      	movs	r2, #0
 8006636:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 f8c2 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00d      	beq.n	8006662 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006654:	d103      	bne.n	800665e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800665c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e0aa      	b.n	80067b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006662:	897b      	ldrh	r3, [r7, #10]
 8006664:	b2db      	uxtb	r3, r3
 8006666:	461a      	mov	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006670:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	6a3a      	ldr	r2, [r7, #32]
 8006676:	4952      	ldr	r1, [pc, #328]	; (80067c0 <I2C_RequestMemoryRead+0x1cc>)
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 f8fa 	bl	8006872 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e097      	b.n	80067b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006688:	2300      	movs	r3, #0
 800668a:	617b      	str	r3, [r7, #20]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	617b      	str	r3, [r7, #20]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800669e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066a0:	6a39      	ldr	r1, [r7, #32]
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f000 f964 	bl	8006970 <I2C_WaitOnTXEFlagUntilTimeout>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00d      	beq.n	80066ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	2b04      	cmp	r3, #4
 80066b4:	d107      	bne.n	80066c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e076      	b.n	80067b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066ca:	88fb      	ldrh	r3, [r7, #6]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d105      	bne.n	80066dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066d0:	893b      	ldrh	r3, [r7, #8]
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	611a      	str	r2, [r3, #16]
 80066da:	e021      	b.n	8006720 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80066dc:	893b      	ldrh	r3, [r7, #8]
 80066de:	0a1b      	lsrs	r3, r3, #8
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ec:	6a39      	ldr	r1, [r7, #32]
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 f93e 	bl	8006970 <I2C_WaitOnTXEFlagUntilTimeout>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00d      	beq.n	8006716 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fe:	2b04      	cmp	r3, #4
 8006700:	d107      	bne.n	8006712 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006710:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e050      	b.n	80067b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006716:	893b      	ldrh	r3, [r7, #8]
 8006718:	b2da      	uxtb	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006722:	6a39      	ldr	r1, [r7, #32]
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 f923 	bl	8006970 <I2C_WaitOnTXEFlagUntilTimeout>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00d      	beq.n	800674c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006734:	2b04      	cmp	r3, #4
 8006736:	d107      	bne.n	8006748 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006746:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e035      	b.n	80067b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800675a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	2200      	movs	r2, #0
 8006764:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 f82b 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00d      	beq.n	8006790 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800677e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006782:	d103      	bne.n	800678c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f44f 7200 	mov.w	r2, #512	; 0x200
 800678a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e013      	b.n	80067b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006790:	897b      	ldrh	r3, [r7, #10]
 8006792:	b2db      	uxtb	r3, r3
 8006794:	f043 0301 	orr.w	r3, r3, #1
 8006798:	b2da      	uxtb	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	6a3a      	ldr	r2, [r7, #32]
 80067a4:	4906      	ldr	r1, [pc, #24]	; (80067c0 <I2C_RequestMemoryRead+0x1cc>)
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 f863 	bl	8006872 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e000      	b.n	80067b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	00010002 	.word	0x00010002

080067c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	603b      	str	r3, [r7, #0]
 80067d0:	4613      	mov	r3, r2
 80067d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067d4:	e025      	b.n	8006822 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067dc:	d021      	beq.n	8006822 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067de:	f7fd f801 	bl	80037e4 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d302      	bcc.n	80067f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d116      	bne.n	8006822 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2220      	movs	r2, #32
 80067fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	f043 0220 	orr.w	r2, r3, #32
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e023      	b.n	800686a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	0c1b      	lsrs	r3, r3, #16
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b01      	cmp	r3, #1
 800682a:	d10d      	bne.n	8006848 <I2C_WaitOnFlagUntilTimeout+0x84>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	43da      	mvns	r2, r3
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	4013      	ands	r3, r2
 8006838:	b29b      	uxth	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	bf0c      	ite	eq
 800683e:	2301      	moveq	r3, #1
 8006840:	2300      	movne	r3, #0
 8006842:	b2db      	uxtb	r3, r3
 8006844:	461a      	mov	r2, r3
 8006846:	e00c      	b.n	8006862 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	43da      	mvns	r2, r3
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	4013      	ands	r3, r2
 8006854:	b29b      	uxth	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	bf0c      	ite	eq
 800685a:	2301      	moveq	r3, #1
 800685c:	2300      	movne	r3, #0
 800685e:	b2db      	uxtb	r3, r3
 8006860:	461a      	mov	r2, r3
 8006862:	79fb      	ldrb	r3, [r7, #7]
 8006864:	429a      	cmp	r2, r3
 8006866:	d0b6      	beq.n	80067d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	60f8      	str	r0, [r7, #12]
 800687a:	60b9      	str	r1, [r7, #8]
 800687c:	607a      	str	r2, [r7, #4]
 800687e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006880:	e051      	b.n	8006926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800688c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006890:	d123      	bne.n	80068da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80068aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2220      	movs	r2, #32
 80068b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	f043 0204 	orr.w	r2, r3, #4
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e046      	b.n	8006968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068e0:	d021      	beq.n	8006926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068e2:	f7fc ff7f 	bl	80037e4 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d302      	bcc.n	80068f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d116      	bne.n	8006926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2220      	movs	r2, #32
 8006902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	f043 0220 	orr.w	r2, r3, #32
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e020      	b.n	8006968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	0c1b      	lsrs	r3, r3, #16
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b01      	cmp	r3, #1
 800692e:	d10c      	bne.n	800694a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	43da      	mvns	r2, r3
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	4013      	ands	r3, r2
 800693c:	b29b      	uxth	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	bf14      	ite	ne
 8006942:	2301      	movne	r3, #1
 8006944:	2300      	moveq	r3, #0
 8006946:	b2db      	uxtb	r3, r3
 8006948:	e00b      	b.n	8006962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	43da      	mvns	r2, r3
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	4013      	ands	r3, r2
 8006956:	b29b      	uxth	r3, r3
 8006958:	2b00      	cmp	r3, #0
 800695a:	bf14      	ite	ne
 800695c:	2301      	movne	r3, #1
 800695e:	2300      	moveq	r3, #0
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d18d      	bne.n	8006882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800697c:	e02d      	b.n	80069da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 f8ce 	bl	8006b20 <I2C_IsAcknowledgeFailed>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e02d      	b.n	80069ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006994:	d021      	beq.n	80069da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006996:	f7fc ff25 	bl	80037e4 <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d302      	bcc.n	80069ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d116      	bne.n	80069da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2220      	movs	r2, #32
 80069b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c6:	f043 0220 	orr.w	r2, r3, #32
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e007      	b.n	80069ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e4:	2b80      	cmp	r3, #128	; 0x80
 80069e6:	d1ca      	bne.n	800697e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b084      	sub	sp, #16
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	60f8      	str	r0, [r7, #12]
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069fe:	e02d      	b.n	8006a5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 f88d 	bl	8006b20 <I2C_IsAcknowledgeFailed>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e02d      	b.n	8006a6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a16:	d021      	beq.n	8006a5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a18:	f7fc fee4 	bl	80037e4 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d302      	bcc.n	8006a2e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d116      	bne.n	8006a5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2220      	movs	r2, #32
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a48:	f043 0220 	orr.w	r2, r3, #32
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e007      	b.n	8006a6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	f003 0304 	and.w	r3, r3, #4
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d1ca      	bne.n	8006a00 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a80:	e042      	b.n	8006b08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	f003 0310 	and.w	r3, r3, #16
 8006a8c:	2b10      	cmp	r3, #16
 8006a8e:	d119      	bne.n	8006ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f06f 0210 	mvn.w	r2, #16
 8006a98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e029      	b.n	8006b18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ac4:	f7fc fe8e 	bl	80037e4 <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d302      	bcc.n	8006ada <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d116      	bne.n	8006b08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af4:	f043 0220 	orr.w	r2, r3, #32
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e007      	b.n	8006b18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b12:	2b40      	cmp	r3, #64	; 0x40
 8006b14:	d1b5      	bne.n	8006a82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b36:	d11b      	bne.n	8006b70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5c:	f043 0204 	orr.w	r2, r3, #4
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e000      	b.n	8006b72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
	...

08006b80 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b088      	sub	sp, #32
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e128      	b.n	8006de4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d109      	bne.n	8006bb2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a90      	ldr	r2, [pc, #576]	; (8006dec <HAL_I2S_Init+0x26c>)
 8006baa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f7fb f8ab 	bl	8001d08 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	6812      	ldr	r2, [r2, #0]
 8006bc4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006bc8:	f023 030f 	bic.w	r3, r3, #15
 8006bcc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d060      	beq.n	8006ca0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d102      	bne.n	8006bec <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006be6:	2310      	movs	r3, #16
 8006be8:	617b      	str	r3, [r7, #20]
 8006bea:	e001      	b.n	8006bf0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006bec:	2320      	movs	r3, #32
 8006bee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	2b20      	cmp	r3, #32
 8006bf6:	d802      	bhi.n	8006bfe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	005b      	lsls	r3, r3, #1
 8006bfc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006bfe:	2001      	movs	r0, #1
 8006c00:	f001 f9a0 	bl	8007f44 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c04:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c0e:	d125      	bne.n	8006c5c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d010      	beq.n	8006c3a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c22:	4613      	mov	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4413      	add	r3, r2
 8006c28:	005b      	lsls	r3, r3, #1
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c34:	3305      	adds	r3, #5
 8006c36:	613b      	str	r3, [r7, #16]
 8006c38:	e01f      	b.n	8006c7a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	00db      	lsls	r3, r3, #3
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c44:	4613      	mov	r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	005b      	lsls	r3, r3, #1
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c56:	3305      	adds	r3, #5
 8006c58:	613b      	str	r3, [r7, #16]
 8006c5a:	e00e      	b.n	8006c7a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c64:	4613      	mov	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	005b      	lsls	r3, r3, #1
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c76:	3305      	adds	r3, #5
 8006c78:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	4a5c      	ldr	r2, [pc, #368]	; (8006df0 <HAL_I2S_Init+0x270>)
 8006c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c82:	08db      	lsrs	r3, r3, #3
 8006c84:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	085b      	lsrs	r3, r3, #1
 8006c96:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	021b      	lsls	r3, r3, #8
 8006c9c:	61bb      	str	r3, [r7, #24]
 8006c9e:	e003      	b.n	8006ca8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d902      	bls.n	8006cb4 <HAL_I2S_Init+0x134>
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	2bff      	cmp	r3, #255	; 0xff
 8006cb2:	d907      	bls.n	8006cc4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb8:	f043 0210 	orr.w	r2, r3, #16
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e08f      	b.n	8006de4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	691a      	ldr	r2, [r3, #16]
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	ea42 0103 	orr.w	r1, r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	69fa      	ldr	r2, [r7, #28]
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006ce2:	f023 030f 	bic.w	r3, r3, #15
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	6851      	ldr	r1, [r2, #4]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	6892      	ldr	r2, [r2, #8]
 8006cee:	4311      	orrs	r1, r2
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	68d2      	ldr	r2, [r2, #12]
 8006cf4:	4311      	orrs	r1, r2
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	6992      	ldr	r2, [r2, #24]
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	431a      	orrs	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d06:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d161      	bne.n	8006dd4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a38      	ldr	r2, [pc, #224]	; (8006df4 <HAL_I2S_Init+0x274>)
 8006d14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a37      	ldr	r2, [pc, #220]	; (8006df8 <HAL_I2S_Init+0x278>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d101      	bne.n	8006d24 <HAL_I2S_Init+0x1a4>
 8006d20:	4b36      	ldr	r3, [pc, #216]	; (8006dfc <HAL_I2S_Init+0x27c>)
 8006d22:	e001      	b.n	8006d28 <HAL_I2S_Init+0x1a8>
 8006d24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	6812      	ldr	r2, [r2, #0]
 8006d2e:	4932      	ldr	r1, [pc, #200]	; (8006df8 <HAL_I2S_Init+0x278>)
 8006d30:	428a      	cmp	r2, r1
 8006d32:	d101      	bne.n	8006d38 <HAL_I2S_Init+0x1b8>
 8006d34:	4a31      	ldr	r2, [pc, #196]	; (8006dfc <HAL_I2S_Init+0x27c>)
 8006d36:	e001      	b.n	8006d3c <HAL_I2S_Init+0x1bc>
 8006d38:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006d3c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006d40:	f023 030f 	bic.w	r3, r3, #15
 8006d44:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a2b      	ldr	r2, [pc, #172]	; (8006df8 <HAL_I2S_Init+0x278>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d101      	bne.n	8006d54 <HAL_I2S_Init+0x1d4>
 8006d50:	4b2a      	ldr	r3, [pc, #168]	; (8006dfc <HAL_I2S_Init+0x27c>)
 8006d52:	e001      	b.n	8006d58 <HAL_I2S_Init+0x1d8>
 8006d54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d58:	2202      	movs	r2, #2
 8006d5a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a25      	ldr	r2, [pc, #148]	; (8006df8 <HAL_I2S_Init+0x278>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d101      	bne.n	8006d6a <HAL_I2S_Init+0x1ea>
 8006d66:	4b25      	ldr	r3, [pc, #148]	; (8006dfc <HAL_I2S_Init+0x27c>)
 8006d68:	e001      	b.n	8006d6e <HAL_I2S_Init+0x1ee>
 8006d6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d6e:	69db      	ldr	r3, [r3, #28]
 8006d70:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d7a:	d003      	beq.n	8006d84 <HAL_I2S_Init+0x204>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d103      	bne.n	8006d8c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006d84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d88:	613b      	str	r3, [r7, #16]
 8006d8a:	e001      	b.n	8006d90 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006da4:	4313      	orrs	r3, r2
 8006da6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006dae:	4313      	orrs	r3, r2
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	897b      	ldrh	r3, [r7, #10]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006dbc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a0d      	ldr	r2, [pc, #52]	; (8006df8 <HAL_I2S_Init+0x278>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d101      	bne.n	8006dcc <HAL_I2S_Init+0x24c>
 8006dc8:	4b0c      	ldr	r3, [pc, #48]	; (8006dfc <HAL_I2S_Init+0x27c>)
 8006dca:	e001      	b.n	8006dd0 <HAL_I2S_Init+0x250>
 8006dcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006dd0:	897a      	ldrh	r2, [r7, #10]
 8006dd2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3720      	adds	r7, #32
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	08006ef7 	.word	0x08006ef7
 8006df0:	cccccccd 	.word	0xcccccccd
 8006df4:	0800700d 	.word	0x0800700d
 8006df8:	40003800 	.word	0x40003800
 8006dfc:	40003400 	.word	0x40003400

08006e00 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e48:	881a      	ldrh	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e54:	1c9a      	adds	r2, r3, #2
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	3b01      	subs	r3, #1
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10e      	bne.n	8006e90 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006e80:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7ff ffb8 	bl	8006e00 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006e90:	bf00      	nop
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68da      	ldr	r2, [r3, #12]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eaa:	b292      	uxth	r2, r2
 8006eac:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb2:	1c9a      	adds	r2, r3, #2
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10e      	bne.n	8006eee <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006ede:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f7ff ff93 	bl	8006e14 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006eee:	bf00      	nop
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b086      	sub	sp, #24
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b04      	cmp	r3, #4
 8006f10:	d13a      	bne.n	8006f88 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f003 0301 	and.w	r3, r3, #1
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d109      	bne.n	8006f30 <I2S_IRQHandler+0x3a>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f26:	2b40      	cmp	r3, #64	; 0x40
 8006f28:	d102      	bne.n	8006f30 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7ff ffb4 	bl	8006e98 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f36:	2b40      	cmp	r3, #64	; 0x40
 8006f38:	d126      	bne.n	8006f88 <I2S_IRQHandler+0x92>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	f003 0320 	and.w	r3, r3, #32
 8006f44:	2b20      	cmp	r3, #32
 8006f46:	d11f      	bne.n	8006f88 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f56:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006f58:	2300      	movs	r3, #0
 8006f5a:	613b      	str	r3, [r7, #16]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	613b      	str	r3, [r7, #16]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	613b      	str	r3, [r7, #16]
 8006f6c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7a:	f043 0202 	orr.w	r2, r3, #2
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7ff ff50 	bl	8006e28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b03      	cmp	r3, #3
 8006f92:	d136      	bne.n	8007002 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d109      	bne.n	8006fb2 <I2S_IRQHandler+0xbc>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa8:	2b80      	cmp	r3, #128	; 0x80
 8006faa:	d102      	bne.n	8006fb2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7ff ff45 	bl	8006e3c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	f003 0308 	and.w	r3, r3, #8
 8006fb8:	2b08      	cmp	r3, #8
 8006fba:	d122      	bne.n	8007002 <I2S_IRQHandler+0x10c>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f003 0320 	and.w	r3, r3, #32
 8006fc6:	2b20      	cmp	r3, #32
 8006fc8:	d11b      	bne.n	8007002 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006fd8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006fda:	2300      	movs	r3, #0
 8006fdc:	60fb      	str	r3, [r7, #12]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	60fb      	str	r3, [r7, #12]
 8006fe6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff4:	f043 0204 	orr.w	r2, r3, #4
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f7ff ff13 	bl	8006e28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007002:	bf00      	nop
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
	...

0800700c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b088      	sub	sp, #32
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4aa2      	ldr	r2, [pc, #648]	; (80072ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d101      	bne.n	800702a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8007026:	4ba2      	ldr	r3, [pc, #648]	; (80072b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007028:	e001      	b.n	800702e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800702a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a9b      	ldr	r2, [pc, #620]	; (80072ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d101      	bne.n	8007048 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007044:	4b9a      	ldr	r3, [pc, #616]	; (80072b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007046:	e001      	b.n	800704c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007048:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007058:	d004      	beq.n	8007064 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	f040 8099 	bne.w	8007196 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	f003 0302 	and.w	r3, r3, #2
 800706a:	2b02      	cmp	r3, #2
 800706c:	d107      	bne.n	800707e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f925 	bl	80072c8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	2b01      	cmp	r3, #1
 8007086:	d107      	bne.n	8007098 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708e:	2b00      	cmp	r3, #0
 8007090:	d002      	beq.n	8007098 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f9c8 	bl	8007428 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709e:	2b40      	cmp	r3, #64	; 0x40
 80070a0:	d13a      	bne.n	8007118 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f003 0320 	and.w	r3, r3, #32
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d035      	beq.n	8007118 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a7e      	ldr	r2, [pc, #504]	; (80072ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d101      	bne.n	80070ba <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80070b6:	4b7e      	ldr	r3, [pc, #504]	; (80072b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80070b8:	e001      	b.n	80070be <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80070ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80070be:	685a      	ldr	r2, [r3, #4]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4979      	ldr	r1, [pc, #484]	; (80072ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80070c6:	428b      	cmp	r3, r1
 80070c8:	d101      	bne.n	80070ce <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80070ca:	4b79      	ldr	r3, [pc, #484]	; (80072b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80070cc:	e001      	b.n	80070d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80070ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80070d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80070d6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80070e6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80070e8:	2300      	movs	r3, #0
 80070ea:	60fb      	str	r3, [r7, #12]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	60fb      	str	r3, [r7, #12]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710a:	f043 0202 	orr.w	r2, r3, #2
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7ff fe88 	bl	8006e28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	f003 0308 	and.w	r3, r3, #8
 800711e:	2b08      	cmp	r3, #8
 8007120:	f040 80be 	bne.w	80072a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	f003 0320 	and.w	r3, r3, #32
 800712a:	2b00      	cmp	r3, #0
 800712c:	f000 80b8 	beq.w	80072a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	685a      	ldr	r2, [r3, #4]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800713e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a59      	ldr	r2, [pc, #356]	; (80072ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d101      	bne.n	800714e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800714a:	4b59      	ldr	r3, [pc, #356]	; (80072b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800714c:	e001      	b.n	8007152 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800714e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4954      	ldr	r1, [pc, #336]	; (80072ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800715a:	428b      	cmp	r3, r1
 800715c:	d101      	bne.n	8007162 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800715e:	4b54      	ldr	r3, [pc, #336]	; (80072b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007160:	e001      	b.n	8007166 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007162:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007166:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800716a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800716c:	2300      	movs	r3, #0
 800716e:	60bb      	str	r3, [r7, #8]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	60bb      	str	r3, [r7, #8]
 8007178:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007186:	f043 0204 	orr.w	r2, r3, #4
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7ff fe4a 	bl	8006e28 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007194:	e084      	b.n	80072a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b02      	cmp	r3, #2
 800719e:	d107      	bne.n	80071b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d002      	beq.n	80071b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f8be 	bl	800732c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	f003 0301 	and.w	r3, r3, #1
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d107      	bne.n	80071ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d002      	beq.n	80071ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f8fd 	bl	80073c4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d0:	2b40      	cmp	r3, #64	; 0x40
 80071d2:	d12f      	bne.n	8007234 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	f003 0320 	and.w	r3, r3, #32
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d02a      	beq.n	8007234 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80071ec:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a2e      	ldr	r2, [pc, #184]	; (80072ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d101      	bne.n	80071fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80071f8:	4b2d      	ldr	r3, [pc, #180]	; (80072b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80071fa:	e001      	b.n	8007200 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80071fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4929      	ldr	r1, [pc, #164]	; (80072ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007208:	428b      	cmp	r3, r1
 800720a:	d101      	bne.n	8007210 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800720c:	4b28      	ldr	r3, [pc, #160]	; (80072b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800720e:	e001      	b.n	8007214 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007210:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007214:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007218:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007226:	f043 0202 	orr.w	r2, r3, #2
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7ff fdfa 	bl	8006e28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	f003 0308 	and.w	r3, r3, #8
 800723a:	2b08      	cmp	r3, #8
 800723c:	d131      	bne.n	80072a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	f003 0320 	and.w	r3, r3, #32
 8007244:	2b00      	cmp	r3, #0
 8007246:	d02c      	beq.n	80072a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a17      	ldr	r2, [pc, #92]	; (80072ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d101      	bne.n	8007256 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007252:	4b17      	ldr	r3, [pc, #92]	; (80072b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007254:	e001      	b.n	800725a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007256:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4912      	ldr	r1, [pc, #72]	; (80072ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007262:	428b      	cmp	r3, r1
 8007264:	d101      	bne.n	800726a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8007266:	4b12      	ldr	r3, [pc, #72]	; (80072b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007268:	e001      	b.n	800726e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800726a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800726e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007272:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	685a      	ldr	r2, [r3, #4]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007282:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007290:	f043 0204 	orr.w	r2, r3, #4
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7ff fdc5 	bl	8006e28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800729e:	e000      	b.n	80072a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80072a0:	bf00      	nop
}
 80072a2:	bf00      	nop
 80072a4:	3720      	adds	r7, #32
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	40003800 	.word	0x40003800
 80072b0:	40003400 	.word	0x40003400

080072b4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	1c99      	adds	r1, r3, #2
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	6251      	str	r1, [r2, #36]	; 0x24
 80072da:	881a      	ldrh	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	3b01      	subs	r3, #1
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d113      	bne.n	8007322 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007308:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800730e:	b29b      	uxth	r3, r3
 8007310:	2b00      	cmp	r3, #0
 8007312:	d106      	bne.n	8007322 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f7ff ffc9 	bl	80072b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007322:	bf00      	nop
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
	...

0800732c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007338:	1c99      	adds	r1, r3, #2
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	6251      	str	r1, [r2, #36]	; 0x24
 800733e:	8819      	ldrh	r1, [r3, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a1d      	ldr	r2, [pc, #116]	; (80073bc <I2SEx_TxISR_I2SExt+0x90>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d101      	bne.n	800734e <I2SEx_TxISR_I2SExt+0x22>
 800734a:	4b1d      	ldr	r3, [pc, #116]	; (80073c0 <I2SEx_TxISR_I2SExt+0x94>)
 800734c:	e001      	b.n	8007352 <I2SEx_TxISR_I2SExt+0x26>
 800734e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007352:	460a      	mov	r2, r1
 8007354:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800735a:	b29b      	uxth	r3, r3
 800735c:	3b01      	subs	r3, #1
 800735e:	b29a      	uxth	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007368:	b29b      	uxth	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d121      	bne.n	80073b2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a12      	ldr	r2, [pc, #72]	; (80073bc <I2SEx_TxISR_I2SExt+0x90>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d101      	bne.n	800737c <I2SEx_TxISR_I2SExt+0x50>
 8007378:	4b11      	ldr	r3, [pc, #68]	; (80073c0 <I2SEx_TxISR_I2SExt+0x94>)
 800737a:	e001      	b.n	8007380 <I2SEx_TxISR_I2SExt+0x54>
 800737c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	490d      	ldr	r1, [pc, #52]	; (80073bc <I2SEx_TxISR_I2SExt+0x90>)
 8007388:	428b      	cmp	r3, r1
 800738a:	d101      	bne.n	8007390 <I2SEx_TxISR_I2SExt+0x64>
 800738c:	4b0c      	ldr	r3, [pc, #48]	; (80073c0 <I2SEx_TxISR_I2SExt+0x94>)
 800738e:	e001      	b.n	8007394 <I2SEx_TxISR_I2SExt+0x68>
 8007390:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007394:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007398:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800739e:	b29b      	uxth	r3, r3
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d106      	bne.n	80073b2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f7ff ff81 	bl	80072b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80073b2:	bf00      	nop
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	40003800 	.word	0x40003800
 80073c0:	40003400 	.word	0x40003400

080073c4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68d8      	ldr	r0, [r3, #12]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d6:	1c99      	adds	r1, r3, #2
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	62d1      	str	r1, [r2, #44]	; 0x2c
 80073dc:	b282      	uxth	r2, r0
 80073de:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	3b01      	subs	r3, #1
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d113      	bne.n	8007420 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007406:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800740c:	b29b      	uxth	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d106      	bne.n	8007420 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7ff ff4a 	bl	80072b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007420:	bf00      	nop
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a20      	ldr	r2, [pc, #128]	; (80074b8 <I2SEx_RxISR_I2SExt+0x90>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d101      	bne.n	800743e <I2SEx_RxISR_I2SExt+0x16>
 800743a:	4b20      	ldr	r3, [pc, #128]	; (80074bc <I2SEx_RxISR_I2SExt+0x94>)
 800743c:	e001      	b.n	8007442 <I2SEx_RxISR_I2SExt+0x1a>
 800743e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007442:	68d8      	ldr	r0, [r3, #12]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007448:	1c99      	adds	r1, r3, #2
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800744e:	b282      	uxth	r2, r0
 8007450:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007456:	b29b      	uxth	r3, r3
 8007458:	3b01      	subs	r3, #1
 800745a:	b29a      	uxth	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007464:	b29b      	uxth	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d121      	bne.n	80074ae <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a12      	ldr	r2, [pc, #72]	; (80074b8 <I2SEx_RxISR_I2SExt+0x90>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d101      	bne.n	8007478 <I2SEx_RxISR_I2SExt+0x50>
 8007474:	4b11      	ldr	r3, [pc, #68]	; (80074bc <I2SEx_RxISR_I2SExt+0x94>)
 8007476:	e001      	b.n	800747c <I2SEx_RxISR_I2SExt+0x54>
 8007478:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	490d      	ldr	r1, [pc, #52]	; (80074b8 <I2SEx_RxISR_I2SExt+0x90>)
 8007484:	428b      	cmp	r3, r1
 8007486:	d101      	bne.n	800748c <I2SEx_RxISR_I2SExt+0x64>
 8007488:	4b0c      	ldr	r3, [pc, #48]	; (80074bc <I2SEx_RxISR_I2SExt+0x94>)
 800748a:	e001      	b.n	8007490 <I2SEx_RxISR_I2SExt+0x68>
 800748c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007490:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007494:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800749a:	b29b      	uxth	r3, r3
 800749c:	2b00      	cmp	r3, #0
 800749e:	d106      	bne.n	80074ae <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7ff ff03 	bl	80072b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80074ae:	bf00      	nop
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	40003800 	.word	0x40003800
 80074bc:	40003400 	.word	0x40003400

080074c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b086      	sub	sp, #24
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d101      	bne.n	80074d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e264      	b.n	800799c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d075      	beq.n	80075ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80074de:	4ba3      	ldr	r3, [pc, #652]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f003 030c 	and.w	r3, r3, #12
 80074e6:	2b04      	cmp	r3, #4
 80074e8:	d00c      	beq.n	8007504 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074ea:	4ba0      	ldr	r3, [pc, #640]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80074f2:	2b08      	cmp	r3, #8
 80074f4:	d112      	bne.n	800751c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074f6:	4b9d      	ldr	r3, [pc, #628]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007502:	d10b      	bne.n	800751c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007504:	4b99      	ldr	r3, [pc, #612]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d05b      	beq.n	80075c8 <HAL_RCC_OscConfig+0x108>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d157      	bne.n	80075c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e23f      	b.n	800799c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007524:	d106      	bne.n	8007534 <HAL_RCC_OscConfig+0x74>
 8007526:	4b91      	ldr	r3, [pc, #580]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a90      	ldr	r2, [pc, #576]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 800752c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007530:	6013      	str	r3, [r2, #0]
 8007532:	e01d      	b.n	8007570 <HAL_RCC_OscConfig+0xb0>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800753c:	d10c      	bne.n	8007558 <HAL_RCC_OscConfig+0x98>
 800753e:	4b8b      	ldr	r3, [pc, #556]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a8a      	ldr	r2, [pc, #552]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 8007544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007548:	6013      	str	r3, [r2, #0]
 800754a:	4b88      	ldr	r3, [pc, #544]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a87      	ldr	r2, [pc, #540]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 8007550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007554:	6013      	str	r3, [r2, #0]
 8007556:	e00b      	b.n	8007570 <HAL_RCC_OscConfig+0xb0>
 8007558:	4b84      	ldr	r3, [pc, #528]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a83      	ldr	r2, [pc, #524]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 800755e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007562:	6013      	str	r3, [r2, #0]
 8007564:	4b81      	ldr	r3, [pc, #516]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a80      	ldr	r2, [pc, #512]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 800756a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800756e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d013      	beq.n	80075a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007578:	f7fc f934 	bl	80037e4 <HAL_GetTick>
 800757c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800757e:	e008      	b.n	8007592 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007580:	f7fc f930 	bl	80037e4 <HAL_GetTick>
 8007584:	4602      	mov	r2, r0
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	2b64      	cmp	r3, #100	; 0x64
 800758c:	d901      	bls.n	8007592 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	e204      	b.n	800799c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007592:	4b76      	ldr	r3, [pc, #472]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d0f0      	beq.n	8007580 <HAL_RCC_OscConfig+0xc0>
 800759e:	e014      	b.n	80075ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075a0:	f7fc f920 	bl	80037e4 <HAL_GetTick>
 80075a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075a6:	e008      	b.n	80075ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075a8:	f7fc f91c 	bl	80037e4 <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	2b64      	cmp	r3, #100	; 0x64
 80075b4:	d901      	bls.n	80075ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e1f0      	b.n	800799c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075ba:	4b6c      	ldr	r3, [pc, #432]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1f0      	bne.n	80075a8 <HAL_RCC_OscConfig+0xe8>
 80075c6:	e000      	b.n	80075ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d063      	beq.n	800769e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80075d6:	4b65      	ldr	r3, [pc, #404]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f003 030c 	and.w	r3, r3, #12
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00b      	beq.n	80075fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075e2:	4b62      	ldr	r3, [pc, #392]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80075ea:	2b08      	cmp	r3, #8
 80075ec:	d11c      	bne.n	8007628 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075ee:	4b5f      	ldr	r3, [pc, #380]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d116      	bne.n	8007628 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075fa:	4b5c      	ldr	r3, [pc, #368]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0302 	and.w	r3, r3, #2
 8007602:	2b00      	cmp	r3, #0
 8007604:	d005      	beq.n	8007612 <HAL_RCC_OscConfig+0x152>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d001      	beq.n	8007612 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e1c4      	b.n	800799c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007612:	4b56      	ldr	r3, [pc, #344]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	00db      	lsls	r3, r3, #3
 8007620:	4952      	ldr	r1, [pc, #328]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 8007622:	4313      	orrs	r3, r2
 8007624:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007626:	e03a      	b.n	800769e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d020      	beq.n	8007672 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007630:	4b4f      	ldr	r3, [pc, #316]	; (8007770 <HAL_RCC_OscConfig+0x2b0>)
 8007632:	2201      	movs	r2, #1
 8007634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007636:	f7fc f8d5 	bl	80037e4 <HAL_GetTick>
 800763a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800763c:	e008      	b.n	8007650 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800763e:	f7fc f8d1 	bl	80037e4 <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	2b02      	cmp	r3, #2
 800764a:	d901      	bls.n	8007650 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e1a5      	b.n	800799c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007650:	4b46      	ldr	r3, [pc, #280]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0302 	and.w	r3, r3, #2
 8007658:	2b00      	cmp	r3, #0
 800765a:	d0f0      	beq.n	800763e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800765c:	4b43      	ldr	r3, [pc, #268]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	00db      	lsls	r3, r3, #3
 800766a:	4940      	ldr	r1, [pc, #256]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 800766c:	4313      	orrs	r3, r2
 800766e:	600b      	str	r3, [r1, #0]
 8007670:	e015      	b.n	800769e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007672:	4b3f      	ldr	r3, [pc, #252]	; (8007770 <HAL_RCC_OscConfig+0x2b0>)
 8007674:	2200      	movs	r2, #0
 8007676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007678:	f7fc f8b4 	bl	80037e4 <HAL_GetTick>
 800767c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800767e:	e008      	b.n	8007692 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007680:	f7fc f8b0 	bl	80037e4 <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	2b02      	cmp	r3, #2
 800768c:	d901      	bls.n	8007692 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e184      	b.n	800799c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007692:	4b36      	ldr	r3, [pc, #216]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1f0      	bne.n	8007680 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 0308 	and.w	r3, r3, #8
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d030      	beq.n	800770c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d016      	beq.n	80076e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076b2:	4b30      	ldr	r3, [pc, #192]	; (8007774 <HAL_RCC_OscConfig+0x2b4>)
 80076b4:	2201      	movs	r2, #1
 80076b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076b8:	f7fc f894 	bl	80037e4 <HAL_GetTick>
 80076bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076be:	e008      	b.n	80076d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076c0:	f7fc f890 	bl	80037e4 <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d901      	bls.n	80076d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e164      	b.n	800799c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076d2:	4b26      	ldr	r3, [pc, #152]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 80076d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076d6:	f003 0302 	and.w	r3, r3, #2
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d0f0      	beq.n	80076c0 <HAL_RCC_OscConfig+0x200>
 80076de:	e015      	b.n	800770c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076e0:	4b24      	ldr	r3, [pc, #144]	; (8007774 <HAL_RCC_OscConfig+0x2b4>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076e6:	f7fc f87d 	bl	80037e4 <HAL_GetTick>
 80076ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076ec:	e008      	b.n	8007700 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076ee:	f7fc f879 	bl	80037e4 <HAL_GetTick>
 80076f2:	4602      	mov	r2, r0
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d901      	bls.n	8007700 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e14d      	b.n	800799c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007700:	4b1a      	ldr	r3, [pc, #104]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 8007702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007704:	f003 0302 	and.w	r3, r3, #2
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1f0      	bne.n	80076ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0304 	and.w	r3, r3, #4
 8007714:	2b00      	cmp	r3, #0
 8007716:	f000 80a0 	beq.w	800785a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800771a:	2300      	movs	r3, #0
 800771c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800771e:	4b13      	ldr	r3, [pc, #76]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 8007720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10f      	bne.n	800774a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800772a:	2300      	movs	r3, #0
 800772c:	60bb      	str	r3, [r7, #8]
 800772e:	4b0f      	ldr	r3, [pc, #60]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 8007730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007732:	4a0e      	ldr	r2, [pc, #56]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 8007734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007738:	6413      	str	r3, [r2, #64]	; 0x40
 800773a:	4b0c      	ldr	r3, [pc, #48]	; (800776c <HAL_RCC_OscConfig+0x2ac>)
 800773c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007742:	60bb      	str	r3, [r7, #8]
 8007744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007746:	2301      	movs	r3, #1
 8007748:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800774a:	4b0b      	ldr	r3, [pc, #44]	; (8007778 <HAL_RCC_OscConfig+0x2b8>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007752:	2b00      	cmp	r3, #0
 8007754:	d121      	bne.n	800779a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007756:	4b08      	ldr	r3, [pc, #32]	; (8007778 <HAL_RCC_OscConfig+0x2b8>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a07      	ldr	r2, [pc, #28]	; (8007778 <HAL_RCC_OscConfig+0x2b8>)
 800775c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007762:	f7fc f83f 	bl	80037e4 <HAL_GetTick>
 8007766:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007768:	e011      	b.n	800778e <HAL_RCC_OscConfig+0x2ce>
 800776a:	bf00      	nop
 800776c:	40023800 	.word	0x40023800
 8007770:	42470000 	.word	0x42470000
 8007774:	42470e80 	.word	0x42470e80
 8007778:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800777c:	f7fc f832 	bl	80037e4 <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	2b02      	cmp	r3, #2
 8007788:	d901      	bls.n	800778e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	e106      	b.n	800799c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800778e:	4b85      	ldr	r3, [pc, #532]	; (80079a4 <HAL_RCC_OscConfig+0x4e4>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007796:	2b00      	cmp	r3, #0
 8007798:	d0f0      	beq.n	800777c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d106      	bne.n	80077b0 <HAL_RCC_OscConfig+0x2f0>
 80077a2:	4b81      	ldr	r3, [pc, #516]	; (80079a8 <HAL_RCC_OscConfig+0x4e8>)
 80077a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a6:	4a80      	ldr	r2, [pc, #512]	; (80079a8 <HAL_RCC_OscConfig+0x4e8>)
 80077a8:	f043 0301 	orr.w	r3, r3, #1
 80077ac:	6713      	str	r3, [r2, #112]	; 0x70
 80077ae:	e01c      	b.n	80077ea <HAL_RCC_OscConfig+0x32a>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	2b05      	cmp	r3, #5
 80077b6:	d10c      	bne.n	80077d2 <HAL_RCC_OscConfig+0x312>
 80077b8:	4b7b      	ldr	r3, [pc, #492]	; (80079a8 <HAL_RCC_OscConfig+0x4e8>)
 80077ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077bc:	4a7a      	ldr	r2, [pc, #488]	; (80079a8 <HAL_RCC_OscConfig+0x4e8>)
 80077be:	f043 0304 	orr.w	r3, r3, #4
 80077c2:	6713      	str	r3, [r2, #112]	; 0x70
 80077c4:	4b78      	ldr	r3, [pc, #480]	; (80079a8 <HAL_RCC_OscConfig+0x4e8>)
 80077c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077c8:	4a77      	ldr	r2, [pc, #476]	; (80079a8 <HAL_RCC_OscConfig+0x4e8>)
 80077ca:	f043 0301 	orr.w	r3, r3, #1
 80077ce:	6713      	str	r3, [r2, #112]	; 0x70
 80077d0:	e00b      	b.n	80077ea <HAL_RCC_OscConfig+0x32a>
 80077d2:	4b75      	ldr	r3, [pc, #468]	; (80079a8 <HAL_RCC_OscConfig+0x4e8>)
 80077d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077d6:	4a74      	ldr	r2, [pc, #464]	; (80079a8 <HAL_RCC_OscConfig+0x4e8>)
 80077d8:	f023 0301 	bic.w	r3, r3, #1
 80077dc:	6713      	str	r3, [r2, #112]	; 0x70
 80077de:	4b72      	ldr	r3, [pc, #456]	; (80079a8 <HAL_RCC_OscConfig+0x4e8>)
 80077e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e2:	4a71      	ldr	r2, [pc, #452]	; (80079a8 <HAL_RCC_OscConfig+0x4e8>)
 80077e4:	f023 0304 	bic.w	r3, r3, #4
 80077e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d015      	beq.n	800781e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077f2:	f7fb fff7 	bl	80037e4 <HAL_GetTick>
 80077f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077f8:	e00a      	b.n	8007810 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077fa:	f7fb fff3 	bl	80037e4 <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	f241 3288 	movw	r2, #5000	; 0x1388
 8007808:	4293      	cmp	r3, r2
 800780a:	d901      	bls.n	8007810 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800780c:	2303      	movs	r3, #3
 800780e:	e0c5      	b.n	800799c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007810:	4b65      	ldr	r3, [pc, #404]	; (80079a8 <HAL_RCC_OscConfig+0x4e8>)
 8007812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007814:	f003 0302 	and.w	r3, r3, #2
 8007818:	2b00      	cmp	r3, #0
 800781a:	d0ee      	beq.n	80077fa <HAL_RCC_OscConfig+0x33a>
 800781c:	e014      	b.n	8007848 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800781e:	f7fb ffe1 	bl	80037e4 <HAL_GetTick>
 8007822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007824:	e00a      	b.n	800783c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007826:	f7fb ffdd 	bl	80037e4 <HAL_GetTick>
 800782a:	4602      	mov	r2, r0
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	f241 3288 	movw	r2, #5000	; 0x1388
 8007834:	4293      	cmp	r3, r2
 8007836:	d901      	bls.n	800783c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	e0af      	b.n	800799c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800783c:	4b5a      	ldr	r3, [pc, #360]	; (80079a8 <HAL_RCC_OscConfig+0x4e8>)
 800783e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1ee      	bne.n	8007826 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007848:	7dfb      	ldrb	r3, [r7, #23]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d105      	bne.n	800785a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800784e:	4b56      	ldr	r3, [pc, #344]	; (80079a8 <HAL_RCC_OscConfig+0x4e8>)
 8007850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007852:	4a55      	ldr	r2, [pc, #340]	; (80079a8 <HAL_RCC_OscConfig+0x4e8>)
 8007854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007858:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	2b00      	cmp	r3, #0
 8007860:	f000 809b 	beq.w	800799a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007864:	4b50      	ldr	r3, [pc, #320]	; (80079a8 <HAL_RCC_OscConfig+0x4e8>)
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f003 030c 	and.w	r3, r3, #12
 800786c:	2b08      	cmp	r3, #8
 800786e:	d05c      	beq.n	800792a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	2b02      	cmp	r3, #2
 8007876:	d141      	bne.n	80078fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007878:	4b4c      	ldr	r3, [pc, #304]	; (80079ac <HAL_RCC_OscConfig+0x4ec>)
 800787a:	2200      	movs	r2, #0
 800787c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800787e:	f7fb ffb1 	bl	80037e4 <HAL_GetTick>
 8007882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007884:	e008      	b.n	8007898 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007886:	f7fb ffad 	bl	80037e4 <HAL_GetTick>
 800788a:	4602      	mov	r2, r0
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	2b02      	cmp	r3, #2
 8007892:	d901      	bls.n	8007898 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007894:	2303      	movs	r3, #3
 8007896:	e081      	b.n	800799c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007898:	4b43      	ldr	r3, [pc, #268]	; (80079a8 <HAL_RCC_OscConfig+0x4e8>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1f0      	bne.n	8007886 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	69da      	ldr	r2, [r3, #28]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a1b      	ldr	r3, [r3, #32]
 80078ac:	431a      	orrs	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b2:	019b      	lsls	r3, r3, #6
 80078b4:	431a      	orrs	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ba:	085b      	lsrs	r3, r3, #1
 80078bc:	3b01      	subs	r3, #1
 80078be:	041b      	lsls	r3, r3, #16
 80078c0:	431a      	orrs	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c6:	061b      	lsls	r3, r3, #24
 80078c8:	4937      	ldr	r1, [pc, #220]	; (80079a8 <HAL_RCC_OscConfig+0x4e8>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078ce:	4b37      	ldr	r3, [pc, #220]	; (80079ac <HAL_RCC_OscConfig+0x4ec>)
 80078d0:	2201      	movs	r2, #1
 80078d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078d4:	f7fb ff86 	bl	80037e4 <HAL_GetTick>
 80078d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078da:	e008      	b.n	80078ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078dc:	f7fb ff82 	bl	80037e4 <HAL_GetTick>
 80078e0:	4602      	mov	r2, r0
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d901      	bls.n	80078ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e056      	b.n	800799c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078ee:	4b2e      	ldr	r3, [pc, #184]	; (80079a8 <HAL_RCC_OscConfig+0x4e8>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d0f0      	beq.n	80078dc <HAL_RCC_OscConfig+0x41c>
 80078fa:	e04e      	b.n	800799a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078fc:	4b2b      	ldr	r3, [pc, #172]	; (80079ac <HAL_RCC_OscConfig+0x4ec>)
 80078fe:	2200      	movs	r2, #0
 8007900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007902:	f7fb ff6f 	bl	80037e4 <HAL_GetTick>
 8007906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007908:	e008      	b.n	800791c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800790a:	f7fb ff6b 	bl	80037e4 <HAL_GetTick>
 800790e:	4602      	mov	r2, r0
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	2b02      	cmp	r3, #2
 8007916:	d901      	bls.n	800791c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007918:	2303      	movs	r3, #3
 800791a:	e03f      	b.n	800799c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800791c:	4b22      	ldr	r3, [pc, #136]	; (80079a8 <HAL_RCC_OscConfig+0x4e8>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1f0      	bne.n	800790a <HAL_RCC_OscConfig+0x44a>
 8007928:	e037      	b.n	800799a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	2b01      	cmp	r3, #1
 8007930:	d101      	bne.n	8007936 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e032      	b.n	800799c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007936:	4b1c      	ldr	r3, [pc, #112]	; (80079a8 <HAL_RCC_OscConfig+0x4e8>)
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d028      	beq.n	8007996 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800794e:	429a      	cmp	r2, r3
 8007950:	d121      	bne.n	8007996 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800795c:	429a      	cmp	r2, r3
 800795e:	d11a      	bne.n	8007996 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007966:	4013      	ands	r3, r2
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800796c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800796e:	4293      	cmp	r3, r2
 8007970:	d111      	bne.n	8007996 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797c:	085b      	lsrs	r3, r3, #1
 800797e:	3b01      	subs	r3, #1
 8007980:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007982:	429a      	cmp	r2, r3
 8007984:	d107      	bne.n	8007996 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007990:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007992:	429a      	cmp	r2, r3
 8007994:	d001      	beq.n	800799a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	e000      	b.n	800799c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3718      	adds	r7, #24
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	40007000 	.word	0x40007000
 80079a8:	40023800 	.word	0x40023800
 80079ac:	42470060 	.word	0x42470060

080079b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e0cc      	b.n	8007b5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80079c4:	4b68      	ldr	r3, [pc, #416]	; (8007b68 <HAL_RCC_ClockConfig+0x1b8>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 0307 	and.w	r3, r3, #7
 80079cc:	683a      	ldr	r2, [r7, #0]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d90c      	bls.n	80079ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079d2:	4b65      	ldr	r3, [pc, #404]	; (8007b68 <HAL_RCC_ClockConfig+0x1b8>)
 80079d4:	683a      	ldr	r2, [r7, #0]
 80079d6:	b2d2      	uxtb	r2, r2
 80079d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079da:	4b63      	ldr	r3, [pc, #396]	; (8007b68 <HAL_RCC_ClockConfig+0x1b8>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 0307 	and.w	r3, r3, #7
 80079e2:	683a      	ldr	r2, [r7, #0]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d001      	beq.n	80079ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e0b8      	b.n	8007b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 0302 	and.w	r3, r3, #2
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d020      	beq.n	8007a3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0304 	and.w	r3, r3, #4
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d005      	beq.n	8007a10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a04:	4b59      	ldr	r3, [pc, #356]	; (8007b6c <HAL_RCC_ClockConfig+0x1bc>)
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	4a58      	ldr	r2, [pc, #352]	; (8007b6c <HAL_RCC_ClockConfig+0x1bc>)
 8007a0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007a0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 0308 	and.w	r3, r3, #8
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d005      	beq.n	8007a28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a1c:	4b53      	ldr	r3, [pc, #332]	; (8007b6c <HAL_RCC_ClockConfig+0x1bc>)
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	4a52      	ldr	r2, [pc, #328]	; (8007b6c <HAL_RCC_ClockConfig+0x1bc>)
 8007a22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007a26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a28:	4b50      	ldr	r3, [pc, #320]	; (8007b6c <HAL_RCC_ClockConfig+0x1bc>)
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	494d      	ldr	r1, [pc, #308]	; (8007b6c <HAL_RCC_ClockConfig+0x1bc>)
 8007a36:	4313      	orrs	r3, r2
 8007a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d044      	beq.n	8007ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d107      	bne.n	8007a5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a4e:	4b47      	ldr	r3, [pc, #284]	; (8007b6c <HAL_RCC_ClockConfig+0x1bc>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d119      	bne.n	8007a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e07f      	b.n	8007b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d003      	beq.n	8007a6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a6a:	2b03      	cmp	r3, #3
 8007a6c:	d107      	bne.n	8007a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a6e:	4b3f      	ldr	r3, [pc, #252]	; (8007b6c <HAL_RCC_ClockConfig+0x1bc>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d109      	bne.n	8007a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e06f      	b.n	8007b5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a7e:	4b3b      	ldr	r3, [pc, #236]	; (8007b6c <HAL_RCC_ClockConfig+0x1bc>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 0302 	and.w	r3, r3, #2
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e067      	b.n	8007b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a8e:	4b37      	ldr	r3, [pc, #220]	; (8007b6c <HAL_RCC_ClockConfig+0x1bc>)
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f023 0203 	bic.w	r2, r3, #3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	4934      	ldr	r1, [pc, #208]	; (8007b6c <HAL_RCC_ClockConfig+0x1bc>)
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007aa0:	f7fb fea0 	bl	80037e4 <HAL_GetTick>
 8007aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007aa6:	e00a      	b.n	8007abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007aa8:	f7fb fe9c 	bl	80037e4 <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d901      	bls.n	8007abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e04f      	b.n	8007b5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007abe:	4b2b      	ldr	r3, [pc, #172]	; (8007b6c <HAL_RCC_ClockConfig+0x1bc>)
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f003 020c 	and.w	r2, r3, #12
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d1eb      	bne.n	8007aa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ad0:	4b25      	ldr	r3, [pc, #148]	; (8007b68 <HAL_RCC_ClockConfig+0x1b8>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0307 	and.w	r3, r3, #7
 8007ad8:	683a      	ldr	r2, [r7, #0]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d20c      	bcs.n	8007af8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ade:	4b22      	ldr	r3, [pc, #136]	; (8007b68 <HAL_RCC_ClockConfig+0x1b8>)
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	b2d2      	uxtb	r2, r2
 8007ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ae6:	4b20      	ldr	r3, [pc, #128]	; (8007b68 <HAL_RCC_ClockConfig+0x1b8>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 0307 	and.w	r3, r3, #7
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d001      	beq.n	8007af8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e032      	b.n	8007b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 0304 	and.w	r3, r3, #4
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d008      	beq.n	8007b16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b04:	4b19      	ldr	r3, [pc, #100]	; (8007b6c <HAL_RCC_ClockConfig+0x1bc>)
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	4916      	ldr	r1, [pc, #88]	; (8007b6c <HAL_RCC_ClockConfig+0x1bc>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 0308 	and.w	r3, r3, #8
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d009      	beq.n	8007b36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b22:	4b12      	ldr	r3, [pc, #72]	; (8007b6c <HAL_RCC_ClockConfig+0x1bc>)
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	00db      	lsls	r3, r3, #3
 8007b30:	490e      	ldr	r1, [pc, #56]	; (8007b6c <HAL_RCC_ClockConfig+0x1bc>)
 8007b32:	4313      	orrs	r3, r2
 8007b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007b36:	f000 f821 	bl	8007b7c <HAL_RCC_GetSysClockFreq>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	4b0b      	ldr	r3, [pc, #44]	; (8007b6c <HAL_RCC_ClockConfig+0x1bc>)
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	091b      	lsrs	r3, r3, #4
 8007b42:	f003 030f 	and.w	r3, r3, #15
 8007b46:	490a      	ldr	r1, [pc, #40]	; (8007b70 <HAL_RCC_ClockConfig+0x1c0>)
 8007b48:	5ccb      	ldrb	r3, [r1, r3]
 8007b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b4e:	4a09      	ldr	r2, [pc, #36]	; (8007b74 <HAL_RCC_ClockConfig+0x1c4>)
 8007b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007b52:	4b09      	ldr	r3, [pc, #36]	; (8007b78 <HAL_RCC_ClockConfig+0x1c8>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fb fe00 	bl	800375c <HAL_InitTick>

  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	40023c00 	.word	0x40023c00
 8007b6c:	40023800 	.word	0x40023800
 8007b70:	0800d45c 	.word	0x0800d45c
 8007b74:	20000004 	.word	0x20000004
 8007b78:	200000a0 	.word	0x200000a0

08007b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007b80:	b084      	sub	sp, #16
 8007b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007b84:	2300      	movs	r3, #0
 8007b86:	607b      	str	r3, [r7, #4]
 8007b88:	2300      	movs	r3, #0
 8007b8a:	60fb      	str	r3, [r7, #12]
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007b90:	2300      	movs	r3, #0
 8007b92:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b94:	4b67      	ldr	r3, [pc, #412]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	f003 030c 	and.w	r3, r3, #12
 8007b9c:	2b08      	cmp	r3, #8
 8007b9e:	d00d      	beq.n	8007bbc <HAL_RCC_GetSysClockFreq+0x40>
 8007ba0:	2b08      	cmp	r3, #8
 8007ba2:	f200 80bd 	bhi.w	8007d20 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d002      	beq.n	8007bb0 <HAL_RCC_GetSysClockFreq+0x34>
 8007baa:	2b04      	cmp	r3, #4
 8007bac:	d003      	beq.n	8007bb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007bae:	e0b7      	b.n	8007d20 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007bb0:	4b61      	ldr	r3, [pc, #388]	; (8007d38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007bb2:	60bb      	str	r3, [r7, #8]
       break;
 8007bb4:	e0b7      	b.n	8007d26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007bb6:	4b61      	ldr	r3, [pc, #388]	; (8007d3c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007bb8:	60bb      	str	r3, [r7, #8]
      break;
 8007bba:	e0b4      	b.n	8007d26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007bbc:	4b5d      	ldr	r3, [pc, #372]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bc4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007bc6:	4b5b      	ldr	r3, [pc, #364]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d04d      	beq.n	8007c6e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bd2:	4b58      	ldr	r3, [pc, #352]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	099b      	lsrs	r3, r3, #6
 8007bd8:	461a      	mov	r2, r3
 8007bda:	f04f 0300 	mov.w	r3, #0
 8007bde:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007be2:	f04f 0100 	mov.w	r1, #0
 8007be6:	ea02 0800 	and.w	r8, r2, r0
 8007bea:	ea03 0901 	and.w	r9, r3, r1
 8007bee:	4640      	mov	r0, r8
 8007bf0:	4649      	mov	r1, r9
 8007bf2:	f04f 0200 	mov.w	r2, #0
 8007bf6:	f04f 0300 	mov.w	r3, #0
 8007bfa:	014b      	lsls	r3, r1, #5
 8007bfc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007c00:	0142      	lsls	r2, r0, #5
 8007c02:	4610      	mov	r0, r2
 8007c04:	4619      	mov	r1, r3
 8007c06:	ebb0 0008 	subs.w	r0, r0, r8
 8007c0a:	eb61 0109 	sbc.w	r1, r1, r9
 8007c0e:	f04f 0200 	mov.w	r2, #0
 8007c12:	f04f 0300 	mov.w	r3, #0
 8007c16:	018b      	lsls	r3, r1, #6
 8007c18:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007c1c:	0182      	lsls	r2, r0, #6
 8007c1e:	1a12      	subs	r2, r2, r0
 8007c20:	eb63 0301 	sbc.w	r3, r3, r1
 8007c24:	f04f 0000 	mov.w	r0, #0
 8007c28:	f04f 0100 	mov.w	r1, #0
 8007c2c:	00d9      	lsls	r1, r3, #3
 8007c2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c32:	00d0      	lsls	r0, r2, #3
 8007c34:	4602      	mov	r2, r0
 8007c36:	460b      	mov	r3, r1
 8007c38:	eb12 0208 	adds.w	r2, r2, r8
 8007c3c:	eb43 0309 	adc.w	r3, r3, r9
 8007c40:	f04f 0000 	mov.w	r0, #0
 8007c44:	f04f 0100 	mov.w	r1, #0
 8007c48:	0259      	lsls	r1, r3, #9
 8007c4a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007c4e:	0250      	lsls	r0, r2, #9
 8007c50:	4602      	mov	r2, r0
 8007c52:	460b      	mov	r3, r1
 8007c54:	4610      	mov	r0, r2
 8007c56:	4619      	mov	r1, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	f04f 0300 	mov.w	r3, #0
 8007c60:	f7f8 ff1e 	bl	8000aa0 <__aeabi_uldivmod>
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	4613      	mov	r3, r2
 8007c6a:	60fb      	str	r3, [r7, #12]
 8007c6c:	e04a      	b.n	8007d04 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c6e:	4b31      	ldr	r3, [pc, #196]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	099b      	lsrs	r3, r3, #6
 8007c74:	461a      	mov	r2, r3
 8007c76:	f04f 0300 	mov.w	r3, #0
 8007c7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007c7e:	f04f 0100 	mov.w	r1, #0
 8007c82:	ea02 0400 	and.w	r4, r2, r0
 8007c86:	ea03 0501 	and.w	r5, r3, r1
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	4629      	mov	r1, r5
 8007c8e:	f04f 0200 	mov.w	r2, #0
 8007c92:	f04f 0300 	mov.w	r3, #0
 8007c96:	014b      	lsls	r3, r1, #5
 8007c98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007c9c:	0142      	lsls	r2, r0, #5
 8007c9e:	4610      	mov	r0, r2
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	1b00      	subs	r0, r0, r4
 8007ca4:	eb61 0105 	sbc.w	r1, r1, r5
 8007ca8:	f04f 0200 	mov.w	r2, #0
 8007cac:	f04f 0300 	mov.w	r3, #0
 8007cb0:	018b      	lsls	r3, r1, #6
 8007cb2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007cb6:	0182      	lsls	r2, r0, #6
 8007cb8:	1a12      	subs	r2, r2, r0
 8007cba:	eb63 0301 	sbc.w	r3, r3, r1
 8007cbe:	f04f 0000 	mov.w	r0, #0
 8007cc2:	f04f 0100 	mov.w	r1, #0
 8007cc6:	00d9      	lsls	r1, r3, #3
 8007cc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ccc:	00d0      	lsls	r0, r2, #3
 8007cce:	4602      	mov	r2, r0
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	1912      	adds	r2, r2, r4
 8007cd4:	eb45 0303 	adc.w	r3, r5, r3
 8007cd8:	f04f 0000 	mov.w	r0, #0
 8007cdc:	f04f 0100 	mov.w	r1, #0
 8007ce0:	0299      	lsls	r1, r3, #10
 8007ce2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007ce6:	0290      	lsls	r0, r2, #10
 8007ce8:	4602      	mov	r2, r0
 8007cea:	460b      	mov	r3, r1
 8007cec:	4610      	mov	r0, r2
 8007cee:	4619      	mov	r1, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	f04f 0300 	mov.w	r3, #0
 8007cf8:	f7f8 fed2 	bl	8000aa0 <__aeabi_uldivmod>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	460b      	mov	r3, r1
 8007d00:	4613      	mov	r3, r2
 8007d02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007d04:	4b0b      	ldr	r3, [pc, #44]	; (8007d34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	0c1b      	lsrs	r3, r3, #16
 8007d0a:	f003 0303 	and.w	r3, r3, #3
 8007d0e:	3301      	adds	r3, #1
 8007d10:	005b      	lsls	r3, r3, #1
 8007d12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d1c:	60bb      	str	r3, [r7, #8]
      break;
 8007d1e:	e002      	b.n	8007d26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d20:	4b05      	ldr	r3, [pc, #20]	; (8007d38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007d22:	60bb      	str	r3, [r7, #8]
      break;
 8007d24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d26:	68bb      	ldr	r3, [r7, #8]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007d32:	bf00      	nop
 8007d34:	40023800 	.word	0x40023800
 8007d38:	00f42400 	.word	0x00f42400
 8007d3c:	007a1200 	.word	0x007a1200

08007d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d40:	b480      	push	{r7}
 8007d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d44:	4b03      	ldr	r3, [pc, #12]	; (8007d54 <HAL_RCC_GetHCLKFreq+0x14>)
 8007d46:	681b      	ldr	r3, [r3, #0]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	20000004 	.word	0x20000004

08007d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007d5c:	f7ff fff0 	bl	8007d40 <HAL_RCC_GetHCLKFreq>
 8007d60:	4602      	mov	r2, r0
 8007d62:	4b05      	ldr	r3, [pc, #20]	; (8007d78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	0a9b      	lsrs	r3, r3, #10
 8007d68:	f003 0307 	and.w	r3, r3, #7
 8007d6c:	4903      	ldr	r1, [pc, #12]	; (8007d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d6e:	5ccb      	ldrb	r3, [r1, r3]
 8007d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	40023800 	.word	0x40023800
 8007d7c:	0800d46c 	.word	0x0800d46c

08007d80 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0301 	and.w	r3, r3, #1
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d105      	bne.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d035      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007da8:	4b62      	ldr	r3, [pc, #392]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007daa:	2200      	movs	r2, #0
 8007dac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007dae:	f7fb fd19 	bl	80037e4 <HAL_GetTick>
 8007db2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007db4:	e008      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007db6:	f7fb fd15 	bl	80037e4 <HAL_GetTick>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d901      	bls.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e0b0      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007dc8:	4b5b      	ldr	r3, [pc, #364]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1f0      	bne.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	019a      	lsls	r2, r3, #6
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	071b      	lsls	r3, r3, #28
 8007de0:	4955      	ldr	r1, [pc, #340]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007de8:	4b52      	ldr	r3, [pc, #328]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007dea:	2201      	movs	r2, #1
 8007dec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007dee:	f7fb fcf9 	bl	80037e4 <HAL_GetTick>
 8007df2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007df4:	e008      	b.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007df6:	f7fb fcf5 	bl	80037e4 <HAL_GetTick>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	1ad3      	subs	r3, r2, r3
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d901      	bls.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e090      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e08:	4b4b      	ldr	r3, [pc, #300]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d0f0      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0302 	and.w	r3, r3, #2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f000 8083 	beq.w	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007e22:	2300      	movs	r3, #0
 8007e24:	60fb      	str	r3, [r7, #12]
 8007e26:	4b44      	ldr	r3, [pc, #272]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2a:	4a43      	ldr	r2, [pc, #268]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e30:	6413      	str	r3, [r2, #64]	; 0x40
 8007e32:	4b41      	ldr	r3, [pc, #260]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e3a:	60fb      	str	r3, [r7, #12]
 8007e3c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007e3e:	4b3f      	ldr	r3, [pc, #252]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a3e      	ldr	r2, [pc, #248]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e48:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e4a:	f7fb fccb 	bl	80037e4 <HAL_GetTick>
 8007e4e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007e50:	e008      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007e52:	f7fb fcc7 	bl	80037e4 <HAL_GetTick>
 8007e56:	4602      	mov	r2, r0
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d901      	bls.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e062      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007e64:	4b35      	ldr	r3, [pc, #212]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d0f0      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007e70:	4b31      	ldr	r3, [pc, #196]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e78:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d02f      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d028      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e8e:	4b2a      	ldr	r3, [pc, #168]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e96:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007e98:	4b29      	ldr	r3, [pc, #164]	; (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007e9e:	4b28      	ldr	r3, [pc, #160]	; (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007ea4:	4a24      	ldr	r2, [pc, #144]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007eaa:	4b23      	ldr	r3, [pc, #140]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eae:	f003 0301 	and.w	r3, r3, #1
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d114      	bne.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007eb6:	f7fb fc95 	bl	80037e4 <HAL_GetTick>
 8007eba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ebc:	e00a      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ebe:	f7fb fc91 	bl	80037e4 <HAL_GetTick>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d901      	bls.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	e02a      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ed4:	4b18      	ldr	r3, [pc, #96]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ed8:	f003 0302 	and.w	r3, r3, #2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d0ee      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ee8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007eec:	d10d      	bne.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007eee:	4b12      	ldr	r3, [pc, #72]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f02:	490d      	ldr	r1, [pc, #52]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f04:	4313      	orrs	r3, r2
 8007f06:	608b      	str	r3, [r1, #8]
 8007f08:	e005      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007f0a:	4b0b      	ldr	r3, [pc, #44]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	4a0a      	ldr	r2, [pc, #40]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f10:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007f14:	6093      	str	r3, [r2, #8]
 8007f16:	4b08      	ldr	r3, [pc, #32]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f22:	4905      	ldr	r1, [pc, #20]	; (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f24:	4313      	orrs	r3, r2
 8007f26:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3718      	adds	r7, #24
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	42470068 	.word	0x42470068
 8007f38:	40023800 	.word	0x40023800
 8007f3c:	40007000 	.word	0x40007000
 8007f40:	42470e40 	.word	0x42470e40

08007f44 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b087      	sub	sp, #28
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007f50:	2300      	movs	r3, #0
 8007f52:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007f54:	2300      	movs	r3, #0
 8007f56:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d13e      	bne.n	8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007f62:	4b23      	ldr	r3, [pc, #140]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f6a:	60fb      	str	r3, [r7, #12]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d005      	beq.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d12f      	bne.n	8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007f78:	4b1e      	ldr	r3, [pc, #120]	; (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007f7a:	617b      	str	r3, [r7, #20]
          break;
 8007f7c:	e02f      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007f7e:	4b1c      	ldr	r3, [pc, #112]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f8a:	d108      	bne.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007f8c:	4b18      	ldr	r3, [pc, #96]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f94:	4a18      	ldr	r2, [pc, #96]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f9a:	613b      	str	r3, [r7, #16]
 8007f9c:	e007      	b.n	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007f9e:	4b14      	ldr	r3, [pc, #80]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fa6:	4a15      	ldr	r2, [pc, #84]	; (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fac:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007fae:	4b10      	ldr	r3, [pc, #64]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fb4:	099b      	lsrs	r3, r3, #6
 8007fb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	fb02 f303 	mul.w	r3, r2, r3
 8007fc0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007fc2:	4b0b      	ldr	r3, [pc, #44]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fc8:	0f1b      	lsrs	r3, r3, #28
 8007fca:	f003 0307 	and.w	r3, r3, #7
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd4:	617b      	str	r3, [r7, #20]
          break;
 8007fd6:	e002      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	617b      	str	r3, [r7, #20]
          break;
 8007fdc:	bf00      	nop
        }
      }
      break;
 8007fde:	bf00      	nop
    }
  }
  return frequency;
 8007fe0:	697b      	ldr	r3, [r7, #20]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	371c      	adds	r7, #28
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	40023800 	.word	0x40023800
 8007ff4:	00bb8000 	.word	0x00bb8000
 8007ff8:	007a1200 	.word	0x007a1200
 8007ffc:	00f42400 	.word	0x00f42400

08008000 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e01c      	b.n	800804c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	795b      	ldrb	r3, [r3, #5]
 8008016:	b2db      	uxtb	r3, r3
 8008018:	2b00      	cmp	r3, #0
 800801a:	d105      	bne.n	8008028 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f7f9 fed8 	bl	8001dd8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2202      	movs	r2, #2
 800802c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f042 0204 	orr.w	r2, r2, #4
 800803c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	791b      	ldrb	r3, [r3, #4]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d101      	bne.n	800806e <HAL_RNG_GenerateRandomNumber+0x1a>
 800806a:	2302      	movs	r3, #2
 800806c:	e03d      	b.n	80080ea <HAL_RNG_GenerateRandomNumber+0x96>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	795b      	ldrb	r3, [r3, #5]
 8008078:	b2db      	uxtb	r3, r3
 800807a:	2b01      	cmp	r3, #1
 800807c:	d12c      	bne.n	80080d8 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2202      	movs	r2, #2
 8008082:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008084:	f7fb fbae 	bl	80037e4 <HAL_GetTick>
 8008088:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800808a:	e011      	b.n	80080b0 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800808c:	f7fb fbaa 	bl	80037e4 <HAL_GetTick>
 8008090:	4602      	mov	r2, r0
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	2b02      	cmp	r3, #2
 8008098:	d90a      	bls.n	80080b0 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2202      	movs	r2, #2
 80080a4:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e01c      	b.n	80080ea <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	f003 0301 	and.w	r3, r3, #1
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d1e6      	bne.n	800808c <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	689a      	ldr	r2, [r3, #8]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	68da      	ldr	r2, [r3, #12]
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	715a      	strb	r2, [r3, #5]
 80080d6:	e004      	b.n	80080e2 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2204      	movs	r2, #4
 80080dc:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	711a      	strb	r2, [r3, #4]

  return status;
 80080e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b082      	sub	sp, #8
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	330c      	adds	r3, #12
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f7ff ffa7 	bl	8008054 <HAL_RNG_GenerateRandomNumber>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d102      	bne.n	8008112 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	e000      	b.n	8008114 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8008112:	2300      	movs	r3, #0
  }
}
 8008114:	4618      	mov	r0, r3
 8008116:	3708      	adds	r7, #8
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d101      	bne.n	800812e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e07b      	b.n	8008226 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008132:	2b00      	cmp	r3, #0
 8008134:	d108      	bne.n	8008148 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800813e:	d009      	beq.n	8008154 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	61da      	str	r2, [r3, #28]
 8008146:	e005      	b.n	8008154 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d106      	bne.n	8008174 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7f9 fe54 	bl	8001e1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2202      	movs	r2, #2
 8008178:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800818a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800819c:	431a      	orrs	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081a6:	431a      	orrs	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	431a      	orrs	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	f003 0301 	and.w	r3, r3, #1
 80081ba:	431a      	orrs	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081c4:	431a      	orrs	r2, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	69db      	ldr	r3, [r3, #28]
 80081ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081ce:	431a      	orrs	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a1b      	ldr	r3, [r3, #32]
 80081d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081d8:	ea42 0103 	orr.w	r1, r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	430a      	orrs	r2, r1
 80081ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	0c1b      	lsrs	r3, r3, #16
 80081f2:	f003 0104 	and.w	r1, r3, #4
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fa:	f003 0210 	and.w	r2, r3, #16
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	430a      	orrs	r2, r1
 8008204:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	69da      	ldr	r2, [r3, #28]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008214:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b088      	sub	sp, #32
 8008232:	af00      	add	r7, sp, #0
 8008234:	60f8      	str	r0, [r7, #12]
 8008236:	60b9      	str	r1, [r7, #8]
 8008238:	603b      	str	r3, [r7, #0]
 800823a:	4613      	mov	r3, r2
 800823c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800823e:	2300      	movs	r3, #0
 8008240:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008248:	2b01      	cmp	r3, #1
 800824a:	d101      	bne.n	8008250 <HAL_SPI_Transmit+0x22>
 800824c:	2302      	movs	r3, #2
 800824e:	e126      	b.n	800849e <HAL_SPI_Transmit+0x270>
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008258:	f7fb fac4 	bl	80037e4 <HAL_GetTick>
 800825c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800825e:	88fb      	ldrh	r3, [r7, #6]
 8008260:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b01      	cmp	r3, #1
 800826c:	d002      	beq.n	8008274 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800826e:	2302      	movs	r3, #2
 8008270:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008272:	e10b      	b.n	800848c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d002      	beq.n	8008280 <HAL_SPI_Transmit+0x52>
 800827a:	88fb      	ldrh	r3, [r7, #6]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d102      	bne.n	8008286 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008284:	e102      	b.n	800848c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2203      	movs	r2, #3
 800828a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	88fa      	ldrh	r2, [r7, #6]
 800829e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	88fa      	ldrh	r2, [r7, #6]
 80082a4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2200      	movs	r2, #0
 80082aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082cc:	d10f      	bne.n	80082ee <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f8:	2b40      	cmp	r3, #64	; 0x40
 80082fa:	d007      	beq.n	800830c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800830a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008314:	d14b      	bne.n	80083ae <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d002      	beq.n	8008324 <HAL_SPI_Transmit+0xf6>
 800831e:	8afb      	ldrh	r3, [r7, #22]
 8008320:	2b01      	cmp	r3, #1
 8008322:	d13e      	bne.n	80083a2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008328:	881a      	ldrh	r2, [r3, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008334:	1c9a      	adds	r2, r3, #2
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800833e:	b29b      	uxth	r3, r3
 8008340:	3b01      	subs	r3, #1
 8008342:	b29a      	uxth	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008348:	e02b      	b.n	80083a2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f003 0302 	and.w	r3, r3, #2
 8008354:	2b02      	cmp	r3, #2
 8008356:	d112      	bne.n	800837e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835c:	881a      	ldrh	r2, [r3, #0]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008368:	1c9a      	adds	r2, r3, #2
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008372:	b29b      	uxth	r3, r3
 8008374:	3b01      	subs	r3, #1
 8008376:	b29a      	uxth	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	86da      	strh	r2, [r3, #54]	; 0x36
 800837c:	e011      	b.n	80083a2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800837e:	f7fb fa31 	bl	80037e4 <HAL_GetTick>
 8008382:	4602      	mov	r2, r0
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	683a      	ldr	r2, [r7, #0]
 800838a:	429a      	cmp	r2, r3
 800838c:	d803      	bhi.n	8008396 <HAL_SPI_Transmit+0x168>
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008394:	d102      	bne.n	800839c <HAL_SPI_Transmit+0x16e>
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d102      	bne.n	80083a2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800839c:	2303      	movs	r3, #3
 800839e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80083a0:	e074      	b.n	800848c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1ce      	bne.n	800834a <HAL_SPI_Transmit+0x11c>
 80083ac:	e04c      	b.n	8008448 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d002      	beq.n	80083bc <HAL_SPI_Transmit+0x18e>
 80083b6:	8afb      	ldrh	r3, [r7, #22]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d140      	bne.n	800843e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	330c      	adds	r3, #12
 80083c6:	7812      	ldrb	r2, [r2, #0]
 80083c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ce:	1c5a      	adds	r2, r3, #1
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083d8:	b29b      	uxth	r3, r3
 80083da:	3b01      	subs	r3, #1
 80083dc:	b29a      	uxth	r2, r3
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80083e2:	e02c      	b.n	800843e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	f003 0302 	and.w	r3, r3, #2
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d113      	bne.n	800841a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	330c      	adds	r3, #12
 80083fc:	7812      	ldrb	r2, [r2, #0]
 80083fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008404:	1c5a      	adds	r2, r3, #1
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800840e:	b29b      	uxth	r3, r3
 8008410:	3b01      	subs	r3, #1
 8008412:	b29a      	uxth	r2, r3
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	86da      	strh	r2, [r3, #54]	; 0x36
 8008418:	e011      	b.n	800843e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800841a:	f7fb f9e3 	bl	80037e4 <HAL_GetTick>
 800841e:	4602      	mov	r2, r0
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	683a      	ldr	r2, [r7, #0]
 8008426:	429a      	cmp	r2, r3
 8008428:	d803      	bhi.n	8008432 <HAL_SPI_Transmit+0x204>
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008430:	d102      	bne.n	8008438 <HAL_SPI_Transmit+0x20a>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d102      	bne.n	800843e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008438:	2303      	movs	r3, #3
 800843a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800843c:	e026      	b.n	800848c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008442:	b29b      	uxth	r3, r3
 8008444:	2b00      	cmp	r3, #0
 8008446:	d1cd      	bne.n	80083e4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008448:	69ba      	ldr	r2, [r7, #24]
 800844a:	6839      	ldr	r1, [r7, #0]
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f000 f8b3 	bl	80085b8 <SPI_EndRxTxTransaction>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d002      	beq.n	800845e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2220      	movs	r2, #32
 800845c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10a      	bne.n	800847c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008466:	2300      	movs	r3, #0
 8008468:	613b      	str	r3, [r7, #16]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	613b      	str	r3, [r7, #16]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	613b      	str	r3, [r7, #16]
 800847a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008480:	2b00      	cmp	r3, #0
 8008482:	d002      	beq.n	800848a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	77fb      	strb	r3, [r7, #31]
 8008488:	e000      	b.n	800848c <HAL_SPI_Transmit+0x25e>
  }

error:
 800848a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800849c:	7ffb      	ldrb	r3, [r7, #31]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3720      	adds	r7, #32
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
	...

080084a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b088      	sub	sp, #32
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	603b      	str	r3, [r7, #0]
 80084b4:	4613      	mov	r3, r2
 80084b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80084b8:	f7fb f994 	bl	80037e4 <HAL_GetTick>
 80084bc:	4602      	mov	r2, r0
 80084be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c0:	1a9b      	subs	r3, r3, r2
 80084c2:	683a      	ldr	r2, [r7, #0]
 80084c4:	4413      	add	r3, r2
 80084c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80084c8:	f7fb f98c 	bl	80037e4 <HAL_GetTick>
 80084cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80084ce:	4b39      	ldr	r3, [pc, #228]	; (80085b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	015b      	lsls	r3, r3, #5
 80084d4:	0d1b      	lsrs	r3, r3, #20
 80084d6:	69fa      	ldr	r2, [r7, #28]
 80084d8:	fb02 f303 	mul.w	r3, r2, r3
 80084dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084de:	e054      	b.n	800858a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084e6:	d050      	beq.n	800858a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80084e8:	f7fb f97c 	bl	80037e4 <HAL_GetTick>
 80084ec:	4602      	mov	r2, r0
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	69fa      	ldr	r2, [r7, #28]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d902      	bls.n	80084fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d13d      	bne.n	800857a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	685a      	ldr	r2, [r3, #4]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800850c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008516:	d111      	bne.n	800853c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008520:	d004      	beq.n	800852c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800852a:	d107      	bne.n	800853c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800853a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008544:	d10f      	bne.n	8008566 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008554:	601a      	str	r2, [r3, #0]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008564:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2201      	movs	r2, #1
 800856a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008576:	2303      	movs	r3, #3
 8008578:	e017      	b.n	80085aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d101      	bne.n	8008584 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008580:	2300      	movs	r3, #0
 8008582:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	3b01      	subs	r3, #1
 8008588:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	689a      	ldr	r2, [r3, #8]
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	4013      	ands	r3, r2
 8008594:	68ba      	ldr	r2, [r7, #8]
 8008596:	429a      	cmp	r2, r3
 8008598:	bf0c      	ite	eq
 800859a:	2301      	moveq	r3, #1
 800859c:	2300      	movne	r3, #0
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	461a      	mov	r2, r3
 80085a2:	79fb      	ldrb	r3, [r7, #7]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d19b      	bne.n	80084e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3720      	adds	r7, #32
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	20000004 	.word	0x20000004

080085b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b088      	sub	sp, #32
 80085bc:	af02      	add	r7, sp, #8
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80085c4:	4b1b      	ldr	r3, [pc, #108]	; (8008634 <SPI_EndRxTxTransaction+0x7c>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a1b      	ldr	r2, [pc, #108]	; (8008638 <SPI_EndRxTxTransaction+0x80>)
 80085ca:	fba2 2303 	umull	r2, r3, r2, r3
 80085ce:	0d5b      	lsrs	r3, r3, #21
 80085d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80085d4:	fb02 f303 	mul.w	r3, r2, r3
 80085d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085e2:	d112      	bne.n	800860a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	9300      	str	r3, [sp, #0]
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	2200      	movs	r2, #0
 80085ec:	2180      	movs	r1, #128	; 0x80
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f7ff ff5a 	bl	80084a8 <SPI_WaitFlagStateUntilTimeout>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d016      	beq.n	8008628 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085fe:	f043 0220 	orr.w	r2, r3, #32
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	e00f      	b.n	800862a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00a      	beq.n	8008626 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	3b01      	subs	r3, #1
 8008614:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008620:	2b80      	cmp	r3, #128	; 0x80
 8008622:	d0f2      	beq.n	800860a <SPI_EndRxTxTransaction+0x52>
 8008624:	e000      	b.n	8008628 <SPI_EndRxTxTransaction+0x70>
        break;
 8008626:	bf00      	nop
  }

  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3718      	adds	r7, #24
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	20000004 	.word	0x20000004
 8008638:	165e9f81 	.word	0x165e9f81

0800863c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d101      	bne.n	800864e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	e041      	b.n	80086d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b00      	cmp	r3, #0
 8008658:	d106      	bne.n	8008668 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f7f9 fcc0 	bl	8001fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2202      	movs	r2, #2
 800866c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	3304      	adds	r3, #4
 8008678:	4619      	mov	r1, r3
 800867a:	4610      	mov	r0, r2
 800867c:	f000 fd68 	bl	8009150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3708      	adds	r7, #8
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
	...

080086dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d001      	beq.n	80086f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	e04e      	b.n	8008792 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2202      	movs	r2, #2
 80086f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68da      	ldr	r2, [r3, #12]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f042 0201 	orr.w	r2, r2, #1
 800870a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a23      	ldr	r2, [pc, #140]	; (80087a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d022      	beq.n	800875c <HAL_TIM_Base_Start_IT+0x80>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800871e:	d01d      	beq.n	800875c <HAL_TIM_Base_Start_IT+0x80>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a1f      	ldr	r2, [pc, #124]	; (80087a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d018      	beq.n	800875c <HAL_TIM_Base_Start_IT+0x80>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a1e      	ldr	r2, [pc, #120]	; (80087a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d013      	beq.n	800875c <HAL_TIM_Base_Start_IT+0x80>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a1c      	ldr	r2, [pc, #112]	; (80087ac <HAL_TIM_Base_Start_IT+0xd0>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d00e      	beq.n	800875c <HAL_TIM_Base_Start_IT+0x80>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a1b      	ldr	r2, [pc, #108]	; (80087b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d009      	beq.n	800875c <HAL_TIM_Base_Start_IT+0x80>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a19      	ldr	r2, [pc, #100]	; (80087b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d004      	beq.n	800875c <HAL_TIM_Base_Start_IT+0x80>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a18      	ldr	r2, [pc, #96]	; (80087b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d111      	bne.n	8008780 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	f003 0307 	and.w	r3, r3, #7
 8008766:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b06      	cmp	r3, #6
 800876c:	d010      	beq.n	8008790 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f042 0201 	orr.w	r2, r2, #1
 800877c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800877e:	e007      	b.n	8008790 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f042 0201 	orr.w	r2, r2, #1
 800878e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3714      	adds	r7, #20
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	40010000 	.word	0x40010000
 80087a4:	40000400 	.word	0x40000400
 80087a8:	40000800 	.word	0x40000800
 80087ac:	40000c00 	.word	0x40000c00
 80087b0:	40010400 	.word	0x40010400
 80087b4:	40014000 	.word	0x40014000
 80087b8:	40001800 	.word	0x40001800

080087bc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d109      	bne.n	80087e0 <HAL_TIM_OC_Start_IT+0x24>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	bf14      	ite	ne
 80087d8:	2301      	movne	r3, #1
 80087da:	2300      	moveq	r3, #0
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	e022      	b.n	8008826 <HAL_TIM_OC_Start_IT+0x6a>
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	2b04      	cmp	r3, #4
 80087e4:	d109      	bne.n	80087fa <HAL_TIM_OC_Start_IT+0x3e>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	bf14      	ite	ne
 80087f2:	2301      	movne	r3, #1
 80087f4:	2300      	moveq	r3, #0
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	e015      	b.n	8008826 <HAL_TIM_OC_Start_IT+0x6a>
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2b08      	cmp	r3, #8
 80087fe:	d109      	bne.n	8008814 <HAL_TIM_OC_Start_IT+0x58>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b01      	cmp	r3, #1
 800880a:	bf14      	ite	ne
 800880c:	2301      	movne	r3, #1
 800880e:	2300      	moveq	r3, #0
 8008810:	b2db      	uxtb	r3, r3
 8008812:	e008      	b.n	8008826 <HAL_TIM_OC_Start_IT+0x6a>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800881a:	b2db      	uxtb	r3, r3
 800881c:	2b01      	cmp	r3, #1
 800881e:	bf14      	ite	ne
 8008820:	2301      	movne	r3, #1
 8008822:	2300      	moveq	r3, #0
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e0c2      	b.n	80089b4 <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d104      	bne.n	800883e <HAL_TIM_OC_Start_IT+0x82>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2202      	movs	r2, #2
 8008838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800883c:	e013      	b.n	8008866 <HAL_TIM_OC_Start_IT+0xaa>
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	2b04      	cmp	r3, #4
 8008842:	d104      	bne.n	800884e <HAL_TIM_OC_Start_IT+0x92>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2202      	movs	r2, #2
 8008848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800884c:	e00b      	b.n	8008866 <HAL_TIM_OC_Start_IT+0xaa>
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	2b08      	cmp	r3, #8
 8008852:	d104      	bne.n	800885e <HAL_TIM_OC_Start_IT+0xa2>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2202      	movs	r2, #2
 8008858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800885c:	e003      	b.n	8008866 <HAL_TIM_OC_Start_IT+0xaa>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2202      	movs	r2, #2
 8008862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	2b0c      	cmp	r3, #12
 800886a:	d841      	bhi.n	80088f0 <HAL_TIM_OC_Start_IT+0x134>
 800886c:	a201      	add	r2, pc, #4	; (adr r2, 8008874 <HAL_TIM_OC_Start_IT+0xb8>)
 800886e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008872:	bf00      	nop
 8008874:	080088a9 	.word	0x080088a9
 8008878:	080088f1 	.word	0x080088f1
 800887c:	080088f1 	.word	0x080088f1
 8008880:	080088f1 	.word	0x080088f1
 8008884:	080088bb 	.word	0x080088bb
 8008888:	080088f1 	.word	0x080088f1
 800888c:	080088f1 	.word	0x080088f1
 8008890:	080088f1 	.word	0x080088f1
 8008894:	080088cd 	.word	0x080088cd
 8008898:	080088f1 	.word	0x080088f1
 800889c:	080088f1 	.word	0x080088f1
 80088a0:	080088f1 	.word	0x080088f1
 80088a4:	080088df 	.word	0x080088df
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68da      	ldr	r2, [r3, #12]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f042 0202 	orr.w	r2, r2, #2
 80088b6:	60da      	str	r2, [r3, #12]
      break;
 80088b8:	e01b      	b.n	80088f2 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68da      	ldr	r2, [r3, #12]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f042 0204 	orr.w	r2, r2, #4
 80088c8:	60da      	str	r2, [r3, #12]
      break;
 80088ca:	e012      	b.n	80088f2 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68da      	ldr	r2, [r3, #12]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f042 0208 	orr.w	r2, r2, #8
 80088da:	60da      	str	r2, [r3, #12]
      break;
 80088dc:	e009      	b.n	80088f2 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68da      	ldr	r2, [r3, #12]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f042 0210 	orr.w	r2, r2, #16
 80088ec:	60da      	str	r2, [r3, #12]
      break;
 80088ee:	e000      	b.n	80088f2 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 80088f0:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2201      	movs	r2, #1
 80088f8:	6839      	ldr	r1, [r7, #0]
 80088fa:	4618      	mov	r0, r3
 80088fc:	f000 ff12 	bl	8009724 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a2d      	ldr	r2, [pc, #180]	; (80089bc <HAL_TIM_OC_Start_IT+0x200>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d004      	beq.n	8008914 <HAL_TIM_OC_Start_IT+0x158>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a2c      	ldr	r2, [pc, #176]	; (80089c0 <HAL_TIM_OC_Start_IT+0x204>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d101      	bne.n	8008918 <HAL_TIM_OC_Start_IT+0x15c>
 8008914:	2301      	movs	r3, #1
 8008916:	e000      	b.n	800891a <HAL_TIM_OC_Start_IT+0x15e>
 8008918:	2300      	movs	r3, #0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d007      	beq.n	800892e <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800892c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a22      	ldr	r2, [pc, #136]	; (80089bc <HAL_TIM_OC_Start_IT+0x200>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d022      	beq.n	800897e <HAL_TIM_OC_Start_IT+0x1c2>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008940:	d01d      	beq.n	800897e <HAL_TIM_OC_Start_IT+0x1c2>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a1f      	ldr	r2, [pc, #124]	; (80089c4 <HAL_TIM_OC_Start_IT+0x208>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d018      	beq.n	800897e <HAL_TIM_OC_Start_IT+0x1c2>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a1d      	ldr	r2, [pc, #116]	; (80089c8 <HAL_TIM_OC_Start_IT+0x20c>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d013      	beq.n	800897e <HAL_TIM_OC_Start_IT+0x1c2>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a1c      	ldr	r2, [pc, #112]	; (80089cc <HAL_TIM_OC_Start_IT+0x210>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d00e      	beq.n	800897e <HAL_TIM_OC_Start_IT+0x1c2>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a16      	ldr	r2, [pc, #88]	; (80089c0 <HAL_TIM_OC_Start_IT+0x204>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d009      	beq.n	800897e <HAL_TIM_OC_Start_IT+0x1c2>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a18      	ldr	r2, [pc, #96]	; (80089d0 <HAL_TIM_OC_Start_IT+0x214>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d004      	beq.n	800897e <HAL_TIM_OC_Start_IT+0x1c2>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a16      	ldr	r2, [pc, #88]	; (80089d4 <HAL_TIM_OC_Start_IT+0x218>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d111      	bne.n	80089a2 <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	f003 0307 	and.w	r3, r3, #7
 8008988:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2b06      	cmp	r3, #6
 800898e:	d010      	beq.n	80089b2 <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f042 0201 	orr.w	r2, r2, #1
 800899e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089a0:	e007      	b.n	80089b2 <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f042 0201 	orr.w	r2, r2, #1
 80089b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3710      	adds	r7, #16
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	40010000 	.word	0x40010000
 80089c0:	40010400 	.word	0x40010400
 80089c4:	40000400 	.word	0x40000400
 80089c8:	40000800 	.word	0x40000800
 80089cc:	40000c00 	.word	0x40000c00
 80089d0:	40014000 	.word	0x40014000
 80089d4:	40001800 	.word	0x40001800

080089d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e041      	b.n	8008a6e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d106      	bne.n	8008a04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f839 	bl	8008a76 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2202      	movs	r2, #2
 8008a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	3304      	adds	r3, #4
 8008a14:	4619      	mov	r1, r3
 8008a16:	4610      	mov	r0, r2
 8008a18:	f000 fb9a 	bl	8009150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008a76:	b480      	push	{r7}
 8008a78:	b083      	sub	sp, #12
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008a7e:	bf00      	nop
 8008a80:	370c      	adds	r7, #12
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr

08008a8a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b086      	sub	sp, #24
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
 8008a92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d101      	bne.n	8008a9e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e097      	b.n	8008bce <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d106      	bne.n	8008ab8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7f9 fa50 	bl	8001f58 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2202      	movs	r2, #2
 8008abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	6812      	ldr	r2, [r2, #0]
 8008aca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ace:	f023 0307 	bic.w	r3, r3, #7
 8008ad2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	3304      	adds	r3, #4
 8008adc:	4619      	mov	r1, r3
 8008ade:	4610      	mov	r0, r2
 8008ae0:	f000 fb36 	bl	8009150 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	699b      	ldr	r3, [r3, #24]
 8008af2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6a1b      	ldr	r3, [r3, #32]
 8008afa:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	697a      	ldr	r2, [r7, #20]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b0c:	f023 0303 	bic.w	r3, r3, #3
 8008b10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	689a      	ldr	r2, [r3, #8]
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	021b      	lsls	r3, r3, #8
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008b2a:	f023 030c 	bic.w	r3, r3, #12
 8008b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	68da      	ldr	r2, [r3, #12]
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	69db      	ldr	r3, [r3, #28]
 8008b44:	021b      	lsls	r3, r3, #8
 8008b46:	4313      	orrs	r3, r2
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	011a      	lsls	r2, r3, #4
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	6a1b      	ldr	r3, [r3, #32]
 8008b58:	031b      	lsls	r3, r3, #12
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	693a      	ldr	r2, [r7, #16]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008b68:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008b70:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	685a      	ldr	r2, [r3, #4]
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	011b      	lsls	r3, r3, #4
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	4313      	orrs	r3, r2
 8008b82:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	697a      	ldr	r2, [r7, #20]
 8008b8a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3718      	adds	r7, #24
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b082      	sub	sp, #8
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	f003 0302 	and.w	r3, r3, #2
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	d122      	bne.n	8008c32 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	f003 0302 	and.w	r3, r3, #2
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d11b      	bne.n	8008c32 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f06f 0202 	mvn.w	r2, #2
 8008c02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	f003 0303 	and.w	r3, r3, #3
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d003      	beq.n	8008c20 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fa7b 	bl	8009114 <HAL_TIM_IC_CaptureCallback>
 8008c1e:	e005      	b.n	8008c2c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fa6d 	bl	8009100 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 fa7e 	bl	8009128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	691b      	ldr	r3, [r3, #16]
 8008c38:	f003 0304 	and.w	r3, r3, #4
 8008c3c:	2b04      	cmp	r3, #4
 8008c3e:	d122      	bne.n	8008c86 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	f003 0304 	and.w	r3, r3, #4
 8008c4a:	2b04      	cmp	r3, #4
 8008c4c:	d11b      	bne.n	8008c86 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f06f 0204 	mvn.w	r2, #4
 8008c56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d003      	beq.n	8008c74 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fa51 	bl	8009114 <HAL_TIM_IC_CaptureCallback>
 8008c72:	e005      	b.n	8008c80 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 fa43 	bl	8009100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fa54 	bl	8009128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	f003 0308 	and.w	r3, r3, #8
 8008c90:	2b08      	cmp	r3, #8
 8008c92:	d122      	bne.n	8008cda <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	f003 0308 	and.w	r3, r3, #8
 8008c9e:	2b08      	cmp	r3, #8
 8008ca0:	d11b      	bne.n	8008cda <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f06f 0208 	mvn.w	r2, #8
 8008caa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2204      	movs	r2, #4
 8008cb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	69db      	ldr	r3, [r3, #28]
 8008cb8:	f003 0303 	and.w	r3, r3, #3
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d003      	beq.n	8008cc8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fa27 	bl	8009114 <HAL_TIM_IC_CaptureCallback>
 8008cc6:	e005      	b.n	8008cd4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 fa19 	bl	8009100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 fa2a 	bl	8009128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	f003 0310 	and.w	r3, r3, #16
 8008ce4:	2b10      	cmp	r3, #16
 8008ce6:	d122      	bne.n	8008d2e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	f003 0310 	and.w	r3, r3, #16
 8008cf2:	2b10      	cmp	r3, #16
 8008cf4:	d11b      	bne.n	8008d2e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f06f 0210 	mvn.w	r2, #16
 8008cfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2208      	movs	r2, #8
 8008d04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	69db      	ldr	r3, [r3, #28]
 8008d0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d003      	beq.n	8008d1c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 f9fd 	bl	8009114 <HAL_TIM_IC_CaptureCallback>
 8008d1a:	e005      	b.n	8008d28 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 f9ef 	bl	8009100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fa00 	bl	8009128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	f003 0301 	and.w	r3, r3, #1
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d10e      	bne.n	8008d5a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	f003 0301 	and.w	r3, r3, #1
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d107      	bne.n	8008d5a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f06f 0201 	mvn.w	r2, #1
 8008d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 f9c9 	bl	80090ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d64:	2b80      	cmp	r3, #128	; 0x80
 8008d66:	d10e      	bne.n	8008d86 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d72:	2b80      	cmp	r3, #128	; 0x80
 8008d74:	d107      	bne.n	8008d86 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 fd7b 	bl	800987c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	691b      	ldr	r3, [r3, #16]
 8008d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d90:	2b40      	cmp	r3, #64	; 0x40
 8008d92:	d10e      	bne.n	8008db2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d9e:	2b40      	cmp	r3, #64	; 0x40
 8008da0:	d107      	bne.n	8008db2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 f9c5 	bl	800913c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	f003 0320 	and.w	r3, r3, #32
 8008dbc:	2b20      	cmp	r3, #32
 8008dbe:	d10e      	bne.n	8008dde <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	f003 0320 	and.w	r3, r3, #32
 8008dca:	2b20      	cmp	r3, #32
 8008dcc:	d107      	bne.n	8008dde <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f06f 0220 	mvn.w	r2, #32
 8008dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fd45 	bl	8009868 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008dde:	bf00      	nop
 8008de0:	3708      	adds	r7, #8
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
	...

08008de8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d101      	bne.n	8008e02 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008dfe:	2302      	movs	r3, #2
 8008e00:	e0ac      	b.n	8008f5c <HAL_TIM_PWM_ConfigChannel+0x174>
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2201      	movs	r2, #1
 8008e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2b0c      	cmp	r3, #12
 8008e0e:	f200 809f 	bhi.w	8008f50 <HAL_TIM_PWM_ConfigChannel+0x168>
 8008e12:	a201      	add	r2, pc, #4	; (adr r2, 8008e18 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e18:	08008e4d 	.word	0x08008e4d
 8008e1c:	08008f51 	.word	0x08008f51
 8008e20:	08008f51 	.word	0x08008f51
 8008e24:	08008f51 	.word	0x08008f51
 8008e28:	08008e8d 	.word	0x08008e8d
 8008e2c:	08008f51 	.word	0x08008f51
 8008e30:	08008f51 	.word	0x08008f51
 8008e34:	08008f51 	.word	0x08008f51
 8008e38:	08008ecf 	.word	0x08008ecf
 8008e3c:	08008f51 	.word	0x08008f51
 8008e40:	08008f51 	.word	0x08008f51
 8008e44:	08008f51 	.word	0x08008f51
 8008e48:	08008f0f 	.word	0x08008f0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68b9      	ldr	r1, [r7, #8]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f000 fa1c 	bl	8009290 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	699a      	ldr	r2, [r3, #24]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f042 0208 	orr.w	r2, r2, #8
 8008e66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	699a      	ldr	r2, [r3, #24]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f022 0204 	bic.w	r2, r2, #4
 8008e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	6999      	ldr	r1, [r3, #24]
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	691a      	ldr	r2, [r3, #16]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	430a      	orrs	r2, r1
 8008e88:	619a      	str	r2, [r3, #24]
      break;
 8008e8a:	e062      	b.n	8008f52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	68b9      	ldr	r1, [r7, #8]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 fa6c 	bl	8009370 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	699a      	ldr	r2, [r3, #24]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	699a      	ldr	r2, [r3, #24]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	6999      	ldr	r1, [r3, #24]
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	021a      	lsls	r2, r3, #8
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	430a      	orrs	r2, r1
 8008eca:	619a      	str	r2, [r3, #24]
      break;
 8008ecc:	e041      	b.n	8008f52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68b9      	ldr	r1, [r7, #8]
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f000 fac1 	bl	800945c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	69da      	ldr	r2, [r3, #28]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f042 0208 	orr.w	r2, r2, #8
 8008ee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	69da      	ldr	r2, [r3, #28]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f022 0204 	bic.w	r2, r2, #4
 8008ef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	69d9      	ldr	r1, [r3, #28]
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	691a      	ldr	r2, [r3, #16]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	430a      	orrs	r2, r1
 8008f0a:	61da      	str	r2, [r3, #28]
      break;
 8008f0c:	e021      	b.n	8008f52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68b9      	ldr	r1, [r7, #8]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f000 fb15 	bl	8009544 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	69da      	ldr	r2, [r3, #28]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	69da      	ldr	r2, [r3, #28]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	69d9      	ldr	r1, [r3, #28]
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	021a      	lsls	r2, r3, #8
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	430a      	orrs	r2, r1
 8008f4c:	61da      	str	r2, [r3, #28]
      break;
 8008f4e:	e000      	b.n	8008f52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008f50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3710      	adds	r7, #16
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d101      	bne.n	8008f7c <HAL_TIM_ConfigClockSource+0x18>
 8008f78:	2302      	movs	r3, #2
 8008f7a:	e0b3      	b.n	80090e4 <HAL_TIM_ConfigClockSource+0x180>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2202      	movs	r2, #2
 8008f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008f9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fa2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fb4:	d03e      	beq.n	8009034 <HAL_TIM_ConfigClockSource+0xd0>
 8008fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fba:	f200 8087 	bhi.w	80090cc <HAL_TIM_ConfigClockSource+0x168>
 8008fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fc2:	f000 8085 	beq.w	80090d0 <HAL_TIM_ConfigClockSource+0x16c>
 8008fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fca:	d87f      	bhi.n	80090cc <HAL_TIM_ConfigClockSource+0x168>
 8008fcc:	2b70      	cmp	r3, #112	; 0x70
 8008fce:	d01a      	beq.n	8009006 <HAL_TIM_ConfigClockSource+0xa2>
 8008fd0:	2b70      	cmp	r3, #112	; 0x70
 8008fd2:	d87b      	bhi.n	80090cc <HAL_TIM_ConfigClockSource+0x168>
 8008fd4:	2b60      	cmp	r3, #96	; 0x60
 8008fd6:	d050      	beq.n	800907a <HAL_TIM_ConfigClockSource+0x116>
 8008fd8:	2b60      	cmp	r3, #96	; 0x60
 8008fda:	d877      	bhi.n	80090cc <HAL_TIM_ConfigClockSource+0x168>
 8008fdc:	2b50      	cmp	r3, #80	; 0x50
 8008fde:	d03c      	beq.n	800905a <HAL_TIM_ConfigClockSource+0xf6>
 8008fe0:	2b50      	cmp	r3, #80	; 0x50
 8008fe2:	d873      	bhi.n	80090cc <HAL_TIM_ConfigClockSource+0x168>
 8008fe4:	2b40      	cmp	r3, #64	; 0x40
 8008fe6:	d058      	beq.n	800909a <HAL_TIM_ConfigClockSource+0x136>
 8008fe8:	2b40      	cmp	r3, #64	; 0x40
 8008fea:	d86f      	bhi.n	80090cc <HAL_TIM_ConfigClockSource+0x168>
 8008fec:	2b30      	cmp	r3, #48	; 0x30
 8008fee:	d064      	beq.n	80090ba <HAL_TIM_ConfigClockSource+0x156>
 8008ff0:	2b30      	cmp	r3, #48	; 0x30
 8008ff2:	d86b      	bhi.n	80090cc <HAL_TIM_ConfigClockSource+0x168>
 8008ff4:	2b20      	cmp	r3, #32
 8008ff6:	d060      	beq.n	80090ba <HAL_TIM_ConfigClockSource+0x156>
 8008ff8:	2b20      	cmp	r3, #32
 8008ffa:	d867      	bhi.n	80090cc <HAL_TIM_ConfigClockSource+0x168>
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d05c      	beq.n	80090ba <HAL_TIM_ConfigClockSource+0x156>
 8009000:	2b10      	cmp	r3, #16
 8009002:	d05a      	beq.n	80090ba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009004:	e062      	b.n	80090cc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6818      	ldr	r0, [r3, #0]
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	6899      	ldr	r1, [r3, #8]
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	685a      	ldr	r2, [r3, #4]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	f000 fb65 	bl	80096e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009028:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	609a      	str	r2, [r3, #8]
      break;
 8009032:	e04e      	b.n	80090d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6818      	ldr	r0, [r3, #0]
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	6899      	ldr	r1, [r3, #8]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	685a      	ldr	r2, [r3, #4]
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	f000 fb4e 	bl	80096e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	689a      	ldr	r2, [r3, #8]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009056:	609a      	str	r2, [r3, #8]
      break;
 8009058:	e03b      	b.n	80090d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6818      	ldr	r0, [r3, #0]
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	6859      	ldr	r1, [r3, #4]
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	461a      	mov	r2, r3
 8009068:	f000 fac2 	bl	80095f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2150      	movs	r1, #80	; 0x50
 8009072:	4618      	mov	r0, r3
 8009074:	f000 fb1b 	bl	80096ae <TIM_ITRx_SetConfig>
      break;
 8009078:	e02b      	b.n	80090d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6818      	ldr	r0, [r3, #0]
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	6859      	ldr	r1, [r3, #4]
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	461a      	mov	r2, r3
 8009088:	f000 fae1 	bl	800964e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2160      	movs	r1, #96	; 0x60
 8009092:	4618      	mov	r0, r3
 8009094:	f000 fb0b 	bl	80096ae <TIM_ITRx_SetConfig>
      break;
 8009098:	e01b      	b.n	80090d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6818      	ldr	r0, [r3, #0]
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	6859      	ldr	r1, [r3, #4]
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	461a      	mov	r2, r3
 80090a8:	f000 faa2 	bl	80095f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2140      	movs	r1, #64	; 0x40
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 fafb 	bl	80096ae <TIM_ITRx_SetConfig>
      break;
 80090b8:	e00b      	b.n	80090d2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4619      	mov	r1, r3
 80090c4:	4610      	mov	r0, r2
 80090c6:	f000 faf2 	bl	80096ae <TIM_ITRx_SetConfig>
        break;
 80090ca:	e002      	b.n	80090d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80090cc:	bf00      	nop
 80090ce:	e000      	b.n	80090d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80090d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2201      	movs	r2, #1
 80090d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80090f4:	bf00      	nop
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009108:	bf00      	nop
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800911c:	bf00      	nop
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009144:	bf00      	nop
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a40      	ldr	r2, [pc, #256]	; (8009264 <TIM_Base_SetConfig+0x114>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d013      	beq.n	8009190 <TIM_Base_SetConfig+0x40>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800916e:	d00f      	beq.n	8009190 <TIM_Base_SetConfig+0x40>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a3d      	ldr	r2, [pc, #244]	; (8009268 <TIM_Base_SetConfig+0x118>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d00b      	beq.n	8009190 <TIM_Base_SetConfig+0x40>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4a3c      	ldr	r2, [pc, #240]	; (800926c <TIM_Base_SetConfig+0x11c>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d007      	beq.n	8009190 <TIM_Base_SetConfig+0x40>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a3b      	ldr	r2, [pc, #236]	; (8009270 <TIM_Base_SetConfig+0x120>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d003      	beq.n	8009190 <TIM_Base_SetConfig+0x40>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4a3a      	ldr	r2, [pc, #232]	; (8009274 <TIM_Base_SetConfig+0x124>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d108      	bne.n	80091a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	4313      	orrs	r3, r2
 80091a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a2f      	ldr	r2, [pc, #188]	; (8009264 <TIM_Base_SetConfig+0x114>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d02b      	beq.n	8009202 <TIM_Base_SetConfig+0xb2>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091b0:	d027      	beq.n	8009202 <TIM_Base_SetConfig+0xb2>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a2c      	ldr	r2, [pc, #176]	; (8009268 <TIM_Base_SetConfig+0x118>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d023      	beq.n	8009202 <TIM_Base_SetConfig+0xb2>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4a2b      	ldr	r2, [pc, #172]	; (800926c <TIM_Base_SetConfig+0x11c>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d01f      	beq.n	8009202 <TIM_Base_SetConfig+0xb2>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a2a      	ldr	r2, [pc, #168]	; (8009270 <TIM_Base_SetConfig+0x120>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d01b      	beq.n	8009202 <TIM_Base_SetConfig+0xb2>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a29      	ldr	r2, [pc, #164]	; (8009274 <TIM_Base_SetConfig+0x124>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d017      	beq.n	8009202 <TIM_Base_SetConfig+0xb2>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a28      	ldr	r2, [pc, #160]	; (8009278 <TIM_Base_SetConfig+0x128>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d013      	beq.n	8009202 <TIM_Base_SetConfig+0xb2>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a27      	ldr	r2, [pc, #156]	; (800927c <TIM_Base_SetConfig+0x12c>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d00f      	beq.n	8009202 <TIM_Base_SetConfig+0xb2>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4a26      	ldr	r2, [pc, #152]	; (8009280 <TIM_Base_SetConfig+0x130>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d00b      	beq.n	8009202 <TIM_Base_SetConfig+0xb2>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4a25      	ldr	r2, [pc, #148]	; (8009284 <TIM_Base_SetConfig+0x134>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d007      	beq.n	8009202 <TIM_Base_SetConfig+0xb2>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4a24      	ldr	r2, [pc, #144]	; (8009288 <TIM_Base_SetConfig+0x138>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d003      	beq.n	8009202 <TIM_Base_SetConfig+0xb2>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4a23      	ldr	r2, [pc, #140]	; (800928c <TIM_Base_SetConfig+0x13c>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d108      	bne.n	8009214 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	68fa      	ldr	r2, [r7, #12]
 8009210:	4313      	orrs	r3, r2
 8009212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	695b      	ldr	r3, [r3, #20]
 800921e:	4313      	orrs	r3, r2
 8009220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	68fa      	ldr	r2, [r7, #12]
 8009226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	689a      	ldr	r2, [r3, #8]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a0a      	ldr	r2, [pc, #40]	; (8009264 <TIM_Base_SetConfig+0x114>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d003      	beq.n	8009248 <TIM_Base_SetConfig+0xf8>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4a0c      	ldr	r2, [pc, #48]	; (8009274 <TIM_Base_SetConfig+0x124>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d103      	bne.n	8009250 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	691a      	ldr	r2, [r3, #16]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	615a      	str	r2, [r3, #20]
}
 8009256:	bf00      	nop
 8009258:	3714      	adds	r7, #20
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	40010000 	.word	0x40010000
 8009268:	40000400 	.word	0x40000400
 800926c:	40000800 	.word	0x40000800
 8009270:	40000c00 	.word	0x40000c00
 8009274:	40010400 	.word	0x40010400
 8009278:	40014000 	.word	0x40014000
 800927c:	40014400 	.word	0x40014400
 8009280:	40014800 	.word	0x40014800
 8009284:	40001800 	.word	0x40001800
 8009288:	40001c00 	.word	0x40001c00
 800928c:	40002000 	.word	0x40002000

08009290 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009290:	b480      	push	{r7}
 8009292:	b087      	sub	sp, #28
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a1b      	ldr	r3, [r3, #32]
 800929e:	f023 0201 	bic.w	r2, r3, #1
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a1b      	ldr	r3, [r3, #32]
 80092aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	699b      	ldr	r3, [r3, #24]
 80092b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f023 0303 	bic.w	r3, r3, #3
 80092c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	f023 0302 	bic.w	r3, r3, #2
 80092d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	697a      	ldr	r2, [r7, #20]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a20      	ldr	r2, [pc, #128]	; (8009368 <TIM_OC1_SetConfig+0xd8>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d003      	beq.n	80092f4 <TIM_OC1_SetConfig+0x64>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a1f      	ldr	r2, [pc, #124]	; (800936c <TIM_OC1_SetConfig+0xdc>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d10c      	bne.n	800930e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	f023 0308 	bic.w	r3, r3, #8
 80092fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	697a      	ldr	r2, [r7, #20]
 8009302:	4313      	orrs	r3, r2
 8009304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	f023 0304 	bic.w	r3, r3, #4
 800930c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4a15      	ldr	r2, [pc, #84]	; (8009368 <TIM_OC1_SetConfig+0xd8>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d003      	beq.n	800931e <TIM_OC1_SetConfig+0x8e>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4a14      	ldr	r2, [pc, #80]	; (800936c <TIM_OC1_SetConfig+0xdc>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d111      	bne.n	8009342 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800932c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	695b      	ldr	r3, [r3, #20]
 8009332:	693a      	ldr	r2, [r7, #16]
 8009334:	4313      	orrs	r3, r2
 8009336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	693a      	ldr	r2, [r7, #16]
 800933e:	4313      	orrs	r3, r2
 8009340:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	693a      	ldr	r2, [r7, #16]
 8009346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	685a      	ldr	r2, [r3, #4]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	697a      	ldr	r2, [r7, #20]
 800935a:	621a      	str	r2, [r3, #32]
}
 800935c:	bf00      	nop
 800935e:	371c      	adds	r7, #28
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr
 8009368:	40010000 	.word	0x40010000
 800936c:	40010400 	.word	0x40010400

08009370 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009370:	b480      	push	{r7}
 8009372:	b087      	sub	sp, #28
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a1b      	ldr	r3, [r3, #32]
 800937e:	f023 0210 	bic.w	r2, r3, #16
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a1b      	ldr	r3, [r3, #32]
 800938a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800939e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	021b      	lsls	r3, r3, #8
 80093ae:	68fa      	ldr	r2, [r7, #12]
 80093b0:	4313      	orrs	r3, r2
 80093b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	f023 0320 	bic.w	r3, r3, #32
 80093ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	011b      	lsls	r3, r3, #4
 80093c2:	697a      	ldr	r2, [r7, #20]
 80093c4:	4313      	orrs	r3, r2
 80093c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4a22      	ldr	r2, [pc, #136]	; (8009454 <TIM_OC2_SetConfig+0xe4>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d003      	beq.n	80093d8 <TIM_OC2_SetConfig+0x68>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a21      	ldr	r2, [pc, #132]	; (8009458 <TIM_OC2_SetConfig+0xe8>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d10d      	bne.n	80093f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	011b      	lsls	r3, r3, #4
 80093e6:	697a      	ldr	r2, [r7, #20]
 80093e8:	4313      	orrs	r3, r2
 80093ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a17      	ldr	r2, [pc, #92]	; (8009454 <TIM_OC2_SetConfig+0xe4>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d003      	beq.n	8009404 <TIM_OC2_SetConfig+0x94>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a16      	ldr	r2, [pc, #88]	; (8009458 <TIM_OC2_SetConfig+0xe8>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d113      	bne.n	800942c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800940a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009412:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	693a      	ldr	r2, [r7, #16]
 800941c:	4313      	orrs	r3, r2
 800941e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	699b      	ldr	r3, [r3, #24]
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	693a      	ldr	r2, [r7, #16]
 8009428:	4313      	orrs	r3, r2
 800942a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	693a      	ldr	r2, [r7, #16]
 8009430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	685a      	ldr	r2, [r3, #4]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	697a      	ldr	r2, [r7, #20]
 8009444:	621a      	str	r2, [r3, #32]
}
 8009446:	bf00      	nop
 8009448:	371c      	adds	r7, #28
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop
 8009454:	40010000 	.word	0x40010000
 8009458:	40010400 	.word	0x40010400

0800945c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800945c:	b480      	push	{r7}
 800945e:	b087      	sub	sp, #28
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a1b      	ldr	r3, [r3, #32]
 800946a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a1b      	ldr	r3, [r3, #32]
 8009476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	69db      	ldr	r3, [r3, #28]
 8009482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800948a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f023 0303 	bic.w	r3, r3, #3
 8009492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	4313      	orrs	r3, r2
 800949c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	021b      	lsls	r3, r3, #8
 80094ac:	697a      	ldr	r2, [r7, #20]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a21      	ldr	r2, [pc, #132]	; (800953c <TIM_OC3_SetConfig+0xe0>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d003      	beq.n	80094c2 <TIM_OC3_SetConfig+0x66>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a20      	ldr	r2, [pc, #128]	; (8009540 <TIM_OC3_SetConfig+0xe4>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d10d      	bne.n	80094de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	021b      	lsls	r3, r3, #8
 80094d0:	697a      	ldr	r2, [r7, #20]
 80094d2:	4313      	orrs	r3, r2
 80094d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a16      	ldr	r2, [pc, #88]	; (800953c <TIM_OC3_SetConfig+0xe0>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d003      	beq.n	80094ee <TIM_OC3_SetConfig+0x92>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	4a15      	ldr	r2, [pc, #84]	; (8009540 <TIM_OC3_SetConfig+0xe4>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d113      	bne.n	8009516 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80094fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	695b      	ldr	r3, [r3, #20]
 8009502:	011b      	lsls	r3, r3, #4
 8009504:	693a      	ldr	r2, [r7, #16]
 8009506:	4313      	orrs	r3, r2
 8009508:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	699b      	ldr	r3, [r3, #24]
 800950e:	011b      	lsls	r3, r3, #4
 8009510:	693a      	ldr	r2, [r7, #16]
 8009512:	4313      	orrs	r3, r2
 8009514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	693a      	ldr	r2, [r7, #16]
 800951a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	685a      	ldr	r2, [r3, #4]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	697a      	ldr	r2, [r7, #20]
 800952e:	621a      	str	r2, [r3, #32]
}
 8009530:	bf00      	nop
 8009532:	371c      	adds	r7, #28
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr
 800953c:	40010000 	.word	0x40010000
 8009540:	40010400 	.word	0x40010400

08009544 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009544:	b480      	push	{r7}
 8009546:	b087      	sub	sp, #28
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6a1b      	ldr	r3, [r3, #32]
 8009552:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6a1b      	ldr	r3, [r3, #32]
 800955e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	69db      	ldr	r3, [r3, #28]
 800956a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800957a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	021b      	lsls	r3, r3, #8
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	4313      	orrs	r3, r2
 8009586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800958e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	031b      	lsls	r3, r3, #12
 8009596:	693a      	ldr	r2, [r7, #16]
 8009598:	4313      	orrs	r3, r2
 800959a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a12      	ldr	r2, [pc, #72]	; (80095e8 <TIM_OC4_SetConfig+0xa4>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d003      	beq.n	80095ac <TIM_OC4_SetConfig+0x68>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a11      	ldr	r2, [pc, #68]	; (80095ec <TIM_OC4_SetConfig+0xa8>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d109      	bne.n	80095c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	695b      	ldr	r3, [r3, #20]
 80095b8:	019b      	lsls	r3, r3, #6
 80095ba:	697a      	ldr	r2, [r7, #20]
 80095bc:	4313      	orrs	r3, r2
 80095be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	697a      	ldr	r2, [r7, #20]
 80095c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	685a      	ldr	r2, [r3, #4]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	621a      	str	r2, [r3, #32]
}
 80095da:	bf00      	nop
 80095dc:	371c      	adds	r7, #28
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	40010000 	.word	0x40010000
 80095ec:	40010400 	.word	0x40010400

080095f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b087      	sub	sp, #28
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6a1b      	ldr	r3, [r3, #32]
 8009600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6a1b      	ldr	r3, [r3, #32]
 8009606:	f023 0201 	bic.w	r2, r3, #1
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	699b      	ldr	r3, [r3, #24]
 8009612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800961a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	011b      	lsls	r3, r3, #4
 8009620:	693a      	ldr	r2, [r7, #16]
 8009622:	4313      	orrs	r3, r2
 8009624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	f023 030a 	bic.w	r3, r3, #10
 800962c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800962e:	697a      	ldr	r2, [r7, #20]
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	4313      	orrs	r3, r2
 8009634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	693a      	ldr	r2, [r7, #16]
 800963a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	697a      	ldr	r2, [r7, #20]
 8009640:	621a      	str	r2, [r3, #32]
}
 8009642:	bf00      	nop
 8009644:	371c      	adds	r7, #28
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr

0800964e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800964e:	b480      	push	{r7}
 8009650:	b087      	sub	sp, #28
 8009652:	af00      	add	r7, sp, #0
 8009654:	60f8      	str	r0, [r7, #12]
 8009656:	60b9      	str	r1, [r7, #8]
 8009658:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6a1b      	ldr	r3, [r3, #32]
 800965e:	f023 0210 	bic.w	r2, r3, #16
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	699b      	ldr	r3, [r3, #24]
 800966a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6a1b      	ldr	r3, [r3, #32]
 8009670:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009678:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	031b      	lsls	r3, r3, #12
 800967e:	697a      	ldr	r2, [r7, #20]
 8009680:	4313      	orrs	r3, r2
 8009682:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800968a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	011b      	lsls	r3, r3, #4
 8009690:	693a      	ldr	r2, [r7, #16]
 8009692:	4313      	orrs	r3, r2
 8009694:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	697a      	ldr	r2, [r7, #20]
 800969a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	621a      	str	r2, [r3, #32]
}
 80096a2:	bf00      	nop
 80096a4:	371c      	adds	r7, #28
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr

080096ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80096ae:	b480      	push	{r7}
 80096b0:	b085      	sub	sp, #20
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
 80096b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	f043 0307 	orr.w	r3, r3, #7
 80096d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	609a      	str	r2, [r3, #8]
}
 80096d8:	bf00      	nop
 80096da:	3714      	adds	r7, #20
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b087      	sub	sp, #28
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	607a      	str	r2, [r7, #4]
 80096f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	021a      	lsls	r2, r3, #8
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	431a      	orrs	r2, r3
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	4313      	orrs	r3, r2
 800970c:	697a      	ldr	r2, [r7, #20]
 800970e:	4313      	orrs	r3, r2
 8009710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	609a      	str	r2, [r3, #8]
}
 8009718:	bf00      	nop
 800971a:	371c      	adds	r7, #28
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009724:	b480      	push	{r7}
 8009726:	b087      	sub	sp, #28
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	f003 031f 	and.w	r3, r3, #31
 8009736:	2201      	movs	r2, #1
 8009738:	fa02 f303 	lsl.w	r3, r2, r3
 800973c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6a1a      	ldr	r2, [r3, #32]
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	43db      	mvns	r3, r3
 8009746:	401a      	ands	r2, r3
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6a1a      	ldr	r2, [r3, #32]
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	f003 031f 	and.w	r3, r3, #31
 8009756:	6879      	ldr	r1, [r7, #4]
 8009758:	fa01 f303 	lsl.w	r3, r1, r3
 800975c:	431a      	orrs	r2, r3
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	621a      	str	r2, [r3, #32]
}
 8009762:	bf00      	nop
 8009764:	371c      	adds	r7, #28
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
	...

08009770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009770:	b480      	push	{r7}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009780:	2b01      	cmp	r3, #1
 8009782:	d101      	bne.n	8009788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009784:	2302      	movs	r3, #2
 8009786:	e05a      	b.n	800983e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2202      	movs	r2, #2
 8009794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	689b      	ldr	r3, [r3, #8]
 80097a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a21      	ldr	r2, [pc, #132]	; (800984c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d022      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097d4:	d01d      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a1d      	ldr	r2, [pc, #116]	; (8009850 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d018      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a1b      	ldr	r2, [pc, #108]	; (8009854 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d013      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a1a      	ldr	r2, [pc, #104]	; (8009858 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d00e      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a18      	ldr	r2, [pc, #96]	; (800985c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d009      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a17      	ldr	r2, [pc, #92]	; (8009860 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d004      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a15      	ldr	r2, [pc, #84]	; (8009864 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d10c      	bne.n	800982c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009818:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	68ba      	ldr	r2, [r7, #8]
 8009820:	4313      	orrs	r3, r2
 8009822:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	68ba      	ldr	r2, [r7, #8]
 800982a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3714      	adds	r7, #20
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	40010000 	.word	0x40010000
 8009850:	40000400 	.word	0x40000400
 8009854:	40000800 	.word	0x40000800
 8009858:	40000c00 	.word	0x40000c00
 800985c:	40010400 	.word	0x40010400
 8009860:	40014000 	.word	0x40014000
 8009864:	40001800 	.word	0x40001800

08009868 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009884:	bf00      	nop
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009890:	b084      	sub	sp, #16
 8009892:	b580      	push	{r7, lr}
 8009894:	b084      	sub	sp, #16
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
 800989a:	f107 001c 	add.w	r0, r7, #28
 800989e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80098a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d122      	bne.n	80098ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80098bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80098d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d105      	bne.n	80098e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f94a 	bl	8009b7c <USB_CoreReset>
 80098e8:	4603      	mov	r3, r0
 80098ea:	73fb      	strb	r3, [r7, #15]
 80098ec:	e01a      	b.n	8009924 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 f93e 	bl	8009b7c <USB_CoreReset>
 8009900:	4603      	mov	r3, r0
 8009902:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009906:	2b00      	cmp	r3, #0
 8009908:	d106      	bne.n	8009918 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800990e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	639a      	str	r2, [r3, #56]	; 0x38
 8009916:	e005      	b.n	8009924 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800991c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009926:	2b01      	cmp	r3, #1
 8009928:	d10b      	bne.n	8009942 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	f043 0206 	orr.w	r2, r3, #6
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	f043 0220 	orr.w	r2, r3, #32
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009942:	7bfb      	ldrb	r3, [r7, #15]
}
 8009944:	4618      	mov	r0, r3
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800994e:	b004      	add	sp, #16
 8009950:	4770      	bx	lr

08009952 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009952:	b480      	push	{r7}
 8009954:	b083      	sub	sp, #12
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	f043 0201 	orr.w	r2, r3, #1
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009966:	2300      	movs	r3, #0
}
 8009968:	4618      	mov	r0, r3
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	f023 0201 	bic.w	r2, r3, #1
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009988:	2300      	movs	r3, #0
}
 800998a:	4618      	mov	r0, r3
 800998c:	370c      	adds	r7, #12
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr

08009996 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b082      	sub	sp, #8
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
 800999e:	460b      	mov	r3, r1
 80099a0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80099ae:	78fb      	ldrb	r3, [r7, #3]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d106      	bne.n	80099c2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	68db      	ldr	r3, [r3, #12]
 80099b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	60da      	str	r2, [r3, #12]
 80099c0:	e00b      	b.n	80099da <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80099c2:	78fb      	ldrb	r3, [r7, #3]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d106      	bne.n	80099d6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	60da      	str	r2, [r3, #12]
 80099d4:	e001      	b.n	80099da <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	e003      	b.n	80099e2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80099da:	2032      	movs	r0, #50	; 0x32
 80099dc:	f7f9 ff0e 	bl	80037fc <HAL_Delay>

  return HAL_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3708      	adds	r7, #8
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
	...

080099ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80099f6:	2300      	movs	r3, #0
 80099f8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	019b      	lsls	r3, r3, #6
 80099fe:	f043 0220 	orr.w	r2, r3, #32
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	60fb      	str	r3, [r7, #12]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	4a09      	ldr	r2, [pc, #36]	; (8009a34 <USB_FlushTxFifo+0x48>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d901      	bls.n	8009a18 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009a14:	2303      	movs	r3, #3
 8009a16:	e006      	b.n	8009a26 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	691b      	ldr	r3, [r3, #16]
 8009a1c:	f003 0320 	and.w	r3, r3, #32
 8009a20:	2b20      	cmp	r3, #32
 8009a22:	d0f0      	beq.n	8009a06 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3714      	adds	r7, #20
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	00030d40 	.word	0x00030d40

08009a38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009a40:	2300      	movs	r3, #0
 8009a42:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2210      	movs	r2, #16
 8009a48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	60fb      	str	r3, [r7, #12]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	4a09      	ldr	r2, [pc, #36]	; (8009a78 <USB_FlushRxFifo+0x40>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d901      	bls.n	8009a5c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009a58:	2303      	movs	r3, #3
 8009a5a:	e006      	b.n	8009a6a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	f003 0310 	and.w	r3, r3, #16
 8009a64:	2b10      	cmp	r3, #16
 8009a66:	d0f0      	beq.n	8009a4a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3714      	adds	r7, #20
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	00030d40 	.word	0x00030d40

08009a7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b089      	sub	sp, #36	; 0x24
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	4611      	mov	r1, r2
 8009a88:	461a      	mov	r2, r3
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	71fb      	strb	r3, [r7, #7]
 8009a8e:	4613      	mov	r3, r2
 8009a90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009a9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d11a      	bne.n	8009ad8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009aa2:	88bb      	ldrh	r3, [r7, #4]
 8009aa4:	3303      	adds	r3, #3
 8009aa6:	089b      	lsrs	r3, r3, #2
 8009aa8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009aaa:	2300      	movs	r3, #0
 8009aac:	61bb      	str	r3, [r7, #24]
 8009aae:	e00f      	b.n	8009ad0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009ab0:	79fb      	ldrb	r3, [r7, #7]
 8009ab2:	031a      	lsls	r2, r3, #12
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009abc:	461a      	mov	r2, r3
 8009abe:	69fb      	ldr	r3, [r7, #28]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	3304      	adds	r3, #4
 8009ac8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	3301      	adds	r3, #1
 8009ace:	61bb      	str	r3, [r7, #24]
 8009ad0:	69ba      	ldr	r2, [r7, #24]
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d3eb      	bcc.n	8009ab0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3724      	adds	r7, #36	; 0x24
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr

08009ae6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009ae6:	b480      	push	{r7}
 8009ae8:	b089      	sub	sp, #36	; 0x24
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	60f8      	str	r0, [r7, #12]
 8009aee:	60b9      	str	r1, [r7, #8]
 8009af0:	4613      	mov	r3, r2
 8009af2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009afc:	88fb      	ldrh	r3, [r7, #6]
 8009afe:	3303      	adds	r3, #3
 8009b00:	089b      	lsrs	r3, r3, #2
 8009b02:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009b04:	2300      	movs	r3, #0
 8009b06:	61bb      	str	r3, [r7, #24]
 8009b08:	e00b      	b.n	8009b22 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	601a      	str	r2, [r3, #0]
    pDest++;
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	3304      	adds	r3, #4
 8009b1a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	3301      	adds	r3, #1
 8009b20:	61bb      	str	r3, [r7, #24]
 8009b22:	69ba      	ldr	r2, [r7, #24]
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d3ef      	bcc.n	8009b0a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009b2a:	69fb      	ldr	r3, [r7, #28]
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3724      	adds	r7, #36	; 0x24
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b085      	sub	sp, #20
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	695b      	ldr	r3, [r3, #20]
 8009b44:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	699b      	ldr	r3, [r3, #24]
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	4013      	ands	r3, r2
 8009b4e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009b50:	68fb      	ldr	r3, [r7, #12]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3714      	adds	r7, #20
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr

08009b5e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009b5e:	b480      	push	{r7}
 8009b60:	b083      	sub	sp, #12
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	695b      	ldr	r3, [r3, #20]
 8009b6a:	f003 0301 	and.w	r3, r3, #1
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	370c      	adds	r7, #12
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr
	...

08009b7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b085      	sub	sp, #20
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009b84:	2300      	movs	r3, #0
 8009b86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	60fb      	str	r3, [r7, #12]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	4a13      	ldr	r2, [pc, #76]	; (8009be0 <USB_CoreReset+0x64>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d901      	bls.n	8009b9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009b96:	2303      	movs	r3, #3
 8009b98:	e01b      	b.n	8009bd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	691b      	ldr	r3, [r3, #16]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	daf2      	bge.n	8009b88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	691b      	ldr	r3, [r3, #16]
 8009baa:	f043 0201 	orr.w	r2, r3, #1
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	60fb      	str	r3, [r7, #12]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	4a09      	ldr	r2, [pc, #36]	; (8009be0 <USB_CoreReset+0x64>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d901      	bls.n	8009bc4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	e006      	b.n	8009bd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	691b      	ldr	r3, [r3, #16]
 8009bc8:	f003 0301 	and.w	r3, r3, #1
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d0f0      	beq.n	8009bb2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009bd0:	2300      	movs	r3, #0
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3714      	adds	r7, #20
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop
 8009be0:	00030d40 	.word	0x00030d40

08009be4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009be4:	b084      	sub	sp, #16
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b084      	sub	sp, #16
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
 8009bee:	f107 001c 	add.w	r0, r7, #28
 8009bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c00:	461a      	mov	r2, r3
 8009c02:	2300      	movs	r3, #0
 8009c04:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c16:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c22:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d018      	beq.n	8009c68 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d10a      	bne.n	8009c52 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	68ba      	ldr	r2, [r7, #8]
 8009c46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c4a:	f043 0304 	orr.w	r3, r3, #4
 8009c4e:	6013      	str	r3, [r2, #0]
 8009c50:	e014      	b.n	8009c7c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	68ba      	ldr	r2, [r7, #8]
 8009c5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c60:	f023 0304 	bic.w	r3, r3, #4
 8009c64:	6013      	str	r3, [r2, #0]
 8009c66:	e009      	b.n	8009c7c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	68ba      	ldr	r2, [r7, #8]
 8009c72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c76:	f023 0304 	bic.w	r3, r3, #4
 8009c7a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8009c7c:	2110      	movs	r1, #16
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f7ff feb4 	bl	80099ec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7ff fed7 	bl	8009a38 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	60fb      	str	r3, [r7, #12]
 8009c8e:	e015      	b.n	8009cbc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	015a      	lsls	r2, r3, #5
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	4413      	add	r3, r2
 8009c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ca2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	015a      	lsls	r2, r3, #5
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	4413      	add	r3, r2
 8009cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	60fb      	str	r3, [r7, #12]
 8009cbc:	6a3b      	ldr	r3, [r7, #32]
 8009cbe:	68fa      	ldr	r2, [r7, #12]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d3e5      	bcc.n	8009c90 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8009cc4:	2101      	movs	r1, #1
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 f8ac 	bl	8009e24 <USB_DriveVbus>

  HAL_Delay(200U);
 8009ccc:	20c8      	movs	r0, #200	; 0xc8
 8009cce:	f7f9 fd95 	bl	80037fc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cde:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d00b      	beq.n	8009d04 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cf2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a14      	ldr	r2, [pc, #80]	; (8009d48 <USB_HostInit+0x164>)
 8009cf8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a13      	ldr	r2, [pc, #76]	; (8009d4c <USB_HostInit+0x168>)
 8009cfe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009d02:	e009      	b.n	8009d18 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2280      	movs	r2, #128	; 0x80
 8009d08:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4a10      	ldr	r2, [pc, #64]	; (8009d50 <USB_HostInit+0x16c>)
 8009d0e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4a10      	ldr	r2, [pc, #64]	; (8009d54 <USB_HostInit+0x170>)
 8009d14:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d105      	bne.n	8009d2a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	699b      	ldr	r3, [r3, #24]
 8009d22:	f043 0210 	orr.w	r2, r3, #16
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	699a      	ldr	r2, [r3, #24]
 8009d2e:	4b0a      	ldr	r3, [pc, #40]	; (8009d58 <USB_HostInit+0x174>)
 8009d30:	4313      	orrs	r3, r2
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d42:	b004      	add	sp, #16
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop
 8009d48:	01000200 	.word	0x01000200
 8009d4c:	00e00300 	.word	0x00e00300
 8009d50:	00600080 	.word	0x00600080
 8009d54:	004000e0 	.word	0x004000e0
 8009d58:	a3200008 	.word	0xa3200008

08009d5c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	460b      	mov	r3, r1
 8009d66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d7a:	f023 0303 	bic.w	r3, r3, #3
 8009d7e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d86:	681a      	ldr	r2, [r3, #0]
 8009d88:	78fb      	ldrb	r3, [r7, #3]
 8009d8a:	f003 0303 	and.w	r3, r3, #3
 8009d8e:	68f9      	ldr	r1, [r7, #12]
 8009d90:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009d94:	4313      	orrs	r3, r2
 8009d96:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009d98:	78fb      	ldrb	r3, [r7, #3]
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d107      	bne.n	8009dae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009da4:	461a      	mov	r2, r3
 8009da6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009daa:	6053      	str	r3, [r2, #4]
 8009dac:	e009      	b.n	8009dc2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009dae:	78fb      	ldrb	r3, [r7, #3]
 8009db0:	2b02      	cmp	r3, #2
 8009db2:	d106      	bne.n	8009dc2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009dba:	461a      	mov	r2, r3
 8009dbc:	f241 7370 	movw	r3, #6000	; 0x1770
 8009dc0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009dc2:	2300      	movs	r3, #0
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3714      	adds	r7, #20
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009df0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	68fa      	ldr	r2, [r7, #12]
 8009df6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dfe:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009e00:	2064      	movs	r0, #100	; 0x64
 8009e02:	f7f9 fcfb 	bl	80037fc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009e0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e12:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009e14:	200a      	movs	r0, #10
 8009e16:	f7f9 fcf1 	bl	80037fc <HAL_Delay>

  return HAL_OK;
 8009e1a:	2300      	movs	r3, #0
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3710      	adds	r7, #16
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b085      	sub	sp, #20
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009e34:	2300      	movs	r3, #0
 8009e36:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009e48:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d109      	bne.n	8009e68 <USB_DriveVbus+0x44>
 8009e54:	78fb      	ldrb	r3, [r7, #3]
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d106      	bne.n	8009e68 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009e62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009e66:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e72:	d109      	bne.n	8009e88 <USB_DriveVbus+0x64>
 8009e74:	78fb      	ldrb	r3, [r7, #3]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d106      	bne.n	8009e88 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009e82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e86:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3714      	adds	r7, #20
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr

08009e96 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009e96:	b480      	push	{r7}
 8009e98:	b085      	sub	sp, #20
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	0c5b      	lsrs	r3, r3, #17
 8009eb4:	f003 0303 	and.w	r3, r3, #3
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3714      	adds	r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	b29b      	uxth	r3, r3
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3714      	adds	r7, #20
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
	...

08009ee8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b088      	sub	sp, #32
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	4608      	mov	r0, r1
 8009ef2:	4611      	mov	r1, r2
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	70fb      	strb	r3, [r7, #3]
 8009efa:	460b      	mov	r3, r1
 8009efc:	70bb      	strb	r3, [r7, #2]
 8009efe:	4613      	mov	r3, r2
 8009f00:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009f02:	2300      	movs	r3, #0
 8009f04:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009f0a:	78fb      	ldrb	r3, [r7, #3]
 8009f0c:	015a      	lsls	r2, r3, #5
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	4413      	add	r3, r2
 8009f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f16:	461a      	mov	r2, r3
 8009f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f1c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009f1e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009f22:	2b03      	cmp	r3, #3
 8009f24:	d87e      	bhi.n	800a024 <USB_HC_Init+0x13c>
 8009f26:	a201      	add	r2, pc, #4	; (adr r2, 8009f2c <USB_HC_Init+0x44>)
 8009f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f2c:	08009f3d 	.word	0x08009f3d
 8009f30:	08009fe7 	.word	0x08009fe7
 8009f34:	08009f3d 	.word	0x08009f3d
 8009f38:	08009fa9 	.word	0x08009fa9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009f3c:	78fb      	ldrb	r3, [r7, #3]
 8009f3e:	015a      	lsls	r2, r3, #5
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	4413      	add	r3, r2
 8009f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f48:	461a      	mov	r2, r3
 8009f4a:	f240 439d 	movw	r3, #1181	; 0x49d
 8009f4e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009f50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	da10      	bge.n	8009f7a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009f58:	78fb      	ldrb	r3, [r7, #3]
 8009f5a:	015a      	lsls	r2, r3, #5
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	4413      	add	r3, r2
 8009f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	78fa      	ldrb	r2, [r7, #3]
 8009f68:	0151      	lsls	r1, r2, #5
 8009f6a:	693a      	ldr	r2, [r7, #16]
 8009f6c:	440a      	add	r2, r1
 8009f6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f76:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009f78:	e057      	b.n	800a02a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d051      	beq.n	800a02a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009f86:	78fb      	ldrb	r3, [r7, #3]
 8009f88:	015a      	lsls	r2, r3, #5
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	78fa      	ldrb	r2, [r7, #3]
 8009f96:	0151      	lsls	r1, r2, #5
 8009f98:	693a      	ldr	r2, [r7, #16]
 8009f9a:	440a      	add	r2, r1
 8009f9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fa0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009fa4:	60d3      	str	r3, [r2, #12]
      break;
 8009fa6:	e040      	b.n	800a02a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009fa8:	78fb      	ldrb	r3, [r7, #3]
 8009faa:	015a      	lsls	r2, r3, #5
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	4413      	add	r3, r2
 8009fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	f240 639d 	movw	r3, #1693	; 0x69d
 8009fba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009fbc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	da34      	bge.n	800a02e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009fc4:	78fb      	ldrb	r3, [r7, #3]
 8009fc6:	015a      	lsls	r2, r3, #5
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	4413      	add	r3, r2
 8009fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	78fa      	ldrb	r2, [r7, #3]
 8009fd4:	0151      	lsls	r1, r2, #5
 8009fd6:	693a      	ldr	r2, [r7, #16]
 8009fd8:	440a      	add	r2, r1
 8009fda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fe2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009fe4:	e023      	b.n	800a02e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009fe6:	78fb      	ldrb	r3, [r7, #3]
 8009fe8:	015a      	lsls	r2, r3, #5
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	4413      	add	r3, r2
 8009fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	f240 2325 	movw	r3, #549	; 0x225
 8009ff8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009ffa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	da17      	bge.n	800a032 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a002:	78fb      	ldrb	r3, [r7, #3]
 800a004:	015a      	lsls	r2, r3, #5
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	4413      	add	r3, r2
 800a00a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	78fa      	ldrb	r2, [r7, #3]
 800a012:	0151      	lsls	r1, r2, #5
 800a014:	693a      	ldr	r2, [r7, #16]
 800a016:	440a      	add	r2, r1
 800a018:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a01c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a020:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a022:	e006      	b.n	800a032 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a024:	2301      	movs	r3, #1
 800a026:	77fb      	strb	r3, [r7, #31]
      break;
 800a028:	e004      	b.n	800a034 <USB_HC_Init+0x14c>
      break;
 800a02a:	bf00      	nop
 800a02c:	e002      	b.n	800a034 <USB_HC_Init+0x14c>
      break;
 800a02e:	bf00      	nop
 800a030:	e000      	b.n	800a034 <USB_HC_Init+0x14c>
      break;
 800a032:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a03a:	699a      	ldr	r2, [r3, #24]
 800a03c:	78fb      	ldrb	r3, [r7, #3]
 800a03e:	f003 030f 	and.w	r3, r3, #15
 800a042:	2101      	movs	r1, #1
 800a044:	fa01 f303 	lsl.w	r3, r1, r3
 800a048:	6939      	ldr	r1, [r7, #16]
 800a04a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a04e:	4313      	orrs	r3, r2
 800a050:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	699b      	ldr	r3, [r3, #24]
 800a056:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a05e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a062:	2b00      	cmp	r3, #0
 800a064:	da03      	bge.n	800a06e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a06a:	61bb      	str	r3, [r7, #24]
 800a06c:	e001      	b.n	800a072 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800a06e:	2300      	movs	r3, #0
 800a070:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f7ff ff0f 	bl	8009e96 <USB_GetHostSpeed>
 800a078:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a07a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a07e:	2b02      	cmp	r3, #2
 800a080:	d106      	bne.n	800a090 <USB_HC_Init+0x1a8>
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2b02      	cmp	r3, #2
 800a086:	d003      	beq.n	800a090 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a088:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a08c:	617b      	str	r3, [r7, #20]
 800a08e:	e001      	b.n	800a094 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a090:	2300      	movs	r3, #0
 800a092:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a094:	787b      	ldrb	r3, [r7, #1]
 800a096:	059b      	lsls	r3, r3, #22
 800a098:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a09c:	78bb      	ldrb	r3, [r7, #2]
 800a09e:	02db      	lsls	r3, r3, #11
 800a0a0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a0a4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a0a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a0aa:	049b      	lsls	r3, r3, #18
 800a0ac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a0b0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a0b2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a0b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a0b8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a0be:	78fb      	ldrb	r3, [r7, #3]
 800a0c0:	0159      	lsls	r1, r3, #5
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	440b      	add	r3, r1
 800a0c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0ca:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a0d0:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800a0d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a0d6:	2b03      	cmp	r3, #3
 800a0d8:	d10f      	bne.n	800a0fa <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800a0da:	78fb      	ldrb	r3, [r7, #3]
 800a0dc:	015a      	lsls	r2, r3, #5
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	78fa      	ldrb	r2, [r7, #3]
 800a0ea:	0151      	lsls	r1, r2, #5
 800a0ec:	693a      	ldr	r2, [r7, #16]
 800a0ee:	440a      	add	r2, r1
 800a0f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a0f8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a0fa:	7ffb      	ldrb	r3, [r7, #31]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3720      	adds	r7, #32
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b08c      	sub	sp, #48	; 0x30
 800a108:	af02      	add	r7, sp, #8
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	4613      	mov	r3, r2
 800a110:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	785b      	ldrb	r3, [r3, #1]
 800a11a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a11c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a120:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d02d      	beq.n	800a18a <USB_HC_StartXfer+0x86>
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	791b      	ldrb	r3, [r3, #4]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d129      	bne.n	800a18a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800a136:	79fb      	ldrb	r3, [r7, #7]
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d117      	bne.n	800a16c <USB_HC_StartXfer+0x68>
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	79db      	ldrb	r3, [r3, #7]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d003      	beq.n	800a14c <USB_HC_StartXfer+0x48>
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	79db      	ldrb	r3, [r3, #7]
 800a148:	2b02      	cmp	r3, #2
 800a14a:	d10f      	bne.n	800a16c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	015a      	lsls	r2, r3, #5
 800a150:	6a3b      	ldr	r3, [r7, #32]
 800a152:	4413      	add	r3, r2
 800a154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	69fa      	ldr	r2, [r7, #28]
 800a15c:	0151      	lsls	r1, r2, #5
 800a15e:	6a3a      	ldr	r2, [r7, #32]
 800a160:	440a      	add	r2, r1
 800a162:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a16a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800a16c:	79fb      	ldrb	r3, [r7, #7]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d10b      	bne.n	800a18a <USB_HC_StartXfer+0x86>
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	795b      	ldrb	r3, [r3, #5]
 800a176:	2b01      	cmp	r3, #1
 800a178:	d107      	bne.n	800a18a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	785b      	ldrb	r3, [r3, #1]
 800a17e:	4619      	mov	r1, r3
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f000 fa2f 	bl	800a5e4 <USB_DoPing>
      return HAL_OK;
 800a186:	2300      	movs	r3, #0
 800a188:	e0f8      	b.n	800a37c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	695b      	ldr	r3, [r3, #20]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d018      	beq.n	800a1c4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	695b      	ldr	r3, [r3, #20]
 800a196:	68ba      	ldr	r2, [r7, #8]
 800a198:	8912      	ldrh	r2, [r2, #8]
 800a19a:	4413      	add	r3, r2
 800a19c:	3b01      	subs	r3, #1
 800a19e:	68ba      	ldr	r2, [r7, #8]
 800a1a0:	8912      	ldrh	r2, [r2, #8]
 800a1a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1a6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a1a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a1aa:	8b7b      	ldrh	r3, [r7, #26]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d90b      	bls.n	800a1c8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800a1b0:	8b7b      	ldrh	r3, [r7, #26]
 800a1b2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a1b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a1b6:	68ba      	ldr	r2, [r7, #8]
 800a1b8:	8912      	ldrh	r2, [r2, #8]
 800a1ba:	fb02 f203 	mul.w	r2, r2, r3
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	611a      	str	r2, [r3, #16]
 800a1c2:	e001      	b.n	800a1c8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	78db      	ldrb	r3, [r3, #3]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d007      	beq.n	800a1e0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a1d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	8912      	ldrh	r2, [r2, #8]
 800a1d6:	fb02 f203 	mul.w	r2, r2, r3
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	611a      	str	r2, [r3, #16]
 800a1de:	e003      	b.n	800a1e8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	695a      	ldr	r2, [r3, #20]
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a1f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a1f2:	04d9      	lsls	r1, r3, #19
 800a1f4:	4b63      	ldr	r3, [pc, #396]	; (800a384 <USB_HC_StartXfer+0x280>)
 800a1f6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a1f8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	7a9b      	ldrb	r3, [r3, #10]
 800a1fe:	075b      	lsls	r3, r3, #29
 800a200:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a204:	69f9      	ldr	r1, [r7, #28]
 800a206:	0148      	lsls	r0, r1, #5
 800a208:	6a39      	ldr	r1, [r7, #32]
 800a20a:	4401      	add	r1, r0
 800a20c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a210:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a212:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a214:	79fb      	ldrb	r3, [r7, #7]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d009      	beq.n	800a22e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	68d9      	ldr	r1, [r3, #12]
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	015a      	lsls	r2, r3, #5
 800a222:	6a3b      	ldr	r3, [r7, #32]
 800a224:	4413      	add	r3, r2
 800a226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a22a:	460a      	mov	r2, r1
 800a22c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a22e:	6a3b      	ldr	r3, [r7, #32]
 800a230:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	f003 0301 	and.w	r3, r3, #1
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	bf0c      	ite	eq
 800a23e:	2301      	moveq	r3, #1
 800a240:	2300      	movne	r3, #0
 800a242:	b2db      	uxtb	r3, r3
 800a244:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	015a      	lsls	r2, r3, #5
 800a24a:	6a3b      	ldr	r3, [r7, #32]
 800a24c:	4413      	add	r3, r2
 800a24e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	69fa      	ldr	r2, [r7, #28]
 800a256:	0151      	lsls	r1, r2, #5
 800a258:	6a3a      	ldr	r2, [r7, #32]
 800a25a:	440a      	add	r2, r1
 800a25c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a260:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a264:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	015a      	lsls	r2, r3, #5
 800a26a:	6a3b      	ldr	r3, [r7, #32]
 800a26c:	4413      	add	r3, r2
 800a26e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	7e7b      	ldrb	r3, [r7, #25]
 800a276:	075b      	lsls	r3, r3, #29
 800a278:	69f9      	ldr	r1, [r7, #28]
 800a27a:	0148      	lsls	r0, r1, #5
 800a27c:	6a39      	ldr	r1, [r7, #32]
 800a27e:	4401      	add	r1, r0
 800a280:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a284:	4313      	orrs	r3, r2
 800a286:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a288:	69fb      	ldr	r3, [r7, #28]
 800a28a:	015a      	lsls	r2, r3, #5
 800a28c:	6a3b      	ldr	r3, [r7, #32]
 800a28e:	4413      	add	r3, r2
 800a290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a29e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	78db      	ldrb	r3, [r3, #3]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d004      	beq.n	800a2b2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2ae:	613b      	str	r3, [r7, #16]
 800a2b0:	e003      	b.n	800a2ba <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a2b8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a2c0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a2c2:	69fb      	ldr	r3, [r7, #28]
 800a2c4:	015a      	lsls	r2, r3, #5
 800a2c6:	6a3b      	ldr	r3, [r7, #32]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a2d4:	79fb      	ldrb	r3, [r7, #7]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d001      	beq.n	800a2de <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	e04e      	b.n	800a37c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	78db      	ldrb	r3, [r3, #3]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d149      	bne.n	800a37a <USB_HC_StartXfer+0x276>
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	695b      	ldr	r3, [r3, #20]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d045      	beq.n	800a37a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	79db      	ldrb	r3, [r3, #7]
 800a2f2:	2b03      	cmp	r3, #3
 800a2f4:	d830      	bhi.n	800a358 <USB_HC_StartXfer+0x254>
 800a2f6:	a201      	add	r2, pc, #4	; (adr r2, 800a2fc <USB_HC_StartXfer+0x1f8>)
 800a2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2fc:	0800a30d 	.word	0x0800a30d
 800a300:	0800a331 	.word	0x0800a331
 800a304:	0800a30d 	.word	0x0800a30d
 800a308:	0800a331 	.word	0x0800a331
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	695b      	ldr	r3, [r3, #20]
 800a310:	3303      	adds	r3, #3
 800a312:	089b      	lsrs	r3, r3, #2
 800a314:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a316:	8afa      	ldrh	r2, [r7, #22]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	429a      	cmp	r2, r3
 800a320:	d91c      	bls.n	800a35c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	699b      	ldr	r3, [r3, #24]
 800a326:	f043 0220 	orr.w	r2, r3, #32
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	619a      	str	r2, [r3, #24]
        }
        break;
 800a32e:	e015      	b.n	800a35c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	695b      	ldr	r3, [r3, #20]
 800a334:	3303      	adds	r3, #3
 800a336:	089b      	lsrs	r3, r3, #2
 800a338:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a33a:	8afa      	ldrh	r2, [r7, #22]
 800a33c:	6a3b      	ldr	r3, [r7, #32]
 800a33e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a342:	691b      	ldr	r3, [r3, #16]
 800a344:	b29b      	uxth	r3, r3
 800a346:	429a      	cmp	r2, r3
 800a348:	d90a      	bls.n	800a360 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	699b      	ldr	r3, [r3, #24]
 800a34e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	619a      	str	r2, [r3, #24]
        }
        break;
 800a356:	e003      	b.n	800a360 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800a358:	bf00      	nop
 800a35a:	e002      	b.n	800a362 <USB_HC_StartXfer+0x25e>
        break;
 800a35c:	bf00      	nop
 800a35e:	e000      	b.n	800a362 <USB_HC_StartXfer+0x25e>
        break;
 800a360:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	68d9      	ldr	r1, [r3, #12]
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	785a      	ldrb	r2, [r3, #1]
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	695b      	ldr	r3, [r3, #20]
 800a36e:	b29b      	uxth	r3, r3
 800a370:	2000      	movs	r0, #0
 800a372:	9000      	str	r0, [sp, #0]
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f7ff fb81 	bl	8009a7c <USB_WritePacket>
  }

  return HAL_OK;
 800a37a:	2300      	movs	r3, #0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3728      	adds	r7, #40	; 0x28
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}
 800a384:	1ff80000 	.word	0x1ff80000

0800a388 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a39a:	695b      	ldr	r3, [r3, #20]
 800a39c:	b29b      	uxth	r3, r3
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3714      	adds	r7, #20
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr

0800a3aa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a3aa:	b480      	push	{r7}
 800a3ac:	b089      	sub	sp, #36	; 0x24
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800a3ba:	78fb      	ldrb	r3, [r7, #3]
 800a3bc:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	015a      	lsls	r2, r3, #5
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	0c9b      	lsrs	r3, r3, #18
 800a3d2:	f003 0303 	and.w	r3, r3, #3
 800a3d6:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	015a      	lsls	r2, r3, #5
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	4413      	add	r3, r2
 800a3e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	0fdb      	lsrs	r3, r3, #31
 800a3e8:	f003 0301 	and.w	r3, r3, #1
 800a3ec:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	f003 0320 	and.w	r3, r3, #32
 800a3f6:	2b20      	cmp	r3, #32
 800a3f8:	d104      	bne.n	800a404 <USB_HC_Halt+0x5a>
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d101      	bne.n	800a404 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800a400:	2300      	movs	r3, #0
 800a402:	e0e8      	b.n	800a5d6 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d002      	beq.n	800a410 <USB_HC_Halt+0x66>
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	2b02      	cmp	r3, #2
 800a40e:	d173      	bne.n	800a4f8 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	015a      	lsls	r2, r3, #5
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	4413      	add	r3, r2
 800a418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	697a      	ldr	r2, [r7, #20]
 800a420:	0151      	lsls	r1, r2, #5
 800a422:	69ba      	ldr	r2, [r7, #24]
 800a424:	440a      	add	r2, r1
 800a426:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a42a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a42e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	f003 0320 	and.w	r3, r3, #32
 800a438:	2b00      	cmp	r3, #0
 800a43a:	f040 80cb 	bne.w	800a5d4 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a442:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a446:	2b00      	cmp	r3, #0
 800a448:	d143      	bne.n	800a4d2 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	015a      	lsls	r2, r3, #5
 800a44e:	69bb      	ldr	r3, [r7, #24]
 800a450:	4413      	add	r3, r2
 800a452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	697a      	ldr	r2, [r7, #20]
 800a45a:	0151      	lsls	r1, r2, #5
 800a45c:	69ba      	ldr	r2, [r7, #24]
 800a45e:	440a      	add	r2, r1
 800a460:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a464:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a468:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	015a      	lsls	r2, r3, #5
 800a46e:	69bb      	ldr	r3, [r7, #24]
 800a470:	4413      	add	r3, r2
 800a472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	697a      	ldr	r2, [r7, #20]
 800a47a:	0151      	lsls	r1, r2, #5
 800a47c:	69ba      	ldr	r2, [r7, #24]
 800a47e:	440a      	add	r2, r1
 800a480:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a484:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a488:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	015a      	lsls	r2, r3, #5
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	4413      	add	r3, r2
 800a492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	697a      	ldr	r2, [r7, #20]
 800a49a:	0151      	lsls	r1, r2, #5
 800a49c:	69ba      	ldr	r2, [r7, #24]
 800a49e:	440a      	add	r2, r1
 800a4a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a4a8:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800a4aa:	69fb      	ldr	r3, [r7, #28]
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	61fb      	str	r3, [r7, #28]
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4b6:	d81d      	bhi.n	800a4f4 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	015a      	lsls	r2, r3, #5
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	4413      	add	r3, r2
 800a4c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4ce:	d0ec      	beq.n	800a4aa <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a4d0:	e080      	b.n	800a5d4 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	015a      	lsls	r2, r3, #5
 800a4d6:	69bb      	ldr	r3, [r7, #24]
 800a4d8:	4413      	add	r3, r2
 800a4da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	697a      	ldr	r2, [r7, #20]
 800a4e2:	0151      	lsls	r1, r2, #5
 800a4e4:	69ba      	ldr	r2, [r7, #24]
 800a4e6:	440a      	add	r2, r1
 800a4e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a4f0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a4f2:	e06f      	b.n	800a5d4 <USB_HC_Halt+0x22a>
            break;
 800a4f4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a4f6:	e06d      	b.n	800a5d4 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	015a      	lsls	r2, r3, #5
 800a4fc:	69bb      	ldr	r3, [r7, #24]
 800a4fe:	4413      	add	r3, r2
 800a500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	697a      	ldr	r2, [r7, #20]
 800a508:	0151      	lsls	r1, r2, #5
 800a50a:	69ba      	ldr	r2, [r7, #24]
 800a50c:	440a      	add	r2, r1
 800a50e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a512:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a516:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a51e:	691b      	ldr	r3, [r3, #16]
 800a520:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a524:	2b00      	cmp	r3, #0
 800a526:	d143      	bne.n	800a5b0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	015a      	lsls	r2, r3, #5
 800a52c:	69bb      	ldr	r3, [r7, #24]
 800a52e:	4413      	add	r3, r2
 800a530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	697a      	ldr	r2, [r7, #20]
 800a538:	0151      	lsls	r1, r2, #5
 800a53a:	69ba      	ldr	r2, [r7, #24]
 800a53c:	440a      	add	r2, r1
 800a53e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a542:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a546:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	015a      	lsls	r2, r3, #5
 800a54c:	69bb      	ldr	r3, [r7, #24]
 800a54e:	4413      	add	r3, r2
 800a550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	697a      	ldr	r2, [r7, #20]
 800a558:	0151      	lsls	r1, r2, #5
 800a55a:	69ba      	ldr	r2, [r7, #24]
 800a55c:	440a      	add	r2, r1
 800a55e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a562:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a566:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	015a      	lsls	r2, r3, #5
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	4413      	add	r3, r2
 800a570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	697a      	ldr	r2, [r7, #20]
 800a578:	0151      	lsls	r1, r2, #5
 800a57a:	69ba      	ldr	r2, [r7, #24]
 800a57c:	440a      	add	r2, r1
 800a57e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a582:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a586:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	3301      	adds	r3, #1
 800a58c:	61fb      	str	r3, [r7, #28]
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a594:	d81d      	bhi.n	800a5d2 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	015a      	lsls	r2, r3, #5
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	4413      	add	r3, r2
 800a59e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5ac:	d0ec      	beq.n	800a588 <USB_HC_Halt+0x1de>
 800a5ae:	e011      	b.n	800a5d4 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	015a      	lsls	r2, r3, #5
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	0151      	lsls	r1, r2, #5
 800a5c2:	69ba      	ldr	r2, [r7, #24]
 800a5c4:	440a      	add	r2, r1
 800a5c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a5ce:	6013      	str	r3, [r2, #0]
 800a5d0:	e000      	b.n	800a5d4 <USB_HC_Halt+0x22a>
          break;
 800a5d2:	bf00      	nop
    }
  }

  return HAL_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3724      	adds	r7, #36	; 0x24
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr
	...

0800a5e4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b087      	sub	sp, #28
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a5f4:	78fb      	ldrb	r3, [r7, #3]
 800a5f6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	04da      	lsls	r2, r3, #19
 800a600:	4b15      	ldr	r3, [pc, #84]	; (800a658 <USB_DoPing+0x74>)
 800a602:	4013      	ands	r3, r2
 800a604:	693a      	ldr	r2, [r7, #16]
 800a606:	0151      	lsls	r1, r2, #5
 800a608:	697a      	ldr	r2, [r7, #20]
 800a60a:	440a      	add	r2, r1
 800a60c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a610:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a614:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	015a      	lsls	r2, r3, #5
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	4413      	add	r3, r2
 800a61e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a62c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a634:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	015a      	lsls	r2, r3, #5
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	4413      	add	r3, r2
 800a63e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a642:	461a      	mov	r2, r3
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	371c      	adds	r7, #28
 800a64e:	46bd      	mov	sp, r7
 800a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a654:	4770      	bx	lr
 800a656:	bf00      	nop
 800a658:	1ff80000 	.word	0x1ff80000

0800a65c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b086      	sub	sp, #24
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a668:	2300      	movs	r3, #0
 800a66a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f7ff f981 	bl	8009974 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800a672:	2110      	movs	r1, #16
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f7ff f9b9 	bl	80099ec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f7ff f9dc 	bl	8009a38 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a680:	2300      	movs	r3, #0
 800a682:	613b      	str	r3, [r7, #16]
 800a684:	e01f      	b.n	800a6c6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	015a      	lsls	r2, r3, #5
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	4413      	add	r3, r2
 800a68e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a69c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a6a4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a6ac:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	015a      	lsls	r2, r3, #5
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	613b      	str	r3, [r7, #16]
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	2b0f      	cmp	r3, #15
 800a6ca:	d9dc      	bls.n	800a686 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	613b      	str	r3, [r7, #16]
 800a6d0:	e034      	b.n	800a73c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	015a      	lsls	r2, r3, #5
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	4413      	add	r3, r2
 800a6da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6e8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a6f0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a6f8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	015a      	lsls	r2, r3, #5
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	4413      	add	r3, r2
 800a702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a706:	461a      	mov	r2, r3
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	3301      	adds	r3, #1
 800a710:	617b      	str	r3, [r7, #20]
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a718:	d80c      	bhi.n	800a734 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	015a      	lsls	r2, r3, #5
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	4413      	add	r3, r2
 800a722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a72c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a730:	d0ec      	beq.n	800a70c <USB_StopHost+0xb0>
 800a732:	e000      	b.n	800a736 <USB_StopHost+0xda>
        break;
 800a734:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	3301      	adds	r3, #1
 800a73a:	613b      	str	r3, [r7, #16]
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	2b0f      	cmp	r3, #15
 800a740:	d9c7      	bls.n	800a6d2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a748:	461a      	mov	r2, r3
 800a74a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a74e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a756:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f7ff f8fa 	bl	8009952 <USB_EnableGlobalInt>

  return HAL_OK;
 800a75e:	2300      	movs	r3, #0
}
 800a760:	4618      	mov	r0, r3
 800a762:	3718      	adds	r7, #24
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a768:	b590      	push	{r4, r7, lr}
 800a76a:	b089      	sub	sp, #36	; 0x24
 800a76c:	af04      	add	r7, sp, #16
 800a76e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a770:	2301      	movs	r3, #1
 800a772:	2202      	movs	r2, #2
 800a774:	2102      	movs	r1, #2
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 fc66 	bl	800b048 <USBH_FindInterface>
 800a77c:	4603      	mov	r3, r0
 800a77e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a780:	7bfb      	ldrb	r3, [r7, #15]
 800a782:	2bff      	cmp	r3, #255	; 0xff
 800a784:	d002      	beq.n	800a78c <USBH_CDC_InterfaceInit+0x24>
 800a786:	7bfb      	ldrb	r3, [r7, #15]
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d901      	bls.n	800a790 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a78c:	2302      	movs	r3, #2
 800a78e:	e13d      	b.n	800aa0c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a790:	7bfb      	ldrb	r3, [r7, #15]
 800a792:	4619      	mov	r1, r3
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 fc3b 	bl	800b010 <USBH_SelectInterface>
 800a79a:	4603      	mov	r3, r0
 800a79c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a79e:	7bbb      	ldrb	r3, [r7, #14]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d001      	beq.n	800a7a8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a7a4:	2302      	movs	r3, #2
 800a7a6:	e131      	b.n	800aa0c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a7ae:	2050      	movs	r0, #80	; 0x50
 800a7b0:	f002 fa00 	bl	800cbb4 <malloc>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7be:	69db      	ldr	r3, [r3, #28]
 800a7c0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d101      	bne.n	800a7cc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a7c8:	2302      	movs	r3, #2
 800a7ca:	e11f      	b.n	800aa0c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a7cc:	2250      	movs	r2, #80	; 0x50
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	68b8      	ldr	r0, [r7, #8]
 800a7d2:	f002 f9ff 	bl	800cbd4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a7d6:	7bfb      	ldrb	r3, [r7, #15]
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	211a      	movs	r1, #26
 800a7dc:	fb01 f303 	mul.w	r3, r1, r3
 800a7e0:	4413      	add	r3, r2
 800a7e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	b25b      	sxtb	r3, r3
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	da15      	bge.n	800a81a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a7ee:	7bfb      	ldrb	r3, [r7, #15]
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	211a      	movs	r1, #26
 800a7f4:	fb01 f303 	mul.w	r3, r1, r3
 800a7f8:	4413      	add	r3, r2
 800a7fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a7fe:	781a      	ldrb	r2, [r3, #0]
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a804:	7bfb      	ldrb	r3, [r7, #15]
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	211a      	movs	r1, #26
 800a80a:	fb01 f303 	mul.w	r3, r1, r3
 800a80e:	4413      	add	r3, r2
 800a810:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a814:	881a      	ldrh	r2, [r3, #0]
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	785b      	ldrb	r3, [r3, #1]
 800a81e:	4619      	mov	r1, r3
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f001 fe32 	bl	800c48a <USBH_AllocPipe>
 800a826:	4603      	mov	r3, r0
 800a828:	461a      	mov	r2, r3
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	7819      	ldrb	r1, [r3, #0]
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	7858      	ldrb	r0, [r3, #1]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a842:	68ba      	ldr	r2, [r7, #8]
 800a844:	8952      	ldrh	r2, [r2, #10]
 800a846:	9202      	str	r2, [sp, #8]
 800a848:	2203      	movs	r2, #3
 800a84a:	9201      	str	r2, [sp, #4]
 800a84c:	9300      	str	r3, [sp, #0]
 800a84e:	4623      	mov	r3, r4
 800a850:	4602      	mov	r2, r0
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f001 fdea 	bl	800c42c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	2200      	movs	r2, #0
 800a85e:	4619      	mov	r1, r3
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f002 f8f9 	bl	800ca58 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a866:	2300      	movs	r3, #0
 800a868:	2200      	movs	r2, #0
 800a86a:	210a      	movs	r1, #10
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 fbeb 	bl	800b048 <USBH_FindInterface>
 800a872:	4603      	mov	r3, r0
 800a874:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a876:	7bfb      	ldrb	r3, [r7, #15]
 800a878:	2bff      	cmp	r3, #255	; 0xff
 800a87a:	d002      	beq.n	800a882 <USBH_CDC_InterfaceInit+0x11a>
 800a87c:	7bfb      	ldrb	r3, [r7, #15]
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d901      	bls.n	800a886 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a882:	2302      	movs	r3, #2
 800a884:	e0c2      	b.n	800aa0c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a886:	7bfb      	ldrb	r3, [r7, #15]
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	211a      	movs	r1, #26
 800a88c:	fb01 f303 	mul.w	r3, r1, r3
 800a890:	4413      	add	r3, r2
 800a892:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	b25b      	sxtb	r3, r3
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	da16      	bge.n	800a8cc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a89e:	7bfb      	ldrb	r3, [r7, #15]
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	211a      	movs	r1, #26
 800a8a4:	fb01 f303 	mul.w	r3, r1, r3
 800a8a8:	4413      	add	r3, r2
 800a8aa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a8ae:	781a      	ldrb	r2, [r3, #0]
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a8b4:	7bfb      	ldrb	r3, [r7, #15]
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	211a      	movs	r1, #26
 800a8ba:	fb01 f303 	mul.w	r3, r1, r3
 800a8be:	4413      	add	r3, r2
 800a8c0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a8c4:	881a      	ldrh	r2, [r3, #0]
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	835a      	strh	r2, [r3, #26]
 800a8ca:	e015      	b.n	800a8f8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a8cc:	7bfb      	ldrb	r3, [r7, #15]
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	211a      	movs	r1, #26
 800a8d2:	fb01 f303 	mul.w	r3, r1, r3
 800a8d6:	4413      	add	r3, r2
 800a8d8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a8dc:	781a      	ldrb	r2, [r3, #0]
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a8e2:	7bfb      	ldrb	r3, [r7, #15]
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	211a      	movs	r1, #26
 800a8e8:	fb01 f303 	mul.w	r3, r1, r3
 800a8ec:	4413      	add	r3, r2
 800a8ee:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a8f2:	881a      	ldrh	r2, [r3, #0]
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800a8f8:	7bfb      	ldrb	r3, [r7, #15]
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	211a      	movs	r1, #26
 800a8fe:	fb01 f303 	mul.w	r3, r1, r3
 800a902:	4413      	add	r3, r2
 800a904:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	b25b      	sxtb	r3, r3
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	da16      	bge.n	800a93e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a910:	7bfb      	ldrb	r3, [r7, #15]
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	211a      	movs	r1, #26
 800a916:	fb01 f303 	mul.w	r3, r1, r3
 800a91a:	4413      	add	r3, r2
 800a91c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a920:	781a      	ldrb	r2, [r3, #0]
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a926:	7bfb      	ldrb	r3, [r7, #15]
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	211a      	movs	r1, #26
 800a92c:	fb01 f303 	mul.w	r3, r1, r3
 800a930:	4413      	add	r3, r2
 800a932:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a936:	881a      	ldrh	r2, [r3, #0]
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	835a      	strh	r2, [r3, #26]
 800a93c:	e015      	b.n	800a96a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a93e:	7bfb      	ldrb	r3, [r7, #15]
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	211a      	movs	r1, #26
 800a944:	fb01 f303 	mul.w	r3, r1, r3
 800a948:	4413      	add	r3, r2
 800a94a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a94e:	781a      	ldrb	r2, [r3, #0]
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a954:	7bfb      	ldrb	r3, [r7, #15]
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	211a      	movs	r1, #26
 800a95a:	fb01 f303 	mul.w	r3, r1, r3
 800a95e:	4413      	add	r3, r2
 800a960:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a964:	881a      	ldrh	r2, [r3, #0]
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	7b9b      	ldrb	r3, [r3, #14]
 800a96e:	4619      	mov	r1, r3
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f001 fd8a 	bl	800c48a <USBH_AllocPipe>
 800a976:	4603      	mov	r3, r0
 800a978:	461a      	mov	r2, r3
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	7bdb      	ldrb	r3, [r3, #15]
 800a982:	4619      	mov	r1, r3
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f001 fd80 	bl	800c48a <USBH_AllocPipe>
 800a98a:	4603      	mov	r3, r0
 800a98c:	461a      	mov	r2, r3
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	7b59      	ldrb	r1, [r3, #13]
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	7b98      	ldrb	r0, [r3, #14]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a9a6:	68ba      	ldr	r2, [r7, #8]
 800a9a8:	8b12      	ldrh	r2, [r2, #24]
 800a9aa:	9202      	str	r2, [sp, #8]
 800a9ac:	2202      	movs	r2, #2
 800a9ae:	9201      	str	r2, [sp, #4]
 800a9b0:	9300      	str	r3, [sp, #0]
 800a9b2:	4623      	mov	r3, r4
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f001 fd38 	bl	800c42c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	7b19      	ldrb	r1, [r3, #12]
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	7bd8      	ldrb	r0, [r3, #15]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a9d0:	68ba      	ldr	r2, [r7, #8]
 800a9d2:	8b52      	ldrh	r2, [r2, #26]
 800a9d4:	9202      	str	r2, [sp, #8]
 800a9d6:	2202      	movs	r2, #2
 800a9d8:	9201      	str	r2, [sp, #4]
 800a9da:	9300      	str	r3, [sp, #0]
 800a9dc:	4623      	mov	r3, r4
 800a9de:	4602      	mov	r2, r0
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f001 fd23 	bl	800c42c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	7b5b      	ldrb	r3, [r3, #13]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f002 f82e 	bl	800ca58 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	7b1b      	ldrb	r3, [r3, #12]
 800aa00:	2200      	movs	r2, #0
 800aa02:	4619      	mov	r1, r3
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f002 f827 	bl	800ca58 <USBH_LL_SetToggle>

  return USBH_OK;
 800aa0a:	2300      	movs	r3, #0
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3714      	adds	r7, #20
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd90      	pop	{r4, r7, pc}

0800aa14 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa22:	69db      	ldr	r3, [r3, #28]
 800aa24:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d00e      	beq.n	800aa4c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	4619      	mov	r1, r3
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f001 fd18 	bl	800c46a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	4619      	mov	r1, r3
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f001 fd43 	bl	800c4cc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	7b1b      	ldrb	r3, [r3, #12]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00e      	beq.n	800aa72 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	7b1b      	ldrb	r3, [r3, #12]
 800aa58:	4619      	mov	r1, r3
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f001 fd05 	bl	800c46a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	7b1b      	ldrb	r3, [r3, #12]
 800aa64:	4619      	mov	r1, r3
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f001 fd30 	bl	800c4cc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	7b5b      	ldrb	r3, [r3, #13]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d00e      	beq.n	800aa98 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	7b5b      	ldrb	r3, [r3, #13]
 800aa7e:	4619      	mov	r1, r3
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f001 fcf2 	bl	800c46a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	7b5b      	ldrb	r3, [r3, #13]
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f001 fd1d 	bl	800c4cc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2200      	movs	r2, #0
 800aa96:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa9e:	69db      	ldr	r3, [r3, #28]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d00b      	beq.n	800aabc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aaaa:	69db      	ldr	r3, [r3, #28]
 800aaac:	4618      	mov	r0, r3
 800aaae:	f002 f889 	bl	800cbc4 <free>
    phost->pActiveClass->pData = 0U;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aab8:	2200      	movs	r2, #0
 800aaba:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800aabc:	2300      	movs	r3, #0
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3710      	adds	r7, #16
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}

0800aac6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b084      	sub	sp, #16
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aad4:	69db      	ldr	r3, [r3, #28]
 800aad6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	3340      	adds	r3, #64	; 0x40
 800aadc:	4619      	mov	r1, r3
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 f8b1 	bl	800ac46 <GetLineCoding>
 800aae4:	4603      	mov	r3, r0
 800aae6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800aae8:	7afb      	ldrb	r3, [r7, #11]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d105      	bne.n	800aafa <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aaf4:	2102      	movs	r1, #2
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800aafa:	7afb      	ldrb	r3, [r7, #11]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3710      	adds	r7, #16
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800ab10:	2300      	movs	r3, #0
 800ab12:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab1a:	69db      	ldr	r3, [r3, #28]
 800ab1c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ab24:	2b04      	cmp	r3, #4
 800ab26:	d877      	bhi.n	800ac18 <USBH_CDC_Process+0x114>
 800ab28:	a201      	add	r2, pc, #4	; (adr r2, 800ab30 <USBH_CDC_Process+0x2c>)
 800ab2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab2e:	bf00      	nop
 800ab30:	0800ab45 	.word	0x0800ab45
 800ab34:	0800ab4b 	.word	0x0800ab4b
 800ab38:	0800ab7b 	.word	0x0800ab7b
 800ab3c:	0800abef 	.word	0x0800abef
 800ab40:	0800abfd 	.word	0x0800abfd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800ab44:	2300      	movs	r3, #0
 800ab46:	73fb      	strb	r3, [r7, #15]
      break;
 800ab48:	e06d      	b.n	800ac26 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab4e:	4619      	mov	r1, r3
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 f897 	bl	800ac84 <SetLineCoding>
 800ab56:	4603      	mov	r3, r0
 800ab58:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ab5a:	7bbb      	ldrb	r3, [r7, #14]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d104      	bne.n	800ab6a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	2202      	movs	r2, #2
 800ab64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ab68:	e058      	b.n	800ac1c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800ab6a:	7bbb      	ldrb	r3, [r7, #14]
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d055      	beq.n	800ac1c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	2204      	movs	r2, #4
 800ab74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ab78:	e050      	b.n	800ac1c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	3340      	adds	r3, #64	; 0x40
 800ab7e:	4619      	mov	r1, r3
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 f860 	bl	800ac46 <GetLineCoding>
 800ab86:	4603      	mov	r3, r0
 800ab88:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ab8a:	7bbb      	ldrb	r3, [r7, #14]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d126      	bne.n	800abde <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	2200      	movs	r2, #0
 800ab94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aba2:	791b      	ldrb	r3, [r3, #4]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d13b      	bne.n	800ac20 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abb2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d133      	bne.n	800ac20 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abc2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d12b      	bne.n	800ac20 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abd0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d124      	bne.n	800ac20 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 f958 	bl	800ae8c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800abdc:	e020      	b.n	800ac20 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800abde:	7bbb      	ldrb	r3, [r7, #14]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d01d      	beq.n	800ac20 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	2204      	movs	r2, #4
 800abe8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800abec:	e018      	b.n	800ac20 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 f867 	bl	800acc2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 f8da 	bl	800adae <CDC_ProcessReception>
      break;
 800abfa:	e014      	b.n	800ac26 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800abfc:	2100      	movs	r1, #0
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 ffe3 	bl	800bbca <USBH_ClrFeature>
 800ac04:	4603      	mov	r3, r0
 800ac06:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ac08:	7bbb      	ldrb	r3, [r7, #14]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d10a      	bne.n	800ac24 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	2200      	movs	r2, #0
 800ac12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800ac16:	e005      	b.n	800ac24 <USBH_CDC_Process+0x120>

    default:
      break;
 800ac18:	bf00      	nop
 800ac1a:	e004      	b.n	800ac26 <USBH_CDC_Process+0x122>
      break;
 800ac1c:	bf00      	nop
 800ac1e:	e002      	b.n	800ac26 <USBH_CDC_Process+0x122>
      break;
 800ac20:	bf00      	nop
 800ac22:	e000      	b.n	800ac26 <USBH_CDC_Process+0x122>
      break;
 800ac24:	bf00      	nop

  }

  return status;
 800ac26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3710      	adds	r7, #16
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ac38:	2300      	movs	r3, #0
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	370c      	adds	r7, #12
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr

0800ac46 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b082      	sub	sp, #8
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
 800ac4e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	22a1      	movs	r2, #161	; 0xa1
 800ac54:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2221      	movs	r2, #33	; 0x21
 800ac5a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2207      	movs	r2, #7
 800ac6c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	2207      	movs	r2, #7
 800ac72:	4619      	mov	r1, r3
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f001 f988 	bl	800bf8a <USBH_CtlReq>
 800ac7a:	4603      	mov	r3, r0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3708      	adds	r7, #8
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2221      	movs	r2, #33	; 0x21
 800ac92:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2220      	movs	r2, #32
 800ac98:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2207      	movs	r2, #7
 800acaa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	2207      	movs	r2, #7
 800acb0:	4619      	mov	r1, r3
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f001 f969 	bl	800bf8a <USBH_CtlReq>
 800acb8:	4603      	mov	r3, r0
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3708      	adds	r7, #8
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}

0800acc2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b086      	sub	sp, #24
 800acc6:	af02      	add	r7, sp, #8
 800acc8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acd0:	69db      	ldr	r3, [r3, #28]
 800acd2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800acd4:	2300      	movs	r3, #0
 800acd6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d002      	beq.n	800ace8 <CDC_ProcessTransmission+0x26>
 800ace2:	2b02      	cmp	r3, #2
 800ace4:	d023      	beq.n	800ad2e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800ace6:	e05e      	b.n	800ada6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	8b12      	ldrh	r2, [r2, #24]
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d90b      	bls.n	800ad0c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	69d9      	ldr	r1, [r3, #28]
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	8b1a      	ldrh	r2, [r3, #24]
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	7b5b      	ldrb	r3, [r3, #13]
 800ad00:	2001      	movs	r0, #1
 800ad02:	9000      	str	r0, [sp, #0]
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f001 fb4e 	bl	800c3a6 <USBH_BulkSendData>
 800ad0a:	e00b      	b.n	800ad24 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800ad14:	b29a      	uxth	r2, r3
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	7b5b      	ldrb	r3, [r3, #13]
 800ad1a:	2001      	movs	r0, #1
 800ad1c:	9000      	str	r0, [sp, #0]
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f001 fb41 	bl	800c3a6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2202      	movs	r2, #2
 800ad28:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ad2c:	e03b      	b.n	800ada6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	7b5b      	ldrb	r3, [r3, #13]
 800ad32:	4619      	mov	r1, r3
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f001 fe65 	bl	800ca04 <USBH_LL_GetURBState>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800ad3e:	7afb      	ldrb	r3, [r7, #11]
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d128      	bne.n	800ad96 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad48:	68fa      	ldr	r2, [r7, #12]
 800ad4a:	8b12      	ldrh	r2, [r2, #24]
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d90e      	bls.n	800ad6e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad54:	68fa      	ldr	r2, [r7, #12]
 800ad56:	8b12      	ldrh	r2, [r2, #24]
 800ad58:	1a9a      	subs	r2, r3, r2
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	69db      	ldr	r3, [r3, #28]
 800ad62:	68fa      	ldr	r2, [r7, #12]
 800ad64:	8b12      	ldrh	r2, [r2, #24]
 800ad66:	441a      	add	r2, r3
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	61da      	str	r2, [r3, #28]
 800ad6c:	e002      	b.n	800ad74 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2200      	movs	r2, #0
 800ad72:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d004      	beq.n	800ad86 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2201      	movs	r2, #1
 800ad80:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ad84:	e00e      	b.n	800ada4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 f868 	bl	800ae64 <USBH_CDC_TransmitCallback>
      break;
 800ad94:	e006      	b.n	800ada4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800ad96:	7afb      	ldrb	r3, [r7, #11]
 800ad98:	2b02      	cmp	r3, #2
 800ad9a:	d103      	bne.n	800ada4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ada4:	bf00      	nop
  }
}
 800ada6:	bf00      	nop
 800ada8:	3710      	adds	r7, #16
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b086      	sub	sp, #24
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adbc:	69db      	ldr	r3, [r3, #28]
 800adbe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800adc0:	2300      	movs	r3, #0
 800adc2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800adca:	2b03      	cmp	r3, #3
 800adcc:	d002      	beq.n	800add4 <CDC_ProcessReception+0x26>
 800adce:	2b04      	cmp	r3, #4
 800add0:	d00e      	beq.n	800adf0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800add2:	e043      	b.n	800ae5c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	6a19      	ldr	r1, [r3, #32]
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	8b5a      	ldrh	r2, [r3, #26]
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	7b1b      	ldrb	r3, [r3, #12]
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f001 fb05 	bl	800c3f0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	2204      	movs	r2, #4
 800adea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800adee:	e035      	b.n	800ae5c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	7b1b      	ldrb	r3, [r3, #12]
 800adf4:	4619      	mov	r1, r3
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f001 fe04 	bl	800ca04 <USBH_LL_GetURBState>
 800adfc:	4603      	mov	r3, r0
 800adfe:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800ae00:	7cfb      	ldrb	r3, [r7, #19]
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d129      	bne.n	800ae5a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	7b1b      	ldrb	r3, [r3, #12]
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f001 fd67 	bl	800c8e0 <USBH_LL_GetLastXferSize>
 800ae12:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d016      	beq.n	800ae4c <CDC_ProcessReception+0x9e>
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	8b5b      	ldrh	r3, [r3, #26]
 800ae22:	461a      	mov	r2, r3
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d910      	bls.n	800ae4c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	1ad2      	subs	r2, r2, r3
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	6a1a      	ldr	r2, [r3, #32]
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	441a      	add	r2, r3
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	2203      	movs	r2, #3
 800ae46:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800ae4a:	e006      	b.n	800ae5a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 f80f 	bl	800ae78 <USBH_CDC_ReceiveCallback>
      break;
 800ae5a:	bf00      	nop
  }
}
 800ae5c:	bf00      	nop
 800ae5e:	3718      	adds	r7, #24
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b083      	sub	sp, #12
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ae6c:	bf00      	nop
 800ae6e:	370c      	adds	r7, #12
 800ae70:	46bd      	mov	sp, r7
 800ae72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae76:	4770      	bx	lr

0800ae78 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b083      	sub	sp, #12
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ae80:	bf00      	nop
 800ae82:	370c      	adds	r7, #12
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr

0800ae8c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b083      	sub	sp, #12
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ae94:	bf00      	nop
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	4613      	mov	r3, r2
 800aeac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d101      	bne.n	800aeb8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800aeb4:	2302      	movs	r3, #2
 800aeb6:	e029      	b.n	800af0c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	79fa      	ldrb	r2, [r7, #7]
 800aebc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2200      	movs	r2, #0
 800aec4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2200      	movs	r2, #0
 800aecc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800aed0:	68f8      	ldr	r0, [r7, #12]
 800aed2:	f000 f81f 	bl	800af14 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2200      	movs	r2, #0
 800aeda:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2200      	movs	r2, #0
 800aee2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d003      	beq.n	800af04 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	68ba      	ldr	r2, [r7, #8]
 800af00:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800af04:	68f8      	ldr	r0, [r7, #12]
 800af06:	f001 fc37 	bl	800c778 <USBH_LL_Init>

  return USBH_OK;
 800af0a:	2300      	movs	r3, #0
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3710      	adds	r7, #16
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800af14:	b480      	push	{r7}
 800af16:	b085      	sub	sp, #20
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800af1c:	2300      	movs	r3, #0
 800af1e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800af20:	2300      	movs	r3, #0
 800af22:	60fb      	str	r3, [r7, #12]
 800af24:	e009      	b.n	800af3a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	33e0      	adds	r3, #224	; 0xe0
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	4413      	add	r3, r2
 800af30:	2200      	movs	r2, #0
 800af32:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	3301      	adds	r3, #1
 800af38:	60fb      	str	r3, [r7, #12]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2b0e      	cmp	r3, #14
 800af3e:	d9f2      	bls.n	800af26 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800af40:	2300      	movs	r3, #0
 800af42:	60fb      	str	r3, [r7, #12]
 800af44:	e009      	b.n	800af5a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	4413      	add	r3, r2
 800af4c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800af50:	2200      	movs	r2, #0
 800af52:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	3301      	adds	r3, #1
 800af58:	60fb      	str	r3, [r7, #12]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af60:	d3f1      	bcc.n	800af46 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2201      	movs	r2, #1
 800af72:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2201      	movs	r2, #1
 800af80:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2240      	movs	r2, #64	; 0x40
 800af86:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2201      	movs	r2, #1
 800af9a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800afae:	2300      	movs	r3, #0
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3714      	adds	r7, #20
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr

0800afbc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b085      	sub	sp, #20
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800afc6:	2300      	movs	r3, #0
 800afc8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d016      	beq.n	800affe <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d10e      	bne.n	800aff8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800afe0:	1c59      	adds	r1, r3, #1
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	33de      	adds	r3, #222	; 0xde
 800afec:	6839      	ldr	r1, [r7, #0]
 800afee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800aff2:	2300      	movs	r3, #0
 800aff4:	73fb      	strb	r3, [r7, #15]
 800aff6:	e004      	b.n	800b002 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800aff8:	2302      	movs	r3, #2
 800affa:	73fb      	strb	r3, [r7, #15]
 800affc:	e001      	b.n	800b002 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800affe:	2302      	movs	r3, #2
 800b000:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b002:	7bfb      	ldrb	r3, [r7, #15]
}
 800b004:	4618      	mov	r0, r3
 800b006:	3714      	adds	r7, #20
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b010:	b480      	push	{r7}
 800b012:	b085      	sub	sp, #20
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	460b      	mov	r3, r1
 800b01a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b01c:	2300      	movs	r3, #0
 800b01e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b026:	78fa      	ldrb	r2, [r7, #3]
 800b028:	429a      	cmp	r2, r3
 800b02a:	d204      	bcs.n	800b036 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	78fa      	ldrb	r2, [r7, #3]
 800b030:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b034:	e001      	b.n	800b03a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b036:	2302      	movs	r3, #2
 800b038:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b03a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3714      	adds	r7, #20
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b048:	b480      	push	{r7}
 800b04a:	b087      	sub	sp, #28
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	4608      	mov	r0, r1
 800b052:	4611      	mov	r1, r2
 800b054:	461a      	mov	r2, r3
 800b056:	4603      	mov	r3, r0
 800b058:	70fb      	strb	r3, [r7, #3]
 800b05a:	460b      	mov	r3, r1
 800b05c:	70bb      	strb	r3, [r7, #2]
 800b05e:	4613      	mov	r3, r2
 800b060:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b062:	2300      	movs	r3, #0
 800b064:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800b066:	2300      	movs	r3, #0
 800b068:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b070:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b072:	e025      	b.n	800b0c0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b074:	7dfb      	ldrb	r3, [r7, #23]
 800b076:	221a      	movs	r2, #26
 800b078:	fb02 f303 	mul.w	r3, r2, r3
 800b07c:	3308      	adds	r3, #8
 800b07e:	68fa      	ldr	r2, [r7, #12]
 800b080:	4413      	add	r3, r2
 800b082:	3302      	adds	r3, #2
 800b084:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	795b      	ldrb	r3, [r3, #5]
 800b08a:	78fa      	ldrb	r2, [r7, #3]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d002      	beq.n	800b096 <USBH_FindInterface+0x4e>
 800b090:	78fb      	ldrb	r3, [r7, #3]
 800b092:	2bff      	cmp	r3, #255	; 0xff
 800b094:	d111      	bne.n	800b0ba <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b09a:	78ba      	ldrb	r2, [r7, #2]
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d002      	beq.n	800b0a6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b0a0:	78bb      	ldrb	r3, [r7, #2]
 800b0a2:	2bff      	cmp	r3, #255	; 0xff
 800b0a4:	d109      	bne.n	800b0ba <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b0aa:	787a      	ldrb	r2, [r7, #1]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d002      	beq.n	800b0b6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b0b0:	787b      	ldrb	r3, [r7, #1]
 800b0b2:	2bff      	cmp	r3, #255	; 0xff
 800b0b4:	d101      	bne.n	800b0ba <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b0b6:	7dfb      	ldrb	r3, [r7, #23]
 800b0b8:	e006      	b.n	800b0c8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b0ba:	7dfb      	ldrb	r3, [r7, #23]
 800b0bc:	3301      	adds	r3, #1
 800b0be:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b0c0:	7dfb      	ldrb	r3, [r7, #23]
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d9d6      	bls.n	800b074 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b0c6:	23ff      	movs	r3, #255	; 0xff
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	371c      	adds	r7, #28
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr

0800b0d4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f001 fb87 	bl	800c7f0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800b0e2:	2101      	movs	r1, #1
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f001 fca0 	bl	800ca2a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b0ea:	2300      	movs	r3, #0
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3708      	adds	r7, #8
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b088      	sub	sp, #32
 800b0f8:	af04      	add	r7, sp, #16
 800b0fa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b0fc:	2302      	movs	r3, #2
 800b0fe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b100:	2300      	movs	r3, #0
 800b102:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b10a:	b2db      	uxtb	r3, r3
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d102      	bne.n	800b116 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2203      	movs	r2, #3
 800b114:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	2b0b      	cmp	r3, #11
 800b11e:	f200 81b3 	bhi.w	800b488 <USBH_Process+0x394>
 800b122:	a201      	add	r2, pc, #4	; (adr r2, 800b128 <USBH_Process+0x34>)
 800b124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b128:	0800b159 	.word	0x0800b159
 800b12c:	0800b18b 	.word	0x0800b18b
 800b130:	0800b1f3 	.word	0x0800b1f3
 800b134:	0800b423 	.word	0x0800b423
 800b138:	0800b489 	.word	0x0800b489
 800b13c:	0800b297 	.word	0x0800b297
 800b140:	0800b3c9 	.word	0x0800b3c9
 800b144:	0800b2cd 	.word	0x0800b2cd
 800b148:	0800b2ed 	.word	0x0800b2ed
 800b14c:	0800b30d 	.word	0x0800b30d
 800b150:	0800b33b 	.word	0x0800b33b
 800b154:	0800b40b 	.word	0x0800b40b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	2b00      	cmp	r3, #0
 800b162:	f000 8193 	beq.w	800b48c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2201      	movs	r2, #1
 800b16a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b16c:	20c8      	movs	r0, #200	; 0xc8
 800b16e:	f001 fca3 	bl	800cab8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f001 fb99 	bl	800c8aa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b188:	e180      	b.n	800b48c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b190:	2b01      	cmp	r3, #1
 800b192:	d107      	bne.n	800b1a4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2202      	movs	r2, #2
 800b1a0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b1a2:	e182      	b.n	800b4aa <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b1aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b1ae:	d914      	bls.n	800b1da <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	b2da      	uxtb	r2, r3
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b1c6:	2b03      	cmp	r3, #3
 800b1c8:	d903      	bls.n	800b1d2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	220d      	movs	r2, #13
 800b1ce:	701a      	strb	r2, [r3, #0]
      break;
 800b1d0:	e16b      	b.n	800b4aa <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	701a      	strb	r2, [r3, #0]
      break;
 800b1d8:	e167      	b.n	800b4aa <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b1e0:	f103 020a 	add.w	r2, r3, #10
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b1ea:	200a      	movs	r0, #10
 800b1ec:	f001 fc64 	bl	800cab8 <USBH_Delay>
      break;
 800b1f0:	e15b      	b.n	800b4aa <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d005      	beq.n	800b208 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b202:	2104      	movs	r1, #4
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b208:	2064      	movs	r0, #100	; 0x64
 800b20a:	f001 fc55 	bl	800cab8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f001 fb24 	bl	800c85c <USBH_LL_GetSpeed>
 800b214:	4603      	mov	r3, r0
 800b216:	461a      	mov	r2, r3
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2205      	movs	r2, #5
 800b222:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b224:	2100      	movs	r1, #0
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f001 f92f 	bl	800c48a <USBH_AllocPipe>
 800b22c:	4603      	mov	r3, r0
 800b22e:	461a      	mov	r2, r3
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b234:	2180      	movs	r1, #128	; 0x80
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f001 f927 	bl	800c48a <USBH_AllocPipe>
 800b23c:	4603      	mov	r3, r0
 800b23e:	461a      	mov	r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	7919      	ldrb	r1, [r3, #4]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b258:	b292      	uxth	r2, r2
 800b25a:	9202      	str	r2, [sp, #8]
 800b25c:	2200      	movs	r2, #0
 800b25e:	9201      	str	r2, [sp, #4]
 800b260:	9300      	str	r3, [sp, #0]
 800b262:	4603      	mov	r3, r0
 800b264:	2280      	movs	r2, #128	; 0x80
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f001 f8e0 	bl	800c42c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	7959      	ldrb	r1, [r3, #5]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b280:	b292      	uxth	r2, r2
 800b282:	9202      	str	r2, [sp, #8]
 800b284:	2200      	movs	r2, #0
 800b286:	9201      	str	r2, [sp, #4]
 800b288:	9300      	str	r3, [sp, #0]
 800b28a:	4603      	mov	r3, r0
 800b28c:	2200      	movs	r2, #0
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f001 f8cc 	bl	800c42c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b294:	e109      	b.n	800b4aa <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 f90c 	bl	800b4b4 <USBH_HandleEnum>
 800b29c:	4603      	mov	r3, r0
 800b29e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b2a0:	7bbb      	ldrb	r3, [r7, #14]
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	f040 80f3 	bne.w	800b490 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	d103      	bne.n	800b2c4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2208      	movs	r2, #8
 800b2c0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b2c2:	e0e5      	b.n	800b490 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2207      	movs	r2, #7
 800b2c8:	701a      	strb	r2, [r3, #0]
      break;
 800b2ca:	e0e1      	b.n	800b490 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	f000 80de 	beq.w	800b494 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b2de:	2101      	movs	r1, #1
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2208      	movs	r2, #8
 800b2e8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800b2ea:	e0d3      	b.n	800b494 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 fc20 	bl	800bb3c <USBH_SetCfg>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f040 80ca 	bne.w	800b498 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2209      	movs	r2, #9
 800b308:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b30a:	e0c5      	b.n	800b498 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b312:	f003 0320 	and.w	r3, r3, #32
 800b316:	2b00      	cmp	r3, #0
 800b318:	d00b      	beq.n	800b332 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800b31a:	2101      	movs	r1, #1
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 fc30 	bl	800bb82 <USBH_SetFeature>
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	f040 80b9 	bne.w	800b49c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	220a      	movs	r2, #10
 800b32e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b330:	e0b4      	b.n	800b49c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	220a      	movs	r2, #10
 800b336:	701a      	strb	r2, [r3, #0]
      break;
 800b338:	e0b0      	b.n	800b49c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b340:	2b00      	cmp	r3, #0
 800b342:	f000 80ad 	beq.w	800b4a0 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2200      	movs	r2, #0
 800b34a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b34e:	2300      	movs	r3, #0
 800b350:	73fb      	strb	r3, [r7, #15]
 800b352:	e016      	b.n	800b382 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b354:	7bfa      	ldrb	r2, [r7, #15]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	32de      	adds	r2, #222	; 0xde
 800b35a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b35e:	791a      	ldrb	r2, [r3, #4]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b366:	429a      	cmp	r2, r3
 800b368:	d108      	bne.n	800b37c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b36a:	7bfa      	ldrb	r2, [r7, #15]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	32de      	adds	r2, #222	; 0xde
 800b370:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b37a:	e005      	b.n	800b388 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b37c:	7bfb      	ldrb	r3, [r7, #15]
 800b37e:	3301      	adds	r3, #1
 800b380:	73fb      	strb	r3, [r7, #15]
 800b382:	7bfb      	ldrb	r3, [r7, #15]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d0e5      	beq.n	800b354 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d016      	beq.n	800b3c0 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	4798      	blx	r3
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d109      	bne.n	800b3b8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2206      	movs	r2, #6
 800b3a8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b3b0:	2103      	movs	r1, #3
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b3b6:	e073      	b.n	800b4a0 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	220d      	movs	r2, #13
 800b3bc:	701a      	strb	r2, [r3, #0]
      break;
 800b3be:	e06f      	b.n	800b4a0 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	220d      	movs	r2, #13
 800b3c4:	701a      	strb	r2, [r3, #0]
      break;
 800b3c6:	e06b      	b.n	800b4a0 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d017      	beq.n	800b402 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3d8:	691b      	ldr	r3, [r3, #16]
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	4798      	blx	r3
 800b3de:	4603      	mov	r3, r0
 800b3e0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b3e2:	7bbb      	ldrb	r3, [r7, #14]
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d103      	bne.n	800b3f2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	220b      	movs	r2, #11
 800b3ee:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b3f0:	e058      	b.n	800b4a4 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800b3f2:	7bbb      	ldrb	r3, [r7, #14]
 800b3f4:	b2db      	uxtb	r3, r3
 800b3f6:	2b02      	cmp	r3, #2
 800b3f8:	d154      	bne.n	800b4a4 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	220d      	movs	r2, #13
 800b3fe:	701a      	strb	r2, [r3, #0]
      break;
 800b400:	e050      	b.n	800b4a4 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	220d      	movs	r2, #13
 800b406:	701a      	strb	r2, [r3, #0]
      break;
 800b408:	e04c      	b.n	800b4a4 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b410:	2b00      	cmp	r3, #0
 800b412:	d049      	beq.n	800b4a8 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b41a:	695b      	ldr	r3, [r3, #20]
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	4798      	blx	r3
      }
      break;
 800b420:	e042      	b.n	800b4a8 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2200      	movs	r2, #0
 800b426:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f7ff fd72 	bl	800af14 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b436:	2b00      	cmp	r3, #0
 800b438:	d009      	beq.n	800b44e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b440:	68db      	ldr	r3, [r3, #12]
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2200      	movs	r2, #0
 800b44a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b454:	2b00      	cmp	r3, #0
 800b456:	d005      	beq.n	800b464 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b45e:	2105      	movs	r1, #5
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b46a:	b2db      	uxtb	r3, r3
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d107      	bne.n	800b480 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f7ff fe2b 	bl	800b0d4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b47e:	e014      	b.n	800b4aa <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f001 f9b5 	bl	800c7f0 <USBH_LL_Start>
      break;
 800b486:	e010      	b.n	800b4aa <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800b488:	bf00      	nop
 800b48a:	e00e      	b.n	800b4aa <USBH_Process+0x3b6>
      break;
 800b48c:	bf00      	nop
 800b48e:	e00c      	b.n	800b4aa <USBH_Process+0x3b6>
      break;
 800b490:	bf00      	nop
 800b492:	e00a      	b.n	800b4aa <USBH_Process+0x3b6>
    break;
 800b494:	bf00      	nop
 800b496:	e008      	b.n	800b4aa <USBH_Process+0x3b6>
      break;
 800b498:	bf00      	nop
 800b49a:	e006      	b.n	800b4aa <USBH_Process+0x3b6>
      break;
 800b49c:	bf00      	nop
 800b49e:	e004      	b.n	800b4aa <USBH_Process+0x3b6>
      break;
 800b4a0:	bf00      	nop
 800b4a2:	e002      	b.n	800b4aa <USBH_Process+0x3b6>
      break;
 800b4a4:	bf00      	nop
 800b4a6:	e000      	b.n	800b4aa <USBH_Process+0x3b6>
      break;
 800b4a8:	bf00      	nop
  }
  return USBH_OK;
 800b4aa:	2300      	movs	r3, #0
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3710      	adds	r7, #16
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b088      	sub	sp, #32
 800b4b8:	af04      	add	r7, sp, #16
 800b4ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	785b      	ldrb	r3, [r3, #1]
 800b4c8:	2b07      	cmp	r3, #7
 800b4ca:	f200 81c1 	bhi.w	800b850 <USBH_HandleEnum+0x39c>
 800b4ce:	a201      	add	r2, pc, #4	; (adr r2, 800b4d4 <USBH_HandleEnum+0x20>)
 800b4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d4:	0800b4f5 	.word	0x0800b4f5
 800b4d8:	0800b5b3 	.word	0x0800b5b3
 800b4dc:	0800b61d 	.word	0x0800b61d
 800b4e0:	0800b6ab 	.word	0x0800b6ab
 800b4e4:	0800b715 	.word	0x0800b715
 800b4e8:	0800b785 	.word	0x0800b785
 800b4ec:	0800b7cb 	.word	0x0800b7cb
 800b4f0:	0800b811 	.word	0x0800b811
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b4f4:	2108      	movs	r1, #8
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 fa50 	bl	800b99c <USBH_Get_DevDesc>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b500:	7bbb      	ldrb	r3, [r7, #14]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d130      	bne.n	800b568 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2201      	movs	r2, #1
 800b514:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	7919      	ldrb	r1, [r3, #4]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b52a:	b292      	uxth	r2, r2
 800b52c:	9202      	str	r2, [sp, #8]
 800b52e:	2200      	movs	r2, #0
 800b530:	9201      	str	r2, [sp, #4]
 800b532:	9300      	str	r3, [sp, #0]
 800b534:	4603      	mov	r3, r0
 800b536:	2280      	movs	r2, #128	; 0x80
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f000 ff77 	bl	800c42c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	7959      	ldrb	r1, [r3, #5]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b552:	b292      	uxth	r2, r2
 800b554:	9202      	str	r2, [sp, #8]
 800b556:	2200      	movs	r2, #0
 800b558:	9201      	str	r2, [sp, #4]
 800b55a:	9300      	str	r3, [sp, #0]
 800b55c:	4603      	mov	r3, r0
 800b55e:	2200      	movs	r2, #0
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 ff63 	bl	800c42c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b566:	e175      	b.n	800b854 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b568:	7bbb      	ldrb	r3, [r7, #14]
 800b56a:	2b03      	cmp	r3, #3
 800b56c:	f040 8172 	bne.w	800b854 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b576:	3301      	adds	r3, #1
 800b578:	b2da      	uxtb	r2, r3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b586:	2b03      	cmp	r3, #3
 800b588:	d903      	bls.n	800b592 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	220d      	movs	r2, #13
 800b58e:	701a      	strb	r2, [r3, #0]
      break;
 800b590:	e160      	b.n	800b854 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	795b      	ldrb	r3, [r3, #5]
 800b596:	4619      	mov	r1, r3
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f000 ff97 	bl	800c4cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	791b      	ldrb	r3, [r3, #4]
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 ff91 	bl	800c4cc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	701a      	strb	r2, [r3, #0]
      break;
 800b5b0:	e150      	b.n	800b854 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b5b2:	2112      	movs	r1, #18
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 f9f1 	bl	800b99c <USBH_Get_DevDesc>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b5be:	7bbb      	ldrb	r3, [r7, #14]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d103      	bne.n	800b5cc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2202      	movs	r2, #2
 800b5c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b5ca:	e145      	b.n	800b858 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b5cc:	7bbb      	ldrb	r3, [r7, #14]
 800b5ce:	2b03      	cmp	r3, #3
 800b5d0:	f040 8142 	bne.w	800b858 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b5da:	3301      	adds	r3, #1
 800b5dc:	b2da      	uxtb	r2, r3
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b5ea:	2b03      	cmp	r3, #3
 800b5ec:	d903      	bls.n	800b5f6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	220d      	movs	r2, #13
 800b5f2:	701a      	strb	r2, [r3, #0]
      break;
 800b5f4:	e130      	b.n	800b858 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	795b      	ldrb	r3, [r3, #5]
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f000 ff65 	bl	800c4cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	791b      	ldrb	r3, [r3, #4]
 800b606:	4619      	mov	r1, r3
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f000 ff5f 	bl	800c4cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2200      	movs	r2, #0
 800b612:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2200      	movs	r2, #0
 800b618:	701a      	strb	r2, [r3, #0]
      break;
 800b61a:	e11d      	b.n	800b858 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b61c:	2101      	movs	r1, #1
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 fa68 	bl	800baf4 <USBH_SetAddress>
 800b624:	4603      	mov	r3, r0
 800b626:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b628:	7bbb      	ldrb	r3, [r7, #14]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d132      	bne.n	800b694 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b62e:	2002      	movs	r0, #2
 800b630:	f001 fa42 	bl	800cab8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2201      	movs	r2, #1
 800b638:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2203      	movs	r2, #3
 800b640:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	7919      	ldrb	r1, [r3, #4]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b656:	b292      	uxth	r2, r2
 800b658:	9202      	str	r2, [sp, #8]
 800b65a:	2200      	movs	r2, #0
 800b65c:	9201      	str	r2, [sp, #4]
 800b65e:	9300      	str	r3, [sp, #0]
 800b660:	4603      	mov	r3, r0
 800b662:	2280      	movs	r2, #128	; 0x80
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 fee1 	bl	800c42c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	7959      	ldrb	r1, [r3, #5]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b67e:	b292      	uxth	r2, r2
 800b680:	9202      	str	r2, [sp, #8]
 800b682:	2200      	movs	r2, #0
 800b684:	9201      	str	r2, [sp, #4]
 800b686:	9300      	str	r3, [sp, #0]
 800b688:	4603      	mov	r3, r0
 800b68a:	2200      	movs	r2, #0
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 fecd 	bl	800c42c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b692:	e0e3      	b.n	800b85c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b694:	7bbb      	ldrb	r3, [r7, #14]
 800b696:	2b03      	cmp	r3, #3
 800b698:	f040 80e0 	bne.w	800b85c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	220d      	movs	r2, #13
 800b6a0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	705a      	strb	r2, [r3, #1]
      break;
 800b6a8:	e0d8      	b.n	800b85c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b6aa:	2109      	movs	r1, #9
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 f99d 	bl	800b9ec <USBH_Get_CfgDesc>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b6b6:	7bbb      	ldrb	r3, [r7, #14]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d103      	bne.n	800b6c4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2204      	movs	r2, #4
 800b6c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b6c2:	e0cd      	b.n	800b860 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b6c4:	7bbb      	ldrb	r3, [r7, #14]
 800b6c6:	2b03      	cmp	r3, #3
 800b6c8:	f040 80ca 	bne.w	800b860 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	b2da      	uxtb	r2, r3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b6e2:	2b03      	cmp	r3, #3
 800b6e4:	d903      	bls.n	800b6ee <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	220d      	movs	r2, #13
 800b6ea:	701a      	strb	r2, [r3, #0]
      break;
 800b6ec:	e0b8      	b.n	800b860 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	795b      	ldrb	r3, [r3, #5]
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 fee9 	bl	800c4cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	791b      	ldrb	r3, [r3, #4]
 800b6fe:	4619      	mov	r1, r3
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 fee3 	bl	800c4cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2200      	movs	r2, #0
 800b70a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	701a      	strb	r2, [r3, #0]
      break;
 800b712:	e0a5      	b.n	800b860 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b71a:	4619      	mov	r1, r3
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 f965 	bl	800b9ec <USBH_Get_CfgDesc>
 800b722:	4603      	mov	r3, r0
 800b724:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b726:	7bbb      	ldrb	r3, [r7, #14]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d103      	bne.n	800b734 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2205      	movs	r2, #5
 800b730:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b732:	e097      	b.n	800b864 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b734:	7bbb      	ldrb	r3, [r7, #14]
 800b736:	2b03      	cmp	r3, #3
 800b738:	f040 8094 	bne.w	800b864 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b742:	3301      	adds	r3, #1
 800b744:	b2da      	uxtb	r2, r3
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b752:	2b03      	cmp	r3, #3
 800b754:	d903      	bls.n	800b75e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	220d      	movs	r2, #13
 800b75a:	701a      	strb	r2, [r3, #0]
      break;
 800b75c:	e082      	b.n	800b864 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	795b      	ldrb	r3, [r3, #5]
 800b762:	4619      	mov	r1, r3
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 feb1 	bl	800c4cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	791b      	ldrb	r3, [r3, #4]
 800b76e:	4619      	mov	r1, r3
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f000 feab 	bl	800c4cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2200      	movs	r2, #0
 800b780:	701a      	strb	r2, [r3, #0]
      break;
 800b782:	e06f      	b.n	800b864 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d019      	beq.n	800b7c2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b79a:	23ff      	movs	r3, #255	; 0xff
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f000 f949 	bl	800ba34 <USBH_Get_StringDesc>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b7a6:	7bbb      	ldrb	r3, [r7, #14]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d103      	bne.n	800b7b4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2206      	movs	r2, #6
 800b7b0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b7b2:	e059      	b.n	800b868 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b7b4:	7bbb      	ldrb	r3, [r7, #14]
 800b7b6:	2b03      	cmp	r3, #3
 800b7b8:	d156      	bne.n	800b868 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2206      	movs	r2, #6
 800b7be:	705a      	strb	r2, [r3, #1]
      break;
 800b7c0:	e052      	b.n	800b868 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2206      	movs	r2, #6
 800b7c6:	705a      	strb	r2, [r3, #1]
      break;
 800b7c8:	e04e      	b.n	800b868 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d019      	beq.n	800b808 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b7e0:	23ff      	movs	r3, #255	; 0xff
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 f926 	bl	800ba34 <USBH_Get_StringDesc>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b7ec:	7bbb      	ldrb	r3, [r7, #14]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d103      	bne.n	800b7fa <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2207      	movs	r2, #7
 800b7f6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b7f8:	e038      	b.n	800b86c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b7fa:	7bbb      	ldrb	r3, [r7, #14]
 800b7fc:	2b03      	cmp	r3, #3
 800b7fe:	d135      	bne.n	800b86c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2207      	movs	r2, #7
 800b804:	705a      	strb	r2, [r3, #1]
      break;
 800b806:	e031      	b.n	800b86c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2207      	movs	r2, #7
 800b80c:	705a      	strb	r2, [r3, #1]
      break;
 800b80e:	e02d      	b.n	800b86c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b816:	2b00      	cmp	r3, #0
 800b818:	d017      	beq.n	800b84a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b826:	23ff      	movs	r3, #255	; 0xff
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f000 f903 	bl	800ba34 <USBH_Get_StringDesc>
 800b82e:	4603      	mov	r3, r0
 800b830:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b832:	7bbb      	ldrb	r3, [r7, #14]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d102      	bne.n	800b83e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b838:	2300      	movs	r3, #0
 800b83a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b83c:	e018      	b.n	800b870 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b83e:	7bbb      	ldrb	r3, [r7, #14]
 800b840:	2b03      	cmp	r3, #3
 800b842:	d115      	bne.n	800b870 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b844:	2300      	movs	r3, #0
 800b846:	73fb      	strb	r3, [r7, #15]
      break;
 800b848:	e012      	b.n	800b870 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b84a:	2300      	movs	r3, #0
 800b84c:	73fb      	strb	r3, [r7, #15]
      break;
 800b84e:	e00f      	b.n	800b870 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b850:	bf00      	nop
 800b852:	e00e      	b.n	800b872 <USBH_HandleEnum+0x3be>
      break;
 800b854:	bf00      	nop
 800b856:	e00c      	b.n	800b872 <USBH_HandleEnum+0x3be>
      break;
 800b858:	bf00      	nop
 800b85a:	e00a      	b.n	800b872 <USBH_HandleEnum+0x3be>
      break;
 800b85c:	bf00      	nop
 800b85e:	e008      	b.n	800b872 <USBH_HandleEnum+0x3be>
      break;
 800b860:	bf00      	nop
 800b862:	e006      	b.n	800b872 <USBH_HandleEnum+0x3be>
      break;
 800b864:	bf00      	nop
 800b866:	e004      	b.n	800b872 <USBH_HandleEnum+0x3be>
      break;
 800b868:	bf00      	nop
 800b86a:	e002      	b.n	800b872 <USBH_HandleEnum+0x3be>
      break;
 800b86c:	bf00      	nop
 800b86e:	e000      	b.n	800b872 <USBH_HandleEnum+0x3be>
      break;
 800b870:	bf00      	nop
  }
  return Status;
 800b872:	7bfb      	ldrb	r3, [r7, #15]
}
 800b874:	4618      	mov	r0, r3
 800b876:	3710      	adds	r7, #16
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b083      	sub	sp, #12
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	683a      	ldr	r2, [r7, #0]
 800b88a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b88e:	bf00      	nop
 800b890:	370c      	adds	r7, #12
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr

0800b89a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b082      	sub	sp, #8
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b8a8:	1c5a      	adds	r2, r3, #1
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 f804 	bl	800b8be <USBH_HandleSof>
}
 800b8b6:	bf00      	nop
 800b8b8:	3708      	adds	r7, #8
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}

0800b8be <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b8be:	b580      	push	{r7, lr}
 800b8c0:	b082      	sub	sp, #8
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	2b0b      	cmp	r3, #11
 800b8ce:	d10a      	bne.n	800b8e6 <USBH_HandleSof+0x28>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d005      	beq.n	800b8e6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8e0:	699b      	ldr	r3, [r3, #24]
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	4798      	blx	r3
  }
}
 800b8e6:	bf00      	nop
 800b8e8:	3708      	adds	r7, #8
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}

0800b8ee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b8ee:	b480      	push	{r7}
 800b8f0:	b083      	sub	sp, #12
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b8fe:	bf00      	nop
}
 800b900:	370c      	adds	r7, #12
 800b902:	46bd      	mov	sp, r7
 800b904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b908:	4770      	bx	lr

0800b90a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b90a:	b480      	push	{r7}
 800b90c:	b083      	sub	sp, #12
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b91a:	bf00      	nop
}
 800b91c:	370c      	adds	r7, #12
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr

0800b926 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b926:	b480      	push	{r7}
 800b928:	b083      	sub	sp, #12
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2201      	movs	r2, #1
 800b932:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2200      	movs	r2, #0
 800b93a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2200      	movs	r2, #0
 800b942:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b946:	2300      	movs	r3, #0
}
 800b948:	4618      	mov	r0, r3
 800b94a:	370c      	adds	r7, #12
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2201      	movs	r2, #1
 800b960:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2200      	movs	r2, #0
 800b970:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 ff56 	bl	800c826 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	791b      	ldrb	r3, [r3, #4]
 800b97e:	4619      	mov	r1, r3
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 fda3 	bl	800c4cc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	795b      	ldrb	r3, [r3, #5]
 800b98a:	4619      	mov	r1, r3
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 fd9d 	bl	800c4cc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b992:	2300      	movs	r3, #0
}
 800b994:	4618      	mov	r0, r3
 800b996:	3708      	adds	r7, #8
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b086      	sub	sp, #24
 800b9a0:	af02      	add	r7, sp, #8
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b9ae:	78fb      	ldrb	r3, [r7, #3]
 800b9b0:	b29b      	uxth	r3, r3
 800b9b2:	9300      	str	r3, [sp, #0]
 800b9b4:	4613      	mov	r3, r2
 800b9b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b9ba:	2100      	movs	r1, #0
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 f864 	bl	800ba8a <USBH_GetDescriptor>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	73fb      	strb	r3, [r7, #15]
 800b9c6:	7bfb      	ldrb	r3, [r7, #15]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d10a      	bne.n	800b9e2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b9d8:	78fa      	ldrb	r2, [r7, #3]
 800b9da:	b292      	uxth	r2, r2
 800b9dc:	4619      	mov	r1, r3
 800b9de:	f000 f918 	bl	800bc12 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b9e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3710      	adds	r7, #16
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b086      	sub	sp, #24
 800b9f0:	af02      	add	r7, sp, #8
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	331c      	adds	r3, #28
 800b9fc:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b9fe:	887b      	ldrh	r3, [r7, #2]
 800ba00:	9300      	str	r3, [sp, #0]
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba08:	2100      	movs	r1, #0
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 f83d 	bl	800ba8a <USBH_GetDescriptor>
 800ba10:	4603      	mov	r3, r0
 800ba12:	72fb      	strb	r3, [r7, #11]
 800ba14:	7afb      	ldrb	r3, [r7, #11]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d107      	bne.n	800ba2a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ba20:	887a      	ldrh	r2, [r7, #2]
 800ba22:	68f9      	ldr	r1, [r7, #12]
 800ba24:	4618      	mov	r0, r3
 800ba26:	f000 f964 	bl	800bcf2 <USBH_ParseCfgDesc>
  }

  return status;
 800ba2a:	7afb      	ldrb	r3, [r7, #11]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3710      	adds	r7, #16
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b088      	sub	sp, #32
 800ba38:	af02      	add	r7, sp, #8
 800ba3a:	60f8      	str	r0, [r7, #12]
 800ba3c:	607a      	str	r2, [r7, #4]
 800ba3e:	461a      	mov	r2, r3
 800ba40:	460b      	mov	r3, r1
 800ba42:	72fb      	strb	r3, [r7, #11]
 800ba44:	4613      	mov	r3, r2
 800ba46:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800ba48:	7afb      	ldrb	r3, [r7, #11]
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ba50:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ba58:	893b      	ldrh	r3, [r7, #8]
 800ba5a:	9300      	str	r3, [sp, #0]
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	2100      	movs	r1, #0
 800ba60:	68f8      	ldr	r0, [r7, #12]
 800ba62:	f000 f812 	bl	800ba8a <USBH_GetDescriptor>
 800ba66:	4603      	mov	r3, r0
 800ba68:	75fb      	strb	r3, [r7, #23]
 800ba6a:	7dfb      	ldrb	r3, [r7, #23]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d107      	bne.n	800ba80 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ba76:	893a      	ldrh	r2, [r7, #8]
 800ba78:	6879      	ldr	r1, [r7, #4]
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f000 fa37 	bl	800beee <USBH_ParseStringDesc>
  }

  return status;
 800ba80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3718      	adds	r7, #24
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b084      	sub	sp, #16
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	60f8      	str	r0, [r7, #12]
 800ba92:	607b      	str	r3, [r7, #4]
 800ba94:	460b      	mov	r3, r1
 800ba96:	72fb      	strb	r3, [r7, #11]
 800ba98:	4613      	mov	r3, r2
 800ba9a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	789b      	ldrb	r3, [r3, #2]
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d11c      	bne.n	800bade <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800baa4:	7afb      	ldrb	r3, [r7, #11]
 800baa6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800baaa:	b2da      	uxtb	r2, r3
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2206      	movs	r2, #6
 800bab4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	893a      	ldrh	r2, [r7, #8]
 800baba:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800babc:	893b      	ldrh	r3, [r7, #8]
 800babe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bac6:	d104      	bne.n	800bad2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f240 4209 	movw	r2, #1033	; 0x409
 800bace:	829a      	strh	r2, [r3, #20]
 800bad0:	e002      	b.n	800bad8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2200      	movs	r2, #0
 800bad6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	8b3a      	ldrh	r2, [r7, #24]
 800badc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800bade:	8b3b      	ldrh	r3, [r7, #24]
 800bae0:	461a      	mov	r2, r3
 800bae2:	6879      	ldr	r1, [r7, #4]
 800bae4:	68f8      	ldr	r0, [r7, #12]
 800bae6:	f000 fa50 	bl	800bf8a <USBH_CtlReq>
 800baea:	4603      	mov	r3, r0
}
 800baec:	4618      	mov	r0, r3
 800baee:	3710      	adds	r7, #16
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	460b      	mov	r3, r1
 800bafe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	789b      	ldrb	r3, [r3, #2]
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d10f      	bne.n	800bb28 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2205      	movs	r2, #5
 800bb12:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bb14:	78fb      	ldrb	r3, [r7, #3]
 800bb16:	b29a      	uxth	r2, r3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2200      	movs	r2, #0
 800bb26:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bb28:	2200      	movs	r2, #0
 800bb2a:	2100      	movs	r1, #0
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 fa2c 	bl	800bf8a <USBH_CtlReq>
 800bb32:	4603      	mov	r3, r0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3708      	adds	r7, #8
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b082      	sub	sp, #8
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	460b      	mov	r3, r1
 800bb46:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	789b      	ldrb	r3, [r3, #2]
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d10e      	bne.n	800bb6e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2200      	movs	r2, #0
 800bb54:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2209      	movs	r2, #9
 800bb5a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	887a      	ldrh	r2, [r7, #2]
 800bb60:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2200      	movs	r2, #0
 800bb66:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bb6e:	2200      	movs	r2, #0
 800bb70:	2100      	movs	r1, #0
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f000 fa09 	bl	800bf8a <USBH_CtlReq>
 800bb78:	4603      	mov	r3, r0
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3708      	adds	r7, #8
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}

0800bb82 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bb82:	b580      	push	{r7, lr}
 800bb84:	b082      	sub	sp, #8
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	789b      	ldrb	r3, [r3, #2]
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d10f      	bne.n	800bbb6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2203      	movs	r2, #3
 800bba0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bba2:	78fb      	ldrb	r3, [r7, #3]
 800bba4:	b29a      	uxth	r2, r3
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2200      	movs	r2, #0
 800bbae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	2100      	movs	r1, #0
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 f9e5 	bl	800bf8a <USBH_CtlReq>
 800bbc0:	4603      	mov	r3, r0
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3708      	adds	r7, #8
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800bbca:	b580      	push	{r7, lr}
 800bbcc:	b082      	sub	sp, #8
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	789b      	ldrb	r3, [r3, #2]
 800bbda:	2b01      	cmp	r3, #1
 800bbdc:	d10f      	bne.n	800bbfe <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2202      	movs	r2, #2
 800bbe2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bbf0:	78fb      	ldrb	r3, [r7, #3]
 800bbf2:	b29a      	uxth	r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800bbfe:	2200      	movs	r2, #0
 800bc00:	2100      	movs	r1, #0
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 f9c1 	bl	800bf8a <USBH_CtlReq>
 800bc08:	4603      	mov	r3, r0
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3708      	adds	r7, #8
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}

0800bc12 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800bc12:	b480      	push	{r7}
 800bc14:	b085      	sub	sp, #20
 800bc16:	af00      	add	r7, sp, #0
 800bc18:	60f8      	str	r0, [r7, #12]
 800bc1a:	60b9      	str	r1, [r7, #8]
 800bc1c:	4613      	mov	r3, r2
 800bc1e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	781a      	ldrb	r2, [r3, #0]
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	785a      	ldrb	r2, [r3, #1]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	3302      	adds	r3, #2
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	b29a      	uxth	r2, r3
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	3303      	adds	r3, #3
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	021b      	lsls	r3, r3, #8
 800bc42:	b29b      	uxth	r3, r3
 800bc44:	4313      	orrs	r3, r2
 800bc46:	b29a      	uxth	r2, r3
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	791a      	ldrb	r2, [r3, #4]
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	795a      	ldrb	r2, [r3, #5]
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	799a      	ldrb	r2, [r3, #6]
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	79da      	ldrb	r2, [r3, #7]
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800bc6c:	88fb      	ldrh	r3, [r7, #6]
 800bc6e:	2b08      	cmp	r3, #8
 800bc70:	d939      	bls.n	800bce6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	3308      	adds	r3, #8
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	b29a      	uxth	r2, r3
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	3309      	adds	r3, #9
 800bc7e:	781b      	ldrb	r3, [r3, #0]
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	021b      	lsls	r3, r3, #8
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	4313      	orrs	r3, r2
 800bc88:	b29a      	uxth	r2, r3
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	330a      	adds	r3, #10
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	b29a      	uxth	r2, r3
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	330b      	adds	r3, #11
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	021b      	lsls	r3, r3, #8
 800bca0:	b29b      	uxth	r3, r3
 800bca2:	4313      	orrs	r3, r2
 800bca4:	b29a      	uxth	r2, r3
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	330c      	adds	r3, #12
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	b29a      	uxth	r2, r3
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	330d      	adds	r3, #13
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	021b      	lsls	r3, r3, #8
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	b29a      	uxth	r2, r3
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	7b9a      	ldrb	r2, [r3, #14]
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	7bda      	ldrb	r2, [r3, #15]
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	7c1a      	ldrb	r2, [r3, #16]
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	7c5a      	ldrb	r2, [r3, #17]
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	745a      	strb	r2, [r3, #17]
  }
}
 800bce6:	bf00      	nop
 800bce8:	3714      	adds	r7, #20
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr

0800bcf2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b08a      	sub	sp, #40	; 0x28
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	60f8      	str	r0, [r7, #12]
 800bcfa:	60b9      	str	r1, [r7, #8]
 800bcfc:	4613      	mov	r3, r2
 800bcfe:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bd04:	2300      	movs	r3, #0
 800bd06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	781a      	ldrb	r2, [r3, #0]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	785a      	ldrb	r2, [r3, #1]
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	3302      	adds	r3, #2
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	b29a      	uxth	r2, r3
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	3303      	adds	r3, #3
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	021b      	lsls	r3, r3, #8
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	b29a      	uxth	r2, r3
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	791a      	ldrb	r2, [r3, #4]
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	795a      	ldrb	r2, [r3, #5]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	799a      	ldrb	r2, [r3, #6]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	79da      	ldrb	r2, [r3, #7]
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	7a1a      	ldrb	r2, [r3, #8]
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bd68:	88fb      	ldrh	r3, [r7, #6]
 800bd6a:	2b09      	cmp	r3, #9
 800bd6c:	d95f      	bls.n	800be2e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800bd6e:	2309      	movs	r3, #9
 800bd70:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800bd72:	2300      	movs	r3, #0
 800bd74:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bd76:	e051      	b.n	800be1c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bd78:	f107 0316 	add.w	r3, r7, #22
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd80:	f000 f8e8 	bl	800bf54 <USBH_GetNextDesc>
 800bd84:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800bd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd88:	785b      	ldrb	r3, [r3, #1]
 800bd8a:	2b04      	cmp	r3, #4
 800bd8c:	d146      	bne.n	800be1c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800bd8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bd92:	221a      	movs	r2, #26
 800bd94:	fb02 f303 	mul.w	r3, r2, r3
 800bd98:	3308      	adds	r3, #8
 800bd9a:	68fa      	ldr	r2, [r7, #12]
 800bd9c:	4413      	add	r3, r2
 800bd9e:	3302      	adds	r3, #2
 800bda0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800bda2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bda4:	69f8      	ldr	r0, [r7, #28]
 800bda6:	f000 f846 	bl	800be36 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bdb4:	e022      	b.n	800bdfc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bdb6:	f107 0316 	add.w	r3, r7, #22
 800bdba:	4619      	mov	r1, r3
 800bdbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bdbe:	f000 f8c9 	bl	800bf54 <USBH_GetNextDesc>
 800bdc2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800bdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc6:	785b      	ldrb	r3, [r3, #1]
 800bdc8:	2b05      	cmp	r3, #5
 800bdca:	d117      	bne.n	800bdfc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800bdcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bdd0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bdd4:	3201      	adds	r2, #1
 800bdd6:	00d2      	lsls	r2, r2, #3
 800bdd8:	211a      	movs	r1, #26
 800bdda:	fb01 f303 	mul.w	r3, r1, r3
 800bdde:	4413      	add	r3, r2
 800bde0:	3308      	adds	r3, #8
 800bde2:	68fa      	ldr	r2, [r7, #12]
 800bde4:	4413      	add	r3, r2
 800bde6:	3304      	adds	r3, #4
 800bde8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800bdea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bdec:	69b8      	ldr	r0, [r7, #24]
 800bdee:	f000 f851 	bl	800be94 <USBH_ParseEPDesc>
            ep_ix++;
 800bdf2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	791b      	ldrb	r3, [r3, #4]
 800be00:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800be04:	429a      	cmp	r2, r3
 800be06:	d204      	bcs.n	800be12 <USBH_ParseCfgDesc+0x120>
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	885a      	ldrh	r2, [r3, #2]
 800be0c:	8afb      	ldrh	r3, [r7, #22]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d8d1      	bhi.n	800bdb6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800be12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800be16:	3301      	adds	r3, #1
 800be18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800be1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800be20:	2b01      	cmp	r3, #1
 800be22:	d804      	bhi.n	800be2e <USBH_ParseCfgDesc+0x13c>
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	885a      	ldrh	r2, [r3, #2]
 800be28:	8afb      	ldrh	r3, [r7, #22]
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d8a4      	bhi.n	800bd78 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800be2e:	bf00      	nop
 800be30:	3728      	adds	r7, #40	; 0x28
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800be36:	b480      	push	{r7}
 800be38:	b083      	sub	sp, #12
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
 800be3e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	781a      	ldrb	r2, [r3, #0]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	785a      	ldrb	r2, [r3, #1]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	789a      	ldrb	r2, [r3, #2]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	78da      	ldrb	r2, [r3, #3]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	791a      	ldrb	r2, [r3, #4]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	795a      	ldrb	r2, [r3, #5]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	799a      	ldrb	r2, [r3, #6]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	79da      	ldrb	r2, [r3, #7]
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	7a1a      	ldrb	r2, [r3, #8]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	721a      	strb	r2, [r3, #8]
}
 800be88:	bf00      	nop
 800be8a:	370c      	adds	r7, #12
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr

0800be94 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800be94:	b480      	push	{r7}
 800be96:	b083      	sub	sp, #12
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	781a      	ldrb	r2, [r3, #0]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	785a      	ldrb	r2, [r3, #1]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	789a      	ldrb	r2, [r3, #2]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	78da      	ldrb	r2, [r3, #3]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	3304      	adds	r3, #4
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	b29a      	uxth	r2, r3
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	3305      	adds	r3, #5
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	b29b      	uxth	r3, r3
 800bece:	021b      	lsls	r3, r3, #8
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	4313      	orrs	r3, r2
 800bed4:	b29a      	uxth	r2, r3
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	799a      	ldrb	r2, [r3, #6]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	719a      	strb	r2, [r3, #6]
}
 800bee2:	bf00      	nop
 800bee4:	370c      	adds	r7, #12
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr

0800beee <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800beee:	b480      	push	{r7}
 800bef0:	b087      	sub	sp, #28
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	60f8      	str	r0, [r7, #12]
 800bef6:	60b9      	str	r1, [r7, #8]
 800bef8:	4613      	mov	r3, r2
 800befa:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	3301      	adds	r3, #1
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	2b03      	cmp	r3, #3
 800bf04:	d120      	bne.n	800bf48 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	781b      	ldrb	r3, [r3, #0]
 800bf0a:	1e9a      	subs	r2, r3, #2
 800bf0c:	88fb      	ldrh	r3, [r7, #6]
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	bf28      	it	cs
 800bf12:	4613      	movcs	r3, r2
 800bf14:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	3302      	adds	r3, #2
 800bf1a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	82fb      	strh	r3, [r7, #22]
 800bf20:	e00b      	b.n	800bf3a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bf22:	8afb      	ldrh	r3, [r7, #22]
 800bf24:	68fa      	ldr	r2, [r7, #12]
 800bf26:	4413      	add	r3, r2
 800bf28:	781a      	ldrb	r2, [r3, #0]
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	3301      	adds	r3, #1
 800bf32:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bf34:	8afb      	ldrh	r3, [r7, #22]
 800bf36:	3302      	adds	r3, #2
 800bf38:	82fb      	strh	r3, [r7, #22]
 800bf3a:	8afa      	ldrh	r2, [r7, #22]
 800bf3c:	8abb      	ldrh	r3, [r7, #20]
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d3ef      	bcc.n	800bf22 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	2200      	movs	r2, #0
 800bf46:	701a      	strb	r2, [r3, #0]
  }
}
 800bf48:	bf00      	nop
 800bf4a:	371c      	adds	r7, #28
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr

0800bf54 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b085      	sub	sp, #20
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	881a      	ldrh	r2, [r3, #0]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	b29b      	uxth	r3, r3
 800bf68:	4413      	add	r3, r2
 800bf6a:	b29a      	uxth	r2, r3
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	4413      	add	r3, r2
 800bf7a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3714      	adds	r7, #20
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr

0800bf8a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b086      	sub	sp, #24
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	60f8      	str	r0, [r7, #12]
 800bf92:	60b9      	str	r1, [r7, #8]
 800bf94:	4613      	mov	r3, r2
 800bf96:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bf98:	2301      	movs	r3, #1
 800bf9a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	789b      	ldrb	r3, [r3, #2]
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d002      	beq.n	800bfaa <USBH_CtlReq+0x20>
 800bfa4:	2b02      	cmp	r3, #2
 800bfa6:	d00f      	beq.n	800bfc8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800bfa8:	e027      	b.n	800bffa <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	68ba      	ldr	r2, [r7, #8]
 800bfae:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	88fa      	ldrh	r2, [r7, #6]
 800bfb4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2201      	movs	r2, #1
 800bfba:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2202      	movs	r2, #2
 800bfc0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	75fb      	strb	r3, [r7, #23]
      break;
 800bfc6:	e018      	b.n	800bffa <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800bfc8:	68f8      	ldr	r0, [r7, #12]
 800bfca:	f000 f81b 	bl	800c004 <USBH_HandleControl>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bfd2:	7dfb      	ldrb	r3, [r7, #23]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d002      	beq.n	800bfde <USBH_CtlReq+0x54>
 800bfd8:	7dfb      	ldrb	r3, [r7, #23]
 800bfda:	2b03      	cmp	r3, #3
 800bfdc:	d106      	bne.n	800bfec <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	761a      	strb	r2, [r3, #24]
      break;
 800bfea:	e005      	b.n	800bff8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800bfec:	7dfb      	ldrb	r3, [r7, #23]
 800bfee:	2b02      	cmp	r3, #2
 800bff0:	d102      	bne.n	800bff8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2201      	movs	r2, #1
 800bff6:	709a      	strb	r2, [r3, #2]
      break;
 800bff8:	bf00      	nop
  }
  return status;
 800bffa:	7dfb      	ldrb	r3, [r7, #23]
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3718      	adds	r7, #24
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}

0800c004 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b086      	sub	sp, #24
 800c008:	af02      	add	r7, sp, #8
 800c00a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c00c:	2301      	movs	r3, #1
 800c00e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c010:	2300      	movs	r3, #0
 800c012:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	7e1b      	ldrb	r3, [r3, #24]
 800c018:	3b01      	subs	r3, #1
 800c01a:	2b0a      	cmp	r3, #10
 800c01c:	f200 8156 	bhi.w	800c2cc <USBH_HandleControl+0x2c8>
 800c020:	a201      	add	r2, pc, #4	; (adr r2, 800c028 <USBH_HandleControl+0x24>)
 800c022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c026:	bf00      	nop
 800c028:	0800c055 	.word	0x0800c055
 800c02c:	0800c06f 	.word	0x0800c06f
 800c030:	0800c0d9 	.word	0x0800c0d9
 800c034:	0800c0ff 	.word	0x0800c0ff
 800c038:	0800c137 	.word	0x0800c137
 800c03c:	0800c161 	.word	0x0800c161
 800c040:	0800c1b3 	.word	0x0800c1b3
 800c044:	0800c1d5 	.word	0x0800c1d5
 800c048:	0800c211 	.word	0x0800c211
 800c04c:	0800c237 	.word	0x0800c237
 800c050:	0800c275 	.word	0x0800c275
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f103 0110 	add.w	r1, r3, #16
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	795b      	ldrb	r3, [r3, #5]
 800c05e:	461a      	mov	r2, r3
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 f943 	bl	800c2ec <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2202      	movs	r2, #2
 800c06a:	761a      	strb	r2, [r3, #24]
      break;
 800c06c:	e139      	b.n	800c2e2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	795b      	ldrb	r3, [r3, #5]
 800c072:	4619      	mov	r1, r3
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 fcc5 	bl	800ca04 <USBH_LL_GetURBState>
 800c07a:	4603      	mov	r3, r0
 800c07c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c07e:	7bbb      	ldrb	r3, [r7, #14]
 800c080:	2b01      	cmp	r3, #1
 800c082:	d11e      	bne.n	800c0c2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	7c1b      	ldrb	r3, [r3, #16]
 800c088:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c08c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	8adb      	ldrh	r3, [r3, #22]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d00a      	beq.n	800c0ac <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c096:	7b7b      	ldrb	r3, [r7, #13]
 800c098:	2b80      	cmp	r3, #128	; 0x80
 800c09a:	d103      	bne.n	800c0a4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2203      	movs	r2, #3
 800c0a0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c0a2:	e115      	b.n	800c2d0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2205      	movs	r2, #5
 800c0a8:	761a      	strb	r2, [r3, #24]
      break;
 800c0aa:	e111      	b.n	800c2d0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c0ac:	7b7b      	ldrb	r3, [r7, #13]
 800c0ae:	2b80      	cmp	r3, #128	; 0x80
 800c0b0:	d103      	bne.n	800c0ba <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2209      	movs	r2, #9
 800c0b6:	761a      	strb	r2, [r3, #24]
      break;
 800c0b8:	e10a      	b.n	800c2d0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2207      	movs	r2, #7
 800c0be:	761a      	strb	r2, [r3, #24]
      break;
 800c0c0:	e106      	b.n	800c2d0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c0c2:	7bbb      	ldrb	r3, [r7, #14]
 800c0c4:	2b04      	cmp	r3, #4
 800c0c6:	d003      	beq.n	800c0d0 <USBH_HandleControl+0xcc>
 800c0c8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ca:	2b02      	cmp	r3, #2
 800c0cc:	f040 8100 	bne.w	800c2d0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	220b      	movs	r2, #11
 800c0d4:	761a      	strb	r2, [r3, #24]
      break;
 800c0d6:	e0fb      	b.n	800c2d0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c0de:	b29a      	uxth	r2, r3
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6899      	ldr	r1, [r3, #8]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	899a      	ldrh	r2, [r3, #12]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	791b      	ldrb	r3, [r3, #4]
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 f93a 	bl	800c36a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2204      	movs	r2, #4
 800c0fa:	761a      	strb	r2, [r3, #24]
      break;
 800c0fc:	e0f1      	b.n	800c2e2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	791b      	ldrb	r3, [r3, #4]
 800c102:	4619      	mov	r1, r3
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 fc7d 	bl	800ca04 <USBH_LL_GetURBState>
 800c10a:	4603      	mov	r3, r0
 800c10c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c10e:	7bbb      	ldrb	r3, [r7, #14]
 800c110:	2b01      	cmp	r3, #1
 800c112:	d102      	bne.n	800c11a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2209      	movs	r2, #9
 800c118:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c11a:	7bbb      	ldrb	r3, [r7, #14]
 800c11c:	2b05      	cmp	r3, #5
 800c11e:	d102      	bne.n	800c126 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c120:	2303      	movs	r3, #3
 800c122:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c124:	e0d6      	b.n	800c2d4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c126:	7bbb      	ldrb	r3, [r7, #14]
 800c128:	2b04      	cmp	r3, #4
 800c12a:	f040 80d3 	bne.w	800c2d4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	220b      	movs	r2, #11
 800c132:	761a      	strb	r2, [r3, #24]
      break;
 800c134:	e0ce      	b.n	800c2d4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6899      	ldr	r1, [r3, #8]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	899a      	ldrh	r2, [r3, #12]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	795b      	ldrb	r3, [r3, #5]
 800c142:	2001      	movs	r0, #1
 800c144:	9000      	str	r0, [sp, #0]
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f000 f8ea 	bl	800c320 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c152:	b29a      	uxth	r2, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2206      	movs	r2, #6
 800c15c:	761a      	strb	r2, [r3, #24]
      break;
 800c15e:	e0c0      	b.n	800c2e2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	795b      	ldrb	r3, [r3, #5]
 800c164:	4619      	mov	r1, r3
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 fc4c 	bl	800ca04 <USBH_LL_GetURBState>
 800c16c:	4603      	mov	r3, r0
 800c16e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c170:	7bbb      	ldrb	r3, [r7, #14]
 800c172:	2b01      	cmp	r3, #1
 800c174:	d103      	bne.n	800c17e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2207      	movs	r2, #7
 800c17a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c17c:	e0ac      	b.n	800c2d8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c17e:	7bbb      	ldrb	r3, [r7, #14]
 800c180:	2b05      	cmp	r3, #5
 800c182:	d105      	bne.n	800c190 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	220c      	movs	r2, #12
 800c188:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c18a:	2303      	movs	r3, #3
 800c18c:	73fb      	strb	r3, [r7, #15]
      break;
 800c18e:	e0a3      	b.n	800c2d8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c190:	7bbb      	ldrb	r3, [r7, #14]
 800c192:	2b02      	cmp	r3, #2
 800c194:	d103      	bne.n	800c19e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2205      	movs	r2, #5
 800c19a:	761a      	strb	r2, [r3, #24]
      break;
 800c19c:	e09c      	b.n	800c2d8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c19e:	7bbb      	ldrb	r3, [r7, #14]
 800c1a0:	2b04      	cmp	r3, #4
 800c1a2:	f040 8099 	bne.w	800c2d8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	220b      	movs	r2, #11
 800c1aa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c1ac:	2302      	movs	r3, #2
 800c1ae:	73fb      	strb	r3, [r7, #15]
      break;
 800c1b0:	e092      	b.n	800c2d8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	791b      	ldrb	r3, [r3, #4]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	2100      	movs	r1, #0
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 f8d5 	bl	800c36a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c1c6:	b29a      	uxth	r2, r3
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2208      	movs	r2, #8
 800c1d0:	761a      	strb	r2, [r3, #24]

      break;
 800c1d2:	e086      	b.n	800c2e2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	791b      	ldrb	r3, [r3, #4]
 800c1d8:	4619      	mov	r1, r3
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 fc12 	bl	800ca04 <USBH_LL_GetURBState>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c1e4:	7bbb      	ldrb	r3, [r7, #14]
 800c1e6:	2b01      	cmp	r3, #1
 800c1e8:	d105      	bne.n	800c1f6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	220d      	movs	r2, #13
 800c1ee:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c1f4:	e072      	b.n	800c2dc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c1f6:	7bbb      	ldrb	r3, [r7, #14]
 800c1f8:	2b04      	cmp	r3, #4
 800c1fa:	d103      	bne.n	800c204 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	220b      	movs	r2, #11
 800c200:	761a      	strb	r2, [r3, #24]
      break;
 800c202:	e06b      	b.n	800c2dc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c204:	7bbb      	ldrb	r3, [r7, #14]
 800c206:	2b05      	cmp	r3, #5
 800c208:	d168      	bne.n	800c2dc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c20a:	2303      	movs	r3, #3
 800c20c:	73fb      	strb	r3, [r7, #15]
      break;
 800c20e:	e065      	b.n	800c2dc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	795b      	ldrb	r3, [r3, #5]
 800c214:	2201      	movs	r2, #1
 800c216:	9200      	str	r2, [sp, #0]
 800c218:	2200      	movs	r2, #0
 800c21a:	2100      	movs	r1, #0
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 f87f 	bl	800c320 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c228:	b29a      	uxth	r2, r3
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	220a      	movs	r2, #10
 800c232:	761a      	strb	r2, [r3, #24]
      break;
 800c234:	e055      	b.n	800c2e2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	795b      	ldrb	r3, [r3, #5]
 800c23a:	4619      	mov	r1, r3
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 fbe1 	bl	800ca04 <USBH_LL_GetURBState>
 800c242:	4603      	mov	r3, r0
 800c244:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c246:	7bbb      	ldrb	r3, [r7, #14]
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d105      	bne.n	800c258 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c24c:	2300      	movs	r3, #0
 800c24e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	220d      	movs	r2, #13
 800c254:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c256:	e043      	b.n	800c2e0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c258:	7bbb      	ldrb	r3, [r7, #14]
 800c25a:	2b02      	cmp	r3, #2
 800c25c:	d103      	bne.n	800c266 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2209      	movs	r2, #9
 800c262:	761a      	strb	r2, [r3, #24]
      break;
 800c264:	e03c      	b.n	800c2e0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c266:	7bbb      	ldrb	r3, [r7, #14]
 800c268:	2b04      	cmp	r3, #4
 800c26a:	d139      	bne.n	800c2e0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	220b      	movs	r2, #11
 800c270:	761a      	strb	r2, [r3, #24]
      break;
 800c272:	e035      	b.n	800c2e0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	7e5b      	ldrb	r3, [r3, #25]
 800c278:	3301      	adds	r3, #1
 800c27a:	b2da      	uxtb	r2, r3
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	765a      	strb	r2, [r3, #25]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	7e5b      	ldrb	r3, [r3, #25]
 800c284:	2b02      	cmp	r3, #2
 800c286:	d806      	bhi.n	800c296 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2201      	movs	r2, #1
 800c28c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2201      	movs	r2, #1
 800c292:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c294:	e025      	b.n	800c2e2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c29c:	2106      	movs	r1, #6
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	795b      	ldrb	r3, [r3, #5]
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f000 f90c 	bl	800c4cc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	791b      	ldrb	r3, [r3, #4]
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 f906 	bl	800c4cc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c2c6:	2302      	movs	r3, #2
 800c2c8:	73fb      	strb	r3, [r7, #15]
      break;
 800c2ca:	e00a      	b.n	800c2e2 <USBH_HandleControl+0x2de>

    default:
      break;
 800c2cc:	bf00      	nop
 800c2ce:	e008      	b.n	800c2e2 <USBH_HandleControl+0x2de>
      break;
 800c2d0:	bf00      	nop
 800c2d2:	e006      	b.n	800c2e2 <USBH_HandleControl+0x2de>
      break;
 800c2d4:	bf00      	nop
 800c2d6:	e004      	b.n	800c2e2 <USBH_HandleControl+0x2de>
      break;
 800c2d8:	bf00      	nop
 800c2da:	e002      	b.n	800c2e2 <USBH_HandleControl+0x2de>
      break;
 800c2dc:	bf00      	nop
 800c2de:	e000      	b.n	800c2e2 <USBH_HandleControl+0x2de>
      break;
 800c2e0:	bf00      	nop
  }

  return status;
 800c2e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3710      	adds	r7, #16
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b088      	sub	sp, #32
 800c2f0:	af04      	add	r7, sp, #16
 800c2f2:	60f8      	str	r0, [r7, #12]
 800c2f4:	60b9      	str	r1, [r7, #8]
 800c2f6:	4613      	mov	r3, r2
 800c2f8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c2fa:	79f9      	ldrb	r1, [r7, #7]
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	9303      	str	r3, [sp, #12]
 800c300:	2308      	movs	r3, #8
 800c302:	9302      	str	r3, [sp, #8]
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	9301      	str	r3, [sp, #4]
 800c308:	2300      	movs	r3, #0
 800c30a:	9300      	str	r3, [sp, #0]
 800c30c:	2300      	movs	r3, #0
 800c30e:	2200      	movs	r2, #0
 800c310:	68f8      	ldr	r0, [r7, #12]
 800c312:	f000 fb46 	bl	800c9a2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800c316:	2300      	movs	r3, #0
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3710      	adds	r7, #16
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b088      	sub	sp, #32
 800c324:	af04      	add	r7, sp, #16
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	60b9      	str	r1, [r7, #8]
 800c32a:	4611      	mov	r1, r2
 800c32c:	461a      	mov	r2, r3
 800c32e:	460b      	mov	r3, r1
 800c330:	80fb      	strh	r3, [r7, #6]
 800c332:	4613      	mov	r3, r2
 800c334:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d001      	beq.n	800c344 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c340:	2300      	movs	r3, #0
 800c342:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c344:	7979      	ldrb	r1, [r7, #5]
 800c346:	7e3b      	ldrb	r3, [r7, #24]
 800c348:	9303      	str	r3, [sp, #12]
 800c34a:	88fb      	ldrh	r3, [r7, #6]
 800c34c:	9302      	str	r3, [sp, #8]
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	9301      	str	r3, [sp, #4]
 800c352:	2301      	movs	r3, #1
 800c354:	9300      	str	r3, [sp, #0]
 800c356:	2300      	movs	r3, #0
 800c358:	2200      	movs	r2, #0
 800c35a:	68f8      	ldr	r0, [r7, #12]
 800c35c:	f000 fb21 	bl	800c9a2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c360:	2300      	movs	r3, #0
}
 800c362:	4618      	mov	r0, r3
 800c364:	3710      	adds	r7, #16
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}

0800c36a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c36a:	b580      	push	{r7, lr}
 800c36c:	b088      	sub	sp, #32
 800c36e:	af04      	add	r7, sp, #16
 800c370:	60f8      	str	r0, [r7, #12]
 800c372:	60b9      	str	r1, [r7, #8]
 800c374:	4611      	mov	r1, r2
 800c376:	461a      	mov	r2, r3
 800c378:	460b      	mov	r3, r1
 800c37a:	80fb      	strh	r3, [r7, #6]
 800c37c:	4613      	mov	r3, r2
 800c37e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c380:	7979      	ldrb	r1, [r7, #5]
 800c382:	2300      	movs	r3, #0
 800c384:	9303      	str	r3, [sp, #12]
 800c386:	88fb      	ldrh	r3, [r7, #6]
 800c388:	9302      	str	r3, [sp, #8]
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	9301      	str	r3, [sp, #4]
 800c38e:	2301      	movs	r3, #1
 800c390:	9300      	str	r3, [sp, #0]
 800c392:	2300      	movs	r3, #0
 800c394:	2201      	movs	r2, #1
 800c396:	68f8      	ldr	r0, [r7, #12]
 800c398:	f000 fb03 	bl	800c9a2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c39c:	2300      	movs	r3, #0

}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3710      	adds	r7, #16
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}

0800c3a6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c3a6:	b580      	push	{r7, lr}
 800c3a8:	b088      	sub	sp, #32
 800c3aa:	af04      	add	r7, sp, #16
 800c3ac:	60f8      	str	r0, [r7, #12]
 800c3ae:	60b9      	str	r1, [r7, #8]
 800c3b0:	4611      	mov	r1, r2
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	80fb      	strh	r3, [r7, #6]
 800c3b8:	4613      	mov	r3, r2
 800c3ba:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d001      	beq.n	800c3ca <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c3ca:	7979      	ldrb	r1, [r7, #5]
 800c3cc:	7e3b      	ldrb	r3, [r7, #24]
 800c3ce:	9303      	str	r3, [sp, #12]
 800c3d0:	88fb      	ldrh	r3, [r7, #6]
 800c3d2:	9302      	str	r3, [sp, #8]
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	9301      	str	r3, [sp, #4]
 800c3d8:	2301      	movs	r3, #1
 800c3da:	9300      	str	r3, [sp, #0]
 800c3dc:	2302      	movs	r3, #2
 800c3de:	2200      	movs	r2, #0
 800c3e0:	68f8      	ldr	r0, [r7, #12]
 800c3e2:	f000 fade 	bl	800c9a2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c3e6:	2300      	movs	r3, #0
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3710      	adds	r7, #16
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b088      	sub	sp, #32
 800c3f4:	af04      	add	r7, sp, #16
 800c3f6:	60f8      	str	r0, [r7, #12]
 800c3f8:	60b9      	str	r1, [r7, #8]
 800c3fa:	4611      	mov	r1, r2
 800c3fc:	461a      	mov	r2, r3
 800c3fe:	460b      	mov	r3, r1
 800c400:	80fb      	strh	r3, [r7, #6]
 800c402:	4613      	mov	r3, r2
 800c404:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c406:	7979      	ldrb	r1, [r7, #5]
 800c408:	2300      	movs	r3, #0
 800c40a:	9303      	str	r3, [sp, #12]
 800c40c:	88fb      	ldrh	r3, [r7, #6]
 800c40e:	9302      	str	r3, [sp, #8]
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	9301      	str	r3, [sp, #4]
 800c414:	2301      	movs	r3, #1
 800c416:	9300      	str	r3, [sp, #0]
 800c418:	2302      	movs	r3, #2
 800c41a:	2201      	movs	r2, #1
 800c41c:	68f8      	ldr	r0, [r7, #12]
 800c41e:	f000 fac0 	bl	800c9a2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c422:	2300      	movs	r3, #0
}
 800c424:	4618      	mov	r0, r3
 800c426:	3710      	adds	r7, #16
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}

0800c42c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b086      	sub	sp, #24
 800c430:	af04      	add	r7, sp, #16
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	4608      	mov	r0, r1
 800c436:	4611      	mov	r1, r2
 800c438:	461a      	mov	r2, r3
 800c43a:	4603      	mov	r3, r0
 800c43c:	70fb      	strb	r3, [r7, #3]
 800c43e:	460b      	mov	r3, r1
 800c440:	70bb      	strb	r3, [r7, #2]
 800c442:	4613      	mov	r3, r2
 800c444:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c446:	7878      	ldrb	r0, [r7, #1]
 800c448:	78ba      	ldrb	r2, [r7, #2]
 800c44a:	78f9      	ldrb	r1, [r7, #3]
 800c44c:	8b3b      	ldrh	r3, [r7, #24]
 800c44e:	9302      	str	r3, [sp, #8]
 800c450:	7d3b      	ldrb	r3, [r7, #20]
 800c452:	9301      	str	r3, [sp, #4]
 800c454:	7c3b      	ldrb	r3, [r7, #16]
 800c456:	9300      	str	r3, [sp, #0]
 800c458:	4603      	mov	r3, r0
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 fa53 	bl	800c906 <USBH_LL_OpenPipe>

  return USBH_OK;
 800c460:	2300      	movs	r3, #0
}
 800c462:	4618      	mov	r0, r3
 800c464:	3708      	adds	r7, #8
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}

0800c46a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c46a:	b580      	push	{r7, lr}
 800c46c:	b082      	sub	sp, #8
 800c46e:	af00      	add	r7, sp, #0
 800c470:	6078      	str	r0, [r7, #4]
 800c472:	460b      	mov	r3, r1
 800c474:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800c476:	78fb      	ldrb	r3, [r7, #3]
 800c478:	4619      	mov	r1, r3
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 fa72 	bl	800c964 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c480:	2300      	movs	r3, #0
}
 800c482:	4618      	mov	r0, r3
 800c484:	3708      	adds	r7, #8
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}

0800c48a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c48a:	b580      	push	{r7, lr}
 800c48c:	b084      	sub	sp, #16
 800c48e:	af00      	add	r7, sp, #0
 800c490:	6078      	str	r0, [r7, #4]
 800c492:	460b      	mov	r3, r1
 800c494:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 f836 	bl	800c508 <USBH_GetFreePipe>
 800c49c:	4603      	mov	r3, r0
 800c49e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c4a0:	89fb      	ldrh	r3, [r7, #14]
 800c4a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d00a      	beq.n	800c4c0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800c4aa:	78fa      	ldrb	r2, [r7, #3]
 800c4ac:	89fb      	ldrh	r3, [r7, #14]
 800c4ae:	f003 030f 	and.w	r3, r3, #15
 800c4b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c4b6:	6879      	ldr	r1, [r7, #4]
 800c4b8:	33e0      	adds	r3, #224	; 0xe0
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	440b      	add	r3, r1
 800c4be:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c4c0:	89fb      	ldrh	r3, [r7, #14]
 800c4c2:	b2db      	uxtb	r3, r3
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3710      	adds	r7, #16
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b083      	sub	sp, #12
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800c4d8:	78fb      	ldrb	r3, [r7, #3]
 800c4da:	2b0a      	cmp	r3, #10
 800c4dc:	d80d      	bhi.n	800c4fa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c4de:	78fb      	ldrb	r3, [r7, #3]
 800c4e0:	687a      	ldr	r2, [r7, #4]
 800c4e2:	33e0      	adds	r3, #224	; 0xe0
 800c4e4:	009b      	lsls	r3, r3, #2
 800c4e6:	4413      	add	r3, r2
 800c4e8:	685a      	ldr	r2, [r3, #4]
 800c4ea:	78fb      	ldrb	r3, [r7, #3]
 800c4ec:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c4f0:	6879      	ldr	r1, [r7, #4]
 800c4f2:	33e0      	adds	r3, #224	; 0xe0
 800c4f4:	009b      	lsls	r3, r3, #2
 800c4f6:	440b      	add	r3, r1
 800c4f8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c4fa:	2300      	movs	r3, #0
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	370c      	adds	r7, #12
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr

0800c508 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c508:	b480      	push	{r7}
 800c50a:	b085      	sub	sp, #20
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c510:	2300      	movs	r3, #0
 800c512:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800c514:	2300      	movs	r3, #0
 800c516:	73fb      	strb	r3, [r7, #15]
 800c518:	e00f      	b.n	800c53a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c51a:	7bfb      	ldrb	r3, [r7, #15]
 800c51c:	687a      	ldr	r2, [r7, #4]
 800c51e:	33e0      	adds	r3, #224	; 0xe0
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	4413      	add	r3, r2
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d102      	bne.n	800c534 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c52e:	7bfb      	ldrb	r3, [r7, #15]
 800c530:	b29b      	uxth	r3, r3
 800c532:	e007      	b.n	800c544 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800c534:	7bfb      	ldrb	r3, [r7, #15]
 800c536:	3301      	adds	r3, #1
 800c538:	73fb      	strb	r3, [r7, #15]
 800c53a:	7bfb      	ldrb	r3, [r7, #15]
 800c53c:	2b0a      	cmp	r3, #10
 800c53e:	d9ec      	bls.n	800c51a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c540:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c544:	4618      	mov	r0, r3
 800c546:	3714      	adds	r7, #20
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr

0800c550 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c554:	2201      	movs	r2, #1
 800c556:	490e      	ldr	r1, [pc, #56]	; (800c590 <MX_USB_HOST_Init+0x40>)
 800c558:	480e      	ldr	r0, [pc, #56]	; (800c594 <MX_USB_HOST_Init+0x44>)
 800c55a:	f7fe fca1 	bl	800aea0 <USBH_Init>
 800c55e:	4603      	mov	r3, r0
 800c560:	2b00      	cmp	r3, #0
 800c562:	d001      	beq.n	800c568 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c564:	f7f5 fafa 	bl	8001b5c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c568:	490b      	ldr	r1, [pc, #44]	; (800c598 <MX_USB_HOST_Init+0x48>)
 800c56a:	480a      	ldr	r0, [pc, #40]	; (800c594 <MX_USB_HOST_Init+0x44>)
 800c56c:	f7fe fd26 	bl	800afbc <USBH_RegisterClass>
 800c570:	4603      	mov	r3, r0
 800c572:	2b00      	cmp	r3, #0
 800c574:	d001      	beq.n	800c57a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c576:	f7f5 faf1 	bl	8001b5c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c57a:	4806      	ldr	r0, [pc, #24]	; (800c594 <MX_USB_HOST_Init+0x44>)
 800c57c:	f7fe fdaa 	bl	800b0d4 <USBH_Start>
 800c580:	4603      	mov	r3, r0
 800c582:	2b00      	cmp	r3, #0
 800c584:	d001      	beq.n	800c58a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c586:	f7f5 fae9 	bl	8001b5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c58a:	bf00      	nop
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	0800c5b1 	.word	0x0800c5b1
 800c594:	20000688 	.word	0x20000688
 800c598:	200000a8 	.word	0x200000a8

0800c59c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c5a0:	4802      	ldr	r0, [pc, #8]	; (800c5ac <MX_USB_HOST_Process+0x10>)
 800c5a2:	f7fe fda7 	bl	800b0f4 <USBH_Process>
}
 800c5a6:	bf00      	nop
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	20000688 	.word	0x20000688

0800c5b0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b083      	sub	sp, #12
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c5bc:	78fb      	ldrb	r3, [r7, #3]
 800c5be:	3b01      	subs	r3, #1
 800c5c0:	2b04      	cmp	r3, #4
 800c5c2:	d819      	bhi.n	800c5f8 <USBH_UserProcess+0x48>
 800c5c4:	a201      	add	r2, pc, #4	; (adr r2, 800c5cc <USBH_UserProcess+0x1c>)
 800c5c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5ca:	bf00      	nop
 800c5cc:	0800c5f9 	.word	0x0800c5f9
 800c5d0:	0800c5e9 	.word	0x0800c5e9
 800c5d4:	0800c5f9 	.word	0x0800c5f9
 800c5d8:	0800c5f1 	.word	0x0800c5f1
 800c5dc:	0800c5e1 	.word	0x0800c5e1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c5e0:	4b09      	ldr	r3, [pc, #36]	; (800c608 <USBH_UserProcess+0x58>)
 800c5e2:	2203      	movs	r2, #3
 800c5e4:	701a      	strb	r2, [r3, #0]
  break;
 800c5e6:	e008      	b.n	800c5fa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c5e8:	4b07      	ldr	r3, [pc, #28]	; (800c608 <USBH_UserProcess+0x58>)
 800c5ea:	2202      	movs	r2, #2
 800c5ec:	701a      	strb	r2, [r3, #0]
  break;
 800c5ee:	e004      	b.n	800c5fa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c5f0:	4b05      	ldr	r3, [pc, #20]	; (800c608 <USBH_UserProcess+0x58>)
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	701a      	strb	r2, [r3, #0]
  break;
 800c5f6:	e000      	b.n	800c5fa <USBH_UserProcess+0x4a>

  default:
  break;
 800c5f8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c5fa:	bf00      	nop
 800c5fc:	370c      	adds	r7, #12
 800c5fe:	46bd      	mov	sp, r7
 800c600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c604:	4770      	bx	lr
 800c606:	bf00      	nop
 800c608:	20000154 	.word	0x20000154

0800c60c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b08a      	sub	sp, #40	; 0x28
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c614:	f107 0314 	add.w	r3, r7, #20
 800c618:	2200      	movs	r2, #0
 800c61a:	601a      	str	r2, [r3, #0]
 800c61c:	605a      	str	r2, [r3, #4]
 800c61e:	609a      	str	r2, [r3, #8]
 800c620:	60da      	str	r2, [r3, #12]
 800c622:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c62c:	d147      	bne.n	800c6be <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c62e:	2300      	movs	r3, #0
 800c630:	613b      	str	r3, [r7, #16]
 800c632:	4b25      	ldr	r3, [pc, #148]	; (800c6c8 <HAL_HCD_MspInit+0xbc>)
 800c634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c636:	4a24      	ldr	r2, [pc, #144]	; (800c6c8 <HAL_HCD_MspInit+0xbc>)
 800c638:	f043 0301 	orr.w	r3, r3, #1
 800c63c:	6313      	str	r3, [r2, #48]	; 0x30
 800c63e:	4b22      	ldr	r3, [pc, #136]	; (800c6c8 <HAL_HCD_MspInit+0xbc>)
 800c640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c642:	f003 0301 	and.w	r3, r3, #1
 800c646:	613b      	str	r3, [r7, #16]
 800c648:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c64a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c64e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c650:	2300      	movs	r3, #0
 800c652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c654:	2300      	movs	r3, #0
 800c656:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c658:	f107 0314 	add.w	r3, r7, #20
 800c65c:	4619      	mov	r1, r3
 800c65e:	481b      	ldr	r0, [pc, #108]	; (800c6cc <HAL_HCD_MspInit+0xc0>)
 800c660:	f7f7 fa02 	bl	8003a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c664:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c66a:	2302      	movs	r3, #2
 800c66c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c66e:	2300      	movs	r3, #0
 800c670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c672:	2300      	movs	r3, #0
 800c674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c676:	230a      	movs	r3, #10
 800c678:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c67a:	f107 0314 	add.w	r3, r7, #20
 800c67e:	4619      	mov	r1, r3
 800c680:	4812      	ldr	r0, [pc, #72]	; (800c6cc <HAL_HCD_MspInit+0xc0>)
 800c682:	f7f7 f9f1 	bl	8003a68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c686:	4b10      	ldr	r3, [pc, #64]	; (800c6c8 <HAL_HCD_MspInit+0xbc>)
 800c688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c68a:	4a0f      	ldr	r2, [pc, #60]	; (800c6c8 <HAL_HCD_MspInit+0xbc>)
 800c68c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c690:	6353      	str	r3, [r2, #52]	; 0x34
 800c692:	2300      	movs	r3, #0
 800c694:	60fb      	str	r3, [r7, #12]
 800c696:	4b0c      	ldr	r3, [pc, #48]	; (800c6c8 <HAL_HCD_MspInit+0xbc>)
 800c698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c69a:	4a0b      	ldr	r2, [pc, #44]	; (800c6c8 <HAL_HCD_MspInit+0xbc>)
 800c69c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c6a0:	6453      	str	r3, [r2, #68]	; 0x44
 800c6a2:	4b09      	ldr	r3, [pc, #36]	; (800c6c8 <HAL_HCD_MspInit+0xbc>)
 800c6a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c6aa:	60fb      	str	r3, [r7, #12]
 800c6ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	2100      	movs	r1, #0
 800c6b2:	2043      	movs	r0, #67	; 0x43
 800c6b4:	f7f7 f9a1 	bl	80039fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c6b8:	2043      	movs	r0, #67	; 0x43
 800c6ba:	f7f7 f9ba 	bl	8003a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c6be:	bf00      	nop
 800c6c0:	3728      	adds	r7, #40	; 0x28
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	40023800 	.word	0x40023800
 800c6cc:	40020000 	.word	0x40020000

0800c6d0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7ff f8db 	bl	800b89a <USBH_LL_IncTimer>
}
 800c6e4:	bf00      	nop
 800c6e6:	3708      	adds	r7, #8
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f7ff f913 	bl	800b926 <USBH_LL_Connect>
}
 800c700:	bf00      	nop
 800c702:	3708      	adds	r7, #8
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c716:	4618      	mov	r0, r3
 800c718:	f7ff f91c 	bl	800b954 <USBH_LL_Disconnect>
}
 800c71c:	bf00      	nop
 800c71e:	3708      	adds	r7, #8
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}

0800c724 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c724:	b480      	push	{r7}
 800c726:	b083      	sub	sp, #12
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	460b      	mov	r3, r1
 800c72e:	70fb      	strb	r3, [r7, #3]
 800c730:	4613      	mov	r3, r2
 800c732:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c734:	bf00      	nop
 800c736:	370c      	adds	r7, #12
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr

0800c740 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b082      	sub	sp, #8
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c74e:	4618      	mov	r0, r3
 800c750:	f7ff f8cd 	bl	800b8ee <USBH_LL_PortEnabled>
}
 800c754:	bf00      	nop
 800c756:	3708      	adds	r7, #8
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b082      	sub	sp, #8
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c76a:	4618      	mov	r0, r3
 800c76c:	f7ff f8cd 	bl	800b90a <USBH_LL_PortDisabled>
}
 800c770:	bf00      	nop
 800c772:	3708      	adds	r7, #8
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c786:	2b01      	cmp	r3, #1
 800c788:	d12a      	bne.n	800c7e0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c78a:	4a18      	ldr	r2, [pc, #96]	; (800c7ec <USBH_LL_Init+0x74>)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	4a15      	ldr	r2, [pc, #84]	; (800c7ec <USBH_LL_Init+0x74>)
 800c796:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c79a:	4b14      	ldr	r3, [pc, #80]	; (800c7ec <USBH_LL_Init+0x74>)
 800c79c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c7a0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c7a2:	4b12      	ldr	r3, [pc, #72]	; (800c7ec <USBH_LL_Init+0x74>)
 800c7a4:	2208      	movs	r2, #8
 800c7a6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c7a8:	4b10      	ldr	r3, [pc, #64]	; (800c7ec <USBH_LL_Init+0x74>)
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c7ae:	4b0f      	ldr	r3, [pc, #60]	; (800c7ec <USBH_LL_Init+0x74>)
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c7b4:	4b0d      	ldr	r3, [pc, #52]	; (800c7ec <USBH_LL_Init+0x74>)
 800c7b6:	2202      	movs	r2, #2
 800c7b8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c7ba:	4b0c      	ldr	r3, [pc, #48]	; (800c7ec <USBH_LL_Init+0x74>)
 800c7bc:	2200      	movs	r2, #0
 800c7be:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c7c0:	480a      	ldr	r0, [pc, #40]	; (800c7ec <USBH_LL_Init+0x74>)
 800c7c2:	f7f7 fb38 	bl	8003e36 <HAL_HCD_Init>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d001      	beq.n	800c7d0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c7cc:	f7f5 f9c6 	bl	8001b5c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c7d0:	4806      	ldr	r0, [pc, #24]	; (800c7ec <USBH_LL_Init+0x74>)
 800c7d2:	f7f7 ff15 	bl	8004600 <HAL_HCD_GetCurrentFrame>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	4619      	mov	r1, r3
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f7ff f84e 	bl	800b87c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c7e0:	2300      	movs	r3, #0
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3708      	adds	r7, #8
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	20000a60 	.word	0x20000a60

0800c7f0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c806:	4618      	mov	r0, r3
 800c808:	f7f7 fe84 	bl	8004514 <HAL_HCD_Start>
 800c80c:	4603      	mov	r3, r0
 800c80e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c810:	7bfb      	ldrb	r3, [r7, #15]
 800c812:	4618      	mov	r0, r3
 800c814:	f000 f95c 	bl	800cad0 <USBH_Get_USB_Status>
 800c818:	4603      	mov	r3, r0
 800c81a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c81c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3710      	adds	r7, #16
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}

0800c826 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c826:	b580      	push	{r7, lr}
 800c828:	b084      	sub	sp, #16
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c82e:	2300      	movs	r3, #0
 800c830:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c832:	2300      	movs	r3, #0
 800c834:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c83c:	4618      	mov	r0, r3
 800c83e:	f7f7 fe8c 	bl	800455a <HAL_HCD_Stop>
 800c842:	4603      	mov	r3, r0
 800c844:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c846:	7bfb      	ldrb	r3, [r7, #15]
 800c848:	4618      	mov	r0, r3
 800c84a:	f000 f941 	bl	800cad0 <USBH_Get_USB_Status>
 800c84e:	4603      	mov	r3, r0
 800c850:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c852:	7bbb      	ldrb	r3, [r7, #14]
}
 800c854:	4618      	mov	r0, r3
 800c856:	3710      	adds	r7, #16
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c864:	2301      	movs	r3, #1
 800c866:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c86e:	4618      	mov	r0, r3
 800c870:	f7f7 fed4 	bl	800461c <HAL_HCD_GetCurrentSpeed>
 800c874:	4603      	mov	r3, r0
 800c876:	2b02      	cmp	r3, #2
 800c878:	d00c      	beq.n	800c894 <USBH_LL_GetSpeed+0x38>
 800c87a:	2b02      	cmp	r3, #2
 800c87c:	d80d      	bhi.n	800c89a <USBH_LL_GetSpeed+0x3e>
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d002      	beq.n	800c888 <USBH_LL_GetSpeed+0x2c>
 800c882:	2b01      	cmp	r3, #1
 800c884:	d003      	beq.n	800c88e <USBH_LL_GetSpeed+0x32>
 800c886:	e008      	b.n	800c89a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c888:	2300      	movs	r3, #0
 800c88a:	73fb      	strb	r3, [r7, #15]
    break;
 800c88c:	e008      	b.n	800c8a0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c88e:	2301      	movs	r3, #1
 800c890:	73fb      	strb	r3, [r7, #15]
    break;
 800c892:	e005      	b.n	800c8a0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c894:	2302      	movs	r3, #2
 800c896:	73fb      	strb	r3, [r7, #15]
    break;
 800c898:	e002      	b.n	800c8a0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c89a:	2301      	movs	r3, #1
 800c89c:	73fb      	strb	r3, [r7, #15]
    break;
 800c89e:	bf00      	nop
  }
  return  speed;
 800c8a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3710      	adds	r7, #16
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}

0800c8aa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c8aa:	b580      	push	{r7, lr}
 800c8ac:	b084      	sub	sp, #16
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f7f7 fe67 	bl	8004594 <HAL_HCD_ResetPort>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c8ca:	7bfb      	ldrb	r3, [r7, #15]
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f000 f8ff 	bl	800cad0 <USBH_Get_USB_Status>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3710      	adds	r7, #16
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}

0800c8e0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b082      	sub	sp, #8
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c8f2:	78fa      	ldrb	r2, [r7, #3]
 800c8f4:	4611      	mov	r1, r2
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7f7 fe6e 	bl	80045d8 <HAL_HCD_HC_GetXferCount>
 800c8fc:	4603      	mov	r3, r0
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3708      	adds	r7, #8
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}

0800c906 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c906:	b590      	push	{r4, r7, lr}
 800c908:	b089      	sub	sp, #36	; 0x24
 800c90a:	af04      	add	r7, sp, #16
 800c90c:	6078      	str	r0, [r7, #4]
 800c90e:	4608      	mov	r0, r1
 800c910:	4611      	mov	r1, r2
 800c912:	461a      	mov	r2, r3
 800c914:	4603      	mov	r3, r0
 800c916:	70fb      	strb	r3, [r7, #3]
 800c918:	460b      	mov	r3, r1
 800c91a:	70bb      	strb	r3, [r7, #2]
 800c91c:	4613      	mov	r3, r2
 800c91e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c920:	2300      	movs	r3, #0
 800c922:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c924:	2300      	movs	r3, #0
 800c926:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c92e:	787c      	ldrb	r4, [r7, #1]
 800c930:	78ba      	ldrb	r2, [r7, #2]
 800c932:	78f9      	ldrb	r1, [r7, #3]
 800c934:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c936:	9302      	str	r3, [sp, #8]
 800c938:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c93c:	9301      	str	r3, [sp, #4]
 800c93e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c942:	9300      	str	r3, [sp, #0]
 800c944:	4623      	mov	r3, r4
 800c946:	f7f7 fad8 	bl	8003efa <HAL_HCD_HC_Init>
 800c94a:	4603      	mov	r3, r0
 800c94c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c94e:	7bfb      	ldrb	r3, [r7, #15]
 800c950:	4618      	mov	r0, r3
 800c952:	f000 f8bd 	bl	800cad0 <USBH_Get_USB_Status>
 800c956:	4603      	mov	r3, r0
 800c958:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c95a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3714      	adds	r7, #20
 800c960:	46bd      	mov	sp, r7
 800c962:	bd90      	pop	{r4, r7, pc}

0800c964 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b084      	sub	sp, #16
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	460b      	mov	r3, r1
 800c96e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c970:	2300      	movs	r3, #0
 800c972:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c974:	2300      	movs	r3, #0
 800c976:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c97e:	78fa      	ldrb	r2, [r7, #3]
 800c980:	4611      	mov	r1, r2
 800c982:	4618      	mov	r0, r3
 800c984:	f7f7 fb48 	bl	8004018 <HAL_HCD_HC_Halt>
 800c988:	4603      	mov	r3, r0
 800c98a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c98c:	7bfb      	ldrb	r3, [r7, #15]
 800c98e:	4618      	mov	r0, r3
 800c990:	f000 f89e 	bl	800cad0 <USBH_Get_USB_Status>
 800c994:	4603      	mov	r3, r0
 800c996:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c998:	7bbb      	ldrb	r3, [r7, #14]
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3710      	adds	r7, #16
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}

0800c9a2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c9a2:	b590      	push	{r4, r7, lr}
 800c9a4:	b089      	sub	sp, #36	; 0x24
 800c9a6:	af04      	add	r7, sp, #16
 800c9a8:	6078      	str	r0, [r7, #4]
 800c9aa:	4608      	mov	r0, r1
 800c9ac:	4611      	mov	r1, r2
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	70fb      	strb	r3, [r7, #3]
 800c9b4:	460b      	mov	r3, r1
 800c9b6:	70bb      	strb	r3, [r7, #2]
 800c9b8:	4613      	mov	r3, r2
 800c9ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c9ca:	787c      	ldrb	r4, [r7, #1]
 800c9cc:	78ba      	ldrb	r2, [r7, #2]
 800c9ce:	78f9      	ldrb	r1, [r7, #3]
 800c9d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c9d4:	9303      	str	r3, [sp, #12]
 800c9d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c9d8:	9302      	str	r3, [sp, #8]
 800c9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9dc:	9301      	str	r3, [sp, #4]
 800c9de:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c9e2:	9300      	str	r3, [sp, #0]
 800c9e4:	4623      	mov	r3, r4
 800c9e6:	f7f7 fb3b 	bl	8004060 <HAL_HCD_HC_SubmitRequest>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c9ee:	7bfb      	ldrb	r3, [r7, #15]
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f000 f86d 	bl	800cad0 <USBH_Get_USB_Status>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3714      	adds	r7, #20
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd90      	pop	{r4, r7, pc}

0800ca04 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ca16:	78fa      	ldrb	r2, [r7, #3]
 800ca18:	4611      	mov	r1, r2
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7f7 fdc8 	bl	80045b0 <HAL_HCD_HC_GetURBState>
 800ca20:	4603      	mov	r3, r0
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3708      	adds	r7, #8
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}

0800ca2a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ca2a:	b580      	push	{r7, lr}
 800ca2c:	b082      	sub	sp, #8
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	6078      	str	r0, [r7, #4]
 800ca32:	460b      	mov	r3, r1
 800ca34:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	d103      	bne.n	800ca48 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ca40:	78fb      	ldrb	r3, [r7, #3]
 800ca42:	4618      	mov	r0, r3
 800ca44:	f000 f870 	bl	800cb28 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ca48:	20c8      	movs	r0, #200	; 0xc8
 800ca4a:	f7f6 fed7 	bl	80037fc <HAL_Delay>
  return USBH_OK;
 800ca4e:	2300      	movs	r3, #0
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3708      	adds	r7, #8
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	460b      	mov	r3, r1
 800ca62:	70fb      	strb	r3, [r7, #3]
 800ca64:	4613      	mov	r3, r2
 800ca66:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ca6e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ca70:	78fb      	ldrb	r3, [r7, #3]
 800ca72:	68fa      	ldr	r2, [r7, #12]
 800ca74:	212c      	movs	r1, #44	; 0x2c
 800ca76:	fb01 f303 	mul.w	r3, r1, r3
 800ca7a:	4413      	add	r3, r2
 800ca7c:	333b      	adds	r3, #59	; 0x3b
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d009      	beq.n	800ca98 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ca84:	78fb      	ldrb	r3, [r7, #3]
 800ca86:	68fa      	ldr	r2, [r7, #12]
 800ca88:	212c      	movs	r1, #44	; 0x2c
 800ca8a:	fb01 f303 	mul.w	r3, r1, r3
 800ca8e:	4413      	add	r3, r2
 800ca90:	3354      	adds	r3, #84	; 0x54
 800ca92:	78ba      	ldrb	r2, [r7, #2]
 800ca94:	701a      	strb	r2, [r3, #0]
 800ca96:	e008      	b.n	800caaa <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ca98:	78fb      	ldrb	r3, [r7, #3]
 800ca9a:	68fa      	ldr	r2, [r7, #12]
 800ca9c:	212c      	movs	r1, #44	; 0x2c
 800ca9e:	fb01 f303 	mul.w	r3, r1, r3
 800caa2:	4413      	add	r3, r2
 800caa4:	3355      	adds	r3, #85	; 0x55
 800caa6:	78ba      	ldrb	r2, [r7, #2]
 800caa8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800caaa:	2300      	movs	r3, #0
}
 800caac:	4618      	mov	r0, r3
 800caae:	3714      	adds	r7, #20
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr

0800cab8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b082      	sub	sp, #8
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f7f6 fe9b 	bl	80037fc <HAL_Delay>
}
 800cac6:	bf00      	nop
 800cac8:	3708      	adds	r7, #8
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}
	...

0800cad0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cad0:	b480      	push	{r7}
 800cad2:	b085      	sub	sp, #20
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	4603      	mov	r3, r0
 800cad8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cada:	2300      	movs	r3, #0
 800cadc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cade:	79fb      	ldrb	r3, [r7, #7]
 800cae0:	2b03      	cmp	r3, #3
 800cae2:	d817      	bhi.n	800cb14 <USBH_Get_USB_Status+0x44>
 800cae4:	a201      	add	r2, pc, #4	; (adr r2, 800caec <USBH_Get_USB_Status+0x1c>)
 800cae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caea:	bf00      	nop
 800caec:	0800cafd 	.word	0x0800cafd
 800caf0:	0800cb03 	.word	0x0800cb03
 800caf4:	0800cb09 	.word	0x0800cb09
 800caf8:	0800cb0f 	.word	0x0800cb0f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cafc:	2300      	movs	r3, #0
 800cafe:	73fb      	strb	r3, [r7, #15]
    break;
 800cb00:	e00b      	b.n	800cb1a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cb02:	2302      	movs	r3, #2
 800cb04:	73fb      	strb	r3, [r7, #15]
    break;
 800cb06:	e008      	b.n	800cb1a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cb08:	2301      	movs	r3, #1
 800cb0a:	73fb      	strb	r3, [r7, #15]
    break;
 800cb0c:	e005      	b.n	800cb1a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cb0e:	2302      	movs	r3, #2
 800cb10:	73fb      	strb	r3, [r7, #15]
    break;
 800cb12:	e002      	b.n	800cb1a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cb14:	2302      	movs	r3, #2
 800cb16:	73fb      	strb	r3, [r7, #15]
    break;
 800cb18:	bf00      	nop
  }
  return usb_status;
 800cb1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3714      	adds	r7, #20
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr

0800cb28 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b084      	sub	sp, #16
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	4603      	mov	r3, r0
 800cb30:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800cb32:	79fb      	ldrb	r3, [r7, #7]
 800cb34:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800cb36:	79fb      	ldrb	r3, [r7, #7]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d102      	bne.n	800cb42 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	73fb      	strb	r3, [r7, #15]
 800cb40:	e001      	b.n	800cb46 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800cb42:	2300      	movs	r3, #0
 800cb44:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800cb46:	7bfb      	ldrb	r3, [r7, #15]
 800cb48:	461a      	mov	r2, r3
 800cb4a:	2101      	movs	r1, #1
 800cb4c:	4803      	ldr	r0, [pc, #12]	; (800cb5c <MX_DriverVbusFS+0x34>)
 800cb4e:	f7f7 f93f 	bl	8003dd0 <HAL_GPIO_WritePin>
}
 800cb52:	bf00      	nop
 800cb54:	3710      	adds	r7, #16
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
 800cb5a:	bf00      	nop
 800cb5c:	40020800 	.word	0x40020800

0800cb60 <__errno>:
 800cb60:	4b01      	ldr	r3, [pc, #4]	; (800cb68 <__errno+0x8>)
 800cb62:	6818      	ldr	r0, [r3, #0]
 800cb64:	4770      	bx	lr
 800cb66:	bf00      	nop
 800cb68:	200000c8 	.word	0x200000c8

0800cb6c <__libc_init_array>:
 800cb6c:	b570      	push	{r4, r5, r6, lr}
 800cb6e:	4d0d      	ldr	r5, [pc, #52]	; (800cba4 <__libc_init_array+0x38>)
 800cb70:	4c0d      	ldr	r4, [pc, #52]	; (800cba8 <__libc_init_array+0x3c>)
 800cb72:	1b64      	subs	r4, r4, r5
 800cb74:	10a4      	asrs	r4, r4, #2
 800cb76:	2600      	movs	r6, #0
 800cb78:	42a6      	cmp	r6, r4
 800cb7a:	d109      	bne.n	800cb90 <__libc_init_array+0x24>
 800cb7c:	4d0b      	ldr	r5, [pc, #44]	; (800cbac <__libc_init_array+0x40>)
 800cb7e:	4c0c      	ldr	r4, [pc, #48]	; (800cbb0 <__libc_init_array+0x44>)
 800cb80:	f000 fc58 	bl	800d434 <_init>
 800cb84:	1b64      	subs	r4, r4, r5
 800cb86:	10a4      	asrs	r4, r4, #2
 800cb88:	2600      	movs	r6, #0
 800cb8a:	42a6      	cmp	r6, r4
 800cb8c:	d105      	bne.n	800cb9a <__libc_init_array+0x2e>
 800cb8e:	bd70      	pop	{r4, r5, r6, pc}
 800cb90:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb94:	4798      	blx	r3
 800cb96:	3601      	adds	r6, #1
 800cb98:	e7ee      	b.n	800cb78 <__libc_init_array+0xc>
 800cb9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb9e:	4798      	blx	r3
 800cba0:	3601      	adds	r6, #1
 800cba2:	e7f2      	b.n	800cb8a <__libc_init_array+0x1e>
 800cba4:	0800f958 	.word	0x0800f958
 800cba8:	0800f958 	.word	0x0800f958
 800cbac:	0800f958 	.word	0x0800f958
 800cbb0:	0800f95c 	.word	0x0800f95c

0800cbb4 <malloc>:
 800cbb4:	4b02      	ldr	r3, [pc, #8]	; (800cbc0 <malloc+0xc>)
 800cbb6:	4601      	mov	r1, r0
 800cbb8:	6818      	ldr	r0, [r3, #0]
 800cbba:	f000 b863 	b.w	800cc84 <_malloc_r>
 800cbbe:	bf00      	nop
 800cbc0:	200000c8 	.word	0x200000c8

0800cbc4 <free>:
 800cbc4:	4b02      	ldr	r3, [pc, #8]	; (800cbd0 <free+0xc>)
 800cbc6:	4601      	mov	r1, r0
 800cbc8:	6818      	ldr	r0, [r3, #0]
 800cbca:	f000 b80b 	b.w	800cbe4 <_free_r>
 800cbce:	bf00      	nop
 800cbd0:	200000c8 	.word	0x200000c8

0800cbd4 <memset>:
 800cbd4:	4402      	add	r2, r0
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d100      	bne.n	800cbde <memset+0xa>
 800cbdc:	4770      	bx	lr
 800cbde:	f803 1b01 	strb.w	r1, [r3], #1
 800cbe2:	e7f9      	b.n	800cbd8 <memset+0x4>

0800cbe4 <_free_r>:
 800cbe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cbe6:	2900      	cmp	r1, #0
 800cbe8:	d048      	beq.n	800cc7c <_free_r+0x98>
 800cbea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbee:	9001      	str	r0, [sp, #4]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	f1a1 0404 	sub.w	r4, r1, #4
 800cbf6:	bfb8      	it	lt
 800cbf8:	18e4      	addlt	r4, r4, r3
 800cbfa:	f000 f8ad 	bl	800cd58 <__malloc_lock>
 800cbfe:	4a20      	ldr	r2, [pc, #128]	; (800cc80 <_free_r+0x9c>)
 800cc00:	9801      	ldr	r0, [sp, #4]
 800cc02:	6813      	ldr	r3, [r2, #0]
 800cc04:	4615      	mov	r5, r2
 800cc06:	b933      	cbnz	r3, 800cc16 <_free_r+0x32>
 800cc08:	6063      	str	r3, [r4, #4]
 800cc0a:	6014      	str	r4, [r2, #0]
 800cc0c:	b003      	add	sp, #12
 800cc0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc12:	f000 b8a7 	b.w	800cd64 <__malloc_unlock>
 800cc16:	42a3      	cmp	r3, r4
 800cc18:	d90b      	bls.n	800cc32 <_free_r+0x4e>
 800cc1a:	6821      	ldr	r1, [r4, #0]
 800cc1c:	1862      	adds	r2, r4, r1
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	bf04      	itt	eq
 800cc22:	681a      	ldreq	r2, [r3, #0]
 800cc24:	685b      	ldreq	r3, [r3, #4]
 800cc26:	6063      	str	r3, [r4, #4]
 800cc28:	bf04      	itt	eq
 800cc2a:	1852      	addeq	r2, r2, r1
 800cc2c:	6022      	streq	r2, [r4, #0]
 800cc2e:	602c      	str	r4, [r5, #0]
 800cc30:	e7ec      	b.n	800cc0c <_free_r+0x28>
 800cc32:	461a      	mov	r2, r3
 800cc34:	685b      	ldr	r3, [r3, #4]
 800cc36:	b10b      	cbz	r3, 800cc3c <_free_r+0x58>
 800cc38:	42a3      	cmp	r3, r4
 800cc3a:	d9fa      	bls.n	800cc32 <_free_r+0x4e>
 800cc3c:	6811      	ldr	r1, [r2, #0]
 800cc3e:	1855      	adds	r5, r2, r1
 800cc40:	42a5      	cmp	r5, r4
 800cc42:	d10b      	bne.n	800cc5c <_free_r+0x78>
 800cc44:	6824      	ldr	r4, [r4, #0]
 800cc46:	4421      	add	r1, r4
 800cc48:	1854      	adds	r4, r2, r1
 800cc4a:	42a3      	cmp	r3, r4
 800cc4c:	6011      	str	r1, [r2, #0]
 800cc4e:	d1dd      	bne.n	800cc0c <_free_r+0x28>
 800cc50:	681c      	ldr	r4, [r3, #0]
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	6053      	str	r3, [r2, #4]
 800cc56:	4421      	add	r1, r4
 800cc58:	6011      	str	r1, [r2, #0]
 800cc5a:	e7d7      	b.n	800cc0c <_free_r+0x28>
 800cc5c:	d902      	bls.n	800cc64 <_free_r+0x80>
 800cc5e:	230c      	movs	r3, #12
 800cc60:	6003      	str	r3, [r0, #0]
 800cc62:	e7d3      	b.n	800cc0c <_free_r+0x28>
 800cc64:	6825      	ldr	r5, [r4, #0]
 800cc66:	1961      	adds	r1, r4, r5
 800cc68:	428b      	cmp	r3, r1
 800cc6a:	bf04      	itt	eq
 800cc6c:	6819      	ldreq	r1, [r3, #0]
 800cc6e:	685b      	ldreq	r3, [r3, #4]
 800cc70:	6063      	str	r3, [r4, #4]
 800cc72:	bf04      	itt	eq
 800cc74:	1949      	addeq	r1, r1, r5
 800cc76:	6021      	streq	r1, [r4, #0]
 800cc78:	6054      	str	r4, [r2, #4]
 800cc7a:	e7c7      	b.n	800cc0c <_free_r+0x28>
 800cc7c:	b003      	add	sp, #12
 800cc7e:	bd30      	pop	{r4, r5, pc}
 800cc80:	20000158 	.word	0x20000158

0800cc84 <_malloc_r>:
 800cc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc86:	1ccd      	adds	r5, r1, #3
 800cc88:	f025 0503 	bic.w	r5, r5, #3
 800cc8c:	3508      	adds	r5, #8
 800cc8e:	2d0c      	cmp	r5, #12
 800cc90:	bf38      	it	cc
 800cc92:	250c      	movcc	r5, #12
 800cc94:	2d00      	cmp	r5, #0
 800cc96:	4606      	mov	r6, r0
 800cc98:	db01      	blt.n	800cc9e <_malloc_r+0x1a>
 800cc9a:	42a9      	cmp	r1, r5
 800cc9c:	d903      	bls.n	800cca6 <_malloc_r+0x22>
 800cc9e:	230c      	movs	r3, #12
 800cca0:	6033      	str	r3, [r6, #0]
 800cca2:	2000      	movs	r0, #0
 800cca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cca6:	f000 f857 	bl	800cd58 <__malloc_lock>
 800ccaa:	4921      	ldr	r1, [pc, #132]	; (800cd30 <_malloc_r+0xac>)
 800ccac:	680a      	ldr	r2, [r1, #0]
 800ccae:	4614      	mov	r4, r2
 800ccb0:	b99c      	cbnz	r4, 800ccda <_malloc_r+0x56>
 800ccb2:	4f20      	ldr	r7, [pc, #128]	; (800cd34 <_malloc_r+0xb0>)
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	b923      	cbnz	r3, 800ccc2 <_malloc_r+0x3e>
 800ccb8:	4621      	mov	r1, r4
 800ccba:	4630      	mov	r0, r6
 800ccbc:	f000 f83c 	bl	800cd38 <_sbrk_r>
 800ccc0:	6038      	str	r0, [r7, #0]
 800ccc2:	4629      	mov	r1, r5
 800ccc4:	4630      	mov	r0, r6
 800ccc6:	f000 f837 	bl	800cd38 <_sbrk_r>
 800ccca:	1c43      	adds	r3, r0, #1
 800cccc:	d123      	bne.n	800cd16 <_malloc_r+0x92>
 800ccce:	230c      	movs	r3, #12
 800ccd0:	6033      	str	r3, [r6, #0]
 800ccd2:	4630      	mov	r0, r6
 800ccd4:	f000 f846 	bl	800cd64 <__malloc_unlock>
 800ccd8:	e7e3      	b.n	800cca2 <_malloc_r+0x1e>
 800ccda:	6823      	ldr	r3, [r4, #0]
 800ccdc:	1b5b      	subs	r3, r3, r5
 800ccde:	d417      	bmi.n	800cd10 <_malloc_r+0x8c>
 800cce0:	2b0b      	cmp	r3, #11
 800cce2:	d903      	bls.n	800ccec <_malloc_r+0x68>
 800cce4:	6023      	str	r3, [r4, #0]
 800cce6:	441c      	add	r4, r3
 800cce8:	6025      	str	r5, [r4, #0]
 800ccea:	e004      	b.n	800ccf6 <_malloc_r+0x72>
 800ccec:	6863      	ldr	r3, [r4, #4]
 800ccee:	42a2      	cmp	r2, r4
 800ccf0:	bf0c      	ite	eq
 800ccf2:	600b      	streq	r3, [r1, #0]
 800ccf4:	6053      	strne	r3, [r2, #4]
 800ccf6:	4630      	mov	r0, r6
 800ccf8:	f000 f834 	bl	800cd64 <__malloc_unlock>
 800ccfc:	f104 000b 	add.w	r0, r4, #11
 800cd00:	1d23      	adds	r3, r4, #4
 800cd02:	f020 0007 	bic.w	r0, r0, #7
 800cd06:	1ac2      	subs	r2, r0, r3
 800cd08:	d0cc      	beq.n	800cca4 <_malloc_r+0x20>
 800cd0a:	1a1b      	subs	r3, r3, r0
 800cd0c:	50a3      	str	r3, [r4, r2]
 800cd0e:	e7c9      	b.n	800cca4 <_malloc_r+0x20>
 800cd10:	4622      	mov	r2, r4
 800cd12:	6864      	ldr	r4, [r4, #4]
 800cd14:	e7cc      	b.n	800ccb0 <_malloc_r+0x2c>
 800cd16:	1cc4      	adds	r4, r0, #3
 800cd18:	f024 0403 	bic.w	r4, r4, #3
 800cd1c:	42a0      	cmp	r0, r4
 800cd1e:	d0e3      	beq.n	800cce8 <_malloc_r+0x64>
 800cd20:	1a21      	subs	r1, r4, r0
 800cd22:	4630      	mov	r0, r6
 800cd24:	f000 f808 	bl	800cd38 <_sbrk_r>
 800cd28:	3001      	adds	r0, #1
 800cd2a:	d1dd      	bne.n	800cce8 <_malloc_r+0x64>
 800cd2c:	e7cf      	b.n	800ccce <_malloc_r+0x4a>
 800cd2e:	bf00      	nop
 800cd30:	20000158 	.word	0x20000158
 800cd34:	2000015c 	.word	0x2000015c

0800cd38 <_sbrk_r>:
 800cd38:	b538      	push	{r3, r4, r5, lr}
 800cd3a:	4d06      	ldr	r5, [pc, #24]	; (800cd54 <_sbrk_r+0x1c>)
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	4604      	mov	r4, r0
 800cd40:	4608      	mov	r0, r1
 800cd42:	602b      	str	r3, [r5, #0]
 800cd44:	f7f5 fa1e 	bl	8002184 <_sbrk>
 800cd48:	1c43      	adds	r3, r0, #1
 800cd4a:	d102      	bne.n	800cd52 <_sbrk_r+0x1a>
 800cd4c:	682b      	ldr	r3, [r5, #0]
 800cd4e:	b103      	cbz	r3, 800cd52 <_sbrk_r+0x1a>
 800cd50:	6023      	str	r3, [r4, #0]
 800cd52:	bd38      	pop	{r3, r4, r5, pc}
 800cd54:	20000d64 	.word	0x20000d64

0800cd58 <__malloc_lock>:
 800cd58:	4801      	ldr	r0, [pc, #4]	; (800cd60 <__malloc_lock+0x8>)
 800cd5a:	f000 b809 	b.w	800cd70 <__retarget_lock_acquire_recursive>
 800cd5e:	bf00      	nop
 800cd60:	20000d6c 	.word	0x20000d6c

0800cd64 <__malloc_unlock>:
 800cd64:	4801      	ldr	r0, [pc, #4]	; (800cd6c <__malloc_unlock+0x8>)
 800cd66:	f000 b804 	b.w	800cd72 <__retarget_lock_release_recursive>
 800cd6a:	bf00      	nop
 800cd6c:	20000d6c 	.word	0x20000d6c

0800cd70 <__retarget_lock_acquire_recursive>:
 800cd70:	4770      	bx	lr

0800cd72 <__retarget_lock_release_recursive>:
 800cd72:	4770      	bx	lr
 800cd74:	0000      	movs	r0, r0
	...

0800cd78 <atan>:
 800cd78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd7c:	ec55 4b10 	vmov	r4, r5, d0
 800cd80:	4bc3      	ldr	r3, [pc, #780]	; (800d090 <atan+0x318>)
 800cd82:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cd86:	429e      	cmp	r6, r3
 800cd88:	46ab      	mov	fp, r5
 800cd8a:	dd18      	ble.n	800cdbe <atan+0x46>
 800cd8c:	4bc1      	ldr	r3, [pc, #772]	; (800d094 <atan+0x31c>)
 800cd8e:	429e      	cmp	r6, r3
 800cd90:	dc01      	bgt.n	800cd96 <atan+0x1e>
 800cd92:	d109      	bne.n	800cda8 <atan+0x30>
 800cd94:	b144      	cbz	r4, 800cda8 <atan+0x30>
 800cd96:	4622      	mov	r2, r4
 800cd98:	462b      	mov	r3, r5
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	4629      	mov	r1, r5
 800cd9e:	f7f3 fa19 	bl	80001d4 <__adddf3>
 800cda2:	4604      	mov	r4, r0
 800cda4:	460d      	mov	r5, r1
 800cda6:	e006      	b.n	800cdb6 <atan+0x3e>
 800cda8:	f1bb 0f00 	cmp.w	fp, #0
 800cdac:	f300 8131 	bgt.w	800d012 <atan+0x29a>
 800cdb0:	a59b      	add	r5, pc, #620	; (adr r5, 800d020 <atan+0x2a8>)
 800cdb2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cdb6:	ec45 4b10 	vmov	d0, r4, r5
 800cdba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdbe:	4bb6      	ldr	r3, [pc, #728]	; (800d098 <atan+0x320>)
 800cdc0:	429e      	cmp	r6, r3
 800cdc2:	dc14      	bgt.n	800cdee <atan+0x76>
 800cdc4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800cdc8:	429e      	cmp	r6, r3
 800cdca:	dc0d      	bgt.n	800cde8 <atan+0x70>
 800cdcc:	a396      	add	r3, pc, #600	; (adr r3, 800d028 <atan+0x2b0>)
 800cdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd2:	ee10 0a10 	vmov	r0, s0
 800cdd6:	4629      	mov	r1, r5
 800cdd8:	f7f3 f9fc 	bl	80001d4 <__adddf3>
 800cddc:	4baf      	ldr	r3, [pc, #700]	; (800d09c <atan+0x324>)
 800cdde:	2200      	movs	r2, #0
 800cde0:	f7f3 fe3e 	bl	8000a60 <__aeabi_dcmpgt>
 800cde4:	2800      	cmp	r0, #0
 800cde6:	d1e6      	bne.n	800cdb6 <atan+0x3e>
 800cde8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800cdec:	e02b      	b.n	800ce46 <atan+0xce>
 800cdee:	f000 f963 	bl	800d0b8 <fabs>
 800cdf2:	4bab      	ldr	r3, [pc, #684]	; (800d0a0 <atan+0x328>)
 800cdf4:	429e      	cmp	r6, r3
 800cdf6:	ec55 4b10 	vmov	r4, r5, d0
 800cdfa:	f300 80bf 	bgt.w	800cf7c <atan+0x204>
 800cdfe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ce02:	429e      	cmp	r6, r3
 800ce04:	f300 80a0 	bgt.w	800cf48 <atan+0x1d0>
 800ce08:	ee10 2a10 	vmov	r2, s0
 800ce0c:	ee10 0a10 	vmov	r0, s0
 800ce10:	462b      	mov	r3, r5
 800ce12:	4629      	mov	r1, r5
 800ce14:	f7f3 f9de 	bl	80001d4 <__adddf3>
 800ce18:	4ba0      	ldr	r3, [pc, #640]	; (800d09c <atan+0x324>)
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	f7f3 f9d8 	bl	80001d0 <__aeabi_dsub>
 800ce20:	2200      	movs	r2, #0
 800ce22:	4606      	mov	r6, r0
 800ce24:	460f      	mov	r7, r1
 800ce26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	4629      	mov	r1, r5
 800ce2e:	f7f3 f9d1 	bl	80001d4 <__adddf3>
 800ce32:	4602      	mov	r2, r0
 800ce34:	460b      	mov	r3, r1
 800ce36:	4630      	mov	r0, r6
 800ce38:	4639      	mov	r1, r7
 800ce3a:	f7f3 fcab 	bl	8000794 <__aeabi_ddiv>
 800ce3e:	f04f 0a00 	mov.w	sl, #0
 800ce42:	4604      	mov	r4, r0
 800ce44:	460d      	mov	r5, r1
 800ce46:	4622      	mov	r2, r4
 800ce48:	462b      	mov	r3, r5
 800ce4a:	4620      	mov	r0, r4
 800ce4c:	4629      	mov	r1, r5
 800ce4e:	f7f3 fb77 	bl	8000540 <__aeabi_dmul>
 800ce52:	4602      	mov	r2, r0
 800ce54:	460b      	mov	r3, r1
 800ce56:	4680      	mov	r8, r0
 800ce58:	4689      	mov	r9, r1
 800ce5a:	f7f3 fb71 	bl	8000540 <__aeabi_dmul>
 800ce5e:	a374      	add	r3, pc, #464	; (adr r3, 800d030 <atan+0x2b8>)
 800ce60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce64:	4606      	mov	r6, r0
 800ce66:	460f      	mov	r7, r1
 800ce68:	f7f3 fb6a 	bl	8000540 <__aeabi_dmul>
 800ce6c:	a372      	add	r3, pc, #456	; (adr r3, 800d038 <atan+0x2c0>)
 800ce6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce72:	f7f3 f9af 	bl	80001d4 <__adddf3>
 800ce76:	4632      	mov	r2, r6
 800ce78:	463b      	mov	r3, r7
 800ce7a:	f7f3 fb61 	bl	8000540 <__aeabi_dmul>
 800ce7e:	a370      	add	r3, pc, #448	; (adr r3, 800d040 <atan+0x2c8>)
 800ce80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce84:	f7f3 f9a6 	bl	80001d4 <__adddf3>
 800ce88:	4632      	mov	r2, r6
 800ce8a:	463b      	mov	r3, r7
 800ce8c:	f7f3 fb58 	bl	8000540 <__aeabi_dmul>
 800ce90:	a36d      	add	r3, pc, #436	; (adr r3, 800d048 <atan+0x2d0>)
 800ce92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce96:	f7f3 f99d 	bl	80001d4 <__adddf3>
 800ce9a:	4632      	mov	r2, r6
 800ce9c:	463b      	mov	r3, r7
 800ce9e:	f7f3 fb4f 	bl	8000540 <__aeabi_dmul>
 800cea2:	a36b      	add	r3, pc, #428	; (adr r3, 800d050 <atan+0x2d8>)
 800cea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea8:	f7f3 f994 	bl	80001d4 <__adddf3>
 800ceac:	4632      	mov	r2, r6
 800ceae:	463b      	mov	r3, r7
 800ceb0:	f7f3 fb46 	bl	8000540 <__aeabi_dmul>
 800ceb4:	a368      	add	r3, pc, #416	; (adr r3, 800d058 <atan+0x2e0>)
 800ceb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceba:	f7f3 f98b 	bl	80001d4 <__adddf3>
 800cebe:	4642      	mov	r2, r8
 800cec0:	464b      	mov	r3, r9
 800cec2:	f7f3 fb3d 	bl	8000540 <__aeabi_dmul>
 800cec6:	a366      	add	r3, pc, #408	; (adr r3, 800d060 <atan+0x2e8>)
 800cec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cecc:	4680      	mov	r8, r0
 800cece:	4689      	mov	r9, r1
 800ced0:	4630      	mov	r0, r6
 800ced2:	4639      	mov	r1, r7
 800ced4:	f7f3 fb34 	bl	8000540 <__aeabi_dmul>
 800ced8:	a363      	add	r3, pc, #396	; (adr r3, 800d068 <atan+0x2f0>)
 800ceda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cede:	f7f3 f977 	bl	80001d0 <__aeabi_dsub>
 800cee2:	4632      	mov	r2, r6
 800cee4:	463b      	mov	r3, r7
 800cee6:	f7f3 fb2b 	bl	8000540 <__aeabi_dmul>
 800ceea:	a361      	add	r3, pc, #388	; (adr r3, 800d070 <atan+0x2f8>)
 800ceec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef0:	f7f3 f96e 	bl	80001d0 <__aeabi_dsub>
 800cef4:	4632      	mov	r2, r6
 800cef6:	463b      	mov	r3, r7
 800cef8:	f7f3 fb22 	bl	8000540 <__aeabi_dmul>
 800cefc:	a35e      	add	r3, pc, #376	; (adr r3, 800d078 <atan+0x300>)
 800cefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf02:	f7f3 f965 	bl	80001d0 <__aeabi_dsub>
 800cf06:	4632      	mov	r2, r6
 800cf08:	463b      	mov	r3, r7
 800cf0a:	f7f3 fb19 	bl	8000540 <__aeabi_dmul>
 800cf0e:	a35c      	add	r3, pc, #368	; (adr r3, 800d080 <atan+0x308>)
 800cf10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf14:	f7f3 f95c 	bl	80001d0 <__aeabi_dsub>
 800cf18:	4632      	mov	r2, r6
 800cf1a:	463b      	mov	r3, r7
 800cf1c:	f7f3 fb10 	bl	8000540 <__aeabi_dmul>
 800cf20:	4602      	mov	r2, r0
 800cf22:	460b      	mov	r3, r1
 800cf24:	4640      	mov	r0, r8
 800cf26:	4649      	mov	r1, r9
 800cf28:	f7f3 f954 	bl	80001d4 <__adddf3>
 800cf2c:	4622      	mov	r2, r4
 800cf2e:	462b      	mov	r3, r5
 800cf30:	f7f3 fb06 	bl	8000540 <__aeabi_dmul>
 800cf34:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800cf38:	4602      	mov	r2, r0
 800cf3a:	460b      	mov	r3, r1
 800cf3c:	d14b      	bne.n	800cfd6 <atan+0x25e>
 800cf3e:	4620      	mov	r0, r4
 800cf40:	4629      	mov	r1, r5
 800cf42:	f7f3 f945 	bl	80001d0 <__aeabi_dsub>
 800cf46:	e72c      	b.n	800cda2 <atan+0x2a>
 800cf48:	ee10 0a10 	vmov	r0, s0
 800cf4c:	4b53      	ldr	r3, [pc, #332]	; (800d09c <atan+0x324>)
 800cf4e:	2200      	movs	r2, #0
 800cf50:	4629      	mov	r1, r5
 800cf52:	f7f3 f93d 	bl	80001d0 <__aeabi_dsub>
 800cf56:	4b51      	ldr	r3, [pc, #324]	; (800d09c <atan+0x324>)
 800cf58:	4606      	mov	r6, r0
 800cf5a:	460f      	mov	r7, r1
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	4620      	mov	r0, r4
 800cf60:	4629      	mov	r1, r5
 800cf62:	f7f3 f937 	bl	80001d4 <__adddf3>
 800cf66:	4602      	mov	r2, r0
 800cf68:	460b      	mov	r3, r1
 800cf6a:	4630      	mov	r0, r6
 800cf6c:	4639      	mov	r1, r7
 800cf6e:	f7f3 fc11 	bl	8000794 <__aeabi_ddiv>
 800cf72:	f04f 0a01 	mov.w	sl, #1
 800cf76:	4604      	mov	r4, r0
 800cf78:	460d      	mov	r5, r1
 800cf7a:	e764      	b.n	800ce46 <atan+0xce>
 800cf7c:	4b49      	ldr	r3, [pc, #292]	; (800d0a4 <atan+0x32c>)
 800cf7e:	429e      	cmp	r6, r3
 800cf80:	da1d      	bge.n	800cfbe <atan+0x246>
 800cf82:	ee10 0a10 	vmov	r0, s0
 800cf86:	4b48      	ldr	r3, [pc, #288]	; (800d0a8 <atan+0x330>)
 800cf88:	2200      	movs	r2, #0
 800cf8a:	4629      	mov	r1, r5
 800cf8c:	f7f3 f920 	bl	80001d0 <__aeabi_dsub>
 800cf90:	4b45      	ldr	r3, [pc, #276]	; (800d0a8 <atan+0x330>)
 800cf92:	4606      	mov	r6, r0
 800cf94:	460f      	mov	r7, r1
 800cf96:	2200      	movs	r2, #0
 800cf98:	4620      	mov	r0, r4
 800cf9a:	4629      	mov	r1, r5
 800cf9c:	f7f3 fad0 	bl	8000540 <__aeabi_dmul>
 800cfa0:	4b3e      	ldr	r3, [pc, #248]	; (800d09c <atan+0x324>)
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f7f3 f916 	bl	80001d4 <__adddf3>
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	460b      	mov	r3, r1
 800cfac:	4630      	mov	r0, r6
 800cfae:	4639      	mov	r1, r7
 800cfb0:	f7f3 fbf0 	bl	8000794 <__aeabi_ddiv>
 800cfb4:	f04f 0a02 	mov.w	sl, #2
 800cfb8:	4604      	mov	r4, r0
 800cfba:	460d      	mov	r5, r1
 800cfbc:	e743      	b.n	800ce46 <atan+0xce>
 800cfbe:	462b      	mov	r3, r5
 800cfc0:	ee10 2a10 	vmov	r2, s0
 800cfc4:	4939      	ldr	r1, [pc, #228]	; (800d0ac <atan+0x334>)
 800cfc6:	2000      	movs	r0, #0
 800cfc8:	f7f3 fbe4 	bl	8000794 <__aeabi_ddiv>
 800cfcc:	f04f 0a03 	mov.w	sl, #3
 800cfd0:	4604      	mov	r4, r0
 800cfd2:	460d      	mov	r5, r1
 800cfd4:	e737      	b.n	800ce46 <atan+0xce>
 800cfd6:	4b36      	ldr	r3, [pc, #216]	; (800d0b0 <atan+0x338>)
 800cfd8:	4e36      	ldr	r6, [pc, #216]	; (800d0b4 <atan+0x33c>)
 800cfda:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cfde:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800cfe2:	e9da 2300 	ldrd	r2, r3, [sl]
 800cfe6:	f7f3 f8f3 	bl	80001d0 <__aeabi_dsub>
 800cfea:	4622      	mov	r2, r4
 800cfec:	462b      	mov	r3, r5
 800cfee:	f7f3 f8ef 	bl	80001d0 <__aeabi_dsub>
 800cff2:	4602      	mov	r2, r0
 800cff4:	460b      	mov	r3, r1
 800cff6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cffa:	f7f3 f8e9 	bl	80001d0 <__aeabi_dsub>
 800cffe:	f1bb 0f00 	cmp.w	fp, #0
 800d002:	4604      	mov	r4, r0
 800d004:	460d      	mov	r5, r1
 800d006:	f6bf aed6 	bge.w	800cdb6 <atan+0x3e>
 800d00a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d00e:	461d      	mov	r5, r3
 800d010:	e6d1      	b.n	800cdb6 <atan+0x3e>
 800d012:	a51d      	add	r5, pc, #116	; (adr r5, 800d088 <atan+0x310>)
 800d014:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d018:	e6cd      	b.n	800cdb6 <atan+0x3e>
 800d01a:	bf00      	nop
 800d01c:	f3af 8000 	nop.w
 800d020:	54442d18 	.word	0x54442d18
 800d024:	bff921fb 	.word	0xbff921fb
 800d028:	8800759c 	.word	0x8800759c
 800d02c:	7e37e43c 	.word	0x7e37e43c
 800d030:	e322da11 	.word	0xe322da11
 800d034:	3f90ad3a 	.word	0x3f90ad3a
 800d038:	24760deb 	.word	0x24760deb
 800d03c:	3fa97b4b 	.word	0x3fa97b4b
 800d040:	a0d03d51 	.word	0xa0d03d51
 800d044:	3fb10d66 	.word	0x3fb10d66
 800d048:	c54c206e 	.word	0xc54c206e
 800d04c:	3fb745cd 	.word	0x3fb745cd
 800d050:	920083ff 	.word	0x920083ff
 800d054:	3fc24924 	.word	0x3fc24924
 800d058:	5555550d 	.word	0x5555550d
 800d05c:	3fd55555 	.word	0x3fd55555
 800d060:	2c6a6c2f 	.word	0x2c6a6c2f
 800d064:	bfa2b444 	.word	0xbfa2b444
 800d068:	52defd9a 	.word	0x52defd9a
 800d06c:	3fadde2d 	.word	0x3fadde2d
 800d070:	af749a6d 	.word	0xaf749a6d
 800d074:	3fb3b0f2 	.word	0x3fb3b0f2
 800d078:	fe231671 	.word	0xfe231671
 800d07c:	3fbc71c6 	.word	0x3fbc71c6
 800d080:	9998ebc4 	.word	0x9998ebc4
 800d084:	3fc99999 	.word	0x3fc99999
 800d088:	54442d18 	.word	0x54442d18
 800d08c:	3ff921fb 	.word	0x3ff921fb
 800d090:	440fffff 	.word	0x440fffff
 800d094:	7ff00000 	.word	0x7ff00000
 800d098:	3fdbffff 	.word	0x3fdbffff
 800d09c:	3ff00000 	.word	0x3ff00000
 800d0a0:	3ff2ffff 	.word	0x3ff2ffff
 800d0a4:	40038000 	.word	0x40038000
 800d0a8:	3ff80000 	.word	0x3ff80000
 800d0ac:	bff00000 	.word	0xbff00000
 800d0b0:	0800f900 	.word	0x0800f900
 800d0b4:	0800f8e0 	.word	0x0800f8e0

0800d0b8 <fabs>:
 800d0b8:	ec51 0b10 	vmov	r0, r1, d0
 800d0bc:	ee10 2a10 	vmov	r2, s0
 800d0c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d0c4:	ec43 2b10 	vmov	d0, r2, r3
 800d0c8:	4770      	bx	lr

0800d0ca <atan2>:
 800d0ca:	f000 b835 	b.w	800d138 <__ieee754_atan2>
	...

0800d0d0 <sqrt>:
 800d0d0:	b538      	push	{r3, r4, r5, lr}
 800d0d2:	ed2d 8b02 	vpush	{d8}
 800d0d6:	ec55 4b10 	vmov	r4, r5, d0
 800d0da:	f000 f8f7 	bl	800d2cc <__ieee754_sqrt>
 800d0de:	4b15      	ldr	r3, [pc, #84]	; (800d134 <sqrt+0x64>)
 800d0e0:	eeb0 8a40 	vmov.f32	s16, s0
 800d0e4:	eef0 8a60 	vmov.f32	s17, s1
 800d0e8:	f993 3000 	ldrsb.w	r3, [r3]
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	d019      	beq.n	800d124 <sqrt+0x54>
 800d0f0:	4622      	mov	r2, r4
 800d0f2:	462b      	mov	r3, r5
 800d0f4:	4620      	mov	r0, r4
 800d0f6:	4629      	mov	r1, r5
 800d0f8:	f7f3 fcbc 	bl	8000a74 <__aeabi_dcmpun>
 800d0fc:	b990      	cbnz	r0, 800d124 <sqrt+0x54>
 800d0fe:	2200      	movs	r2, #0
 800d100:	2300      	movs	r3, #0
 800d102:	4620      	mov	r0, r4
 800d104:	4629      	mov	r1, r5
 800d106:	f7f3 fc8d 	bl	8000a24 <__aeabi_dcmplt>
 800d10a:	b158      	cbz	r0, 800d124 <sqrt+0x54>
 800d10c:	f7ff fd28 	bl	800cb60 <__errno>
 800d110:	2321      	movs	r3, #33	; 0x21
 800d112:	6003      	str	r3, [r0, #0]
 800d114:	2200      	movs	r2, #0
 800d116:	2300      	movs	r3, #0
 800d118:	4610      	mov	r0, r2
 800d11a:	4619      	mov	r1, r3
 800d11c:	f7f3 fb3a 	bl	8000794 <__aeabi_ddiv>
 800d120:	ec41 0b18 	vmov	d8, r0, r1
 800d124:	eeb0 0a48 	vmov.f32	s0, s16
 800d128:	eef0 0a68 	vmov.f32	s1, s17
 800d12c:	ecbd 8b02 	vpop	{d8}
 800d130:	bd38      	pop	{r3, r4, r5, pc}
 800d132:	bf00      	nop
 800d134:	2000012c 	.word	0x2000012c

0800d138 <__ieee754_atan2>:
 800d138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d13c:	ec57 6b11 	vmov	r6, r7, d1
 800d140:	4273      	negs	r3, r6
 800d142:	f8df e184 	ldr.w	lr, [pc, #388]	; 800d2c8 <__ieee754_atan2+0x190>
 800d146:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d14a:	4333      	orrs	r3, r6
 800d14c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d150:	4573      	cmp	r3, lr
 800d152:	ec51 0b10 	vmov	r0, r1, d0
 800d156:	ee11 8a10 	vmov	r8, s2
 800d15a:	d80a      	bhi.n	800d172 <__ieee754_atan2+0x3a>
 800d15c:	4244      	negs	r4, r0
 800d15e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d162:	4304      	orrs	r4, r0
 800d164:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d168:	4574      	cmp	r4, lr
 800d16a:	ee10 9a10 	vmov	r9, s0
 800d16e:	468c      	mov	ip, r1
 800d170:	d907      	bls.n	800d182 <__ieee754_atan2+0x4a>
 800d172:	4632      	mov	r2, r6
 800d174:	463b      	mov	r3, r7
 800d176:	f7f3 f82d 	bl	80001d4 <__adddf3>
 800d17a:	ec41 0b10 	vmov	d0, r0, r1
 800d17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d182:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d186:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d18a:	4334      	orrs	r4, r6
 800d18c:	d103      	bne.n	800d196 <__ieee754_atan2+0x5e>
 800d18e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d192:	f7ff bdf1 	b.w	800cd78 <atan>
 800d196:	17bc      	asrs	r4, r7, #30
 800d198:	f004 0402 	and.w	r4, r4, #2
 800d19c:	ea53 0909 	orrs.w	r9, r3, r9
 800d1a0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d1a4:	d107      	bne.n	800d1b6 <__ieee754_atan2+0x7e>
 800d1a6:	2c02      	cmp	r4, #2
 800d1a8:	d060      	beq.n	800d26c <__ieee754_atan2+0x134>
 800d1aa:	2c03      	cmp	r4, #3
 800d1ac:	d1e5      	bne.n	800d17a <__ieee754_atan2+0x42>
 800d1ae:	a142      	add	r1, pc, #264	; (adr r1, 800d2b8 <__ieee754_atan2+0x180>)
 800d1b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1b4:	e7e1      	b.n	800d17a <__ieee754_atan2+0x42>
 800d1b6:	ea52 0808 	orrs.w	r8, r2, r8
 800d1ba:	d106      	bne.n	800d1ca <__ieee754_atan2+0x92>
 800d1bc:	f1bc 0f00 	cmp.w	ip, #0
 800d1c0:	da5f      	bge.n	800d282 <__ieee754_atan2+0x14a>
 800d1c2:	a13f      	add	r1, pc, #252	; (adr r1, 800d2c0 <__ieee754_atan2+0x188>)
 800d1c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1c8:	e7d7      	b.n	800d17a <__ieee754_atan2+0x42>
 800d1ca:	4572      	cmp	r2, lr
 800d1cc:	d10f      	bne.n	800d1ee <__ieee754_atan2+0xb6>
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800d1d4:	d107      	bne.n	800d1e6 <__ieee754_atan2+0xae>
 800d1d6:	2c02      	cmp	r4, #2
 800d1d8:	d84c      	bhi.n	800d274 <__ieee754_atan2+0x13c>
 800d1da:	4b35      	ldr	r3, [pc, #212]	; (800d2b0 <__ieee754_atan2+0x178>)
 800d1dc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d1e0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d1e4:	e7c9      	b.n	800d17a <__ieee754_atan2+0x42>
 800d1e6:	2c02      	cmp	r4, #2
 800d1e8:	d848      	bhi.n	800d27c <__ieee754_atan2+0x144>
 800d1ea:	4b32      	ldr	r3, [pc, #200]	; (800d2b4 <__ieee754_atan2+0x17c>)
 800d1ec:	e7f6      	b.n	800d1dc <__ieee754_atan2+0xa4>
 800d1ee:	4573      	cmp	r3, lr
 800d1f0:	d0e4      	beq.n	800d1bc <__ieee754_atan2+0x84>
 800d1f2:	1a9b      	subs	r3, r3, r2
 800d1f4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800d1f8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d1fc:	da1e      	bge.n	800d23c <__ieee754_atan2+0x104>
 800d1fe:	2f00      	cmp	r7, #0
 800d200:	da01      	bge.n	800d206 <__ieee754_atan2+0xce>
 800d202:	323c      	adds	r2, #60	; 0x3c
 800d204:	db1e      	blt.n	800d244 <__ieee754_atan2+0x10c>
 800d206:	4632      	mov	r2, r6
 800d208:	463b      	mov	r3, r7
 800d20a:	f7f3 fac3 	bl	8000794 <__aeabi_ddiv>
 800d20e:	ec41 0b10 	vmov	d0, r0, r1
 800d212:	f7ff ff51 	bl	800d0b8 <fabs>
 800d216:	f7ff fdaf 	bl	800cd78 <atan>
 800d21a:	ec51 0b10 	vmov	r0, r1, d0
 800d21e:	2c01      	cmp	r4, #1
 800d220:	d013      	beq.n	800d24a <__ieee754_atan2+0x112>
 800d222:	2c02      	cmp	r4, #2
 800d224:	d015      	beq.n	800d252 <__ieee754_atan2+0x11a>
 800d226:	2c00      	cmp	r4, #0
 800d228:	d0a7      	beq.n	800d17a <__ieee754_atan2+0x42>
 800d22a:	a319      	add	r3, pc, #100	; (adr r3, 800d290 <__ieee754_atan2+0x158>)
 800d22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d230:	f7f2 ffce 	bl	80001d0 <__aeabi_dsub>
 800d234:	a318      	add	r3, pc, #96	; (adr r3, 800d298 <__ieee754_atan2+0x160>)
 800d236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d23a:	e014      	b.n	800d266 <__ieee754_atan2+0x12e>
 800d23c:	a118      	add	r1, pc, #96	; (adr r1, 800d2a0 <__ieee754_atan2+0x168>)
 800d23e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d242:	e7ec      	b.n	800d21e <__ieee754_atan2+0xe6>
 800d244:	2000      	movs	r0, #0
 800d246:	2100      	movs	r1, #0
 800d248:	e7e9      	b.n	800d21e <__ieee754_atan2+0xe6>
 800d24a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d24e:	4619      	mov	r1, r3
 800d250:	e793      	b.n	800d17a <__ieee754_atan2+0x42>
 800d252:	a30f      	add	r3, pc, #60	; (adr r3, 800d290 <__ieee754_atan2+0x158>)
 800d254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d258:	f7f2 ffba 	bl	80001d0 <__aeabi_dsub>
 800d25c:	4602      	mov	r2, r0
 800d25e:	460b      	mov	r3, r1
 800d260:	a10d      	add	r1, pc, #52	; (adr r1, 800d298 <__ieee754_atan2+0x160>)
 800d262:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d266:	f7f2 ffb3 	bl	80001d0 <__aeabi_dsub>
 800d26a:	e786      	b.n	800d17a <__ieee754_atan2+0x42>
 800d26c:	a10a      	add	r1, pc, #40	; (adr r1, 800d298 <__ieee754_atan2+0x160>)
 800d26e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d272:	e782      	b.n	800d17a <__ieee754_atan2+0x42>
 800d274:	a10c      	add	r1, pc, #48	; (adr r1, 800d2a8 <__ieee754_atan2+0x170>)
 800d276:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d27a:	e77e      	b.n	800d17a <__ieee754_atan2+0x42>
 800d27c:	2000      	movs	r0, #0
 800d27e:	2100      	movs	r1, #0
 800d280:	e77b      	b.n	800d17a <__ieee754_atan2+0x42>
 800d282:	a107      	add	r1, pc, #28	; (adr r1, 800d2a0 <__ieee754_atan2+0x168>)
 800d284:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d288:	e777      	b.n	800d17a <__ieee754_atan2+0x42>
 800d28a:	bf00      	nop
 800d28c:	f3af 8000 	nop.w
 800d290:	33145c07 	.word	0x33145c07
 800d294:	3ca1a626 	.word	0x3ca1a626
 800d298:	54442d18 	.word	0x54442d18
 800d29c:	400921fb 	.word	0x400921fb
 800d2a0:	54442d18 	.word	0x54442d18
 800d2a4:	3ff921fb 	.word	0x3ff921fb
 800d2a8:	54442d18 	.word	0x54442d18
 800d2ac:	3fe921fb 	.word	0x3fe921fb
 800d2b0:	0800f920 	.word	0x0800f920
 800d2b4:	0800f938 	.word	0x0800f938
 800d2b8:	54442d18 	.word	0x54442d18
 800d2bc:	c00921fb 	.word	0xc00921fb
 800d2c0:	54442d18 	.word	0x54442d18
 800d2c4:	bff921fb 	.word	0xbff921fb
 800d2c8:	7ff00000 	.word	0x7ff00000

0800d2cc <__ieee754_sqrt>:
 800d2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2d0:	ec55 4b10 	vmov	r4, r5, d0
 800d2d4:	4e56      	ldr	r6, [pc, #344]	; (800d430 <__ieee754_sqrt+0x164>)
 800d2d6:	43ae      	bics	r6, r5
 800d2d8:	ee10 0a10 	vmov	r0, s0
 800d2dc:	ee10 3a10 	vmov	r3, s0
 800d2e0:	4629      	mov	r1, r5
 800d2e2:	462a      	mov	r2, r5
 800d2e4:	d110      	bne.n	800d308 <__ieee754_sqrt+0x3c>
 800d2e6:	ee10 2a10 	vmov	r2, s0
 800d2ea:	462b      	mov	r3, r5
 800d2ec:	f7f3 f928 	bl	8000540 <__aeabi_dmul>
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	4629      	mov	r1, r5
 800d2f8:	f7f2 ff6c 	bl	80001d4 <__adddf3>
 800d2fc:	4604      	mov	r4, r0
 800d2fe:	460d      	mov	r5, r1
 800d300:	ec45 4b10 	vmov	d0, r4, r5
 800d304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d308:	2d00      	cmp	r5, #0
 800d30a:	dc10      	bgt.n	800d32e <__ieee754_sqrt+0x62>
 800d30c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d310:	4330      	orrs	r0, r6
 800d312:	d0f5      	beq.n	800d300 <__ieee754_sqrt+0x34>
 800d314:	b15d      	cbz	r5, 800d32e <__ieee754_sqrt+0x62>
 800d316:	ee10 2a10 	vmov	r2, s0
 800d31a:	462b      	mov	r3, r5
 800d31c:	ee10 0a10 	vmov	r0, s0
 800d320:	f7f2 ff56 	bl	80001d0 <__aeabi_dsub>
 800d324:	4602      	mov	r2, r0
 800d326:	460b      	mov	r3, r1
 800d328:	f7f3 fa34 	bl	8000794 <__aeabi_ddiv>
 800d32c:	e7e6      	b.n	800d2fc <__ieee754_sqrt+0x30>
 800d32e:	1509      	asrs	r1, r1, #20
 800d330:	d076      	beq.n	800d420 <__ieee754_sqrt+0x154>
 800d332:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d336:	07ce      	lsls	r6, r1, #31
 800d338:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800d33c:	bf5e      	ittt	pl
 800d33e:	0fda      	lsrpl	r2, r3, #31
 800d340:	005b      	lslpl	r3, r3, #1
 800d342:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800d346:	0fda      	lsrs	r2, r3, #31
 800d348:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800d34c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800d350:	2000      	movs	r0, #0
 800d352:	106d      	asrs	r5, r5, #1
 800d354:	005b      	lsls	r3, r3, #1
 800d356:	f04f 0e16 	mov.w	lr, #22
 800d35a:	4684      	mov	ip, r0
 800d35c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d360:	eb0c 0401 	add.w	r4, ip, r1
 800d364:	4294      	cmp	r4, r2
 800d366:	bfde      	ittt	le
 800d368:	1b12      	suble	r2, r2, r4
 800d36a:	eb04 0c01 	addle.w	ip, r4, r1
 800d36e:	1840      	addle	r0, r0, r1
 800d370:	0052      	lsls	r2, r2, #1
 800d372:	f1be 0e01 	subs.w	lr, lr, #1
 800d376:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d37a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d37e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d382:	d1ed      	bne.n	800d360 <__ieee754_sqrt+0x94>
 800d384:	4671      	mov	r1, lr
 800d386:	2720      	movs	r7, #32
 800d388:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d38c:	4562      	cmp	r2, ip
 800d38e:	eb04 060e 	add.w	r6, r4, lr
 800d392:	dc02      	bgt.n	800d39a <__ieee754_sqrt+0xce>
 800d394:	d113      	bne.n	800d3be <__ieee754_sqrt+0xf2>
 800d396:	429e      	cmp	r6, r3
 800d398:	d811      	bhi.n	800d3be <__ieee754_sqrt+0xf2>
 800d39a:	2e00      	cmp	r6, #0
 800d39c:	eb06 0e04 	add.w	lr, r6, r4
 800d3a0:	da43      	bge.n	800d42a <__ieee754_sqrt+0x15e>
 800d3a2:	f1be 0f00 	cmp.w	lr, #0
 800d3a6:	db40      	blt.n	800d42a <__ieee754_sqrt+0x15e>
 800d3a8:	f10c 0801 	add.w	r8, ip, #1
 800d3ac:	eba2 020c 	sub.w	r2, r2, ip
 800d3b0:	429e      	cmp	r6, r3
 800d3b2:	bf88      	it	hi
 800d3b4:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800d3b8:	1b9b      	subs	r3, r3, r6
 800d3ba:	4421      	add	r1, r4
 800d3bc:	46c4      	mov	ip, r8
 800d3be:	0052      	lsls	r2, r2, #1
 800d3c0:	3f01      	subs	r7, #1
 800d3c2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d3c6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d3ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d3ce:	d1dd      	bne.n	800d38c <__ieee754_sqrt+0xc0>
 800d3d0:	4313      	orrs	r3, r2
 800d3d2:	d006      	beq.n	800d3e2 <__ieee754_sqrt+0x116>
 800d3d4:	1c4c      	adds	r4, r1, #1
 800d3d6:	bf13      	iteet	ne
 800d3d8:	3101      	addne	r1, #1
 800d3da:	3001      	addeq	r0, #1
 800d3dc:	4639      	moveq	r1, r7
 800d3de:	f021 0101 	bicne.w	r1, r1, #1
 800d3e2:	1043      	asrs	r3, r0, #1
 800d3e4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d3e8:	0849      	lsrs	r1, r1, #1
 800d3ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d3ee:	07c2      	lsls	r2, r0, #31
 800d3f0:	bf48      	it	mi
 800d3f2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800d3f6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800d3fa:	460c      	mov	r4, r1
 800d3fc:	463d      	mov	r5, r7
 800d3fe:	e77f      	b.n	800d300 <__ieee754_sqrt+0x34>
 800d400:	0ada      	lsrs	r2, r3, #11
 800d402:	3815      	subs	r0, #21
 800d404:	055b      	lsls	r3, r3, #21
 800d406:	2a00      	cmp	r2, #0
 800d408:	d0fa      	beq.n	800d400 <__ieee754_sqrt+0x134>
 800d40a:	02d7      	lsls	r7, r2, #11
 800d40c:	d50a      	bpl.n	800d424 <__ieee754_sqrt+0x158>
 800d40e:	f1c1 0420 	rsb	r4, r1, #32
 800d412:	fa23 f404 	lsr.w	r4, r3, r4
 800d416:	1e4d      	subs	r5, r1, #1
 800d418:	408b      	lsls	r3, r1
 800d41a:	4322      	orrs	r2, r4
 800d41c:	1b41      	subs	r1, r0, r5
 800d41e:	e788      	b.n	800d332 <__ieee754_sqrt+0x66>
 800d420:	4608      	mov	r0, r1
 800d422:	e7f0      	b.n	800d406 <__ieee754_sqrt+0x13a>
 800d424:	0052      	lsls	r2, r2, #1
 800d426:	3101      	adds	r1, #1
 800d428:	e7ef      	b.n	800d40a <__ieee754_sqrt+0x13e>
 800d42a:	46e0      	mov	r8, ip
 800d42c:	e7be      	b.n	800d3ac <__ieee754_sqrt+0xe0>
 800d42e:	bf00      	nop
 800d430:	7ff00000 	.word	0x7ff00000

0800d434 <_init>:
 800d434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d436:	bf00      	nop
 800d438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d43a:	bc08      	pop	{r3}
 800d43c:	469e      	mov	lr, r3
 800d43e:	4770      	bx	lr

0800d440 <_fini>:
 800d440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d442:	bf00      	nop
 800d444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d446:	bc08      	pop	{r3}
 800d448:	469e      	mov	lr, r3
 800d44a:	4770      	bx	lr
