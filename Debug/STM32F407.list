
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000110ac  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  08011238  08011238  00021238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011810  08011810  00030274  2**0
                  CONTENTS
  4 .ARM          00000008  08011810  08011810  00021810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011818  08011818  00030274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011818  08011818  00021818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801181c  0801181c  0002181c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  08011820  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b2c  20000278  08011a94  00030278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000da4  08011a94  00030da4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030274  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a355  00000000  00000000  000302a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057ad  00000000  00000000  0005a5f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c00  00000000  00000000  0005fda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019f0  00000000  00000000  000619a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b4b  00000000  00000000  00063398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026bee  00000000  00000000  00089ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d963f  00000000  00000000  000b0ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018a110  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007adc  00000000  00000000  0018a164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000278 	.word	0x20000278
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0801121c 	.word	0x0801121c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000027c 	.word	0x2000027c
 80001c4:	0801121c 	.word	0x0801121c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ba4:	f000 b96e 	b.w	8000e84 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468c      	mov	ip, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f040 8083 	bne.w	8000cd6 <__udivmoddi4+0x116>
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	d947      	bls.n	8000c66 <__udivmoddi4+0xa6>
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	b142      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bdc:	f1c2 0020 	rsb	r0, r2, #32
 8000be0:	fa24 f000 	lsr.w	r0, r4, r0
 8000be4:	4091      	lsls	r1, r2
 8000be6:	4097      	lsls	r7, r2
 8000be8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bec:	4094      	lsls	r4, r2
 8000bee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bf2:	0c23      	lsrs	r3, r4, #16
 8000bf4:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf8:	fa1f fe87 	uxth.w	lr, r7
 8000bfc:	fb08 c116 	mls	r1, r8, r6, ip
 8000c00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c04:	fb06 f10e 	mul.w	r1, r6, lr
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x60>
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c12:	f080 8119 	bcs.w	8000e48 <__udivmoddi4+0x288>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 8116 	bls.w	8000e48 <__udivmoddi4+0x288>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	443b      	add	r3, r7
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x8c>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c3e:	f080 8105 	bcs.w	8000e4c <__udivmoddi4+0x28c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8102 	bls.w	8000e4c <__udivmoddi4+0x28c>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c50:	eba4 040e 	sub.w	r4, r4, lr
 8000c54:	2600      	movs	r6, #0
 8000c56:	b11d      	cbz	r5, 8000c60 <__udivmoddi4+0xa0>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	b902      	cbnz	r2, 8000c6a <__udivmoddi4+0xaa>
 8000c68:	deff      	udf	#255	; 0xff
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d150      	bne.n	8000d14 <__udivmoddi4+0x154>
 8000c72:	1bcb      	subs	r3, r1, r7
 8000c74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c78:	fa1f f887 	uxth.w	r8, r7
 8000c7c:	2601      	movs	r6, #1
 8000c7e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c82:	0c21      	lsrs	r1, r4, #16
 8000c84:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d907      	bls.n	8000ca4 <__udivmoddi4+0xe4>
 8000c94:	1879      	adds	r1, r7, r1
 8000c96:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0xe2>
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	f200 80e9 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000ca2:	4684      	mov	ip, r0
 8000ca4:	1ac9      	subs	r1, r1, r3
 8000ca6:	b2a3      	uxth	r3, r4
 8000ca8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cac:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb4:	fb08 f800 	mul.w	r8, r8, r0
 8000cb8:	45a0      	cmp	r8, r4
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x10c>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x10a>
 8000cc4:	45a0      	cmp	r8, r4
 8000cc6:	f200 80d9 	bhi.w	8000e7c <__udivmoddi4+0x2bc>
 8000cca:	4618      	mov	r0, r3
 8000ccc:	eba4 0408 	sub.w	r4, r4, r8
 8000cd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd4:	e7bf      	b.n	8000c56 <__udivmoddi4+0x96>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0x12e>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	f000 80b1 	beq.w	8000e42 <__udivmoddi4+0x282>
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	fab3 f683 	clz	r6, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d14a      	bne.n	8000d8c <__udivmoddi4+0x1cc>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0x140>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 80b8 	bhi.w	8000e70 <__udivmoddi4+0x2b0>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb61 0103 	sbc.w	r1, r1, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	468c      	mov	ip, r1
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0a8      	beq.n	8000c60 <__udivmoddi4+0xa0>
 8000d0e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000d14:	f1c2 0320 	rsb	r3, r2, #32
 8000d18:	fa20 f603 	lsr.w	r6, r0, r3
 8000d1c:	4097      	lsls	r7, r2
 8000d1e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d22:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d26:	40d9      	lsrs	r1, r3
 8000d28:	4330      	orrs	r0, r6
 8000d2a:	0c03      	lsrs	r3, r0, #16
 8000d2c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f108 	mul.w	r1, r6, r8
 8000d40:	4299      	cmp	r1, r3
 8000d42:	fa04 f402 	lsl.w	r4, r4, r2
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x19c>
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d4e:	f080 808d 	bcs.w	8000e6c <__udivmoddi4+0x2ac>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 808a 	bls.w	8000e6c <__udivmoddi4+0x2ac>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	443b      	add	r3, r7
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b281      	uxth	r1, r0
 8000d60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb00 f308 	mul.w	r3, r0, r8
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x1c4>
 8000d74:	1879      	adds	r1, r7, r1
 8000d76:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d7a:	d273      	bcs.n	8000e64 <__udivmoddi4+0x2a4>
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d971      	bls.n	8000e64 <__udivmoddi4+0x2a4>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4439      	add	r1, r7
 8000d84:	1acb      	subs	r3, r1, r3
 8000d86:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d8a:	e778      	b.n	8000c7e <__udivmoddi4+0xbe>
 8000d8c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d90:	fa03 f406 	lsl.w	r4, r3, r6
 8000d94:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d98:	431c      	orrs	r4, r3
 8000d9a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000da2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000da6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000daa:	431f      	orrs	r7, r3
 8000dac:	0c3b      	lsrs	r3, r7, #16
 8000dae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db2:	fa1f f884 	uxth.w	r8, r4
 8000db6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dbe:	fb09 fa08 	mul.w	sl, r9, r8
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x220>
 8000dce:	1861      	adds	r1, r4, r1
 8000dd0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dd4:	d248      	bcs.n	8000e68 <__udivmoddi4+0x2a8>
 8000dd6:	458a      	cmp	sl, r1
 8000dd8:	d946      	bls.n	8000e68 <__udivmoddi4+0x2a8>
 8000dda:	f1a9 0902 	sub.w	r9, r9, #2
 8000dde:	4421      	add	r1, r4
 8000de0:	eba1 010a 	sub.w	r1, r1, sl
 8000de4:	b2bf      	uxth	r7, r7
 8000de6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dea:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000df2:	fb00 f808 	mul.w	r8, r0, r8
 8000df6:	45b8      	cmp	r8, r7
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x24a>
 8000dfa:	19e7      	adds	r7, r4, r7
 8000dfc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e00:	d22e      	bcs.n	8000e60 <__udivmoddi4+0x2a0>
 8000e02:	45b8      	cmp	r8, r7
 8000e04:	d92c      	bls.n	8000e60 <__udivmoddi4+0x2a0>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4427      	add	r7, r4
 8000e0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0e:	eba7 0708 	sub.w	r7, r7, r8
 8000e12:	fba0 8902 	umull	r8, r9, r0, r2
 8000e16:	454f      	cmp	r7, r9
 8000e18:	46c6      	mov	lr, r8
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	d31a      	bcc.n	8000e54 <__udivmoddi4+0x294>
 8000e1e:	d017      	beq.n	8000e50 <__udivmoddi4+0x290>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x27a>
 8000e22:	ebb3 020e 	subs.w	r2, r3, lr
 8000e26:	eb67 0701 	sbc.w	r7, r7, r1
 8000e2a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e2e:	40f2      	lsrs	r2, r6
 8000e30:	ea4c 0202 	orr.w	r2, ip, r2
 8000e34:	40f7      	lsrs	r7, r6
 8000e36:	e9c5 2700 	strd	r2, r7, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e70b      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e9      	b.n	8000c20 <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fd      	b.n	8000c4c <__udivmoddi4+0x8c>
 8000e50:	4543      	cmp	r3, r8
 8000e52:	d2e5      	bcs.n	8000e20 <__udivmoddi4+0x260>
 8000e54:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e58:	eb69 0104 	sbc.w	r1, r9, r4
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7df      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e7d2      	b.n	8000e0a <__udivmoddi4+0x24a>
 8000e64:	4660      	mov	r0, ip
 8000e66:	e78d      	b.n	8000d84 <__udivmoddi4+0x1c4>
 8000e68:	4681      	mov	r9, r0
 8000e6a:	e7b9      	b.n	8000de0 <__udivmoddi4+0x220>
 8000e6c:	4666      	mov	r6, ip
 8000e6e:	e775      	b.n	8000d5c <__udivmoddi4+0x19c>
 8000e70:	4630      	mov	r0, r6
 8000e72:	e74a      	b.n	8000d0a <__udivmoddi4+0x14a>
 8000e74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e78:	4439      	add	r1, r7
 8000e7a:	e713      	b.n	8000ca4 <__udivmoddi4+0xe4>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	443c      	add	r4, r7
 8000e80:	e724      	b.n	8000ccc <__udivmoddi4+0x10c>
 8000e82:	bf00      	nop

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <DelayMicro+0x3c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <DelayMicro+0x3c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <DelayMicro+0x40>)
 8000e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea0:	0ddb      	lsrs	r3, r3, #23
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	fb02 f303 	mul.w	r3, r2, r3
 8000ea8:	607b      	str	r3, [r7, #4]
	while (micros--);
 8000eaa:	bf00      	nop
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	1e5a      	subs	r2, r3, #1
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1fa      	bne.n	8000eac <DelayMicro+0x24>
}
 8000eb6:	bf00      	nop
 8000eb8:	bf00      	nop
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	ffa71ee7 	.word	0xffa71ee7

08000ecc <NRF24_ReadReg>:
//----------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  uint8_t STATUS = 99;
 8000ed6:	2363      	movs	r3, #99	; 0x63
 8000ed8:	73fb      	strb	r3, [r7, #15]
  uint8_t dt=0, cmd;
 8000eda:	2300      	movs	r3, #0
 8000edc:	73bb      	strb	r3, [r7, #14]
  CS_ON;
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2110      	movs	r1, #16
 8000ee2:	4814      	ldr	r0, [pc, #80]	; (8000f34 <NRF24_ReadReg+0x68>)
 8000ee4:	f006 f84a 	bl	8006f7c <HAL_GPIO_WritePin>
  STATUS = HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 8000ee8:	f107 020e 	add.w	r2, r7, #14
 8000eec:	1df9      	adds	r1, r7, #7
 8000eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	4810      	ldr	r0, [pc, #64]	; (8000f38 <NRF24_ReadReg+0x6c>)
 8000ef8:	f00a ffc8 	bl	800be8c <HAL_SPI_TransmitReceive>
 8000efc:	4603      	mov	r3, r0
 8000efe:	73fb      	strb	r3, [r7, #15]

  if (addr!=STATUS_NRF)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	2b07      	cmp	r3, #7
 8000f04:	d00c      	beq.n	8000f20 <NRF24_ReadReg+0x54>
  {
	  cmd=0xFF;
 8000f06:	23ff      	movs	r3, #255	; 0xff
 8000f08:	737b      	strb	r3, [r7, #13]
	  HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 8000f0a:	f107 020e 	add.w	r2, r7, #14
 8000f0e:	f107 010d 	add.w	r1, r7, #13
 8000f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2301      	movs	r3, #1
 8000f1a:	4807      	ldr	r0, [pc, #28]	; (8000f38 <NRF24_ReadReg+0x6c>)
 8000f1c:	f00a ffb6 	bl	800be8c <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 8000f20:	2201      	movs	r2, #1
 8000f22:	2110      	movs	r1, #16
 8000f24:	4803      	ldr	r0, [pc, #12]	; (8000f34 <NRF24_ReadReg+0x68>)
 8000f26:	f006 f829 	bl	8006f7c <HAL_GPIO_WritePin>
  return dt;
 8000f2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40020800 	.word	0x40020800
 8000f38:	20000488 	.word	0x20000488

08000f3c <NRF24_WriteReg>:
//----------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	460a      	mov	r2, r1
 8000f46:	71fb      	strb	r3, [r7, #7]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	71bb      	strb	r3, [r7, #6]
  uint8_t STATUS = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73fb      	strb	r3, [r7, #15]
  addr |= W_REGISTER;								// Add write bit
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	f043 0320 	orr.w	r3, r3, #32
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2110      	movs	r1, #16
 8000f5e:	480e      	ldr	r0, [pc, #56]	; (8000f98 <NRF24_WriteReg+0x5c>)
 8000f60:	f006 f80c 	bl	8006f7c <HAL_GPIO_WritePin>
  STATUS = HAL_SPI_Transmit(&hspi1,&addr,1,1000);	// Send address in bus
 8000f64:	1df9      	adds	r1, r7, #7
 8000f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	480b      	ldr	r0, [pc, #44]	; (8000f9c <NRF24_WriteReg+0x60>)
 8000f6e:	f00a fd40 	bl	800b9f2 <HAL_SPI_Transmit>
 8000f72:	4603      	mov	r3, r0
 8000f74:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 8000f76:	1db9      	adds	r1, r7, #6
 8000f78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	4807      	ldr	r0, [pc, #28]	; (8000f9c <NRF24_WriteReg+0x60>)
 8000f80:	f00a fd37 	bl	800b9f2 <HAL_SPI_Transmit>
  CS_OFF;
 8000f84:	2201      	movs	r2, #1
 8000f86:	2110      	movs	r1, #16
 8000f88:	4803      	ldr	r0, [pc, #12]	; (8000f98 <NRF24_WriteReg+0x5c>)
 8000f8a:	f005 fff7 	bl	8006f7c <HAL_GPIO_WritePin>
}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40020800 	.word	0x40020800
 8000f9c:	20000488 	.word	0x20000488

08000fa0 <NRF24_ToggleFeatures>:
//----------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {ACTIVATE};
 8000fa6:	2350      	movs	r3, #80	; 0x50
 8000fa8:	713b      	strb	r3, [r7, #4]
  CS_ON;
 8000faa:	2200      	movs	r2, #0
 8000fac:	2110      	movs	r1, #16
 8000fae:	480f      	ldr	r0, [pc, #60]	; (8000fec <NRF24_ToggleFeatures+0x4c>)
 8000fb0:	f005 ffe4 	bl	8006f7c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000fb4:	1d39      	adds	r1, r7, #4
 8000fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fba:	2201      	movs	r2, #1
 8000fbc:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <NRF24_ToggleFeatures+0x50>)
 8000fbe:	f00a fd18 	bl	800b9f2 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f7ff ff60 	bl	8000e88 <DelayMicro>
  dt[0] = 0x73;
 8000fc8:	2373      	movs	r3, #115	; 0x73
 8000fca:	713b      	strb	r3, [r7, #4]
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000fcc:	1d39      	adds	r1, r7, #4
 8000fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4806      	ldr	r0, [pc, #24]	; (8000ff0 <NRF24_ToggleFeatures+0x50>)
 8000fd6:	f00a fd0c 	bl	800b9f2 <HAL_SPI_Transmit>
  CS_OFF;
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2110      	movs	r1, #16
 8000fde:	4803      	ldr	r0, [pc, #12]	; (8000fec <NRF24_ToggleFeatures+0x4c>)
 8000fe0:	f005 ffcc 	bl	8006f7c <HAL_GPIO_WritePin>
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40020800 	.word	0x40020800
 8000ff0:	20000488 	.word	0x20000488

08000ff4 <NRF24_Read_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
 8001000:	4613      	mov	r3, r2
 8001002:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 8001004:	2200      	movs	r2, #0
 8001006:	2110      	movs	r1, #16
 8001008:	480d      	ldr	r0, [pc, #52]	; (8001040 <NRF24_Read_Buf+0x4c>)
 800100a:	f005 ffb7 	bl	8006f7c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 800100e:	1df9      	adds	r1, r7, #7
 8001010:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001014:	2201      	movs	r2, #1
 8001016:	480b      	ldr	r0, [pc, #44]	; (8001044 <NRF24_Read_Buf+0x50>)
 8001018:	f00a fceb 	bl	800b9f2 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 800101c:	79bb      	ldrb	r3, [r7, #6]
 800101e:	b29a      	uxth	r2, r3
 8001020:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001024:	6839      	ldr	r1, [r7, #0]
 8001026:	4807      	ldr	r0, [pc, #28]	; (8001044 <NRF24_Read_Buf+0x50>)
 8001028:	f00a fe1f 	bl	800bc6a <HAL_SPI_Receive>
  CS_OFF;
 800102c:	2201      	movs	r2, #1
 800102e:	2110      	movs	r1, #16
 8001030:	4803      	ldr	r0, [pc, #12]	; (8001040 <NRF24_Read_Buf+0x4c>)
 8001032:	f005 ffa3 	bl	8006f7c <HAL_GPIO_WritePin>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40020800 	.word	0x40020800
 8001044:	20000488 	.word	0x20000488

08001048 <NRF24_Write_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	4613      	mov	r3, r2
 8001056:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								//Add write bit
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f043 0320 	orr.w	r3, r3, #32
 800105e:	b2db      	uxtb	r3, r3
 8001060:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8001062:	2200      	movs	r2, #0
 8001064:	2110      	movs	r1, #16
 8001066:	480f      	ldr	r0, [pc, #60]	; (80010a4 <NRF24_Write_Buf+0x5c>)
 8001068:	f005 ff88 	bl	8006f7c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 800106c:	1df9      	adds	r1, r7, #7
 800106e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001072:	2201      	movs	r2, #1
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <NRF24_Write_Buf+0x60>)
 8001076:	f00a fcbc 	bl	800b9f2 <HAL_SPI_Transmit>
  DelayMicro(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f7ff ff04 	bl	8000e88 <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000);			// Send data in buffer
 8001080:	79bb      	ldrb	r3, [r7, #6]
 8001082:	b29a      	uxth	r2, r3
 8001084:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001088:	6839      	ldr	r1, [r7, #0]
 800108a:	4807      	ldr	r0, [pc, #28]	; (80010a8 <NRF24_Write_Buf+0x60>)
 800108c:	f00a fcb1 	bl	800b9f2 <HAL_SPI_Transmit>
  CS_OFF;
 8001090:	2201      	movs	r2, #1
 8001092:	2110      	movs	r1, #16
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <NRF24_Write_Buf+0x5c>)
 8001096:	f005 ff71 	bl	8006f7c <HAL_GPIO_WritePin>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40020800 	.word	0x40020800
 80010a8:	20000488 	.word	0x20000488

080010ac <NRF24_FlushRX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushRX(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_RX};
 80010b2:	23e2      	movs	r3, #226	; 0xe2
 80010b4:	713b      	strb	r3, [r7, #4]
  CS_ON;
 80010b6:	2200      	movs	r2, #0
 80010b8:	2110      	movs	r1, #16
 80010ba:	480b      	ldr	r0, [pc, #44]	; (80010e8 <NRF24_FlushRX+0x3c>)
 80010bc:	f005 ff5e 	bl	8006f7c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 80010c0:	1d39      	adds	r1, r7, #4
 80010c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c6:	2201      	movs	r2, #1
 80010c8:	4808      	ldr	r0, [pc, #32]	; (80010ec <NRF24_FlushRX+0x40>)
 80010ca:	f00a fc92 	bl	800b9f2 <HAL_SPI_Transmit>
  DelayMicro(1);
 80010ce:	2001      	movs	r0, #1
 80010d0:	f7ff feda 	bl	8000e88 <DelayMicro>
  CS_OFF;
 80010d4:	2201      	movs	r2, #1
 80010d6:	2110      	movs	r1, #16
 80010d8:	4803      	ldr	r0, [pc, #12]	; (80010e8 <NRF24_FlushRX+0x3c>)
 80010da:	f005 ff4f 	bl	8006f7c <HAL_GPIO_WritePin>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40020800 	.word	0x40020800
 80010ec:	20000488 	.word	0x20000488

080010f0 <NRF24_FlushTX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushTX(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_TX};
 80010f6:	23e1      	movs	r3, #225	; 0xe1
 80010f8:	713b      	strb	r3, [r7, #4]
  CS_ON;
 80010fa:	2200      	movs	r2, #0
 80010fc:	2110      	movs	r1, #16
 80010fe:	480b      	ldr	r0, [pc, #44]	; (800112c <NRF24_FlushTX+0x3c>)
 8001100:	f005 ff3c 	bl	8006f7c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8001104:	1d39      	adds	r1, r7, #4
 8001106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110a:	2201      	movs	r2, #1
 800110c:	4808      	ldr	r0, [pc, #32]	; (8001130 <NRF24_FlushTX+0x40>)
 800110e:	f00a fc70 	bl	800b9f2 <HAL_SPI_Transmit>
  DelayMicro(1);
 8001112:	2001      	movs	r0, #1
 8001114:	f7ff feb8 	bl	8000e88 <DelayMicro>
  CS_OFF;
 8001118:	2201      	movs	r2, #1
 800111a:	2110      	movs	r1, #16
 800111c:	4803      	ldr	r0, [pc, #12]	; (800112c <NRF24_FlushTX+0x3c>)
 800111e:	f005 ff2d 	bl	8006f7c <HAL_GPIO_WritePin>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40020800 	.word	0x40020800
 8001130:	20000488 	.word	0x20000488

08001134 <NRF24L01_RX_Mode>:
//----------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 800113a:	2300      	movs	r3, #0
 800113c:	71fb      	strb	r3, [r7, #7]
  regval = NRF24_ReadReg(CONFIG);
 800113e:	2000      	movs	r0, #0
 8001140:	f7ff fec4 	bl	8000ecc <NRF24_ReadReg>
 8001144:	4603      	mov	r3, r0
 8001146:	71fb      	strb	r3, [r7, #7]
  // Power up module. Write PWR_UP и PRIM_RX bits
  regval |= (1<<PWR_UP)|(1<<PRIM_RX);
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f043 0303 	orr.w	r3, r3, #3
 800114e:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	4619      	mov	r1, r3
 8001154:	2000      	movs	r0, #0
 8001156:	f7ff fef1 	bl	8000f3c <NRF24_WriteReg>
  CE_SET;
 800115a:	2201      	movs	r2, #1
 800115c:	2108      	movs	r1, #8
 800115e:	4807      	ldr	r0, [pc, #28]	; (800117c <NRF24L01_RX_Mode+0x48>)
 8001160:	f005 ff0c 	bl	8006f7c <HAL_GPIO_WritePin>
  DelayMicro(150); // Delay 130 us
 8001164:	2096      	movs	r0, #150	; 0x96
 8001166:	f7ff fe8f 	bl	8000e88 <DelayMicro>
  // Flush buffers
  NRF24_FlushRX();
 800116a:	f7ff ff9f 	bl	80010ac <NRF24_FlushRX>
  NRF24_FlushTX();
 800116e:	f7ff ffbf 	bl	80010f0 <NRF24_FlushTX>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40020000 	.word	0x40020000

08001180 <NRF24_ini>:
//----------------------------------------------------------------------------------------
void NRF24_ini(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	CE_RESET;
 8001184:	2200      	movs	r2, #0
 8001186:	2108      	movs	r1, #8
 8001188:	4824      	ldr	r0, [pc, #144]	; (800121c <NRF24_ini+0x9c>)
 800118a:	f005 fef7 	bl	8006f7c <HAL_GPIO_WritePin>
	DelayMicro(5000);
 800118e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001192:	f7ff fe79 	bl	8000e88 <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 8001196:	210a      	movs	r1, #10
 8001198:	2000      	movs	r0, #0
 800119a:	f7ff fecf 	bl	8000f3c <NRF24_WriteReg>

	DelayMicro(5000);
 800119e:	f241 3088 	movw	r0, #5000	; 0x1388
 80011a2:	f7ff fe71 	bl	8000e88 <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x02); 			// Enable Pipe1
 80011a6:	2102      	movs	r1, #2
 80011a8:	2001      	movs	r0, #1
 80011aa:	f7ff fec7 	bl	8000f3c <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x02); 		// Enable Pipe1
 80011ae:	2102      	movs	r1, #2
 80011b0:	2002      	movs	r0, #2
 80011b2:	f7ff fec3 	bl	8000f3c <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 80011b6:	2101      	movs	r1, #1
 80011b8:	2003      	movs	r0, #3
 80011ba:	f7ff febf 	bl	8000f3c <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 80011be:	215f      	movs	r1, #95	; 0x5f
 80011c0:	2004      	movs	r0, #4
 80011c2:	f7ff febb 	bl	8000f3c <NRF24_WriteReg>
	NRF24_ToggleFeatures();
 80011c6:	f7ff feeb 	bl	8000fa0 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);
 80011ca:	2100      	movs	r1, #0
 80011cc:	201d      	movs	r0, #29
 80011ce:	f7ff feb5 	bl	8000f3c <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);
 80011d2:	2100      	movs	r1, #0
 80011d4:	201c      	movs	r0, #28
 80011d6:	f7ff feb1 	bl	8000f3c <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 80011da:	2170      	movs	r1, #112	; 0x70
 80011dc:	2007      	movs	r0, #7
 80011de:	f7ff fead 	bl	8000f3c <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz
 80011e2:	214c      	movs	r1, #76	; 0x4c
 80011e4:	2005      	movs	r0, #5
 80011e6:	f7ff fea9 	bl	8000f3c <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x06); 		//TX_PWR:0dBm, Datarate:1Mbps
 80011ea:	2106      	movs	r1, #6
 80011ec:	2006      	movs	r0, #6
 80011ee:	f7ff fea5 	bl	8000f3c <NRF24_WriteReg>

	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 80011f2:	2203      	movs	r2, #3
 80011f4:	490a      	ldr	r1, [pc, #40]	; (8001220 <NRF24_ini+0xa0>)
 80011f6:	2010      	movs	r0, #16
 80011f8:	f7ff ff26 	bl	8001048 <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS, TX_ADR_WIDTH);
 80011fc:	2203      	movs	r2, #3
 80011fe:	4908      	ldr	r1, [pc, #32]	; (8001220 <NRF24_ini+0xa0>)
 8001200:	200b      	movs	r0, #11
 8001202:	f7ff ff21 	bl	8001048 <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P1, TX_PLOAD_WIDTH);				 //Number of bytes in RX
 8001206:	2102      	movs	r1, #2
 8001208:	2012      	movs	r0, #18
 800120a:	f7ff fe97 	bl	8000f3c <NRF24_WriteReg>
	NRF24L01_RX_Mode();
 800120e:	f7ff ff91 	bl	8001134 <NRF24L01_RX_Mode>

	test_nrf();
 8001212:	f000 f807 	bl	8001224 <test_nrf>
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40020000 	.word	0x40020000
 8001220:	20000000 	.word	0x20000000

08001224 <test_nrf>:
//----------------------------------------------------------------------------------------
// Read config data from nrf registers
void test_nrf(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
	uint8_t dt_reg=0;
 800122a:	2300      	movs	r3, #0
 800122c:	71fb      	strb	r3, [r7, #7]

	HAL_Delay(1);
 800122e:	2001      	movs	r0, #1
 8001230:	f005 fbba 	bl	80069a8 <HAL_Delay>

	dt_reg = NRF24_ReadReg(CONFIG);			// 0x0B
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff fe49 	bl	8000ecc <NRF24_ReadReg>
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
	dt_reg = NRF24_ReadReg(EN_AA);			// 0x02
 800123e:	2001      	movs	r0, #1
 8001240:	f7ff fe44 	bl	8000ecc <NRF24_ReadReg>
 8001244:	4603      	mov	r3, r0
 8001246:	71fb      	strb	r3, [r7, #7]
	dt_reg = NRF24_ReadReg(EN_RXADDR); 		// 0x02
 8001248:	2002      	movs	r0, #2
 800124a:	f7ff fe3f 	bl	8000ecc <NRF24_ReadReg>
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
	dt_reg = NRF24_ReadReg(STATUS_NRF);		// 0x0E
 8001252:	2007      	movs	r0, #7
 8001254:	f7ff fe3a 	bl	8000ecc <NRF24_ReadReg>
 8001258:	4603      	mov	r3, r0
 800125a:	71fb      	strb	r3, [r7, #7]
	dt_reg = NRF24_ReadReg(RF_SETUP);		// 0x06
 800125c:	2006      	movs	r0, #6
 800125e:	f7ff fe35 	bl	8000ecc <NRF24_ReadReg>
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]

	NRF24_Read_Buf(TX_ADDR,buf1,3);
 8001266:	2203      	movs	r2, #3
 8001268:	4907      	ldr	r1, [pc, #28]	; (8001288 <test_nrf+0x64>)
 800126a:	2010      	movs	r0, #16
 800126c:	f7ff fec2 	bl	8000ff4 <NRF24_Read_Buf>
	NRF24_Read_Buf(RX_ADDR_P1,buf1,3);
 8001270:	2203      	movs	r2, #3
 8001272:	4905      	ldr	r1, [pc, #20]	; (8001288 <test_nrf+0x64>)
 8001274:	200b      	movs	r0, #11
 8001276:	f7ff febd 	bl	8000ff4 <NRF24_Read_Buf>

	dt_reg = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	71fb      	strb	r3, [r7, #7]
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000294 	.word	0x20000294

0800128c <nrf_communication_test>:



void nrf_communication_test(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	NRF24_ini();
 8001290:	f7ff ff76 	bl	8001180 <NRF24_ini>





}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}

08001298 <read_digits>:
#include <stdbool.h>


//----------------------------------------------------------------------------------------
void read_digits(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
	char digith = 0;;
 800129e:	2300      	movs	r3, #0
 80012a0:	71fb      	strb	r3, [r7, #7]

	digith = read_one_digit_from_keyboard();
 80012a2:	f000 f853 	bl	800134c <read_one_digit_from_keyboard>
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	if(digith == '#')						// Clean buffer
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b23      	cmp	r3, #35	; 0x23
 80012ae:	d10a      	bne.n	80012c6 <read_digits+0x2e>
	{
		memset(keyboard.keyboard_digits_buffer, '\0', sizeof(keyboard.keyboard_digits_buffer));
 80012b0:	221e      	movs	r2, #30
 80012b2:	2100      	movs	r1, #0
 80012b4:	4824      	ldr	r0, [pc, #144]	; (8001348 <read_digits+0xb0>)
 80012b6:	f00f fb6f 	bl	8010998 <memset>
		keyboard.read_digits_position = 0;
 80012ba:	4b23      	ldr	r3, [pc, #140]	; (8001348 <read_digits+0xb0>)
 80012bc:	2200      	movs	r2, #0
 80012be:	625a      	str	r2, [r3, #36]	; 0x24
		keyboard.read_one_digit_status = false;
 80012c0:	4b21      	ldr	r3, [pc, #132]	; (8001348 <read_digits+0xb0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	77da      	strb	r2, [r3, #31]
	}
	if(digith == '*')						// If pressed enter
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b2a      	cmp	r3, #42	; 0x2a
 80012ca:	d109      	bne.n	80012e0 <read_digits+0x48>
	{
		keyboard.all_digits_was_read = true;
 80012cc:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <read_digits+0xb0>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	f883 2020 	strb.w	r2, [r3, #32]
		keyboard.read_one_digit_status = false;
 80012d4:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <read_digits+0xb0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	77da      	strb	r2, [r3, #31]
		keyboard.read_digits_position = 0;
 80012da:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <read_digits+0xb0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if((digith != '\0') && (digith != '#')&& (digith != '*'))
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d028      	beq.n	8001338 <read_digits+0xa0>
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	2b23      	cmp	r3, #35	; 0x23
 80012ea:	d025      	beq.n	8001338 <read_digits+0xa0>
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	2b2a      	cmp	r3, #42	; 0x2a
 80012f0:	d022      	beq.n	8001338 <read_digits+0xa0>
	{
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <read_digits+0xb0>)
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f6:	4a14      	ldr	r2, [pc, #80]	; (8001348 <read_digits+0xb0>)
 80012f8:	7f92      	ldrb	r2, [r2, #30]
 80012fa:	4293      	cmp	r3, r2
 80012fc:	dc11      	bgt.n	8001322 <read_digits+0x8a>
		{
			keyboard.keyboard_digits_buffer[keyboard.read_digits_position] = digith;
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <read_digits+0xb0>)
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	4911      	ldr	r1, [pc, #68]	; (8001348 <read_digits+0xb0>)
 8001304:	79fa      	ldrb	r2, [r7, #7]
 8001306:	54ca      	strb	r2, [r1, r3]
			keyboard.read_digits_position++;
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <read_digits+0xb0>)
 800130a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130c:	3301      	adds	r3, #1
 800130e:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <read_digits+0xb0>)
 8001310:	6253      	str	r3, [r2, #36]	; 0x24
			keyboard.all_digits_was_read = false;
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <read_digits+0xb0>)
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = true;
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <read_digits+0xb0>)
 800131c:	2201      	movs	r2, #1
 800131e:	77da      	strb	r2, [r3, #31]
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8001320:	e00e      	b.n	8001340 <read_digits+0xa8>
		}
		else								// If entered all digits
		{
			keyboard.all_digits_was_read = true;
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <read_digits+0xb0>)
 8001324:	2201      	movs	r2, #1
 8001326:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = false;
 800132a:	4b07      	ldr	r3, [pc, #28]	; (8001348 <read_digits+0xb0>)
 800132c:	2200      	movs	r2, #0
 800132e:	77da      	strb	r2, [r3, #31]
			keyboard.read_digits_position = 0;
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <read_digits+0xb0>)
 8001332:	2200      	movs	r2, #0
 8001334:	625a      	str	r2, [r3, #36]	; 0x24
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8001336:	e003      	b.n	8001340 <read_digits+0xa8>
		}
	}
	else									// If didn't enter any key
	{
		keyboard.read_one_digit_status = false;
 8001338:	4b03      	ldr	r3, [pc, #12]	; (8001348 <read_digits+0xb0>)
 800133a:	2200      	movs	r2, #0
 800133c:	77da      	strb	r2, [r3, #31]
	}
}
 800133e:	bf00      	nop
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200002c0 	.word	0x200002c0

0800134c <read_one_digit_from_keyboard>:

//----------------------------------------------------------------------------------------
char read_one_digit_from_keyboard(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
	char digit = '\0';
 8001352:	2300      	movs	r3, #0
 8001354:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800135c:	48cf      	ldr	r0, [pc, #828]	; (800169c <read_one_digit_from_keyboard+0x350>)
 800135e:	f005 fe0d 	bl	8006f7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001368:	48cc      	ldr	r0, [pc, #816]	; (800169c <read_one_digit_from_keyboard+0x350>)
 800136a:	f005 fe07 	bl	8006f7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001374:	48c9      	ldr	r0, [pc, #804]	; (800169c <read_one_digit_from_keyboard+0x350>)
 8001376:	f005 fe01 	bl	8006f7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001380:	48c6      	ldr	r0, [pc, #792]	; (800169c <read_one_digit_from_keyboard+0x350>)
 8001382:	f005 fdfb 	bl	8006f7c <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8001386:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800138a:	48c5      	ldr	r0, [pc, #788]	; (80016a0 <read_one_digit_from_keyboard+0x354>)
 800138c:	f005 fdde 	bl	8006f4c <HAL_GPIO_ReadPin>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d169      	bne.n	800146a <read_one_digit_from_keyboard+0x11e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800139c:	48bf      	ldr	r0, [pc, #764]	; (800169c <read_one_digit_from_keyboard+0x350>)
 800139e:	f005 fded 	bl	8006f7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80013a2:	2201      	movs	r2, #1
 80013a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013a8:	48bc      	ldr	r0, [pc, #752]	; (800169c <read_one_digit_from_keyboard+0x350>)
 80013aa:	f005 fde7 	bl	8006f7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80013ae:	2201      	movs	r2, #1
 80013b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b4:	48b9      	ldr	r0, [pc, #740]	; (800169c <read_one_digit_from_keyboard+0x350>)
 80013b6:	f005 fde1 	bl	8006f7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80013ba:	2201      	movs	r2, #1
 80013bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c0:	48b6      	ldr	r0, [pc, #728]	; (800169c <read_one_digit_from_keyboard+0x350>)
 80013c2:	f005 fddb 	bl	8006f7c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80013c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ca:	48b5      	ldr	r0, [pc, #724]	; (80016a0 <read_one_digit_from_keyboard+0x354>)
 80013cc:	f005 fdbe 	bl	8006f4c <HAL_GPIO_ReadPin>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <read_one_digit_from_keyboard+0x8e>
		{
			digit = '1';
 80013d6:	2331      	movs	r3, #49	; 0x31
 80013d8:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 80013da:	2201      	movs	r2, #1
 80013dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013e0:	48ae      	ldr	r0, [pc, #696]	; (800169c <read_one_digit_from_keyboard+0x350>)
 80013e2:	f005 fdcb 	bl	8006f7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ec:	48ab      	ldr	r0, [pc, #684]	; (800169c <read_one_digit_from_keyboard+0x350>)
 80013ee:	f005 fdc5 	bl	8006f7c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 80013f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013f6:	48aa      	ldr	r0, [pc, #680]	; (80016a0 <read_one_digit_from_keyboard+0x354>)
 80013f8:	f005 fda8 	bl	8006f4c <HAL_GPIO_ReadPin>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <read_one_digit_from_keyboard+0xba>
		{
			digit = '4';
 8001402:	2334      	movs	r3, #52	; 0x34
 8001404:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8001406:	2201      	movs	r2, #1
 8001408:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800140c:	48a3      	ldr	r0, [pc, #652]	; (800169c <read_one_digit_from_keyboard+0x350>)
 800140e:	f005 fdb5 	bl	8006f7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001418:	48a0      	ldr	r0, [pc, #640]	; (800169c <read_one_digit_from_keyboard+0x350>)
 800141a:	f005 fdaf 	bl	8006f7c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800141e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001422:	489f      	ldr	r0, [pc, #636]	; (80016a0 <read_one_digit_from_keyboard+0x354>)
 8001424:	f005 fd92 	bl	8006f4c <HAL_GPIO_ReadPin>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <read_one_digit_from_keyboard+0xe6>
		{
			digit =  '7';
 800142e:	2337      	movs	r3, #55	; 0x37
 8001430:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001432:	2201      	movs	r2, #1
 8001434:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001438:	4898      	ldr	r0, [pc, #608]	; (800169c <read_one_digit_from_keyboard+0x350>)
 800143a:	f005 fd9f 	bl	8006f7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001444:	4895      	ldr	r0, [pc, #596]	; (800169c <read_one_digit_from_keyboard+0x350>)
 8001446:	f005 fd99 	bl	8006f7c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800144a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800144e:	4894      	ldr	r0, [pc, #592]	; (80016a0 <read_one_digit_from_keyboard+0x354>)
 8001450:	f005 fd7c 	bl	8006f4c <HAL_GPIO_ReadPin>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <read_one_digit_from_keyboard+0x112>
		{
			digit =  '*';
 800145a:	232a      	movs	r3, #42	; 0x2a
 800145c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800145e:	2201      	movs	r2, #1
 8001460:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001464:	488d      	ldr	r0, [pc, #564]	; (800169c <read_one_digit_from_keyboard+0x350>)
 8001466:	f005 fd89 	bl	8006f7c <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001470:	488a      	ldr	r0, [pc, #552]	; (800169c <read_one_digit_from_keyboard+0x350>)
 8001472:	f005 fd83 	bl	8006f7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800147c:	4887      	ldr	r0, [pc, #540]	; (800169c <read_one_digit_from_keyboard+0x350>)
 800147e:	f005 fd7d 	bl	8006f7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001488:	4884      	ldr	r0, [pc, #528]	; (800169c <read_one_digit_from_keyboard+0x350>)
 800148a:	f005 fd77 	bl	8006f7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001494:	4881      	ldr	r0, [pc, #516]	; (800169c <read_one_digit_from_keyboard+0x350>)
 8001496:	f005 fd71 	bl	8006f7c <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 800149a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800149e:	4880      	ldr	r0, [pc, #512]	; (80016a0 <read_one_digit_from_keyboard+0x354>)
 80014a0:	f005 fd54 	bl	8006f4c <HAL_GPIO_ReadPin>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d169      	bne.n	800157e <read_one_digit_from_keyboard+0x232>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014b0:	487a      	ldr	r0, [pc, #488]	; (800169c <read_one_digit_from_keyboard+0x350>)
 80014b2:	f005 fd63 	bl	8006f7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80014b6:	2201      	movs	r2, #1
 80014b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014bc:	4877      	ldr	r0, [pc, #476]	; (800169c <read_one_digit_from_keyboard+0x350>)
 80014be:	f005 fd5d 	bl	8006f7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80014c2:	2201      	movs	r2, #1
 80014c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014c8:	4874      	ldr	r0, [pc, #464]	; (800169c <read_one_digit_from_keyboard+0x350>)
 80014ca:	f005 fd57 	bl	8006f7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80014ce:	2201      	movs	r2, #1
 80014d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d4:	4871      	ldr	r0, [pc, #452]	; (800169c <read_one_digit_from_keyboard+0x350>)
 80014d6:	f005 fd51 	bl	8006f7c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80014da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014de:	4870      	ldr	r0, [pc, #448]	; (80016a0 <read_one_digit_from_keyboard+0x354>)
 80014e0:	f005 fd34 	bl	8006f4c <HAL_GPIO_ReadPin>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <read_one_digit_from_keyboard+0x1a2>
		{
			digit =  '2';
 80014ea:	2332      	movs	r3, #50	; 0x32
 80014ec:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 80014ee:	2201      	movs	r2, #1
 80014f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014f4:	4869      	ldr	r0, [pc, #420]	; (800169c <read_one_digit_from_keyboard+0x350>)
 80014f6:	f005 fd41 	bl	8006f7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001500:	4866      	ldr	r0, [pc, #408]	; (800169c <read_one_digit_from_keyboard+0x350>)
 8001502:	f005 fd3b 	bl	8006f7c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001506:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800150a:	4865      	ldr	r0, [pc, #404]	; (80016a0 <read_one_digit_from_keyboard+0x354>)
 800150c:	f005 fd1e 	bl	8006f4c <HAL_GPIO_ReadPin>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <read_one_digit_from_keyboard+0x1ce>
		{
			digit =  '5';
 8001516:	2335      	movs	r3, #53	; 0x35
 8001518:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800151a:	2201      	movs	r2, #1
 800151c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001520:	485e      	ldr	r0, [pc, #376]	; (800169c <read_one_digit_from_keyboard+0x350>)
 8001522:	f005 fd2b 	bl	8006f7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	f44f 7100 	mov.w	r1, #512	; 0x200
 800152c:	485b      	ldr	r0, [pc, #364]	; (800169c <read_one_digit_from_keyboard+0x350>)
 800152e:	f005 fd25 	bl	8006f7c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001532:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001536:	485a      	ldr	r0, [pc, #360]	; (80016a0 <read_one_digit_from_keyboard+0x354>)
 8001538:	f005 fd08 	bl	8006f4c <HAL_GPIO_ReadPin>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <read_one_digit_from_keyboard+0x1fa>
		{
			digit = '8';
 8001542:	2338      	movs	r3, #56	; 0x38
 8001544:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001546:	2201      	movs	r2, #1
 8001548:	f44f 7100 	mov.w	r1, #512	; 0x200
 800154c:	4853      	ldr	r0, [pc, #332]	; (800169c <read_one_digit_from_keyboard+0x350>)
 800154e:	f005 fd15 	bl	8006f7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001558:	4850      	ldr	r0, [pc, #320]	; (800169c <read_one_digit_from_keyboard+0x350>)
 800155a:	f005 fd0f 	bl	8006f7c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800155e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001562:	484f      	ldr	r0, [pc, #316]	; (80016a0 <read_one_digit_from_keyboard+0x354>)
 8001564:	f005 fcf2 	bl	8006f4c <HAL_GPIO_ReadPin>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <read_one_digit_from_keyboard+0x226>
		{
			digit = '0';
 800156e:	2330      	movs	r3, #48	; 0x30
 8001570:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001572:	2201      	movs	r2, #1
 8001574:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001578:	4848      	ldr	r0, [pc, #288]	; (800169c <read_one_digit_from_keyboard+0x350>)
 800157a:	f005 fcff 	bl	8006f7c <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800157e:	2200      	movs	r2, #0
 8001580:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001584:	4845      	ldr	r0, [pc, #276]	; (800169c <read_one_digit_from_keyboard+0x350>)
 8001586:	f005 fcf9 	bl	8006f7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001590:	4842      	ldr	r0, [pc, #264]	; (800169c <read_one_digit_from_keyboard+0x350>)
 8001592:	f005 fcf3 	bl	8006f7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 7100 	mov.w	r1, #512	; 0x200
 800159c:	483f      	ldr	r0, [pc, #252]	; (800169c <read_one_digit_from_keyboard+0x350>)
 800159e:	f005 fced 	bl	8006f7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015a8:	483c      	ldr	r0, [pc, #240]	; (800169c <read_one_digit_from_keyboard+0x350>)
 80015aa:	f005 fce7 	bl	8006f7c <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №   // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 80015ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015b2:	483c      	ldr	r0, [pc, #240]	; (80016a4 <read_one_digit_from_keyboard+0x358>)
 80015b4:	f005 fcca 	bl	8006f4c <HAL_GPIO_ReadPin>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d169      	bne.n	8001692 <read_one_digit_from_keyboard+0x346>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015c4:	4835      	ldr	r0, [pc, #212]	; (800169c <read_one_digit_from_keyboard+0x350>)
 80015c6:	f005 fcd9 	bl	8006f7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80015ca:	2201      	movs	r2, #1
 80015cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015d0:	4832      	ldr	r0, [pc, #200]	; (800169c <read_one_digit_from_keyboard+0x350>)
 80015d2:	f005 fcd3 	bl	8006f7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80015d6:	2201      	movs	r2, #1
 80015d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015dc:	482f      	ldr	r0, [pc, #188]	; (800169c <read_one_digit_from_keyboard+0x350>)
 80015de:	f005 fccd 	bl	8006f7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80015e2:	2201      	movs	r2, #1
 80015e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e8:	482c      	ldr	r0, [pc, #176]	; (800169c <read_one_digit_from_keyboard+0x350>)
 80015ea:	f005 fcc7 	bl	8006f7c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 80015ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015f2:	482c      	ldr	r0, [pc, #176]	; (80016a4 <read_one_digit_from_keyboard+0x358>)
 80015f4:	f005 fcaa 	bl	8006f4c <HAL_GPIO_ReadPin>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <read_one_digit_from_keyboard+0x2b6>
		{
			digit = '3';
 80015fe:	2333      	movs	r3, #51	; 0x33
 8001600:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8001602:	2201      	movs	r2, #1
 8001604:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001608:	4824      	ldr	r0, [pc, #144]	; (800169c <read_one_digit_from_keyboard+0x350>)
 800160a:	f005 fcb7 	bl	8006f7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001614:	4821      	ldr	r0, [pc, #132]	; (800169c <read_one_digit_from_keyboard+0x350>)
 8001616:	f005 fcb1 	bl	8006f7c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800161a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800161e:	4821      	ldr	r0, [pc, #132]	; (80016a4 <read_one_digit_from_keyboard+0x358>)
 8001620:	f005 fc94 	bl	8006f4c <HAL_GPIO_ReadPin>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <read_one_digit_from_keyboard+0x2e2>
		{
			digit = '6';
 800162a:	2336      	movs	r3, #54	; 0x36
 800162c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800162e:	2201      	movs	r2, #1
 8001630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001634:	4819      	ldr	r0, [pc, #100]	; (800169c <read_one_digit_from_keyboard+0x350>)
 8001636:	f005 fca1 	bl	8006f7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001640:	4816      	ldr	r0, [pc, #88]	; (800169c <read_one_digit_from_keyboard+0x350>)
 8001642:	f005 fc9b 	bl	8006f7c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001646:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800164a:	4816      	ldr	r0, [pc, #88]	; (80016a4 <read_one_digit_from_keyboard+0x358>)
 800164c:	f005 fc7e 	bl	8006f4c <HAL_GPIO_ReadPin>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <read_one_digit_from_keyboard+0x30e>
		{
			digit = '9';
 8001656:	2339      	movs	r3, #57	; 0x39
 8001658:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800165a:	2201      	movs	r2, #1
 800165c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001660:	480e      	ldr	r0, [pc, #56]	; (800169c <read_one_digit_from_keyboard+0x350>)
 8001662:	f005 fc8b 	bl	8006f7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800166c:	480b      	ldr	r0, [pc, #44]	; (800169c <read_one_digit_from_keyboard+0x350>)
 800166e:	f005 fc85 	bl	8006f7c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOE, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001672:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001676:	480b      	ldr	r0, [pc, #44]	; (80016a4 <read_one_digit_from_keyboard+0x358>)
 8001678:	f005 fc68 	bl	8006f4c <HAL_GPIO_ReadPin>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <read_one_digit_from_keyboard+0x33a>
		{
			digit = '#';
 8001682:	2323      	movs	r3, #35	; 0x23
 8001684:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001686:	2201      	movs	r2, #1
 8001688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800168c:	4803      	ldr	r0, [pc, #12]	; (800169c <read_one_digit_from_keyboard+0x350>)
 800168e:	f005 fc75 	bl	8006f7c <HAL_GPIO_WritePin>
	}
	return digit;
 8001692:	79fb      	ldrb	r3, [r7, #7]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40020c00 	.word	0x40020c00
 80016a0:	40020400 	.word	0x40020400
 80016a4:	40021000 	.word	0x40021000

080016a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ae:	f005 f909 	bl	80068c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b2:	f000 f845 	bl	8001740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016b6:	f000 faf5 	bl	8001ca4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80016ba:	f000 f96d 	bl	8001998 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80016be:	f00e fe41 	bl	8010344 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80016c2:	f000 fa2d 	bl	8001b20 <MX_TIM2_Init>
  MX_SPI2_Init();
 80016c6:	f000 f99d 	bl	8001a04 <MX_SPI2_Init>
  MX_RNG_Init();
 80016ca:	f000 f951 	bl	8001970 <MX_RNG_Init>
  MX_TIM3_Init();
 80016ce:	f000 fa75 	bl	8001bbc <MX_TIM3_Init>
  MX_TIM1_Init();
 80016d2:	f000 f9cd 	bl	8001a70 <MX_TIM1_Init>
  MX_I2C3_Init();
 80016d6:	f000 f8ef 	bl	80018b8 <MX_I2C3_Init>
  MX_I2C2_Init();
 80016da:	f000 f8bf 	bl	800185c <MX_I2C2_Init>
  MX_I2S3_Init();
 80016de:	f000 f919 	bl	8001914 <MX_I2S3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80016e2:	f000 f8af 	bl	8001844 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 80016e6:	f001 fa79 	bl	8002bdc <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 80016ea:	2000      	movs	r0, #0
 80016ec:	f001 fc1c 	bl	8002f28 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 80016f0:	2003      	movs	r0, #3
 80016f2:	f001 fa15 	bl	8002b20 <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 80016f6:	2000      	movs	r0, #0
 80016f8:	f001 fc16 	bl	8002f28 <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 80016fc:	2364      	movs	r3, #100	; 0x64
 80016fe:	607b      	str	r3, [r7, #4]
  speed_test_LCD(number_of_tests);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f002 fadd 	bl	8003cc0 <speed_test_LCD>

  ILI9341_Fill_Screen(BLACK);
 8001706:	2000      	movs	r0, #0
 8001708:	f001 fc0e 	bl	8002f28 <ILI9341_Fill_Screen>

  // Start scan digits ///////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);			// Start read digits
 800170c:	480a      	ldr	r0, [pc, #40]	; (8001738 <main+0x90>)
 800170e:	f00a fedf 	bl	800c4d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001712:	2100      	movs	r1, #0
 8001714:	4808      	ldr	r0, [pc, #32]	; (8001738 <main+0x90>)
 8001716:	f00a ff4b 	bl	800c5b0 <HAL_TIM_OC_Start_IT>
  keyboard.how_meny_digits_must_be_written = 10;
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <main+0x94>)
 800171c:	220a      	movs	r2, #10
 800171e:	779a      	strb	r2, [r3, #30]
  // Encoder /////////////////////////////////////////
//  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
//  int32_t prevCounter = 0;
  ////////////////////////////////////////////////////

  detect_all_sensors_and_init();			// Detect all devices which connected to i2c2 and i2c3
 8001720:	f003 fdb4 	bl	800528c <detect_all_sensors_and_init>
  measure_sensors();
 8001724:	f003 fdda 	bl	80052dc <measure_sensors>

  //NRF24_ini();
  nrf_communication_test();
 8001728:	f7ff fdb0 	bl	800128c <nrf_communication_test>
	  /////////////////////////////////////////////////////////////////


	  //I2C_3_scaner();

	 menu();
 800172c:	f001 fd46 	bl	80031bc <menu>
//	  HAL_TIM_Base_Stop_IT(&htim3);				// Stop timer measure
//	  ARR_REG = TIM3-> CNT;


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001730:	f00e fe2e 	bl	8010390 <MX_USB_HOST_Process>
	 menu();
 8001734:	e7fa      	b.n	800172c <main+0x84>
 8001736:	bf00      	nop
 8001738:	200003e8 	.word	0x200003e8
 800173c:	200002c0 	.word	0x200002c0

08001740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b098      	sub	sp, #96	; 0x60
 8001744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001746:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800174a:	2230      	movs	r2, #48	; 0x30
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f00f f922 	bl	8010998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001754:	f107 031c 	add.w	r3, r7, #28
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	4b31      	ldr	r3, [pc, #196]	; (800183c <SystemClock_Config+0xfc>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	4a30      	ldr	r2, [pc, #192]	; (800183c <SystemClock_Config+0xfc>)
 800177c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001780:	6413      	str	r3, [r2, #64]	; 0x40
 8001782:	4b2e      	ldr	r3, [pc, #184]	; (800183c <SystemClock_Config+0xfc>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	4b2b      	ldr	r3, [pc, #172]	; (8001840 <SystemClock_Config+0x100>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a2a      	ldr	r2, [pc, #168]	; (8001840 <SystemClock_Config+0x100>)
 8001798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	4b28      	ldr	r3, [pc, #160]	; (8001840 <SystemClock_Config+0x100>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017aa:	2301      	movs	r3, #1
 80017ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b4:	2302      	movs	r3, #2
 80017b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017be:	2308      	movs	r3, #8
 80017c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017c2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80017c6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017c8:	2302      	movs	r3, #2
 80017ca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017cc:	2307      	movs	r3, #7
 80017ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017d4:	4618      	mov	r0, r3
 80017d6:	f009 fa55 	bl	800ac84 <HAL_RCC_OscConfig>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80017e0:	f000 fc0c 	bl	8001ffc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e4:	230f      	movs	r3, #15
 80017e6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017e8:	2302      	movs	r3, #2
 80017ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ec:	2300      	movs	r3, #0
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017fc:	f107 031c 	add.w	r3, r7, #28
 8001800:	2105      	movs	r1, #5
 8001802:	4618      	mov	r0, r3
 8001804:	f009 fcb6 	bl	800b174 <HAL_RCC_ClockConfig>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800180e:	f000 fbf5 	bl	8001ffc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001812:	2301      	movs	r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001816:	23c0      	movs	r3, #192	; 0xc0
 8001818:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800181a:	2302      	movs	r3, #2
 800181c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800181e:	f107 030c 	add.w	r3, r7, #12
 8001822:	4618      	mov	r0, r3
 8001824:	f009 fe8e 	bl	800b544 <HAL_RCCEx_PeriphCLKConfig>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800182e:	f000 fbe5 	bl	8001ffc <Error_Handler>
  }
}
 8001832:	bf00      	nop
 8001834:	3760      	adds	r7, #96	; 0x60
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800
 8001840:	40007000 	.word	0x40007000

08001844 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001848:	2200      	movs	r2, #0
 800184a:	2100      	movs	r1, #0
 800184c:	201c      	movs	r0, #28
 800184e:	f005 f9aa 	bl	8006ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001852:	201c      	movs	r0, #28
 8001854:	f005 f9c3 	bl	8006bde <HAL_NVIC_EnableIRQ>
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}

0800185c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <MX_I2C2_Init+0x50>)
 8001862:	4a13      	ldr	r2, [pc, #76]	; (80018b0 <MX_I2C2_Init+0x54>)
 8001864:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <MX_I2C2_Init+0x50>)
 8001868:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <MX_I2C2_Init+0x58>)
 800186a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <MX_I2C2_Init+0x50>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <MX_I2C2_Init+0x50>)
 8001874:	2200      	movs	r2, #0
 8001876:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <MX_I2C2_Init+0x50>)
 800187a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800187e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001880:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <MX_I2C2_Init+0x50>)
 8001882:	2200      	movs	r2, #0
 8001884:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <MX_I2C2_Init+0x50>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800188c:	4b07      	ldr	r3, [pc, #28]	; (80018ac <MX_I2C2_Init+0x50>)
 800188e:	2200      	movs	r2, #0
 8001890:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <MX_I2C2_Init+0x50>)
 8001894:	2200      	movs	r2, #0
 8001896:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001898:	4804      	ldr	r0, [pc, #16]	; (80018ac <MX_I2C2_Init+0x50>)
 800189a:	f007 f91f 	bl	8008adc <HAL_I2C_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80018a4:	f000 fbaa 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000394 	.word	0x20000394
 80018b0:	40005800 	.word	0x40005800
 80018b4:	000186a0 	.word	0x000186a0

080018b8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <MX_I2C3_Init+0x50>)
 80018be:	4a13      	ldr	r2, [pc, #76]	; (800190c <MX_I2C3_Init+0x54>)
 80018c0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <MX_I2C3_Init+0x50>)
 80018c4:	4a12      	ldr	r2, [pc, #72]	; (8001910 <MX_I2C3_Init+0x58>)
 80018c6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <MX_I2C3_Init+0x50>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <MX_I2C3_Init+0x50>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <MX_I2C3_Init+0x50>)
 80018d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018da:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018dc:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <MX_I2C3_Init+0x50>)
 80018de:	2200      	movs	r2, #0
 80018e0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <MX_I2C3_Init+0x50>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018e8:	4b07      	ldr	r3, [pc, #28]	; (8001908 <MX_I2C3_Init+0x50>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <MX_I2C3_Init+0x50>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80018f4:	4804      	ldr	r0, [pc, #16]	; (8001908 <MX_I2C3_Init+0x50>)
 80018f6:	f007 f8f1 	bl	8008adc <HAL_I2C_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001900:	f000 fb7c 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	200002e8 	.word	0x200002e8
 800190c:	40005c00 	.word	0x40005c00
 8001910:	000186a0 	.word	0x000186a0

08001914 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001918:	4b13      	ldr	r3, [pc, #76]	; (8001968 <MX_I2S3_Init+0x54>)
 800191a:	4a14      	ldr	r2, [pc, #80]	; (800196c <MX_I2S3_Init+0x58>)
 800191c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <MX_I2S3_Init+0x54>)
 8001920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001924:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <MX_I2S3_Init+0x54>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800192c:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <MX_I2S3_Init+0x54>)
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001932:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <MX_I2S3_Init+0x54>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <MX_I2S3_Init+0x54>)
 800193a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800193e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <MX_I2S3_Init+0x54>)
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <MX_I2S3_Init+0x54>)
 8001948:	2200      	movs	r2, #0
 800194a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <MX_I2S3_Init+0x54>)
 800194e:	2201      	movs	r2, #1
 8001950:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001952:	4805      	ldr	r0, [pc, #20]	; (8001968 <MX_I2S3_Init+0x54>)
 8001954:	f008 fcf6 	bl	800a344 <HAL_I2S_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800195e:	f000 fb4d 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000528 	.word	0x20000528
 800196c:	40003c00 	.word	0x40003c00

08001970 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <MX_RNG_Init+0x20>)
 8001976:	4a07      	ldr	r2, [pc, #28]	; (8001994 <MX_RNG_Init+0x24>)
 8001978:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800197a:	4805      	ldr	r0, [pc, #20]	; (8001990 <MX_RNG_Init+0x20>)
 800197c:	f009 ff22 	bl	800b7c4 <HAL_RNG_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001986:	f000 fb39 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000478 	.word	0x20000478
 8001994:	50060800 	.word	0x50060800

08001998 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800199c:	4b17      	ldr	r3, [pc, #92]	; (80019fc <MX_SPI1_Init+0x64>)
 800199e:	4a18      	ldr	r2, [pc, #96]	; (8001a00 <MX_SPI1_Init+0x68>)
 80019a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019a2:	4b16      	ldr	r3, [pc, #88]	; (80019fc <MX_SPI1_Init+0x64>)
 80019a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019aa:	4b14      	ldr	r3, [pc, #80]	; (80019fc <MX_SPI1_Init+0x64>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <MX_SPI1_Init+0x64>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <MX_SPI1_Init+0x64>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019bc:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <MX_SPI1_Init+0x64>)
 80019be:	2200      	movs	r2, #0
 80019c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019c2:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <MX_SPI1_Init+0x64>)
 80019c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80019ca:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <MX_SPI1_Init+0x64>)
 80019cc:	2218      	movs	r2, #24
 80019ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019d0:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <MX_SPI1_Init+0x64>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019d6:	4b09      	ldr	r3, [pc, #36]	; (80019fc <MX_SPI1_Init+0x64>)
 80019d8:	2200      	movs	r2, #0
 80019da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <MX_SPI1_Init+0x64>)
 80019de:	2200      	movs	r2, #0
 80019e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <MX_SPI1_Init+0x64>)
 80019e4:	220a      	movs	r2, #10
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019e8:	4804      	ldr	r0, [pc, #16]	; (80019fc <MX_SPI1_Init+0x64>)
 80019ea:	f009 ff79 	bl	800b8e0 <HAL_SPI_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019f4:	f000 fb02 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000488 	.word	0x20000488
 8001a00:	40013000 	.word	0x40013000

08001a04 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a08:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <MX_SPI2_Init+0x64>)
 8001a0a:	4a18      	ldr	r2, [pc, #96]	; (8001a6c <MX_SPI2_Init+0x68>)
 8001a0c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a0e:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <MX_SPI2_Init+0x64>)
 8001a10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a14:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <MX_SPI2_Init+0x64>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <MX_SPI2_Init+0x64>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_SPI2_Init+0x64>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <MX_SPI2_Init+0x64>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_SPI2_Init+0x64>)
 8001a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a34:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_SPI2_Init+0x64>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <MX_SPI2_Init+0x64>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_SPI2_Init+0x64>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a48:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <MX_SPI2_Init+0x64>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_SPI2_Init+0x64>)
 8001a50:	220a      	movs	r2, #10
 8001a52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a54:	4804      	ldr	r0, [pc, #16]	; (8001a68 <MX_SPI2_Init+0x64>)
 8001a56:	f009 ff43 	bl	800b8e0 <HAL_SPI_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a60:	f000 facc 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	2000033c 	.word	0x2000033c
 8001a6c:	40003800 	.word	0x40003800

08001a70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08c      	sub	sp, #48	; 0x30
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	2224      	movs	r2, #36	; 0x24
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f00e ff8a 	bl	8010998 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a8c:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <MX_TIM1_Init+0xa8>)
 8001a8e:	4a23      	ldr	r2, [pc, #140]	; (8001b1c <MX_TIM1_Init+0xac>)
 8001a90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a92:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <MX_TIM1_Init+0xa8>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a98:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <MX_TIM1_Init+0xa8>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a9e:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <MX_TIM1_Init+0xa8>)
 8001aa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aa4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa6:	4b1c      	ldr	r3, [pc, #112]	; (8001b18 <MX_TIM1_Init+0xa8>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001aac:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <MX_TIM1_Init+0xa8>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab2:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <MX_TIM1_Init+0xa8>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	480d      	ldr	r0, [pc, #52]	; (8001b18 <MX_TIM1_Init+0xa8>)
 8001ae4:	f00a fecb 	bl	800c87e <HAL_TIM_Encoder_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001aee:	f000 fa85 	bl	8001ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	4619      	mov	r1, r3
 8001afe:	4806      	ldr	r0, [pc, #24]	; (8001b18 <MX_TIM1_Init+0xa8>)
 8001b00:	f00b fd30 	bl	800d564 <HAL_TIMEx_MasterConfigSynchronization>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001b0a:	f000 fa77 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b0e:	bf00      	nop
 8001b10:	3730      	adds	r7, #48	; 0x30
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000430 	.word	0x20000430
 8001b1c:	40010000 	.word	0x40010000

08001b20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b26:	f107 0308 	add.w	r3, r7, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b34:	463b      	mov	r3, r7
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b3c:	4b1e      	ldr	r3, [pc, #120]	; (8001bb8 <MX_TIM2_Init+0x98>)
 8001b3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8001b44:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <MX_TIM2_Init+0x98>)
 8001b46:	f240 3247 	movw	r2, #839	; 0x347
 8001b4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4c:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <MX_TIM2_Init+0x98>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001b52:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <MX_TIM2_Init+0x98>)
 8001b54:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5a:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <MX_TIM2_Init+0x98>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <MX_TIM2_Init+0x98>)
 8001b62:	2280      	movs	r2, #128	; 0x80
 8001b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b66:	4814      	ldr	r0, [pc, #80]	; (8001bb8 <MX_TIM2_Init+0x98>)
 8001b68:	f00a fc62 	bl	800c430 <HAL_TIM_Base_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b72:	f000 fa43 	bl	8001ffc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b7c:	f107 0308 	add.w	r3, r7, #8
 8001b80:	4619      	mov	r1, r3
 8001b82:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <MX_TIM2_Init+0x98>)
 8001b84:	f00b f8e8 	bl	800cd58 <HAL_TIM_ConfigClockSource>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b8e:	f000 fa35 	bl	8001ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001b92:	2310      	movs	r3, #16
 8001b94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b9a:	463b      	mov	r3, r7
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4806      	ldr	r0, [pc, #24]	; (8001bb8 <MX_TIM2_Init+0x98>)
 8001ba0:	f00b fce0 	bl	800d564 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001baa:	f000 fa27 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200004e0 	.word	0x200004e0

08001bbc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08e      	sub	sp, #56	; 0x38
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd0:	f107 0320 	add.w	r3, r7, #32
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
 8001be8:	615a      	str	r2, [r3, #20]
 8001bea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bec:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <MX_TIM3_Init+0xe0>)
 8001bee:	4a2c      	ldr	r2, [pc, #176]	; (8001ca0 <MX_TIM3_Init+0xe4>)
 8001bf0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <MX_TIM3_Init+0xe0>)
 8001bf4:	f640 0233 	movw	r2, #2099	; 0x833
 8001bf8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bfa:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <MX_TIM3_Init+0xe0>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001c00:	4b26      	ldr	r3, [pc, #152]	; (8001c9c <MX_TIM3_Init+0xe0>)
 8001c02:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c08:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <MX_TIM3_Init+0xe0>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c0e:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <MX_TIM3_Init+0xe0>)
 8001c10:	2280      	movs	r2, #128	; 0x80
 8001c12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c14:	4821      	ldr	r0, [pc, #132]	; (8001c9c <MX_TIM3_Init+0xe0>)
 8001c16:	f00a fc0b 	bl	800c430 <HAL_TIM_Base_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001c20:	f000 f9ec 	bl	8001ffc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c2e:	4619      	mov	r1, r3
 8001c30:	481a      	ldr	r0, [pc, #104]	; (8001c9c <MX_TIM3_Init+0xe0>)
 8001c32:	f00b f891 	bl	800cd58 <HAL_TIM_ConfigClockSource>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001c3c:	f000 f9de 	bl	8001ffc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c40:	4816      	ldr	r0, [pc, #88]	; (8001c9c <MX_TIM3_Init+0xe0>)
 8001c42:	f00a fdc3 	bl	800c7cc <HAL_TIM_PWM_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001c4c:	f000 f9d6 	bl	8001ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c50:	2300      	movs	r3, #0
 8001c52:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c58:	f107 0320 	add.w	r3, r7, #32
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	480f      	ldr	r0, [pc, #60]	; (8001c9c <MX_TIM3_Init+0xe0>)
 8001c60:	f00b fc80 	bl	800d564 <HAL_TIMEx_MasterConfigSynchronization>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c6a:	f000 f9c7 	bl	8001ffc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c6e:	2360      	movs	r3, #96	; 0x60
 8001c70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	2200      	movs	r2, #0
 8001c82:	4619      	mov	r1, r3
 8001c84:	4805      	ldr	r0, [pc, #20]	; (8001c9c <MX_TIM3_Init+0xe0>)
 8001c86:	f00a ffa9 	bl	800cbdc <HAL_TIM_PWM_ConfigChannel>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001c90:	f000 f9b4 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c94:	bf00      	nop
 8001c96:	3738      	adds	r7, #56	; 0x38
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	200003e8 	.word	0x200003e8
 8001ca0:	40000400 	.word	0x40000400

08001ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08c      	sub	sp, #48	; 0x30
 8001ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001caa:	f107 031c 	add.w	r3, r7, #28
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
 8001cb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
 8001cbe:	4bb6      	ldr	r3, [pc, #728]	; (8001f98 <MX_GPIO_Init+0x2f4>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4ab5      	ldr	r2, [pc, #724]	; (8001f98 <MX_GPIO_Init+0x2f4>)
 8001cc4:	f043 0310 	orr.w	r3, r3, #16
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4bb3      	ldr	r3, [pc, #716]	; (8001f98 <MX_GPIO_Init+0x2f4>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0310 	and.w	r3, r3, #16
 8001cd2:	61bb      	str	r3, [r7, #24]
 8001cd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	4baf      	ldr	r3, [pc, #700]	; (8001f98 <MX_GPIO_Init+0x2f4>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4aae      	ldr	r2, [pc, #696]	; (8001f98 <MX_GPIO_Init+0x2f4>)
 8001ce0:	f043 0304 	orr.w	r3, r3, #4
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4bac      	ldr	r3, [pc, #688]	; (8001f98 <MX_GPIO_Init+0x2f4>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	4ba8      	ldr	r3, [pc, #672]	; (8001f98 <MX_GPIO_Init+0x2f4>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4aa7      	ldr	r2, [pc, #668]	; (8001f98 <MX_GPIO_Init+0x2f4>)
 8001cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4ba5      	ldr	r3, [pc, #660]	; (8001f98 <MX_GPIO_Init+0x2f4>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	4ba1      	ldr	r3, [pc, #644]	; (8001f98 <MX_GPIO_Init+0x2f4>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4aa0      	ldr	r2, [pc, #640]	; (8001f98 <MX_GPIO_Init+0x2f4>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b9e      	ldr	r3, [pc, #632]	; (8001f98 <MX_GPIO_Init+0x2f4>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	4b9a      	ldr	r3, [pc, #616]	; (8001f98 <MX_GPIO_Init+0x2f4>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a99      	ldr	r2, [pc, #612]	; (8001f98 <MX_GPIO_Init+0x2f4>)
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b97      	ldr	r3, [pc, #604]	; (8001f98 <MX_GPIO_Init+0x2f4>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	4b93      	ldr	r3, [pc, #588]	; (8001f98 <MX_GPIO_Init+0x2f4>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a92      	ldr	r2, [pc, #584]	; (8001f98 <MX_GPIO_Init+0x2f4>)
 8001d50:	f043 0308 	orr.w	r3, r3, #8
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b90      	ldr	r3, [pc, #576]	; (8001f98 <MX_GPIO_Init+0x2f4>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	607b      	str	r3, [r7, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 8001d62:	2200      	movs	r2, #0
 8001d64:	217c      	movs	r1, #124	; 0x7c
 8001d66:	488d      	ldr	r0, [pc, #564]	; (8001f9c <MX_GPIO_Init+0x2f8>)
 8001d68:	f005 f908 	bl	8006f7c <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OTG_FS_PowerSwitchOn_Pin|CSN_nrf_Pin, GPIO_PIN_SET);
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	2111      	movs	r1, #17
 8001d70:	488b      	ldr	r0, [pc, #556]	; (8001fa0 <MX_GPIO_Init+0x2fc>)
 8001d72:	f005 f903 	bl	8006f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_nrf_GPIO_Port, CE_nrf_Pin, GPIO_PIN_RESET);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2108      	movs	r1, #8
 8001d7a:	488a      	ldr	r0, [pc, #552]	; (8001fa4 <MX_GPIO_Init+0x300>)
 8001d7c:	f005 f8fe 	bl	8006f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001d80:	2200      	movs	r2, #0
 8001d82:	f64f 7110 	movw	r1, #65296	; 0xff10
 8001d86:	4888      	ldr	r0, [pc, #544]	; (8001fa8 <MX_GPIO_Init+0x304>)
 8001d88:	f005 f8f8 	bl	8006f7c <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_mcroSD_Pin|CS_M25Q_Pin, GPIO_PIN_RESET);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8001d92:	4883      	ldr	r0, [pc, #524]	; (8001fa0 <MX_GPIO_Init+0x2fc>)
 8001d94:	f005 f8f2 	bl	8006f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001d9e:	4883      	ldr	r0, [pc, #524]	; (8001fac <MX_GPIO_Init+0x308>)
 8001da0:	f005 f8ec 	bl	8006f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 8001da4:	2374      	movs	r3, #116	; 0x74
 8001da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da8:	2301      	movs	r3, #1
 8001daa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db0:	2303      	movs	r3, #3
 8001db2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001db4:	f107 031c 	add.w	r3, r7, #28
 8001db8:	4619      	mov	r1, r3
 8001dba:	4878      	ldr	r0, [pc, #480]	; (8001f9c <MX_GPIO_Init+0x2f8>)
 8001dbc:	f004 ff2a 	bl	8006c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001dc0:	2308      	movs	r3, #8
 8001dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001dd0:	f107 031c 	add.w	r3, r7, #28
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4871      	ldr	r0, [pc, #452]	; (8001f9c <MX_GPIO_Init+0x2f8>)
 8001dd8:	f004 ff1c 	bl	8006c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_IRQ_Pin AM2302_Pin IRQ_nrf_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|AM2302_Pin|IRQ_nrf_Pin;
 8001ddc:	f242 0322 	movw	r3, #8226	; 0x2022
 8001de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de2:	2300      	movs	r3, #0
 8001de4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dea:	f107 031c 	add.w	r3, r7, #28
 8001dee:	4619      	mov	r1, r3
 8001df0:	486b      	ldr	r0, [pc, #428]	; (8001fa0 <MX_GPIO_Init+0x2fc>)
 8001df2:	f004 ff0f 	bl	8006c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_mcroSD_Pin CS_M25Q_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_mcroSD_Pin|CS_M25Q_Pin;
 8001df6:	f640 0341 	movw	r3, #2113	; 0x841
 8001dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e04:	2300      	movs	r3, #0
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e08:	f107 031c 	add.w	r3, r7, #28
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4864      	ldr	r0, [pc, #400]	; (8001fa0 <MX_GPIO_Init+0x2fc>)
 8001e10:	f004 ff00 	bl	8006c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001e14:	2308      	movs	r3, #8
 8001e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e24:	2305      	movs	r3, #5
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001e28:	f107 031c 	add.w	r3, r7, #28
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	485c      	ldr	r0, [pc, #368]	; (8001fa0 <MX_GPIO_Init+0x2fc>)
 8001e30:	f004 fef0 	bl	8006c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_nrf_Pin */
  GPIO_InitStruct.Pin = CE_nrf_Pin;
 8001e34:	2308      	movs	r3, #8
 8001e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e40:	2300      	movs	r3, #0
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CE_nrf_GPIO_Port, &GPIO_InitStruct);
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4856      	ldr	r0, [pc, #344]	; (8001fa4 <MX_GPIO_Init+0x300>)
 8001e4c:	f004 fee2 	bl	8006c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : CSN_nrf_Pin */
  GPIO_InitStruct.Pin = CSN_nrf_Pin;
 8001e50:	2310      	movs	r3, #16
 8001e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e54:	2301      	movs	r3, #1
 8001e56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CSN_nrf_GPIO_Port, &GPIO_InitStruct);
 8001e60:	f107 031c 	add.w	r3, r7, #28
 8001e64:	4619      	mov	r1, r3
 8001e66:	484e      	ldr	r0, [pc, #312]	; (8001fa0 <MX_GPIO_Init+0x2fc>)
 8001e68:	f004 fed4 	bl	8006c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e70:	2300      	movs	r3, #0
 8001e72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001e78:	f107 031c 	add.w	r3, r7, #28
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	484b      	ldr	r0, [pc, #300]	; (8001fac <MX_GPIO_Init+0x308>)
 8001e80:	f004 fec8 	bl	8006c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTION_SENSOR_9960_Pin */
  GPIO_InitStruct.Pin = MOTION_SENSOR_9960_Pin;
 8001e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e8a:	4b49      	ldr	r3, [pc, #292]	; (8001fb0 <MX_GPIO_Init+0x30c>)
 8001e8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MOTION_SENSOR_9960_GPIO_Port, &GPIO_InitStruct);
 8001e92:	f107 031c 	add.w	r3, r7, #28
 8001e96:	4619      	mov	r1, r3
 8001e98:	4840      	ldr	r0, [pc, #256]	; (8001f9c <MX_GPIO_Init+0x2f8>)
 8001e9a:	f004 febb 	bl	8006c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_3_Pin encoder_button_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_3_Pin|encoder_button_Pin;
 8001e9e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001ea2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eac:	f107 031c 	add.w	r3, r7, #28
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	483a      	ldr	r0, [pc, #232]	; (8001f9c <MX_GPIO_Init+0x2f8>)
 8001eb4:	f004 feae 	bl	8006c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 8001eb8:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec6:	f107 031c 	add.w	r3, r7, #28
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4837      	ldr	r0, [pc, #220]	; (8001fac <MX_GPIO_Init+0x308>)
 8001ece:	f004 fea1 	bl	8006c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001ed2:	f64f 7310 	movw	r3, #65296	; 0xff10
 8001ed6:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ee4:	f107 031c 	add.w	r3, r7, #28
 8001ee8:	4619      	mov	r1, r3
 8001eea:	482f      	ldr	r0, [pc, #188]	; (8001fa8 <MX_GPIO_Init+0x304>)
 8001eec:	f004 fe92 	bl	8006c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001ef0:	2320      	movs	r3, #32
 8001ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001efc:	f107 031c 	add.w	r3, r7, #28
 8001f00:	4619      	mov	r1, r3
 8001f02:	4829      	ldr	r0, [pc, #164]	; (8001fa8 <MX_GPIO_Init+0x304>)
 8001f04:	f004 fe86 	bl	8006c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f08:	2340      	movs	r3, #64	; 0x40
 8001f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f14:	2300      	movs	r3, #0
 8001f16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f18:	f107 031c 	add.w	r3, r7, #28
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4823      	ldr	r0, [pc, #140]	; (8001fac <MX_GPIO_Init+0x308>)
 8001f20:	f004 fe78 	bl	8006c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8001f24:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f32:	2303      	movs	r3, #3
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f36:	f107 031c 	add.w	r3, r7, #28
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	481b      	ldr	r0, [pc, #108]	; (8001fac <MX_GPIO_Init+0x308>)
 8001f3e:	f004 fe69 	bl	8006c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001f42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f48:	2312      	movs	r3, #18
 8001f4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f54:	2304      	movs	r3, #4
 8001f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8001f58:	f107 031c 	add.w	r3, r7, #28
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4813      	ldr	r0, [pc, #76]	; (8001fac <MX_GPIO_Init+0x308>)
 8001f60:	f004 fe58 	bl	8006c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8001f64:	2301      	movs	r3, #1
 8001f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8001f70:	f107 031c 	add.w	r3, r7, #28
 8001f74:	4619      	mov	r1, r3
 8001f76:	4809      	ldr	r0, [pc, #36]	; (8001f9c <MX_GPIO_Init+0x2f8>)
 8001f78:	f004 fe4c 	bl	8006c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <MX_GPIO_Init+0x310>)
 8001f82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001f88:	f107 031c 	add.w	r3, r7, #28
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4803      	ldr	r0, [pc, #12]	; (8001f9c <MX_GPIO_Init+0x2f8>)
 8001f90:	f004 fe40 	bl	8006c14 <HAL_GPIO_Init>
 8001f94:	e010      	b.n	8001fb8 <MX_GPIO_Init+0x314>
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40020800 	.word	0x40020800
 8001fa4:	40020000 	.word	0x40020000
 8001fa8:	40020c00 	.word	0x40020c00
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	10110000 	.word	0x10110000
 8001fb4:	10120000 	.word	0x10120000

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2100      	movs	r1, #0
 8001fbc:	2028      	movs	r0, #40	; 0x28
 8001fbe:	f004 fdf2 	bl	8006ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001fc2:	2028      	movs	r0, #40	; 0x28
 8001fc4:	f004 fe0b 	bl	8006bde <HAL_NVIC_EnableIRQ>

}
 8001fc8:	bf00      	nop
 8001fca:	3730      	adds	r7, #48	; 0x30
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == MOTION_SENSOR_9960_Pin)
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fe0:	d105      	bne.n	8001fee <HAL_GPIO_EXTI_Callback+0x1e>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fe8:	4803      	ldr	r0, [pc, #12]	; (8001ff8 <HAL_GPIO_EXTI_Callback+0x28>)
 8001fea:	f004 ffc7 	bl	8006f7c <HAL_GPIO_WritePin>
	}
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40020c00 	.word	0x40020c00

08001ffc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002000:	b672      	cpsid	i
}
 8002002:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002004:	e7fe      	b.n	8002004 <Error_Handler+0x8>
	...

08002008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	4b14      	ldr	r3, [pc, #80]	; (8002064 <HAL_MspInit+0x5c>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	4a13      	ldr	r2, [pc, #76]	; (8002064 <HAL_MspInit+0x5c>)
 8002018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800201c:	6453      	str	r3, [r2, #68]	; 0x44
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_MspInit+0x5c>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	603b      	str	r3, [r7, #0]
 800202e:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <HAL_MspInit+0x5c>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a0c      	ldr	r2, [pc, #48]	; (8002064 <HAL_MspInit+0x5c>)
 8002034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <HAL_MspInit+0x5c>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002046:	2007      	movs	r0, #7
 8002048:	f004 fda2 	bl	8006b90 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800204c:	2200      	movs	r2, #0
 800204e:	2100      	movs	r1, #0
 8002050:	2005      	movs	r0, #5
 8002052:	f004 fda8 	bl	8006ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002056:	2005      	movs	r0, #5
 8002058:	f004 fdc1 	bl	8006bde <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40023800 	.word	0x40023800

08002068 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08c      	sub	sp, #48	; 0x30
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	f107 031c 	add.w	r3, r7, #28
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
 800207e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a42      	ldr	r2, [pc, #264]	; (8002190 <HAL_I2C_MspInit+0x128>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d12d      	bne.n	80020e6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	4b41      	ldr	r3, [pc, #260]	; (8002194 <HAL_I2C_MspInit+0x12c>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a40      	ldr	r2, [pc, #256]	; (8002194 <HAL_I2C_MspInit+0x12c>)
 8002094:	f043 0302 	orr.w	r3, r3, #2
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b3e      	ldr	r3, [pc, #248]	; (8002194 <HAL_I2C_MspInit+0x12c>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	61bb      	str	r3, [r7, #24]
 80020a4:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80020a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ac:	2312      	movs	r3, #18
 80020ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020b0:	2301      	movs	r3, #1
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b4:	2303      	movs	r3, #3
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80020b8:	2304      	movs	r3, #4
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020bc:	f107 031c 	add.w	r3, r7, #28
 80020c0:	4619      	mov	r1, r3
 80020c2:	4835      	ldr	r0, [pc, #212]	; (8002198 <HAL_I2C_MspInit+0x130>)
 80020c4:	f004 fda6 	bl	8006c14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	4b31      	ldr	r3, [pc, #196]	; (8002194 <HAL_I2C_MspInit+0x12c>)
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	4a30      	ldr	r2, [pc, #192]	; (8002194 <HAL_I2C_MspInit+0x12c>)
 80020d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020d6:	6413      	str	r3, [r2, #64]	; 0x40
 80020d8:	4b2e      	ldr	r3, [pc, #184]	; (8002194 <HAL_I2C_MspInit+0x12c>)
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80020e4:	e050      	b.n	8002188 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a2c      	ldr	r2, [pc, #176]	; (800219c <HAL_I2C_MspInit+0x134>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d14b      	bne.n	8002188 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f0:	2300      	movs	r3, #0
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	4b27      	ldr	r3, [pc, #156]	; (8002194 <HAL_I2C_MspInit+0x12c>)
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	4a26      	ldr	r2, [pc, #152]	; (8002194 <HAL_I2C_MspInit+0x12c>)
 80020fa:	f043 0304 	orr.w	r3, r3, #4
 80020fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002100:	4b24      	ldr	r3, [pc, #144]	; (8002194 <HAL_I2C_MspInit+0x12c>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	4b20      	ldr	r3, [pc, #128]	; (8002194 <HAL_I2C_MspInit+0x12c>)
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	4a1f      	ldr	r2, [pc, #124]	; (8002194 <HAL_I2C_MspInit+0x12c>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	6313      	str	r3, [r2, #48]	; 0x30
 800211c:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <HAL_I2C_MspInit+0x12c>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002128:	f44f 7300 	mov.w	r3, #512	; 0x200
 800212c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800212e:	2312      	movs	r3, #18
 8002130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002132:	2301      	movs	r3, #1
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002136:	2303      	movs	r3, #3
 8002138:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800213a:	2304      	movs	r3, #4
 800213c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800213e:	f107 031c 	add.w	r3, r7, #28
 8002142:	4619      	mov	r1, r3
 8002144:	4816      	ldr	r0, [pc, #88]	; (80021a0 <HAL_I2C_MspInit+0x138>)
 8002146:	f004 fd65 	bl	8006c14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800214a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800214e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002150:	2312      	movs	r3, #18
 8002152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002154:	2301      	movs	r3, #1
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002158:	2303      	movs	r3, #3
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800215c:	2304      	movs	r3, #4
 800215e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002160:	f107 031c 	add.w	r3, r7, #28
 8002164:	4619      	mov	r1, r3
 8002166:	480f      	ldr	r0, [pc, #60]	; (80021a4 <HAL_I2C_MspInit+0x13c>)
 8002168:	f004 fd54 	bl	8006c14 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_I2C_MspInit+0x12c>)
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	4a07      	ldr	r2, [pc, #28]	; (8002194 <HAL_I2C_MspInit+0x12c>)
 8002176:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800217a:	6413      	str	r3, [r2, #64]	; 0x40
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_I2C_MspInit+0x12c>)
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	68bb      	ldr	r3, [r7, #8]
}
 8002188:	bf00      	nop
 800218a:	3730      	adds	r7, #48	; 0x30
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40005800 	.word	0x40005800
 8002194:	40023800 	.word	0x40023800
 8002198:	40020400 	.word	0x40020400
 800219c:	40005c00 	.word	0x40005c00
 80021a0:	40020800 	.word	0x40020800
 80021a4:	40020000 	.word	0x40020000

080021a8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08c      	sub	sp, #48	; 0x30
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 031c 	add.w	r3, r7, #28
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a37      	ldr	r2, [pc, #220]	; (80022a4 <HAL_I2S_MspInit+0xfc>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d168      	bne.n	800229c <HAL_I2S_MspInit+0xf4>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
 80021ce:	4b36      	ldr	r3, [pc, #216]	; (80022a8 <HAL_I2S_MspInit+0x100>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	4a35      	ldr	r2, [pc, #212]	; (80022a8 <HAL_I2S_MspInit+0x100>)
 80021d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021d8:	6413      	str	r3, [r2, #64]	; 0x40
 80021da:	4b33      	ldr	r3, [pc, #204]	; (80022a8 <HAL_I2S_MspInit+0x100>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021e2:	61bb      	str	r3, [r7, #24]
 80021e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	4b2f      	ldr	r3, [pc, #188]	; (80022a8 <HAL_I2S_MspInit+0x100>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a2e      	ldr	r2, [pc, #184]	; (80022a8 <HAL_I2S_MspInit+0x100>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b2c      	ldr	r3, [pc, #176]	; (80022a8 <HAL_I2S_MspInit+0x100>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	4b28      	ldr	r3, [pc, #160]	; (80022a8 <HAL_I2S_MspInit+0x100>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4a27      	ldr	r2, [pc, #156]	; (80022a8 <HAL_I2S_MspInit+0x100>)
 800220c:	f043 0304 	orr.w	r3, r3, #4
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <HAL_I2S_MspInit+0x100>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <HAL_I2S_MspInit+0x100>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a20      	ldr	r2, [pc, #128]	; (80022a8 <HAL_I2S_MspInit+0x100>)
 8002228:	f043 0302 	orr.w	r3, r3, #2
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b1e      	ldr	r3, [pc, #120]	; (80022a8 <HAL_I2S_MspInit+0x100>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    PB4     ------> I2S3_ext_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800223a:	2310      	movs	r3, #16
 800223c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223e:	2302      	movs	r3, #2
 8002240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002246:	2300      	movs	r3, #0
 8002248:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800224a:	2306      	movs	r3, #6
 800224c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800224e:	f107 031c 	add.w	r3, r7, #28
 8002252:	4619      	mov	r1, r3
 8002254:	4815      	ldr	r0, [pc, #84]	; (80022ac <HAL_I2S_MspInit+0x104>)
 8002256:	f004 fcdd 	bl	8006c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 800225a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800225e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002260:	2302      	movs	r3, #2
 8002262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002268:	2300      	movs	r3, #0
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800226c:	2306      	movs	r3, #6
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002270:	f107 031c 	add.w	r3, r7, #28
 8002274:	4619      	mov	r1, r3
 8002276:	480e      	ldr	r0, [pc, #56]	; (80022b0 <HAL_I2S_MspInit+0x108>)
 8002278:	f004 fccc 	bl	8006c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800227c:	2310      	movs	r3, #16
 800227e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002288:	2300      	movs	r3, #0
 800228a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_I2S3ext;
 800228c:	2307      	movs	r3, #7
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002290:	f107 031c 	add.w	r3, r7, #28
 8002294:	4619      	mov	r1, r3
 8002296:	4807      	ldr	r0, [pc, #28]	; (80022b4 <HAL_I2S_MspInit+0x10c>)
 8002298:	f004 fcbc 	bl	8006c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800229c:	bf00      	nop
 800229e:	3730      	adds	r7, #48	; 0x30
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40003c00 	.word	0x40003c00
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40020000 	.word	0x40020000
 80022b0:	40020800 	.word	0x40020800
 80022b4:	40020400 	.word	0x40020400

080022b8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0b      	ldr	r2, [pc, #44]	; (80022f4 <HAL_RNG_MspInit+0x3c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d10d      	bne.n	80022e6 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <HAL_RNG_MspInit+0x40>)
 80022d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d2:	4a09      	ldr	r2, [pc, #36]	; (80022f8 <HAL_RNG_MspInit+0x40>)
 80022d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022d8:	6353      	str	r3, [r2, #52]	; 0x34
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <HAL_RNG_MspInit+0x40>)
 80022dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	50060800 	.word	0x50060800
 80022f8:	40023800 	.word	0x40023800

080022fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08c      	sub	sp, #48	; 0x30
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 031c 	add.w	r3, r7, #28
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a41      	ldr	r2, [pc, #260]	; (8002420 <HAL_SPI_MspInit+0x124>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d12c      	bne.n	8002378 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	4b40      	ldr	r3, [pc, #256]	; (8002424 <HAL_SPI_MspInit+0x128>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	4a3f      	ldr	r2, [pc, #252]	; (8002424 <HAL_SPI_MspInit+0x128>)
 8002328:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800232c:	6453      	str	r3, [r2, #68]	; 0x44
 800232e:	4b3d      	ldr	r3, [pc, #244]	; (8002424 <HAL_SPI_MspInit+0x128>)
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002336:	61bb      	str	r3, [r7, #24]
 8002338:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	4b39      	ldr	r3, [pc, #228]	; (8002424 <HAL_SPI_MspInit+0x128>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a38      	ldr	r2, [pc, #224]	; (8002424 <HAL_SPI_MspInit+0x128>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b36      	ldr	r3, [pc, #216]	; (8002424 <HAL_SPI_MspInit+0x128>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002356:	23e0      	movs	r3, #224	; 0xe0
 8002358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235a:	2302      	movs	r3, #2
 800235c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002362:	2303      	movs	r3, #3
 8002364:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002366:	2305      	movs	r3, #5
 8002368:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236a:	f107 031c 	add.w	r3, r7, #28
 800236e:	4619      	mov	r1, r3
 8002370:	482d      	ldr	r0, [pc, #180]	; (8002428 <HAL_SPI_MspInit+0x12c>)
 8002372:	f004 fc4f 	bl	8006c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002376:	e04f      	b.n	8002418 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a2b      	ldr	r2, [pc, #172]	; (800242c <HAL_SPI_MspInit+0x130>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d14a      	bne.n	8002418 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	4b27      	ldr	r3, [pc, #156]	; (8002424 <HAL_SPI_MspInit+0x128>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	4a26      	ldr	r2, [pc, #152]	; (8002424 <HAL_SPI_MspInit+0x128>)
 800238c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002390:	6413      	str	r3, [r2, #64]	; 0x40
 8002392:	4b24      	ldr	r3, [pc, #144]	; (8002424 <HAL_SPI_MspInit+0x128>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	4b20      	ldr	r3, [pc, #128]	; (8002424 <HAL_SPI_MspInit+0x128>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a1f      	ldr	r2, [pc, #124]	; (8002424 <HAL_SPI_MspInit+0x128>)
 80023a8:	f043 0304 	orr.w	r3, r3, #4
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <HAL_SPI_MspInit+0x128>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	4b19      	ldr	r3, [pc, #100]	; (8002424 <HAL_SPI_MspInit+0x128>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	4a18      	ldr	r2, [pc, #96]	; (8002424 <HAL_SPI_MspInit+0x128>)
 80023c4:	f043 0302 	orr.w	r3, r3, #2
 80023c8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ca:	4b16      	ldr	r3, [pc, #88]	; (8002424 <HAL_SPI_MspInit+0x128>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023d6:	2304      	movs	r3, #4
 80023d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023da:	2302      	movs	r3, #2
 80023dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e2:	2303      	movs	r3, #3
 80023e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023e6:	2305      	movs	r3, #5
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ea:	f107 031c 	add.w	r3, r7, #28
 80023ee:	4619      	mov	r1, r3
 80023f0:	480f      	ldr	r0, [pc, #60]	; (8002430 <HAL_SPI_MspInit+0x134>)
 80023f2:	f004 fc0f 	bl	8006c14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80023f6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80023fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fc:	2302      	movs	r3, #2
 80023fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002404:	2303      	movs	r3, #3
 8002406:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002408:	2305      	movs	r3, #5
 800240a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800240c:	f107 031c 	add.w	r3, r7, #28
 8002410:	4619      	mov	r1, r3
 8002412:	4808      	ldr	r0, [pc, #32]	; (8002434 <HAL_SPI_MspInit+0x138>)
 8002414:	f004 fbfe 	bl	8006c14 <HAL_GPIO_Init>
}
 8002418:	bf00      	nop
 800241a:	3730      	adds	r7, #48	; 0x30
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40013000 	.word	0x40013000
 8002424:	40023800 	.word	0x40023800
 8002428:	40020000 	.word	0x40020000
 800242c:	40003800 	.word	0x40003800
 8002430:	40020800 	.word	0x40020800
 8002434:	40020400 	.word	0x40020400

08002438 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	; 0x28
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a19      	ldr	r2, [pc, #100]	; (80024bc <HAL_TIM_Encoder_MspInit+0x84>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d12c      	bne.n	80024b4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	4a17      	ldr	r2, [pc, #92]	; (80024c0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	6453      	str	r3, [r2, #68]	; 0x44
 800246a:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <HAL_TIM_Encoder_MspInit+0x88>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <HAL_TIM_Encoder_MspInit+0x88>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	4a10      	ldr	r2, [pc, #64]	; (80024c0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002480:	f043 0310 	orr.w	r3, r3, #16
 8002484:	6313      	str	r3, [r2, #48]	; 0x30
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f003 0310 	and.w	r3, r3, #16
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002492:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002498:	2302      	movs	r3, #2
 800249a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800249c:	2301      	movs	r3, #1
 800249e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a0:	2300      	movs	r3, #0
 80024a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024a4:	2301      	movs	r3, #1
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	4619      	mov	r1, r3
 80024ae:	4805      	ldr	r0, [pc, #20]	; (80024c4 <HAL_TIM_Encoder_MspInit+0x8c>)
 80024b0:	f004 fbb0 	bl	8006c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80024b4:	bf00      	nop
 80024b6:	3728      	adds	r7, #40	; 0x28
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40010000 	.word	0x40010000
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40021000 	.word	0x40021000

080024c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d8:	d10e      	bne.n	80024f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	4b16      	ldr	r3, [pc, #88]	; (8002538 <HAL_TIM_Base_MspInit+0x70>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	4a15      	ldr	r2, [pc, #84]	; (8002538 <HAL_TIM_Base_MspInit+0x70>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ea:	4b13      	ldr	r3, [pc, #76]	; (8002538 <HAL_TIM_Base_MspInit+0x70>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024f6:	e01a      	b.n	800252e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a0f      	ldr	r2, [pc, #60]	; (800253c <HAL_TIM_Base_MspInit+0x74>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d115      	bne.n	800252e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <HAL_TIM_Base_MspInit+0x70>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	4a0b      	ldr	r2, [pc, #44]	; (8002538 <HAL_TIM_Base_MspInit+0x70>)
 800250c:	f043 0302 	orr.w	r3, r3, #2
 8002510:	6413      	str	r3, [r2, #64]	; 0x40
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_TIM_Base_MspInit+0x70>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800251e:	2200      	movs	r2, #0
 8002520:	2100      	movs	r1, #0
 8002522:	201d      	movs	r0, #29
 8002524:	f004 fb3f 	bl	8006ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002528:	201d      	movs	r0, #29
 800252a:	f004 fb58 	bl	8006bde <HAL_NVIC_EnableIRQ>
}
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800
 800253c:	40000400 	.word	0x40000400

08002540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002544:	e7fe      	b.n	8002544 <NMI_Handler+0x4>

08002546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800254a:	e7fe      	b.n	800254a <HardFault_Handler+0x4>

0800254c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002550:	e7fe      	b.n	8002550 <MemManage_Handler+0x4>

08002552 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002556:	e7fe      	b.n	8002556 <BusFault_Handler+0x4>

08002558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800255c:	e7fe      	b.n	800255c <UsageFault_Handler+0x4>

0800255e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800258c:	f004 f9ec 	bl	8006968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}

08002594 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 80025a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025ac:	481b      	ldr	r0, [pc, #108]	; (800261c <TIM2_IRQHandler+0x78>)
 80025ae:	f004 fcfe 	bl	8006fae <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 80025b2:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <TIM2_IRQHandler+0x7c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d111      	bne.n	80025de <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 80025ba:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <TIM2_IRQHandler+0x80>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2bc8      	cmp	r3, #200	; 0xc8
 80025c0:	dc0a      	bgt.n	80025d8 <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 80025c2:	4b18      	ldr	r3, [pc, #96]	; (8002624 <TIM2_IRQHandler+0x80>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	4b18      	ldr	r3, [pc, #96]	; (8002628 <TIM2_IRQHandler+0x84>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 80025cc:	4b15      	ldr	r3, [pc, #84]	; (8002624 <TIM2_IRQHandler+0x80>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	3301      	adds	r3, #1
 80025d2:	4a14      	ldr	r2, [pc, #80]	; (8002624 <TIM2_IRQHandler+0x80>)
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	e002      	b.n	80025de <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 80025d8:	4b11      	ldr	r3, [pc, #68]	; (8002620 <TIM2_IRQHandler+0x7c>)
 80025da:	2201      	movs	r2, #1
 80025dc:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <TIM2_IRQHandler+0x7c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d114      	bne.n	8002610 <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 80025e6:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <TIM2_IRQHandler+0x80>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2b63      	cmp	r3, #99	; 0x63
 80025ec:	dd0a      	ble.n	8002604 <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 80025ee:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <TIM2_IRQHandler+0x80>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <TIM2_IRQHandler+0x84>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 80025f8:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <TIM2_IRQHandler+0x80>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	3b01      	subs	r3, #1
 80025fe:	4a09      	ldr	r2, [pc, #36]	; (8002624 <TIM2_IRQHandler+0x80>)
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	e005      	b.n	8002610 <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <TIM2_IRQHandler+0x7c>)
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
		  i = 100;
 800260a:	4b06      	ldr	r3, [pc, #24]	; (8002624 <TIM2_IRQHandler+0x80>)
 800260c:	2264      	movs	r2, #100	; 0x64
 800260e:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002610:	4805      	ldr	r0, [pc, #20]	; (8002628 <TIM2_IRQHandler+0x84>)
 8002612:	f00a f9da 	bl	800c9ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40020c00 	.word	0x40020c00
 8002620:	200002a8 	.word	0x200002a8
 8002624:	20000004 	.word	0x20000004
 8002628:	200004e0 	.word	0x200004e0

0800262c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8002630:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002634:	4804      	ldr	r0, [pc, #16]	; (8002648 <TIM3_IRQHandler+0x1c>)
 8002636:	f004 fcba 	bl	8006fae <HAL_GPIO_TogglePin>
  read_digits();
 800263a:	f7fe fe2d 	bl	8001298 <read_digits>

	//keyboard_test();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800263e:	4803      	ldr	r0, [pc, #12]	; (800264c <TIM3_IRQHandler+0x20>)
 8002640:	f00a f9c3 	bl	800c9ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002644:	bf00      	nop
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40020c00 	.word	0x40020c00
 800264c:	200003e8 	.word	0x200003e8

08002650 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
//	{
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
//			// HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
//	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002654:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002658:	f004 fcc4 	bl	8006fe4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800265c:	bf00      	nop
 800265e:	bd80      	pop	{r7, pc}

08002660 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <OTG_FS_IRQHandler+0x10>)
 8002666:	f004 ff3f 	bl	80074e8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000a90 	.word	0x20000a90

08002674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800267c:	4a14      	ldr	r2, [pc, #80]	; (80026d0 <_sbrk+0x5c>)
 800267e:	4b15      	ldr	r3, [pc, #84]	; (80026d4 <_sbrk+0x60>)
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002688:	4b13      	ldr	r3, [pc, #76]	; (80026d8 <_sbrk+0x64>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d102      	bne.n	8002696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002690:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <_sbrk+0x64>)
 8002692:	4a12      	ldr	r2, [pc, #72]	; (80026dc <_sbrk+0x68>)
 8002694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002696:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <_sbrk+0x64>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d207      	bcs.n	80026b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026a4:	f00e f930 	bl	8010908 <__errno>
 80026a8:	4603      	mov	r3, r0
 80026aa:	220c      	movs	r2, #12
 80026ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026b2:	e009      	b.n	80026c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026b4:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <_sbrk+0x64>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ba:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <_sbrk+0x64>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	4a05      	ldr	r2, [pc, #20]	; (80026d8 <_sbrk+0x64>)
 80026c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026c6:	68fb      	ldr	r3, [r7, #12]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	20020000 	.word	0x20020000
 80026d4:	00000400 	.word	0x00000400
 80026d8:	200002ac 	.word	0x200002ac
 80026dc:	20000da8 	.word	0x20000da8

080026e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <SystemInit+0x20>)
 80026e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ea:	4a05      	ldr	r2, [pc, #20]	; (8002700 <SystemInit+0x20>)
 80026ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8002704:	b590      	push	{r4, r7, lr}
 8002706:	b08b      	sub	sp, #44	; 0x2c
 8002708:	af00      	add	r7, sp, #0
 800270a:	4604      	mov	r4, r0
 800270c:	4608      	mov	r0, r1
 800270e:	4611      	mov	r1, r2
 8002710:	461a      	mov	r2, r3
 8002712:	4623      	mov	r3, r4
 8002714:	80fb      	strh	r3, [r7, #6]
 8002716:	4603      	mov	r3, r0
 8002718:	80bb      	strh	r3, [r7, #4]
 800271a:	460b      	mov	r3, r1
 800271c:	807b      	strh	r3, [r7, #2]
 800271e:	4613      	mov	r3, r2
 8002720:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8002722:	887b      	ldrh	r3, [r7, #2]
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 800272a:	887b      	ldrh	r3, [r7, #2]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	f1c3 0301 	rsb	r3, r3, #1
 8002732:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]

    while (x >= y)
 800273c:	e061      	b.n	8002802 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 800273e:	88fa      	ldrh	r2, [r7, #6]
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	e018      	b.n	800277a <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	b298      	uxth	r0, r3
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	b29a      	uxth	r2, r3
 8002750:	88bb      	ldrh	r3, [r7, #4]
 8002752:	4413      	add	r3, r2
 8002754:	b29b      	uxth	r3, r3
 8002756:	883a      	ldrh	r2, [r7, #0]
 8002758:	4619      	mov	r1, r3
 800275a:	f000 fc0b 	bl	8002f74 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	b298      	uxth	r0, r3
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	b29b      	uxth	r3, r3
 8002766:	88ba      	ldrh	r2, [r7, #4]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	b29b      	uxth	r3, r3
 800276c:	883a      	ldrh	r2, [r7, #0]
 800276e:	4619      	mov	r1, r3
 8002770:	f000 fc00 	bl	8002f74 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	3301      	adds	r3, #1
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	88fa      	ldrh	r2, [r7, #6]
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	4413      	add	r3, r2
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	429a      	cmp	r2, r3
 8002784:	dde0      	ble.n	8002748 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8002786:	88fa      	ldrh	r2, [r7, #6]
 8002788:	6a3b      	ldr	r3, [r7, #32]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	e018      	b.n	80027c2 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	b298      	uxth	r0, r3
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	b29a      	uxth	r2, r3
 8002798:	88bb      	ldrh	r3, [r7, #4]
 800279a:	4413      	add	r3, r2
 800279c:	b29b      	uxth	r3, r3
 800279e:	883a      	ldrh	r2, [r7, #0]
 80027a0:	4619      	mov	r1, r3
 80027a2:	f000 fbe7 	bl	8002f74 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	b298      	uxth	r0, r3
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	88ba      	ldrh	r2, [r7, #4]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	883a      	ldrh	r2, [r7, #0]
 80027b6:	4619      	mov	r1, r3
 80027b8:	f000 fbdc 	bl	8002f74 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	3301      	adds	r3, #1
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	88fa      	ldrh	r2, [r7, #6]
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	4413      	add	r3, r2
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	dde0      	ble.n	8002790 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	3301      	adds	r3, #1
 80027d2:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	4413      	add	r3, r2
 80027da:	617b      	str	r3, [r7, #20]
        yChange += 2;
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	3302      	adds	r3, #2
 80027e0:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	005a      	lsls	r2, r3, #1
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	4413      	add	r3, r2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	dd09      	ble.n	8002802 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	3b01      	subs	r3, #1
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	4413      	add	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]
            xChange += 2;
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	3302      	adds	r3, #2
 8002800:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8002802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	429a      	cmp	r2, r3
 8002808:	da99      	bge.n	800273e <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 800280a:	bf00      	nop
 800280c:	bf00      	nop
 800280e:	372c      	adds	r7, #44	; 0x2c
 8002810:	46bd      	mov	sp, r7
 8002812:	bd90      	pop	{r4, r7, pc}

08002814 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8002814:	b590      	push	{r4, r7, lr}
 8002816:	b089      	sub	sp, #36	; 0x24
 8002818:	af02      	add	r7, sp, #8
 800281a:	4604      	mov	r4, r0
 800281c:	4608      	mov	r0, r1
 800281e:	4611      	mov	r1, r2
 8002820:	461a      	mov	r2, r3
 8002822:	4623      	mov	r3, r4
 8002824:	71fb      	strb	r3, [r7, #7]
 8002826:	4603      	mov	r3, r0
 8002828:	80bb      	strh	r3, [r7, #4]
 800282a:	460b      	mov	r3, r1
 800282c:	71bb      	strb	r3, [r7, #6]
 800282e:	4613      	mov	r3, r2
 8002830:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8002836:	7dfb      	ldrb	r3, [r7, #23]
 8002838:	2b1f      	cmp	r3, #31
 800283a:	d902      	bls.n	8002842 <ILI9341_Draw_Char+0x2e>
        //Character = 0;
    	//break;
    } else {
        function_char -= 32;
 800283c:	7dfb      	ldrb	r3, [r7, #23]
 800283e:	3b20      	subs	r3, #32
 8002840:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8002842:	2300      	movs	r3, #0
 8002844:	753b      	strb	r3, [r7, #20]
 8002846:	e012      	b.n	800286e <ILI9341_Draw_Char+0x5a>
		{
		temp[k] = font[function_char][k];
 8002848:	7dfa      	ldrb	r2, [r7, #23]
 800284a:	7d38      	ldrb	r0, [r7, #20]
 800284c:	7d39      	ldrb	r1, [r7, #20]
 800284e:	4c3b      	ldr	r4, [pc, #236]	; (800293c <ILI9341_Draw_Char+0x128>)
 8002850:	4613      	mov	r3, r2
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	4413      	add	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4423      	add	r3, r4
 800285a:	4403      	add	r3, r0
 800285c:	781a      	ldrb	r2, [r3, #0]
 800285e:	f107 0318 	add.w	r3, r7, #24
 8002862:	440b      	add	r3, r1
 8002864:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8002868:	7d3b      	ldrb	r3, [r7, #20]
 800286a:	3301      	adds	r3, #1
 800286c:	753b      	strb	r3, [r7, #20]
 800286e:	7d3b      	ldrb	r3, [r7, #20]
 8002870:	2b05      	cmp	r3, #5
 8002872:	d9e9      	bls.n	8002848 <ILI9341_Draw_Char+0x34>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8002874:	79bb      	ldrb	r3, [r7, #6]
 8002876:	b299      	uxth	r1, r3
 8002878:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800287a:	461a      	mov	r2, r3
 800287c:	0052      	lsls	r2, r2, #1
 800287e:	4413      	add	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	b29c      	uxth	r4, r3
 800288a:	88b8      	ldrh	r0, [r7, #4]
 800288c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	4623      	mov	r3, r4
 8002892:	f000 fc37 	bl	8003104 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8002896:	2300      	movs	r3, #0
 8002898:	757b      	strb	r3, [r7, #21]
 800289a:	e046      	b.n	800292a <ILI9341_Draw_Char+0x116>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800289c:	2300      	movs	r3, #0
 800289e:	75bb      	strb	r3, [r7, #22]
 80028a0:	e03d      	b.n	800291e <ILI9341_Draw_Char+0x10a>
            if (temp[j] & (1<<i)) {			
 80028a2:	7d7b      	ldrb	r3, [r7, #21]
 80028a4:	f107 0218 	add.w	r2, r7, #24
 80028a8:	4413      	add	r3, r2
 80028aa:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80028ae:	461a      	mov	r2, r3
 80028b0:	7dbb      	ldrb	r3, [r7, #22]
 80028b2:	fa42 f303 	asr.w	r3, r2, r3
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d02c      	beq.n	8002918 <ILI9341_Draw_Char+0x104>
							if(Size == 1)
 80028be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d10f      	bne.n	80028e4 <ILI9341_Draw_Char+0xd0>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 80028c4:	7d7b      	ldrb	r3, [r7, #21]
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	88bb      	ldrh	r3, [r7, #4]
 80028ca:	4413      	add	r3, r2
 80028cc:	b298      	uxth	r0, r3
 80028ce:	79bb      	ldrb	r3, [r7, #6]
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	7dbb      	ldrb	r3, [r7, #22]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	4413      	add	r3, r2
 80028d8:	b29b      	uxth	r3, r3
 80028da:	887a      	ldrh	r2, [r7, #2]
 80028dc:	4619      	mov	r1, r3
 80028de:	f000 fb49 	bl	8002f74 <ILI9341_Draw_Pixel>
 80028e2:	e019      	b.n	8002918 <ILI9341_Draw_Char+0x104>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80028e4:	7d7b      	ldrb	r3, [r7, #21]
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80028ea:	fb12 f303 	smulbb	r3, r2, r3
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	88bb      	ldrh	r3, [r7, #4]
 80028f2:	4413      	add	r3, r2
 80028f4:	b298      	uxth	r0, r3
 80028f6:	79bb      	ldrb	r3, [r7, #6]
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	7dbb      	ldrb	r3, [r7, #22]
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002900:	fb11 f303 	smulbb	r3, r1, r3
 8002904:	b29b      	uxth	r3, r3
 8002906:	4413      	add	r3, r2
 8002908:	b299      	uxth	r1, r3
 800290a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800290c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800290e:	887b      	ldrh	r3, [r7, #2]
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	4623      	mov	r3, r4
 8002914:	f000 fbf6 	bl	8003104 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002918:	7dbb      	ldrb	r3, [r7, #22]
 800291a:	3301      	adds	r3, #1
 800291c:	75bb      	strb	r3, [r7, #22]
 800291e:	7dbb      	ldrb	r3, [r7, #22]
 8002920:	2b07      	cmp	r3, #7
 8002922:	d9be      	bls.n	80028a2 <ILI9341_Draw_Char+0x8e>
    for (j=0; j<CHAR_WIDTH; j++) {
 8002924:	7d7b      	ldrb	r3, [r7, #21]
 8002926:	3301      	adds	r3, #1
 8002928:	757b      	strb	r3, [r7, #21]
 800292a:	7d7b      	ldrb	r3, [r7, #21]
 800292c:	2b05      	cmp	r3, #5
 800292e:	d9b5      	bls.n	800289c <ILI9341_Draw_Char+0x88>
							}
            }						
        }
    }
}
 8002930:	bf00      	nop
 8002932:	bf00      	nop
 8002934:	371c      	adds	r7, #28
 8002936:	46bd      	mov	sp, r7
 8002938:	bd90      	pop	{r4, r7, pc}
 800293a:	bf00      	nop
 800293c:	0801136c 	.word	0x0801136c

08002940 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8002940:	b590      	push	{r4, r7, lr}
 8002942:	b087      	sub	sp, #28
 8002944:	af02      	add	r7, sp, #8
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	4608      	mov	r0, r1
 800294a:	4611      	mov	r1, r2
 800294c:	461a      	mov	r2, r3
 800294e:	4603      	mov	r3, r0
 8002950:	817b      	strh	r3, [r7, #10]
 8002952:	460b      	mov	r3, r1
 8002954:	727b      	strb	r3, [r7, #9]
 8002956:	4613      	mov	r3, r2
 8002958:	80fb      	strh	r3, [r7, #6]
    while (*Text) {
 800295a:	e016      	b.n	800298a <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	60fa      	str	r2, [r7, #12]
 8002962:	7818      	ldrb	r0, [r3, #0]
 8002964:	88fc      	ldrh	r4, [r7, #6]
 8002966:	7a7a      	ldrb	r2, [r7, #9]
 8002968:	8979      	ldrh	r1, [r7, #10]
 800296a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800296c:	9301      	str	r3, [sp, #4]
 800296e:	8c3b      	ldrh	r3, [r7, #32]
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	4623      	mov	r3, r4
 8002974:	f7ff ff4e 	bl	8002814 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8002978:	8c3b      	ldrh	r3, [r7, #32]
 800297a:	461a      	mov	r2, r3
 800297c:	0052      	lsls	r2, r2, #1
 800297e:	4413      	add	r3, r2
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	897b      	ldrh	r3, [r7, #10]
 8002986:	4413      	add	r3, r2
 8002988:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1e4      	bne.n	800295c <ILI9341_Draw_Text+0x1c>
    }
}
 8002992:	bf00      	nop
 8002994:	bf00      	nop
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	bd90      	pop	{r4, r7, pc}

0800299c <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80029a0:	2200      	movs	r2, #0
 80029a2:	2110      	movs	r1, #16
 80029a4:	4802      	ldr	r0, [pc, #8]	; (80029b0 <ILI9341_SPI_Init+0x14>)
 80029a6:	f004 fae9 	bl	8006f7c <HAL_GPIO_WritePin>
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000

080029b4 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80029be:	1df9      	adds	r1, r7, #7
 80029c0:	2301      	movs	r3, #1
 80029c2:	2201      	movs	r2, #1
 80029c4:	4803      	ldr	r0, [pc, #12]	; (80029d4 <ILI9341_SPI_Send+0x20>)
 80029c6:	f009 f814 	bl	800b9f2 <HAL_SPI_Transmit>
}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	2000033c 	.word	0x2000033c

080029d8 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80029e2:	2200      	movs	r2, #0
 80029e4:	2110      	movs	r1, #16
 80029e6:	480a      	ldr	r0, [pc, #40]	; (8002a10 <ILI9341_Write_Command+0x38>)
 80029e8:	f004 fac8 	bl	8006f7c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80029ec:	2200      	movs	r2, #0
 80029ee:	2140      	movs	r1, #64	; 0x40
 80029f0:	4807      	ldr	r0, [pc, #28]	; (8002a10 <ILI9341_Write_Command+0x38>)
 80029f2:	f004 fac3 	bl	8006f7c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ffdb 	bl	80029b4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80029fe:	2201      	movs	r2, #1
 8002a00:	2110      	movs	r1, #16
 8002a02:	4803      	ldr	r0, [pc, #12]	; (8002a10 <ILI9341_Write_Command+0x38>)
 8002a04:	f004 faba 	bl	8006f7c <HAL_GPIO_WritePin>
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40021000 	.word	0x40021000

08002a14 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002a1e:	2201      	movs	r2, #1
 8002a20:	2140      	movs	r1, #64	; 0x40
 8002a22:	480a      	ldr	r0, [pc, #40]	; (8002a4c <ILI9341_Write_Data+0x38>)
 8002a24:	f004 faaa 	bl	8006f7c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2110      	movs	r1, #16
 8002a2c:	4807      	ldr	r0, [pc, #28]	; (8002a4c <ILI9341_Write_Data+0x38>)
 8002a2e:	f004 faa5 	bl	8006f7c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff ffbd 	bl	80029b4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	2110      	movs	r1, #16
 8002a3e:	4803      	ldr	r0, [pc, #12]	; (8002a4c <ILI9341_Write_Data+0x38>)
 8002a40:	f004 fa9c 	bl	8006f7c <HAL_GPIO_WritePin>
}
 8002a44:	bf00      	nop
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40021000 	.word	0x40021000

08002a50 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4604      	mov	r4, r0
 8002a58:	4608      	mov	r0, r1
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4623      	mov	r3, r4
 8002a60:	80fb      	strh	r3, [r7, #6]
 8002a62:	4603      	mov	r3, r0
 8002a64:	80bb      	strh	r3, [r7, #4]
 8002a66:	460b      	mov	r3, r1
 8002a68:	807b      	strh	r3, [r7, #2]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8002a6e:	202a      	movs	r0, #42	; 0x2a
 8002a70:	f7ff ffb2 	bl	80029d8 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8002a74:	88fb      	ldrh	r3, [r7, #6]
 8002a76:	0a1b      	lsrs	r3, r3, #8
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff ffc9 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff ffc4 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8002a8c:	887b      	ldrh	r3, [r7, #2]
 8002a8e:	0a1b      	lsrs	r3, r3, #8
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ffbd 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8002a9a:	887b      	ldrh	r3, [r7, #2]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff ffb8 	bl	8002a14 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8002aa4:	202b      	movs	r0, #43	; 0x2b
 8002aa6:	f7ff ff97 	bl	80029d8 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8002aaa:	88bb      	ldrh	r3, [r7, #4]
 8002aac:	0a1b      	lsrs	r3, r3, #8
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff ffae 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8002ab8:	88bb      	ldrh	r3, [r7, #4]
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ffa9 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8002ac2:	883b      	ldrh	r3, [r7, #0]
 8002ac4:	0a1b      	lsrs	r3, r3, #8
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff ffa2 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8002ad0:	883b      	ldrh	r3, [r7, #0]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff ff9d 	bl	8002a14 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8002ada:	202c      	movs	r0, #44	; 0x2c
 8002adc:	f7ff ff7c 	bl	80029d8 <ILI9341_Write_Command>
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd90      	pop	{r4, r7, pc}

08002ae8 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8002aec:	2200      	movs	r2, #0
 8002aee:	2120      	movs	r1, #32
 8002af0:	480a      	ldr	r0, [pc, #40]	; (8002b1c <ILI9341_Reset+0x34>)
 8002af2:	f004 fa43 	bl	8006f7c <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002af6:	20c8      	movs	r0, #200	; 0xc8
 8002af8:	f003 ff56 	bl	80069a8 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002afc:	2200      	movs	r2, #0
 8002afe:	2110      	movs	r1, #16
 8002b00:	4806      	ldr	r0, [pc, #24]	; (8002b1c <ILI9341_Reset+0x34>)
 8002b02:	f004 fa3b 	bl	8006f7c <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002b06:	20c8      	movs	r0, #200	; 0xc8
 8002b08:	f003 ff4e 	bl	80069a8 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	2120      	movs	r1, #32
 8002b10:	4802      	ldr	r0, [pc, #8]	; (8002b1c <ILI9341_Reset+0x34>)
 8002b12:	f004 fa33 	bl	8006f7c <HAL_GPIO_WritePin>
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000

08002b20 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8002b2e:	2036      	movs	r0, #54	; 0x36
 8002b30:	f7ff ff52 	bl	80029d8 <ILI9341_Write_Command>
HAL_Delay(1);
 8002b34:	2001      	movs	r0, #1
 8002b36:	f003 ff37 	bl	80069a8 <HAL_Delay>
	
switch(screen_rotation) 
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d837      	bhi.n	8002bb0 <ILI9341_Set_Rotation+0x90>
 8002b40:	a201      	add	r2, pc, #4	; (adr r2, 8002b48 <ILI9341_Set_Rotation+0x28>)
 8002b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b46:	bf00      	nop
 8002b48:	08002b59 	.word	0x08002b59
 8002b4c:	08002b6f 	.word	0x08002b6f
 8002b50:	08002b85 	.word	0x08002b85
 8002b54:	08002b9b 	.word	0x08002b9b
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8002b58:	2048      	movs	r0, #72	; 0x48
 8002b5a:	f7ff ff5b 	bl	8002a14 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8002b5e:	4b17      	ldr	r3, [pc, #92]	; (8002bbc <ILI9341_Set_Rotation+0x9c>)
 8002b60:	22f0      	movs	r2, #240	; 0xf0
 8002b62:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002b64:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <ILI9341_Set_Rotation+0xa0>)
 8002b66:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b6a:	801a      	strh	r2, [r3, #0]
			break;
 8002b6c:	e021      	b.n	8002bb2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8002b6e:	2028      	movs	r0, #40	; 0x28
 8002b70:	f7ff ff50 	bl	8002a14 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002b74:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <ILI9341_Set_Rotation+0x9c>)
 8002b76:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b7a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002b7c:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <ILI9341_Set_Rotation+0xa0>)
 8002b7e:	22f0      	movs	r2, #240	; 0xf0
 8002b80:	801a      	strh	r2, [r3, #0]
			break;
 8002b82:	e016      	b.n	8002bb2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8002b84:	2088      	movs	r0, #136	; 0x88
 8002b86:	f7ff ff45 	bl	8002a14 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8002b8a:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <ILI9341_Set_Rotation+0x9c>)
 8002b8c:	22f0      	movs	r2, #240	; 0xf0
 8002b8e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <ILI9341_Set_Rotation+0xa0>)
 8002b92:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b96:	801a      	strh	r2, [r3, #0]
			break;
 8002b98:	e00b      	b.n	8002bb2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8002b9a:	20e8      	movs	r0, #232	; 0xe8
 8002b9c:	f7ff ff3a 	bl	8002a14 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <ILI9341_Set_Rotation+0x9c>)
 8002ba2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ba6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <ILI9341_Set_Rotation+0xa0>)
 8002baa:	22f0      	movs	r2, #240	; 0xf0
 8002bac:	801a      	strh	r2, [r3, #0]
			break;
 8002bae:	e000      	b.n	8002bb2 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002bb0:	bf00      	nop
	}
}
 8002bb2:	bf00      	nop
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	2000000e 	.word	0x2000000e
 8002bc0:	2000000c 	.word	0x2000000c

08002bc4 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002bc8:	2201      	movs	r2, #1
 8002bca:	2120      	movs	r1, #32
 8002bcc:	4802      	ldr	r0, [pc, #8]	; (8002bd8 <ILI9341_Enable+0x14>)
 8002bce:	f004 f9d5 	bl	8006f7c <HAL_GPIO_WritePin>
}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40021000 	.word	0x40021000

08002bdc <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8002be0:	f7ff fff0 	bl	8002bc4 <ILI9341_Enable>
ILI9341_SPI_Init();
 8002be4:	f7ff feda 	bl	800299c <ILI9341_SPI_Init>
ILI9341_Reset();
 8002be8:	f7ff ff7e 	bl	8002ae8 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8002bec:	2001      	movs	r0, #1
 8002bee:	f7ff fef3 	bl	80029d8 <ILI9341_Write_Command>
HAL_Delay(1000);
 8002bf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bf6:	f003 fed7 	bl	80069a8 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8002bfa:	20cb      	movs	r0, #203	; 0xcb
 8002bfc:	f7ff feec 	bl	80029d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8002c00:	2039      	movs	r0, #57	; 0x39
 8002c02:	f7ff ff07 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8002c06:	202c      	movs	r0, #44	; 0x2c
 8002c08:	f7ff ff04 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	f7ff ff01 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8002c12:	2034      	movs	r0, #52	; 0x34
 8002c14:	f7ff fefe 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8002c18:	2002      	movs	r0, #2
 8002c1a:	f7ff fefb 	bl	8002a14 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8002c1e:	20cf      	movs	r0, #207	; 0xcf
 8002c20:	f7ff feda 	bl	80029d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002c24:	2000      	movs	r0, #0
 8002c26:	f7ff fef5 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002c2a:	20c1      	movs	r0, #193	; 0xc1
 8002c2c:	f7ff fef2 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8002c30:	2030      	movs	r0, #48	; 0x30
 8002c32:	f7ff feef 	bl	8002a14 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8002c36:	20e8      	movs	r0, #232	; 0xe8
 8002c38:	f7ff fece 	bl	80029d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8002c3c:	2085      	movs	r0, #133	; 0x85
 8002c3e:	f7ff fee9 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002c42:	2000      	movs	r0, #0
 8002c44:	f7ff fee6 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8002c48:	2078      	movs	r0, #120	; 0x78
 8002c4a:	f7ff fee3 	bl	8002a14 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8002c4e:	20ea      	movs	r0, #234	; 0xea
 8002c50:	f7ff fec2 	bl	80029d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002c54:	2000      	movs	r0, #0
 8002c56:	f7ff fedd 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f7ff feda 	bl	8002a14 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8002c60:	20ed      	movs	r0, #237	; 0xed
 8002c62:	f7ff feb9 	bl	80029d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8002c66:	2064      	movs	r0, #100	; 0x64
 8002c68:	f7ff fed4 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002c6c:	2003      	movs	r0, #3
 8002c6e:	f7ff fed1 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8002c72:	2012      	movs	r0, #18
 8002c74:	f7ff fece 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8002c78:	2081      	movs	r0, #129	; 0x81
 8002c7a:	f7ff fecb 	bl	8002a14 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8002c7e:	20f7      	movs	r0, #247	; 0xf7
 8002c80:	f7ff feaa 	bl	80029d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8002c84:	2020      	movs	r0, #32
 8002c86:	f7ff fec5 	bl	8002a14 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8002c8a:	20c0      	movs	r0, #192	; 0xc0
 8002c8c:	f7ff fea4 	bl	80029d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8002c90:	2023      	movs	r0, #35	; 0x23
 8002c92:	f7ff febf 	bl	8002a14 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8002c96:	20c1      	movs	r0, #193	; 0xc1
 8002c98:	f7ff fe9e 	bl	80029d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8002c9c:	2010      	movs	r0, #16
 8002c9e:	f7ff feb9 	bl	8002a14 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8002ca2:	20c5      	movs	r0, #197	; 0xc5
 8002ca4:	f7ff fe98 	bl	80029d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8002ca8:	203e      	movs	r0, #62	; 0x3e
 8002caa:	f7ff feb3 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8002cae:	2028      	movs	r0, #40	; 0x28
 8002cb0:	f7ff feb0 	bl	8002a14 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8002cb4:	20c7      	movs	r0, #199	; 0xc7
 8002cb6:	f7ff fe8f 	bl	80029d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8002cba:	2086      	movs	r0, #134	; 0x86
 8002cbc:	f7ff feaa 	bl	8002a14 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8002cc0:	2036      	movs	r0, #54	; 0x36
 8002cc2:	f7ff fe89 	bl	80029d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8002cc6:	2048      	movs	r0, #72	; 0x48
 8002cc8:	f7ff fea4 	bl	8002a14 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8002ccc:	203a      	movs	r0, #58	; 0x3a
 8002cce:	f7ff fe83 	bl	80029d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8002cd2:	2055      	movs	r0, #85	; 0x55
 8002cd4:	f7ff fe9e 	bl	8002a14 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8002cd8:	20b1      	movs	r0, #177	; 0xb1
 8002cda:	f7ff fe7d 	bl	80029d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002cde:	2000      	movs	r0, #0
 8002ce0:	f7ff fe98 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8002ce4:	2018      	movs	r0, #24
 8002ce6:	f7ff fe95 	bl	8002a14 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8002cea:	20b6      	movs	r0, #182	; 0xb6
 8002cec:	f7ff fe74 	bl	80029d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8002cf0:	2008      	movs	r0, #8
 8002cf2:	f7ff fe8f 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8002cf6:	2082      	movs	r0, #130	; 0x82
 8002cf8:	f7ff fe8c 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8002cfc:	2027      	movs	r0, #39	; 0x27
 8002cfe:	f7ff fe89 	bl	8002a14 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8002d02:	20f2      	movs	r0, #242	; 0xf2
 8002d04:	f7ff fe68 	bl	80029d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f7ff fe83 	bl	8002a14 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8002d0e:	2026      	movs	r0, #38	; 0x26
 8002d10:	f7ff fe62 	bl	80029d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8002d14:	2001      	movs	r0, #1
 8002d16:	f7ff fe7d 	bl	8002a14 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8002d1a:	20e0      	movs	r0, #224	; 0xe0
 8002d1c:	f7ff fe5c 	bl	80029d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8002d20:	200f      	movs	r0, #15
 8002d22:	f7ff fe77 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002d26:	2031      	movs	r0, #49	; 0x31
 8002d28:	f7ff fe74 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8002d2c:	202b      	movs	r0, #43	; 0x2b
 8002d2e:	f7ff fe71 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002d32:	200c      	movs	r0, #12
 8002d34:	f7ff fe6e 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002d38:	200e      	movs	r0, #14
 8002d3a:	f7ff fe6b 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002d3e:	2008      	movs	r0, #8
 8002d40:	f7ff fe68 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8002d44:	204e      	movs	r0, #78	; 0x4e
 8002d46:	f7ff fe65 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8002d4a:	20f1      	movs	r0, #241	; 0xf1
 8002d4c:	f7ff fe62 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8002d50:	2037      	movs	r0, #55	; 0x37
 8002d52:	f7ff fe5f 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002d56:	2007      	movs	r0, #7
 8002d58:	f7ff fe5c 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8002d5c:	2010      	movs	r0, #16
 8002d5e:	f7ff fe59 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002d62:	2003      	movs	r0, #3
 8002d64:	f7ff fe56 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002d68:	200e      	movs	r0, #14
 8002d6a:	f7ff fe53 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8002d6e:	2009      	movs	r0, #9
 8002d70:	f7ff fe50 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002d74:	2000      	movs	r0, #0
 8002d76:	f7ff fe4d 	bl	8002a14 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8002d7a:	20e1      	movs	r0, #225	; 0xe1
 8002d7c:	f7ff fe2c 	bl	80029d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002d80:	2000      	movs	r0, #0
 8002d82:	f7ff fe47 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002d86:	200e      	movs	r0, #14
 8002d88:	f7ff fe44 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8002d8c:	2014      	movs	r0, #20
 8002d8e:	f7ff fe41 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002d92:	2003      	movs	r0, #3
 8002d94:	f7ff fe3e 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8002d98:	2011      	movs	r0, #17
 8002d9a:	f7ff fe3b 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002d9e:	2007      	movs	r0, #7
 8002da0:	f7ff fe38 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002da4:	2031      	movs	r0, #49	; 0x31
 8002da6:	f7ff fe35 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002daa:	20c1      	movs	r0, #193	; 0xc1
 8002dac:	f7ff fe32 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8002db0:	2048      	movs	r0, #72	; 0x48
 8002db2:	f7ff fe2f 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002db6:	2008      	movs	r0, #8
 8002db8:	f7ff fe2c 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002dbc:	200f      	movs	r0, #15
 8002dbe:	f7ff fe29 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002dc2:	200c      	movs	r0, #12
 8002dc4:	f7ff fe26 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002dc8:	2031      	movs	r0, #49	; 0x31
 8002dca:	f7ff fe23 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8002dce:	2036      	movs	r0, #54	; 0x36
 8002dd0:	f7ff fe20 	bl	8002a14 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002dd4:	200f      	movs	r0, #15
 8002dd6:	f7ff fe1d 	bl	8002a14 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8002dda:	2011      	movs	r0, #17
 8002ddc:	f7ff fdfc 	bl	80029d8 <ILI9341_Write_Command>
HAL_Delay(120);
 8002de0:	2078      	movs	r0, #120	; 0x78
 8002de2:	f003 fde1 	bl	80069a8 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8002de6:	2029      	movs	r0, #41	; 0x29
 8002de8:	f7ff fdf6 	bl	80029d8 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8002dec:	2003      	movs	r0, #3
 8002dee:	f7ff fe97 	bl	8002b20 <ILI9341_Set_Rotation>

HAL_Delay(10);
 8002df2:	200a      	movs	r0, #10
 8002df4:	f003 fdd8 	bl	80069a8 <HAL_Delay>
//
}
 8002df8:	bf00      	nop
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002dfc:	b5b0      	push	{r4, r5, r7, lr}
 8002dfe:	b08c      	sub	sp, #48	; 0x30
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	6039      	str	r1, [r7, #0]
 8002e06:	80fb      	strh	r3, [r7, #6]
 8002e08:	466b      	mov	r3, sp
 8002e0a:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e18:	d202      	bcs.n	8002e20 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e1e:	e002      	b.n	8002e26 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8002e20:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002e26:	2201      	movs	r2, #1
 8002e28:	2140      	movs	r1, #64	; 0x40
 8002e2a:	483d      	ldr	r0, [pc, #244]	; (8002f20 <ILI9341_Draw_Colour_Burst+0x124>)
 8002e2c:	f004 f8a6 	bl	8006f7c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002e30:	2200      	movs	r2, #0
 8002e32:	2110      	movs	r1, #16
 8002e34:	483a      	ldr	r0, [pc, #232]	; (8002f20 <ILI9341_Draw_Colour_Burst+0x124>)
 8002e36:	f004 f8a1 	bl	8006f7c <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8002e3a:	88fb      	ldrh	r3, [r7, #6]
 8002e3c:	0a1b      	lsrs	r3, r3, #8
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8002e44:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002e46:	4623      	mov	r3, r4
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	61fb      	str	r3, [r7, #28]
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	f04f 0100 	mov.w	r1, #0
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	00cb      	lsls	r3, r1, #3
 8002e5c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002e60:	00c2      	lsls	r2, r0, #3
 8002e62:	4620      	mov	r0, r4
 8002e64:	f04f 0100 	mov.w	r1, #0
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	00cb      	lsls	r3, r1, #3
 8002e72:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002e76:	00c2      	lsls	r2, r0, #3
 8002e78:	1de3      	adds	r3, r4, #7
 8002e7a:	08db      	lsrs	r3, r3, #3
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	ebad 0d03 	sub.w	sp, sp, r3
 8002e82:	466b      	mov	r3, sp
 8002e84:	3300      	adds	r3, #0
 8002e86:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002e88:	2300      	movs	r3, #0
 8002e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e8c:	e00e      	b.n	8002eac <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e92:	4413      	add	r3, r2
 8002e94:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002e98:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8002e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	88fa      	ldrh	r2, [r7, #6]
 8002ea0:	b2d1      	uxtb	r1, r2
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea8:	3302      	adds	r3, #2
 8002eaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d3ec      	bcc.n	8002e8e <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec2:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec8:	fbb3 f2f2 	udiv	r2, r3, r2
 8002ecc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ece:	fb01 f202 	mul.w	r2, r1, r2
 8002ed2:	1a9b      	subs	r3, r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d010      	beq.n	8002efe <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002edc:	2300      	movs	r3, #0
 8002ede:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ee0:	e009      	b.n	8002ef6 <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8002ee2:	69b9      	ldr	r1, [r7, #24]
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	230a      	movs	r3, #10
 8002eea:	480e      	ldr	r0, [pc, #56]	; (8002f24 <ILI9341_Draw_Colour_Burst+0x128>)
 8002eec:	f008 fd81 	bl	800b9f2 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d3f1      	bcc.n	8002ee2 <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002efe:	69b9      	ldr	r1, [r7, #24]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	230a      	movs	r3, #10
 8002f06:	4807      	ldr	r0, [pc, #28]	; (8002f24 <ILI9341_Draw_Colour_Burst+0x128>)
 8002f08:	f008 fd73 	bl	800b9f2 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	2110      	movs	r1, #16
 8002f10:	4803      	ldr	r0, [pc, #12]	; (8002f20 <ILI9341_Draw_Colour_Burst+0x124>)
 8002f12:	f004 f833 	bl	8006f7c <HAL_GPIO_WritePin>
 8002f16:	46ad      	mov	sp, r5
}
 8002f18:	bf00      	nop
 8002f1a:	3730      	adds	r7, #48	; 0x30
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f20:	40021000 	.word	0x40021000
 8002f24:	2000033c 	.word	0x2000033c

08002f28 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8002f32:	4b0e      	ldr	r3, [pc, #56]	; (8002f6c <ILI9341_Fill_Screen+0x44>)
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <ILI9341_Fill_Screen+0x48>)
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2100      	movs	r1, #0
 8002f40:	2000      	movs	r0, #0
 8002f42:	f7ff fd85 	bl	8002a50 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8002f46:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <ILI9341_Fill_Screen+0x44>)
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <ILI9341_Fill_Screen+0x48>)
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	fb03 f302 	mul.w	r3, r3, r2
 8002f58:	461a      	mov	r2, r3
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff ff4c 	bl	8002dfc <ILI9341_Draw_Colour_Burst>
}
 8002f64:	bf00      	nop
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	2000000e 	.word	0x2000000e
 8002f70:	2000000c 	.word	0x2000000c

08002f74 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	80fb      	strh	r3, [r7, #6]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	80bb      	strh	r3, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002f86:	4b5b      	ldr	r3, [pc, #364]	; (80030f4 <ILI9341_Draw_Pixel+0x180>)
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	88fa      	ldrh	r2, [r7, #6]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	f080 80ac 	bcs.w	80030ec <ILI9341_Draw_Pixel+0x178>
 8002f94:	4b58      	ldr	r3, [pc, #352]	; (80030f8 <ILI9341_Draw_Pixel+0x184>)
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	88ba      	ldrh	r2, [r7, #4]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	f080 80a5 	bcs.w	80030ec <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2140      	movs	r1, #64	; 0x40
 8002fa6:	4855      	ldr	r0, [pc, #340]	; (80030fc <ILI9341_Draw_Pixel+0x188>)
 8002fa8:	f003 ffe8 	bl	8006f7c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002fac:	2200      	movs	r2, #0
 8002fae:	2110      	movs	r1, #16
 8002fb0:	4852      	ldr	r0, [pc, #328]	; (80030fc <ILI9341_Draw_Pixel+0x188>)
 8002fb2:	f003 ffe3 	bl	8006f7c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002fb6:	202a      	movs	r0, #42	; 0x2a
 8002fb8:	f7ff fcfc 	bl	80029b4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	2140      	movs	r1, #64	; 0x40
 8002fc0:	484e      	ldr	r0, [pc, #312]	; (80030fc <ILI9341_Draw_Pixel+0x188>)
 8002fc2:	f003 ffdb 	bl	8006f7c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	2110      	movs	r1, #16
 8002fca:	484c      	ldr	r0, [pc, #304]	; (80030fc <ILI9341_Draw_Pixel+0x188>)
 8002fcc:	f003 ffd6 	bl	8006f7c <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2110      	movs	r1, #16
 8002fd4:	4849      	ldr	r0, [pc, #292]	; (80030fc <ILI9341_Draw_Pixel+0x188>)
 8002fd6:	f003 ffd1 	bl	8006f7c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	0a1b      	lsrs	r3, r3, #8
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	753b      	strb	r3, [r7, #20]
 8002fe4:	88fb      	ldrh	r3, [r7, #6]
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	757b      	strb	r3, [r7, #21]
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	3301      	adds	r3, #1
 8002fee:	121b      	asrs	r3, r3, #8
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	75bb      	strb	r3, [r7, #22]
 8002ff4:	88fb      	ldrh	r3, [r7, #6]
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002ffe:	f107 0114 	add.w	r1, r7, #20
 8003002:	2301      	movs	r3, #1
 8003004:	2204      	movs	r2, #4
 8003006:	483e      	ldr	r0, [pc, #248]	; (8003100 <ILI9341_Draw_Pixel+0x18c>)
 8003008:	f008 fcf3 	bl	800b9f2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800300c:	2201      	movs	r2, #1
 800300e:	2110      	movs	r1, #16
 8003010:	483a      	ldr	r0, [pc, #232]	; (80030fc <ILI9341_Draw_Pixel+0x188>)
 8003012:	f003 ffb3 	bl	8006f7c <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8003016:	2200      	movs	r2, #0
 8003018:	2140      	movs	r1, #64	; 0x40
 800301a:	4838      	ldr	r0, [pc, #224]	; (80030fc <ILI9341_Draw_Pixel+0x188>)
 800301c:	f003 ffae 	bl	8006f7c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8003020:	2200      	movs	r2, #0
 8003022:	2110      	movs	r1, #16
 8003024:	4835      	ldr	r0, [pc, #212]	; (80030fc <ILI9341_Draw_Pixel+0x188>)
 8003026:	f003 ffa9 	bl	8006f7c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800302a:	202b      	movs	r0, #43	; 0x2b
 800302c:	f7ff fcc2 	bl	80029b4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8003030:	2201      	movs	r2, #1
 8003032:	2140      	movs	r1, #64	; 0x40
 8003034:	4831      	ldr	r0, [pc, #196]	; (80030fc <ILI9341_Draw_Pixel+0x188>)
 8003036:	f003 ffa1 	bl	8006f7c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800303a:	2201      	movs	r2, #1
 800303c:	2110      	movs	r1, #16
 800303e:	482f      	ldr	r0, [pc, #188]	; (80030fc <ILI9341_Draw_Pixel+0x188>)
 8003040:	f003 ff9c 	bl	8006f7c <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003044:	2200      	movs	r2, #0
 8003046:	2110      	movs	r1, #16
 8003048:	482c      	ldr	r0, [pc, #176]	; (80030fc <ILI9341_Draw_Pixel+0x188>)
 800304a:	f003 ff97 	bl	8006f7c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 800304e:	88bb      	ldrh	r3, [r7, #4]
 8003050:	0a1b      	lsrs	r3, r3, #8
 8003052:	b29b      	uxth	r3, r3
 8003054:	b2db      	uxtb	r3, r3
 8003056:	743b      	strb	r3, [r7, #16]
 8003058:	88bb      	ldrh	r3, [r7, #4]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	747b      	strb	r3, [r7, #17]
 800305e:	88bb      	ldrh	r3, [r7, #4]
 8003060:	3301      	adds	r3, #1
 8003062:	121b      	asrs	r3, r3, #8
 8003064:	b2db      	uxtb	r3, r3
 8003066:	74bb      	strb	r3, [r7, #18]
 8003068:	88bb      	ldrh	r3, [r7, #4]
 800306a:	b2db      	uxtb	r3, r3
 800306c:	3301      	adds	r3, #1
 800306e:	b2db      	uxtb	r3, r3
 8003070:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8003072:	f107 0110 	add.w	r1, r7, #16
 8003076:	2301      	movs	r3, #1
 8003078:	2204      	movs	r2, #4
 800307a:	4821      	ldr	r0, [pc, #132]	; (8003100 <ILI9341_Draw_Pixel+0x18c>)
 800307c:	f008 fcb9 	bl	800b9f2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003080:	2201      	movs	r2, #1
 8003082:	2110      	movs	r1, #16
 8003084:	481d      	ldr	r0, [pc, #116]	; (80030fc <ILI9341_Draw_Pixel+0x188>)
 8003086:	f003 ff79 	bl	8006f7c <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800308a:	2200      	movs	r2, #0
 800308c:	2140      	movs	r1, #64	; 0x40
 800308e:	481b      	ldr	r0, [pc, #108]	; (80030fc <ILI9341_Draw_Pixel+0x188>)
 8003090:	f003 ff74 	bl	8006f7c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8003094:	2200      	movs	r2, #0
 8003096:	2110      	movs	r1, #16
 8003098:	4818      	ldr	r0, [pc, #96]	; (80030fc <ILI9341_Draw_Pixel+0x188>)
 800309a:	f003 ff6f 	bl	8006f7c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 800309e:	202c      	movs	r0, #44	; 0x2c
 80030a0:	f7ff fc88 	bl	80029b4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80030a4:	2201      	movs	r2, #1
 80030a6:	2140      	movs	r1, #64	; 0x40
 80030a8:	4814      	ldr	r0, [pc, #80]	; (80030fc <ILI9341_Draw_Pixel+0x188>)
 80030aa:	f003 ff67 	bl	8006f7c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80030ae:	2201      	movs	r2, #1
 80030b0:	2110      	movs	r1, #16
 80030b2:	4812      	ldr	r0, [pc, #72]	; (80030fc <ILI9341_Draw_Pixel+0x188>)
 80030b4:	f003 ff62 	bl	8006f7c <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80030b8:	2200      	movs	r2, #0
 80030ba:	2110      	movs	r1, #16
 80030bc:	480f      	ldr	r0, [pc, #60]	; (80030fc <ILI9341_Draw_Pixel+0x188>)
 80030be:	f003 ff5d 	bl	8006f7c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80030c2:	887b      	ldrh	r3, [r7, #2]
 80030c4:	0a1b      	lsrs	r3, r3, #8
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	733b      	strb	r3, [r7, #12]
 80030cc:	887b      	ldrh	r3, [r7, #2]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80030d2:	f107 010c 	add.w	r1, r7, #12
 80030d6:	2301      	movs	r3, #1
 80030d8:	2202      	movs	r2, #2
 80030da:	4809      	ldr	r0, [pc, #36]	; (8003100 <ILI9341_Draw_Pixel+0x18c>)
 80030dc:	f008 fc89 	bl	800b9f2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80030e0:	2201      	movs	r2, #1
 80030e2:	2110      	movs	r1, #16
 80030e4:	4805      	ldr	r0, [pc, #20]	; (80030fc <ILI9341_Draw_Pixel+0x188>)
 80030e6:	f003 ff49 	bl	8006f7c <HAL_GPIO_WritePin>
 80030ea:	e000      	b.n	80030ee <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80030ec:	bf00      	nop
	
}
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	2000000e 	.word	0x2000000e
 80030f8:	2000000c 	.word	0x2000000c
 80030fc:	40021000 	.word	0x40021000
 8003100:	2000033c 	.word	0x2000033c

08003104 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8003104:	b590      	push	{r4, r7, lr}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	4604      	mov	r4, r0
 800310c:	4608      	mov	r0, r1
 800310e:	4611      	mov	r1, r2
 8003110:	461a      	mov	r2, r3
 8003112:	4623      	mov	r3, r4
 8003114:	80fb      	strh	r3, [r7, #6]
 8003116:	4603      	mov	r3, r0
 8003118:	80bb      	strh	r3, [r7, #4]
 800311a:	460b      	mov	r3, r1
 800311c:	807b      	strh	r3, [r7, #2]
 800311e:	4613      	mov	r3, r2
 8003120:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8003122:	4b24      	ldr	r3, [pc, #144]	; (80031b4 <ILI9341_Draw_Rectangle+0xb0>)
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	b29b      	uxth	r3, r3
 8003128:	88fa      	ldrh	r2, [r7, #6]
 800312a:	429a      	cmp	r2, r3
 800312c:	d23d      	bcs.n	80031aa <ILI9341_Draw_Rectangle+0xa6>
 800312e:	4b22      	ldr	r3, [pc, #136]	; (80031b8 <ILI9341_Draw_Rectangle+0xb4>)
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	b29b      	uxth	r3, r3
 8003134:	88ba      	ldrh	r2, [r7, #4]
 8003136:	429a      	cmp	r2, r3
 8003138:	d237      	bcs.n	80031aa <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 800313a:	88fa      	ldrh	r2, [r7, #6]
 800313c:	887b      	ldrh	r3, [r7, #2]
 800313e:	4413      	add	r3, r2
 8003140:	4a1c      	ldr	r2, [pc, #112]	; (80031b4 <ILI9341_Draw_Rectangle+0xb0>)
 8003142:	8812      	ldrh	r2, [r2, #0]
 8003144:	b292      	uxth	r2, r2
 8003146:	4293      	cmp	r3, r2
 8003148:	dd05      	ble.n	8003156 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 800314a:	4b1a      	ldr	r3, [pc, #104]	; (80031b4 <ILI9341_Draw_Rectangle+0xb0>)
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	b29a      	uxth	r2, r3
 8003150:	88fb      	ldrh	r3, [r7, #6]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8003156:	88ba      	ldrh	r2, [r7, #4]
 8003158:	883b      	ldrh	r3, [r7, #0]
 800315a:	4413      	add	r3, r2
 800315c:	4a16      	ldr	r2, [pc, #88]	; (80031b8 <ILI9341_Draw_Rectangle+0xb4>)
 800315e:	8812      	ldrh	r2, [r2, #0]
 8003160:	b292      	uxth	r2, r2
 8003162:	4293      	cmp	r3, r2
 8003164:	dd05      	ble.n	8003172 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8003166:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <ILI9341_Draw_Rectangle+0xb4>)
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	b29a      	uxth	r2, r3
 800316c:	88bb      	ldrh	r3, [r7, #4]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8003172:	88fa      	ldrh	r2, [r7, #6]
 8003174:	887b      	ldrh	r3, [r7, #2]
 8003176:	4413      	add	r3, r2
 8003178:	b29b      	uxth	r3, r3
 800317a:	3b01      	subs	r3, #1
 800317c:	b29c      	uxth	r4, r3
 800317e:	88ba      	ldrh	r2, [r7, #4]
 8003180:	883b      	ldrh	r3, [r7, #0]
 8003182:	4413      	add	r3, r2
 8003184:	b29b      	uxth	r3, r3
 8003186:	3b01      	subs	r3, #1
 8003188:	b29b      	uxth	r3, r3
 800318a:	88b9      	ldrh	r1, [r7, #4]
 800318c:	88f8      	ldrh	r0, [r7, #6]
 800318e:	4622      	mov	r2, r4
 8003190:	f7ff fc5e 	bl	8002a50 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8003194:	883b      	ldrh	r3, [r7, #0]
 8003196:	887a      	ldrh	r2, [r7, #2]
 8003198:	fb02 f303 	mul.w	r3, r2, r3
 800319c:	461a      	mov	r2, r3
 800319e:	8b3b      	ldrh	r3, [r7, #24]
 80031a0:	4611      	mov	r1, r2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff fe2a 	bl	8002dfc <ILI9341_Draw_Colour_Burst>
 80031a8:	e000      	b.n	80031ac <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80031aa:	bf00      	nop
}
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd90      	pop	{r4, r7, pc}
 80031b2:	bf00      	nop
 80031b4:	2000000e 	.word	0x2000000e
 80031b8:	2000000c 	.word	0x2000000c

080031bc <menu>:
uint8_t pointer_on_selected_menu =1;
//uint8_t p =0;
//void print_sign(p);

void menu()
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
	Menu_SetGenericWriteCallback(Generic_Write);  //передача показника на Generic_Write функцію  point in Menu_SetGenericWriteCallback
 80031c2:	4832      	ldr	r0, [pc, #200]	; (800328c <menu+0xd0>)
 80031c4:	f000 fd4a 	bl	8003c5c <Menu_SetGenericWriteCallback>

	//print_all_top_menu();
	Menu_Navigate(&Menu_1);
 80031c8:	4831      	ldr	r0, [pc, #196]	; (8003290 <menu+0xd4>)
 80031ca:	f000 fd19 	bl	8003c00 <Menu_Navigate>
//	print_sign(p);
//	Menu_Navigate(&Menu_2);
//	Menu_Navigate(&Menu_3);
	while (1)
	  {
	   uint8_t pressed_key = getPressKey();
 80031ce:	f000 fc4f 	bl	8003a70 <getPressKey>
 80031d2:	4603      	mov	r3, r0
 80031d4:	71fb      	strb	r3, [r7, #7]

	   if (pressed_key != BUTTON_NOTHING && !flagPressed)
 80031d6:	79fb      	ldrb	r3, [r7, #7]
 80031d8:	2bff      	cmp	r3, #255	; 0xff
 80031da:	d04a      	beq.n	8003272 <menu+0xb6>
 80031dc:	4b2d      	ldr	r3, [pc, #180]	; (8003294 <menu+0xd8>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	f083 0301 	eor.w	r3, r3, #1
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d043      	beq.n	8003272 <menu+0xb6>
	   {
			flagPressed = true;
 80031ea:	4b2a      	ldr	r3, [pc, #168]	; (8003294 <menu+0xd8>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	701a      	strb	r2, [r3, #0]
			switch(pressed_key)
 80031f0:	79fb      	ldrb	r3, [r7, #7]
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d83b      	bhi.n	800326e <menu+0xb2>
 80031f6:	a201      	add	r2, pc, #4	; (adr r2, 80031fc <menu+0x40>)
 80031f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fc:	08003211 	.word	0x08003211
 8003200:	08003221 	.word	0x08003221
 8003204:	0800323d 	.word	0x0800323d
 8003208:	08003259 	.word	0x08003259
 800320c:	08003269 	.word	0x08003269
			{
				case BUTTON_LEFT:
					Menu_Navigate(MENU_PARENT);
 8003210:	f000 fcea 	bl	8003be8 <Menu_GetCurrentMenu>
 8003214:	4603      	mov	r3, r0
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fcf1 	bl	8003c00 <Menu_Navigate>
					break;
 800321e:	e027      	b.n	8003270 <menu+0xb4>

				case BUTTON_UP:
					pointer_on_selected_menu--;			// <<<<<<<<<<<<<<<<
 8003220:	4b1d      	ldr	r3, [pc, #116]	; (8003298 <menu+0xdc>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	3b01      	subs	r3, #1
 8003226:	b2da      	uxtb	r2, r3
 8003228:	4b1b      	ldr	r3, [pc, #108]	; (8003298 <menu+0xdc>)
 800322a:	701a      	strb	r2, [r3, #0]
					Menu_Navigate(MENU_PREVIOUS);
 800322c:	f000 fcdc 	bl	8003be8 <Menu_GetCurrentMenu>
 8003230:	4603      	mov	r3, r0
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fce3 	bl	8003c00 <Menu_Navigate>
					break;
 800323a:	e019      	b.n	8003270 <menu+0xb4>

				case BUTTON_DOWN:
					pointer_on_selected_menu++;			// <<<<<<<<<<<<<<<<
 800323c:	4b16      	ldr	r3, [pc, #88]	; (8003298 <menu+0xdc>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	3301      	adds	r3, #1
 8003242:	b2da      	uxtb	r2, r3
 8003244:	4b14      	ldr	r3, [pc, #80]	; (8003298 <menu+0xdc>)
 8003246:	701a      	strb	r2, [r3, #0]
					Menu_Navigate(MENU_NEXT);
 8003248:	f000 fcce 	bl	8003be8 <Menu_GetCurrentMenu>
 800324c:	4603      	mov	r3, r0
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f000 fcd5 	bl	8003c00 <Menu_Navigate>
					break;
 8003256:	e00b      	b.n	8003270 <menu+0xb4>

				case BUTTON_RIGHT:
					Menu_Navigate(MENU_CHILD);
 8003258:	f000 fcc6 	bl	8003be8 <Menu_GetCurrentMenu>
 800325c:	4603      	mov	r3, r0
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	4618      	mov	r0, r3
 8003262:	f000 fccd 	bl	8003c00 <Menu_Navigate>
					break;
 8003266:	e003      	b.n	8003270 <menu+0xb4>

				case BUTTON_SELECT:
					Menu_EnterCurrentItem();
 8003268:	f000 fd0c 	bl	8003c84 <Menu_EnterCurrentItem>
					break;
 800326c:	e000      	b.n	8003270 <menu+0xb4>

			 default:
			  break;
 800326e:	bf00      	nop
			switch(pressed_key)
 8003270:	e00b      	b.n	800328a <menu+0xce>
			}
	   }
	   else if (getPressKey() == BUTTON_NOTHING && flagPressed)
 8003272:	f000 fbfd 	bl	8003a70 <getPressKey>
 8003276:	4603      	mov	r3, r0
 8003278:	2bff      	cmp	r3, #255	; 0xff
 800327a:	d1a8      	bne.n	80031ce <menu+0x12>
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <menu+0xd8>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0a4      	beq.n	80031ce <menu+0x12>
	   {
		   flagPressed = false;
 8003284:	4b03      	ldr	r3, [pc, #12]	; (8003294 <menu+0xd8>)
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
	  {
 800328a:	e7a0      	b.n	80031ce <menu+0x12>
 800328c:	08003ba1 	.word	0x08003ba1
 8003290:	080115c4 	.word	0x080115c4
 8003294:	200002b4 	.word	0x200002b4
 8003298:	2000014c 	.word	0x2000014c

0800329c <print_all_top_menu>:
	  }
}
// -----------------------------------------------------------------------
//// TEST PRINT FUNCTION <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
void print_all_top_menu(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 80032a2:	2300      	movs	r3, #0
 80032a4:	9301      	str	r3, [sp, #4]
 80032a6:	2302      	movs	r3, #2
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032ae:	226e      	movs	r2, #110	; 0x6e
 80032b0:	211e      	movs	r1, #30
 80032b2:	4884      	ldr	r0, [pc, #528]	; (80034c4 <print_all_top_menu+0x228>)
 80032b4:	f7ff fb44 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 80032b8:	2300      	movs	r3, #0
 80032ba:	9301      	str	r3, [sp, #4]
 80032bc:	2302      	movs	r3, #2
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032c4:	2282      	movs	r2, #130	; 0x82
 80032c6:	211e      	movs	r1, #30
 80032c8:	487e      	ldr	r0, [pc, #504]	; (80034c4 <print_all_top_menu+0x228>)
 80032ca:	f7ff fb39 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 80032ce:	2300      	movs	r3, #0
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	2302      	movs	r3, #2
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032da:	2296      	movs	r2, #150	; 0x96
 80032dc:	211e      	movs	r1, #30
 80032de:	4879      	ldr	r0, [pc, #484]	; (80034c4 <print_all_top_menu+0x228>)
 80032e0:	f7ff fb2e 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 80032e4:	2300      	movs	r3, #0
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	2302      	movs	r3, #2
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032f0:	22aa      	movs	r2, #170	; 0xaa
 80032f2:	211e      	movs	r1, #30
 80032f4:	4873      	ldr	r0, [pc, #460]	; (80034c4 <print_all_top_menu+0x228>)
 80032f6:	f7ff fb23 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 80032fa:	2300      	movs	r3, #0
 80032fc:	9301      	str	r3, [sp, #4]
 80032fe:	2302      	movs	r3, #2
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003306:	22be      	movs	r2, #190	; 0xbe
 8003308:	211e      	movs	r1, #30
 800330a:	486e      	ldr	r0, [pc, #440]	; (80034c4 <print_all_top_menu+0x228>)
 800330c:	f7ff fb18 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 8003310:	2300      	movs	r3, #0
 8003312:	9301      	str	r3, [sp, #4]
 8003314:	2302      	movs	r3, #2
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800331c:	22d2      	movs	r2, #210	; 0xd2
 800331e:	211e      	movs	r1, #30
 8003320:	4868      	ldr	r0, [pc, #416]	; (80034c4 <print_all_top_menu+0x228>)
 8003322:	f7ff fb0d 	bl	8002940 <ILI9341_Draw_Text>

	// Print all main menus
	ILI9341_Draw_Text(main_menus[0], 30, 110, WHITE, 2, BLACK);
 8003326:	2300      	movs	r3, #0
 8003328:	9301      	str	r3, [sp, #4]
 800332a:	2302      	movs	r3, #2
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003332:	226e      	movs	r2, #110	; 0x6e
 8003334:	211e      	movs	r1, #30
 8003336:	4864      	ldr	r0, [pc, #400]	; (80034c8 <print_all_top_menu+0x22c>)
 8003338:	f7ff fb02 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[1], 30, 130, WHITE, 2, BLACK);
 800333c:	2300      	movs	r3, #0
 800333e:	9301      	str	r3, [sp, #4]
 8003340:	2302      	movs	r3, #2
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003348:	2282      	movs	r2, #130	; 0x82
 800334a:	211e      	movs	r1, #30
 800334c:	485f      	ldr	r0, [pc, #380]	; (80034cc <print_all_top_menu+0x230>)
 800334e:	f7ff faf7 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[2], 30, 150, WHITE, 2, BLACK);
 8003352:	2300      	movs	r3, #0
 8003354:	9301      	str	r3, [sp, #4]
 8003356:	2302      	movs	r3, #2
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800335e:	2296      	movs	r2, #150	; 0x96
 8003360:	211e      	movs	r1, #30
 8003362:	485b      	ldr	r0, [pc, #364]	; (80034d0 <print_all_top_menu+0x234>)
 8003364:	f7ff faec 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[3], 30, 170, WHITE, 2, BLACK);
 8003368:	2300      	movs	r3, #0
 800336a:	9301      	str	r3, [sp, #4]
 800336c:	2302      	movs	r3, #2
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003374:	22aa      	movs	r2, #170	; 0xaa
 8003376:	211e      	movs	r1, #30
 8003378:	4856      	ldr	r0, [pc, #344]	; (80034d4 <print_all_top_menu+0x238>)
 800337a:	f7ff fae1 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(main_menus[4], 30, 190, WHITE, 2, BLACK);
 800337e:	2300      	movs	r3, #0
 8003380:	9301      	str	r3, [sp, #4]
 8003382:	2302      	movs	r3, #2
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800338a:	22be      	movs	r2, #190	; 0xbe
 800338c:	211e      	movs	r1, #30
 800338e:	4852      	ldr	r0, [pc, #328]	; (80034d8 <print_all_top_menu+0x23c>)
 8003390:	f7ff fad6 	bl	8002940 <ILI9341_Draw_Text>

	//
	if(pointer_on_selected_menu <= 0)
 8003394:	4b51      	ldr	r3, [pc, #324]	; (80034dc <print_all_top_menu+0x240>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d102      	bne.n	80033a2 <print_all_top_menu+0x106>
	{
		pointer_on_selected_menu = 5;
 800339c:	4b4f      	ldr	r3, [pc, #316]	; (80034dc <print_all_top_menu+0x240>)
 800339e:	2205      	movs	r2, #5
 80033a0:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 6)
 80033a2:	4b4e      	ldr	r3, [pc, #312]	; (80034dc <print_all_top_menu+0x240>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b05      	cmp	r3, #5
 80033a8:	d902      	bls.n	80033b0 <print_all_top_menu+0x114>
	{
		pointer_on_selected_menu = 1;
 80033aa:	4b4c      	ldr	r3, [pc, #304]	; (80034dc <print_all_top_menu+0x240>)
 80033ac:	2201      	movs	r2, #1
 80033ae:	701a      	strb	r2, [r3, #0]
	}
	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 80033b0:	2300      	movs	r3, #0
 80033b2:	9301      	str	r3, [sp, #4]
 80033b4:	2302      	movs	r3, #2
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033bc:	226e      	movs	r2, #110	; 0x6e
 80033be:	2105      	movs	r1, #5
 80033c0:	4847      	ldr	r0, [pc, #284]	; (80034e0 <print_all_top_menu+0x244>)
 80033c2:	f7ff fabd 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 80033c6:	2300      	movs	r3, #0
 80033c8:	9301      	str	r3, [sp, #4]
 80033ca:	2302      	movs	r3, #2
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033d2:	2282      	movs	r2, #130	; 0x82
 80033d4:	2105      	movs	r1, #5
 80033d6:	4842      	ldr	r0, [pc, #264]	; (80034e0 <print_all_top_menu+0x244>)
 80033d8:	f7ff fab2 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 80033dc:	2300      	movs	r3, #0
 80033de:	9301      	str	r3, [sp, #4]
 80033e0:	2302      	movs	r3, #2
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033e8:	2296      	movs	r2, #150	; 0x96
 80033ea:	2105      	movs	r1, #5
 80033ec:	483c      	ldr	r0, [pc, #240]	; (80034e0 <print_all_top_menu+0x244>)
 80033ee:	f7ff faa7 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 80033f2:	2300      	movs	r3, #0
 80033f4:	9301      	str	r3, [sp, #4]
 80033f6:	2302      	movs	r3, #2
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033fe:	22aa      	movs	r2, #170	; 0xaa
 8003400:	2105      	movs	r1, #5
 8003402:	4837      	ldr	r0, [pc, #220]	; (80034e0 <print_all_top_menu+0x244>)
 8003404:	f7ff fa9c 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 8003408:	2300      	movs	r3, #0
 800340a:	9301      	str	r3, [sp, #4]
 800340c:	2302      	movs	r3, #2
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003414:	22be      	movs	r2, #190	; 0xbe
 8003416:	2105      	movs	r1, #5
 8003418:	4831      	ldr	r0, [pc, #196]	; (80034e0 <print_all_top_menu+0x244>)
 800341a:	f7ff fa91 	bl	8002940 <ILI9341_Draw_Text>

	// Point pointer on menu
	switch (pointer_on_selected_menu)
 800341e:	4b2f      	ldr	r3, [pc, #188]	; (80034dc <print_all_top_menu+0x240>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	3b01      	subs	r3, #1
 8003424:	2b04      	cmp	r3, #4
 8003426:	d849      	bhi.n	80034bc <print_all_top_menu+0x220>
 8003428:	a201      	add	r2, pc, #4	; (adr r2, 8003430 <print_all_top_menu+0x194>)
 800342a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342e:	bf00      	nop
 8003430:	08003445 	.word	0x08003445
 8003434:	0800345d 	.word	0x0800345d
 8003438:	08003475 	.word	0x08003475
 800343c:	0800348d 	.word	0x0800348d
 8003440:	080034a5 	.word	0x080034a5
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 8003444:	2300      	movs	r3, #0
 8003446:	9301      	str	r3, [sp, #4]
 8003448:	2302      	movs	r3, #2
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003450:	226e      	movs	r2, #110	; 0x6e
 8003452:	2105      	movs	r1, #5
 8003454:	4823      	ldr	r0, [pc, #140]	; (80034e4 <print_all_top_menu+0x248>)
 8003456:	f7ff fa73 	bl	8002940 <ILI9341_Draw_Text>
			break;
 800345a:	e02f      	b.n	80034bc <print_all_top_menu+0x220>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 800345c:	2300      	movs	r3, #0
 800345e:	9301      	str	r3, [sp, #4]
 8003460:	2302      	movs	r3, #2
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003468:	2282      	movs	r2, #130	; 0x82
 800346a:	2105      	movs	r1, #5
 800346c:	481d      	ldr	r0, [pc, #116]	; (80034e4 <print_all_top_menu+0x248>)
 800346e:	f7ff fa67 	bl	8002940 <ILI9341_Draw_Text>
			break;
 8003472:	e023      	b.n	80034bc <print_all_top_menu+0x220>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 8003474:	2300      	movs	r3, #0
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	2302      	movs	r3, #2
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003480:	2296      	movs	r2, #150	; 0x96
 8003482:	2105      	movs	r1, #5
 8003484:	4817      	ldr	r0, [pc, #92]	; (80034e4 <print_all_top_menu+0x248>)
 8003486:	f7ff fa5b 	bl	8002940 <ILI9341_Draw_Text>
			break;
 800348a:	e017      	b.n	80034bc <print_all_top_menu+0x220>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 800348c:	2300      	movs	r3, #0
 800348e:	9301      	str	r3, [sp, #4]
 8003490:	2302      	movs	r3, #2
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003498:	22aa      	movs	r2, #170	; 0xaa
 800349a:	2105      	movs	r1, #5
 800349c:	4811      	ldr	r0, [pc, #68]	; (80034e4 <print_all_top_menu+0x248>)
 800349e:	f7ff fa4f 	bl	8002940 <ILI9341_Draw_Text>
			break;
 80034a2:	e00b      	b.n	80034bc <print_all_top_menu+0x220>
		case 5:
			ILI9341_Draw_Text( "->", 5, 190, RED, 2, BLACK);
 80034a4:	2300      	movs	r3, #0
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	2302      	movs	r3, #2
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034b0:	22be      	movs	r2, #190	; 0xbe
 80034b2:	2105      	movs	r1, #5
 80034b4:	480b      	ldr	r0, [pc, #44]	; (80034e4 <print_all_top_menu+0x248>)
 80034b6:	f7ff fa43 	bl	8002940 <ILI9341_Draw_Text>
			break;
 80034ba:	bf00      	nop
	}

}
 80034bc:	bf00      	nop
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	08011238 	.word	0x08011238
 80034c8:	20000014 	.word	0x20000014
 80034cc:	20000032 	.word	0x20000032
 80034d0:	20000050 	.word	0x20000050
 80034d4:	2000006e 	.word	0x2000006e
 80034d8:	2000008c 	.word	0x2000008c
 80034dc:	2000014c 	.word	0x2000014c
 80034e0:	0801125c 	.word	0x0801125c
 80034e4:	08011260 	.word	0x08011260

080034e8 <print_all_menu_1_menus>:
// -----------------------------------------------------------------------
void print_all_menu_1_menus(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 80034ee:	2300      	movs	r3, #0
 80034f0:	9301      	str	r3, [sp, #4]
 80034f2:	2302      	movs	r3, #2
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034fa:	226e      	movs	r2, #110	; 0x6e
 80034fc:	211e      	movs	r1, #30
 80034fe:	4877      	ldr	r0, [pc, #476]	; (80036dc <print_all_menu_1_menus+0x1f4>)
 8003500:	f7ff fa1e 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 8003504:	2300      	movs	r3, #0
 8003506:	9301      	str	r3, [sp, #4]
 8003508:	2302      	movs	r3, #2
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003510:	2282      	movs	r2, #130	; 0x82
 8003512:	211e      	movs	r1, #30
 8003514:	4871      	ldr	r0, [pc, #452]	; (80036dc <print_all_menu_1_menus+0x1f4>)
 8003516:	f7ff fa13 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 800351a:	2300      	movs	r3, #0
 800351c:	9301      	str	r3, [sp, #4]
 800351e:	2302      	movs	r3, #2
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003526:	2296      	movs	r2, #150	; 0x96
 8003528:	211e      	movs	r1, #30
 800352a:	486c      	ldr	r0, [pc, #432]	; (80036dc <print_all_menu_1_menus+0x1f4>)
 800352c:	f7ff fa08 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 8003530:	2300      	movs	r3, #0
 8003532:	9301      	str	r3, [sp, #4]
 8003534:	2302      	movs	r3, #2
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800353c:	22aa      	movs	r2, #170	; 0xaa
 800353e:	211e      	movs	r1, #30
 8003540:	4866      	ldr	r0, [pc, #408]	; (80036dc <print_all_menu_1_menus+0x1f4>)
 8003542:	f7ff f9fd 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 8003546:	2300      	movs	r3, #0
 8003548:	9301      	str	r3, [sp, #4]
 800354a:	2302      	movs	r3, #2
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003552:	22be      	movs	r2, #190	; 0xbe
 8003554:	211e      	movs	r1, #30
 8003556:	4861      	ldr	r0, [pc, #388]	; (80036dc <print_all_menu_1_menus+0x1f4>)
 8003558:	f7ff f9f2 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 800355c:	2300      	movs	r3, #0
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	2302      	movs	r3, #2
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003568:	22d2      	movs	r2, #210	; 0xd2
 800356a:	211e      	movs	r1, #30
 800356c:	485b      	ldr	r0, [pc, #364]	; (80036dc <print_all_menu_1_menus+0x1f4>)
 800356e:	f7ff f9e7 	bl	8002940 <ILI9341_Draw_Text>

	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 8003572:	2300      	movs	r3, #0
 8003574:	9301      	str	r3, [sp, #4]
 8003576:	2302      	movs	r3, #2
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800357e:	226e      	movs	r2, #110	; 0x6e
 8003580:	2105      	movs	r1, #5
 8003582:	4857      	ldr	r0, [pc, #348]	; (80036e0 <print_all_menu_1_menus+0x1f8>)
 8003584:	f7ff f9dc 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 8003588:	2300      	movs	r3, #0
 800358a:	9301      	str	r3, [sp, #4]
 800358c:	2302      	movs	r3, #2
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003594:	2282      	movs	r2, #130	; 0x82
 8003596:	2105      	movs	r1, #5
 8003598:	4851      	ldr	r0, [pc, #324]	; (80036e0 <print_all_menu_1_menus+0x1f8>)
 800359a:	f7ff f9d1 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 800359e:	2300      	movs	r3, #0
 80035a0:	9301      	str	r3, [sp, #4]
 80035a2:	2302      	movs	r3, #2
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035aa:	2296      	movs	r2, #150	; 0x96
 80035ac:	2105      	movs	r1, #5
 80035ae:	484c      	ldr	r0, [pc, #304]	; (80036e0 <print_all_menu_1_menus+0x1f8>)
 80035b0:	f7ff f9c6 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 80035b4:	2300      	movs	r3, #0
 80035b6:	9301      	str	r3, [sp, #4]
 80035b8:	2302      	movs	r3, #2
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035c0:	22aa      	movs	r2, #170	; 0xaa
 80035c2:	2105      	movs	r1, #5
 80035c4:	4846      	ldr	r0, [pc, #280]	; (80036e0 <print_all_menu_1_menus+0x1f8>)
 80035c6:	f7ff f9bb 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 80035ca:	2300      	movs	r3, #0
 80035cc:	9301      	str	r3, [sp, #4]
 80035ce:	2302      	movs	r3, #2
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035d6:	22be      	movs	r2, #190	; 0xbe
 80035d8:	2105      	movs	r1, #5
 80035da:	4841      	ldr	r0, [pc, #260]	; (80036e0 <print_all_menu_1_menus+0x1f8>)
 80035dc:	f7ff f9b0 	bl	8002940 <ILI9341_Draw_Text>

	ILI9341_Draw_Text(menu_1[0], 30, 110, WHITE, 2, BLACK);
 80035e0:	2300      	movs	r3, #0
 80035e2:	9301      	str	r3, [sp, #4]
 80035e4:	2302      	movs	r3, #2
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035ec:	226e      	movs	r2, #110	; 0x6e
 80035ee:	211e      	movs	r1, #30
 80035f0:	483c      	ldr	r0, [pc, #240]	; (80036e4 <print_all_menu_1_menus+0x1fc>)
 80035f2:	f7ff f9a5 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[1], 30, 130, WHITE, 2, BLACK);
 80035f6:	2300      	movs	r3, #0
 80035f8:	9301      	str	r3, [sp, #4]
 80035fa:	2302      	movs	r3, #2
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003602:	2282      	movs	r2, #130	; 0x82
 8003604:	211e      	movs	r1, #30
 8003606:	4838      	ldr	r0, [pc, #224]	; (80036e8 <print_all_menu_1_menus+0x200>)
 8003608:	f7ff f99a 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[2], 30, 150, WHITE, 2, BLACK);
 800360c:	2300      	movs	r3, #0
 800360e:	9301      	str	r3, [sp, #4]
 8003610:	2302      	movs	r3, #2
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003618:	2296      	movs	r2, #150	; 0x96
 800361a:	211e      	movs	r1, #30
 800361c:	4833      	ldr	r0, [pc, #204]	; (80036ec <print_all_menu_1_menus+0x204>)
 800361e:	f7ff f98f 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1[3], 30, 170, WHITE, 2, BLACK);
 8003622:	2300      	movs	r3, #0
 8003624:	9301      	str	r3, [sp, #4]
 8003626:	2302      	movs	r3, #2
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800362e:	22aa      	movs	r2, #170	; 0xaa
 8003630:	211e      	movs	r1, #30
 8003632:	482f      	ldr	r0, [pc, #188]	; (80036f0 <print_all_menu_1_menus+0x208>)
 8003634:	f7ff f984 	bl	8002940 <ILI9341_Draw_Text>

	if(pointer_on_selected_menu <= 0)
 8003638:	4b2e      	ldr	r3, [pc, #184]	; (80036f4 <print_all_menu_1_menus+0x20c>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d102      	bne.n	8003646 <print_all_menu_1_menus+0x15e>
	{
		pointer_on_selected_menu = 4;
 8003640:	4b2c      	ldr	r3, [pc, #176]	; (80036f4 <print_all_menu_1_menus+0x20c>)
 8003642:	2204      	movs	r2, #4
 8003644:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 5)
 8003646:	4b2b      	ldr	r3, [pc, #172]	; (80036f4 <print_all_menu_1_menus+0x20c>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b04      	cmp	r3, #4
 800364c:	d902      	bls.n	8003654 <print_all_menu_1_menus+0x16c>
	{
		pointer_on_selected_menu = 1;
 800364e:	4b29      	ldr	r3, [pc, #164]	; (80036f4 <print_all_menu_1_menus+0x20c>)
 8003650:	2201      	movs	r2, #1
 8003652:	701a      	strb	r2, [r3, #0]
	}

	switch (pointer_on_selected_menu)
 8003654:	4b27      	ldr	r3, [pc, #156]	; (80036f4 <print_all_menu_1_menus+0x20c>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	3b01      	subs	r3, #1
 800365a:	2b03      	cmp	r3, #3
 800365c:	d83a      	bhi.n	80036d4 <print_all_menu_1_menus+0x1ec>
 800365e:	a201      	add	r2, pc, #4	; (adr r2, 8003664 <print_all_menu_1_menus+0x17c>)
 8003660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003664:	08003675 	.word	0x08003675
 8003668:	0800368d 	.word	0x0800368d
 800366c:	080036a5 	.word	0x080036a5
 8003670:	080036bd 	.word	0x080036bd
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 8003674:	2300      	movs	r3, #0
 8003676:	9301      	str	r3, [sp, #4]
 8003678:	2302      	movs	r3, #2
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003680:	226e      	movs	r2, #110	; 0x6e
 8003682:	2105      	movs	r1, #5
 8003684:	481c      	ldr	r0, [pc, #112]	; (80036f8 <print_all_menu_1_menus+0x210>)
 8003686:	f7ff f95b 	bl	8002940 <ILI9341_Draw_Text>
			break;
 800368a:	e023      	b.n	80036d4 <print_all_menu_1_menus+0x1ec>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 800368c:	2300      	movs	r3, #0
 800368e:	9301      	str	r3, [sp, #4]
 8003690:	2302      	movs	r3, #2
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003698:	2282      	movs	r2, #130	; 0x82
 800369a:	2105      	movs	r1, #5
 800369c:	4816      	ldr	r0, [pc, #88]	; (80036f8 <print_all_menu_1_menus+0x210>)
 800369e:	f7ff f94f 	bl	8002940 <ILI9341_Draw_Text>
			break;
 80036a2:	e017      	b.n	80036d4 <print_all_menu_1_menus+0x1ec>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 80036a4:	2300      	movs	r3, #0
 80036a6:	9301      	str	r3, [sp, #4]
 80036a8:	2302      	movs	r3, #2
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80036b0:	2296      	movs	r2, #150	; 0x96
 80036b2:	2105      	movs	r1, #5
 80036b4:	4810      	ldr	r0, [pc, #64]	; (80036f8 <print_all_menu_1_menus+0x210>)
 80036b6:	f7ff f943 	bl	8002940 <ILI9341_Draw_Text>
			break;
 80036ba:	e00b      	b.n	80036d4 <print_all_menu_1_menus+0x1ec>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 80036bc:	2300      	movs	r3, #0
 80036be:	9301      	str	r3, [sp, #4]
 80036c0:	2302      	movs	r3, #2
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80036c8:	22aa      	movs	r2, #170	; 0xaa
 80036ca:	2105      	movs	r1, #5
 80036cc:	480a      	ldr	r0, [pc, #40]	; (80036f8 <print_all_menu_1_menus+0x210>)
 80036ce:	f7ff f937 	bl	8002940 <ILI9341_Draw_Text>
			break;
 80036d2:	bf00      	nop
	}
}
 80036d4:	bf00      	nop
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	08011238 	.word	0x08011238
 80036e0:	0801125c 	.word	0x0801125c
 80036e4:	200000ac 	.word	0x200000ac
 80036e8:	200000c0 	.word	0x200000c0
 80036ec:	200000d4 	.word	0x200000d4
 80036f0:	200000e8 	.word	0x200000e8
 80036f4:	2000014c 	.word	0x2000014c
 80036f8:	08011260 	.word	0x08011260

080036fc <print_all_menu_1_1_menus>:
// -----------------------------------------------------------------------
void print_all_menu_1_1_menus(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af02      	add	r7, sp, #8
	// Claen all menu place
	ILI9341_Draw_Text( "                                   ", 30, 110, RED, 2, BLACK);
 8003702:	2300      	movs	r3, #0
 8003704:	9301      	str	r3, [sp, #4]
 8003706:	2302      	movs	r3, #2
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800370e:	226e      	movs	r2, #110	; 0x6e
 8003710:	211e      	movs	r1, #30
 8003712:	4877      	ldr	r0, [pc, #476]	; (80038f0 <print_all_menu_1_1_menus+0x1f4>)
 8003714:	f7ff f914 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 130, RED, 2, BLACK);
 8003718:	2300      	movs	r3, #0
 800371a:	9301      	str	r3, [sp, #4]
 800371c:	2302      	movs	r3, #2
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003724:	2282      	movs	r2, #130	; 0x82
 8003726:	211e      	movs	r1, #30
 8003728:	4871      	ldr	r0, [pc, #452]	; (80038f0 <print_all_menu_1_1_menus+0x1f4>)
 800372a:	f7ff f909 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 150, RED, 2, BLACK);
 800372e:	2300      	movs	r3, #0
 8003730:	9301      	str	r3, [sp, #4]
 8003732:	2302      	movs	r3, #2
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800373a:	2296      	movs	r2, #150	; 0x96
 800373c:	211e      	movs	r1, #30
 800373e:	486c      	ldr	r0, [pc, #432]	; (80038f0 <print_all_menu_1_1_menus+0x1f4>)
 8003740:	f7ff f8fe 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 170, RED, 2, BLACK);
 8003744:	2300      	movs	r3, #0
 8003746:	9301      	str	r3, [sp, #4]
 8003748:	2302      	movs	r3, #2
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003750:	22aa      	movs	r2, #170	; 0xaa
 8003752:	211e      	movs	r1, #30
 8003754:	4866      	ldr	r0, [pc, #408]	; (80038f0 <print_all_menu_1_1_menus+0x1f4>)
 8003756:	f7ff f8f3 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 190, RED, 2, BLACK);
 800375a:	2300      	movs	r3, #0
 800375c:	9301      	str	r3, [sp, #4]
 800375e:	2302      	movs	r3, #2
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003766:	22be      	movs	r2, #190	; 0xbe
 8003768:	211e      	movs	r1, #30
 800376a:	4861      	ldr	r0, [pc, #388]	; (80038f0 <print_all_menu_1_1_menus+0x1f4>)
 800376c:	f7ff f8e8 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "                                   ", 30, 210, RED, 2, BLACK);
 8003770:	2300      	movs	r3, #0
 8003772:	9301      	str	r3, [sp, #4]
 8003774:	2302      	movs	r3, #2
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800377c:	22d2      	movs	r2, #210	; 0xd2
 800377e:	211e      	movs	r1, #30
 8003780:	485b      	ldr	r0, [pc, #364]	; (80038f0 <print_all_menu_1_1_menus+0x1f4>)
 8003782:	f7ff f8dd 	bl	8002940 <ILI9341_Draw_Text>

	// Clearn all pointers on menu
	ILI9341_Draw_Text( "  ", 5, 110, WHITE, 2, BLACK);
 8003786:	2300      	movs	r3, #0
 8003788:	9301      	str	r3, [sp, #4]
 800378a:	2302      	movs	r3, #2
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003792:	226e      	movs	r2, #110	; 0x6e
 8003794:	2105      	movs	r1, #5
 8003796:	4857      	ldr	r0, [pc, #348]	; (80038f4 <print_all_menu_1_1_menus+0x1f8>)
 8003798:	f7ff f8d2 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 130, WHITE, 2, BLACK);
 800379c:	2300      	movs	r3, #0
 800379e:	9301      	str	r3, [sp, #4]
 80037a0:	2302      	movs	r3, #2
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037a8:	2282      	movs	r2, #130	; 0x82
 80037aa:	2105      	movs	r1, #5
 80037ac:	4851      	ldr	r0, [pc, #324]	; (80038f4 <print_all_menu_1_1_menus+0x1f8>)
 80037ae:	f7ff f8c7 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 150, WHITE, 2, BLACK);
 80037b2:	2300      	movs	r3, #0
 80037b4:	9301      	str	r3, [sp, #4]
 80037b6:	2302      	movs	r3, #2
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037be:	2296      	movs	r2, #150	; 0x96
 80037c0:	2105      	movs	r1, #5
 80037c2:	484c      	ldr	r0, [pc, #304]	; (80038f4 <print_all_menu_1_1_menus+0x1f8>)
 80037c4:	f7ff f8bc 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 170, WHITE, 2, BLACK);
 80037c8:	2300      	movs	r3, #0
 80037ca:	9301      	str	r3, [sp, #4]
 80037cc:	2302      	movs	r3, #2
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037d4:	22aa      	movs	r2, #170	; 0xaa
 80037d6:	2105      	movs	r1, #5
 80037d8:	4846      	ldr	r0, [pc, #280]	; (80038f4 <print_all_menu_1_1_menus+0x1f8>)
 80037da:	f7ff f8b1 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text( "  ", 5, 190, WHITE, 2, BLACK);
 80037de:	2300      	movs	r3, #0
 80037e0:	9301      	str	r3, [sp, #4]
 80037e2:	2302      	movs	r3, #2
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037ea:	22be      	movs	r2, #190	; 0xbe
 80037ec:	2105      	movs	r1, #5
 80037ee:	4841      	ldr	r0, [pc, #260]	; (80038f4 <print_all_menu_1_1_menus+0x1f8>)
 80037f0:	f7ff f8a6 	bl	8002940 <ILI9341_Draw_Text>

	ILI9341_Draw_Text(menu_1_1[0], 30, 110, WHITE, 2, BLACK);
 80037f4:	2300      	movs	r3, #0
 80037f6:	9301      	str	r3, [sp, #4]
 80037f8:	2302      	movs	r3, #2
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003800:	226e      	movs	r2, #110	; 0x6e
 8003802:	211e      	movs	r1, #30
 8003804:	483c      	ldr	r0, [pc, #240]	; (80038f8 <print_all_menu_1_1_menus+0x1fc>)
 8003806:	f7ff f89b 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[1], 30, 130, WHITE, 2, BLACK);
 800380a:	2300      	movs	r3, #0
 800380c:	9301      	str	r3, [sp, #4]
 800380e:	2302      	movs	r3, #2
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003816:	2282      	movs	r2, #130	; 0x82
 8003818:	211e      	movs	r1, #30
 800381a:	4838      	ldr	r0, [pc, #224]	; (80038fc <print_all_menu_1_1_menus+0x200>)
 800381c:	f7ff f890 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[2], 30, 150, WHITE, 2, BLACK);
 8003820:	2300      	movs	r3, #0
 8003822:	9301      	str	r3, [sp, #4]
 8003824:	2302      	movs	r3, #2
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800382c:	2296      	movs	r2, #150	; 0x96
 800382e:	211e      	movs	r1, #30
 8003830:	4833      	ldr	r0, [pc, #204]	; (8003900 <print_all_menu_1_1_menus+0x204>)
 8003832:	f7ff f885 	bl	8002940 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(menu_1_1[3], 30, 170, WHITE, 2, BLACK);
 8003836:	2300      	movs	r3, #0
 8003838:	9301      	str	r3, [sp, #4]
 800383a:	2302      	movs	r3, #2
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003842:	22aa      	movs	r2, #170	; 0xaa
 8003844:	211e      	movs	r1, #30
 8003846:	482f      	ldr	r0, [pc, #188]	; (8003904 <print_all_menu_1_1_menus+0x208>)
 8003848:	f7ff f87a 	bl	8002940 <ILI9341_Draw_Text>

	if(pointer_on_selected_menu <= 0)
 800384c:	4b2e      	ldr	r3, [pc, #184]	; (8003908 <print_all_menu_1_1_menus+0x20c>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d102      	bne.n	800385a <print_all_menu_1_1_menus+0x15e>
	{
		pointer_on_selected_menu = 4;
 8003854:	4b2c      	ldr	r3, [pc, #176]	; (8003908 <print_all_menu_1_1_menus+0x20c>)
 8003856:	2204      	movs	r2, #4
 8003858:	701a      	strb	r2, [r3, #0]
	}
	if(pointer_on_selected_menu >= 5)
 800385a:	4b2b      	ldr	r3, [pc, #172]	; (8003908 <print_all_menu_1_1_menus+0x20c>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b04      	cmp	r3, #4
 8003860:	d902      	bls.n	8003868 <print_all_menu_1_1_menus+0x16c>
	{
		pointer_on_selected_menu = 1;
 8003862:	4b29      	ldr	r3, [pc, #164]	; (8003908 <print_all_menu_1_1_menus+0x20c>)
 8003864:	2201      	movs	r2, #1
 8003866:	701a      	strb	r2, [r3, #0]
	}

	switch (pointer_on_selected_menu)
 8003868:	4b27      	ldr	r3, [pc, #156]	; (8003908 <print_all_menu_1_1_menus+0x20c>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	3b01      	subs	r3, #1
 800386e:	2b03      	cmp	r3, #3
 8003870:	d83a      	bhi.n	80038e8 <print_all_menu_1_1_menus+0x1ec>
 8003872:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <print_all_menu_1_1_menus+0x17c>)
 8003874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003878:	08003889 	.word	0x08003889
 800387c:	080038a1 	.word	0x080038a1
 8003880:	080038b9 	.word	0x080038b9
 8003884:	080038d1 	.word	0x080038d1
	{
		case 1:
			ILI9341_Draw_Text( "->", 5, 110, RED, 2, BLACK);
 8003888:	2300      	movs	r3, #0
 800388a:	9301      	str	r3, [sp, #4]
 800388c:	2302      	movs	r3, #2
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003894:	226e      	movs	r2, #110	; 0x6e
 8003896:	2105      	movs	r1, #5
 8003898:	481c      	ldr	r0, [pc, #112]	; (800390c <print_all_menu_1_1_menus+0x210>)
 800389a:	f7ff f851 	bl	8002940 <ILI9341_Draw_Text>
			break;
 800389e:	e023      	b.n	80038e8 <print_all_menu_1_1_menus+0x1ec>
		case 2:
			ILI9341_Draw_Text( "->", 5, 130, RED, 2, BLACK);
 80038a0:	2300      	movs	r3, #0
 80038a2:	9301      	str	r3, [sp, #4]
 80038a4:	2302      	movs	r3, #2
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80038ac:	2282      	movs	r2, #130	; 0x82
 80038ae:	2105      	movs	r1, #5
 80038b0:	4816      	ldr	r0, [pc, #88]	; (800390c <print_all_menu_1_1_menus+0x210>)
 80038b2:	f7ff f845 	bl	8002940 <ILI9341_Draw_Text>
			break;
 80038b6:	e017      	b.n	80038e8 <print_all_menu_1_1_menus+0x1ec>
		case 3:
			ILI9341_Draw_Text( "->", 5, 150, RED, 2, BLACK);
 80038b8:	2300      	movs	r3, #0
 80038ba:	9301      	str	r3, [sp, #4]
 80038bc:	2302      	movs	r3, #2
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80038c4:	2296      	movs	r2, #150	; 0x96
 80038c6:	2105      	movs	r1, #5
 80038c8:	4810      	ldr	r0, [pc, #64]	; (800390c <print_all_menu_1_1_menus+0x210>)
 80038ca:	f7ff f839 	bl	8002940 <ILI9341_Draw_Text>
			break;
 80038ce:	e00b      	b.n	80038e8 <print_all_menu_1_1_menus+0x1ec>
		case 4:
			ILI9341_Draw_Text( "->", 5, 170, RED, 2, BLACK);
 80038d0:	2300      	movs	r3, #0
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	2302      	movs	r3, #2
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80038dc:	22aa      	movs	r2, #170	; 0xaa
 80038de:	2105      	movs	r1, #5
 80038e0:	480a      	ldr	r0, [pc, #40]	; (800390c <print_all_menu_1_1_menus+0x210>)
 80038e2:	f7ff f82d 	bl	8002940 <ILI9341_Draw_Text>
			break;
 80038e6:	bf00      	nop
	}
}
 80038e8:	bf00      	nop
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	08011238 	.word	0x08011238
 80038f4:	0801125c 	.word	0x0801125c
 80038f8:	200000fc 	.word	0x200000fc
 80038fc:	20000110 	.word	0x20000110
 8003900:	20000124 	.word	0x20000124
 8003904:	20000138 	.word	0x20000138
 8003908:	2000014c 	.word	0x2000014c
 800390c:	08011260 	.word	0x08011260

08003910 <tongle_green_led>:
// -----------------------------------------------------------------------
void tongle_green_led(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin( GPIOD, GPIO_PIN_12);
 8003914:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003918:	4802      	ldr	r0, [pc, #8]	; (8003924 <tongle_green_led+0x14>)
 800391a:	f003 fb48 	bl	8006fae <HAL_GPIO_TogglePin>
}
 800391e:	bf00      	nop
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40020c00 	.word	0x40020c00

08003928 <RED_LED_ON>:
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
// -----------------------------------------------------------------------
void RED_LED_ON(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800392c:	2201      	movs	r2, #1
 800392e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003932:	4802      	ldr	r0, [pc, #8]	; (800393c <RED_LED_ON+0x14>)
 8003934:	f003 fb22 	bl	8006f7c <HAL_GPIO_WritePin>
}
 8003938:	bf00      	nop
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40020c00 	.word	0x40020c00

08003940 <RED_LED_OFF>:
// -----------------------------------------------------------------------
void RED_LED_OFF(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8003944:	2200      	movs	r2, #0
 8003946:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800394a:	4802      	ldr	r0, [pc, #8]	; (8003954 <RED_LED_OFF+0x14>)
 800394c:	f003 fb16 	bl	8006f7c <HAL_GPIO_WritePin>
}
 8003950:	bf00      	nop
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40020c00 	.word	0x40020c00

08003958 <Level1Item3_Enter>:
// -----------------------------------------------------------------------
static void Level1Item3_Enter(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af02      	add	r7, sp, #8
 bool flagPressed = false;
 800395e:	2300      	movs	r3, #0
 8003960:	71fb      	strb	r3, [r7, #7]

 ILI9341_Draw_Text( "                          ", 10, 60, WHITE, 2, BLACK);   // Clearn lcd
 8003962:	2300      	movs	r3, #0
 8003964:	9301      	str	r3, [sp, #4]
 8003966:	2302      	movs	r3, #2
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800396e:	223c      	movs	r2, #60	; 0x3c
 8003970:	210a      	movs	r1, #10
 8003972:	4838      	ldr	r0, [pc, #224]	; (8003a54 <Level1Item3_Enter+0xfc>)
 8003974:	f7fe ffe4 	bl	8002940 <ILI9341_Draw_Text>

 ILI9341_Draw_Text( "Red LED is:", 10, 60, WHITE, 2, BLACK);
 8003978:	2300      	movs	r3, #0
 800397a:	9301      	str	r3, [sp, #4]
 800397c:	2302      	movs	r3, #2
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003984:	223c      	movs	r2, #60	; 0x3c
 8003986:	210a      	movs	r1, #10
 8003988:	4833      	ldr	r0, [pc, #204]	; (8003a58 <Level1Item3_Enter+0x100>)
 800398a:	f7fe ffd9 	bl	8002940 <ILI9341_Draw_Text>

 while(getPressKey() != BUTTON_LEFT)
 800398e:	e049      	b.n	8003a24 <Level1Item3_Enter+0xcc>
 {
	 // Read PIN
	 int led_status =  HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_14);
 8003990:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003994:	4831      	ldr	r0, [pc, #196]	; (8003a5c <Level1Item3_Enter+0x104>)
 8003996:	f003 fad9 	bl	8006f4c <HAL_GPIO_ReadPin>
 800399a:	4603      	mov	r3, r0
 800399c:	603b      	str	r3, [r7, #0]

	 if(flagPressed == true)
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d019      	beq.n	80039d8 <Level1Item3_Enter+0x80>
	 {
		 if(led_status == GPIO_PIN_SET)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d10b      	bne.n	80039c2 <Level1Item3_Enter+0x6a>
		 {
			 ILI9341_Draw_Text( "ON ", 150, 60, WHITE, 2, BLACK);
 80039aa:	2300      	movs	r3, #0
 80039ac:	9301      	str	r3, [sp, #4]
 80039ae:	2302      	movs	r3, #2
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039b6:	223c      	movs	r2, #60	; 0x3c
 80039b8:	2196      	movs	r1, #150	; 0x96
 80039ba:	4829      	ldr	r0, [pc, #164]	; (8003a60 <Level1Item3_Enter+0x108>)
 80039bc:	f7fe ffc0 	bl	8002940 <ILI9341_Draw_Text>
 80039c0:	e00a      	b.n	80039d8 <Level1Item3_Enter+0x80>
		 }
		 else
		 {
		 	 ILI9341_Draw_Text( "OFF", 150, 60, WHITE, 2, BLACK);
 80039c2:	2300      	movs	r3, #0
 80039c4:	9301      	str	r3, [sp, #4]
 80039c6:	2302      	movs	r3, #2
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039ce:	223c      	movs	r2, #60	; 0x3c
 80039d0:	2196      	movs	r1, #150	; 0x96
 80039d2:	4824      	ldr	r0, [pc, #144]	; (8003a64 <Level1Item3_Enter+0x10c>)
 80039d4:	f7fe ffb4 	bl	8002940 <ILI9341_Draw_Text>
		 }
	 }


	 if(getPressKey() != BUTTON_NOTHING && !flagPressed)
 80039d8:	f000 f84a 	bl	8003a70 <getPressKey>
 80039dc:	4603      	mov	r3, r0
 80039de:	2bff      	cmp	r3, #255	; 0xff
 80039e0:	d016      	beq.n	8003a10 <Level1Item3_Enter+0xb8>
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	f083 0301 	eor.w	r3, r3, #1
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d010      	beq.n	8003a10 <Level1Item3_Enter+0xb8>
	 {
		 flagPressed = true;
 80039ee:	2301      	movs	r3, #1
 80039f0:	71fb      	strb	r3, [r7, #7]

		 switch(getPressKey())  // If press any key
 80039f2:	f000 f83d 	bl	8003a70 <getPressKey>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d002      	beq.n	8003a02 <Level1Item3_Enter+0xaa>
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d003      	beq.n	8003a08 <Level1Item3_Enter+0xb0>
	  	  		  break;
	  	  	  case BUTTON_DOWN:
	  	  		  RED_LED_OFF();
	  	  		  break;
	  	  	  default:
	  	  		  break;
 8003a00:	e005      	b.n	8003a0e <Level1Item3_Enter+0xb6>
	  	  		  RED_LED_ON();
 8003a02:	f7ff ff91 	bl	8003928 <RED_LED_ON>
	  	  		  break;
 8003a06:	e002      	b.n	8003a0e <Level1Item3_Enter+0xb6>
	  	  		  RED_LED_OFF();
 8003a08:	f7ff ff9a 	bl	8003940 <RED_LED_OFF>
	  	  		  break;
 8003a0c:	bf00      	nop
		 switch(getPressKey())  // If press any key
 8003a0e:	e009      	b.n	8003a24 <Level1Item3_Enter+0xcc>
		 }
	 }
	 else if(getPressKey() == BUTTON_NOTHING && flagPressed)
 8003a10:	f000 f82e 	bl	8003a70 <getPressKey>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2bff      	cmp	r3, #255	; 0xff
 8003a18:	d104      	bne.n	8003a24 <Level1Item3_Enter+0xcc>
 8003a1a:	79fb      	ldrb	r3, [r7, #7]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <Level1Item3_Enter+0xcc>
	 {
		 flagPressed = false; 	// if button was release
 8003a20:	2300      	movs	r3, #0
 8003a22:	71fb      	strb	r3, [r7, #7]
 while(getPressKey() != BUTTON_LEFT)
 8003a24:	f000 f824 	bl	8003a70 <getPressKey>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1b0      	bne.n	8003990 <Level1Item3_Enter+0x38>
	 }
 }

 ILI9341_Draw_Text( "                           ", 10, 60, WHITE, 2, BLACK); // Cleaning one row LCD
 8003a2e:	2300      	movs	r3, #0
 8003a30:	9301      	str	r3, [sp, #4]
 8003a32:	2302      	movs	r3, #2
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a3a:	223c      	movs	r2, #60	; 0x3c
 8003a3c:	210a      	movs	r1, #10
 8003a3e:	480a      	ldr	r0, [pc, #40]	; (8003a68 <Level1Item3_Enter+0x110>)
 8003a40:	f7fe ff7e 	bl	8002940 <ILI9341_Draw_Text>
 Menu_Navigate(&Menu_3);  // Back to menu 3
 8003a44:	4809      	ldr	r0, [pc, #36]	; (8003a6c <Level1Item3_Enter+0x114>)
 8003a46:	f000 f8db 	bl	8003c00 <Menu_Navigate>
}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	08011264 	.word	0x08011264
 8003a58:	08011280 	.word	0x08011280
 8003a5c:	40020c00 	.word	0x40020c00
 8003a60:	0801128c 	.word	0x0801128c
 8003a64:	08011290 	.word	0x08011290
 8003a68:	08011294 	.word	0x08011294
 8003a6c:	0801161c 	.word	0x0801161c

08003a70 <getPressKey>:
// -----------------------------------------------------------------------
static uint8_t getPressKey()		// 3x4 keyboard
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af02      	add	r7, sp, #8
	char digit = '\0';
 8003a76:	2300      	movs	r3, #0
 8003a78:	75fb      	strb	r3, [r7, #23]
	char buff_lcd[20] = "KEY: ";
 8003a7a:	4a48      	ldr	r2, [pc, #288]	; (8003b9c <getPressKey+0x12c>)
 8003a7c:	463b      	mov	r3, r7
 8003a7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a82:	6018      	str	r0, [r3, #0]
 8003a84:	3304      	adds	r3, #4
 8003a86:	8019      	strh	r1, [r3, #0]
 8003a88:	1dbb      	adds	r3, r7, #6
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	605a      	str	r2, [r3, #4]
 8003a90:	609a      	str	r2, [r3, #8]
 8003a92:	819a      	strh	r2, [r3, #12]
	digit = read_one_digit_from_keyboard();
 8003a94:	f7fd fc5a 	bl	800134c <read_one_digit_from_keyboard>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	75fb      	strb	r3, [r7, #23]
	switch(digit)
 8003a9c:	7dfb      	ldrb	r3, [r7, #23]
 8003a9e:	3b32      	subs	r3, #50	; 0x32
 8003aa0:	2b06      	cmp	r3, #6
 8003aa2:	d875      	bhi.n	8003b90 <getPressKey+0x120>
 8003aa4:	a201      	add	r2, pc, #4	; (adr r2, 8003aac <getPressKey+0x3c>)
 8003aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aaa:	bf00      	nop
 8003aac:	08003af1 	.word	0x08003af1
 8003ab0:	08003b91 	.word	0x08003b91
 8003ab4:	08003ac9 	.word	0x08003ac9
 8003ab8:	08003b69 	.word	0x08003b69
 8003abc:	08003b41 	.word	0x08003b41
 8003ac0:	08003b91 	.word	0x08003b91
 8003ac4:	08003b19 	.word	0x08003b19
	{
		case '4':
		{
			strncat(buff_lcd, &digit, 1);
 8003ac8:	f107 0117 	add.w	r1, r7, #23
 8003acc:	463b      	mov	r3, r7
 8003ace:	2201      	movs	r2, #1
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f00d f823 	bl	8010b1c <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8003ad6:	4638      	mov	r0, r7
 8003ad8:	2300      	movs	r3, #0
 8003ada:	9301      	str	r3, [sp, #4]
 8003adc:	2302      	movs	r3, #2
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	f7fe ff2a 	bl	8002940 <ILI9341_Draw_Text>
			return BUTTON_LEFT;
 8003aec:	2300      	movs	r3, #0
 8003aee:	e050      	b.n	8003b92 <getPressKey+0x122>
		}
		case '2':
		{
			strncat(buff_lcd, &digit, 1);
 8003af0:	f107 0117 	add.w	r1, r7, #23
 8003af4:	463b      	mov	r3, r7
 8003af6:	2201      	movs	r2, #1
 8003af8:	4618      	mov	r0, r3
 8003afa:	f00d f80f 	bl	8010b1c <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8003afe:	4638      	mov	r0, r7
 8003b00:	2300      	movs	r3, #0
 8003b02:	9301      	str	r3, [sp, #4]
 8003b04:	2302      	movs	r3, #2
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2100      	movs	r1, #0
 8003b10:	f7fe ff16 	bl	8002940 <ILI9341_Draw_Text>
			return BUTTON_UP;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e03c      	b.n	8003b92 <getPressKey+0x122>
		}
		case '8':
		{
			strncat(buff_lcd, &digit, 1);
 8003b18:	f107 0117 	add.w	r1, r7, #23
 8003b1c:	463b      	mov	r3, r7
 8003b1e:	2201      	movs	r2, #1
 8003b20:	4618      	mov	r0, r3
 8003b22:	f00c fffb 	bl	8010b1c <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8003b26:	4638      	mov	r0, r7
 8003b28:	2300      	movs	r3, #0
 8003b2a:	9301      	str	r3, [sp, #4]
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b34:	2200      	movs	r2, #0
 8003b36:	2100      	movs	r1, #0
 8003b38:	f7fe ff02 	bl	8002940 <ILI9341_Draw_Text>
			return BUTTON_DOWN;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e028      	b.n	8003b92 <getPressKey+0x122>
		}
		case '6':
		{
			strncat(buff_lcd, &digit, 1);
 8003b40:	f107 0117 	add.w	r1, r7, #23
 8003b44:	463b      	mov	r3, r7
 8003b46:	2201      	movs	r2, #1
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f00c ffe7 	bl	8010b1c <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8003b4e:	4638      	mov	r0, r7
 8003b50:	2300      	movs	r3, #0
 8003b52:	9301      	str	r3, [sp, #4]
 8003b54:	2302      	movs	r3, #2
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	2100      	movs	r1, #0
 8003b60:	f7fe feee 	bl	8002940 <ILI9341_Draw_Text>
			return BUTTON_RIGHT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e014      	b.n	8003b92 <getPressKey+0x122>
		}
		case '5':
		{
			strncat(buff_lcd, &digit, 1);
 8003b68:	f107 0117 	add.w	r1, r7, #23
 8003b6c:	463b      	mov	r3, r7
 8003b6e:	2201      	movs	r2, #1
 8003b70:	4618      	mov	r0, r3
 8003b72:	f00c ffd3 	bl	8010b1c <strncat>
			ILI9341_Draw_Text( buff_lcd, 0, 0, WHITE, 2, BLACK);
 8003b76:	4638      	mov	r0, r7
 8003b78:	2300      	movs	r3, #0
 8003b7a:	9301      	str	r3, [sp, #4]
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b84:	2200      	movs	r2, #0
 8003b86:	2100      	movs	r1, #0
 8003b88:	f7fe feda 	bl	8002940 <ILI9341_Draw_Text>
			return BUTTON_SELECT;
 8003b8c:	2304      	movs	r3, #4
 8003b8e:	e000      	b.n	8003b92 <getPressKey+0x122>
		}
		default:
			return BUTTON_NOTHING;
 8003b90:	23ff      	movs	r3, #255	; 0xff
			break;


	}
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	080112b0 	.word	0x080112b0

08003ba0 <Generic_Write>:
// -----------------------------------------------------------------------
void Generic_Write(const char* Text)		// Print "Text" data on LCD
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af02      	add	r7, sp, #8
 8003ba6:	6078      	str	r0, [r7, #4]
	if (Text)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d015      	beq.n	8003bda <Generic_Write+0x3a>
	{
		ILI9341_Draw_Text( "                                 ", 10, 100, WHITE, 1, BLACK);
 8003bae:	2300      	movs	r3, #0
 8003bb0:	9301      	str	r3, [sp, #4]
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bba:	2264      	movs	r2, #100	; 0x64
 8003bbc:	210a      	movs	r1, #10
 8003bbe:	4809      	ldr	r0, [pc, #36]	; (8003be4 <Generic_Write+0x44>)
 8003bc0:	f7fe febe 	bl	8002940 <ILI9341_Draw_Text>
		ILI9341_Draw_Text( Text, 10, 100, WHITE, 1, BLACK);
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	9301      	str	r3, [sp, #4]
 8003bc8:	2301      	movs	r3, #1
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bd0:	2264      	movs	r2, #100	; 0x64
 8003bd2:	210a      	movs	r1, #10
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7fe feb3 	bl	8002940 <ILI9341_Draw_Text>
	}
}
 8003bda:	bf00      	nop
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	080112c4 	.word	0x080112c4

08003be8 <Menu_GetCurrentMenu>:
// -----------------------------------------------------------------------
Menu_Item_t* Menu_GetCurrentMenu(void)		// Повертає поточни вибраний пункт меню
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
	return CurrentMenuItem;
 8003bec:	4b03      	ldr	r3, [pc, #12]	; (8003bfc <Menu_GetCurrentMenu+0x14>)
 8003bee:	681b      	ldr	r3, [r3, #0]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	20000010 	.word	0x20000010

08003c00 <Menu_Navigate>:
// -----------------------------------------------------------------------
// Переходи по меню
// in: ПОказник на апсолютний пункт меню, для вибору
// MENU_PARENT, MENU_CHILD, MENU_NEXT або  MENU_PREVIOUS
void Menu_Navigate(Menu_Item_t* const NewMenu)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
	if ((NewMenu == &NULL_MENU) || (NewMenu == NULL))  // What it mean???
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a11      	ldr	r2, [pc, #68]	; (8003c50 <Menu_Navigate+0x50>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d01a      	beq.n	8003c46 <Menu_Navigate+0x46>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d017      	beq.n	8003c46 <Menu_Navigate+0x46>
	{
		return;		// Exit
	}

	CurrentMenuItem = NewMenu;    // Передане маню стає вибране
 8003c16:	4a0f      	ldr	r2, [pc, #60]	; (8003c54 <Menu_Navigate+0x54>)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6013      	str	r3, [r2, #0]

	if (MenuWriteFunc)    // If   MenuWriteFunc  != NULL  ???????
 8003c1c:	4b0e      	ldr	r3, [pc, #56]	; (8003c58 <Menu_Navigate+0x58>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d006      	beq.n	8003c32 <Menu_Navigate+0x32>
	{
		MenuWriteFunc(CurrentMenuItem->Text);			// Print Text string on LCD
 8003c24:	4b0c      	ldr	r3, [pc, #48]	; (8003c58 <Menu_Navigate+0x58>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a0a      	ldr	r2, [pc, #40]	; (8003c54 <Menu_Navigate+0x54>)
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	3218      	adds	r2, #24
 8003c2e:	4610      	mov	r0, r2
 8003c30:	4798      	blx	r3
	}

	//   void (*SelectCallback)(void) - Creating pointer on function
	// Write  CurrentMenuItem->SelectCallback in  void (*SelectCallback)(void) pinter
	void (*SelectCallback)(void) = CurrentMenuItem->SelectCallback;
 8003c32:	4b08      	ldr	r3, [pc, #32]	; (8003c54 <Menu_Navigate+0x54>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	60fb      	str	r3, [r7, #12]

	if (SelectCallback)		// If SelectCallback != NULL
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <Menu_Navigate+0x48>
	{
		SelectCallback();   // It does - CurrentMenuItem->SelectCallback;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4798      	blx	r3
 8003c44:	e000      	b.n	8003c48 <Menu_Navigate+0x48>
		return;		// Exit
 8003c46:	bf00      	nop
	}
}
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	080115ac 	.word	0x080115ac
 8003c54:	20000010 	.word	0x20000010
 8003c58:	200002b0 	.word	0x200002b0

08003c5c <Menu_SetGenericWriteCallback>:
 пунктів меню. В рамках цієї функції зворотного виклику користувач повинен
 реалізувати код для відображення поточного тексту меню, що зберігається
 в  ref MENU_ITEM_STORAGE пам'яті.. */
// In: вказівник на функцію зворотного виклику для виконання кожного вибраного пункту меню.
void Menu_SetGenericWriteCallback(void (*WriteFunc)(const char* Text))    //  What doing this function??????? <<<<<<<<<<<
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	MenuWriteFunc = WriteFunc;  		// Запис показника функції WriteFunc в
 8003c64:	4a05      	ldr	r2, [pc, #20]	; (8003c7c <Menu_SetGenericWriteCallback+0x20>)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6013      	str	r3, [r2, #0]
	//  показник на функцію під назвою MenuWriteFunc
	Menu_Navigate(CurrentMenuItem);      // Передача цього показника в функцію Menu_Navigate
 8003c6a:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <Menu_SetGenericWriteCallback+0x24>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff ffc6 	bl	8003c00 <Menu_Navigate>
}
 8003c74:	bf00      	nop
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	200002b0 	.word	0x200002b0
 8003c80:	20000010 	.word	0x20000010

08003c84 <Menu_EnterCurrentItem>:
// -----------------------------------------------------------------------
/* Функція входить у вибраний на даний момент пункт меню, виконуючи налаштовану
   функцію зворотного дзвінка (якщо така є) */
void Menu_EnterCurrentItem(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
	if ((CurrentMenuItem == &NULL_MENU) || (CurrentMenuItem == NULL))
 8003c8a:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <Menu_EnterCurrentItem+0x34>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a0b      	ldr	r2, [pc, #44]	; (8003cbc <Menu_EnterCurrentItem+0x38>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00d      	beq.n	8003cb0 <Menu_EnterCurrentItem+0x2c>
 8003c94:	4b08      	ldr	r3, [pc, #32]	; (8003cb8 <Menu_EnterCurrentItem+0x34>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d009      	beq.n	8003cb0 <Menu_EnterCurrentItem+0x2c>
	{
		return;
	}

	void (*EnterCallback)(void) = CurrentMenuItem->EnterCallback;
 8003c9c:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <Menu_EnterCurrentItem+0x34>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	607b      	str	r3, [r7, #4]
	if (EnterCallback)		// If EnterCallback != NULL
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <Menu_EnterCurrentItem+0x2e>
	{
		EnterCallback();
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4798      	blx	r3
 8003cae:	e000      	b.n	8003cb2 <Menu_EnterCurrentItem+0x2e>
		return;
 8003cb0:	bf00      	nop
	}

}// -----------------------------------------------------------------------
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20000010 	.word	0x20000010
 8003cbc:	080115ac 	.word	0x080115ac

08003cc0 <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
	int i =0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 8003ccc:	e036      	b.n	8003d3c <speed_test_LCD+0x7c>
	{
		i ++;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8003ce8:	4819      	ldr	r0, [pc, #100]	; (8003d50 <speed_test_LCD+0x90>)
 8003cea:	f007 fde4 	bl	800b8b6 <HAL_RNG_GetRandomNumber>
 8003cee:	6138      	str	r0, [r7, #16]
		xr = random_num;
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8003cf4:	4816      	ldr	r0, [pc, #88]	; (8003d50 <speed_test_LCD+0x90>)
 8003cf6:	f007 fdde 	bl	800b8b6 <HAL_RNG_GetRandomNumber>
 8003cfa:	6138      	str	r0, [r7, #16]
		yr = random_num;
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8003d00:	4813      	ldr	r0, [pc, #76]	; (8003d50 <speed_test_LCD+0x90>)
 8003d02:	f007 fdd8 	bl	800b8b6 <HAL_RNG_GetRandomNumber>
 8003d06:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8003d0c:	4810      	ldr	r0, [pc, #64]	; (8003d50 <speed_test_LCD+0x90>)
 8003d0e:	f007 fdd2 	bl	800b8b6 <HAL_RNG_GetRandomNumber>
 8003d12:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 8003d18:	89fb      	ldrh	r3, [r7, #14]
 8003d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d1e:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 8003d20:	89bb      	ldrh	r3, [r7, #12]
 8003d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d26:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 8003d28:	897b      	ldrh	r3, [r7, #10]
 8003d2a:	f003 031f 	and.w	r3, r3, #31
 8003d2e:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 8003d30:	893b      	ldrh	r3, [r7, #8]
 8003d32:	897a      	ldrh	r2, [r7, #10]
 8003d34:	89b9      	ldrh	r1, [r7, #12]
 8003d36:	89f8      	ldrh	r0, [r7, #14]
 8003d38:	f7fe fce4 	bl	8002704 <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	ddc4      	ble.n	8003cce <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 8003d44:	bf00      	nop
 8003d46:	bf00      	nop
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20000478 	.word	0x20000478

08003d54 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8003d5c:	2305      	movs	r3, #5
 8003d5e:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f001 f9f1 	bl	800514c <null_ptr_check>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8003d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d133      	bne.n	8003dde <bme280_init+0x8a>
		while (try_count) {
 8003d76:	e028      	b.n	8003dca <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8003d78:	f107 010d 	add.w	r1, r7, #13
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	20d0      	movs	r0, #208	; 0xd0
 8003d82:	f000 f832 	bl	8003dea <bme280_get_regs>
 8003d86:	4603      	mov	r3, r0
 8003d88:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8003d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d114      	bne.n	8003dbc <bme280_init+0x68>
 8003d92:	7b7b      	ldrb	r3, [r7, #13]
 8003d94:	2b60      	cmp	r3, #96	; 0x60
 8003d96:	d111      	bne.n	8003dbc <bme280_init+0x68>
				dev->chip_id = chip_id;
 8003d98:	7b7a      	ldrb	r2, [r7, #13]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f976 	bl	8004090 <bme280_soft_reset>
 8003da4:	4603      	mov	r3, r0
 8003da6:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8003da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d110      	bne.n	8003dd2 <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f001 f841 	bl	8004e38 <get_calib_data>
 8003db6:	4603      	mov	r3, r0
 8003db8:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8003dba:	e00a      	b.n	8003dd2 <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	2001      	movs	r0, #1
 8003dc2:	4798      	blx	r3
			--try_count;
 8003dc4:	7bbb      	ldrb	r3, [r7, #14]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8003dca:	7bbb      	ldrb	r3, [r7, #14]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1d3      	bne.n	8003d78 <bme280_init+0x24>
 8003dd0:	e000      	b.n	8003dd4 <bme280_init+0x80>
				break;
 8003dd2:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8003dd4:	7bbb      	ldrb	r3, [r7, #14]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8003dda:	23fe      	movs	r3, #254	; 0xfe
 8003ddc:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8003dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8003dea:	b590      	push	{r4, r7, lr}
 8003dec:	b087      	sub	sp, #28
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607b      	str	r3, [r7, #4]
 8003df4:	4603      	mov	r3, r0
 8003df6:	73fb      	strb	r3, [r7, #15]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f001 f9a5 	bl	800514c <null_ptr_check>
 8003e02:	4603      	mov	r3, r0
 8003e04:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8003e06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d117      	bne.n	8003e3e <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	789b      	ldrb	r3, [r3, #2]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d003      	beq.n	8003e1e <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
 8003e18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e1c:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685c      	ldr	r4, [r3, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	7858      	ldrb	r0, [r3, #1]
 8003e26:	89bb      	ldrh	r3, [r7, #12]
 8003e28:	7bf9      	ldrb	r1, [r7, #15]
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	47a0      	blx	r4
 8003e2e:	4603      	mov	r3, r0
 8003e30:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8003e32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 8003e3a:	23fc      	movs	r3, #252	; 0xfc
 8003e3c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003e3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd90      	pop	{r4, r7, pc}

08003e4a <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8003e4a:	b590      	push	{r4, r7, lr}
 8003e4c:	b08d      	sub	sp, #52	; 0x34
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	603b      	str	r3, [r7, #0]
 8003e56:	4613      	mov	r3, r2
 8003e58:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 8003e5a:	79fb      	ldrb	r3, [r7, #7]
 8003e5c:	2b0a      	cmp	r3, #10
 8003e5e:	d901      	bls.n	8003e64 <bme280_set_regs+0x1a>
		len = 10;
 8003e60:	230a      	movs	r3, #10
 8003e62:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003e64:	6838      	ldr	r0, [r7, #0]
 8003e66:	f001 f971 	bl	800514c <null_ptr_check>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8003e70:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d154      	bne.n	8003f22 <bme280_set_regs+0xd8>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d051      	beq.n	8003f22 <bme280_set_regs+0xd8>
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d04e      	beq.n	8003f22 <bme280_set_regs+0xd8>
		if (len != 0) {
 8003e84:	79fb      	ldrb	r3, [r7, #7]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d047      	beq.n	8003f1a <bme280_set_regs+0xd0>
			temp_buff[0] = reg_data[0];
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	789b      	ldrb	r3, [r3, #2]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d01a      	beq.n	8003ece <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003e98:	2300      	movs	r3, #0
 8003e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e9e:	e011      	b.n	8003ec4 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8003ea0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	781a      	ldrb	r2, [r3, #0]
 8003eaa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003eae:	68f9      	ldr	r1, [r7, #12]
 8003eb0:	440b      	add	r3, r1
 8003eb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003eba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ec4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003ec8:	79fb      	ldrb	r3, [r7, #7]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d3e8      	bcc.n	8003ea0 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d90b      	bls.n	8003eec <bme280_set_regs+0xa2>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	f107 0114 	add.w	r1, r7, #20
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 fff0 	bl	8004ec2 <interleave_reg_addr>
				temp_len = len * 2;
 8003ee2:	79fb      	ldrb	r3, [r7, #7]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003eea:	e001      	b.n	8003ef0 <bme280_set_regs+0xa6>
			} else {
				temp_len = len;
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	689c      	ldr	r4, [r3, #8]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	7858      	ldrb	r0, [r3, #1]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	7819      	ldrb	r1, [r3, #0]
 8003efc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003efe:	f107 0214 	add.w	r2, r7, #20
 8003f02:	47a0      	blx	r4
 8003f04:	4603      	mov	r3, r0
 8003f06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 8003f0a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00b      	beq.n	8003f2a <bme280_set_regs+0xe0>
				rslt = BME280_E_COMM_FAIL;
 8003f12:	23fc      	movs	r3, #252	; 0xfc
 8003f14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8003f18:	e007      	b.n	8003f2a <bme280_set_regs+0xe0>
		} else {
			rslt = BME280_E_INVALID_LEN;
 8003f1a:	23fd      	movs	r3, #253	; 0xfd
 8003f1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8003f20:	e003      	b.n	8003f2a <bme280_set_regs+0xe0>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8003f22:	23ff      	movs	r3, #255	; 0xff
 8003f24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003f28:	e000      	b.n	8003f2c <bme280_set_regs+0xe2>
		if (len != 0) {
 8003f2a:	bf00      	nop
	}


	return rslt;
 8003f2c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3734      	adds	r7, #52	; 0x34
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd90      	pop	{r4, r7, pc}

08003f38 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	6039      	str	r1, [r7, #0]
 8003f42:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003f44:	6838      	ldr	r0, [r7, #0]
 8003f46:	f001 f901 	bl	800514c <null_ptr_check>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8003f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d13f      	bne.n	8003fd6 <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8003f56:	f107 030e 	add.w	r3, r7, #14
 8003f5a:	6839      	ldr	r1, [r7, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 f874 	bl	800404a <bme280_get_sensor_mode>
 8003f62:	4603      	mov	r3, r0
 8003f64:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8003f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d107      	bne.n	8003f7e <bme280_set_sensor_settings+0x46>
 8003f6e:	7bbb      	ldrb	r3, [r7, #14]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d004      	beq.n	8003f7e <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8003f74:	6838      	ldr	r0, [r7, #0]
 8003f76:	f000 fb4e 	bl	8004616 <put_device_to_sleep>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 8003f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d127      	bne.n	8003fd6 <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	4619      	mov	r1, r3
 8003f8a:	2007      	movs	r0, #7
 8003f8c:	f001 f8c2 	bl	8005114 <are_settings_changed>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d009      	beq.n	8003faa <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003f9c:	79fb      	ldrb	r3, [r7, #7]
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 f98a 	bl	80042ba <set_osr_settings>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8003faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d111      	bne.n	8003fd6 <bme280_set_sensor_settings+0x9e>
 8003fb2:	79fb      	ldrb	r3, [r7, #7]
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	2018      	movs	r0, #24
 8003fb8:	f001 f8ac 	bl	8005114 <are_settings_changed>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003fc8:	79fb      	ldrb	r3, [r7, #7]
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 fa11 	bl	80043f4 <set_filter_standby_settings>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8003fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	4603      	mov	r3, r0
 8003fea:	6039      	str	r1, [r7, #0]
 8003fec:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003fee:	6838      	ldr	r0, [r7, #0]
 8003ff0:	f001 f8ac 	bl	800514c <null_ptr_check>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8003ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d11e      	bne.n	800403e <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8004000:	f107 030e 	add.w	r3, r7, #14
 8004004:	6839      	ldr	r1, [r7, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f000 f81f 	bl	800404a <bme280_get_sensor_mode>
 800400c:	4603      	mov	r3, r0
 800400e:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8004010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d107      	bne.n	8004028 <bme280_set_sensor_mode+0x46>
 8004018:	7bbb      	ldrb	r3, [r7, #14]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d004      	beq.n	8004028 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 800401e:	6838      	ldr	r0, [r7, #0]
 8004020:	f000 faf9 	bl	8004616 <put_device_to_sleep>
 8004024:	4603      	mov	r3, r0
 8004026:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8004028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d106      	bne.n	800403e <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 8004030:	79fb      	ldrb	r3, [r7, #7]
 8004032:	6839      	ldr	r1, [r7, #0]
 8004034:	4618      	mov	r0, r3
 8004036:	f000 fabb 	bl	80045b0 <write_power_mode>
 800403a:	4603      	mov	r3, r0
 800403c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800403e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b084      	sub	sp, #16
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8004054:	6838      	ldr	r0, [r7, #0]
 8004056:	f001 f879 	bl	800514c <null_ptr_check>
 800405a:	4603      	mov	r3, r0
 800405c:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 800405e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10e      	bne.n	8004084 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2201      	movs	r2, #1
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	20f4      	movs	r0, #244	; 0xf4
 800406e:	f7ff febc 	bl	8003dea <bme280_get_regs>
 8004072:	4603      	mov	r3, r0
 8004074:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	b2da      	uxtb	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8004084:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8004098:	23e0      	movs	r3, #224	; 0xe0
 800409a:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 800409c:	23b6      	movs	r3, #182	; 0xb6
 800409e:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f001 f853 	bl	800514c <null_ptr_check>
 80040a6:	4603      	mov	r3, r0
 80040a8:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80040aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10d      	bne.n	80040ce <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80040b2:	f107 010d 	add.w	r1, r7, #13
 80040b6:	f107 000e 	add.w	r0, r7, #14
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f7ff fec4 	bl	8003e4a <bme280_set_regs>
 80040c2:	4603      	mov	r3, r0
 80040c4:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	2002      	movs	r0, #2
 80040cc:	4798      	blx	r3
	}

	return rslt;
 80040ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b08a      	sub	sp, #40	; 0x28
 80040de:	af00      	add	r7, sp, #0
 80040e0:	4603      	mov	r3, r0
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	607a      	str	r2, [r7, #4]
 80040e6:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 80040e8:	2300      	movs	r3, #0
 80040ea:	61fb      	str	r3, [r7, #28]
 80040ec:	2300      	movs	r3, #0
 80040ee:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 80040f0:	f107 0310 	add.w	r3, r7, #16
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	605a      	str	r2, [r3, #4]
 80040fa:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f001 f825 	bl	800514c <null_ptr_check>
 8004102:	4603      	mov	r3, r0
 8004104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 8004108:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800410c:	2b00      	cmp	r3, #0
 800410e:	d124      	bne.n	800415a <bme280_get_sensor_data+0x80>
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d021      	beq.n	800415a <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8004116:	f107 011c 	add.w	r1, r7, #28
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2208      	movs	r2, #8
 800411e:	20f7      	movs	r0, #247	; 0xf7
 8004120:	f7ff fe63 	bl	8003dea <bme280_get_regs>
 8004124:	4603      	mov	r3, r0
 8004126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 800412a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800412e:	2b00      	cmp	r3, #0
 8004130:	d116      	bne.n	8004160 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 8004132:	f107 0210 	add.w	r2, r7, #16
 8004136:	f107 031c 	add.w	r3, r7, #28
 800413a:	4611      	mov	r1, r2
 800413c:	4618      	mov	r0, r3
 800413e:	f000 f815 	bl	800416c <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3310      	adds	r3, #16
 8004146:	f107 0110 	add.w	r1, r7, #16
 800414a:	7bf8      	ldrb	r0, [r7, #15]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	f000 f853 	bl	80041f8 <bme280_compensate_data>
 8004152:	4603      	mov	r3, r0
 8004154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8004158:	e002      	b.n	8004160 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800415a:	23ff      	movs	r3, #255	; 0xff
 800415c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 8004160:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004164:	4618      	mov	r0, r3
 8004166:	3728      	adds	r7, #40	; 0x28
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	031b      	lsls	r3, r3, #12
 800417c:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3301      	adds	r3, #1
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3302      	adds	r3, #2
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	091b      	lsrs	r3, r3, #4
 8004190:	b2db      	uxtb	r3, r3
 8004192:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	431a      	orrs	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	431a      	orrs	r2, r3
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3303      	adds	r3, #3
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	031b      	lsls	r3, r3, #12
 80041aa:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3304      	adds	r3, #4
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3305      	adds	r3, #5
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	091b      	lsrs	r3, r3, #4
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	431a      	orrs	r2, r3
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3306      	adds	r3, #6
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	021b      	lsls	r3, r3, #8
 80041d8:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3307      	adds	r3, #7
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	609a      	str	r2, [r3, #8]
}
 80041ec:	bf00      	nop
 80041ee:	371c      	adds	r7, #28
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
 8004202:	603b      	str	r3, [r7, #0]
 8004204:	4603      	mov	r3, r0
 8004206:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 8004208:	2300      	movs	r3, #0
 800420a:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d04b      	beq.n	80042aa <bme280_compensate_data+0xb2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d048      	beq.n	80042aa <bme280_compensate_data+0xb2>
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d045      	beq.n	80042aa <bme280_compensate_data+0xb2>
		/* Initialize to zero */
		comp_data->temperature = 0;
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	e9c1 2302 	strd	r2, r3, [r1, #8]
		comp_data->pressure = 0;
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	e9c1 2300 	strd	r2, r3, [r1]
		comp_data->humidity = 0;
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	e9c1 2304 	strd	r2, r3, [r1, #16]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8004248:	7bfb      	ldrb	r3, [r7, #15]
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <bme280_compensate_data+0x70>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8004252:	6839      	ldr	r1, [r7, #0]
 8004254:	68b8      	ldr	r0, [r7, #8]
 8004256:	f000 fa2b 	bl	80046b0 <compensate_temperature>
 800425a:	eeb0 7a40 	vmov.f32	s14, s0
 800425e:	eef0 7a60 	vmov.f32	s15, s1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	ed83 7b02 	vstr	d7, [r3, #8]
		}
		if (sensor_comp & BME280_PRESS) {
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <bme280_compensate_data+0x90>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8004272:	6839      	ldr	r1, [r7, #0]
 8004274:	68b8      	ldr	r0, [r7, #8]
 8004276:	f000 faef 	bl	8004858 <compensate_pressure>
 800427a:	eeb0 7a40 	vmov.f32	s14, s0
 800427e:	eef0 7a60 	vmov.f32	s15, s1
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	ed83 7b00 	vstr	d7, [r3]
		}
		if (sensor_comp & BME280_HUM) {
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00d      	beq.n	80042ae <bme280_compensate_data+0xb6>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8004292:	6839      	ldr	r1, [r7, #0]
 8004294:	68b8      	ldr	r0, [r7, #8]
 8004296:	f000 fcaf 	bl	8004bf8 <compensate_humidity>
 800429a:	eeb0 7a40 	vmov.f32	s14, s0
 800429e:	eef0 7a60 	vmov.f32	s15, s1
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	ed83 7b04 	vstr	d7, [r3, #16]
		if (sensor_comp & BME280_HUM) {
 80042a8:	e001      	b.n	80042ae <bme280_compensate_data+0xb6>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80042aa:	23ff      	movs	r3, #255	; 0xff
 80042ac:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80042ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b086      	sub	sp, #24
 80042be:	af00      	add	r7, sp, #0
 80042c0:	4603      	mov	r3, r0
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	607a      	str	r2, [r7, #4]
 80042c6:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80042c8:	2301      	movs	r3, #1
 80042ca:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	f003 0304 	and.w	r3, r3, #4
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d005      	beq.n	80042e2 <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	68b8      	ldr	r0, [r7, #8]
 80042da:	f000 f815 	bl	8004308 <set_osr_humidity_settings>
 80042de:	4603      	mov	r3, r0
 80042e0:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d007      	beq.n	80042fc <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	68b9      	ldr	r1, [r7, #8]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 f842 	bl	800437c <set_osr_press_temp_settings>
 80042f8:	4603      	mov	r3, r0
 80042fa:	75fb      	strb	r3, [r7, #23]

	return rslt;
 80042fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8004312:	23f2      	movs	r3, #242	; 0xf2
 8004314:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	789b      	ldrb	r3, [r3, #2]
 800431a:	f003 0307 	and.w	r3, r3, #7
 800431e:	b2db      	uxtb	r3, r3
 8004320:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8004322:	f107 010e 	add.w	r1, r7, #14
 8004326:	f107 000c 	add.w	r0, r7, #12
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2201      	movs	r2, #1
 800432e:	f7ff fd8c 	bl	8003e4a <bme280_set_regs>
 8004332:	4603      	mov	r3, r0
 8004334:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 8004336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d118      	bne.n	8004370 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 800433e:	23f4      	movs	r3, #244	; 0xf4
 8004340:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8004342:	7b38      	ldrb	r0, [r7, #12]
 8004344:	f107 010d 	add.w	r1, r7, #13
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2201      	movs	r2, #1
 800434c:	f7ff fd4d 	bl	8003dea <bme280_get_regs>
 8004350:	4603      	mov	r3, r0
 8004352:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8004354:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d109      	bne.n	8004370 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 800435c:	f107 010d 	add.w	r1, r7, #13
 8004360:	f107 000c 	add.w	r0, r7, #12
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	2201      	movs	r2, #1
 8004368:	f7ff fd6f 	bl	8003e4a <bme280_set_regs>
 800436c:	4603      	mov	r3, r0
 800436e:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8004370:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	4603      	mov	r3, r0
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 800438a:	23f4      	movs	r3, #244	; 0xf4
 800438c:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800438e:	7db8      	ldrb	r0, [r7, #22]
 8004390:	f107 0115 	add.w	r1, r7, #21
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f7ff fd27 	bl	8003dea <bme280_get_regs>
 800439c:	4603      	mov	r3, r0
 800439e:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 80043a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d11f      	bne.n	80043e8 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 80043b2:	f107 0315 	add.w	r3, r7, #21
 80043b6:	68b9      	ldr	r1, [r7, #8]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 f88e 	bl	80044da <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 80043be:	7bfb      	ldrb	r3, [r7, #15]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 80043c8:	f107 0315 	add.w	r3, r7, #21
 80043cc:	68b9      	ldr	r1, [r7, #8]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 f8a0 	bl	8004514 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80043d4:	f107 0115 	add.w	r1, r7, #21
 80043d8:	f107 0016 	add.w	r0, r7, #22
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f7ff fd33 	bl	8003e4a <bme280_set_regs>
 80043e4:	4603      	mov	r3, r0
 80043e6:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80043e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	4603      	mov	r3, r0
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8004402:	23f5      	movs	r3, #245	; 0xf5
 8004404:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8004406:	7db8      	ldrb	r0, [r7, #22]
 8004408:	f107 0115 	add.w	r1, r7, #21
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f7ff fceb 	bl	8003dea <bme280_get_regs>
 8004414:	4603      	mov	r3, r0
 8004416:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8004418:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d11f      	bne.n	8004460 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	f003 0308 	and.w	r3, r3, #8
 8004426:	2b00      	cmp	r3, #0
 8004428:	d005      	beq.n	8004436 <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 800442a:	f107 0315 	add.w	r3, r7, #21
 800442e:	68b9      	ldr	r1, [r7, #8]
 8004430:	4618      	mov	r0, r3
 8004432:	f000 f81b 	bl	800446c <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 8004436:	7bfb      	ldrb	r3, [r7, #15]
 8004438:	f003 0310 	and.w	r3, r3, #16
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 8004440:	f107 0315 	add.w	r3, r7, #21
 8004444:	68b9      	ldr	r1, [r7, #8]
 8004446:	4618      	mov	r0, r3
 8004448:	f000 f82d 	bl	80044a6 <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800444c:	f107 0115 	add.w	r1, r7, #21
 8004450:	f107 0016 	add.w	r0, r7, #22
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f7ff fcf7 	bl	8003e4a <bme280_set_regs>
 800445c:	4603      	mov	r3, r0
 800445e:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8004460:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	b25b      	sxtb	r3, r3
 800447c:	f023 031c 	bic.w	r3, r3, #28
 8004480:	b25a      	sxtb	r2, r3
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	78db      	ldrb	r3, [r3, #3]
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	b25b      	sxtb	r3, r3
 800448a:	f003 031c 	and.w	r3, r3, #28
 800448e:	b25b      	sxtb	r3, r3
 8004490:	4313      	orrs	r3, r2
 8004492:	b25b      	sxtb	r3, r3
 8004494:	b2da      	uxtb	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	701a      	strb	r2, [r3, #0]
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	b25b      	sxtb	r3, r3
 80044b6:	f003 031f 	and.w	r3, r3, #31
 80044ba:	b25a      	sxtb	r2, r3
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	791b      	ldrb	r3, [r3, #4]
 80044c0:	015b      	lsls	r3, r3, #5
 80044c2:	b25b      	sxtb	r3, r3
 80044c4:	4313      	orrs	r3, r2
 80044c6:	b25b      	sxtb	r3, r3
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	701a      	strb	r2, [r3, #0]
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80044da:	b480      	push	{r7}
 80044dc:	b083      	sub	sp, #12
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	b25b      	sxtb	r3, r3
 80044ea:	f023 031c 	bic.w	r3, r3, #28
 80044ee:	b25a      	sxtb	r2, r3
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	b25b      	sxtb	r3, r3
 80044f8:	f003 031c 	and.w	r3, r3, #28
 80044fc:	b25b      	sxtb	r3, r3
 80044fe:	4313      	orrs	r3, r2
 8004500:	b25b      	sxtb	r3, r3
 8004502:	b2da      	uxtb	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	701a      	strb	r2, [r3, #0]
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	b25b      	sxtb	r3, r3
 8004524:	f003 031f 	and.w	r3, r3, #31
 8004528:	b25a      	sxtb	r2, r3
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	785b      	ldrb	r3, [r3, #1]
 800452e:	015b      	lsls	r3, r3, #5
 8004530:	b25b      	sxtb	r3, r3
 8004532:	4313      	orrs	r3, r2
 8004534:	b25b      	sxtb	r3, r3
 8004536:	b2da      	uxtb	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	701a      	strb	r2, [r3, #0]
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	b2da      	uxtb	r2, r3
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3302      	adds	r3, #2
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	109b      	asrs	r3, r3, #2
 8004568:	b2db      	uxtb	r3, r3
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	b2da      	uxtb	r2, r3
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3302      	adds	r3, #2
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	b2da      	uxtb	r2, r3
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3303      	adds	r3, #3
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	109b      	asrs	r3, r3, #2
 800458a:	b2db      	uxtb	r3, r3
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	b2da      	uxtb	r2, r3
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	3303      	adds	r3, #3
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	095b      	lsrs	r3, r3, #5
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	711a      	strb	r2, [r3, #4]
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	6039      	str	r1, [r7, #0]
 80045ba:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80045bc:	23f4      	movs	r3, #244	; 0xf4
 80045be:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80045c0:	7bb8      	ldrb	r0, [r7, #14]
 80045c2:	f107 010d 	add.w	r1, r7, #13
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f7ff fc0e 	bl	8003dea <bme280_get_regs>
 80045ce:	4603      	mov	r3, r0
 80045d0:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 80045d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d117      	bne.n	800460a <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80045da:	7b7b      	ldrb	r3, [r7, #13]
 80045dc:	b25b      	sxtb	r3, r3
 80045de:	f023 0303 	bic.w	r3, r3, #3
 80045e2:	b25a      	sxtb	r2, r3
 80045e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e8:	f003 0303 	and.w	r3, r3, #3
 80045ec:	b25b      	sxtb	r3, r3
 80045ee:	4313      	orrs	r3, r2
 80045f0:	b25b      	sxtb	r3, r3
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80045f6:	f107 010d 	add.w	r1, r7, #13
 80045fa:	f107 000e 	add.w	r0, r7, #14
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2201      	movs	r2, #1
 8004602:	f7ff fc22 	bl	8003e4a <bme280_set_regs>
 8004606:	4603      	mov	r3, r0
 8004608:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800460a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b086      	sub	sp, #24
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 800461e:	f107 0110 	add.w	r1, r7, #16
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2204      	movs	r2, #4
 8004626:	20f2      	movs	r0, #242	; 0xf2
 8004628:	f7ff fbdf 	bl	8003dea <bme280_get_regs>
 800462c:	4603      	mov	r3, r0
 800462e:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 8004630:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d118      	bne.n	800466a <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 8004638:	f107 0208 	add.w	r2, r7, #8
 800463c:	f107 0310 	add.w	r3, r7, #16
 8004640:	4611      	mov	r1, r2
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff ff80 	bl	8004548 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff fd21 	bl	8004090 <bme280_soft_reset>
 800464e:	4603      	mov	r3, r0
 8004650:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 8004652:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d107      	bne.n	800466a <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 800465a:	f107 0308 	add.w	r3, r7, #8
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	4618      	mov	r0, r3
 8004662:	f000 f808 	bl	8004676 <reload_device_settings>
 8004666:	4603      	mov	r3, r0
 8004668:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800466a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b084      	sub	sp, #16
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	201f      	movs	r0, #31
 8004686:	f7ff fe18 	bl	80042ba <set_osr_settings>
 800468a:	4603      	mov	r3, r0
 800468c:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 800468e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	201f      	movs	r0, #31
 800469c:	f7ff feaa 	bl	80043f4 <set_filter_standby_settings>
 80046a0:	4603      	mov	r3, r0
 80046a2:	73fb      	strb	r3, [r7, #15]

	return rslt;
 80046a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 80046b0:	b5b0      	push	{r4, r5, r7, lr}
 80046b2:	b08c      	sub	sp, #48	; 0x30
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double temperature;
	double temperature_min = -40;
 80046ba:	f04f 0200 	mov.w	r2, #0
 80046be:	4b5f      	ldr	r3, [pc, #380]	; (800483c <compensate_temperature+0x18c>)
 80046c0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temperature_max = 85;
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	4b5d      	ldr	r3, [pc, #372]	; (8004840 <compensate_temperature+0x190>)
 80046ca:	e9c7 2306 	strd	r2, r3, [r7, #24]

	var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fb feba 	bl	800044c <__aeabi_ui2d>
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	4b59      	ldr	r3, [pc, #356]	; (8004844 <compensate_temperature+0x194>)
 80046de:	f7fc f859 	bl	8000794 <__aeabi_ddiv>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4614      	mov	r4, r2
 80046e8:	461d      	mov	r5, r3
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fb feac 	bl	800044c <__aeabi_ui2d>
 80046f4:	f04f 0200 	mov.w	r2, #0
 80046f8:	4b53      	ldr	r3, [pc, #332]	; (8004848 <compensate_temperature+0x198>)
 80046fa:	f7fc f84b 	bl	8000794 <__aeabi_ddiv>
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	4620      	mov	r0, r4
 8004704:	4629      	mov	r1, r5
 8004706:	f7fb fd63 	bl	80001d0 <__aeabi_dsub>
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var1 = var1 * ((double)calib_data->dig_T2);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004718:	4618      	mov	r0, r3
 800471a:	f7fb fea7 	bl	800046c <__aeabi_i2d>
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004726:	f7fb ff0b 	bl	8000540 <__aeabi_dmul>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	4618      	mov	r0, r3
 8004738:	f7fb fe88 	bl	800044c <__aeabi_ui2d>
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8004744:	f7fc f826 	bl	8000794 <__aeabi_ddiv>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4614      	mov	r4, r2
 800474e:	461d      	mov	r5, r3
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f7fb fe79 	bl	800044c <__aeabi_ui2d>
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	4b3b      	ldr	r3, [pc, #236]	; (800484c <compensate_temperature+0x19c>)
 8004760:	f7fc f818 	bl	8000794 <__aeabi_ddiv>
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	4620      	mov	r0, r4
 800476a:	4629      	mov	r1, r5
 800476c:	f7fb fd30 	bl	80001d0 <__aeabi_dsub>
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 8004778:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800477c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004780:	f7fb fede 	bl	8000540 <__aeabi_dmul>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	4614      	mov	r4, r2
 800478a:	461d      	mov	r5, r3
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004792:	4618      	mov	r0, r3
 8004794:	f7fb fe6a 	bl	800046c <__aeabi_i2d>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	4620      	mov	r0, r4
 800479e:	4629      	mov	r1, r5
 80047a0:	f7fb fece 	bl	8000540 <__aeabi_dmul>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	calib_data->t_fine = (int32_t)(var1 + var2);
 80047ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80047b4:	f7fb fd0e 	bl	80001d4 <__adddf3>
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	4610      	mov	r0, r2
 80047be:	4619      	mov	r1, r3
 80047c0:	f7fc f96e 	bl	8000aa0 <__aeabi_d2iz>
 80047c4:	4602      	mov	r2, r0
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (var1 + var2) / 5120.0;
 80047ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80047d2:	f7fb fcff 	bl	80001d4 <__adddf3>
 80047d6:	4602      	mov	r2, r0
 80047d8:	460b      	mov	r3, r1
 80047da:	4610      	mov	r0, r2
 80047dc:	4619      	mov	r1, r3
 80047de:	f04f 0200 	mov.w	r2, #0
 80047e2:	4b1b      	ldr	r3, [pc, #108]	; (8004850 <compensate_temperature+0x1a0>)
 80047e4:	f7fb ffd6 	bl	8000794 <__aeabi_ddiv>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (temperature < temperature_min)
 80047f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80047f8:	f7fc f914 	bl	8000a24 <__aeabi_dcmplt>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d004      	beq.n	800480c <compensate_temperature+0x15c>
		temperature = temperature_min;
 8004802:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004806:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800480a:	e00c      	b.n	8004826 <compensate_temperature+0x176>
	else if (temperature > temperature_max)
 800480c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004810:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004814:	f7fc f924 	bl	8000a60 <__aeabi_dcmpgt>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <compensate_temperature+0x176>
		temperature = temperature_max;
 800481e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004822:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	return temperature;
 8004826:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800482a:	ec43 2b17 	vmov	d7, r2, r3
}
 800482e:	eeb0 0a47 	vmov.f32	s0, s14
 8004832:	eef0 0a67 	vmov.f32	s1, s15
 8004836:	3730      	adds	r7, #48	; 0x30
 8004838:	46bd      	mov	sp, r7
 800483a:	bdb0      	pop	{r4, r5, r7, pc}
 800483c:	c0440000 	.word	0xc0440000
 8004840:	40554000 	.word	0x40554000
 8004844:	40d00000 	.word	0x40d00000
 8004848:	40900000 	.word	0x40900000
 800484c:	40c00000 	.word	0x40c00000
 8004850:	40b40000 	.word	0x40b40000
 8004854:	00000000 	.word	0x00000000

08004858 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8004858:	b5b0      	push	{r4, r5, r7, lr}
 800485a:	b08e      	sub	sp, #56	; 0x38
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double var3;
	double pressure;
	double pressure_min = 30000.0;
 8004862:	a3d9      	add	r3, pc, #868	; (adr r3, 8004bc8 <compensate_pressure+0x370>)
 8004864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004868:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double pressure_max = 110000.0;
 800486c:	a3d8      	add	r3, pc, #864	; (adr r3, 8004bd0 <compensate_pressure+0x378>)
 800486e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004872:	e9c7 2308 	strd	r2, r3, [r7, #32]

	var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	4618      	mov	r0, r3
 800487c:	f7fb fdf6 	bl	800046c <__aeabi_i2d>
 8004880:	f04f 0200 	mov.w	r2, #0
 8004884:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004888:	f7fb ff84 	bl	8000794 <__aeabi_ddiv>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4610      	mov	r0, r2
 8004892:	4619      	mov	r1, r3
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	4bc1      	ldr	r3, [pc, #772]	; (8004ba0 <compensate_pressure+0x348>)
 800489a:	f7fb fc99 	bl	80001d0 <__aeabi_dsub>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 80048a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80048ae:	f7fb fe47 	bl	8000540 <__aeabi_dmul>
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	4614      	mov	r4, r2
 80048b8:	461d      	mov	r5, r3
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7fb fdd3 	bl	800046c <__aeabi_i2d>
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	4620      	mov	r0, r4
 80048cc:	4629      	mov	r1, r5
 80048ce:	f7fb fe37 	bl	8000540 <__aeabi_dmul>
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	4610      	mov	r0, r2
 80048d8:	4619      	mov	r1, r3
 80048da:	f04f 0200 	mov.w	r2, #0
 80048de:	4bb1      	ldr	r3, [pc, #708]	; (8004ba4 <compensate_pressure+0x34c>)
 80048e0:	f7fb ff58 	bl	8000794 <__aeabi_ddiv>
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fb fdba 	bl	800046c <__aeabi_i2d>
 80048f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048fc:	f7fb fe20 	bl	8000540 <__aeabi_dmul>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4610      	mov	r0, r2
 8004906:	4619      	mov	r1, r3
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	f7fb fc62 	bl	80001d4 <__adddf3>
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004918:	f7fb fc5c 	bl	80001d4 <__adddf3>
 800491c:	4602      	mov	r2, r0
 800491e:	460b      	mov	r3, r1
 8004920:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	4b9f      	ldr	r3, [pc, #636]	; (8004ba8 <compensate_pressure+0x350>)
 800492a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800492e:	f7fb ff31 	bl	8000794 <__aeabi_ddiv>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	4614      	mov	r4, r2
 8004938:	461d      	mov	r5, r3
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004940:	4618      	mov	r0, r3
 8004942:	f7fb fd93 	bl	800046c <__aeabi_i2d>
 8004946:	f04f 0200 	mov.w	r2, #0
 800494a:	4b98      	ldr	r3, [pc, #608]	; (8004bac <compensate_pressure+0x354>)
 800494c:	f7fb fdf8 	bl	8000540 <__aeabi_dmul>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	4620      	mov	r0, r4
 8004956:	4629      	mov	r1, r5
 8004958:	f7fb fc3c 	bl	80001d4 <__adddf3>
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800496a:	4618      	mov	r0, r3
 800496c:	f7fb fd7e 	bl	800046c <__aeabi_i2d>
 8004970:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004974:	f7fb fde4 	bl	8000540 <__aeabi_dmul>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4610      	mov	r0, r2
 800497e:	4619      	mov	r1, r3
 8004980:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004984:	f7fb fddc 	bl	8000540 <__aeabi_dmul>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4610      	mov	r0, r2
 800498e:	4619      	mov	r1, r3
 8004990:	f04f 0200 	mov.w	r2, #0
 8004994:	4b86      	ldr	r3, [pc, #536]	; (8004bb0 <compensate_pressure+0x358>)
 8004996:	f7fb fefd 	bl	8000794 <__aeabi_ddiv>
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7fb fd5f 	bl	800046c <__aeabi_i2d>
 80049ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049b2:	f7fb fdc5 	bl	8000540 <__aeabi_dmul>
 80049b6:	4602      	mov	r2, r0
 80049b8:	460b      	mov	r3, r1
 80049ba:	4610      	mov	r0, r2
 80049bc:	4619      	mov	r1, r3
 80049be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049c2:	f7fb fc07 	bl	80001d4 <__adddf3>
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	4610      	mov	r0, r2
 80049cc:	4619      	mov	r1, r3
 80049ce:	f04f 0200 	mov.w	r2, #0
 80049d2:	4b77      	ldr	r3, [pc, #476]	; (8004bb0 <compensate_pressure+0x358>)
 80049d4:	f7fb fede 	bl	8000794 <__aeabi_ddiv>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	4b6f      	ldr	r3, [pc, #444]	; (8004ba4 <compensate_pressure+0x34c>)
 80049e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80049ea:	f7fb fed3 	bl	8000794 <__aeabi_ddiv>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	4610      	mov	r0, r2
 80049f4:	4619      	mov	r1, r3
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	4b6e      	ldr	r3, [pc, #440]	; (8004bb4 <compensate_pressure+0x35c>)
 80049fc:	f7fb fbea 	bl	80001d4 <__adddf3>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	4614      	mov	r4, r2
 8004a06:	461d      	mov	r5, r3
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	88db      	ldrh	r3, [r3, #6]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7fb fd1d 	bl	800044c <__aeabi_ui2d>
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	4620      	mov	r0, r4
 8004a18:	4629      	mov	r1, r5
 8004a1a:	f7fb fd91 	bl	8000540 <__aeabi_dmul>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	e9c7 2306 	strd	r2, r3, [r7, #24]
	/* avoid exception caused by division by zero */
	if (var1) {
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a32:	f7fb ffed 	bl	8000a10 <__aeabi_dcmpeq>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f040 80cd 	bne.w	8004bd8 <compensate_pressure+0x380>
		pressure = 1048576.0 - (double) uncomp_data->pressure;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fb fd02 	bl	800044c <__aeabi_ui2d>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	f04f 0000 	mov.w	r0, #0
 8004a50:	4959      	ldr	r1, [pc, #356]	; (8004bb8 <compensate_pressure+0x360>)
 8004a52:	f7fb fbbd 	bl	80001d0 <__aeabi_dsub>
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	4b56      	ldr	r3, [pc, #344]	; (8004bbc <compensate_pressure+0x364>)
 8004a64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004a68:	f7fb fe94 	bl	8000794 <__aeabi_ddiv>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004a74:	f7fb fbac 	bl	80001d0 <__aeabi_dsub>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	4619      	mov	r1, r3
 8004a80:	a345      	add	r3, pc, #276	; (adr r3, 8004b98 <compensate_pressure+0x340>)
 8004a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a86:	f7fb fd5b 	bl	8000540 <__aeabi_dmul>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	4610      	mov	r0, r2
 8004a90:	4619      	mov	r1, r3
 8004a92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a96:	f7fb fe7d 	bl	8000794 <__aeabi_ddiv>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fb fcdf 	bl	800046c <__aeabi_i2d>
 8004aae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004ab2:	f7fb fd45 	bl	8000540 <__aeabi_dmul>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4610      	mov	r0, r2
 8004abc:	4619      	mov	r1, r3
 8004abe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004ac2:	f7fb fd3d 	bl	8000540 <__aeabi_dmul>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	460b      	mov	r3, r1
 8004aca:	4610      	mov	r0, r2
 8004acc:	4619      	mov	r1, r3
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	4b3b      	ldr	r3, [pc, #236]	; (8004bc0 <compensate_pressure+0x368>)
 8004ad4:	f7fb fe5e 	bl	8000794 <__aeabi_ddiv>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	e9c7 2306 	strd	r2, r3, [r7, #24]
		var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fb fcc0 	bl	800046c <__aeabi_i2d>
 8004aec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004af0:	f7fb fd26 	bl	8000540 <__aeabi_dmul>
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4610      	mov	r0, r2
 8004afa:	4619      	mov	r1, r3
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	4b28      	ldr	r3, [pc, #160]	; (8004ba4 <compensate_pressure+0x34c>)
 8004b02:	f7fb fe47 	bl	8000794 <__aeabi_ddiv>
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0;
 8004b0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004b16:	f7fb fb5d 	bl	80001d4 <__adddf3>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	4614      	mov	r4, r2
 8004b20:	461d      	mov	r5, r3
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fb fc9f 	bl	800046c <__aeabi_i2d>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	4620      	mov	r0, r4
 8004b34:	4629      	mov	r1, r5
 8004b36:	f7fb fb4d 	bl	80001d4 <__adddf3>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4610      	mov	r0, r2
 8004b40:	4619      	mov	r1, r3
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	4b1f      	ldr	r3, [pc, #124]	; (8004bc4 <compensate_pressure+0x36c>)
 8004b48:	f7fb fe24 	bl	8000794 <__aeabi_ddiv>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004b54:	f7fb fb3e 	bl	80001d4 <__adddf3>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		if (pressure < pressure_min)
 8004b60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b64:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004b68:	f7fb ff5c 	bl	8000a24 <__aeabi_dcmplt>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d004      	beq.n	8004b7c <compensate_pressure+0x324>
			pressure = pressure_min;
 8004b72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b76:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004b7a:	e031      	b.n	8004be0 <compensate_pressure+0x388>
		else if (pressure > pressure_max)
 8004b7c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b80:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004b84:	f7fb ff6c 	bl	8000a60 <__aeabi_dcmpgt>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d028      	beq.n	8004be0 <compensate_pressure+0x388>
			pressure = pressure_max;
 8004b8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b92:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004b96:	e023      	b.n	8004be0 <compensate_pressure+0x388>
 8004b98:	00000000 	.word	0x00000000
 8004b9c:	40b86a00 	.word	0x40b86a00
 8004ba0:	40ef4000 	.word	0x40ef4000
 8004ba4:	40e00000 	.word	0x40e00000
 8004ba8:	40100000 	.word	0x40100000
 8004bac:	40f00000 	.word	0x40f00000
 8004bb0:	41200000 	.word	0x41200000
 8004bb4:	3ff00000 	.word	0x3ff00000
 8004bb8:	41300000 	.word	0x41300000
 8004bbc:	40b00000 	.word	0x40b00000
 8004bc0:	41e00000 	.word	0x41e00000
 8004bc4:	40300000 	.word	0x40300000
 8004bc8:	00000000 	.word	0x00000000
 8004bcc:	40dd4c00 	.word	0x40dd4c00
 8004bd0:	00000000 	.word	0x00000000
 8004bd4:	40fadb00 	.word	0x40fadb00
	} else { /* Invalid case */
		pressure = pressure_min;
 8004bd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bdc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	return pressure;
 8004be0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004be4:	ec43 2b17 	vmov	d7, r2, r3
}
 8004be8:	eeb0 0a47 	vmov.f32	s0, s14
 8004bec:	eef0 0a67 	vmov.f32	s1, s15
 8004bf0:	3738      	adds	r7, #56	; 0x38
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8004bf6:	bf00      	nop

08004bf8 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8004bf8:	b5b0      	push	{r4, r5, r7, lr}
 8004bfa:	b094      	sub	sp, #80	; 0x50
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
	double humidity;
	double humidity_min = 0.0;
 8004c02:	f04f 0200 	mov.w	r2, #0
 8004c06:	f04f 0300 	mov.w	r3, #0
 8004c0a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double humidity_max = 100.0;
 8004c0e:	f04f 0200 	mov.w	r2, #0
 8004c12:	4b81      	ldr	r3, [pc, #516]	; (8004e18 <compensate_humidity+0x220>)
 8004c14:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double var3;
	double var4;
	double var5;
	double var6;

	var1 = ((double)calib_data->t_fine) - 76800.0;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fb fc25 	bl	800046c <__aeabi_i2d>
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	4b7d      	ldr	r3, [pc, #500]	; (8004e1c <compensate_humidity+0x224>)
 8004c28:	f7fb fad2 	bl	80001d0 <__aeabi_dsub>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fb fc16 	bl	800046c <__aeabi_i2d>
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	4b76      	ldr	r3, [pc, #472]	; (8004e20 <compensate_humidity+0x228>)
 8004c46:	f7fb fc7b 	bl	8000540 <__aeabi_dmul>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4614      	mov	r4, r2
 8004c50:	461d      	mov	r5, r3
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fb fc07 	bl	800046c <__aeabi_i2d>
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	4b70      	ldr	r3, [pc, #448]	; (8004e24 <compensate_humidity+0x22c>)
 8004c64:	f7fb fd96 	bl	8000794 <__aeabi_ddiv>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	4619      	mov	r1, r3
 8004c70:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004c74:	f7fb fc64 	bl	8000540 <__aeabi_dmul>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	4629      	mov	r1, r5
 8004c80:	f7fb faa8 	bl	80001d4 <__adddf3>
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = uncomp_data->humidity - var2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fb fbdb 	bl	800044c <__aeabi_ui2d>
 8004c96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c9a:	f7fb fa99 	bl	80001d0 <__aeabi_dsub>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var4 = ((double)calib_data->dig_H2) / 65536.0;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fb fbdd 	bl	800046c <__aeabi_i2d>
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	4b5c      	ldr	r3, [pc, #368]	; (8004e28 <compensate_humidity+0x230>)
 8004cb8:	f7fb fd6c 	bl	8000794 <__aeabi_ddiv>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	7f1b      	ldrb	r3, [r3, #28]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fb fbbf 	bl	800044c <__aeabi_ui2d>
 8004cce:	f04f 0200 	mov.w	r2, #0
 8004cd2:	4b56      	ldr	r3, [pc, #344]	; (8004e2c <compensate_humidity+0x234>)
 8004cd4:	f7fb fd5e 	bl	8000794 <__aeabi_ddiv>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4610      	mov	r0, r2
 8004cde:	4619      	mov	r1, r3
 8004ce0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004ce4:	f7fb fc2c 	bl	8000540 <__aeabi_dmul>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4610      	mov	r0, r2
 8004cee:	4619      	mov	r1, r3
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	4b4e      	ldr	r3, [pc, #312]	; (8004e30 <compensate_humidity+0x238>)
 8004cf6:	f7fb fa6d 	bl	80001d4 <__adddf3>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7fb fbaf 	bl	800046c <__aeabi_i2d>
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	4b46      	ldr	r3, [pc, #280]	; (8004e2c <compensate_humidity+0x234>)
 8004d14:	f7fb fd3e 	bl	8000794 <__aeabi_ddiv>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	4619      	mov	r1, r3
 8004d20:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004d24:	f7fb fc0c 	bl	8000540 <__aeabi_dmul>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4610      	mov	r0, r2
 8004d2e:	4619      	mov	r1, r3
 8004d30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d34:	f7fb fc04 	bl	8000540 <__aeabi_dmul>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	4619      	mov	r1, r3
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	4b3a      	ldr	r3, [pc, #232]	; (8004e30 <compensate_humidity+0x238>)
 8004d46:	f7fb fa45 	bl	80001d4 <__adddf3>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var6 = var3 * var4 * (var5 * var6);
 8004d52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d56:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004d5a:	f7fb fbf1 	bl	8000540 <__aeabi_dmul>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	4614      	mov	r4, r2
 8004d64:	461d      	mov	r5, r3
 8004d66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d6e:	f7fb fbe7 	bl	8000540 <__aeabi_dmul>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4620      	mov	r0, r4
 8004d78:	4629      	mov	r1, r5
 8004d7a:	f7fb fbe1 	bl	8000540 <__aeabi_dmul>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	e9c7 2302 	strd	r2, r3, [r7, #8]
	humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	7e1b      	ldrb	r3, [r3, #24]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fb fb5e 	bl	800044c <__aeabi_ui2d>
 8004d90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d94:	f7fb fbd4 	bl	8000540 <__aeabi_dmul>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	4619      	mov	r1, r3
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	4b23      	ldr	r3, [pc, #140]	; (8004e34 <compensate_humidity+0x23c>)
 8004da6:	f7fb fcf5 	bl	8000794 <__aeabi_ddiv>
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	f04f 0000 	mov.w	r0, #0
 8004db2:	491f      	ldr	r1, [pc, #124]	; (8004e30 <compensate_humidity+0x238>)
 8004db4:	f7fb fa0c 	bl	80001d0 <__aeabi_dsub>
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004dc0:	f7fb fbbe 	bl	8000540 <__aeabi_dmul>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if (humidity > humidity_max)
 8004dcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004dd0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004dd4:	f7fb fe44 	bl	8000a60 <__aeabi_dcmpgt>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d004      	beq.n	8004de8 <compensate_humidity+0x1f0>
		humidity = humidity_max;
 8004dde:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004de2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8004de6:	e00c      	b.n	8004e02 <compensate_humidity+0x20a>
	else if (humidity < humidity_min)
 8004de8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004dec:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004df0:	f7fb fe18 	bl	8000a24 <__aeabi_dcmplt>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <compensate_humidity+0x20a>
		humidity = humidity_min;
 8004dfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004dfe:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	return humidity;
 8004e02:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e06:	ec43 2b17 	vmov	d7, r2, r3
}
 8004e0a:	eeb0 0a47 	vmov.f32	s0, s14
 8004e0e:	eef0 0a67 	vmov.f32	s1, s15
 8004e12:	3750      	adds	r7, #80	; 0x50
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bdb0      	pop	{r4, r5, r7, pc}
 8004e18:	40590000 	.word	0x40590000
 8004e1c:	40f2c000 	.word	0x40f2c000
 8004e20:	40500000 	.word	0x40500000
 8004e24:	40d00000 	.word	0x40d00000
 8004e28:	40f00000 	.word	0x40f00000
 8004e2c:	41900000 	.word	0x41900000
 8004e30:	3ff00000 	.word	0x3ff00000
 8004e34:	41200000 	.word	0x41200000

08004e38 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08a      	sub	sp, #40	; 0x28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8004e40:	2388      	movs	r3, #136	; 0x88
 8004e42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 8004e46:	2300      	movs	r3, #0
 8004e48:	60fb      	str	r3, [r7, #12]
 8004e4a:	f107 0310 	add.w	r3, r7, #16
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	605a      	str	r2, [r3, #4]
 8004e54:	609a      	str	r2, [r3, #8]
 8004e56:	60da      	str	r2, [r3, #12]
 8004e58:	611a      	str	r2, [r3, #16]
 8004e5a:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8004e5c:	f107 010c 	add.w	r1, r7, #12
 8004e60:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	221a      	movs	r2, #26
 8004e68:	f7fe ffbf 	bl	8003dea <bme280_get_regs>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 8004e72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d11d      	bne.n	8004eb6 <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 8004e7a:	f107 030c 	add.w	r3, r7, #12
 8004e7e:	6879      	ldr	r1, [r7, #4]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 f84a 	bl	8004f1a <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8004e86:	23e1      	movs	r3, #225	; 0xe1
 8004e88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8004e8c:	f107 010c 	add.w	r1, r7, #12
 8004e90:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2207      	movs	r2, #7
 8004e98:	f7fe ffa7 	bl	8003dea <bme280_get_regs>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8004ea2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d105      	bne.n	8004eb6 <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 8004eaa:	f107 030c 	add.w	r3, r7, #12
 8004eae:	6879      	ldr	r1, [r7, #4]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 f8e1 	bl	8005078 <parse_humidity_calib_data>
		}
	}

	return rslt;
 8004eb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3728      	adds	r7, #40	; 0x28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b087      	sub	sp, #28
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	607a      	str	r2, [r7, #4]
 8004ece:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	75fb      	strb	r3, [r7, #23]
 8004ed4:	e016      	b.n	8004f04 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 8004ed6:	7dfb      	ldrb	r3, [r7, #23]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	441a      	add	r2, r3
 8004edc:	7dfb      	ldrb	r3, [r7, #23]
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	68b9      	ldr	r1, [r7, #8]
 8004ee4:	440b      	add	r3, r1
 8004ee6:	7812      	ldrb	r2, [r2, #0]
 8004ee8:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 8004eea:	7dfb      	ldrb	r3, [r7, #23]
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	441a      	add	r2, r3
 8004ef0:	7dfb      	ldrb	r3, [r7, #23]
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	440b      	add	r3, r1
 8004efa:	7812      	ldrb	r2, [r2, #0]
 8004efc:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 8004efe:	7dfb      	ldrb	r3, [r7, #23]
 8004f00:	3301      	adds	r3, #1
 8004f02:	75fb      	strb	r3, [r7, #23]
 8004f04:	7dfa      	ldrb	r2, [r7, #23]
 8004f06:	78fb      	ldrb	r3, [r7, #3]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d3e4      	bcc.n	8004ed6 <interleave_reg_addr+0x14>
	}
}
 8004f0c:	bf00      	nop
 8004f0e:	bf00      	nop
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b085      	sub	sp, #20
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	3310      	adds	r3, #16
 8004f28:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	021b      	lsls	r3, r3, #8
 8004f32:	b21a      	sxth	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	b21b      	sxth	r3, r3
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	b21b      	sxth	r3, r3
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3303      	adds	r3, #3
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	021b      	lsls	r3, r3, #8
 8004f4c:	b21a      	sxth	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	3302      	adds	r3, #2
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	b21b      	sxth	r3, r3
 8004f56:	4313      	orrs	r3, r2
 8004f58:	b21a      	sxth	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	3305      	adds	r3, #5
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	021b      	lsls	r3, r3, #8
 8004f66:	b21a      	sxth	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	b21b      	sxth	r3, r3
 8004f70:	4313      	orrs	r3, r2
 8004f72:	b21a      	sxth	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3307      	adds	r3, #7
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	021b      	lsls	r3, r3, #8
 8004f80:	b21a      	sxth	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	3306      	adds	r3, #6
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	b21b      	sxth	r3, r3
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	b21b      	sxth	r3, r3
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3309      	adds	r3, #9
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	021b      	lsls	r3, r3, #8
 8004f9c:	b21a      	sxth	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3308      	adds	r3, #8
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	b21b      	sxth	r3, r3
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	b21a      	sxth	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	330b      	adds	r3, #11
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	021b      	lsls	r3, r3, #8
 8004fb6:	b21a      	sxth	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	330a      	adds	r3, #10
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	b21b      	sxth	r3, r3
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	b21a      	sxth	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	330d      	adds	r3, #13
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	021b      	lsls	r3, r3, #8
 8004fd0:	b21a      	sxth	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	330c      	adds	r3, #12
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	b21b      	sxth	r3, r3
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	b21a      	sxth	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	330f      	adds	r3, #15
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	021b      	lsls	r3, r3, #8
 8004fea:	b21a      	sxth	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	330e      	adds	r3, #14
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	b21b      	sxth	r3, r3
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	b21a      	sxth	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3311      	adds	r3, #17
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	021b      	lsls	r3, r3, #8
 8005004:	b21a      	sxth	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	3310      	adds	r3, #16
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	b21b      	sxth	r3, r3
 800500e:	4313      	orrs	r3, r2
 8005010:	b21a      	sxth	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3313      	adds	r3, #19
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	021b      	lsls	r3, r3, #8
 800501e:	b21a      	sxth	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3312      	adds	r3, #18
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	b21b      	sxth	r3, r3
 8005028:	4313      	orrs	r3, r2
 800502a:	b21a      	sxth	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3315      	adds	r3, #21
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	021b      	lsls	r3, r3, #8
 8005038:	b21a      	sxth	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3314      	adds	r3, #20
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	b21b      	sxth	r3, r3
 8005042:	4313      	orrs	r3, r2
 8005044:	b21a      	sxth	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	3317      	adds	r3, #23
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	021b      	lsls	r3, r3, #8
 8005052:	b21a      	sxth	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3316      	adds	r3, #22
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	b21b      	sxth	r3, r3
 800505c:	4313      	orrs	r3, r2
 800505e:	b21a      	sxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	7e5a      	ldrb	r2, [r3, #25]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	761a      	strb	r2, [r3, #24]

}
 800506c:	bf00      	nop
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	3310      	adds	r3, #16
 8005086:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3301      	adds	r3, #1
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	021b      	lsls	r3, r3, #8
 8005090:	b21a      	sxth	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	b21b      	sxth	r3, r3
 8005098:	4313      	orrs	r3, r2
 800509a:	b21a      	sxth	r2, r3
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	789a      	ldrb	r2, [r3, #2]
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3303      	adds	r3, #3
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	b25b      	sxtb	r3, r3
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3304      	adds	r3, #4
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	b21b      	sxth	r3, r3
 80050c0:	f003 030f 	and.w	r3, r3, #15
 80050c4:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80050c6:	8a7a      	ldrh	r2, [r7, #18]
 80050c8:	8a3b      	ldrh	r3, [r7, #16]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	b21a      	sxth	r2, r3
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	3305      	adds	r3, #5
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	b25b      	sxtb	r3, r3
 80050da:	b29b      	uxth	r3, r3
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	b29b      	uxth	r3, r3
 80050e0:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	3304      	adds	r3, #4
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	091b      	lsrs	r3, r3, #4
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 80050ee:	89fa      	ldrh	r2, [r7, #14]
 80050f0:	89bb      	ldrh	r3, [r7, #12]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	b21a      	sxth	r2, r3
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	3306      	adds	r3, #6
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	b25a      	sxtb	r2, r3
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8005108:	bf00      	nop
 800510a:	371c      	adds	r7, #28
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	4603      	mov	r3, r0
 800511c:	460a      	mov	r2, r1
 800511e:	71fb      	strb	r3, [r7, #7]
 8005120:	4613      	mov	r3, r2
 8005122:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 8005124:	2300      	movs	r3, #0
 8005126:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8005128:	79fa      	ldrb	r2, [r7, #7]
 800512a:	79bb      	ldrb	r3, [r7, #6]
 800512c:	4013      	ands	r3, r2
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8005134:	2301      	movs	r3, #1
 8005136:	73fb      	strb	r3, [r7, #15]
 8005138:	e001      	b.n	800513e <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 800513a:	2300      	movs	r3, #0
 800513c:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 800513e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00b      	beq.n	8005172 <null_ptr_check+0x26>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d007      	beq.n	8005172 <null_ptr_check+0x26>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <null_ptr_check+0x26>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d102      	bne.n	8005178 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8005172:	23ff      	movs	r3, #255	; 0xff
 8005174:	73fb      	strb	r3, [r7, #15]
 8005176:	e001      	b.n	800517c <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 8005178:	2300      	movs	r3, #0
 800517a:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800517c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <user_i2c_read>:
int8_t init_bme280(void);
void bme280_measure(void);

//----------------------------------------------------------------------------------------
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af02      	add	r7, sp, #8
 8005192:	603a      	str	r2, [r7, #0]
 8005194:	461a      	mov	r2, r3
 8005196:	4603      	mov	r3, r0
 8005198:	71fb      	strb	r3, [r7, #7]
 800519a:	460b      	mov	r3, r1
 800519c:	71bb      	strb	r3, [r7, #6]
 800519e:	4613      	mov	r3, r2
 80051a0:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 80051a2:	79fb      	ldrb	r3, [r7, #7]
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	b299      	uxth	r1, r3
 80051aa:	1dba      	adds	r2, r7, #6
 80051ac:	230a      	movs	r3, #10
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	2301      	movs	r3, #1
 80051b2:	4811      	ldr	r0, [pc, #68]	; (80051f8 <user_i2c_read+0x6c>)
 80051b4:	f003 fdd6 	bl	8008d64 <HAL_I2C_Master_Transmit>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <user_i2c_read+0x38>
 80051be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051c2:	e014      	b.n	80051ee <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c3, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 80051c4:	79fb      	ldrb	r3, [r7, #7]
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	b21b      	sxth	r3, r3
 80051ca:	f043 0301 	orr.w	r3, r3, #1
 80051ce:	b21b      	sxth	r3, r3
 80051d0:	b299      	uxth	r1, r3
 80051d2:	88bb      	ldrh	r3, [r7, #4]
 80051d4:	220a      	movs	r2, #10
 80051d6:	9200      	str	r2, [sp, #0]
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	4807      	ldr	r0, [pc, #28]	; (80051f8 <user_i2c_read+0x6c>)
 80051dc:	f003 fec0 	bl	8008f60 <HAL_I2C_Master_Receive>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d002      	beq.n	80051ec <user_i2c_read+0x60>
 80051e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051ea:	e000      	b.n	80051ee <user_i2c_read+0x62>

  return 0;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	200002e8 	.word	0x200002e8

080051fc <user_delay_ms>:
//----------------------------------------------------------------------------------------
void user_delay_ms(uint32_t period)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f001 fbcf 	bl	80069a8 <HAL_Delay>
}
 800520a:	bf00      	nop
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <user_i2c_write>:
//----------------------------------------------------------------------------------------
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af02      	add	r7, sp, #8
 800521a:	603a      	str	r2, [r7, #0]
 800521c:	461a      	mov	r2, r3
 800521e:	4603      	mov	r3, r0
 8005220:	71fb      	strb	r3, [r7, #7]
 8005222:	460b      	mov	r3, r1
 8005224:	71bb      	strb	r3, [r7, #6]
 8005226:	4613      	mov	r3, r2
 8005228:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 800522a:	88bb      	ldrh	r3, [r7, #4]
 800522c:	3301      	adds	r3, #1
 800522e:	4618      	mov	r0, r3
 8005230:	f00b fb94 	bl	801095c <malloc>
 8005234:	4603      	mov	r3, r0
 8005236:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 8005238:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	3301      	adds	r3, #1
 8005244:	88ba      	ldrh	r2, [r7, #4]
 8005246:	6839      	ldr	r1, [r7, #0]
 8005248:	4618      	mov	r0, r3
 800524a:	f00b fb97 	bl	801097c <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 800524e:	79fb      	ldrb	r3, [r7, #7]
 8005250:	b29b      	uxth	r3, r3
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	b299      	uxth	r1, r3
 8005256:	88bb      	ldrh	r3, [r7, #4]
 8005258:	3301      	adds	r3, #1
 800525a:	b29b      	uxth	r3, r3
 800525c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005260:	9200      	str	r2, [sp, #0]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	4808      	ldr	r0, [pc, #32]	; (8005288 <user_i2c_write+0x74>)
 8005266:	f003 fd7d 	bl	8008d64 <HAL_I2C_Master_Transmit>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <user_i2c_write+0x62>
 8005270:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005274:	e003      	b.n	800527e <user_i2c_write+0x6a>

  free(buf);
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f00b fb78 	bl	801096c <free>
  return 0;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	200002e8 	.word	0x200002e8

0800528c <detect_all_sensors_and_init>:
}i2c_device;


//----------------------------------------------------------------------------------------
void detect_all_sensors_and_init(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	af00      	add	r7, sp, #0
	detect_bme280();
 8005290:	f000 fa64 	bl	800575c <detect_bme280>
	if(i2c_device.BME280_ready_status == true)
 8005294:	4b10      	ldr	r3, [pc, #64]	; (80052d8 <detect_all_sensors_and_init+0x4c>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <detect_all_sensors_and_init+0x14>
	{
		init_bme280();
 800529c:	f000 f9dc 	bl	8005658 <init_bme280>
	}

	detect_mpu6050();
 80052a0:	f000 fa92 	bl	80057c8 <detect_mpu6050>
	if(i2c_device.MPU6050_ready_status == true)
 80052a4:	4b0c      	ldr	r3, [pc, #48]	; (80052d8 <detect_all_sensors_and_init+0x4c>)
 80052a6:	785b      	ldrb	r3, [r3, #1]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <detect_all_sensors_and_init+0x24>
	{
		init_mpu6050();
 80052ac:	f000 f98e 	bl	80055cc <init_mpu6050>
	}



	detect_ms5611();
 80052b0:	f000 fb3a 	bl	8005928 <detect_ms5611>
	if(i2c_device.MS5611_ready_status == true)
 80052b4:	4b08      	ldr	r3, [pc, #32]	; (80052d8 <detect_all_sensors_and_init+0x4c>)
 80052b6:	78db      	ldrb	r3, [r3, #3]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <detect_all_sensors_and_init+0x34>
	{
		init_ms5611();
 80052bc:	f000 f960 	bl	8005580 <init_ms5611>
	}

	init_am2302();			// Init AM2302 sensor
 80052c0:	f000 f846 	bl	8005350 <init_am2302>

	//////////////////////////////////////////////////////////////
	// DON'T WORK
	denect_hmc5883l();								// Don't work
 80052c4:	f000 fb02 	bl	80058cc <denect_hmc5883l>

	detect_apds9960();
 80052c8:	f000 fb5c 	bl	8005984 <detect_apds9960>
	if(i2c_device.APDS9960_ready_status == true)
	{
		//init_apds9960();
	}
	///////////////////////////////////////////////////////////////
	detect_oled_screen();
 80052cc:	f000 fb90 	bl	80059f0 <detect_oled_screen>
	detect_ds3231();
 80052d0:	f000 fbb4 	bl	8005a3c <detect_ds3231>

}
 80052d4:	bf00      	nop
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	20000628 	.word	0x20000628

080052dc <measure_sensors>:
//---------------------------------------------------------------------------------------
// Measure one time
void measure_sensors(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
//	while(1)
//	{

		bme280_measure();
 80052e2:	f000 fa03 	bl	80056ec <bme280_measure>
		mpu6050_measure();
 80052e6:	f000 f981 	bl	80055ec <mpu6050_measure>
		ms5611_measure();
 80052ea:	f000 f955 	bl	8005598 <ms5611_measure>

		bool am2302_measure_ok = true;
 80052ee:	2301      	movs	r3, #1
 80052f0:	71fb      	strb	r3, [r7, #7]
		if(am2302_measure_ok)
 80052f2:	79fb      	ldrb	r3, [r7, #7]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d005      	beq.n	8005304 <measure_sensors+0x28>
		{
			HAL_Delay(1000);
 80052f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80052fc:	f001 fb54 	bl	80069a8 <HAL_Delay>
			am2302_measure();	// Measure must be less than one time per 2-3 seconds
 8005300:	f000 f84a 	bl	8005398 <am2302_measure>
		//HAL_Delay(1000);
//	}



}
 8005304:	bf00      	nop
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8005314:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <DelayMicro+0x3c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 800531a:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <DelayMicro+0x3c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a0b      	ldr	r2, [pc, #44]	; (800534c <DelayMicro+0x40>)
 8005320:	fba2 2303 	umull	r2, r3, r2, r3
 8005324:	0ddb      	lsrs	r3, r3, #23
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	fb02 f303 	mul.w	r3, r2, r3
 800532c:	607b      	str	r3, [r7, #4]
	while (micros--);
 800532e:	bf00      	nop
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	1e5a      	subs	r2, r3, #1
 8005334:	607a      	str	r2, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1fa      	bne.n	8005330 <DelayMicro+0x24>
}
 800533a:	bf00      	nop
 800533c:	bf00      	nop
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	20000008 	.word	0x20000008
 800534c:	ffa71ee7 	.word	0xffa71ee7

08005350 <init_am2302>:
//----------------------------------------------------------------------------------------
void init_am2302(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 8005354:	4b0f      	ldr	r3, [pc, #60]	; (8005394 <init_am2302+0x44>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a0e      	ldr	r2, [pc, #56]	; (8005394 <init_am2302+0x44>)
 800535a:	f043 0304 	orr.w	r3, r3, #4
 800535e:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 8005360:	4b0c      	ldr	r3, [pc, #48]	; (8005394 <init_am2302+0x44>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	4a0b      	ldr	r2, [pc, #44]	; (8005394 <init_am2302+0x44>)
 8005366:	f023 0302 	bic.w	r3, r3, #2
 800536a:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 800536c:	4b09      	ldr	r3, [pc, #36]	; (8005394 <init_am2302+0x44>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	4a08      	ldr	r2, [pc, #32]	; (8005394 <init_am2302+0x44>)
 8005372:	f043 0302 	orr.w	r3, r3, #2
 8005376:	6093      	str	r3, [r2, #8]
	GPIOC->ODR ^= 0x02; 							// set GPIOC pin 1 on high
 8005378:	4b06      	ldr	r3, [pc, #24]	; (8005394 <init_am2302+0x44>)
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	4a05      	ldr	r2, [pc, #20]	; (8005394 <init_am2302+0x44>)
 800537e:	f083 0302 	eor.w	r3, r3, #2
 8005382:	6153      	str	r3, [r2, #20]
	HAL_Delay(2000); 							// First init must be 2 seconds delay
 8005384:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005388:	f001 fb0e 	bl	80069a8 <HAL_Delay>
	am2302_measure(); 							// For fill in i2c_device.AM2302_ready_status
 800538c:	f000 f804 	bl	8005398 <am2302_measure>
}
 8005390:	bf00      	nop
 8005392:	bd80      	pop	{r7, pc}
 8005394:	40020800 	.word	0x40020800

08005398 <am2302_measure>:
//----------------------------------------------------------------------------------------
void am2302_measure(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 * __                ________________________
 * 	 \			    /				         \
 * 	  \____________/			              \_
 */

	bool get_data_status = false;
 800539e:	2300      	movs	r3, #0
 80053a0:	75fb      	strb	r3, [r7, #23]
	int j = 0;   							// Counter bytes
 80053a2:	2300      	movs	r3, #0
 80053a4:	613b      	str	r3, [r7, #16]
	int i = 0;								// Counter bits
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]
	uint8_t data[4] = {0};					// Buffer for incoming data from sensor
 80053aa:	2300      	movs	r3, #0
 80053ac:	603b      	str	r3, [r7, #0]
	float temper, hum;						// Buffer variables

	// Init GPIO like output
	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 80053ae:	4b72      	ldr	r3, [pc, #456]	; (8005578 <am2302_measure+0x1e0>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a71      	ldr	r2, [pc, #452]	; (8005578 <am2302_measure+0x1e0>)
 80053b4:	f043 0304 	orr.w	r3, r3, #4
 80053b8:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 80053ba:	4b6f      	ldr	r3, [pc, #444]	; (8005578 <am2302_measure+0x1e0>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	4a6e      	ldr	r2, [pc, #440]	; (8005578 <am2302_measure+0x1e0>)
 80053c0:	f023 0302 	bic.w	r3, r3, #2
 80053c4:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 80053c6:	4b6c      	ldr	r3, [pc, #432]	; (8005578 <am2302_measure+0x1e0>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	4a6b      	ldr	r2, [pc, #428]	; (8005578 <am2302_measure+0x1e0>)
 80053cc:	f043 0302 	orr.w	r3, r3, #2
 80053d0:	6093      	str	r3, [r2, #8]

	// Make output pin C1
	GPIOC->ODR &= ~0x02;		// Low level
 80053d2:	4b69      	ldr	r3, [pc, #420]	; (8005578 <am2302_measure+0x1e0>)
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	4a68      	ldr	r2, [pc, #416]	; (8005578 <am2302_measure+0x1e0>)
 80053d8:	f023 0302 	bic.w	r3, r3, #2
 80053dc:	6153      	str	r3, [r2, #20]
	DelayMicro(18000);
 80053de:	f244 6050 	movw	r0, #18000	; 0x4650
 80053e2:	f7ff ff93 	bl	800530c <DelayMicro>
	GPIOC->ODR ^= 0x02;			// High level
 80053e6:	4b64      	ldr	r3, [pc, #400]	; (8005578 <am2302_measure+0x1e0>)
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	4a63      	ldr	r2, [pc, #396]	; (8005578 <am2302_measure+0x1e0>)
 80053ec:	f083 0302 	eor.w	r3, r3, #2
 80053f0:	6153      	str	r3, [r2, #20]
	DelayMicro(39);
 80053f2:	2027      	movs	r0, #39	; 0x27
 80053f4:	f7ff ff8a 	bl	800530c <DelayMicro>

	// Make input pin C1
	GPIOC->MODER &= ~0x04;  	// Set Pin C1 Input   (MODER GPIOC_1 Must be 00)
 80053f8:	4b5f      	ldr	r3, [pc, #380]	; (8005578 <am2302_measure+0x1e0>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a5e      	ldr	r2, [pc, #376]	; (8005578 <am2302_measure+0x1e0>)
 80053fe:	f023 0304 	bic.w	r3, r3, #4
 8005402:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~0x04;		// Set Pin C1 Pull up
 8005404:	4b5c      	ldr	r3, [pc, #368]	; (8005578 <am2302_measure+0x1e0>)
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	4a5b      	ldr	r2, [pc, #364]	; (8005578 <am2302_measure+0x1e0>)
 800540a:	f023 0304 	bic.w	r3, r3, #4
 800540e:	60d3      	str	r3, [r2, #12]

	if(GPIOC->IDR & GPIO_IDR_ID1)		// Sensor must pull down
 8005410:	4b59      	ldr	r3, [pc, #356]	; (8005578 <am2302_measure+0x1e0>)
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <am2302_measure+0x8a>
	{
		get_data_status = false; 					// Error. Sensor not response
 800541c:	2300      	movs	r3, #0
 800541e:	75fb      	strb	r3, [r7, #23]
 8005420:	e001      	b.n	8005426 <am2302_measure+0x8e>
	}
	else
	{
		get_data_status = true;
 8005422:	2301      	movs	r3, #1
 8005424:	75fb      	strb	r3, [r7, #23]
	}

	DelayMicro(80);
 8005426:	2050      	movs	r0, #80	; 0x50
 8005428:	f7ff ff70 	bl	800530c <DelayMicro>
	if(!(GPIOC->IDR & GPIO_IDR_ID1))  	// Sensor must pull up
 800542c:	4b52      	ldr	r3, [pc, #328]	; (8005578 <am2302_measure+0x1e0>)
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d102      	bne.n	800543e <am2302_measure+0xa6>
	{
		get_data_status = false; 					// Error. Sensor not response
 8005438:	2300      	movs	r3, #0
 800543a:	75fb      	strb	r3, [r7, #23]
 800543c:	e001      	b.n	8005442 <am2302_measure+0xaa>
	}
	else
	{
		get_data_status = true;
 800543e:	2301      	movs	r3, #1
 8005440:	75fb      	strb	r3, [r7, #23]
	}
	DelayMicro(80);
 8005442:	2050      	movs	r0, #80	; 0x50
 8005444:	f7ff ff62 	bl	800530c <DelayMicro>

	if(get_data_status == true)
 8005448:	7dfb      	ldrb	r3, [r7, #23]
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 808c 	beq.w	8005568 <am2302_measure+0x1d0>
	{
		for(j = 0; j <5; j++)							// Reading 5 bytes
 8005450:	2300      	movs	r3, #0
 8005452:	613b      	str	r3, [r7, #16]
 8005454:	e048      	b.n	80054e8 <am2302_measure+0x150>
		{
			data[4-j] = 0;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f1c3 0304 	rsb	r3, r3, #4
 800545c:	f107 0218 	add.w	r2, r7, #24
 8005460:	4413      	add	r3, r2
 8005462:	2200      	movs	r2, #0
 8005464:	f803 2c18 	strb.w	r2, [r3, #-24]
			for(i = 0; i < 8; i++)						// Reading 8 bits
 8005468:	2300      	movs	r3, #0
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	e034      	b.n	80054d8 <am2302_measure+0x140>
			{
				while(!(GPIOC->IDR & GPIO_IDR_ID1));	// While signal is "0"
 800546e:	bf00      	nop
 8005470:	4b41      	ldr	r3, [pc, #260]	; (8005578 <am2302_measure+0x1e0>)
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d0f9      	beq.n	8005470 <am2302_measure+0xd8>
				DelayMicro(30);
 800547c:	201e      	movs	r0, #30
 800547e:	f7ff ff45 	bl	800530c <DelayMicro>
				if(GPIOC->IDR & GPIO_IDR_ID1)			// If signal is high when wrute "1" in buffer (data[])
 8005482:	4b3d      	ldr	r3, [pc, #244]	; (8005578 <am2302_measure+0x1e0>)
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d01a      	beq.n	80054c4 <am2302_measure+0x12c>
				{
					data[4-j] |= (1 << (7 - i));        // Shift received bite
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f1c3 0304 	rsb	r3, r3, #4
 8005494:	f107 0218 	add.w	r2, r7, #24
 8005498:	4413      	add	r3, r2
 800549a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800549e:	b25a      	sxtb	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f1c3 0307 	rsb	r3, r3, #7
 80054a6:	2101      	movs	r1, #1
 80054a8:	fa01 f303 	lsl.w	r3, r1, r3
 80054ac:	b25b      	sxtb	r3, r3
 80054ae:	4313      	orrs	r3, r2
 80054b0:	b25a      	sxtb	r2, r3
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f1c3 0304 	rsb	r3, r3, #4
 80054b8:	b2d2      	uxtb	r2, r2
 80054ba:	f107 0118 	add.w	r1, r7, #24
 80054be:	440b      	add	r3, r1
 80054c0:	f803 2c18 	strb.w	r2, [r3, #-24]
				}
				while(GPIOC->IDR & GPIO_IDR_ID1);		// Wait end of "1" signal
 80054c4:	bf00      	nop
 80054c6:	4b2c      	ldr	r3, [pc, #176]	; (8005578 <am2302_measure+0x1e0>)
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1f9      	bne.n	80054c6 <am2302_measure+0x12e>
			for(i = 0; i < 8; i++)						// Reading 8 bits
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	3301      	adds	r3, #1
 80054d6:	60fb      	str	r3, [r7, #12]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2b07      	cmp	r3, #7
 80054dc:	ddc7      	ble.n	800546e <am2302_measure+0xd6>
			}
			get_data_status = true;										// Data was been written okay
 80054de:	2301      	movs	r3, #1
 80054e0:	75fb      	strb	r3, [r7, #23]
		for(j = 0; j <5; j++)							// Reading 5 bytes
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	3301      	adds	r3, #1
 80054e6:	613b      	str	r3, [r7, #16]
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	ddb3      	ble.n	8005456 <am2302_measure+0xbe>
		}

		temper = (float)((*(uint16_t*)(data+1)) & 0x3FFF) /10;
 80054ee:	463b      	mov	r3, r7
 80054f0:	3301      	adds	r3, #1
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80054f8:	ee07 3a90 	vmov	s15, r3
 80054fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005500:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005504:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005508:	edc7 7a02 	vstr	s15, [r7, #8]
		if((*(uint16_t*)(data+1)) & 0x8000) temper  *= -1.0;
 800550c:	463b      	mov	r3, r7
 800550e:	3301      	adds	r3, #1
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	b21b      	sxth	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	da0f      	bge.n	8005538 <am2302_measure+0x1a0>
 8005518:	68b8      	ldr	r0, [r7, #8]
 800551a:	f7fa ffb9 	bl	8000490 <__aeabi_f2d>
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	4610      	mov	r0, r2
 8005524:	4619      	mov	r1, r3
 8005526:	f7fb fae3 	bl	8000af0 <__aeabi_d2f>
 800552a:	4603      	mov	r3, r0
 800552c:	ee07 3a90 	vmov	s15, r3
 8005530:	eef1 7a67 	vneg.f32	s15, s15
 8005534:	edc7 7a02 	vstr	s15, [r7, #8]

		i2c_device.AM2302_temperature = temper;
 8005538:	4a10      	ldr	r2, [pc, #64]	; (800557c <am2302_measure+0x1e4>)
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	6613      	str	r3, [r2, #96]	; 0x60

		hum = (float)(*(int16_t*)(data+3)) / 10;
 800553e:	463b      	mov	r3, r7
 8005540:	3303      	adds	r3, #3
 8005542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005546:	ee07 3a90 	vmov	s15, r3
 800554a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800554e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005552:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005556:	edc7 7a01 	vstr	s15, [r7, #4]
		i2c_device.AM2302_humidity = hum;
 800555a:	4a08      	ldr	r2, [pc, #32]	; (800557c <am2302_measure+0x1e4>)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6653      	str	r3, [r2, #100]	; 0x64

		i2c_device.AM2302_ready_status = true;
 8005560:	4b06      	ldr	r3, [pc, #24]	; (800557c <am2302_measure+0x1e4>)
 8005562:	2201      	movs	r2, #1
 8005564:	715a      	strb	r2, [r3, #5]
	}
	else
	{
		i2c_device.AM2302_ready_status = false;
	}
}
 8005566:	e002      	b.n	800556e <am2302_measure+0x1d6>
		i2c_device.AM2302_ready_status = false;
 8005568:	4b04      	ldr	r3, [pc, #16]	; (800557c <am2302_measure+0x1e4>)
 800556a:	2200      	movs	r2, #0
 800556c:	715a      	strb	r2, [r3, #5]
}
 800556e:	bf00      	nop
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40020800 	.word	0x40020800
 800557c:	20000628 	.word	0x20000628

08005580 <init_ms5611>:
//----------------------------------------------------------------------------------------
void init_ms5611(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0
	ms5611_set_i2c(&hi2c2);
 8005584:	4803      	ldr	r0, [pc, #12]	; (8005594 <init_ms5611+0x14>)
 8005586:	f000 fe21 	bl	80061cc <ms5611_set_i2c>
	ms5611_init();
 800558a:	f000 fe73 	bl	8006274 <ms5611_init>
}
 800558e:	bf00      	nop
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20000394 	.word	0x20000394

08005598 <ms5611_measure>:
//----------------------------------------------------------------------------------------
void ms5611_measure(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
	ms5611_update();
 800559c:	f000 ff08 	bl	80063b0 <ms5611_update>

	i2c_device.MS5611_temperature = ms5611_get_temperature();
 80055a0:	f000 ff0e 	bl	80063c0 <ms5611_get_temperature>
 80055a4:	eeb0 7a40 	vmov.f32	s14, s0
 80055a8:	eef0 7a60 	vmov.f32	s15, s1
 80055ac:	4b06      	ldr	r3, [pc, #24]	; (80055c8 <ms5611_measure+0x30>)
 80055ae:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	i2c_device.MS5611_pressure = ms5611_get_pressure();
 80055b2:	f000 ff81 	bl	80064b8 <ms5611_get_pressure>
 80055b6:	eeb0 7a40 	vmov.f32	s14, s0
 80055ba:	eef0 7a60 	vmov.f32	s15, s1
 80055be:	4b02      	ldr	r3, [pc, #8]	; (80055c8 <ms5611_measure+0x30>)
 80055c0:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
}
 80055c4:	bf00      	nop
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	20000628 	.word	0x20000628

080055cc <init_mpu6050>:
//----------------------------------------------------------------------------------------
int8_t init_mpu6050(void)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	af00      	add	r7, sp, #0
	if(MPU6050_Init(&hi2c2) == 1)
 80055d0:	4805      	ldr	r0, [pc, #20]	; (80055e8 <init_mpu6050+0x1c>)
 80055d2:	f000 fa61 	bl	8005a98 <MPU6050_Init>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <init_mpu6050+0x14>
	{
		return 0;
 80055dc:	2300      	movs	r3, #0
 80055de:	e000      	b.n	80055e2 <init_mpu6050+0x16>
	}
	else
	{
		return 1;
 80055e0:	2301      	movs	r3, #1
	}
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	20000394 	.word	0x20000394

080055ec <mpu6050_measure>:
//----------------------------------------------------------------------------------------
void mpu6050_measure(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
	MPU6050_Read_All(&hi2c2, &MPU6050);
 80055f0:	4916      	ldr	r1, [pc, #88]	; (800564c <mpu6050_measure+0x60>)
 80055f2:	4817      	ldr	r0, [pc, #92]	; (8005650 <mpu6050_measure+0x64>)
 80055f4:	f000 faa8 	bl	8005b48 <MPU6050_Read_All>

	i2c_device.MPU6050_acceleration_Ax = MPU6050.Ax;
 80055f8:	4b14      	ldr	r3, [pc, #80]	; (800564c <mpu6050_measure+0x60>)
 80055fa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80055fe:	4915      	ldr	r1, [pc, #84]	; (8005654 <mpu6050_measure+0x68>)
 8005600:	e9c1 2306 	strd	r2, r3, [r1, #24]
	i2c_device.MPU6050_acceleration_Ay = MPU6050.Ay;
 8005604:	4b11      	ldr	r3, [pc, #68]	; (800564c <mpu6050_measure+0x60>)
 8005606:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800560a:	4912      	ldr	r1, [pc, #72]	; (8005654 <mpu6050_measure+0x68>)
 800560c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	i2c_device.MPU6050_acceleration_Az = MPU6050.Az;
 8005610:	4b0e      	ldr	r3, [pc, #56]	; (800564c <mpu6050_measure+0x60>)
 8005612:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005616:	490f      	ldr	r1, [pc, #60]	; (8005654 <mpu6050_measure+0x68>)
 8005618:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	i2c_device.MPU6050_gyro_Gx = MPU6050.Gx;
 800561c:	4b0b      	ldr	r3, [pc, #44]	; (800564c <mpu6050_measure+0x60>)
 800561e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005622:	490c      	ldr	r1, [pc, #48]	; (8005654 <mpu6050_measure+0x68>)
 8005624:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	i2c_device.MPU6050_gyro_Gy = MPU6050.Gy;
 8005628:	4b08      	ldr	r3, [pc, #32]	; (800564c <mpu6050_measure+0x60>)
 800562a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800562e:	4909      	ldr	r1, [pc, #36]	; (8005654 <mpu6050_measure+0x68>)
 8005630:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	i2c_device.MPU6050_gyro_Gz = MPU6050.Gz;
 8005634:	4b05      	ldr	r3, [pc, #20]	; (800564c <mpu6050_measure+0x60>)
 8005636:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800563a:	4906      	ldr	r1, [pc, #24]	; (8005654 <mpu6050_measure+0x68>)
 800563c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	i2c_device.MPU6050_temperature = MPU6050.Temperature;
 8005640:	4b02      	ldr	r3, [pc, #8]	; (800564c <mpu6050_measure+0x60>)
 8005642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005644:	4a03      	ldr	r2, [pc, #12]	; (8005654 <mpu6050_measure+0x68>)
 8005646:	6493      	str	r3, [r2, #72]	; 0x48
}
 8005648:	bf00      	nop
 800564a:	bd80      	pop	{r7, pc}
 800564c:	200005d0 	.word	0x200005d0
 8005650:	20000394 	.word	0x20000394
 8005654:	20000628 	.word	0x20000628

08005658 <init_bme280>:
//----------------------------------------------------------------------------------------
int8_t init_bme280(void)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	af00      	add	r7, sp, #0
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 800565c:	4b1e      	ldr	r3, [pc, #120]	; (80056d8 <init_bme280+0x80>)
 800565e:	2276      	movs	r2, #118	; 0x76
 8005660:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 8005662:	4b1d      	ldr	r3, [pc, #116]	; (80056d8 <init_bme280+0x80>)
 8005664:	2201      	movs	r2, #1
 8005666:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 8005668:	4b1b      	ldr	r3, [pc, #108]	; (80056d8 <init_bme280+0x80>)
 800566a:	4a1c      	ldr	r2, [pc, #112]	; (80056dc <init_bme280+0x84>)
 800566c:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 800566e:	4b1a      	ldr	r3, [pc, #104]	; (80056d8 <init_bme280+0x80>)
 8005670:	4a1b      	ldr	r2, [pc, #108]	; (80056e0 <init_bme280+0x88>)
 8005672:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 8005674:	4b18      	ldr	r3, [pc, #96]	; (80056d8 <init_bme280+0x80>)
 8005676:	4a1b      	ldr	r2, [pc, #108]	; (80056e4 <init_bme280+0x8c>)
 8005678:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&dev);
 800567a:	4817      	ldr	r0, [pc, #92]	; (80056d8 <init_bme280+0x80>)
 800567c:	f7fe fb6a 	bl	8003d54 <bme280_init>
 8005680:	4603      	mov	r3, r0
 8005682:	461a      	mov	r2, r3
 8005684:	4b18      	ldr	r3, [pc, #96]	; (80056e8 <init_bme280+0x90>)
 8005686:	701a      	strb	r2, [r3, #0]

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8005688:	4b13      	ldr	r3, [pc, #76]	; (80056d8 <init_bme280+0x80>)
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8005690:	4b11      	ldr	r3, [pc, #68]	; (80056d8 <init_bme280+0x80>)
 8005692:	2205      	movs	r2, #5
 8005694:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8005698:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <init_bme280+0x80>)
 800569a:	2202      	movs	r2, #2
 800569c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 80056a0:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <init_bme280+0x80>)
 80056a2:	2204      	movs	r2, #4
 80056a4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 80056a8:	490b      	ldr	r1, [pc, #44]	; (80056d8 <init_bme280+0x80>)
 80056aa:	200f      	movs	r0, #15
 80056ac:	f7fe fc44 	bl	8003f38 <bme280_set_sensor_settings>
 80056b0:	4603      	mov	r3, r0
 80056b2:	461a      	mov	r2, r3
 80056b4:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <init_bme280+0x90>)
 80056b6:	701a      	strb	r2, [r3, #0]

	//	  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 80056b8:	4907      	ldr	r1, [pc, #28]	; (80056d8 <init_bme280+0x80>)
 80056ba:	2003      	movs	r0, #3
 80056bc:	f7fe fc91 	bl	8003fe2 <bme280_set_sensor_mode>
 80056c0:	4603      	mov	r3, r0
 80056c2:	461a      	mov	r2, r3
 80056c4:	4b08      	ldr	r3, [pc, #32]	; (80056e8 <init_bme280+0x90>)
 80056c6:	701a      	strb	r2, [r3, #0]

	dev.delay_ms(40);
 80056c8:	4b03      	ldr	r3, [pc, #12]	; (80056d8 <init_bme280+0x80>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	2028      	movs	r0, #40	; 0x28
 80056ce:	4798      	blx	r3
}
 80056d0:	bf00      	nop
 80056d2:	4618      	mov	r0, r3
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	20000570 	.word	0x20000570
 80056dc:	0800518d 	.word	0x0800518d
 80056e0:	08005215 	.word	0x08005215
 80056e4:	080051fd 	.word	0x080051fd
 80056e8:	200005b0 	.word	0x200005b0

080056ec <bme280_measure>:
//----------------------------------------------------------------------------------------
void bme280_measure(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 80056f0:	4a16      	ldr	r2, [pc, #88]	; (800574c <bme280_measure+0x60>)
 80056f2:	4917      	ldr	r1, [pc, #92]	; (8005750 <bme280_measure+0x64>)
 80056f4:	2007      	movs	r0, #7
 80056f6:	f7fe fcf0 	bl	80040da <bme280_get_sensor_data>
 80056fa:	4603      	mov	r3, r0
 80056fc:	461a      	mov	r2, r3
 80056fe:	4b15      	ldr	r3, [pc, #84]	; (8005754 <bme280_measure+0x68>)
 8005700:	701a      	strb	r2, [r3, #0]

	if(rslt == BME280_OK)
 8005702:	4b14      	ldr	r3, [pc, #80]	; (8005754 <bme280_measure+0x68>)
 8005704:	f993 3000 	ldrsb.w	r3, [r3]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d11d      	bne.n	8005748 <bme280_measure+0x5c>
	{
		// Save data in main structure
		i2c_device.BME280_temperature = comp_data.temperature;
 800570c:	4b10      	ldr	r3, [pc, #64]	; (8005750 <bme280_measure+0x64>)
 800570e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005712:	4610      	mov	r0, r2
 8005714:	4619      	mov	r1, r3
 8005716:	f7fb f9eb 	bl	8000af0 <__aeabi_d2f>
 800571a:	4603      	mov	r3, r0
 800571c:	4a0e      	ldr	r2, [pc, #56]	; (8005758 <bme280_measure+0x6c>)
 800571e:	6093      	str	r3, [r2, #8]
		i2c_device.BME280_humidity = comp_data.humidity;
 8005720:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <bme280_measure+0x64>)
 8005722:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005726:	4610      	mov	r0, r2
 8005728:	4619      	mov	r1, r3
 800572a:	f7fb f9e1 	bl	8000af0 <__aeabi_d2f>
 800572e:	4603      	mov	r3, r0
 8005730:	4a09      	ldr	r2, [pc, #36]	; (8005758 <bme280_measure+0x6c>)
 8005732:	60d3      	str	r3, [r2, #12]
		i2c_device.BME280_preasure = comp_data.pressure;
 8005734:	4b06      	ldr	r3, [pc, #24]	; (8005750 <bme280_measure+0x64>)
 8005736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573a:	4610      	mov	r0, r2
 800573c:	4619      	mov	r1, r3
 800573e:	f7fb f9d7 	bl	8000af0 <__aeabi_d2f>
 8005742:	4603      	mov	r3, r0
 8005744:	4a04      	ldr	r2, [pc, #16]	; (8005758 <bme280_measure+0x6c>)
 8005746:	6113      	str	r3, [r2, #16]
		//temperature = comp_data.temperature / 100.0;      /* °C  */
		//humidity = comp_data.humidity / 1024.0;           /* %   */
		//pressure = comp_data.pressure / 10000.0;          /* hPa */
	}
}
 8005748:	bf00      	nop
 800574a:	bd80      	pop	{r7, pc}
 800574c:	20000570 	.word	0x20000570
 8005750:	200005b8 	.word	0x200005b8
 8005754:	200005b0 	.word	0x200005b0
 8005758:	20000628 	.word	0x20000628

0800575c <detect_bme280>:

// Function for detect i2c devices ////////////////////////////////////////////////////////
//----------------------------------------------------------------------------------------
// Temperature, humidity and pressure sensor
void detect_bme280(void)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af04      	add	r7, sp, #16
	uint16_t STATUS=0;
 8005762:	2300      	movs	r3, #0
 8005764:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x76;  		 	// BME280
 8005766:	2376      	movs	r3, #118	; 0x76
 8005768:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0xD0;
 800576a:	23d0      	movs	r3, #208	; 0xd0
 800576c:	807b      	strh	r3, [r7, #2]
	uint8_t id = 96;							// in hex form
 800576e:	2360      	movs	r3, #96	; 0x60
 8005770:	707b      	strb	r3, [r7, #1]
	uint8_t buff=0;        						// Return 0x96 -> Dec 60
 8005772:	2300      	movs	r3, #0
 8005774:	703b      	strb	r3, [r7, #0]

	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 8005776:	88bb      	ldrh	r3, [r7, #4]
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	b299      	uxth	r1, r3
 800577c:	887a      	ldrh	r2, [r7, #2]
 800577e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005782:	9302      	str	r3, [sp, #8]
 8005784:	2301      	movs	r3, #1
 8005786:	9301      	str	r3, [sp, #4]
 8005788:	463b      	mov	r3, r7
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	2301      	movs	r3, #1
 800578e:	480c      	ldr	r0, [pc, #48]	; (80057c0 <detect_bme280+0x64>)
 8005790:	f003 ff06 	bl	80095a0 <HAL_I2C_Mem_Read>
 8005794:	4603      	mov	r3, r0
 8005796:	80fb      	strh	r3, [r7, #6]
	//HAL_OK == 0
	if((buff == id) && (STATUS == 0))
 8005798:	783b      	ldrb	r3, [r7, #0]
 800579a:	787a      	ldrb	r2, [r7, #1]
 800579c:	429a      	cmp	r2, r3
 800579e:	d106      	bne.n	80057ae <detect_bme280+0x52>
 80057a0:	88fb      	ldrh	r3, [r7, #6]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d103      	bne.n	80057ae <detect_bme280+0x52>
	{
		i2c_device.BME280_ready_status = true;
 80057a6:	4b07      	ldr	r3, [pc, #28]	; (80057c4 <detect_bme280+0x68>)
 80057a8:	2201      	movs	r2, #1
 80057aa:	701a      	strb	r2, [r3, #0]
 80057ac:	e003      	b.n	80057b6 <detect_bme280+0x5a>
	}
	else
	{
		i2c_device.BME280_ready_status = false;
 80057ae:	4b05      	ldr	r3, [pc, #20]	; (80057c4 <detect_bme280+0x68>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	701a      	strb	r2, [r3, #0]
	}
}
 80057b4:	bf00      	nop
 80057b6:	bf00      	nop
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	200002e8 	.word	0x200002e8
 80057c4:	20000628 	.word	0x20000628

080057c8 <detect_mpu6050>:
//----------------------------------------------------------------------------------------
// 1. IMU Module. Measure Acceleration X, Y, Z and Gyroscope X, Y, Z.
// 2. Turn on ability work with  hmc5883l ( Magnetometer  sensor ).
void detect_mpu6050(void)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b088      	sub	sp, #32
 80057cc:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 80057ce:	2300      	movs	r3, #0
 80057d0:	81fb      	strh	r3, [r7, #14]
	uint16_t addres_device = 0xD0;
 80057d2:	23d0      	movs	r3, #208	; 0xd0
 80057d4:	81bb      	strh	r3, [r7, #12]
	uint16_t id_addr = 0x75;
 80057d6:	2375      	movs	r3, #117	; 0x75
 80057d8:	817b      	strh	r3, [r7, #10]
	uint8_t id = 104;							// in hex form
 80057da:	2368      	movs	r3, #104	; 0x68
 80057dc:	727b      	strb	r3, [r7, #9]
	uint8_t buff = 0;
 80057de:	2300      	movs	r3, #0
 80057e0:	723b      	strb	r3, [r7, #8]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, id_addr, 1, &buff, 1, 1000);
 80057e2:	897a      	ldrh	r2, [r7, #10]
 80057e4:	89b9      	ldrh	r1, [r7, #12]
 80057e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057ea:	9302      	str	r3, [sp, #8]
 80057ec:	2301      	movs	r3, #1
 80057ee:	9301      	str	r3, [sp, #4]
 80057f0:	f107 0308 	add.w	r3, r7, #8
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	2301      	movs	r3, #1
 80057f8:	4832      	ldr	r0, [pc, #200]	; (80058c4 <detect_mpu6050+0xfc>)
 80057fa:	f003 fed1 	bl	80095a0 <HAL_I2C_Mem_Read>
 80057fe:	4603      	mov	r3, r0
 8005800:	81fb      	strh	r3, [r7, #14]

	if((buff == id) && (STATUS == 0))
 8005802:	7a3b      	ldrb	r3, [r7, #8]
 8005804:	7a7a      	ldrb	r2, [r7, #9]
 8005806:	429a      	cmp	r2, r3
 8005808:	d106      	bne.n	8005818 <detect_mpu6050+0x50>
 800580a:	89fb      	ldrh	r3, [r7, #14]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d103      	bne.n	8005818 <detect_mpu6050+0x50>
	{
		i2c_device.MPU6050_ready_status = true;
 8005810:	4b2d      	ldr	r3, [pc, #180]	; (80058c8 <detect_mpu6050+0x100>)
 8005812:	2201      	movs	r2, #1
 8005814:	705a      	strb	r2, [r3, #1]
 8005816:	e002      	b.n	800581e <detect_mpu6050+0x56>
	}
	else
	{
		i2c_device.MPU6050_ready_status = false;
 8005818:	4b2b      	ldr	r3, [pc, #172]	; (80058c8 <detect_mpu6050+0x100>)
 800581a:	2200      	movs	r2, #0
 800581c:	705a      	strb	r2, [r3, #1]
	}

	// turn on direct i2c communication with hmc5883l
	if(i2c_device.MPU6050_ready_status == true)
 800581e:	4b2a      	ldr	r3, [pc, #168]	; (80058c8 <detect_mpu6050+0x100>)
 8005820:	785b      	ldrb	r3, [r3, #1]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d04a      	beq.n	80058bc <detect_mpu6050+0xf4>
	{
		uint8_t data = 0x00;
 8005826:	2300      	movs	r3, #0
 8005828:	71fb      	strb	r3, [r7, #7]
		STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x6A, 1, &data, 1, 1000);		// Disable i2c master mode
 800582a:	89b9      	ldrh	r1, [r7, #12]
 800582c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005830:	9302      	str	r3, [sp, #8]
 8005832:	2301      	movs	r3, #1
 8005834:	9301      	str	r3, [sp, #4]
 8005836:	1dfb      	adds	r3, r7, #7
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	2301      	movs	r3, #1
 800583c:	226a      	movs	r2, #106	; 0x6a
 800583e:	4821      	ldr	r0, [pc, #132]	; (80058c4 <detect_mpu6050+0xfc>)
 8005840:	f003 fdb4 	bl	80093ac <HAL_I2C_Mem_Write>
 8005844:	4603      	mov	r3, r0
 8005846:	81fb      	strh	r3, [r7, #14]
		data = 0x02;
 8005848:	2302      	movs	r3, #2
 800584a:	71fb      	strb	r3, [r7, #7]
		STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x37, 1, &data, 1, 1000);		// Enable i2c master bypass mode
 800584c:	89b9      	ldrh	r1, [r7, #12]
 800584e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005852:	9302      	str	r3, [sp, #8]
 8005854:	2301      	movs	r3, #1
 8005856:	9301      	str	r3, [sp, #4]
 8005858:	1dfb      	adds	r3, r7, #7
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	2301      	movs	r3, #1
 800585e:	2237      	movs	r2, #55	; 0x37
 8005860:	4818      	ldr	r0, [pc, #96]	; (80058c4 <detect_mpu6050+0xfc>)
 8005862:	f003 fda3 	bl	80093ac <HAL_I2C_Mem_Write>
 8005866:	4603      	mov	r3, r0
 8005868:	81fb      	strh	r3, [r7, #14]

		// Check waited registers
		buff = 0;
 800586a:	2300      	movs	r3, #0
 800586c:	723b      	strb	r3, [r7, #8]
		STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, 0x6A, 1, &buff, 1, 1000);
 800586e:	89b9      	ldrh	r1, [r7, #12]
 8005870:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005874:	9302      	str	r3, [sp, #8]
 8005876:	2301      	movs	r3, #1
 8005878:	9301      	str	r3, [sp, #4]
 800587a:	f107 0308 	add.w	r3, r7, #8
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	2301      	movs	r3, #1
 8005882:	226a      	movs	r2, #106	; 0x6a
 8005884:	480f      	ldr	r0, [pc, #60]	; (80058c4 <detect_mpu6050+0xfc>)
 8005886:	f003 fe8b 	bl	80095a0 <HAL_I2C_Mem_Read>
 800588a:	4603      	mov	r3, r0
 800588c:	81fb      	strh	r3, [r7, #14]
		buff = 0;
 800588e:	2300      	movs	r3, #0
 8005890:	723b      	strb	r3, [r7, #8]
		STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device, 0x37, 1, &buff, 1, 1000);
 8005892:	89b9      	ldrh	r1, [r7, #12]
 8005894:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005898:	9302      	str	r3, [sp, #8]
 800589a:	2301      	movs	r3, #1
 800589c:	9301      	str	r3, [sp, #4]
 800589e:	f107 0308 	add.w	r3, r7, #8
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	2301      	movs	r3, #1
 80058a6:	2237      	movs	r2, #55	; 0x37
 80058a8:	4806      	ldr	r0, [pc, #24]	; (80058c4 <detect_mpu6050+0xfc>)
 80058aa:	f003 fe79 	bl	80095a0 <HAL_I2C_Mem_Read>
 80058ae:	4603      	mov	r3, r0
 80058b0:	81fb      	strh	r3, [r7, #14]

		if(STATUS == 0)
 80058b2:	89fb      	ldrh	r3, [r7, #14]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <detect_mpu6050+0xf4>
		{
			denect_hmc5883l();     // Don't work  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 80058b8:	f000 f808 	bl	80058cc <denect_hmc5883l>
		}
	}
}
 80058bc:	bf00      	nop
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	20000394 	.word	0x20000394
 80058c8:	20000628 	.word	0x20000628

080058cc <denect_hmc5883l>:
//----------------------------------------------------------------------------------------
void denect_hmc5883l(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 80058d2:	2300      	movs	r3, #0
 80058d4:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x1E;       //0x1E                		 ///// 0x3C
 80058d6:	231e      	movs	r3, #30
 80058d8:	80bb      	strh	r3, [r7, #4]
	uint16_t addr = 0x0A;				// HMC5883L_REG_IDENT_A      ///// 0xA0
 80058da:	230a      	movs	r3, #10
 80058dc:	807b      	strh	r3, [r7, #2]
	//uint8_t id = 0xa8;							// in hex form
	uint8_t buff = 0;
 80058de:	2300      	movs	r3, #0
 80058e0:	707b      	strb	r3, [r7, #1]

	//STATUS = HAL_I2C_Mem_Write(&hi2c2, addres_device, 0x37, 1, &data, 1, 1000);

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1 , addr, 1, &buff, 1, 1000);
 80058e2:	88bb      	ldrh	r3, [r7, #4]
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	b299      	uxth	r1, r3
 80058e8:	887a      	ldrh	r2, [r7, #2]
 80058ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058ee:	9302      	str	r3, [sp, #8]
 80058f0:	2301      	movs	r3, #1
 80058f2:	9301      	str	r3, [sp, #4]
 80058f4:	1c7b      	adds	r3, r7, #1
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	2301      	movs	r3, #1
 80058fa:	4809      	ldr	r0, [pc, #36]	; (8005920 <denect_hmc5883l+0x54>)
 80058fc:	f003 fe50 	bl	80095a0 <HAL_I2C_Mem_Read>
 8005900:	4603      	mov	r3, r0
 8005902:	80fb      	strh	r3, [r7, #6]
	if(STATUS == 0)
 8005904:	88fb      	ldrh	r3, [r7, #6]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d103      	bne.n	8005912 <denect_hmc5883l+0x46>
	{
		i2c_device.HMC5883L_ready_status = true;
 800590a:	4b06      	ldr	r3, [pc, #24]	; (8005924 <denect_hmc5883l+0x58>)
 800590c:	2201      	movs	r2, #1
 800590e:	709a      	strb	r2, [r3, #2]
//	HMC5883L_setDataRate(HMC5883L_DATARATE_15HZ);
//	HMC5883L_setSamples(HMC5883L_SAMPLES_1); HMC5883L_setOffset(0, 0);
//
//	Vector mag = HMC5883L_readRaw();

}
 8005910:	e002      	b.n	8005918 <denect_hmc5883l+0x4c>
		i2c_device.HMC5883L_ready_status = false;
 8005912:	4b04      	ldr	r3, [pc, #16]	; (8005924 <denect_hmc5883l+0x58>)
 8005914:	2200      	movs	r2, #0
 8005916:	709a      	strb	r2, [r3, #2]
}
 8005918:	bf00      	nop
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	20000394 	.word	0x20000394
 8005924:	20000628 	.word	0x20000628

08005928 <detect_ms5611>:
//----------------------------------------------------------------------------------------
void detect_ms5611(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 800592e:	2300      	movs	r3, #0
 8005930:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x77;
 8005932:	2377      	movs	r3, #119	; 0x77
 8005934:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x00 ;
 8005936:	2300      	movs	r3, #0
 8005938:	807b      	strh	r3, [r7, #2]
	uint8_t buff = 0;
 800593a:	2300      	movs	r3, #0
 800593c:	707b      	strb	r3, [r7, #1]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 800593e:	88bb      	ldrh	r3, [r7, #4]
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	b299      	uxth	r1, r3
 8005944:	887a      	ldrh	r2, [r7, #2]
 8005946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800594a:	9302      	str	r3, [sp, #8]
 800594c:	2301      	movs	r3, #1
 800594e:	9301      	str	r3, [sp, #4]
 8005950:	1c7b      	adds	r3, r7, #1
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	2301      	movs	r3, #1
 8005956:	4809      	ldr	r0, [pc, #36]	; (800597c <detect_ms5611+0x54>)
 8005958:	f003 fe22 	bl	80095a0 <HAL_I2C_Mem_Read>
 800595c:	4603      	mov	r3, r0
 800595e:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 8005960:	88fb      	ldrh	r3, [r7, #6]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d103      	bne.n	800596e <detect_ms5611+0x46>
	{
		i2c_device.MS5611_ready_status = true;
 8005966:	4b06      	ldr	r3, [pc, #24]	; (8005980 <detect_ms5611+0x58>)
 8005968:	2201      	movs	r2, #1
 800596a:	70da      	strb	r2, [r3, #3]
	}
	else
	{
		i2c_device.MS5611_ready_status = false;
	}
}
 800596c:	e002      	b.n	8005974 <detect_ms5611+0x4c>
		i2c_device.MS5611_ready_status = false;
 800596e:	4b04      	ldr	r3, [pc, #16]	; (8005980 <detect_ms5611+0x58>)
 8005970:	2200      	movs	r2, #0
 8005972:	70da      	strb	r2, [r3, #3]
}
 8005974:	bf00      	nop
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	20000394 	.word	0x20000394
 8005980:	20000628 	.word	0x20000628

08005984 <detect_apds9960>:
//----------------------------------------------------------------------------------------
void detect_apds9960(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 800598a:	2300      	movs	r3, #0
 800598c:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x39;
 800598e:	2339      	movs	r3, #57	; 0x39
 8005990:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x92;
 8005992:	2392      	movs	r3, #146	; 0x92
 8005994:	807b      	strh	r3, [r7, #2]
	uint8_t id = 0xa8;							// in hex form
 8005996:	23a8      	movs	r3, #168	; 0xa8
 8005998:	707b      	strb	r3, [r7, #1]
	uint8_t buff = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	703b      	strb	r3, [r7, #0]

	STATUS = HAL_I2C_Mem_Read(&hi2c2, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 800599e:	88bb      	ldrh	r3, [r7, #4]
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	b299      	uxth	r1, r3
 80059a4:	887a      	ldrh	r2, [r7, #2]
 80059a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059aa:	9302      	str	r3, [sp, #8]
 80059ac:	2301      	movs	r3, #1
 80059ae:	9301      	str	r3, [sp, #4]
 80059b0:	463b      	mov	r3, r7
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	2301      	movs	r3, #1
 80059b6:	480c      	ldr	r0, [pc, #48]	; (80059e8 <detect_apds9960+0x64>)
 80059b8:	f003 fdf2 	bl	80095a0 <HAL_I2C_Mem_Read>
 80059bc:	4603      	mov	r3, r0
 80059be:	80fb      	strh	r3, [r7, #6]

	if((buff == id) && (STATUS == 0))
 80059c0:	783b      	ldrb	r3, [r7, #0]
 80059c2:	787a      	ldrb	r2, [r7, #1]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d106      	bne.n	80059d6 <detect_apds9960+0x52>
 80059c8:	88fb      	ldrh	r3, [r7, #6]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d103      	bne.n	80059d6 <detect_apds9960+0x52>
	{
		i2c_device.APDS9960_ready_status = true;
 80059ce:	4b07      	ldr	r3, [pc, #28]	; (80059ec <detect_apds9960+0x68>)
 80059d0:	2201      	movs	r2, #1
 80059d2:	711a      	strb	r2, [r3, #4]
 80059d4:	e003      	b.n	80059de <detect_apds9960+0x5a>
	}
	else
	{
		i2c_device.APDS9960_ready_status = false;
 80059d6:	4b05      	ldr	r3, [pc, #20]	; (80059ec <detect_apds9960+0x68>)
 80059d8:	2200      	movs	r2, #0
 80059da:	711a      	strb	r2, [r3, #4]
	}
}
 80059dc:	bf00      	nop
 80059de:	bf00      	nop
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	20000394 	.word	0x20000394
 80059ec:	20000628 	.word	0x20000628

080059f0 <detect_oled_screen>:
//----------------------------------------------------------------------------------------
void detect_oled_screen(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af02      	add	r7, sp, #8
	uint16_t STATUS = 0;
 80059f6:	2300      	movs	r3, #0
 80059f8:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[2];
	buffer[0] = 0x00;
 80059fa:	2300      	movs	r3, #0
 80059fc:	713b      	strb	r3, [r7, #4]
	buffer[1] = 0xAE;
 80059fe:	23ae      	movs	r3, #174	; 0xae
 8005a00:	717b      	strb	r3, [r7, #5]

	STATUS = HAL_I2C_Master_Transmit(&hi2c3, 0x78,buffer, 2, 1000);
 8005a02:	1d3a      	adds	r2, r7, #4
 8005a04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	2178      	movs	r1, #120	; 0x78
 8005a0e:	4809      	ldr	r0, [pc, #36]	; (8005a34 <detect_oled_screen+0x44>)
 8005a10:	f003 f9a8 	bl	8008d64 <HAL_I2C_Master_Transmit>
 8005a14:	4603      	mov	r3, r0
 8005a16:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 8005a18:	88fb      	ldrh	r3, [r7, #6]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d103      	bne.n	8005a26 <detect_oled_screen+0x36>
	{
		i2c_device.OLED_ready_status = true;
 8005a1e:	4b06      	ldr	r3, [pc, #24]	; (8005a38 <detect_oled_screen+0x48>)
 8005a20:	2201      	movs	r2, #1
 8005a22:	719a      	strb	r2, [r3, #6]
	}
	else
	{
		i2c_device.OLED_ready_status = false;
	}
}
 8005a24:	e002      	b.n	8005a2c <detect_oled_screen+0x3c>
		i2c_device.OLED_ready_status = false;
 8005a26:	4b04      	ldr	r3, [pc, #16]	; (8005a38 <detect_oled_screen+0x48>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	719a      	strb	r2, [r3, #6]
}
 8005a2c:	bf00      	nop
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	200002e8 	.word	0x200002e8
 8005a38:	20000628 	.word	0x20000628

08005a3c <detect_ds3231>:
//----------------------------------------------------------------------------------------
void detect_ds3231(void)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af04      	add	r7, sp, #16
	uint16_t STATUS = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	80fb      	strh	r3, [r7, #6]
	uint16_t addres_device = 0x68;
 8005a46:	2368      	movs	r3, #104	; 0x68
 8005a48:	80bb      	strh	r3, [r7, #4]
	uint16_t id_addr = 0x00;						// Read seconds
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	807b      	strh	r3, [r7, #2]
	uint8_t buff = 0;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	707b      	strb	r3, [r7, #1]

	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 8005a52:	88bb      	ldrh	r3, [r7, #4]
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	b299      	uxth	r1, r3
 8005a58:	887a      	ldrh	r2, [r7, #2]
 8005a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a5e:	9302      	str	r3, [sp, #8]
 8005a60:	2301      	movs	r3, #1
 8005a62:	9301      	str	r3, [sp, #4]
 8005a64:	1c7b      	adds	r3, r7, #1
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	2301      	movs	r3, #1
 8005a6a:	4809      	ldr	r0, [pc, #36]	; (8005a90 <detect_ds3231+0x54>)
 8005a6c:	f003 fd98 	bl	80095a0 <HAL_I2C_Mem_Read>
 8005a70:	4603      	mov	r3, r0
 8005a72:	80fb      	strh	r3, [r7, #6]

	if(STATUS == 0)
 8005a74:	88fb      	ldrh	r3, [r7, #6]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d103      	bne.n	8005a82 <detect_ds3231+0x46>
	{
		i2c_device.DS3231_ready_status = true;
 8005a7a:	4b06      	ldr	r3, [pc, #24]	; (8005a94 <detect_ds3231+0x58>)
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	71da      	strb	r2, [r3, #7]
	}
	else
	{
		i2c_device.DS3231_ready_status = false;
	}
}
 8005a80:	e002      	b.n	8005a88 <detect_ds3231+0x4c>
		i2c_device.DS3231_ready_status = false;
 8005a82:	4b04      	ldr	r3, [pc, #16]	; (8005a94 <detect_ds3231+0x58>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	71da      	strb	r2, [r3, #7]
}
 8005a88:	bf00      	nop
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	200002e8 	.word	0x200002e8
 8005a94:	20000628 	.word	0x20000628

08005a98 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b088      	sub	sp, #32
 8005a9c:	af04      	add	r7, sp, #16
 8005a9e:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8005aa0:	2364      	movs	r3, #100	; 0x64
 8005aa2:	9302      	str	r3, [sp, #8]
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	9301      	str	r3, [sp, #4]
 8005aa8:	f107 030f 	add.w	r3, r7, #15
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	2301      	movs	r3, #1
 8005ab0:	2275      	movs	r2, #117	; 0x75
 8005ab2:	21d0      	movs	r1, #208	; 0xd0
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f003 fd73 	bl	80095a0 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
 8005abc:	2b68      	cmp	r3, #104	; 0x68
 8005abe:	d13d      	bne.n	8005b3c <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8005ac4:	2364      	movs	r3, #100	; 0x64
 8005ac6:	9302      	str	r3, [sp, #8]
 8005ac8:	2301      	movs	r3, #1
 8005aca:	9301      	str	r3, [sp, #4]
 8005acc:	f107 030e 	add.w	r3, r7, #14
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	226b      	movs	r2, #107	; 0x6b
 8005ad6:	21d0      	movs	r1, #208	; 0xd0
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f003 fc67 	bl	80093ac <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8005ade:	2307      	movs	r3, #7
 8005ae0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8005ae2:	2364      	movs	r3, #100	; 0x64
 8005ae4:	9302      	str	r3, [sp, #8]
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	9301      	str	r3, [sp, #4]
 8005aea:	f107 030e 	add.w	r3, r7, #14
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	2301      	movs	r3, #1
 8005af2:	2219      	movs	r2, #25
 8005af4:	21d0      	movs	r1, #208	; 0xd0
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f003 fc58 	bl	80093ac <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8005afc:	2300      	movs	r3, #0
 8005afe:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8005b00:	2364      	movs	r3, #100	; 0x64
 8005b02:	9302      	str	r3, [sp, #8]
 8005b04:	2301      	movs	r3, #1
 8005b06:	9301      	str	r3, [sp, #4]
 8005b08:	f107 030e 	add.w	r3, r7, #14
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	2301      	movs	r3, #1
 8005b10:	221c      	movs	r2, #28
 8005b12:	21d0      	movs	r1, #208	; 0xd0
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f003 fc49 	bl	80093ac <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8005b1e:	2364      	movs	r3, #100	; 0x64
 8005b20:	9302      	str	r3, [sp, #8]
 8005b22:	2301      	movs	r3, #1
 8005b24:	9301      	str	r3, [sp, #4]
 8005b26:	f107 030e 	add.w	r3, r7, #14
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	221b      	movs	r2, #27
 8005b30:	21d0      	movs	r1, #208	; 0xd0
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f003 fc3a 	bl	80093ac <HAL_I2C_Mem_Write>
        return 0;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	e000      	b.n	8005b3e <MPU6050_Init+0xa6>
    }
    return 1;
 8005b3c:	2301      	movs	r3, #1
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
	...

08005b48 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8005b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b4c:	b094      	sub	sp, #80	; 0x50
 8005b4e:	af04      	add	r7, sp, #16
 8005b50:	6078      	str	r0, [r7, #4]
 8005b52:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8005b54:	2364      	movs	r3, #100	; 0x64
 8005b56:	9302      	str	r3, [sp, #8]
 8005b58:	230e      	movs	r3, #14
 8005b5a:	9301      	str	r3, [sp, #4]
 8005b5c:	f107 0308 	add.w	r3, r7, #8
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	2301      	movs	r3, #1
 8005b64:	223b      	movs	r2, #59	; 0x3b
 8005b66:	21d0      	movs	r1, #208	; 0xd0
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f003 fd19 	bl	80095a0 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8005b6e:	7a3b      	ldrb	r3, [r7, #8]
 8005b70:	021b      	lsls	r3, r3, #8
 8005b72:	b21a      	sxth	r2, r3
 8005b74:	7a7b      	ldrb	r3, [r7, #9]
 8005b76:	b21b      	sxth	r3, r3
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	b21a      	sxth	r2, r3
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8005b80:	7abb      	ldrb	r3, [r7, #10]
 8005b82:	021b      	lsls	r3, r3, #8
 8005b84:	b21a      	sxth	r2, r3
 8005b86:	7afb      	ldrb	r3, [r7, #11]
 8005b88:	b21b      	sxth	r3, r3
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	b21a      	sxth	r2, r3
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8005b92:	7b3b      	ldrb	r3, [r7, #12]
 8005b94:	021b      	lsls	r3, r3, #8
 8005b96:	b21a      	sxth	r2, r3
 8005b98:	7b7b      	ldrb	r3, [r7, #13]
 8005b9a:	b21b      	sxth	r3, r3
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	b21a      	sxth	r2, r3
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8005ba4:	7bbb      	ldrb	r3, [r7, #14]
 8005ba6:	021b      	lsls	r3, r3, #8
 8005ba8:	b21a      	sxth	r2, r3
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
 8005bac:	b21b      	sxth	r3, r3
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8005bb2:	7c3b      	ldrb	r3, [r7, #16]
 8005bb4:	021b      	lsls	r3, r3, #8
 8005bb6:	b21a      	sxth	r2, r3
 8005bb8:	7c7b      	ldrb	r3, [r7, #17]
 8005bba:	b21b      	sxth	r3, r3
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	b21a      	sxth	r2, r3
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8005bc4:	7cbb      	ldrb	r3, [r7, #18]
 8005bc6:	021b      	lsls	r3, r3, #8
 8005bc8:	b21a      	sxth	r2, r3
 8005bca:	7cfb      	ldrb	r3, [r7, #19]
 8005bcc:	b21b      	sxth	r3, r3
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	b21a      	sxth	r2, r3
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8005bd6:	7d3b      	ldrb	r3, [r7, #20]
 8005bd8:	021b      	lsls	r3, r3, #8
 8005bda:	b21a      	sxth	r2, r3
 8005bdc:	7d7b      	ldrb	r3, [r7, #21]
 8005bde:	b21b      	sxth	r3, r3
 8005be0:	4313      	orrs	r3, r2
 8005be2:	b21a      	sxth	r2, r3
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fa fc3c 	bl	800046c <__aeabi_i2d>
 8005bf4:	f04f 0200 	mov.w	r2, #0
 8005bf8:	4bbd      	ldr	r3, [pc, #756]	; (8005ef0 <MPU6050_Read_All+0x3a8>)
 8005bfa:	f7fa fdcb 	bl	8000794 <__aeabi_ddiv>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	460b      	mov	r3, r1
 8005c02:	6839      	ldr	r1, [r7, #0]
 8005c04:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7fa fc2c 	bl	800046c <__aeabi_i2d>
 8005c14:	f04f 0200 	mov.w	r2, #0
 8005c18:	4bb5      	ldr	r3, [pc, #724]	; (8005ef0 <MPU6050_Read_All+0x3a8>)
 8005c1a:	f7fa fdbb 	bl	8000794 <__aeabi_ddiv>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	460b      	mov	r3, r1
 8005c22:	6839      	ldr	r1, [r7, #0]
 8005c24:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fa fc1c 	bl	800046c <__aeabi_i2d>
 8005c34:	a3a8      	add	r3, pc, #672	; (adr r3, 8005ed8 <MPU6050_Read_All+0x390>)
 8005c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3a:	f7fa fdab 	bl	8000794 <__aeabi_ddiv>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	460b      	mov	r3, r1
 8005c42:	6839      	ldr	r1, [r7, #0]
 8005c44:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8005c48:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005c4c:	ee07 3a90 	vmov	s15, r3
 8005c50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c54:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8005ef4 <MPU6050_Read_All+0x3ac>
 8005c58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c5c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8005ef8 <MPU6050_Read_All+0x3b0>
 8005c60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7fa fbfb 	bl	800046c <__aeabi_i2d>
 8005c76:	a39a      	add	r3, pc, #616	; (adr r3, 8005ee0 <MPU6050_Read_All+0x398>)
 8005c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7c:	f7fa fd8a 	bl	8000794 <__aeabi_ddiv>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	6839      	ldr	r1, [r7, #0]
 8005c86:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7fa fbeb 	bl	800046c <__aeabi_i2d>
 8005c96:	a392      	add	r3, pc, #584	; (adr r3, 8005ee0 <MPU6050_Read_All+0x398>)
 8005c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9c:	f7fa fd7a 	bl	8000794 <__aeabi_ddiv>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	6839      	ldr	r1, [r7, #0]
 8005ca6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7fa fbdb 	bl	800046c <__aeabi_i2d>
 8005cb6:	a38a      	add	r3, pc, #552	; (adr r3, 8005ee0 <MPU6050_Read_All+0x398>)
 8005cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbc:	f7fa fd6a 	bl	8000794 <__aeabi_ddiv>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8005cca:	f000 fe61 	bl	8006990 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	4b8a      	ldr	r3, [pc, #552]	; (8005efc <MPU6050_Read_All+0x3b4>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fa fbb8 	bl	800044c <__aeabi_ui2d>
 8005cdc:	f04f 0200 	mov.w	r2, #0
 8005ce0:	4b87      	ldr	r3, [pc, #540]	; (8005f00 <MPU6050_Read_All+0x3b8>)
 8005ce2:	f7fa fd57 	bl	8000794 <__aeabi_ddiv>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8005cee:	f000 fe4f 	bl	8006990 <HAL_GetTick>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	4a81      	ldr	r2, [pc, #516]	; (8005efc <MPU6050_Read_All+0x3b4>)
 8005cf6:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d06:	fb03 f202 	mul.w	r2, r3, r2
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005d10:	4619      	mov	r1, r3
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005d18:	fb03 f301 	mul.w	r3, r3, r1
 8005d1c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fa fba4 	bl	800046c <__aeabi_i2d>
 8005d24:	4602      	mov	r2, r0
 8005d26:	460b      	mov	r3, r1
 8005d28:	ec43 2b10 	vmov	d0, r2, r3
 8005d2c:	f00b f8c4 	bl	8010eb8 <sqrt>
 8005d30:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8005d34:	f04f 0200 	mov.w	r2, #0
 8005d38:	f04f 0300 	mov.w	r3, #0
 8005d3c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005d40:	f7fa fe66 	bl	8000a10 <__aeabi_dcmpeq>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d11f      	bne.n	8005d8a <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fa fb8b 	bl	800046c <__aeabi_i2d>
 8005d56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d5a:	f7fa fd1b 	bl	8000794 <__aeabi_ddiv>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	460b      	mov	r3, r1
 8005d62:	ec43 2b17 	vmov	d7, r2, r3
 8005d66:	eeb0 0a47 	vmov.f32	s0, s14
 8005d6a:	eef0 0a67 	vmov.f32	s1, s15
 8005d6e:	f00a fef7 	bl	8010b60 <atan>
 8005d72:	ec51 0b10 	vmov	r0, r1, d0
 8005d76:	a35c      	add	r3, pc, #368	; (adr r3, 8005ee8 <MPU6050_Read_All+0x3a0>)
 8005d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7c:	f7fa fbe0 	bl	8000540 <__aeabi_dmul>
 8005d80:	4602      	mov	r2, r0
 8005d82:	460b      	mov	r3, r1
 8005d84:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8005d88:	e005      	b.n	8005d96 <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 8005d8a:	f04f 0200 	mov.w	r2, #0
 8005d8e:	f04f 0300 	mov.w	r3, #0
 8005d92:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d9c:	425b      	negs	r3, r3
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fa fb64 	bl	800046c <__aeabi_i2d>
 8005da4:	4682      	mov	sl, r0
 8005da6:	468b      	mov	fp, r1
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7fa fb5c 	bl	800046c <__aeabi_i2d>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	ec43 2b11 	vmov	d1, r2, r3
 8005dbc:	ec4b ab10 	vmov	d0, sl, fp
 8005dc0:	f00b f877 	bl	8010eb2 <atan2>
 8005dc4:	ec51 0b10 	vmov	r0, r1, d0
 8005dc8:	a347      	add	r3, pc, #284	; (adr r3, 8005ee8 <MPU6050_Read_All+0x3a0>)
 8005dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dce:	f7fa fbb7 	bl	8000540 <__aeabi_dmul>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8005dda:	f04f 0200 	mov.w	r2, #0
 8005dde:	4b49      	ldr	r3, [pc, #292]	; (8005f04 <MPU6050_Read_All+0x3bc>)
 8005de0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005de4:	f7fa fe1e 	bl	8000a24 <__aeabi_dcmplt>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <MPU6050_Read_All+0x2bc>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005df4:	f04f 0200 	mov.w	r2, #0
 8005df8:	4b43      	ldr	r3, [pc, #268]	; (8005f08 <MPU6050_Read_All+0x3c0>)
 8005dfa:	f7fa fe31 	bl	8000a60 <__aeabi_dcmpgt>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d114      	bne.n	8005e2e <MPU6050_Read_All+0x2e6>
 8005e04:	f04f 0200 	mov.w	r2, #0
 8005e08:	4b3f      	ldr	r3, [pc, #252]	; (8005f08 <MPU6050_Read_All+0x3c0>)
 8005e0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005e0e:	f7fa fe27 	bl	8000a60 <__aeabi_dcmpgt>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d015      	beq.n	8005e44 <MPU6050_Read_All+0x2fc>
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005e1e:	f04f 0200 	mov.w	r2, #0
 8005e22:	4b38      	ldr	r3, [pc, #224]	; (8005f04 <MPU6050_Read_All+0x3bc>)
 8005e24:	f7fa fdfe 	bl	8000a24 <__aeabi_dcmplt>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00a      	beq.n	8005e44 <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 8005e2e:	4937      	ldr	r1, [pc, #220]	; (8005f0c <MPU6050_Read_All+0x3c4>)
 8005e30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e34:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e3e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8005e42:	e014      	b.n	8005e6e <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8005e4a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8005e4e:	eeb0 1a47 	vmov.f32	s2, s14
 8005e52:	eef0 1a67 	vmov.f32	s3, s15
 8005e56:	ed97 0b06 	vldr	d0, [r7, #24]
 8005e5a:	482c      	ldr	r0, [pc, #176]	; (8005f0c <MPU6050_Read_All+0x3c4>)
 8005e5c:	f000 f85a 	bl	8005f14 <Kalman_getAngle>
 8005e60:	eeb0 7a40 	vmov.f32	s14, s0
 8005e64:	eef0 7a60 	vmov.f32	s15, s1
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8005e74:	4690      	mov	r8, r2
 8005e76:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8005e7a:	f04f 0200 	mov.w	r2, #0
 8005e7e:	4b22      	ldr	r3, [pc, #136]	; (8005f08 <MPU6050_Read_All+0x3c0>)
 8005e80:	4640      	mov	r0, r8
 8005e82:	4649      	mov	r1, r9
 8005e84:	f7fa fdec 	bl	8000a60 <__aeabi_dcmpgt>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d008      	beq.n	8005ea0 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005e94:	4614      	mov	r4, r2
 8005e96:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8005ea6:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8005eaa:	eeb0 1a47 	vmov.f32	s2, s14
 8005eae:	eef0 1a67 	vmov.f32	s3, s15
 8005eb2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8005eb6:	4816      	ldr	r0, [pc, #88]	; (8005f10 <MPU6050_Read_All+0x3c8>)
 8005eb8:	f000 f82c 	bl	8005f14 <Kalman_getAngle>
 8005ebc:	eeb0 7a40 	vmov.f32	s14, s0
 8005ec0:	eef0 7a60 	vmov.f32	s15, s1
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 8005eca:	bf00      	nop
 8005ecc:	3740      	adds	r7, #64	; 0x40
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ed4:	f3af 8000 	nop.w
 8005ed8:	00000000 	.word	0x00000000
 8005edc:	40cc2900 	.word	0x40cc2900
 8005ee0:	00000000 	.word	0x00000000
 8005ee4:	40606000 	.word	0x40606000
 8005ee8:	1a63c1f8 	.word	0x1a63c1f8
 8005eec:	404ca5dc 	.word	0x404ca5dc
 8005ef0:	40d00000 	.word	0x40d00000
 8005ef4:	43aa0000 	.word	0x43aa0000
 8005ef8:	42121eb8 	.word	0x42121eb8
 8005efc:	2000069c 	.word	0x2000069c
 8005f00:	408f4000 	.word	0x408f4000
 8005f04:	c0568000 	.word	0xc0568000
 8005f08:	40568000 	.word	0x40568000
 8005f0c:	20000198 	.word	0x20000198
 8005f10:	20000150 	.word	0x20000150

08005f14 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8005f14:	b5b0      	push	{r4, r5, r7, lr}
 8005f16:	b096      	sub	sp, #88	; 0x58
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	61f8      	str	r0, [r7, #28]
 8005f1c:	ed87 0b04 	vstr	d0, [r7, #16]
 8005f20:	ed87 1b02 	vstr	d1, [r7, #8]
 8005f24:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f32:	f7fa f94d 	bl	80001d0 <__aeabi_dsub>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005f44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f4c:	f7fa faf8 	bl	8000540 <__aeabi_dmul>
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	4620      	mov	r0, r4
 8005f56:	4629      	mov	r1, r5
 8005f58:	f7fa f93c 	bl	80001d4 <__adddf3>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	460b      	mov	r3, r1
 8005f60:	69f9      	ldr	r1, [r7, #28]
 8005f62:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005f72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f76:	f7fa fae3 	bl	8000540 <__aeabi_dmul>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4610      	mov	r0, r2
 8005f80:	4619      	mov	r1, r3
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8005f88:	f7fa f922 	bl	80001d0 <__aeabi_dsub>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4610      	mov	r0, r2
 8005f92:	4619      	mov	r1, r3
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8005f9a:	f7fa f919 	bl	80001d0 <__aeabi_dsub>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	4610      	mov	r0, r2
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fac:	f7fa f912 	bl	80001d4 <__adddf3>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fbc:	f7fa fac0 	bl	8000540 <__aeabi_dmul>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	4629      	mov	r1, r5
 8005fc8:	f7fa f904 	bl	80001d4 <__adddf3>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	69f9      	ldr	r1, [r7, #28]
 8005fd2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005fe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fe6:	f7fa faab 	bl	8000540 <__aeabi_dmul>
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	4620      	mov	r0, r4
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	f7fa f8ed 	bl	80001d0 <__aeabi_dsub>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	69f9      	ldr	r1, [r7, #28]
 8005ffc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800600c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006010:	f7fa fa96 	bl	8000540 <__aeabi_dmul>
 8006014:	4602      	mov	r2, r0
 8006016:	460b      	mov	r3, r1
 8006018:	4620      	mov	r0, r4
 800601a:	4629      	mov	r1, r5
 800601c:	f7fa f8d8 	bl	80001d0 <__aeabi_dsub>
 8006020:	4602      	mov	r2, r0
 8006022:	460b      	mov	r3, r1
 8006024:	69f9      	ldr	r1, [r7, #28]
 8006026:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006036:	e9d7 2300 	ldrd	r2, r3, [r7]
 800603a:	f7fa fa81 	bl	8000540 <__aeabi_dmul>
 800603e:	4602      	mov	r2, r0
 8006040:	460b      	mov	r3, r1
 8006042:	4620      	mov	r0, r4
 8006044:	4629      	mov	r1, r5
 8006046:	f7fa f8c5 	bl	80001d4 <__adddf3>
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	69f9      	ldr	r1, [r7, #28]
 8006050:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006060:	f7fa f8b8 	bl	80001d4 <__adddf3>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8006072:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006076:	f7fa fb8d 	bl	8000794 <__aeabi_ddiv>
 800607a:	4602      	mov	r2, r0
 800607c:	460b      	mov	r3, r1
 800607e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8006088:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800608c:	f7fa fb82 	bl	8000794 <__aeabi_ddiv>
 8006090:	4602      	mov	r2, r0
 8006092:	460b      	mov	r3, r1
 8006094:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800609e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80060a2:	f7fa f895 	bl	80001d0 <__aeabi_dsub>
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80060b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80060b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80060bc:	f7fa fa40 	bl	8000540 <__aeabi_dmul>
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	4620      	mov	r0, r4
 80060c6:	4629      	mov	r1, r5
 80060c8:	f7fa f884 	bl	80001d4 <__adddf3>
 80060cc:	4602      	mov	r2, r0
 80060ce:	460b      	mov	r3, r1
 80060d0:	69f9      	ldr	r1, [r7, #28]
 80060d2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80060dc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80060e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80060e4:	f7fa fa2c 	bl	8000540 <__aeabi_dmul>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4620      	mov	r0, r4
 80060ee:	4629      	mov	r1, r5
 80060f0:	f7fa f870 	bl	80001d4 <__adddf3>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	69f9      	ldr	r1, [r7, #28]
 80060fa:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006104:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800610e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8006118:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800611c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006120:	f7fa fa0e 	bl	8000540 <__aeabi_dmul>
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	4620      	mov	r0, r4
 800612a:	4629      	mov	r1, r5
 800612c:	f7fa f850 	bl	80001d0 <__aeabi_dsub>
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	69f9      	ldr	r1, [r7, #28]
 8006136:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8006140:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006144:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006148:	f7fa f9fa 	bl	8000540 <__aeabi_dmul>
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	4620      	mov	r0, r4
 8006152:	4629      	mov	r1, r5
 8006154:	f7fa f83c 	bl	80001d0 <__aeabi_dsub>
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	69f9      	ldr	r1, [r7, #28]
 800615e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8006168:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800616c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006170:	f7fa f9e6 	bl	8000540 <__aeabi_dmul>
 8006174:	4602      	mov	r2, r0
 8006176:	460b      	mov	r3, r1
 8006178:	4620      	mov	r0, r4
 800617a:	4629      	mov	r1, r5
 800617c:	f7fa f828 	bl	80001d0 <__aeabi_dsub>
 8006180:	4602      	mov	r2, r0
 8006182:	460b      	mov	r3, r1
 8006184:	69f9      	ldr	r1, [r7, #28]
 8006186:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8006190:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006194:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006198:	f7fa f9d2 	bl	8000540 <__aeabi_dmul>
 800619c:	4602      	mov	r2, r0
 800619e:	460b      	mov	r3, r1
 80061a0:	4620      	mov	r0, r4
 80061a2:	4629      	mov	r1, r5
 80061a4:	f7fa f814 	bl	80001d0 <__aeabi_dsub>
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	69f9      	ldr	r1, [r7, #28]
 80061ae:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80061b8:	ec43 2b17 	vmov	d7, r2, r3
};
 80061bc:	eeb0 0a47 	vmov.f32	s0, s14
 80061c0:	eef0 0a67 	vmov.f32	s1, s15
 80061c4:	3758      	adds	r7, #88	; 0x58
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080061cc <ms5611_set_i2c>:

/**
 * select a hal I2C to talk to MS5611
 * @param i2cx The i2c port to talk to MS5611
 */
void ms5611_set_i2c(I2C_HandleTypeDef* i2cx){
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
	ms5611_i2cx = i2cx;
 80061d4:	4a04      	ldr	r2, [pc, #16]	; (80061e8 <ms5611_set_i2c+0x1c>)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6013      	str	r3, [r2, #0]
}
 80061da:	bf00      	nop
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	20000698 	.word	0x20000698

080061ec <ms5611_read_i2c>:
 * @param length length of bytes to request from MS5611
 * @param output output data
 * @return HAL_STATUS, 0(HAL_OK) = success
 */
uint8_t ms5611_read_i2c(uint8_t register_address,uint8_t length,uint8_t* output)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b088      	sub	sp, #32
 80061f0:	af04      	add	r7, sp, #16
 80061f2:	4603      	mov	r3, r0
 80061f4:	603a      	str	r2, [r7, #0]
 80061f6:	71fb      	strb	r3, [r7, #7]
 80061f8:	460b      	mov	r3, r1
 80061fa:	71bb      	strb	r3, [r7, #6]
	//return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
	uint8_t STATUS = 0;
 80061fc:	2300      	movs	r3, #0
 80061fe:	73fb      	strb	r3, [r7, #15]
	STATUS = HAL_I2C_Mem_Read(&hi2c2, MS5611_I2C_ADDR<<1, register_address, 1, output, length, 1000);
 8006200:	79fb      	ldrb	r3, [r7, #7]
 8006202:	b29a      	uxth	r2, r3
 8006204:	79bb      	ldrb	r3, [r7, #6]
 8006206:	b29b      	uxth	r3, r3
 8006208:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800620c:	9102      	str	r1, [sp, #8]
 800620e:	9301      	str	r3, [sp, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	2301      	movs	r3, #1
 8006216:	21ee      	movs	r1, #238	; 0xee
 8006218:	4804      	ldr	r0, [pc, #16]	; (800622c <ms5611_read_i2c+0x40>)
 800621a:	f003 f9c1 	bl	80095a0 <HAL_I2C_Mem_Read>
 800621e:	4603      	mov	r3, r0
 8006220:	73fb      	strb	r3, [r7, #15]
	return STATUS;
 8006222:	7bfb      	ldrb	r3, [r7, #15]
}
 8006224:	4618      	mov	r0, r3
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	20000394 	.word	0x20000394

08006230 <ms5611_write_i2c>:
 * @param length length of bytes to write to MS5611
 * @param output buffer to hold data to be sent
 * @return HAL_STATUS, 0(HAL_OK) = success
 */
uint8_t ms5611_write_i2c(uint8_t register_address,uint8_t length,uint8_t* input)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b088      	sub	sp, #32
 8006234:	af04      	add	r7, sp, #16
 8006236:	4603      	mov	r3, r0
 8006238:	603a      	str	r2, [r7, #0]
 800623a:	71fb      	strb	r3, [r7, #7]
 800623c:	460b      	mov	r3, r1
 800623e:	71bb      	strb	r3, [r7, #6]
	//STATUS = I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
	uint8_t STATUS = 0;
 8006240:	2300      	movs	r3, #0
 8006242:	73fb      	strb	r3, [r7, #15]
	STATUS = HAL_I2C_Mem_Read(&hi2c2, MS5611_I2C_ADDR<<1, register_address, 1, input, length, 1000);
 8006244:	79fb      	ldrb	r3, [r7, #7]
 8006246:	b29a      	uxth	r2, r3
 8006248:	79bb      	ldrb	r3, [r7, #6]
 800624a:	b29b      	uxth	r3, r3
 800624c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006250:	9102      	str	r1, [sp, #8]
 8006252:	9301      	str	r3, [sp, #4]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	2301      	movs	r3, #1
 800625a:	21ee      	movs	r1, #238	; 0xee
 800625c:	4804      	ldr	r0, [pc, #16]	; (8006270 <ms5611_write_i2c+0x40>)
 800625e:	f003 f99f 	bl	80095a0 <HAL_I2C_Mem_Read>
 8006262:	4603      	mov	r3, r0
 8006264:	73fb      	strb	r3, [r7, #15]
	return STATUS;
 8006266:	7bfb      	ldrb	r3, [r7, #15]

}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	20000394 	.word	0x20000394

08006274 <ms5611_init>:
}

/**
 * Initialize MS5611: read and store factory calibration data.
 */
void ms5611_init(){
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
	//read 6 factory calibration data
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 800627a:	2300      	movs	r3, #0
 800627c:	607b      	str	r3, [r7, #4]
 800627e:	e01c      	b.n	80062ba <ms5611_init+0x46>
		uint8_t reg_addr = MS5611_CMD_READ_PROM + (i << 1);//interval 2
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	b2db      	uxtb	r3, r3
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	b2db      	uxtb	r3, r3
 8006288:	3b5e      	subs	r3, #94	; 0x5e
 800628a:	70fb      	strb	r3, [r7, #3]
		uint8_t buffer[2] = {0};
 800628c:	2300      	movs	r3, #0
 800628e:	803b      	strh	r3, [r7, #0]
		ms5611_read_i2c(reg_addr,2,buffer);
 8006290:	463a      	mov	r2, r7
 8006292:	78fb      	ldrb	r3, [r7, #3]
 8006294:	2102      	movs	r1, #2
 8006296:	4618      	mov	r0, r3
 8006298:	f7ff ffa8 	bl	80061ec <ms5611_read_i2c>

		fc[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 800629c:	783b      	ldrb	r3, [r7, #0]
 800629e:	021b      	lsls	r3, r3, #8
 80062a0:	b21a      	sxth	r2, r3
 80062a2:	787b      	ldrb	r3, [r7, #1]
 80062a4:	b21b      	sxth	r3, r3
 80062a6:	4313      	orrs	r3, r2
 80062a8:	b21b      	sxth	r3, r3
 80062aa:	b299      	uxth	r1, r3
 80062ac:	4a07      	ldr	r2, [pc, #28]	; (80062cc <ms5611_init+0x58>)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3301      	adds	r3, #1
 80062b8:	607b      	str	r3, [r7, #4]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b05      	cmp	r3, #5
 80062be:	dddf      	ble.n	8006280 <ms5611_init+0xc>
	}
}
 80062c0:	bf00      	nop
 80062c2:	bf00      	nop
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	200006a4 	.word	0x200006a4

080062d0 <ms5611_update_pressure>:

/**
 * Read raw pressure from MS5611.
 */
void ms5611_update_pressure(){
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80062d6:	4a17      	ldr	r2, [pc, #92]	; (8006334 <ms5611_update_pressure+0x64>)
 80062d8:	463b      	mov	r3, r7
 80062da:	6812      	ldr	r2, [r2, #0]
 80062dc:	4611      	mov	r1, r2
 80062de:	8019      	strh	r1, [r3, #0]
 80062e0:	3302      	adds	r3, #2
 80062e2:	0c12      	lsrs	r2, r2, #16
 80062e4:	701a      	strb	r2, [r3, #0]
	int state;
	state = ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80062e6:	4b14      	ldr	r3, [pc, #80]	; (8006338 <ms5611_update_pressure+0x68>)
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	005b      	lsls	r3, r3, #1
 80062ec:	b25b      	sxtb	r3, r3
 80062ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062f2:	b25b      	sxtb	r3, r3
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	463a      	mov	r2, r7
 80062f8:	2100      	movs	r1, #0
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7ff ff98 	bl	8006230 <ms5611_write_i2c>
 8006300:	4603      	mov	r3, r0
 8006302:	607b      	str	r3, [r7, #4]

	HAL_Delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8006304:	200c      	movs	r0, #12
 8006306:	f000 fb4f 	bl	80069a8 <HAL_Delay>

	state = ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 800630a:	463b      	mov	r3, r7
 800630c:	461a      	mov	r2, r3
 800630e:	2103      	movs	r1, #3
 8006310:	2000      	movs	r0, #0
 8006312:	f7ff ff6b 	bl	80061ec <ms5611_read_i2c>
 8006316:	4603      	mov	r3, r0
 8006318:	607b      	str	r3, [r7, #4]
	raw_pressure = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 800631a:	783b      	ldrb	r3, [r7, #0]
 800631c:	041a      	lsls	r2, r3, #16
 800631e:	787b      	ldrb	r3, [r7, #1]
 8006320:	021b      	lsls	r3, r3, #8
 8006322:	4313      	orrs	r3, r2
 8006324:	78ba      	ldrb	r2, [r7, #2]
 8006326:	4313      	orrs	r3, r2
 8006328:	4a04      	ldr	r2, [pc, #16]	; (800633c <ms5611_update_pressure+0x6c>)
 800632a:	6013      	str	r3, [r2, #0]

}
 800632c:	bf00      	nop
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	0801134c 	.word	0x0801134c
 8006338:	200001e0 	.word	0x200001e0
 800633c:	200006a0 	.word	0x200006a0

08006340 <ms5611_update_temperature>:

/**
 * Read raw temperature from MS5611.
 */
void ms5611_update_temperature(){
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8006346:	4a17      	ldr	r2, [pc, #92]	; (80063a4 <ms5611_update_temperature+0x64>)
 8006348:	463b      	mov	r3, r7
 800634a:	6812      	ldr	r2, [r2, #0]
 800634c:	4611      	mov	r1, r2
 800634e:	8019      	strh	r1, [r3, #0]
 8006350:	3302      	adds	r3, #2
 8006352:	0c12      	lsrs	r2, r2, #16
 8006354:	701a      	strb	r2, [r3, #0]
	int state;
	state = ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8006356:	4b14      	ldr	r3, [pc, #80]	; (80063a8 <ms5611_update_temperature+0x68>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	005b      	lsls	r3, r3, #1
 800635c:	b25b      	sxtb	r3, r3
 800635e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8006362:	b25b      	sxtb	r3, r3
 8006364:	b2db      	uxtb	r3, r3
 8006366:	463a      	mov	r2, r7
 8006368:	2100      	movs	r1, #0
 800636a:	4618      	mov	r0, r3
 800636c:	f7ff ff60 	bl	8006230 <ms5611_write_i2c>
 8006370:	4603      	mov	r3, r0
 8006372:	607b      	str	r3, [r7, #4]

	HAL_Delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8006374:	200c      	movs	r0, #12
 8006376:	f000 fb17 	bl	80069a8 <HAL_Delay>

	state = ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 800637a:	463b      	mov	r3, r7
 800637c:	461a      	mov	r2, r3
 800637e:	2103      	movs	r1, #3
 8006380:	2000      	movs	r0, #0
 8006382:	f7ff ff33 	bl	80061ec <ms5611_read_i2c>
 8006386:	4603      	mov	r3, r0
 8006388:	607b      	str	r3, [r7, #4]
	raw_temperature = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 800638a:	783b      	ldrb	r3, [r7, #0]
 800638c:	041a      	lsls	r2, r3, #16
 800638e:	787b      	ldrb	r3, [r7, #1]
 8006390:	021b      	lsls	r3, r3, #8
 8006392:	4313      	orrs	r3, r2
 8006394:	78ba      	ldrb	r2, [r7, #2]
 8006396:	4313      	orrs	r3, r2
 8006398:	4a04      	ldr	r2, [pc, #16]	; (80063ac <ms5611_update_temperature+0x6c>)
 800639a:	6013      	str	r3, [r2, #0]
}
 800639c:	bf00      	nop
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	0801134c 	.word	0x0801134c
 80063a8:	200001e0 	.word	0x200001e0
 80063ac:	200006b0 	.word	0x200006b0

080063b0 <ms5611_update>:

/**
 *	Read raw temperature and pressure from MS5611
 */
void ms5611_update(){
 80063b0:	b580      	push	{r7, lr}
 80063b2:	af00      	add	r7, sp, #0
	ms5611_update_temperature();
 80063b4:	f7ff ffc4 	bl	8006340 <ms5611_update_temperature>
	ms5611_update_pressure();
 80063b8:	f7ff ff8a 	bl	80062d0 <ms5611_update_pressure>
}
 80063bc:	bf00      	nop
 80063be:	bd80      	pop	{r7, pc}

080063c0 <ms5611_get_temperature>:

/**
 * Get calibrated temperature, unit: Celsius degrees
 * @return calibrated temperature
 */
double ms5611_get_temperature(){
 80063c0:	b5b0      	push	{r4, r5, r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 80063c6:	4b36      	ldr	r3, [pc, #216]	; (80064a0 <ms5611_get_temperature+0xe0>)
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	4b36      	ldr	r3, [pc, #216]	; (80064a4 <ms5611_get_temperature+0xe4>)
 80063cc:	891b      	ldrh	r3, [r3, #8]
 80063ce:	021b      	lsls	r3, r3, #8
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	60fb      	str	r3, [r7, #12]
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f7fa f839 	bl	800044c <__aeabi_ui2d>
 80063da:	4604      	mov	r4, r0
 80063dc:	460d      	mov	r5, r1
 80063de:	4b31      	ldr	r3, [pc, #196]	; (80064a4 <ms5611_get_temperature+0xe4>)
 80063e0:	895b      	ldrh	r3, [r3, #10]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fa f842 	bl	800046c <__aeabi_i2d>
 80063e8:	f04f 0200 	mov.w	r2, #0
 80063ec:	4b2e      	ldr	r3, [pc, #184]	; (80064a8 <ms5611_get_temperature+0xe8>)
 80063ee:	f7fa f9d1 	bl	8000794 <__aeabi_ddiv>
 80063f2:	4602      	mov	r2, r0
 80063f4:	460b      	mov	r3, r1
 80063f6:	4620      	mov	r0, r4
 80063f8:	4629      	mov	r1, r5
 80063fa:	f7fa f8a1 	bl	8000540 <__aeabi_dmul>
 80063fe:	4602      	mov	r2, r0
 8006400:	460b      	mov	r3, r1
 8006402:	4610      	mov	r0, r2
 8006404:	4619      	mov	r1, r3
 8006406:	f04f 0200 	mov.w	r2, #0
 800640a:	4b28      	ldr	r3, [pc, #160]	; (80064ac <ms5611_get_temperature+0xec>)
 800640c:	f7f9 fee2 	bl	80001d4 <__adddf3>
 8006410:	4602      	mov	r2, r0
 8006412:	460b      	mov	r3, r1
 8006414:	e9c7 2300 	strd	r2, r3, [r7]

	double T2=0;
 8006418:	f04f 0200 	mov.w	r2, #0
 800641c:	f04f 0300 	mov.w	r3, #0
 8006420:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (TEMP < 2000){
 8006424:	f04f 0200 	mov.w	r2, #0
 8006428:	4b20      	ldr	r3, [pc, #128]	; (80064ac <ms5611_get_temperature+0xec>)
 800642a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800642e:	f7fa faf9 	bl	8000a24 <__aeabi_dcmplt>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d016      	beq.n	8006466 <ms5611_get_temperature+0xa6>
		//temperature < 20 Celsius
		T2 = dT * (dT / (2147483648.0));
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f7fa f807 	bl	800044c <__aeabi_ui2d>
 800643e:	4604      	mov	r4, r0
 8006440:	460d      	mov	r5, r1
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f7fa f802 	bl	800044c <__aeabi_ui2d>
 8006448:	f04f 0200 	mov.w	r2, #0
 800644c:	4b18      	ldr	r3, [pc, #96]	; (80064b0 <ms5611_get_temperature+0xf0>)
 800644e:	f7fa f9a1 	bl	8000794 <__aeabi_ddiv>
 8006452:	4602      	mov	r2, r0
 8006454:	460b      	mov	r3, r1
 8006456:	4620      	mov	r0, r4
 8006458:	4629      	mov	r1, r5
 800645a:	f7fa f871 	bl	8000540 <__aeabi_dmul>
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
 8006462:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}

	TEMP = TEMP - T2;
 8006466:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800646a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800646e:	f7f9 feaf 	bl	80001d0 <__aeabi_dsub>
 8006472:	4602      	mov	r2, r0
 8006474:	460b      	mov	r3, r1
 8006476:	e9c7 2300 	strd	r2, r3, [r7]
	return TEMP / 100;
 800647a:	f04f 0200 	mov.w	r2, #0
 800647e:	4b0d      	ldr	r3, [pc, #52]	; (80064b4 <ms5611_get_temperature+0xf4>)
 8006480:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006484:	f7fa f986 	bl	8000794 <__aeabi_ddiv>
 8006488:	4602      	mov	r2, r0
 800648a:	460b      	mov	r3, r1
 800648c:	ec43 2b17 	vmov	d7, r2, r3
}
 8006490:	eeb0 0a47 	vmov.f32	s0, s14
 8006494:	eef0 0a67 	vmov.f32	s1, s15
 8006498:	3718      	adds	r7, #24
 800649a:	46bd      	mov	sp, r7
 800649c:	bdb0      	pop	{r4, r5, r7, pc}
 800649e:	bf00      	nop
 80064a0:	200006b0 	.word	0x200006b0
 80064a4:	200006a4 	.word	0x200006a4
 80064a8:	41600000 	.word	0x41600000
 80064ac:	409f4000 	.word	0x409f4000
 80064b0:	41e00000 	.word	0x41e00000
 80064b4:	40590000 	.word	0x40590000

080064b8 <ms5611_get_pressure>:

/**
 * Get calibrated pressure, unit: mBar
 * @return calibrated pressure
 */
double ms5611_get_pressure(){
 80064b8:	b5b0      	push	{r4, r5, r7, lr}
 80064ba:	b090      	sub	sp, #64	; 0x40
 80064bc:	af00      	add	r7, sp, #0

	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 80064be:	4bc4      	ldr	r3, [pc, #784]	; (80067d0 <ms5611_get_pressure+0x318>)
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	4bc4      	ldr	r3, [pc, #784]	; (80067d4 <ms5611_get_pressure+0x31c>)
 80064c4:	891b      	ldrh	r3, [r3, #8]
 80064c6:	021b      	lsls	r3, r3, #8
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 80064cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064ce:	f7f9 ffbd 	bl	800044c <__aeabi_ui2d>
 80064d2:	4604      	mov	r4, r0
 80064d4:	460d      	mov	r5, r1
 80064d6:	4bbf      	ldr	r3, [pc, #764]	; (80067d4 <ms5611_get_pressure+0x31c>)
 80064d8:	895b      	ldrh	r3, [r3, #10]
 80064da:	4618      	mov	r0, r3
 80064dc:	f7f9 ffc6 	bl	800046c <__aeabi_i2d>
 80064e0:	f04f 0200 	mov.w	r2, #0
 80064e4:	4bbc      	ldr	r3, [pc, #752]	; (80067d8 <ms5611_get_pressure+0x320>)
 80064e6:	f7fa f955 	bl	8000794 <__aeabi_ddiv>
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	4620      	mov	r0, r4
 80064f0:	4629      	mov	r1, r5
 80064f2:	f7fa f825 	bl	8000540 <__aeabi_dmul>
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4610      	mov	r0, r2
 80064fc:	4619      	mov	r1, r3
 80064fe:	f04f 0200 	mov.w	r2, #0
 8006502:	4bb6      	ldr	r3, [pc, #728]	; (80067dc <ms5611_get_pressure+0x324>)
 8006504:	f7f9 fe66 	bl	80001d4 <__adddf3>
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double OFF = fc[1] * (65536) + fc[3] * dT / (128);
 8006510:	4bb0      	ldr	r3, [pc, #704]	; (80067d4 <ms5611_get_pressure+0x31c>)
 8006512:	885b      	ldrh	r3, [r3, #2]
 8006514:	041b      	lsls	r3, r3, #16
 8006516:	461a      	mov	r2, r3
 8006518:	4bae      	ldr	r3, [pc, #696]	; (80067d4 <ms5611_get_pressure+0x31c>)
 800651a:	88db      	ldrh	r3, [r3, #6]
 800651c:	4619      	mov	r1, r3
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	fb03 f301 	mul.w	r3, r3, r1
 8006524:	09db      	lsrs	r3, r3, #7
 8006526:	4413      	add	r3, r2
 8006528:	4618      	mov	r0, r3
 800652a:	f7f9 ff8f 	bl	800044c <__aeabi_ui2d>
 800652e:	4602      	mov	r2, r0
 8006530:	460b      	mov	r3, r1
 8006532:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double SENS = fc[0] * (32768) + fc[2] * dT / (256);
 8006536:	4ba7      	ldr	r3, [pc, #668]	; (80067d4 <ms5611_get_pressure+0x31c>)
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	03db      	lsls	r3, r3, #15
 800653c:	461a      	mov	r2, r3
 800653e:	4ba5      	ldr	r3, [pc, #660]	; (80067d4 <ms5611_get_pressure+0x31c>)
 8006540:	889b      	ldrh	r3, [r3, #4]
 8006542:	4619      	mov	r1, r3
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	fb03 f301 	mul.w	r3, r3, r1
 800654a:	0a1b      	lsrs	r3, r3, #8
 800654c:	4413      	add	r3, r2
 800654e:	4618      	mov	r0, r3
 8006550:	f7f9 ff7c 	bl	800044c <__aeabi_ui2d>
 8006554:	4602      	mov	r2, r0
 8006556:	460b      	mov	r3, r1
 8006558:	e9c7 2302 	strd	r2, r3, [r7, #8]

	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768);//unit 0.01mbar
 800655c:	4ba0      	ldr	r3, [pc, #640]	; (80067e0 <ms5611_get_pressure+0x328>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4618      	mov	r0, r3
 8006562:	f7f9 ff73 	bl	800044c <__aeabi_ui2d>
 8006566:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800656a:	f7f9 ffe9 	bl	8000540 <__aeabi_dmul>
 800656e:	4602      	mov	r2, r0
 8006570:	460b      	mov	r3, r1
 8006572:	4610      	mov	r0, r2
 8006574:	4619      	mov	r1, r3
 8006576:	f04f 0200 	mov.w	r2, #0
 800657a:	4b9a      	ldr	r3, [pc, #616]	; (80067e4 <ms5611_get_pressure+0x32c>)
 800657c:	f7fa f90a 	bl	8000794 <__aeabi_ddiv>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	4610      	mov	r0, r2
 8006586:	4619      	mov	r1, r3
 8006588:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800658c:	f7f9 fe20 	bl	80001d0 <__aeabi_dsub>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	4610      	mov	r0, r2
 8006596:	4619      	mov	r1, r3
 8006598:	f04f 0200 	mov.w	r2, #0
 800659c:	4b92      	ldr	r3, [pc, #584]	; (80067e8 <ms5611_get_pressure+0x330>)
 800659e:	f7fa f8f9 	bl	8000794 <__aeabi_ddiv>
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
 80065a6:	e9c7 2300 	strd	r2, r3, [r7]

	double T2=0, OFF2=0, SENS2=0;
 80065aa:	f04f 0200 	mov.w	r2, #0
 80065ae:	f04f 0300 	mov.w	r3, #0
 80065b2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80065b6:	f04f 0200 	mov.w	r2, #0
 80065ba:	f04f 0300 	mov.w	r3, #0
 80065be:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80065c2:	f04f 0200 	mov.w	r2, #0
 80065c6:	f04f 0300 	mov.w	r3, #0
 80065ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	if (TEMP < 2000){
 80065ce:	f04f 0200 	mov.w	r2, #0
 80065d2:	4b82      	ldr	r3, [pc, #520]	; (80067dc <ms5611_get_pressure+0x324>)
 80065d4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80065d8:	f7fa fa24 	bl	8000a24 <__aeabi_dcmplt>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f000 80cc 	beq.w	800677c <ms5611_get_pressure+0x2c4>
		//temperature < 20 Celsius
		T2 = dT * dT / (2147483648);
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	fb03 f303 	mul.w	r3, r3, r3
 80065ea:	0fdb      	lsrs	r3, r3, #31
 80065ec:	461a      	mov	r2, r3
 80065ee:	f04f 0300 	mov.w	r3, #0
 80065f2:	4610      	mov	r0, r2
 80065f4:	4619      	mov	r1, r3
 80065f6:	f7f9 ff75 	bl	80004e4 <__aeabi_l2d>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		OFF2 = 5 * (TEMP-2000) * (TEMP-2000) / 2;
 8006602:	f04f 0200 	mov.w	r2, #0
 8006606:	4b75      	ldr	r3, [pc, #468]	; (80067dc <ms5611_get_pressure+0x324>)
 8006608:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800660c:	f7f9 fde0 	bl	80001d0 <__aeabi_dsub>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	4610      	mov	r0, r2
 8006616:	4619      	mov	r1, r3
 8006618:	f04f 0200 	mov.w	r2, #0
 800661c:	4b73      	ldr	r3, [pc, #460]	; (80067ec <ms5611_get_pressure+0x334>)
 800661e:	f7f9 ff8f 	bl	8000540 <__aeabi_dmul>
 8006622:	4602      	mov	r2, r0
 8006624:	460b      	mov	r3, r1
 8006626:	4614      	mov	r4, r2
 8006628:	461d      	mov	r5, r3
 800662a:	f04f 0200 	mov.w	r2, #0
 800662e:	4b6b      	ldr	r3, [pc, #428]	; (80067dc <ms5611_get_pressure+0x324>)
 8006630:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006634:	f7f9 fdcc 	bl	80001d0 <__aeabi_dsub>
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	4620      	mov	r0, r4
 800663e:	4629      	mov	r1, r5
 8006640:	f7f9 ff7e 	bl	8000540 <__aeabi_dmul>
 8006644:	4602      	mov	r2, r0
 8006646:	460b      	mov	r3, r1
 8006648:	4610      	mov	r0, r2
 800664a:	4619      	mov	r1, r3
 800664c:	f04f 0200 	mov.w	r2, #0
 8006650:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006654:	f7fa f89e 	bl	8000794 <__aeabi_ddiv>
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 8006660:	f04f 0200 	mov.w	r2, #0
 8006664:	4b5d      	ldr	r3, [pc, #372]	; (80067dc <ms5611_get_pressure+0x324>)
 8006666:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800666a:	f7f9 fdb1 	bl	80001d0 <__aeabi_dsub>
 800666e:	4602      	mov	r2, r0
 8006670:	460b      	mov	r3, r1
 8006672:	4610      	mov	r0, r2
 8006674:	4619      	mov	r1, r3
 8006676:	f04f 0200 	mov.w	r2, #0
 800667a:	4b5c      	ldr	r3, [pc, #368]	; (80067ec <ms5611_get_pressure+0x334>)
 800667c:	f7f9 ff60 	bl	8000540 <__aeabi_dmul>
 8006680:	4602      	mov	r2, r0
 8006682:	460b      	mov	r3, r1
 8006684:	4614      	mov	r4, r2
 8006686:	461d      	mov	r5, r3
 8006688:	f04f 0200 	mov.w	r2, #0
 800668c:	4b53      	ldr	r3, [pc, #332]	; (80067dc <ms5611_get_pressure+0x324>)
 800668e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006692:	f7f9 fd9d 	bl	80001d0 <__aeabi_dsub>
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	4620      	mov	r0, r4
 800669c:	4629      	mov	r1, r5
 800669e:	f7f9 ff4f 	bl	8000540 <__aeabi_dmul>
 80066a2:	4602      	mov	r2, r0
 80066a4:	460b      	mov	r3, r1
 80066a6:	4610      	mov	r0, r2
 80066a8:	4619      	mov	r1, r3
 80066aa:	f04f 0200 	mov.w	r2, #0
 80066ae:	4b50      	ldr	r3, [pc, #320]	; (80067f0 <ms5611_get_pressure+0x338>)
 80066b0:	f7fa f870 	bl	8000794 <__aeabi_ddiv>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (TEMP < -1500){
 80066bc:	a340      	add	r3, pc, #256	; (adr r3, 80067c0 <ms5611_get_pressure+0x308>)
 80066be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80066c6:	f7fa f9ad 	bl	8000a24 <__aeabi_dcmplt>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d055      	beq.n	800677c <ms5611_get_pressure+0x2c4>
			//temperature < -15 Celsius
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 80066d0:	a33d      	add	r3, pc, #244	; (adr r3, 80067c8 <ms5611_get_pressure+0x310>)
 80066d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80066da:	f7f9 fd7b 	bl	80001d4 <__adddf3>
 80066de:	4602      	mov	r2, r0
 80066e0:	460b      	mov	r3, r1
 80066e2:	4610      	mov	r0, r2
 80066e4:	4619      	mov	r1, r3
 80066e6:	f04f 0200 	mov.w	r2, #0
 80066ea:	4b42      	ldr	r3, [pc, #264]	; (80067f4 <ms5611_get_pressure+0x33c>)
 80066ec:	f7f9 ff28 	bl	8000540 <__aeabi_dmul>
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	4614      	mov	r4, r2
 80066f6:	461d      	mov	r5, r3
 80066f8:	a333      	add	r3, pc, #204	; (adr r3, 80067c8 <ms5611_get_pressure+0x310>)
 80066fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006702:	f7f9 fd67 	bl	80001d4 <__adddf3>
 8006706:	4602      	mov	r2, r0
 8006708:	460b      	mov	r3, r1
 800670a:	4620      	mov	r0, r4
 800670c:	4629      	mov	r1, r5
 800670e:	f7f9 ff17 	bl	8000540 <__aeabi_dmul>
 8006712:	4602      	mov	r2, r0
 8006714:	460b      	mov	r3, r1
 8006716:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800671a:	f7f9 fd5b 	bl	80001d4 <__adddf3>
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			SENS2 = SENS2 + 11/2 * (TEMP + 1500) * (TEMP + 1500);
 8006726:	a328      	add	r3, pc, #160	; (adr r3, 80067c8 <ms5611_get_pressure+0x310>)
 8006728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006730:	f7f9 fd50 	bl	80001d4 <__adddf3>
 8006734:	4602      	mov	r2, r0
 8006736:	460b      	mov	r3, r1
 8006738:	4610      	mov	r0, r2
 800673a:	4619      	mov	r1, r3
 800673c:	f04f 0200 	mov.w	r2, #0
 8006740:	4b2a      	ldr	r3, [pc, #168]	; (80067ec <ms5611_get_pressure+0x334>)
 8006742:	f7f9 fefd 	bl	8000540 <__aeabi_dmul>
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	4614      	mov	r4, r2
 800674c:	461d      	mov	r5, r3
 800674e:	a31e      	add	r3, pc, #120	; (adr r3, 80067c8 <ms5611_get_pressure+0x310>)
 8006750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006754:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006758:	f7f9 fd3c 	bl	80001d4 <__adddf3>
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	4620      	mov	r0, r4
 8006762:	4629      	mov	r1, r5
 8006764:	f7f9 feec 	bl	8000540 <__aeabi_dmul>
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006770:	f7f9 fd30 	bl	80001d4 <__adddf3>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
	}

	TEMP = TEMP - T2;
 800677c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006780:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006784:	f7f9 fd24 	bl	80001d0 <__aeabi_dsub>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	OFF = OFF - OFF2;
 8006790:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006794:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006798:	f7f9 fd1a 	bl	80001d0 <__aeabi_dsub>
 800679c:	4602      	mov	r2, r0
 800679e:	460b      	mov	r3, r1
 80067a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	SENS = SENS - SENS2;
 80067a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80067ac:	f7f9 fd10 	bl	80001d0 <__aeabi_dsub>
 80067b0:	4602      	mov	r2, r0
 80067b2:	460b      	mov	r3, r1
 80067b4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768);//unit mbar
 80067b8:	4b09      	ldr	r3, [pc, #36]	; (80067e0 <ms5611_get_pressure+0x328>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4618      	mov	r0, r3
 80067be:	e01b      	b.n	80067f8 <ms5611_get_pressure+0x340>
 80067c0:	00000000 	.word	0x00000000
 80067c4:	c0977000 	.word	0xc0977000
 80067c8:	00000000 	.word	0x00000000
 80067cc:	40977000 	.word	0x40977000
 80067d0:	200006b0 	.word	0x200006b0
 80067d4:	200006a4 	.word	0x200006a4
 80067d8:	41600000 	.word	0x41600000
 80067dc:	409f4000 	.word	0x409f4000
 80067e0:	200006a0 	.word	0x200006a0
 80067e4:	41400000 	.word	0x41400000
 80067e8:	40e00000 	.word	0x40e00000
 80067ec:	40140000 	.word	0x40140000
 80067f0:	40100000 	.word	0x40100000
 80067f4:	401c0000 	.word	0x401c0000
 80067f8:	f7f9 fe28 	bl	800044c <__aeabi_ui2d>
 80067fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006800:	f7f9 fe9e 	bl	8000540 <__aeabi_dmul>
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	4610      	mov	r0, r2
 800680a:	4619      	mov	r1, r3
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	4b14      	ldr	r3, [pc, #80]	; (8006864 <ms5611_get_pressure+0x3ac>)
 8006812:	f7f9 ffbf 	bl	8000794 <__aeabi_ddiv>
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	4610      	mov	r0, r2
 800681c:	4619      	mov	r1, r3
 800681e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006822:	f7f9 fcd5 	bl	80001d0 <__aeabi_dsub>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	4610      	mov	r0, r2
 800682c:	4619      	mov	r1, r3
 800682e:	f04f 0200 	mov.w	r2, #0
 8006832:	4b0d      	ldr	r3, [pc, #52]	; (8006868 <ms5611_get_pressure+0x3b0>)
 8006834:	f7f9 ffae 	bl	8000794 <__aeabi_ddiv>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	e9c7 2300 	strd	r2, r3, [r7]
	return P / 100;//unit mbar
 8006840:	f04f 0200 	mov.w	r2, #0
 8006844:	4b09      	ldr	r3, [pc, #36]	; (800686c <ms5611_get_pressure+0x3b4>)
 8006846:	e9d7 0100 	ldrd	r0, r1, [r7]
 800684a:	f7f9 ffa3 	bl	8000794 <__aeabi_ddiv>
 800684e:	4602      	mov	r2, r0
 8006850:	460b      	mov	r3, r1
 8006852:	ec43 2b17 	vmov	d7, r2, r3
}
 8006856:	eeb0 0a47 	vmov.f32	s0, s14
 800685a:	eef0 0a67 	vmov.f32	s1, s15
 800685e:	3740      	adds	r7, #64	; 0x40
 8006860:	46bd      	mov	sp, r7
 8006862:	bdb0      	pop	{r4, r5, r7, pc}
 8006864:	41400000 	.word	0x41400000
 8006868:	40e00000 	.word	0x40e00000
 800686c:	40590000 	.word	0x40590000

08006870 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006870:	f8df d034 	ldr.w	sp, [pc, #52]	; 80068a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006874:	480d      	ldr	r0, [pc, #52]	; (80068ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006876:	490e      	ldr	r1, [pc, #56]	; (80068b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006878:	4a0e      	ldr	r2, [pc, #56]	; (80068b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800687a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800687c:	e002      	b.n	8006884 <LoopCopyDataInit>

0800687e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800687e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006882:	3304      	adds	r3, #4

08006884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006888:	d3f9      	bcc.n	800687e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800688a:	4a0b      	ldr	r2, [pc, #44]	; (80068b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800688c:	4c0b      	ldr	r4, [pc, #44]	; (80068bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800688e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006890:	e001      	b.n	8006896 <LoopFillZerobss>

08006892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006894:	3204      	adds	r2, #4

08006896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006898:	d3fb      	bcc.n	8006892 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800689a:	f7fb ff21 	bl	80026e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800689e:	f00a f839 	bl	8010914 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80068a2:	f7fa ff01 	bl	80016a8 <main>
  bx  lr    
 80068a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80068a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80068ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80068b0:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 80068b4:	08011820 	.word	0x08011820
  ldr r2, =_sbss
 80068b8:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 80068bc:	20000da4 	.word	0x20000da4

080068c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80068c0:	e7fe      	b.n	80068c0 <ADC_IRQHandler>
	...

080068c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80068c8:	4b0e      	ldr	r3, [pc, #56]	; (8006904 <HAL_Init+0x40>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a0d      	ldr	r2, [pc, #52]	; (8006904 <HAL_Init+0x40>)
 80068ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80068d4:	4b0b      	ldr	r3, [pc, #44]	; (8006904 <HAL_Init+0x40>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a0a      	ldr	r2, [pc, #40]	; (8006904 <HAL_Init+0x40>)
 80068da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80068de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80068e0:	4b08      	ldr	r3, [pc, #32]	; (8006904 <HAL_Init+0x40>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a07      	ldr	r2, [pc, #28]	; (8006904 <HAL_Init+0x40>)
 80068e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80068ec:	2003      	movs	r0, #3
 80068ee:	f000 f94f 	bl	8006b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80068f2:	2000      	movs	r0, #0
 80068f4:	f000 f808 	bl	8006908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80068f8:	f7fb fb86 	bl	8002008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	40023c00 	.word	0x40023c00

08006908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006910:	4b12      	ldr	r3, [pc, #72]	; (800695c <HAL_InitTick+0x54>)
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	4b12      	ldr	r3, [pc, #72]	; (8006960 <HAL_InitTick+0x58>)
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	4619      	mov	r1, r3
 800691a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800691e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006922:	fbb2 f3f3 	udiv	r3, r2, r3
 8006926:	4618      	mov	r0, r3
 8006928:	f000 f967 	bl	8006bfa <HAL_SYSTICK_Config>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e00e      	b.n	8006954 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2b0f      	cmp	r3, #15
 800693a:	d80a      	bhi.n	8006952 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800693c:	2200      	movs	r2, #0
 800693e:	6879      	ldr	r1, [r7, #4]
 8006940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006944:	f000 f92f 	bl	8006ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006948:	4a06      	ldr	r2, [pc, #24]	; (8006964 <HAL_InitTick+0x5c>)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800694e:	2300      	movs	r3, #0
 8006950:	e000      	b.n	8006954 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
}
 8006954:	4618      	mov	r0, r3
 8006956:	3708      	adds	r7, #8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	20000008 	.word	0x20000008
 8006960:	200001e8 	.word	0x200001e8
 8006964:	200001e4 	.word	0x200001e4

08006968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006968:	b480      	push	{r7}
 800696a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800696c:	4b06      	ldr	r3, [pc, #24]	; (8006988 <HAL_IncTick+0x20>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	461a      	mov	r2, r3
 8006972:	4b06      	ldr	r3, [pc, #24]	; (800698c <HAL_IncTick+0x24>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4413      	add	r3, r2
 8006978:	4a04      	ldr	r2, [pc, #16]	; (800698c <HAL_IncTick+0x24>)
 800697a:	6013      	str	r3, [r2, #0]
}
 800697c:	bf00      	nop
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	200001e8 	.word	0x200001e8
 800698c:	200006b4 	.word	0x200006b4

08006990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006990:	b480      	push	{r7}
 8006992:	af00      	add	r7, sp, #0
  return uwTick;
 8006994:	4b03      	ldr	r3, [pc, #12]	; (80069a4 <HAL_GetTick+0x14>)
 8006996:	681b      	ldr	r3, [r3, #0]
}
 8006998:	4618      	mov	r0, r3
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	200006b4 	.word	0x200006b4

080069a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80069b0:	f7ff ffee 	bl	8006990 <HAL_GetTick>
 80069b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069c0:	d005      	beq.n	80069ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80069c2:	4b0a      	ldr	r3, [pc, #40]	; (80069ec <HAL_Delay+0x44>)
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	461a      	mov	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4413      	add	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80069ce:	bf00      	nop
 80069d0:	f7ff ffde 	bl	8006990 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d8f7      	bhi.n	80069d0 <HAL_Delay+0x28>
  {
  }
}
 80069e0:	bf00      	nop
 80069e2:	bf00      	nop
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	200001e8 	.word	0x200001e8

080069f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f003 0307 	and.w	r3, r3, #7
 80069fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a00:	4b0c      	ldr	r3, [pc, #48]	; (8006a34 <__NVIC_SetPriorityGrouping+0x44>)
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a22:	4a04      	ldr	r2, [pc, #16]	; (8006a34 <__NVIC_SetPriorityGrouping+0x44>)
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	60d3      	str	r3, [r2, #12]
}
 8006a28:	bf00      	nop
 8006a2a:	3714      	adds	r7, #20
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	e000ed00 	.word	0xe000ed00

08006a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a3c:	4b04      	ldr	r3, [pc, #16]	; (8006a50 <__NVIC_GetPriorityGrouping+0x18>)
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	0a1b      	lsrs	r3, r3, #8
 8006a42:	f003 0307 	and.w	r3, r3, #7
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	e000ed00 	.word	0xe000ed00

08006a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	db0b      	blt.n	8006a7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a66:	79fb      	ldrb	r3, [r7, #7]
 8006a68:	f003 021f 	and.w	r2, r3, #31
 8006a6c:	4907      	ldr	r1, [pc, #28]	; (8006a8c <__NVIC_EnableIRQ+0x38>)
 8006a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a72:	095b      	lsrs	r3, r3, #5
 8006a74:	2001      	movs	r0, #1
 8006a76:	fa00 f202 	lsl.w	r2, r0, r2
 8006a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006a7e:	bf00      	nop
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	e000e100 	.word	0xe000e100

08006a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	4603      	mov	r3, r0
 8006a98:	6039      	str	r1, [r7, #0]
 8006a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	db0a      	blt.n	8006aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	490c      	ldr	r1, [pc, #48]	; (8006adc <__NVIC_SetPriority+0x4c>)
 8006aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aae:	0112      	lsls	r2, r2, #4
 8006ab0:	b2d2      	uxtb	r2, r2
 8006ab2:	440b      	add	r3, r1
 8006ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ab8:	e00a      	b.n	8006ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	4908      	ldr	r1, [pc, #32]	; (8006ae0 <__NVIC_SetPriority+0x50>)
 8006ac0:	79fb      	ldrb	r3, [r7, #7]
 8006ac2:	f003 030f 	and.w	r3, r3, #15
 8006ac6:	3b04      	subs	r3, #4
 8006ac8:	0112      	lsls	r2, r2, #4
 8006aca:	b2d2      	uxtb	r2, r2
 8006acc:	440b      	add	r3, r1
 8006ace:	761a      	strb	r2, [r3, #24]
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr
 8006adc:	e000e100 	.word	0xe000e100
 8006ae0:	e000ed00 	.word	0xe000ed00

08006ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b089      	sub	sp, #36	; 0x24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f003 0307 	and.w	r3, r3, #7
 8006af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	f1c3 0307 	rsb	r3, r3, #7
 8006afe:	2b04      	cmp	r3, #4
 8006b00:	bf28      	it	cs
 8006b02:	2304      	movcs	r3, #4
 8006b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	3304      	adds	r3, #4
 8006b0a:	2b06      	cmp	r3, #6
 8006b0c:	d902      	bls.n	8006b14 <NVIC_EncodePriority+0x30>
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	3b03      	subs	r3, #3
 8006b12:	e000      	b.n	8006b16 <NVIC_EncodePriority+0x32>
 8006b14:	2300      	movs	r3, #0
 8006b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b22:	43da      	mvns	r2, r3
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	401a      	ands	r2, r3
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	fa01 f303 	lsl.w	r3, r1, r3
 8006b36:	43d9      	mvns	r1, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b3c:	4313      	orrs	r3, r2
         );
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3724      	adds	r7, #36	; 0x24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
	...

08006b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	3b01      	subs	r3, #1
 8006b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b5c:	d301      	bcc.n	8006b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e00f      	b.n	8006b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b62:	4a0a      	ldr	r2, [pc, #40]	; (8006b8c <SysTick_Config+0x40>)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	3b01      	subs	r3, #1
 8006b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b6a:	210f      	movs	r1, #15
 8006b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b70:	f7ff ff8e 	bl	8006a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b74:	4b05      	ldr	r3, [pc, #20]	; (8006b8c <SysTick_Config+0x40>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b7a:	4b04      	ldr	r3, [pc, #16]	; (8006b8c <SysTick_Config+0x40>)
 8006b7c:	2207      	movs	r2, #7
 8006b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	e000e010 	.word	0xe000e010

08006b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f7ff ff29 	bl	80069f0 <__NVIC_SetPriorityGrouping>
}
 8006b9e:	bf00      	nop
 8006ba0:	3708      	adds	r7, #8
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b086      	sub	sp, #24
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	4603      	mov	r3, r0
 8006bae:	60b9      	str	r1, [r7, #8]
 8006bb0:	607a      	str	r2, [r7, #4]
 8006bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006bb8:	f7ff ff3e 	bl	8006a38 <__NVIC_GetPriorityGrouping>
 8006bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	68b9      	ldr	r1, [r7, #8]
 8006bc2:	6978      	ldr	r0, [r7, #20]
 8006bc4:	f7ff ff8e 	bl	8006ae4 <NVIC_EncodePriority>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bce:	4611      	mov	r1, r2
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7ff ff5d 	bl	8006a90 <__NVIC_SetPriority>
}
 8006bd6:	bf00      	nop
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b082      	sub	sp, #8
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	4603      	mov	r3, r0
 8006be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7ff ff31 	bl	8006a54 <__NVIC_EnableIRQ>
}
 8006bf2:	bf00      	nop
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b082      	sub	sp, #8
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff ffa2 	bl	8006b4c <SysTick_Config>
 8006c08:	4603      	mov	r3, r0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
	...

08006c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b089      	sub	sp, #36	; 0x24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006c22:	2300      	movs	r3, #0
 8006c24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	61fb      	str	r3, [r7, #28]
 8006c2e:	e16b      	b.n	8006f08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006c30:	2201      	movs	r2, #1
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	fa02 f303 	lsl.w	r3, r2, r3
 8006c38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	4013      	ands	r3, r2
 8006c42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	f040 815a 	bne.w	8006f02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f003 0303 	and.w	r3, r3, #3
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d005      	beq.n	8006c66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d130      	bne.n	8006cc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	005b      	lsls	r3, r3, #1
 8006c70:	2203      	movs	r2, #3
 8006c72:	fa02 f303 	lsl.w	r3, r2, r3
 8006c76:	43db      	mvns	r3, r3
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	68da      	ldr	r2, [r3, #12]
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	005b      	lsls	r3, r3, #1
 8006c86:	fa02 f303 	lsl.w	r3, r2, r3
 8006c8a:	69ba      	ldr	r2, [r7, #24]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	69ba      	ldr	r2, [r7, #24]
 8006c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca4:	43db      	mvns	r3, r3
 8006ca6:	69ba      	ldr	r2, [r7, #24]
 8006ca8:	4013      	ands	r3, r2
 8006caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	091b      	lsrs	r3, r3, #4
 8006cb2:	f003 0201 	and.w	r2, r3, #1
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cbc:	69ba      	ldr	r2, [r7, #24]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f003 0303 	and.w	r3, r3, #3
 8006cd0:	2b03      	cmp	r3, #3
 8006cd2:	d017      	beq.n	8006d04 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	005b      	lsls	r3, r3, #1
 8006cde:	2203      	movs	r2, #3
 8006ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce4:	43db      	mvns	r3, r3
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	4013      	ands	r3, r2
 8006cea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	689a      	ldr	r2, [r3, #8]
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	005b      	lsls	r3, r3, #1
 8006cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	f003 0303 	and.w	r3, r3, #3
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d123      	bne.n	8006d58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	08da      	lsrs	r2, r3, #3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	3208      	adds	r2, #8
 8006d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	f003 0307 	and.w	r3, r3, #7
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	220f      	movs	r2, #15
 8006d28:	fa02 f303 	lsl.w	r3, r2, r3
 8006d2c:	43db      	mvns	r3, r3
 8006d2e:	69ba      	ldr	r2, [r7, #24]
 8006d30:	4013      	ands	r3, r2
 8006d32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	691a      	ldr	r2, [r3, #16]
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	f003 0307 	and.w	r3, r3, #7
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	fa02 f303 	lsl.w	r3, r2, r3
 8006d44:	69ba      	ldr	r2, [r7, #24]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	08da      	lsrs	r2, r3, #3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	3208      	adds	r2, #8
 8006d52:	69b9      	ldr	r1, [r7, #24]
 8006d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	005b      	lsls	r3, r3, #1
 8006d62:	2203      	movs	r2, #3
 8006d64:	fa02 f303 	lsl.w	r3, r2, r3
 8006d68:	43db      	mvns	r3, r3
 8006d6a:	69ba      	ldr	r2, [r7, #24]
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f003 0203 	and.w	r2, r3, #3
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	005b      	lsls	r3, r3, #1
 8006d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	69ba      	ldr	r2, [r7, #24]
 8006d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f000 80b4 	beq.w	8006f02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	60fb      	str	r3, [r7, #12]
 8006d9e:	4b60      	ldr	r3, [pc, #384]	; (8006f20 <HAL_GPIO_Init+0x30c>)
 8006da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da2:	4a5f      	ldr	r2, [pc, #380]	; (8006f20 <HAL_GPIO_Init+0x30c>)
 8006da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006da8:	6453      	str	r3, [r2, #68]	; 0x44
 8006daa:	4b5d      	ldr	r3, [pc, #372]	; (8006f20 <HAL_GPIO_Init+0x30c>)
 8006dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006db6:	4a5b      	ldr	r2, [pc, #364]	; (8006f24 <HAL_GPIO_Init+0x310>)
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	089b      	lsrs	r3, r3, #2
 8006dbc:	3302      	adds	r3, #2
 8006dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	f003 0303 	and.w	r3, r3, #3
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	220f      	movs	r2, #15
 8006dce:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd2:	43db      	mvns	r3, r3
 8006dd4:	69ba      	ldr	r2, [r7, #24]
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a52      	ldr	r2, [pc, #328]	; (8006f28 <HAL_GPIO_Init+0x314>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d02b      	beq.n	8006e3a <HAL_GPIO_Init+0x226>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a51      	ldr	r2, [pc, #324]	; (8006f2c <HAL_GPIO_Init+0x318>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d025      	beq.n	8006e36 <HAL_GPIO_Init+0x222>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a50      	ldr	r2, [pc, #320]	; (8006f30 <HAL_GPIO_Init+0x31c>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d01f      	beq.n	8006e32 <HAL_GPIO_Init+0x21e>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a4f      	ldr	r2, [pc, #316]	; (8006f34 <HAL_GPIO_Init+0x320>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d019      	beq.n	8006e2e <HAL_GPIO_Init+0x21a>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a4e      	ldr	r2, [pc, #312]	; (8006f38 <HAL_GPIO_Init+0x324>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d013      	beq.n	8006e2a <HAL_GPIO_Init+0x216>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a4d      	ldr	r2, [pc, #308]	; (8006f3c <HAL_GPIO_Init+0x328>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d00d      	beq.n	8006e26 <HAL_GPIO_Init+0x212>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a4c      	ldr	r2, [pc, #304]	; (8006f40 <HAL_GPIO_Init+0x32c>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d007      	beq.n	8006e22 <HAL_GPIO_Init+0x20e>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a4b      	ldr	r2, [pc, #300]	; (8006f44 <HAL_GPIO_Init+0x330>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d101      	bne.n	8006e1e <HAL_GPIO_Init+0x20a>
 8006e1a:	2307      	movs	r3, #7
 8006e1c:	e00e      	b.n	8006e3c <HAL_GPIO_Init+0x228>
 8006e1e:	2308      	movs	r3, #8
 8006e20:	e00c      	b.n	8006e3c <HAL_GPIO_Init+0x228>
 8006e22:	2306      	movs	r3, #6
 8006e24:	e00a      	b.n	8006e3c <HAL_GPIO_Init+0x228>
 8006e26:	2305      	movs	r3, #5
 8006e28:	e008      	b.n	8006e3c <HAL_GPIO_Init+0x228>
 8006e2a:	2304      	movs	r3, #4
 8006e2c:	e006      	b.n	8006e3c <HAL_GPIO_Init+0x228>
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e004      	b.n	8006e3c <HAL_GPIO_Init+0x228>
 8006e32:	2302      	movs	r3, #2
 8006e34:	e002      	b.n	8006e3c <HAL_GPIO_Init+0x228>
 8006e36:	2301      	movs	r3, #1
 8006e38:	e000      	b.n	8006e3c <HAL_GPIO_Init+0x228>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	69fa      	ldr	r2, [r7, #28]
 8006e3e:	f002 0203 	and.w	r2, r2, #3
 8006e42:	0092      	lsls	r2, r2, #2
 8006e44:	4093      	lsls	r3, r2
 8006e46:	69ba      	ldr	r2, [r7, #24]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e4c:	4935      	ldr	r1, [pc, #212]	; (8006f24 <HAL_GPIO_Init+0x310>)
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	089b      	lsrs	r3, r3, #2
 8006e52:	3302      	adds	r3, #2
 8006e54:	69ba      	ldr	r2, [r7, #24]
 8006e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006e5a:	4b3b      	ldr	r3, [pc, #236]	; (8006f48 <HAL_GPIO_Init+0x334>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	43db      	mvns	r3, r3
 8006e64:	69ba      	ldr	r2, [r7, #24]
 8006e66:	4013      	ands	r3, r2
 8006e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d003      	beq.n	8006e7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006e76:	69ba      	ldr	r2, [r7, #24]
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006e7e:	4a32      	ldr	r2, [pc, #200]	; (8006f48 <HAL_GPIO_Init+0x334>)
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006e84:	4b30      	ldr	r3, [pc, #192]	; (8006f48 <HAL_GPIO_Init+0x334>)
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	43db      	mvns	r3, r3
 8006e8e:	69ba      	ldr	r2, [r7, #24]
 8006e90:	4013      	ands	r3, r2
 8006e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d003      	beq.n	8006ea8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006ea0:	69ba      	ldr	r2, [r7, #24]
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006ea8:	4a27      	ldr	r2, [pc, #156]	; (8006f48 <HAL_GPIO_Init+0x334>)
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006eae:	4b26      	ldr	r3, [pc, #152]	; (8006f48 <HAL_GPIO_Init+0x334>)
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	43db      	mvns	r3, r3
 8006eb8:	69ba      	ldr	r2, [r7, #24]
 8006eba:	4013      	ands	r3, r2
 8006ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d003      	beq.n	8006ed2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006eca:	69ba      	ldr	r2, [r7, #24]
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006ed2:	4a1d      	ldr	r2, [pc, #116]	; (8006f48 <HAL_GPIO_Init+0x334>)
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006ed8:	4b1b      	ldr	r3, [pc, #108]	; (8006f48 <HAL_GPIO_Init+0x334>)
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	43db      	mvns	r3, r3
 8006ee2:	69ba      	ldr	r2, [r7, #24]
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d003      	beq.n	8006efc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006ef4:	69ba      	ldr	r2, [r7, #24]
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006efc:	4a12      	ldr	r2, [pc, #72]	; (8006f48 <HAL_GPIO_Init+0x334>)
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	3301      	adds	r3, #1
 8006f06:	61fb      	str	r3, [r7, #28]
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	2b0f      	cmp	r3, #15
 8006f0c:	f67f ae90 	bls.w	8006c30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006f10:	bf00      	nop
 8006f12:	bf00      	nop
 8006f14:	3724      	adds	r7, #36	; 0x24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	40023800 	.word	0x40023800
 8006f24:	40013800 	.word	0x40013800
 8006f28:	40020000 	.word	0x40020000
 8006f2c:	40020400 	.word	0x40020400
 8006f30:	40020800 	.word	0x40020800
 8006f34:	40020c00 	.word	0x40020c00
 8006f38:	40021000 	.word	0x40021000
 8006f3c:	40021400 	.word	0x40021400
 8006f40:	40021800 	.word	0x40021800
 8006f44:	40021c00 	.word	0x40021c00
 8006f48:	40013c00 	.word	0x40013c00

08006f4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	460b      	mov	r3, r1
 8006f56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	691a      	ldr	r2, [r3, #16]
 8006f5c:	887b      	ldrh	r3, [r7, #2]
 8006f5e:	4013      	ands	r3, r2
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006f64:	2301      	movs	r3, #1
 8006f66:	73fb      	strb	r3, [r7, #15]
 8006f68:	e001      	b.n	8006f6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	460b      	mov	r3, r1
 8006f86:	807b      	strh	r3, [r7, #2]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f8c:	787b      	ldrb	r3, [r7, #1]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d003      	beq.n	8006f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f92:	887a      	ldrh	r2, [r7, #2]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006f98:	e003      	b.n	8006fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006f9a:	887b      	ldrh	r3, [r7, #2]
 8006f9c:	041a      	lsls	r2, r3, #16
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	619a      	str	r2, [r3, #24]
}
 8006fa2:	bf00      	nop
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b085      	sub	sp, #20
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006fc0:	887a      	ldrh	r2, [r7, #2]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	041a      	lsls	r2, r3, #16
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	43d9      	mvns	r1, r3
 8006fcc:	887b      	ldrh	r3, [r7, #2]
 8006fce:	400b      	ands	r3, r1
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	619a      	str	r2, [r3, #24]
}
 8006fd6:	bf00      	nop
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
	...

08006fe4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	4603      	mov	r3, r0
 8006fec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006fee:	4b08      	ldr	r3, [pc, #32]	; (8007010 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ff0:	695a      	ldr	r2, [r3, #20]
 8006ff2:	88fb      	ldrh	r3, [r7, #6]
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d006      	beq.n	8007008 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006ffa:	4a05      	ldr	r2, [pc, #20]	; (8007010 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ffc:	88fb      	ldrh	r3, [r7, #6]
 8006ffe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007000:	88fb      	ldrh	r3, [r7, #6]
 8007002:	4618      	mov	r0, r3
 8007004:	f7fa ffe4 	bl	8001fd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007008:	bf00      	nop
 800700a:	3708      	adds	r7, #8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	40013c00 	.word	0x40013c00

08007014 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8007014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007016:	b08f      	sub	sp, #60	; 0x3c
 8007018:	af0a      	add	r7, sp, #40	; 0x28
 800701a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e054      	b.n	80070d0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8007032:	b2db      	uxtb	r3, r3
 8007034:	2b00      	cmp	r3, #0
 8007036:	d106      	bne.n	8007046 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f009 f9dd 	bl	8010400 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2203      	movs	r2, #3
 800704a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007056:	2b00      	cmp	r3, #0
 8007058:	d102      	bne.n	8007060 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4618      	mov	r0, r3
 8007066:	f006 fb7f 	bl	800d768 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	603b      	str	r3, [r7, #0]
 8007070:	687e      	ldr	r6, [r7, #4]
 8007072:	466d      	mov	r5, sp
 8007074:	f106 0410 	add.w	r4, r6, #16
 8007078:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800707a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800707c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800707e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007080:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007084:	e885 0003 	stmia.w	r5, {r0, r1}
 8007088:	1d33      	adds	r3, r6, #4
 800708a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800708c:	6838      	ldr	r0, [r7, #0]
 800708e:	f006 faf9 	bl	800d684 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2101      	movs	r1, #1
 8007098:	4618      	mov	r0, r3
 800709a:	f006 fb76 	bl	800d78a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	603b      	str	r3, [r7, #0]
 80070a4:	687e      	ldr	r6, [r7, #4]
 80070a6:	466d      	mov	r5, sp
 80070a8:	f106 0410 	add.w	r4, r6, #16
 80070ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80070ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80070b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80070b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80070b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80070b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80070bc:	1d33      	adds	r3, r6, #4
 80070be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070c0:	6838      	ldr	r0, [r7, #0]
 80070c2:	f006 fc89 	bl	800d9d8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080070d8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80070d8:	b590      	push	{r4, r7, lr}
 80070da:	b089      	sub	sp, #36	; 0x24
 80070dc:	af04      	add	r7, sp, #16
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	4608      	mov	r0, r1
 80070e2:	4611      	mov	r1, r2
 80070e4:	461a      	mov	r2, r3
 80070e6:	4603      	mov	r3, r0
 80070e8:	70fb      	strb	r3, [r7, #3]
 80070ea:	460b      	mov	r3, r1
 80070ec:	70bb      	strb	r3, [r7, #2]
 80070ee:	4613      	mov	r3, r2
 80070f0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d101      	bne.n	8007100 <HAL_HCD_HC_Init+0x28>
 80070fc:	2302      	movs	r3, #2
 80070fe:	e076      	b.n	80071ee <HAL_HCD_HC_Init+0x116>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8007108:	78fb      	ldrb	r3, [r7, #3]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	212c      	movs	r1, #44	; 0x2c
 800710e:	fb01 f303 	mul.w	r3, r1, r3
 8007112:	4413      	add	r3, r2
 8007114:	333d      	adds	r3, #61	; 0x3d
 8007116:	2200      	movs	r2, #0
 8007118:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800711a:	78fb      	ldrb	r3, [r7, #3]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	212c      	movs	r1, #44	; 0x2c
 8007120:	fb01 f303 	mul.w	r3, r1, r3
 8007124:	4413      	add	r3, r2
 8007126:	3338      	adds	r3, #56	; 0x38
 8007128:	787a      	ldrb	r2, [r7, #1]
 800712a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800712c:	78fb      	ldrb	r3, [r7, #3]
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	212c      	movs	r1, #44	; 0x2c
 8007132:	fb01 f303 	mul.w	r3, r1, r3
 8007136:	4413      	add	r3, r2
 8007138:	3340      	adds	r3, #64	; 0x40
 800713a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800713c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800713e:	78fb      	ldrb	r3, [r7, #3]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	212c      	movs	r1, #44	; 0x2c
 8007144:	fb01 f303 	mul.w	r3, r1, r3
 8007148:	4413      	add	r3, r2
 800714a:	3339      	adds	r3, #57	; 0x39
 800714c:	78fa      	ldrb	r2, [r7, #3]
 800714e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8007150:	78fb      	ldrb	r3, [r7, #3]
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	212c      	movs	r1, #44	; 0x2c
 8007156:	fb01 f303 	mul.w	r3, r1, r3
 800715a:	4413      	add	r3, r2
 800715c:	333f      	adds	r3, #63	; 0x3f
 800715e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8007162:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8007164:	78fb      	ldrb	r3, [r7, #3]
 8007166:	78ba      	ldrb	r2, [r7, #2]
 8007168:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800716c:	b2d0      	uxtb	r0, r2
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	212c      	movs	r1, #44	; 0x2c
 8007172:	fb01 f303 	mul.w	r3, r1, r3
 8007176:	4413      	add	r3, r2
 8007178:	333a      	adds	r3, #58	; 0x3a
 800717a:	4602      	mov	r2, r0
 800717c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800717e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007182:	2b00      	cmp	r3, #0
 8007184:	da09      	bge.n	800719a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8007186:	78fb      	ldrb	r3, [r7, #3]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	212c      	movs	r1, #44	; 0x2c
 800718c:	fb01 f303 	mul.w	r3, r1, r3
 8007190:	4413      	add	r3, r2
 8007192:	333b      	adds	r3, #59	; 0x3b
 8007194:	2201      	movs	r2, #1
 8007196:	701a      	strb	r2, [r3, #0]
 8007198:	e008      	b.n	80071ac <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800719a:	78fb      	ldrb	r3, [r7, #3]
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	212c      	movs	r1, #44	; 0x2c
 80071a0:	fb01 f303 	mul.w	r3, r1, r3
 80071a4:	4413      	add	r3, r2
 80071a6:	333b      	adds	r3, #59	; 0x3b
 80071a8:	2200      	movs	r2, #0
 80071aa:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80071ac:	78fb      	ldrb	r3, [r7, #3]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	212c      	movs	r1, #44	; 0x2c
 80071b2:	fb01 f303 	mul.w	r3, r1, r3
 80071b6:	4413      	add	r3, r2
 80071b8:	333c      	adds	r3, #60	; 0x3c
 80071ba:	f897 2020 	ldrb.w	r2, [r7, #32]
 80071be:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6818      	ldr	r0, [r3, #0]
 80071c4:	787c      	ldrb	r4, [r7, #1]
 80071c6:	78ba      	ldrb	r2, [r7, #2]
 80071c8:	78f9      	ldrb	r1, [r7, #3]
 80071ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80071cc:	9302      	str	r3, [sp, #8]
 80071ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80071d2:	9301      	str	r3, [sp, #4]
 80071d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	4623      	mov	r3, r4
 80071dc:	f006 fd7e 	bl	800dcdc <USB_HC_Init>
 80071e0:	4603      	mov	r3, r0
 80071e2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80071ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3714      	adds	r7, #20
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd90      	pop	{r4, r7, pc}

080071f6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b084      	sub	sp, #16
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
 80071fe:	460b      	mov	r3, r1
 8007200:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007202:	2300      	movs	r3, #0
 8007204:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800720c:	2b01      	cmp	r3, #1
 800720e:	d101      	bne.n	8007214 <HAL_HCD_HC_Halt+0x1e>
 8007210:	2302      	movs	r3, #2
 8007212:	e00f      	b.n	8007234 <HAL_HCD_HC_Halt+0x3e>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	78fa      	ldrb	r2, [r7, #3]
 8007222:	4611      	mov	r1, r2
 8007224:	4618      	mov	r0, r3
 8007226:	f006 ffba 	bl	800e19e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8007232:	7bfb      	ldrb	r3, [r7, #15]
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	4608      	mov	r0, r1
 8007246:	4611      	mov	r1, r2
 8007248:	461a      	mov	r2, r3
 800724a:	4603      	mov	r3, r0
 800724c:	70fb      	strb	r3, [r7, #3]
 800724e:	460b      	mov	r3, r1
 8007250:	70bb      	strb	r3, [r7, #2]
 8007252:	4613      	mov	r3, r2
 8007254:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8007256:	78fb      	ldrb	r3, [r7, #3]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	212c      	movs	r1, #44	; 0x2c
 800725c:	fb01 f303 	mul.w	r3, r1, r3
 8007260:	4413      	add	r3, r2
 8007262:	333b      	adds	r3, #59	; 0x3b
 8007264:	78ba      	ldrb	r2, [r7, #2]
 8007266:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8007268:	78fb      	ldrb	r3, [r7, #3]
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	212c      	movs	r1, #44	; 0x2c
 800726e:	fb01 f303 	mul.w	r3, r1, r3
 8007272:	4413      	add	r3, r2
 8007274:	333f      	adds	r3, #63	; 0x3f
 8007276:	787a      	ldrb	r2, [r7, #1]
 8007278:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800727a:	7c3b      	ldrb	r3, [r7, #16]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d112      	bne.n	80072a6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8007280:	78fb      	ldrb	r3, [r7, #3]
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	212c      	movs	r1, #44	; 0x2c
 8007286:	fb01 f303 	mul.w	r3, r1, r3
 800728a:	4413      	add	r3, r2
 800728c:	3342      	adds	r3, #66	; 0x42
 800728e:	2203      	movs	r2, #3
 8007290:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8007292:	78fb      	ldrb	r3, [r7, #3]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	212c      	movs	r1, #44	; 0x2c
 8007298:	fb01 f303 	mul.w	r3, r1, r3
 800729c:	4413      	add	r3, r2
 800729e:	333d      	adds	r3, #61	; 0x3d
 80072a0:	7f3a      	ldrb	r2, [r7, #28]
 80072a2:	701a      	strb	r2, [r3, #0]
 80072a4:	e008      	b.n	80072b8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80072a6:	78fb      	ldrb	r3, [r7, #3]
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	212c      	movs	r1, #44	; 0x2c
 80072ac:	fb01 f303 	mul.w	r3, r1, r3
 80072b0:	4413      	add	r3, r2
 80072b2:	3342      	adds	r3, #66	; 0x42
 80072b4:	2202      	movs	r2, #2
 80072b6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80072b8:	787b      	ldrb	r3, [r7, #1]
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	f200 80c6 	bhi.w	800744c <HAL_HCD_HC_SubmitRequest+0x210>
 80072c0:	a201      	add	r2, pc, #4	; (adr r2, 80072c8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80072c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c6:	bf00      	nop
 80072c8:	080072d9 	.word	0x080072d9
 80072cc:	08007439 	.word	0x08007439
 80072d0:	0800733d 	.word	0x0800733d
 80072d4:	080073bb 	.word	0x080073bb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80072d8:	7c3b      	ldrb	r3, [r7, #16]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	f040 80b8 	bne.w	8007450 <HAL_HCD_HC_SubmitRequest+0x214>
 80072e0:	78bb      	ldrb	r3, [r7, #2]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f040 80b4 	bne.w	8007450 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80072e8:	8b3b      	ldrh	r3, [r7, #24]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d108      	bne.n	8007300 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80072ee:	78fb      	ldrb	r3, [r7, #3]
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	212c      	movs	r1, #44	; 0x2c
 80072f4:	fb01 f303 	mul.w	r3, r1, r3
 80072f8:	4413      	add	r3, r2
 80072fa:	3355      	adds	r3, #85	; 0x55
 80072fc:	2201      	movs	r2, #1
 80072fe:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8007300:	78fb      	ldrb	r3, [r7, #3]
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	212c      	movs	r1, #44	; 0x2c
 8007306:	fb01 f303 	mul.w	r3, r1, r3
 800730a:	4413      	add	r3, r2
 800730c:	3355      	adds	r3, #85	; 0x55
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d109      	bne.n	8007328 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007314:	78fb      	ldrb	r3, [r7, #3]
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	212c      	movs	r1, #44	; 0x2c
 800731a:	fb01 f303 	mul.w	r3, r1, r3
 800731e:	4413      	add	r3, r2
 8007320:	3342      	adds	r3, #66	; 0x42
 8007322:	2200      	movs	r2, #0
 8007324:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8007326:	e093      	b.n	8007450 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007328:	78fb      	ldrb	r3, [r7, #3]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	212c      	movs	r1, #44	; 0x2c
 800732e:	fb01 f303 	mul.w	r3, r1, r3
 8007332:	4413      	add	r3, r2
 8007334:	3342      	adds	r3, #66	; 0x42
 8007336:	2202      	movs	r2, #2
 8007338:	701a      	strb	r2, [r3, #0]
      break;
 800733a:	e089      	b.n	8007450 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800733c:	78bb      	ldrb	r3, [r7, #2]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d11d      	bne.n	800737e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8007342:	78fb      	ldrb	r3, [r7, #3]
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	212c      	movs	r1, #44	; 0x2c
 8007348:	fb01 f303 	mul.w	r3, r1, r3
 800734c:	4413      	add	r3, r2
 800734e:	3355      	adds	r3, #85	; 0x55
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d109      	bne.n	800736a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007356:	78fb      	ldrb	r3, [r7, #3]
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	212c      	movs	r1, #44	; 0x2c
 800735c:	fb01 f303 	mul.w	r3, r1, r3
 8007360:	4413      	add	r3, r2
 8007362:	3342      	adds	r3, #66	; 0x42
 8007364:	2200      	movs	r2, #0
 8007366:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8007368:	e073      	b.n	8007452 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800736a:	78fb      	ldrb	r3, [r7, #3]
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	212c      	movs	r1, #44	; 0x2c
 8007370:	fb01 f303 	mul.w	r3, r1, r3
 8007374:	4413      	add	r3, r2
 8007376:	3342      	adds	r3, #66	; 0x42
 8007378:	2202      	movs	r2, #2
 800737a:	701a      	strb	r2, [r3, #0]
      break;
 800737c:	e069      	b.n	8007452 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800737e:	78fb      	ldrb	r3, [r7, #3]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	212c      	movs	r1, #44	; 0x2c
 8007384:	fb01 f303 	mul.w	r3, r1, r3
 8007388:	4413      	add	r3, r2
 800738a:	3354      	adds	r3, #84	; 0x54
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d109      	bne.n	80073a6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007392:	78fb      	ldrb	r3, [r7, #3]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	212c      	movs	r1, #44	; 0x2c
 8007398:	fb01 f303 	mul.w	r3, r1, r3
 800739c:	4413      	add	r3, r2
 800739e:	3342      	adds	r3, #66	; 0x42
 80073a0:	2200      	movs	r2, #0
 80073a2:	701a      	strb	r2, [r3, #0]
      break;
 80073a4:	e055      	b.n	8007452 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80073a6:	78fb      	ldrb	r3, [r7, #3]
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	212c      	movs	r1, #44	; 0x2c
 80073ac:	fb01 f303 	mul.w	r3, r1, r3
 80073b0:	4413      	add	r3, r2
 80073b2:	3342      	adds	r3, #66	; 0x42
 80073b4:	2202      	movs	r2, #2
 80073b6:	701a      	strb	r2, [r3, #0]
      break;
 80073b8:	e04b      	b.n	8007452 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80073ba:	78bb      	ldrb	r3, [r7, #2]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d11d      	bne.n	80073fc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80073c0:	78fb      	ldrb	r3, [r7, #3]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	212c      	movs	r1, #44	; 0x2c
 80073c6:	fb01 f303 	mul.w	r3, r1, r3
 80073ca:	4413      	add	r3, r2
 80073cc:	3355      	adds	r3, #85	; 0x55
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d109      	bne.n	80073e8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80073d4:	78fb      	ldrb	r3, [r7, #3]
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	212c      	movs	r1, #44	; 0x2c
 80073da:	fb01 f303 	mul.w	r3, r1, r3
 80073de:	4413      	add	r3, r2
 80073e0:	3342      	adds	r3, #66	; 0x42
 80073e2:	2200      	movs	r2, #0
 80073e4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80073e6:	e034      	b.n	8007452 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80073e8:	78fb      	ldrb	r3, [r7, #3]
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	212c      	movs	r1, #44	; 0x2c
 80073ee:	fb01 f303 	mul.w	r3, r1, r3
 80073f2:	4413      	add	r3, r2
 80073f4:	3342      	adds	r3, #66	; 0x42
 80073f6:	2202      	movs	r2, #2
 80073f8:	701a      	strb	r2, [r3, #0]
      break;
 80073fa:	e02a      	b.n	8007452 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80073fc:	78fb      	ldrb	r3, [r7, #3]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	212c      	movs	r1, #44	; 0x2c
 8007402:	fb01 f303 	mul.w	r3, r1, r3
 8007406:	4413      	add	r3, r2
 8007408:	3354      	adds	r3, #84	; 0x54
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d109      	bne.n	8007424 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007410:	78fb      	ldrb	r3, [r7, #3]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	212c      	movs	r1, #44	; 0x2c
 8007416:	fb01 f303 	mul.w	r3, r1, r3
 800741a:	4413      	add	r3, r2
 800741c:	3342      	adds	r3, #66	; 0x42
 800741e:	2200      	movs	r2, #0
 8007420:	701a      	strb	r2, [r3, #0]
      break;
 8007422:	e016      	b.n	8007452 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007424:	78fb      	ldrb	r3, [r7, #3]
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	212c      	movs	r1, #44	; 0x2c
 800742a:	fb01 f303 	mul.w	r3, r1, r3
 800742e:	4413      	add	r3, r2
 8007430:	3342      	adds	r3, #66	; 0x42
 8007432:	2202      	movs	r2, #2
 8007434:	701a      	strb	r2, [r3, #0]
      break;
 8007436:	e00c      	b.n	8007452 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007438:	78fb      	ldrb	r3, [r7, #3]
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	212c      	movs	r1, #44	; 0x2c
 800743e:	fb01 f303 	mul.w	r3, r1, r3
 8007442:	4413      	add	r3, r2
 8007444:	3342      	adds	r3, #66	; 0x42
 8007446:	2200      	movs	r2, #0
 8007448:	701a      	strb	r2, [r3, #0]
      break;
 800744a:	e002      	b.n	8007452 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800744c:	bf00      	nop
 800744e:	e000      	b.n	8007452 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8007450:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8007452:	78fb      	ldrb	r3, [r7, #3]
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	212c      	movs	r1, #44	; 0x2c
 8007458:	fb01 f303 	mul.w	r3, r1, r3
 800745c:	4413      	add	r3, r2
 800745e:	3344      	adds	r3, #68	; 0x44
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8007464:	78fb      	ldrb	r3, [r7, #3]
 8007466:	8b3a      	ldrh	r2, [r7, #24]
 8007468:	6879      	ldr	r1, [r7, #4]
 800746a:	202c      	movs	r0, #44	; 0x2c
 800746c:	fb00 f303 	mul.w	r3, r0, r3
 8007470:	440b      	add	r3, r1
 8007472:	334c      	adds	r3, #76	; 0x4c
 8007474:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8007476:	78fb      	ldrb	r3, [r7, #3]
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	212c      	movs	r1, #44	; 0x2c
 800747c:	fb01 f303 	mul.w	r3, r1, r3
 8007480:	4413      	add	r3, r2
 8007482:	3360      	adds	r3, #96	; 0x60
 8007484:	2200      	movs	r2, #0
 8007486:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8007488:	78fb      	ldrb	r3, [r7, #3]
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	212c      	movs	r1, #44	; 0x2c
 800748e:	fb01 f303 	mul.w	r3, r1, r3
 8007492:	4413      	add	r3, r2
 8007494:	3350      	adds	r3, #80	; 0x50
 8007496:	2200      	movs	r2, #0
 8007498:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800749a:	78fb      	ldrb	r3, [r7, #3]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	212c      	movs	r1, #44	; 0x2c
 80074a0:	fb01 f303 	mul.w	r3, r1, r3
 80074a4:	4413      	add	r3, r2
 80074a6:	3339      	adds	r3, #57	; 0x39
 80074a8:	78fa      	ldrb	r2, [r7, #3]
 80074aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80074ac:	78fb      	ldrb	r3, [r7, #3]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	212c      	movs	r1, #44	; 0x2c
 80074b2:	fb01 f303 	mul.w	r3, r1, r3
 80074b6:	4413      	add	r3, r2
 80074b8:	3361      	adds	r3, #97	; 0x61
 80074ba:	2200      	movs	r2, #0
 80074bc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6818      	ldr	r0, [r3, #0]
 80074c2:	78fb      	ldrb	r3, [r7, #3]
 80074c4:	222c      	movs	r2, #44	; 0x2c
 80074c6:	fb02 f303 	mul.w	r3, r2, r3
 80074ca:	3338      	adds	r3, #56	; 0x38
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	18d1      	adds	r1, r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	461a      	mov	r2, r3
 80074d8:	f006 fd0e 	bl	800def8 <USB_HC_StartXfer>
 80074dc:	4603      	mov	r3, r0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop

080074e8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4618      	mov	r0, r3
 8007500:	f006 fa27 	bl	800d952 <USB_GetMode>
 8007504:	4603      	mov	r3, r0
 8007506:	2b01      	cmp	r3, #1
 8007508:	f040 80ef 	bne.w	80076ea <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4618      	mov	r0, r3
 8007512:	f006 fa0b 	bl	800d92c <USB_ReadInterrupts>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 80e5 	beq.w	80076e8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4618      	mov	r0, r3
 8007524:	f006 fa02 	bl	800d92c <USB_ReadInterrupts>
 8007528:	4603      	mov	r3, r0
 800752a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800752e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007532:	d104      	bne.n	800753e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800753c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4618      	mov	r0, r3
 8007544:	f006 f9f2 	bl	800d92c <USB_ReadInterrupts>
 8007548:	4603      	mov	r3, r0
 800754a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800754e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007552:	d104      	bne.n	800755e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800755c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4618      	mov	r0, r3
 8007564:	f006 f9e2 	bl	800d92c <USB_ReadInterrupts>
 8007568:	4603      	mov	r3, r0
 800756a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800756e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007572:	d104      	bne.n	800757e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800757c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4618      	mov	r0, r3
 8007584:	f006 f9d2 	bl	800d92c <USB_ReadInterrupts>
 8007588:	4603      	mov	r3, r0
 800758a:	f003 0302 	and.w	r3, r3, #2
 800758e:	2b02      	cmp	r3, #2
 8007590:	d103      	bne.n	800759a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2202      	movs	r2, #2
 8007598:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4618      	mov	r0, r3
 80075a0:	f006 f9c4 	bl	800d92c <USB_ReadInterrupts>
 80075a4:	4603      	mov	r3, r0
 80075a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075ae:	d115      	bne.n	80075dc <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80075b8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d108      	bne.n	80075dc <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f008 ff96 	bl	80104fc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2101      	movs	r1, #1
 80075d6:	4618      	mov	r0, r3
 80075d8:	f006 faba 	bl	800db50 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f006 f9a3 	bl	800d92c <USB_ReadInterrupts>
 80075e6:	4603      	mov	r3, r0
 80075e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075f0:	d102      	bne.n	80075f8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f001 f9ff 	bl	80089f6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4618      	mov	r0, r3
 80075fe:	f006 f995 	bl	800d92c <USB_ReadInterrupts>
 8007602:	4603      	mov	r3, r0
 8007604:	f003 0308 	and.w	r3, r3, #8
 8007608:	2b08      	cmp	r3, #8
 800760a:	d106      	bne.n	800761a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f008 ff59 	bl	80104c4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2208      	movs	r2, #8
 8007618:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4618      	mov	r0, r3
 8007620:	f006 f984 	bl	800d92c <USB_ReadInterrupts>
 8007624:	4603      	mov	r3, r0
 8007626:	f003 0310 	and.w	r3, r3, #16
 800762a:	2b10      	cmp	r3, #16
 800762c:	d101      	bne.n	8007632 <HAL_HCD_IRQHandler+0x14a>
 800762e:	2301      	movs	r3, #1
 8007630:	e000      	b.n	8007634 <HAL_HCD_IRQHandler+0x14c>
 8007632:	2300      	movs	r3, #0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d012      	beq.n	800765e <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	699a      	ldr	r2, [r3, #24]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f022 0210 	bic.w	r2, r2, #16
 8007646:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f001 f902 	bl	8008852 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	699a      	ldr	r2, [r3, #24]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f042 0210 	orr.w	r2, r2, #16
 800765c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4618      	mov	r0, r3
 8007664:	f006 f962 	bl	800d92c <USB_ReadInterrupts>
 8007668:	4603      	mov	r3, r0
 800766a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800766e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007672:	d13a      	bne.n	80076ea <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4618      	mov	r0, r3
 800767a:	f006 fd7f 	bl	800e17c <USB_HC_ReadInterrupt>
 800767e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007680:	2300      	movs	r3, #0
 8007682:	617b      	str	r3, [r7, #20]
 8007684:	e025      	b.n	80076d2 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	f003 030f 	and.w	r3, r3, #15
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	fa22 f303 	lsr.w	r3, r2, r3
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b00      	cmp	r3, #0
 8007698:	d018      	beq.n	80076cc <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	015a      	lsls	r2, r3, #5
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	4413      	add	r3, r2
 80076a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076b0:	d106      	bne.n	80076c0 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	4619      	mov	r1, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f8ab 	bl	8007814 <HCD_HC_IN_IRQHandler>
 80076be:	e005      	b.n	80076cc <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	4619      	mov	r1, r3
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fcc6 	bl	8008058 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	3301      	adds	r3, #1
 80076d0:	617b      	str	r3, [r7, #20]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d3d4      	bcc.n	8007686 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80076e4:	615a      	str	r2, [r3, #20]
 80076e6:	e000      	b.n	80076ea <HAL_HCD_IRQHandler+0x202>
      return;
 80076e8:	bf00      	nop
    }
  }
}
 80076ea:	3718      	adds	r7, #24
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d101      	bne.n	8007706 <HAL_HCD_Start+0x16>
 8007702:	2302      	movs	r3, #2
 8007704:	e013      	b.n	800772e <HAL_HCD_Start+0x3e>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4618      	mov	r0, r3
 8007714:	f006 f817 	bl	800d746 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2101      	movs	r1, #1
 800771e:	4618      	mov	r0, r3
 8007720:	f006 fa7a 	bl	800dc18 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b082      	sub	sp, #8
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8007744:	2b01      	cmp	r3, #1
 8007746:	d101      	bne.n	800774c <HAL_HCD_Stop+0x16>
 8007748:	2302      	movs	r3, #2
 800774a:	e00d      	b.n	8007768 <HAL_HCD_Stop+0x32>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4618      	mov	r0, r3
 800775a:	f006 fe79 	bl	800e450 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4618      	mov	r0, r3
 800777e:	f006 fa21 	bl	800dbc4 <USB_ResetPort>
 8007782:	4603      	mov	r3, r0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	460b      	mov	r3, r1
 8007796:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8007798:	78fb      	ldrb	r3, [r7, #3]
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	212c      	movs	r1, #44	; 0x2c
 800779e:	fb01 f303 	mul.w	r3, r1, r3
 80077a2:	4413      	add	r3, r2
 80077a4:	3360      	adds	r3, #96	; 0x60
 80077a6:	781b      	ldrb	r3, [r3, #0]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	460b      	mov	r3, r1
 80077be:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80077c0:	78fb      	ldrb	r3, [r7, #3]
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	212c      	movs	r1, #44	; 0x2c
 80077c6:	fb01 f303 	mul.w	r3, r1, r3
 80077ca:	4413      	add	r3, r2
 80077cc:	3350      	adds	r3, #80	; 0x50
 80077ce:	681b      	ldr	r3, [r3, #0]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4618      	mov	r0, r3
 80077ea:	f006 fa65 	bl	800dcb8 <USB_GetCurrentFrame>
 80077ee:	4603      	mov	r3, r0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4618      	mov	r0, r3
 8007806:	f006 fa40 	bl	800dc8a <USB_GetHostSpeed>
 800780a:	4603      	mov	r3, r0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	460b      	mov	r3, r1
 800781e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800782a:	78fb      	ldrb	r3, [r7, #3]
 800782c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	015a      	lsls	r2, r3, #5
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	4413      	add	r3, r2
 8007836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f003 0304 	and.w	r3, r3, #4
 8007840:	2b04      	cmp	r3, #4
 8007842:	d119      	bne.n	8007878 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	015a      	lsls	r2, r3, #5
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	4413      	add	r3, r2
 800784c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007850:	461a      	mov	r2, r3
 8007852:	2304      	movs	r3, #4
 8007854:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	015a      	lsls	r2, r3, #5
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	4413      	add	r3, r2
 800785e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	0151      	lsls	r1, r2, #5
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	440a      	add	r2, r1
 800786c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007870:	f043 0302 	orr.w	r3, r3, #2
 8007874:	60d3      	str	r3, [r2, #12]
 8007876:	e101      	b.n	8007a7c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	015a      	lsls	r2, r3, #5
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	4413      	add	r3, r2
 8007880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800788a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800788e:	d12b      	bne.n	80078e8 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	015a      	lsls	r2, r3, #5
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	4413      	add	r3, r2
 8007898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800789c:	461a      	mov	r2, r3
 800789e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	212c      	movs	r1, #44	; 0x2c
 80078aa:	fb01 f303 	mul.w	r3, r1, r3
 80078ae:	4413      	add	r3, r2
 80078b0:	3361      	adds	r3, #97	; 0x61
 80078b2:	2207      	movs	r2, #7
 80078b4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	015a      	lsls	r2, r3, #5
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	4413      	add	r3, r2
 80078be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	0151      	lsls	r1, r2, #5
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	440a      	add	r2, r1
 80078cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078d0:	f043 0302 	orr.w	r3, r3, #2
 80078d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	b2d2      	uxtb	r2, r2
 80078de:	4611      	mov	r1, r2
 80078e0:	4618      	mov	r0, r3
 80078e2:	f006 fc5c 	bl	800e19e <USB_HC_Halt>
 80078e6:	e0c9      	b.n	8007a7c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	015a      	lsls	r2, r3, #5
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	f003 0320 	and.w	r3, r3, #32
 80078fa:	2b20      	cmp	r3, #32
 80078fc:	d109      	bne.n	8007912 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	015a      	lsls	r2, r3, #5
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	4413      	add	r3, r2
 8007906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800790a:	461a      	mov	r2, r3
 800790c:	2320      	movs	r3, #32
 800790e:	6093      	str	r3, [r2, #8]
 8007910:	e0b4      	b.n	8007a7c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	015a      	lsls	r2, r3, #5
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	4413      	add	r3, r2
 800791a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f003 0308 	and.w	r3, r3, #8
 8007924:	2b08      	cmp	r3, #8
 8007926:	d133      	bne.n	8007990 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	015a      	lsls	r2, r3, #5
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	4413      	add	r3, r2
 8007930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	0151      	lsls	r1, r2, #5
 800793a:	693a      	ldr	r2, [r7, #16]
 800793c:	440a      	add	r2, r1
 800793e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007942:	f043 0302 	orr.w	r3, r3, #2
 8007946:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	212c      	movs	r1, #44	; 0x2c
 800794e:	fb01 f303 	mul.w	r3, r1, r3
 8007952:	4413      	add	r3, r2
 8007954:	3361      	adds	r3, #97	; 0x61
 8007956:	2205      	movs	r2, #5
 8007958:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	015a      	lsls	r2, r3, #5
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	4413      	add	r3, r2
 8007962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007966:	461a      	mov	r2, r3
 8007968:	2310      	movs	r3, #16
 800796a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	015a      	lsls	r2, r3, #5
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	4413      	add	r3, r2
 8007974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007978:	461a      	mov	r2, r3
 800797a:	2308      	movs	r3, #8
 800797c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	b2d2      	uxtb	r2, r2
 8007986:	4611      	mov	r1, r2
 8007988:	4618      	mov	r0, r3
 800798a:	f006 fc08 	bl	800e19e <USB_HC_Halt>
 800798e:	e075      	b.n	8007a7c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	015a      	lsls	r2, r3, #5
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	4413      	add	r3, r2
 8007998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079a6:	d134      	bne.n	8007a12 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	015a      	lsls	r2, r3, #5
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	4413      	add	r3, r2
 80079b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	0151      	lsls	r1, r2, #5
 80079ba:	693a      	ldr	r2, [r7, #16]
 80079bc:	440a      	add	r2, r1
 80079be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079c2:	f043 0302 	orr.w	r3, r3, #2
 80079c6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	212c      	movs	r1, #44	; 0x2c
 80079ce:	fb01 f303 	mul.w	r3, r1, r3
 80079d2:	4413      	add	r3, r2
 80079d4:	3361      	adds	r3, #97	; 0x61
 80079d6:	2208      	movs	r2, #8
 80079d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	015a      	lsls	r2, r3, #5
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	4413      	add	r3, r2
 80079e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079e6:	461a      	mov	r2, r3
 80079e8:	2310      	movs	r3, #16
 80079ea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	015a      	lsls	r2, r3, #5
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079f8:	461a      	mov	r2, r3
 80079fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079fe:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	b2d2      	uxtb	r2, r2
 8007a08:	4611      	mov	r1, r2
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f006 fbc7 	bl	800e19e <USB_HC_Halt>
 8007a10:	e034      	b.n	8007a7c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	015a      	lsls	r2, r3, #5
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	4413      	add	r3, r2
 8007a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a24:	2b80      	cmp	r3, #128	; 0x80
 8007a26:	d129      	bne.n	8007a7c <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	015a      	lsls	r2, r3, #5
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	4413      	add	r3, r2
 8007a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	0151      	lsls	r1, r2, #5
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	440a      	add	r2, r1
 8007a3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a42:	f043 0302 	orr.w	r3, r3, #2
 8007a46:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	212c      	movs	r1, #44	; 0x2c
 8007a4e:	fb01 f303 	mul.w	r3, r1, r3
 8007a52:	4413      	add	r3, r2
 8007a54:	3361      	adds	r3, #97	; 0x61
 8007a56:	2206      	movs	r2, #6
 8007a58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	b2d2      	uxtb	r2, r2
 8007a62:	4611      	mov	r1, r2
 8007a64:	4618      	mov	r0, r3
 8007a66:	f006 fb9a 	bl	800e19e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	015a      	lsls	r2, r3, #5
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	4413      	add	r3, r2
 8007a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a76:	461a      	mov	r2, r3
 8007a78:	2380      	movs	r3, #128	; 0x80
 8007a7a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	015a      	lsls	r2, r3, #5
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a92:	d122      	bne.n	8007ada <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	0151      	lsls	r1, r2, #5
 8007aa6:	693a      	ldr	r2, [r7, #16]
 8007aa8:	440a      	add	r2, r1
 8007aaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007aae:	f043 0302 	orr.w	r3, r3, #2
 8007ab2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	b2d2      	uxtb	r2, r2
 8007abc:	4611      	mov	r1, r2
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f006 fb6d 	bl	800e19e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	015a      	lsls	r2, r3, #5
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ad6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8007ad8:	e2ba      	b.n	8008050 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	015a      	lsls	r2, r3, #5
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	f003 0301 	and.w	r3, r3, #1
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	f040 811b 	bne.w	8007d28 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d019      	beq.n	8007b2e <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	212c      	movs	r1, #44	; 0x2c
 8007b00:	fb01 f303 	mul.w	r3, r1, r3
 8007b04:	4413      	add	r3, r2
 8007b06:	3348      	adds	r3, #72	; 0x48
 8007b08:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	0159      	lsls	r1, r3, #5
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	440b      	add	r3, r1
 8007b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8007b1c:	1ad2      	subs	r2, r2, r3
 8007b1e:	6879      	ldr	r1, [r7, #4]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	202c      	movs	r0, #44	; 0x2c
 8007b24:	fb00 f303 	mul.w	r3, r0, r3
 8007b28:	440b      	add	r3, r1
 8007b2a:	3350      	adds	r3, #80	; 0x50
 8007b2c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	212c      	movs	r1, #44	; 0x2c
 8007b34:	fb01 f303 	mul.w	r3, r1, r3
 8007b38:	4413      	add	r3, r2
 8007b3a:	3361      	adds	r3, #97	; 0x61
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	212c      	movs	r1, #44	; 0x2c
 8007b46:	fb01 f303 	mul.w	r3, r1, r3
 8007b4a:	4413      	add	r3, r2
 8007b4c:	335c      	adds	r3, #92	; 0x5c
 8007b4e:	2200      	movs	r2, #0
 8007b50:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	015a      	lsls	r2, r3, #5
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	4413      	add	r3, r2
 8007b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b5e:	461a      	mov	r2, r3
 8007b60:	2301      	movs	r3, #1
 8007b62:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	212c      	movs	r1, #44	; 0x2c
 8007b6a:	fb01 f303 	mul.w	r3, r1, r3
 8007b6e:	4413      	add	r3, r2
 8007b70:	333f      	adds	r3, #63	; 0x3f
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d009      	beq.n	8007b8c <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	212c      	movs	r1, #44	; 0x2c
 8007b7e:	fb01 f303 	mul.w	r3, r1, r3
 8007b82:	4413      	add	r3, r2
 8007b84:	333f      	adds	r3, #63	; 0x3f
 8007b86:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d121      	bne.n	8007bd0 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	015a      	lsls	r2, r3, #5
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	4413      	add	r3, r2
 8007b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	68fa      	ldr	r2, [r7, #12]
 8007b9c:	0151      	lsls	r1, r2, #5
 8007b9e:	693a      	ldr	r2, [r7, #16]
 8007ba0:	440a      	add	r2, r1
 8007ba2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ba6:	f043 0302 	orr.w	r3, r3, #2
 8007baa:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	b2d2      	uxtb	r2, r2
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f006 faf1 	bl	800e19e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bc8:	461a      	mov	r2, r3
 8007bca:	2310      	movs	r3, #16
 8007bcc:	6093      	str	r3, [r2, #8]
 8007bce:	e066      	b.n	8007c9e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	212c      	movs	r1, #44	; 0x2c
 8007bd6:	fb01 f303 	mul.w	r3, r1, r3
 8007bda:	4413      	add	r3, r2
 8007bdc:	333f      	adds	r3, #63	; 0x3f
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	2b03      	cmp	r3, #3
 8007be2:	d127      	bne.n	8007c34 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	015a      	lsls	r2, r3, #5
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	4413      	add	r3, r2
 8007bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	0151      	lsls	r1, r2, #5
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	440a      	add	r2, r1
 8007bfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bfe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c02:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	212c      	movs	r1, #44	; 0x2c
 8007c0a:	fb01 f303 	mul.w	r3, r1, r3
 8007c0e:	4413      	add	r3, r2
 8007c10:	3360      	adds	r3, #96	; 0x60
 8007c12:	2201      	movs	r2, #1
 8007c14:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	b2d9      	uxtb	r1, r3
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	202c      	movs	r0, #44	; 0x2c
 8007c20:	fb00 f303 	mul.w	r3, r0, r3
 8007c24:	4413      	add	r3, r2
 8007c26:	3360      	adds	r3, #96	; 0x60
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f008 fc73 	bl	8010518 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007c32:	e034      	b.n	8007c9e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	212c      	movs	r1, #44	; 0x2c
 8007c3a:	fb01 f303 	mul.w	r3, r1, r3
 8007c3e:	4413      	add	r3, r2
 8007c40:	333f      	adds	r3, #63	; 0x3f
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d12a      	bne.n	8007c9e <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	212c      	movs	r1, #44	; 0x2c
 8007c4e:	fb01 f303 	mul.w	r3, r1, r3
 8007c52:	4413      	add	r3, r2
 8007c54:	3360      	adds	r3, #96	; 0x60
 8007c56:	2201      	movs	r2, #1
 8007c58:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	212c      	movs	r1, #44	; 0x2c
 8007c60:	fb01 f303 	mul.w	r3, r1, r3
 8007c64:	4413      	add	r3, r2
 8007c66:	3354      	adds	r3, #84	; 0x54
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	f083 0301 	eor.w	r3, r3, #1
 8007c6e:	b2d8      	uxtb	r0, r3
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	212c      	movs	r1, #44	; 0x2c
 8007c76:	fb01 f303 	mul.w	r3, r1, r3
 8007c7a:	4413      	add	r3, r2
 8007c7c:	3354      	adds	r3, #84	; 0x54
 8007c7e:	4602      	mov	r2, r0
 8007c80:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	b2d9      	uxtb	r1, r3
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	202c      	movs	r0, #44	; 0x2c
 8007c8c:	fb00 f303 	mul.w	r3, r0, r3
 8007c90:	4413      	add	r3, r2
 8007c92:	3360      	adds	r3, #96	; 0x60
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	461a      	mov	r2, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f008 fc3d 	bl	8010518 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d12b      	bne.n	8007cfe <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	212c      	movs	r1, #44	; 0x2c
 8007cac:	fb01 f303 	mul.w	r3, r1, r3
 8007cb0:	4413      	add	r3, r2
 8007cb2:	3348      	adds	r3, #72	; 0x48
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6879      	ldr	r1, [r7, #4]
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	202c      	movs	r0, #44	; 0x2c
 8007cbc:	fb00 f202 	mul.w	r2, r0, r2
 8007cc0:	440a      	add	r2, r1
 8007cc2:	3240      	adds	r2, #64	; 0x40
 8007cc4:	8812      	ldrh	r2, [r2, #0]
 8007cc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f000 81be 	beq.w	8008050 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	212c      	movs	r1, #44	; 0x2c
 8007cda:	fb01 f303 	mul.w	r3, r1, r3
 8007cde:	4413      	add	r3, r2
 8007ce0:	3354      	adds	r3, #84	; 0x54
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	f083 0301 	eor.w	r3, r3, #1
 8007ce8:	b2d8      	uxtb	r0, r3
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	212c      	movs	r1, #44	; 0x2c
 8007cf0:	fb01 f303 	mul.w	r3, r1, r3
 8007cf4:	4413      	add	r3, r2
 8007cf6:	3354      	adds	r3, #84	; 0x54
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	701a      	strb	r2, [r3, #0]
}
 8007cfc:	e1a8      	b.n	8008050 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	212c      	movs	r1, #44	; 0x2c
 8007d04:	fb01 f303 	mul.w	r3, r1, r3
 8007d08:	4413      	add	r3, r2
 8007d0a:	3354      	adds	r3, #84	; 0x54
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	f083 0301 	eor.w	r3, r3, #1
 8007d12:	b2d8      	uxtb	r0, r3
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	212c      	movs	r1, #44	; 0x2c
 8007d1a:	fb01 f303 	mul.w	r3, r1, r3
 8007d1e:	4413      	add	r3, r2
 8007d20:	3354      	adds	r3, #84	; 0x54
 8007d22:	4602      	mov	r2, r0
 8007d24:	701a      	strb	r2, [r3, #0]
}
 8007d26:	e193      	b.n	8008050 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	015a      	lsls	r2, r3, #5
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	4413      	add	r3, r2
 8007d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f003 0302 	and.w	r3, r3, #2
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	f040 8106 	bne.w	8007f4c <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	015a      	lsls	r2, r3, #5
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	0151      	lsls	r1, r2, #5
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	440a      	add	r2, r1
 8007d56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d5a:	f023 0302 	bic.w	r3, r3, #2
 8007d5e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	212c      	movs	r1, #44	; 0x2c
 8007d66:	fb01 f303 	mul.w	r3, r1, r3
 8007d6a:	4413      	add	r3, r2
 8007d6c:	3361      	adds	r3, #97	; 0x61
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d109      	bne.n	8007d88 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	212c      	movs	r1, #44	; 0x2c
 8007d7a:	fb01 f303 	mul.w	r3, r1, r3
 8007d7e:	4413      	add	r3, r2
 8007d80:	3360      	adds	r3, #96	; 0x60
 8007d82:	2201      	movs	r2, #1
 8007d84:	701a      	strb	r2, [r3, #0]
 8007d86:	e0c9      	b.n	8007f1c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	212c      	movs	r1, #44	; 0x2c
 8007d8e:	fb01 f303 	mul.w	r3, r1, r3
 8007d92:	4413      	add	r3, r2
 8007d94:	3361      	adds	r3, #97	; 0x61
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	2b05      	cmp	r3, #5
 8007d9a:	d109      	bne.n	8007db0 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	212c      	movs	r1, #44	; 0x2c
 8007da2:	fb01 f303 	mul.w	r3, r1, r3
 8007da6:	4413      	add	r3, r2
 8007da8:	3360      	adds	r3, #96	; 0x60
 8007daa:	2205      	movs	r2, #5
 8007dac:	701a      	strb	r2, [r3, #0]
 8007dae:	e0b5      	b.n	8007f1c <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	212c      	movs	r1, #44	; 0x2c
 8007db6:	fb01 f303 	mul.w	r3, r1, r3
 8007dba:	4413      	add	r3, r2
 8007dbc:	3361      	adds	r3, #97	; 0x61
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	2b06      	cmp	r3, #6
 8007dc2:	d009      	beq.n	8007dd8 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	212c      	movs	r1, #44	; 0x2c
 8007dca:	fb01 f303 	mul.w	r3, r1, r3
 8007dce:	4413      	add	r3, r2
 8007dd0:	3361      	adds	r3, #97	; 0x61
 8007dd2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007dd4:	2b08      	cmp	r3, #8
 8007dd6:	d150      	bne.n	8007e7a <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	212c      	movs	r1, #44	; 0x2c
 8007dde:	fb01 f303 	mul.w	r3, r1, r3
 8007de2:	4413      	add	r3, r2
 8007de4:	335c      	adds	r3, #92	; 0x5c
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	1c5a      	adds	r2, r3, #1
 8007dea:	6879      	ldr	r1, [r7, #4]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	202c      	movs	r0, #44	; 0x2c
 8007df0:	fb00 f303 	mul.w	r3, r0, r3
 8007df4:	440b      	add	r3, r1
 8007df6:	335c      	adds	r3, #92	; 0x5c
 8007df8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	212c      	movs	r1, #44	; 0x2c
 8007e00:	fb01 f303 	mul.w	r3, r1, r3
 8007e04:	4413      	add	r3, r2
 8007e06:	335c      	adds	r3, #92	; 0x5c
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d912      	bls.n	8007e34 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	212c      	movs	r1, #44	; 0x2c
 8007e14:	fb01 f303 	mul.w	r3, r1, r3
 8007e18:	4413      	add	r3, r2
 8007e1a:	335c      	adds	r3, #92	; 0x5c
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	212c      	movs	r1, #44	; 0x2c
 8007e26:	fb01 f303 	mul.w	r3, r1, r3
 8007e2a:	4413      	add	r3, r2
 8007e2c:	3360      	adds	r3, #96	; 0x60
 8007e2e:	2204      	movs	r2, #4
 8007e30:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007e32:	e073      	b.n	8007f1c <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	212c      	movs	r1, #44	; 0x2c
 8007e3a:	fb01 f303 	mul.w	r3, r1, r3
 8007e3e:	4413      	add	r3, r2
 8007e40:	3360      	adds	r3, #96	; 0x60
 8007e42:	2202      	movs	r2, #2
 8007e44:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	015a      	lsls	r2, r3, #5
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e5c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e64:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	015a      	lsls	r2, r3, #5
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e72:	461a      	mov	r2, r3
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007e78:	e050      	b.n	8007f1c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	212c      	movs	r1, #44	; 0x2c
 8007e80:	fb01 f303 	mul.w	r3, r1, r3
 8007e84:	4413      	add	r3, r2
 8007e86:	3361      	adds	r3, #97	; 0x61
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	2b03      	cmp	r3, #3
 8007e8c:	d122      	bne.n	8007ed4 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	212c      	movs	r1, #44	; 0x2c
 8007e94:	fb01 f303 	mul.w	r3, r1, r3
 8007e98:	4413      	add	r3, r2
 8007e9a:	3360      	adds	r3, #96	; 0x60
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	015a      	lsls	r2, r3, #5
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007eb6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ebe:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ecc:	461a      	mov	r2, r3
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	6013      	str	r3, [r2, #0]
 8007ed2:	e023      	b.n	8007f1c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	212c      	movs	r1, #44	; 0x2c
 8007eda:	fb01 f303 	mul.w	r3, r1, r3
 8007ede:	4413      	add	r3, r2
 8007ee0:	3361      	adds	r3, #97	; 0x61
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	2b07      	cmp	r3, #7
 8007ee6:	d119      	bne.n	8007f1c <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	212c      	movs	r1, #44	; 0x2c
 8007eee:	fb01 f303 	mul.w	r3, r1, r3
 8007ef2:	4413      	add	r3, r2
 8007ef4:	335c      	adds	r3, #92	; 0x5c
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	6879      	ldr	r1, [r7, #4]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	202c      	movs	r0, #44	; 0x2c
 8007f00:	fb00 f303 	mul.w	r3, r0, r3
 8007f04:	440b      	add	r3, r1
 8007f06:	335c      	adds	r3, #92	; 0x5c
 8007f08:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	212c      	movs	r1, #44	; 0x2c
 8007f10:	fb01 f303 	mul.w	r3, r1, r3
 8007f14:	4413      	add	r3, r2
 8007f16:	3360      	adds	r3, #96	; 0x60
 8007f18:	2204      	movs	r2, #4
 8007f1a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	015a      	lsls	r2, r3, #5
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	4413      	add	r3, r2
 8007f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f28:	461a      	mov	r2, r3
 8007f2a:	2302      	movs	r3, #2
 8007f2c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	b2d9      	uxtb	r1, r3
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	202c      	movs	r0, #44	; 0x2c
 8007f38:	fb00 f303 	mul.w	r3, r0, r3
 8007f3c:	4413      	add	r3, r2
 8007f3e:	3360      	adds	r3, #96	; 0x60
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	461a      	mov	r2, r3
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f008 fae7 	bl	8010518 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8007f4a:	e081      	b.n	8008050 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	015a      	lsls	r2, r3, #5
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	4413      	add	r3, r2
 8007f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	f003 0310 	and.w	r3, r3, #16
 8007f5e:	2b10      	cmp	r3, #16
 8007f60:	d176      	bne.n	8008050 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	212c      	movs	r1, #44	; 0x2c
 8007f68:	fb01 f303 	mul.w	r3, r1, r3
 8007f6c:	4413      	add	r3, r2
 8007f6e:	333f      	adds	r3, #63	; 0x3f
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	2b03      	cmp	r3, #3
 8007f74:	d121      	bne.n	8007fba <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	212c      	movs	r1, #44	; 0x2c
 8007f7c:	fb01 f303 	mul.w	r3, r1, r3
 8007f80:	4413      	add	r3, r2
 8007f82:	335c      	adds	r3, #92	; 0x5c
 8007f84:	2200      	movs	r2, #0
 8007f86:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	015a      	lsls	r2, r3, #5
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	4413      	add	r3, r2
 8007f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	0151      	lsls	r1, r2, #5
 8007f9a:	693a      	ldr	r2, [r7, #16]
 8007f9c:	440a      	add	r2, r1
 8007f9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fa2:	f043 0302 	orr.w	r3, r3, #2
 8007fa6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68fa      	ldr	r2, [r7, #12]
 8007fae:	b2d2      	uxtb	r2, r2
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f006 f8f3 	bl	800e19e <USB_HC_Halt>
 8007fb8:	e041      	b.n	800803e <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	212c      	movs	r1, #44	; 0x2c
 8007fc0:	fb01 f303 	mul.w	r3, r1, r3
 8007fc4:	4413      	add	r3, r2
 8007fc6:	333f      	adds	r3, #63	; 0x3f
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d009      	beq.n	8007fe2 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	212c      	movs	r1, #44	; 0x2c
 8007fd4:	fb01 f303 	mul.w	r3, r1, r3
 8007fd8:	4413      	add	r3, r2
 8007fda:	333f      	adds	r3, #63	; 0x3f
 8007fdc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d12d      	bne.n	800803e <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	212c      	movs	r1, #44	; 0x2c
 8007fe8:	fb01 f303 	mul.w	r3, r1, r3
 8007fec:	4413      	add	r3, r2
 8007fee:	335c      	adds	r3, #92	; 0x5c
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d120      	bne.n	800803e <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	212c      	movs	r1, #44	; 0x2c
 8008002:	fb01 f303 	mul.w	r3, r1, r3
 8008006:	4413      	add	r3, r2
 8008008:	3361      	adds	r3, #97	; 0x61
 800800a:	2203      	movs	r2, #3
 800800c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	015a      	lsls	r2, r3, #5
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	4413      	add	r3, r2
 8008016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	0151      	lsls	r1, r2, #5
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	440a      	add	r2, r1
 8008024:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008028:	f043 0302 	orr.w	r3, r3, #2
 800802c:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	b2d2      	uxtb	r2, r2
 8008036:	4611      	mov	r1, r2
 8008038:	4618      	mov	r0, r3
 800803a:	f006 f8b0 	bl	800e19e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	015a      	lsls	r2, r3, #5
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	4413      	add	r3, r2
 8008046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800804a:	461a      	mov	r2, r3
 800804c:	2310      	movs	r3, #16
 800804e:	6093      	str	r3, [r2, #8]
}
 8008050:	bf00      	nop
 8008052:	3718      	adds	r7, #24
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b088      	sub	sp, #32
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	460b      	mov	r3, r1
 8008062:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800806e:	78fb      	ldrb	r3, [r7, #3]
 8008070:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	015a      	lsls	r2, r3, #5
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	4413      	add	r3, r2
 800807a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	f003 0304 	and.w	r3, r3, #4
 8008084:	2b04      	cmp	r3, #4
 8008086:	d119      	bne.n	80080bc <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	015a      	lsls	r2, r3, #5
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	4413      	add	r3, r2
 8008090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008094:	461a      	mov	r2, r3
 8008096:	2304      	movs	r3, #4
 8008098:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	015a      	lsls	r2, r3, #5
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	4413      	add	r3, r2
 80080a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	697a      	ldr	r2, [r7, #20]
 80080aa:	0151      	lsls	r1, r2, #5
 80080ac:	69ba      	ldr	r2, [r7, #24]
 80080ae:	440a      	add	r2, r1
 80080b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080b4:	f043 0302 	orr.w	r3, r3, #2
 80080b8:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80080ba:	e3c6      	b.n	800884a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	015a      	lsls	r2, r3, #5
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	f003 0320 	and.w	r3, r3, #32
 80080ce:	2b20      	cmp	r3, #32
 80080d0:	d13e      	bne.n	8008150 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	015a      	lsls	r2, r3, #5
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	4413      	add	r3, r2
 80080da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080de:	461a      	mov	r2, r3
 80080e0:	2320      	movs	r3, #32
 80080e2:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	212c      	movs	r1, #44	; 0x2c
 80080ea:	fb01 f303 	mul.w	r3, r1, r3
 80080ee:	4413      	add	r3, r2
 80080f0:	333d      	adds	r3, #61	; 0x3d
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	f040 83a8 	bne.w	800884a <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	212c      	movs	r1, #44	; 0x2c
 8008100:	fb01 f303 	mul.w	r3, r1, r3
 8008104:	4413      	add	r3, r2
 8008106:	333d      	adds	r3, #61	; 0x3d
 8008108:	2200      	movs	r2, #0
 800810a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	212c      	movs	r1, #44	; 0x2c
 8008112:	fb01 f303 	mul.w	r3, r1, r3
 8008116:	4413      	add	r3, r2
 8008118:	3360      	adds	r3, #96	; 0x60
 800811a:	2202      	movs	r2, #2
 800811c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	015a      	lsls	r2, r3, #5
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	4413      	add	r3, r2
 8008126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	697a      	ldr	r2, [r7, #20]
 800812e:	0151      	lsls	r1, r2, #5
 8008130:	69ba      	ldr	r2, [r7, #24]
 8008132:	440a      	add	r2, r1
 8008134:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008138:	f043 0302 	orr.w	r3, r3, #2
 800813c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	697a      	ldr	r2, [r7, #20]
 8008144:	b2d2      	uxtb	r2, r2
 8008146:	4611      	mov	r1, r2
 8008148:	4618      	mov	r0, r3
 800814a:	f006 f828 	bl	800e19e <USB_HC_Halt>
}
 800814e:	e37c      	b.n	800884a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	015a      	lsls	r2, r3, #5
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	4413      	add	r3, r2
 8008158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008166:	d122      	bne.n	80081ae <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	4413      	add	r3, r2
 8008170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	0151      	lsls	r1, r2, #5
 800817a:	69ba      	ldr	r2, [r7, #24]
 800817c:	440a      	add	r2, r1
 800817e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008182:	f043 0302 	orr.w	r3, r3, #2
 8008186:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	b2d2      	uxtb	r2, r2
 8008190:	4611      	mov	r1, r2
 8008192:	4618      	mov	r0, r3
 8008194:	f006 f803 	bl	800e19e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081a4:	461a      	mov	r2, r3
 80081a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081aa:	6093      	str	r3, [r2, #8]
}
 80081ac:	e34d      	b.n	800884a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	015a      	lsls	r2, r3, #5
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	4413      	add	r3, r2
 80081b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	f003 0301 	and.w	r3, r3, #1
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d150      	bne.n	8008266 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	212c      	movs	r1, #44	; 0x2c
 80081ca:	fb01 f303 	mul.w	r3, r1, r3
 80081ce:	4413      	add	r3, r2
 80081d0:	335c      	adds	r3, #92	; 0x5c
 80081d2:	2200      	movs	r2, #0
 80081d4:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	015a      	lsls	r2, r3, #5
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	4413      	add	r3, r2
 80081de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e8:	2b40      	cmp	r3, #64	; 0x40
 80081ea:	d111      	bne.n	8008210 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	212c      	movs	r1, #44	; 0x2c
 80081f2:	fb01 f303 	mul.w	r3, r1, r3
 80081f6:	4413      	add	r3, r2
 80081f8:	333d      	adds	r3, #61	; 0x3d
 80081fa:	2201      	movs	r2, #1
 80081fc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	015a      	lsls	r2, r3, #5
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	4413      	add	r3, r2
 8008206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800820a:	461a      	mov	r2, r3
 800820c:	2340      	movs	r3, #64	; 0x40
 800820e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	015a      	lsls	r2, r3, #5
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	4413      	add	r3, r2
 8008218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	697a      	ldr	r2, [r7, #20]
 8008220:	0151      	lsls	r1, r2, #5
 8008222:	69ba      	ldr	r2, [r7, #24]
 8008224:	440a      	add	r2, r1
 8008226:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800822a:	f043 0302 	orr.w	r3, r3, #2
 800822e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	b2d2      	uxtb	r2, r2
 8008238:	4611      	mov	r1, r2
 800823a:	4618      	mov	r0, r3
 800823c:	f005 ffaf 	bl	800e19e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	015a      	lsls	r2, r3, #5
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	4413      	add	r3, r2
 8008248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800824c:	461a      	mov	r2, r3
 800824e:	2301      	movs	r3, #1
 8008250:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	212c      	movs	r1, #44	; 0x2c
 8008258:	fb01 f303 	mul.w	r3, r1, r3
 800825c:	4413      	add	r3, r2
 800825e:	3361      	adds	r3, #97	; 0x61
 8008260:	2201      	movs	r2, #1
 8008262:	701a      	strb	r2, [r3, #0]
}
 8008264:	e2f1      	b.n	800884a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	015a      	lsls	r2, r3, #5
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	4413      	add	r3, r2
 800826e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008278:	2b40      	cmp	r3, #64	; 0x40
 800827a:	d13c      	bne.n	80082f6 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	212c      	movs	r1, #44	; 0x2c
 8008282:	fb01 f303 	mul.w	r3, r1, r3
 8008286:	4413      	add	r3, r2
 8008288:	3361      	adds	r3, #97	; 0x61
 800828a:	2204      	movs	r2, #4
 800828c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	212c      	movs	r1, #44	; 0x2c
 8008294:	fb01 f303 	mul.w	r3, r1, r3
 8008298:	4413      	add	r3, r2
 800829a:	333d      	adds	r3, #61	; 0x3d
 800829c:	2201      	movs	r2, #1
 800829e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	212c      	movs	r1, #44	; 0x2c
 80082a6:	fb01 f303 	mul.w	r3, r1, r3
 80082aa:	4413      	add	r3, r2
 80082ac:	335c      	adds	r3, #92	; 0x5c
 80082ae:	2200      	movs	r2, #0
 80082b0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	015a      	lsls	r2, r3, #5
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	4413      	add	r3, r2
 80082ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	697a      	ldr	r2, [r7, #20]
 80082c2:	0151      	lsls	r1, r2, #5
 80082c4:	69ba      	ldr	r2, [r7, #24]
 80082c6:	440a      	add	r2, r1
 80082c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082cc:	f043 0302 	orr.w	r3, r3, #2
 80082d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	697a      	ldr	r2, [r7, #20]
 80082d8:	b2d2      	uxtb	r2, r2
 80082da:	4611      	mov	r1, r2
 80082dc:	4618      	mov	r0, r3
 80082de:	f005 ff5e 	bl	800e19e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	015a      	lsls	r2, r3, #5
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	4413      	add	r3, r2
 80082ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ee:	461a      	mov	r2, r3
 80082f0:	2340      	movs	r3, #64	; 0x40
 80082f2:	6093      	str	r3, [r2, #8]
}
 80082f4:	e2a9      	b.n	800884a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	015a      	lsls	r2, r3, #5
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	4413      	add	r3, r2
 80082fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	f003 0308 	and.w	r3, r3, #8
 8008308:	2b08      	cmp	r3, #8
 800830a:	d12a      	bne.n	8008362 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	015a      	lsls	r2, r3, #5
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	4413      	add	r3, r2
 8008314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008318:	461a      	mov	r2, r3
 800831a:	2308      	movs	r3, #8
 800831c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	015a      	lsls	r2, r3, #5
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	4413      	add	r3, r2
 8008326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	697a      	ldr	r2, [r7, #20]
 800832e:	0151      	lsls	r1, r2, #5
 8008330:	69ba      	ldr	r2, [r7, #24]
 8008332:	440a      	add	r2, r1
 8008334:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008338:	f043 0302 	orr.w	r3, r3, #2
 800833c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	b2d2      	uxtb	r2, r2
 8008346:	4611      	mov	r1, r2
 8008348:	4618      	mov	r0, r3
 800834a:	f005 ff28 	bl	800e19e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	212c      	movs	r1, #44	; 0x2c
 8008354:	fb01 f303 	mul.w	r3, r1, r3
 8008358:	4413      	add	r3, r2
 800835a:	3361      	adds	r3, #97	; 0x61
 800835c:	2205      	movs	r2, #5
 800835e:	701a      	strb	r2, [r3, #0]
}
 8008360:	e273      	b.n	800884a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	015a      	lsls	r2, r3, #5
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	4413      	add	r3, r2
 800836a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	f003 0310 	and.w	r3, r3, #16
 8008374:	2b10      	cmp	r3, #16
 8008376:	d150      	bne.n	800841a <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	212c      	movs	r1, #44	; 0x2c
 800837e:	fb01 f303 	mul.w	r3, r1, r3
 8008382:	4413      	add	r3, r2
 8008384:	335c      	adds	r3, #92	; 0x5c
 8008386:	2200      	movs	r2, #0
 8008388:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	212c      	movs	r1, #44	; 0x2c
 8008390:	fb01 f303 	mul.w	r3, r1, r3
 8008394:	4413      	add	r3, r2
 8008396:	3361      	adds	r3, #97	; 0x61
 8008398:	2203      	movs	r2, #3
 800839a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	212c      	movs	r1, #44	; 0x2c
 80083a2:	fb01 f303 	mul.w	r3, r1, r3
 80083a6:	4413      	add	r3, r2
 80083a8:	333d      	adds	r3, #61	; 0x3d
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d112      	bne.n	80083d6 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	212c      	movs	r1, #44	; 0x2c
 80083b6:	fb01 f303 	mul.w	r3, r1, r3
 80083ba:	4413      	add	r3, r2
 80083bc:	333c      	adds	r3, #60	; 0x3c
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d108      	bne.n	80083d6 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	212c      	movs	r1, #44	; 0x2c
 80083ca:	fb01 f303 	mul.w	r3, r1, r3
 80083ce:	4413      	add	r3, r2
 80083d0:	333d      	adds	r3, #61	; 0x3d
 80083d2:	2201      	movs	r2, #1
 80083d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	015a      	lsls	r2, r3, #5
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	4413      	add	r3, r2
 80083de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	697a      	ldr	r2, [r7, #20]
 80083e6:	0151      	lsls	r1, r2, #5
 80083e8:	69ba      	ldr	r2, [r7, #24]
 80083ea:	440a      	add	r2, r1
 80083ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083f0:	f043 0302 	orr.w	r3, r3, #2
 80083f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	697a      	ldr	r2, [r7, #20]
 80083fc:	b2d2      	uxtb	r2, r2
 80083fe:	4611      	mov	r1, r2
 8008400:	4618      	mov	r0, r3
 8008402:	f005 fecc 	bl	800e19e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	4413      	add	r3, r2
 800840e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008412:	461a      	mov	r2, r3
 8008414:	2310      	movs	r3, #16
 8008416:	6093      	str	r3, [r2, #8]
}
 8008418:	e217      	b.n	800884a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	015a      	lsls	r2, r3, #5
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	4413      	add	r3, r2
 8008422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800842c:	2b80      	cmp	r3, #128	; 0x80
 800842e:	d174      	bne.n	800851a <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d121      	bne.n	800847c <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	212c      	movs	r1, #44	; 0x2c
 800843e:	fb01 f303 	mul.w	r3, r1, r3
 8008442:	4413      	add	r3, r2
 8008444:	3361      	adds	r3, #97	; 0x61
 8008446:	2206      	movs	r2, #6
 8008448:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	015a      	lsls	r2, r3, #5
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	4413      	add	r3, r2
 8008452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	0151      	lsls	r1, r2, #5
 800845c:	69ba      	ldr	r2, [r7, #24]
 800845e:	440a      	add	r2, r1
 8008460:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008464:	f043 0302 	orr.w	r3, r3, #2
 8008468:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	b2d2      	uxtb	r2, r2
 8008472:	4611      	mov	r1, r2
 8008474:	4618      	mov	r0, r3
 8008476:	f005 fe92 	bl	800e19e <USB_HC_Halt>
 800847a:	e044      	b.n	8008506 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	212c      	movs	r1, #44	; 0x2c
 8008482:	fb01 f303 	mul.w	r3, r1, r3
 8008486:	4413      	add	r3, r2
 8008488:	335c      	adds	r3, #92	; 0x5c
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	1c5a      	adds	r2, r3, #1
 800848e:	6879      	ldr	r1, [r7, #4]
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	202c      	movs	r0, #44	; 0x2c
 8008494:	fb00 f303 	mul.w	r3, r0, r3
 8008498:	440b      	add	r3, r1
 800849a:	335c      	adds	r3, #92	; 0x5c
 800849c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	212c      	movs	r1, #44	; 0x2c
 80084a4:	fb01 f303 	mul.w	r3, r1, r3
 80084a8:	4413      	add	r3, r2
 80084aa:	335c      	adds	r3, #92	; 0x5c
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	d920      	bls.n	80084f4 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	212c      	movs	r1, #44	; 0x2c
 80084b8:	fb01 f303 	mul.w	r3, r1, r3
 80084bc:	4413      	add	r3, r2
 80084be:	335c      	adds	r3, #92	; 0x5c
 80084c0:	2200      	movs	r2, #0
 80084c2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	212c      	movs	r1, #44	; 0x2c
 80084ca:	fb01 f303 	mul.w	r3, r1, r3
 80084ce:	4413      	add	r3, r2
 80084d0:	3360      	adds	r3, #96	; 0x60
 80084d2:	2204      	movs	r2, #4
 80084d4:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	b2d9      	uxtb	r1, r3
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	202c      	movs	r0, #44	; 0x2c
 80084e0:	fb00 f303 	mul.w	r3, r0, r3
 80084e4:	4413      	add	r3, r2
 80084e6:	3360      	adds	r3, #96	; 0x60
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	461a      	mov	r2, r3
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f008 f813 	bl	8010518 <HAL_HCD_HC_NotifyURBChange_Callback>
 80084f2:	e008      	b.n	8008506 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	212c      	movs	r1, #44	; 0x2c
 80084fa:	fb01 f303 	mul.w	r3, r1, r3
 80084fe:	4413      	add	r3, r2
 8008500:	3360      	adds	r3, #96	; 0x60
 8008502:	2202      	movs	r2, #2
 8008504:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	4413      	add	r3, r2
 800850e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008512:	461a      	mov	r2, r3
 8008514:	2380      	movs	r3, #128	; 0x80
 8008516:	6093      	str	r3, [r2, #8]
}
 8008518:	e197      	b.n	800884a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	015a      	lsls	r2, r3, #5
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	4413      	add	r3, r2
 8008522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800852c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008530:	d134      	bne.n	800859c <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	015a      	lsls	r2, r3, #5
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	4413      	add	r3, r2
 800853a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	0151      	lsls	r1, r2, #5
 8008544:	69ba      	ldr	r2, [r7, #24]
 8008546:	440a      	add	r2, r1
 8008548:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800854c:	f043 0302 	orr.w	r3, r3, #2
 8008550:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	b2d2      	uxtb	r2, r2
 800855a:	4611      	mov	r1, r2
 800855c:	4618      	mov	r0, r3
 800855e:	f005 fe1e 	bl	800e19e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	015a      	lsls	r2, r3, #5
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	4413      	add	r3, r2
 800856a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800856e:	461a      	mov	r2, r3
 8008570:	2310      	movs	r3, #16
 8008572:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	015a      	lsls	r2, r3, #5
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	4413      	add	r3, r2
 800857c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008580:	461a      	mov	r2, r3
 8008582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008586:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	212c      	movs	r1, #44	; 0x2c
 800858e:	fb01 f303 	mul.w	r3, r1, r3
 8008592:	4413      	add	r3, r2
 8008594:	3361      	adds	r3, #97	; 0x61
 8008596:	2208      	movs	r2, #8
 8008598:	701a      	strb	r2, [r3, #0]
}
 800859a:	e156      	b.n	800884a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	015a      	lsls	r2, r3, #5
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	4413      	add	r3, r2
 80085a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	f003 0302 	and.w	r3, r3, #2
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	f040 814b 	bne.w	800884a <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	015a      	lsls	r2, r3, #5
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	697a      	ldr	r2, [r7, #20]
 80085c4:	0151      	lsls	r1, r2, #5
 80085c6:	69ba      	ldr	r2, [r7, #24]
 80085c8:	440a      	add	r2, r1
 80085ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085ce:	f023 0302 	bic.w	r3, r3, #2
 80085d2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	212c      	movs	r1, #44	; 0x2c
 80085da:	fb01 f303 	mul.w	r3, r1, r3
 80085de:	4413      	add	r3, r2
 80085e0:	3361      	adds	r3, #97	; 0x61
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d179      	bne.n	80086dc <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	212c      	movs	r1, #44	; 0x2c
 80085ee:	fb01 f303 	mul.w	r3, r1, r3
 80085f2:	4413      	add	r3, r2
 80085f4:	3360      	adds	r3, #96	; 0x60
 80085f6:	2201      	movs	r2, #1
 80085f8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	212c      	movs	r1, #44	; 0x2c
 8008600:	fb01 f303 	mul.w	r3, r1, r3
 8008604:	4413      	add	r3, r2
 8008606:	333f      	adds	r3, #63	; 0x3f
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	2b02      	cmp	r3, #2
 800860c:	d00a      	beq.n	8008624 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	212c      	movs	r1, #44	; 0x2c
 8008614:	fb01 f303 	mul.w	r3, r1, r3
 8008618:	4413      	add	r3, r2
 800861a:	333f      	adds	r3, #63	; 0x3f
 800861c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800861e:	2b03      	cmp	r3, #3
 8008620:	f040 80fc 	bne.w	800881c <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d142      	bne.n	80086b2 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	212c      	movs	r1, #44	; 0x2c
 8008632:	fb01 f303 	mul.w	r3, r1, r3
 8008636:	4413      	add	r3, r2
 8008638:	334c      	adds	r3, #76	; 0x4c
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	f000 80ed 	beq.w	800881c <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	212c      	movs	r1, #44	; 0x2c
 8008648:	fb01 f303 	mul.w	r3, r1, r3
 800864c:	4413      	add	r3, r2
 800864e:	334c      	adds	r3, #76	; 0x4c
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	6879      	ldr	r1, [r7, #4]
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	202c      	movs	r0, #44	; 0x2c
 8008658:	fb00 f202 	mul.w	r2, r0, r2
 800865c:	440a      	add	r2, r1
 800865e:	3240      	adds	r2, #64	; 0x40
 8008660:	8812      	ldrh	r2, [r2, #0]
 8008662:	4413      	add	r3, r2
 8008664:	3b01      	subs	r3, #1
 8008666:	6879      	ldr	r1, [r7, #4]
 8008668:	697a      	ldr	r2, [r7, #20]
 800866a:	202c      	movs	r0, #44	; 0x2c
 800866c:	fb00 f202 	mul.w	r2, r0, r2
 8008670:	440a      	add	r2, r1
 8008672:	3240      	adds	r2, #64	; 0x40
 8008674:	8812      	ldrh	r2, [r2, #0]
 8008676:	fbb3 f3f2 	udiv	r3, r3, r2
 800867a:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f003 0301 	and.w	r3, r3, #1
 8008682:	2b00      	cmp	r3, #0
 8008684:	f000 80ca 	beq.w	800881c <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	212c      	movs	r1, #44	; 0x2c
 800868e:	fb01 f303 	mul.w	r3, r1, r3
 8008692:	4413      	add	r3, r2
 8008694:	3355      	adds	r3, #85	; 0x55
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	f083 0301 	eor.w	r3, r3, #1
 800869c:	b2d8      	uxtb	r0, r3
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	212c      	movs	r1, #44	; 0x2c
 80086a4:	fb01 f303 	mul.w	r3, r1, r3
 80086a8:	4413      	add	r3, r2
 80086aa:	3355      	adds	r3, #85	; 0x55
 80086ac:	4602      	mov	r2, r0
 80086ae:	701a      	strb	r2, [r3, #0]
 80086b0:	e0b4      	b.n	800881c <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	212c      	movs	r1, #44	; 0x2c
 80086b8:	fb01 f303 	mul.w	r3, r1, r3
 80086bc:	4413      	add	r3, r2
 80086be:	3355      	adds	r3, #85	; 0x55
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	f083 0301 	eor.w	r3, r3, #1
 80086c6:	b2d8      	uxtb	r0, r3
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	212c      	movs	r1, #44	; 0x2c
 80086ce:	fb01 f303 	mul.w	r3, r1, r3
 80086d2:	4413      	add	r3, r2
 80086d4:	3355      	adds	r3, #85	; 0x55
 80086d6:	4602      	mov	r2, r0
 80086d8:	701a      	strb	r2, [r3, #0]
 80086da:	e09f      	b.n	800881c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	212c      	movs	r1, #44	; 0x2c
 80086e2:	fb01 f303 	mul.w	r3, r1, r3
 80086e6:	4413      	add	r3, r2
 80086e8:	3361      	adds	r3, #97	; 0x61
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	2b03      	cmp	r3, #3
 80086ee:	d109      	bne.n	8008704 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	212c      	movs	r1, #44	; 0x2c
 80086f6:	fb01 f303 	mul.w	r3, r1, r3
 80086fa:	4413      	add	r3, r2
 80086fc:	3360      	adds	r3, #96	; 0x60
 80086fe:	2202      	movs	r2, #2
 8008700:	701a      	strb	r2, [r3, #0]
 8008702:	e08b      	b.n	800881c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	212c      	movs	r1, #44	; 0x2c
 800870a:	fb01 f303 	mul.w	r3, r1, r3
 800870e:	4413      	add	r3, r2
 8008710:	3361      	adds	r3, #97	; 0x61
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	2b04      	cmp	r3, #4
 8008716:	d109      	bne.n	800872c <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	212c      	movs	r1, #44	; 0x2c
 800871e:	fb01 f303 	mul.w	r3, r1, r3
 8008722:	4413      	add	r3, r2
 8008724:	3360      	adds	r3, #96	; 0x60
 8008726:	2202      	movs	r2, #2
 8008728:	701a      	strb	r2, [r3, #0]
 800872a:	e077      	b.n	800881c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	212c      	movs	r1, #44	; 0x2c
 8008732:	fb01 f303 	mul.w	r3, r1, r3
 8008736:	4413      	add	r3, r2
 8008738:	3361      	adds	r3, #97	; 0x61
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	2b05      	cmp	r3, #5
 800873e:	d109      	bne.n	8008754 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	212c      	movs	r1, #44	; 0x2c
 8008746:	fb01 f303 	mul.w	r3, r1, r3
 800874a:	4413      	add	r3, r2
 800874c:	3360      	adds	r3, #96	; 0x60
 800874e:	2205      	movs	r2, #5
 8008750:	701a      	strb	r2, [r3, #0]
 8008752:	e063      	b.n	800881c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	212c      	movs	r1, #44	; 0x2c
 800875a:	fb01 f303 	mul.w	r3, r1, r3
 800875e:	4413      	add	r3, r2
 8008760:	3361      	adds	r3, #97	; 0x61
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	2b06      	cmp	r3, #6
 8008766:	d009      	beq.n	800877c <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	212c      	movs	r1, #44	; 0x2c
 800876e:	fb01 f303 	mul.w	r3, r1, r3
 8008772:	4413      	add	r3, r2
 8008774:	3361      	adds	r3, #97	; 0x61
 8008776:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008778:	2b08      	cmp	r3, #8
 800877a:	d14f      	bne.n	800881c <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	212c      	movs	r1, #44	; 0x2c
 8008782:	fb01 f303 	mul.w	r3, r1, r3
 8008786:	4413      	add	r3, r2
 8008788:	335c      	adds	r3, #92	; 0x5c
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	1c5a      	adds	r2, r3, #1
 800878e:	6879      	ldr	r1, [r7, #4]
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	202c      	movs	r0, #44	; 0x2c
 8008794:	fb00 f303 	mul.w	r3, r0, r3
 8008798:	440b      	add	r3, r1
 800879a:	335c      	adds	r3, #92	; 0x5c
 800879c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	212c      	movs	r1, #44	; 0x2c
 80087a4:	fb01 f303 	mul.w	r3, r1, r3
 80087a8:	4413      	add	r3, r2
 80087aa:	335c      	adds	r3, #92	; 0x5c
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d912      	bls.n	80087d8 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	212c      	movs	r1, #44	; 0x2c
 80087b8:	fb01 f303 	mul.w	r3, r1, r3
 80087bc:	4413      	add	r3, r2
 80087be:	335c      	adds	r3, #92	; 0x5c
 80087c0:	2200      	movs	r2, #0
 80087c2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	212c      	movs	r1, #44	; 0x2c
 80087ca:	fb01 f303 	mul.w	r3, r1, r3
 80087ce:	4413      	add	r3, r2
 80087d0:	3360      	adds	r3, #96	; 0x60
 80087d2:	2204      	movs	r2, #4
 80087d4:	701a      	strb	r2, [r3, #0]
 80087d6:	e021      	b.n	800881c <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	212c      	movs	r1, #44	; 0x2c
 80087de:	fb01 f303 	mul.w	r3, r1, r3
 80087e2:	4413      	add	r3, r2
 80087e4:	3360      	adds	r3, #96	; 0x60
 80087e6:	2202      	movs	r2, #2
 80087e8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	015a      	lsls	r2, r3, #5
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	4413      	add	r3, r2
 80087f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008800:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008808:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	015a      	lsls	r2, r3, #5
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	4413      	add	r3, r2
 8008812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008816:	461a      	mov	r2, r3
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	015a      	lsls	r2, r3, #5
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	4413      	add	r3, r2
 8008824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008828:	461a      	mov	r2, r3
 800882a:	2302      	movs	r3, #2
 800882c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	b2d9      	uxtb	r1, r3
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	202c      	movs	r0, #44	; 0x2c
 8008838:	fb00 f303 	mul.w	r3, r0, r3
 800883c:	4413      	add	r3, r2
 800883e:	3360      	adds	r3, #96	; 0x60
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	461a      	mov	r2, r3
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f007 fe67 	bl	8010518 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800884a:	bf00      	nop
 800884c:	3720      	adds	r7, #32
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b08a      	sub	sp, #40	; 0x28
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	6a1b      	ldr	r3, [r3, #32]
 800886a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	f003 030f 	and.w	r3, r3, #15
 8008872:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	0c5b      	lsrs	r3, r3, #17
 8008878:	f003 030f 	and.w	r3, r3, #15
 800887c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	091b      	lsrs	r3, r3, #4
 8008882:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008886:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	2b02      	cmp	r3, #2
 800888c:	d004      	beq.n	8008898 <HCD_RXQLVL_IRQHandler+0x46>
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	2b05      	cmp	r3, #5
 8008892:	f000 80a9 	beq.w	80089e8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8008896:	e0aa      	b.n	80089ee <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	f000 80a6 	beq.w	80089ec <HCD_RXQLVL_IRQHandler+0x19a>
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	212c      	movs	r1, #44	; 0x2c
 80088a6:	fb01 f303 	mul.w	r3, r1, r3
 80088aa:	4413      	add	r3, r2
 80088ac:	3344      	adds	r3, #68	; 0x44
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f000 809b 	beq.w	80089ec <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	212c      	movs	r1, #44	; 0x2c
 80088bc:	fb01 f303 	mul.w	r3, r1, r3
 80088c0:	4413      	add	r3, r2
 80088c2:	3350      	adds	r3, #80	; 0x50
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	441a      	add	r2, r3
 80088ca:	6879      	ldr	r1, [r7, #4]
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	202c      	movs	r0, #44	; 0x2c
 80088d0:	fb00 f303 	mul.w	r3, r0, r3
 80088d4:	440b      	add	r3, r1
 80088d6:	334c      	adds	r3, #76	; 0x4c
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d87a      	bhi.n	80089d4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6818      	ldr	r0, [r3, #0]
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	212c      	movs	r1, #44	; 0x2c
 80088e8:	fb01 f303 	mul.w	r3, r1, r3
 80088ec:	4413      	add	r3, r2
 80088ee:	3344      	adds	r3, #68	; 0x44
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	693a      	ldr	r2, [r7, #16]
 80088f4:	b292      	uxth	r2, r2
 80088f6:	4619      	mov	r1, r3
 80088f8:	f004 ffef 	bl	800d8da <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	212c      	movs	r1, #44	; 0x2c
 8008902:	fb01 f303 	mul.w	r3, r1, r3
 8008906:	4413      	add	r3, r2
 8008908:	3344      	adds	r3, #68	; 0x44
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	441a      	add	r2, r3
 8008910:	6879      	ldr	r1, [r7, #4]
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	202c      	movs	r0, #44	; 0x2c
 8008916:	fb00 f303 	mul.w	r3, r0, r3
 800891a:	440b      	add	r3, r1
 800891c:	3344      	adds	r3, #68	; 0x44
 800891e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	212c      	movs	r1, #44	; 0x2c
 8008926:	fb01 f303 	mul.w	r3, r1, r3
 800892a:	4413      	add	r3, r2
 800892c:	3350      	adds	r3, #80	; 0x50
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	441a      	add	r2, r3
 8008934:	6879      	ldr	r1, [r7, #4]
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	202c      	movs	r0, #44	; 0x2c
 800893a:	fb00 f303 	mul.w	r3, r0, r3
 800893e:	440b      	add	r3, r1
 8008940:	3350      	adds	r3, #80	; 0x50
 8008942:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	015a      	lsls	r2, r3, #5
 8008948:	6a3b      	ldr	r3, [r7, #32]
 800894a:	4413      	add	r3, r2
 800894c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	0cdb      	lsrs	r3, r3, #19
 8008954:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008958:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	212c      	movs	r1, #44	; 0x2c
 8008960:	fb01 f303 	mul.w	r3, r1, r3
 8008964:	4413      	add	r3, r2
 8008966:	3340      	adds	r3, #64	; 0x40
 8008968:	881b      	ldrh	r3, [r3, #0]
 800896a:	461a      	mov	r2, r3
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	4293      	cmp	r3, r2
 8008970:	d13c      	bne.n	80089ec <HCD_RXQLVL_IRQHandler+0x19a>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d039      	beq.n	80089ec <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	015a      	lsls	r2, r3, #5
 800897c:	6a3b      	ldr	r3, [r7, #32]
 800897e:	4413      	add	r3, r2
 8008980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800898e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008996:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	015a      	lsls	r2, r3, #5
 800899c:	6a3b      	ldr	r3, [r7, #32]
 800899e:	4413      	add	r3, r2
 80089a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089a4:	461a      	mov	r2, r3
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	212c      	movs	r1, #44	; 0x2c
 80089b0:	fb01 f303 	mul.w	r3, r1, r3
 80089b4:	4413      	add	r3, r2
 80089b6:	3354      	adds	r3, #84	; 0x54
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	f083 0301 	eor.w	r3, r3, #1
 80089be:	b2d8      	uxtb	r0, r3
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	212c      	movs	r1, #44	; 0x2c
 80089c6:	fb01 f303 	mul.w	r3, r1, r3
 80089ca:	4413      	add	r3, r2
 80089cc:	3354      	adds	r3, #84	; 0x54
 80089ce:	4602      	mov	r2, r0
 80089d0:	701a      	strb	r2, [r3, #0]
      break;
 80089d2:	e00b      	b.n	80089ec <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	212c      	movs	r1, #44	; 0x2c
 80089da:	fb01 f303 	mul.w	r3, r1, r3
 80089de:	4413      	add	r3, r2
 80089e0:	3360      	adds	r3, #96	; 0x60
 80089e2:	2204      	movs	r2, #4
 80089e4:	701a      	strb	r2, [r3, #0]
      break;
 80089e6:	e001      	b.n	80089ec <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80089e8:	bf00      	nop
 80089ea:	e000      	b.n	80089ee <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80089ec:	bf00      	nop
  }
}
 80089ee:	bf00      	nop
 80089f0:	3728      	adds	r7, #40	; 0x28
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b086      	sub	sp, #24
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008a22:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f003 0302 	and.w	r3, r3, #2
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d10b      	bne.n	8008a46 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d102      	bne.n	8008a3e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f007 fd51 	bl	80104e0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	f043 0302 	orr.w	r3, r3, #2
 8008a44:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f003 0308 	and.w	r3, r3, #8
 8008a4c:	2b08      	cmp	r3, #8
 8008a4e:	d132      	bne.n	8008ab6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	f043 0308 	orr.w	r3, r3, #8
 8008a56:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f003 0304 	and.w	r3, r3, #4
 8008a5e:	2b04      	cmp	r3, #4
 8008a60:	d126      	bne.n	8008ab0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d113      	bne.n	8008a92 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8008a70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a74:	d106      	bne.n	8008a84 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2102      	movs	r1, #2
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f005 f867 	bl	800db50 <USB_InitFSLSPClkSel>
 8008a82:	e011      	b.n	8008aa8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2101      	movs	r1, #1
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f005 f860 	bl	800db50 <USB_InitFSLSPClkSel>
 8008a90:	e00a      	b.n	8008aa8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d106      	bne.n	8008aa8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8008aa6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f007 fd43 	bl	8010534 <HAL_HCD_PortEnabled_Callback>
 8008aae:	e002      	b.n	8008ab6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f007 fd4d 	bl	8010550 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f003 0320 	and.w	r3, r3, #32
 8008abc:	2b20      	cmp	r3, #32
 8008abe:	d103      	bne.n	8008ac8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	f043 0320 	orr.w	r3, r3, #32
 8008ac6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008ace:	461a      	mov	r2, r3
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	6013      	str	r3, [r2, #0]
}
 8008ad4:	bf00      	nop
 8008ad6:	3718      	adds	r7, #24
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d101      	bne.n	8008aee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e12b      	b.n	8008d46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d106      	bne.n	8008b08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f7f9 fab0 	bl	8002068 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2224      	movs	r2, #36	; 0x24
 8008b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f022 0201 	bic.w	r2, r2, #1
 8008b1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008b40:	f002 fcec 	bl	800b51c <HAL_RCC_GetPCLK1Freq>
 8008b44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	4a81      	ldr	r2, [pc, #516]	; (8008d50 <HAL_I2C_Init+0x274>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d807      	bhi.n	8008b60 <HAL_I2C_Init+0x84>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	4a80      	ldr	r2, [pc, #512]	; (8008d54 <HAL_I2C_Init+0x278>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	bf94      	ite	ls
 8008b58:	2301      	movls	r3, #1
 8008b5a:	2300      	movhi	r3, #0
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	e006      	b.n	8008b6e <HAL_I2C_Init+0x92>
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	4a7d      	ldr	r2, [pc, #500]	; (8008d58 <HAL_I2C_Init+0x27c>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	bf94      	ite	ls
 8008b68:	2301      	movls	r3, #1
 8008b6a:	2300      	movhi	r3, #0
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d001      	beq.n	8008b76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e0e7      	b.n	8008d46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	4a78      	ldr	r2, [pc, #480]	; (8008d5c <HAL_I2C_Init+0x280>)
 8008b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b7e:	0c9b      	lsrs	r3, r3, #18
 8008b80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68ba      	ldr	r2, [r7, #8]
 8008b92:	430a      	orrs	r2, r1
 8008b94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	6a1b      	ldr	r3, [r3, #32]
 8008b9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	4a6a      	ldr	r2, [pc, #424]	; (8008d50 <HAL_I2C_Init+0x274>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d802      	bhi.n	8008bb0 <HAL_I2C_Init+0xd4>
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	3301      	adds	r3, #1
 8008bae:	e009      	b.n	8008bc4 <HAL_I2C_Init+0xe8>
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008bb6:	fb02 f303 	mul.w	r3, r2, r3
 8008bba:	4a69      	ldr	r2, [pc, #420]	; (8008d60 <HAL_I2C_Init+0x284>)
 8008bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc0:	099b      	lsrs	r3, r3, #6
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	6812      	ldr	r2, [r2, #0]
 8008bc8:	430b      	orrs	r3, r1
 8008bca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	69db      	ldr	r3, [r3, #28]
 8008bd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008bd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	495c      	ldr	r1, [pc, #368]	; (8008d50 <HAL_I2C_Init+0x274>)
 8008be0:	428b      	cmp	r3, r1
 8008be2:	d819      	bhi.n	8008c18 <HAL_I2C_Init+0x13c>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	1e59      	subs	r1, r3, #1
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	005b      	lsls	r3, r3, #1
 8008bee:	fbb1 f3f3 	udiv	r3, r1, r3
 8008bf2:	1c59      	adds	r1, r3, #1
 8008bf4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008bf8:	400b      	ands	r3, r1
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00a      	beq.n	8008c14 <HAL_I2C_Init+0x138>
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	1e59      	subs	r1, r3, #1
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	005b      	lsls	r3, r3, #1
 8008c08:	fbb1 f3f3 	udiv	r3, r1, r3
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c12:	e051      	b.n	8008cb8 <HAL_I2C_Init+0x1dc>
 8008c14:	2304      	movs	r3, #4
 8008c16:	e04f      	b.n	8008cb8 <HAL_I2C_Init+0x1dc>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d111      	bne.n	8008c44 <HAL_I2C_Init+0x168>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	1e58      	subs	r0, r3, #1
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6859      	ldr	r1, [r3, #4]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	005b      	lsls	r3, r3, #1
 8008c2c:	440b      	add	r3, r1
 8008c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c32:	3301      	adds	r3, #1
 8008c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	bf0c      	ite	eq
 8008c3c:	2301      	moveq	r3, #1
 8008c3e:	2300      	movne	r3, #0
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	e012      	b.n	8008c6a <HAL_I2C_Init+0x18e>
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	1e58      	subs	r0, r3, #1
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6859      	ldr	r1, [r3, #4]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	440b      	add	r3, r1
 8008c52:	0099      	lsls	r1, r3, #2
 8008c54:	440b      	add	r3, r1
 8008c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	bf0c      	ite	eq
 8008c64:	2301      	moveq	r3, #1
 8008c66:	2300      	movne	r3, #0
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d001      	beq.n	8008c72 <HAL_I2C_Init+0x196>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e022      	b.n	8008cb8 <HAL_I2C_Init+0x1dc>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d10e      	bne.n	8008c98 <HAL_I2C_Init+0x1bc>
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	1e58      	subs	r0, r3, #1
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6859      	ldr	r1, [r3, #4]
 8008c82:	460b      	mov	r3, r1
 8008c84:	005b      	lsls	r3, r3, #1
 8008c86:	440b      	add	r3, r1
 8008c88:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c96:	e00f      	b.n	8008cb8 <HAL_I2C_Init+0x1dc>
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	1e58      	subs	r0, r3, #1
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6859      	ldr	r1, [r3, #4]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	440b      	add	r3, r1
 8008ca6:	0099      	lsls	r1, r3, #2
 8008ca8:	440b      	add	r3, r1
 8008caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8008cae:	3301      	adds	r3, #1
 8008cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008cb8:	6879      	ldr	r1, [r7, #4]
 8008cba:	6809      	ldr	r1, [r1, #0]
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	69da      	ldr	r2, [r3, #28]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	431a      	orrs	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	430a      	orrs	r2, r1
 8008cda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008ce6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	6911      	ldr	r1, [r2, #16]
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	68d2      	ldr	r2, [r2, #12]
 8008cf2:	4311      	orrs	r1, r2
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	6812      	ldr	r2, [r2, #0]
 8008cf8:	430b      	orrs	r3, r1
 8008cfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	695a      	ldr	r2, [r3, #20]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	699b      	ldr	r3, [r3, #24]
 8008d0e:	431a      	orrs	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	430a      	orrs	r2, r1
 8008d16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f042 0201 	orr.w	r2, r2, #1
 8008d26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2220      	movs	r2, #32
 8008d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	000186a0 	.word	0x000186a0
 8008d54:	001e847f 	.word	0x001e847f
 8008d58:	003d08ff 	.word	0x003d08ff
 8008d5c:	431bde83 	.word	0x431bde83
 8008d60:	10624dd3 	.word	0x10624dd3

08008d64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b088      	sub	sp, #32
 8008d68:	af02      	add	r7, sp, #8
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	607a      	str	r2, [r7, #4]
 8008d6e:	461a      	mov	r2, r3
 8008d70:	460b      	mov	r3, r1
 8008d72:	817b      	strh	r3, [r7, #10]
 8008d74:	4613      	mov	r3, r2
 8008d76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008d78:	f7fd fe0a 	bl	8006990 <HAL_GetTick>
 8008d7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	2b20      	cmp	r3, #32
 8008d88:	f040 80e0 	bne.w	8008f4c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	9300      	str	r3, [sp, #0]
 8008d90:	2319      	movs	r3, #25
 8008d92:	2201      	movs	r2, #1
 8008d94:	4970      	ldr	r1, [pc, #448]	; (8008f58 <HAL_I2C_Master_Transmit+0x1f4>)
 8008d96:	68f8      	ldr	r0, [r7, #12]
 8008d98:	f001 f8f6 	bl	8009f88 <I2C_WaitOnFlagUntilTimeout>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008da2:	2302      	movs	r3, #2
 8008da4:	e0d3      	b.n	8008f4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d101      	bne.n	8008db4 <HAL_I2C_Master_Transmit+0x50>
 8008db0:	2302      	movs	r3, #2
 8008db2:	e0cc      	b.n	8008f4e <HAL_I2C_Master_Transmit+0x1ea>
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 0301 	and.w	r3, r3, #1
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d007      	beq.n	8008dda <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f042 0201 	orr.w	r2, r2, #1
 8008dd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008de8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2221      	movs	r2, #33	; 0x21
 8008dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2210      	movs	r2, #16
 8008df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	893a      	ldrh	r2, [r7, #8]
 8008e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e10:	b29a      	uxth	r2, r3
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	4a50      	ldr	r2, [pc, #320]	; (8008f5c <HAL_I2C_Master_Transmit+0x1f8>)
 8008e1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008e1c:	8979      	ldrh	r1, [r7, #10]
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	6a3a      	ldr	r2, [r7, #32]
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f000 fde2 	bl	80099ec <I2C_MasterRequestWrite>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d001      	beq.n	8008e32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e08d      	b.n	8008f4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e32:	2300      	movs	r3, #0
 8008e34:	613b      	str	r3, [r7, #16]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	695b      	ldr	r3, [r3, #20]
 8008e3c:	613b      	str	r3, [r7, #16]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	613b      	str	r3, [r7, #16]
 8008e46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008e48:	e066      	b.n	8008f18 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e4a:	697a      	ldr	r2, [r7, #20]
 8008e4c:	6a39      	ldr	r1, [r7, #32]
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f001 f970 	bl	800a134 <I2C_WaitOnTXEFlagUntilTimeout>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00d      	beq.n	8008e76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5e:	2b04      	cmp	r3, #4
 8008e60:	d107      	bne.n	8008e72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e06b      	b.n	8008f4e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7a:	781a      	ldrb	r2, [r3, #0]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e86:	1c5a      	adds	r2, r3, #1
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	3b01      	subs	r3, #1
 8008e94:	b29a      	uxth	r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	695b      	ldr	r3, [r3, #20]
 8008eac:	f003 0304 	and.w	r3, r3, #4
 8008eb0:	2b04      	cmp	r3, #4
 8008eb2:	d11b      	bne.n	8008eec <HAL_I2C_Master_Transmit+0x188>
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d017      	beq.n	8008eec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec0:	781a      	ldrb	r2, [r3, #0]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ecc:	1c5a      	adds	r2, r3, #1
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008eec:	697a      	ldr	r2, [r7, #20]
 8008eee:	6a39      	ldr	r1, [r7, #32]
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f001 f960 	bl	800a1b6 <I2C_WaitOnBTFFlagUntilTimeout>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00d      	beq.n	8008f18 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f00:	2b04      	cmp	r3, #4
 8008f02:	d107      	bne.n	8008f14 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f12:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	e01a      	b.n	8008f4e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d194      	bne.n	8008e4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2220      	movs	r2, #32
 8008f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	e000      	b.n	8008f4e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008f4c:	2302      	movs	r3, #2
  }
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3718      	adds	r7, #24
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	00100002 	.word	0x00100002
 8008f5c:	ffff0000 	.word	0xffff0000

08008f60 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b08c      	sub	sp, #48	; 0x30
 8008f64:	af02      	add	r7, sp, #8
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	607a      	str	r2, [r7, #4]
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	817b      	strh	r3, [r7, #10]
 8008f70:	4613      	mov	r3, r2
 8008f72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008f74:	f7fd fd0c 	bl	8006990 <HAL_GetTick>
 8008f78:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	2b20      	cmp	r3, #32
 8008f84:	f040 820b 	bne.w	800939e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8a:	9300      	str	r3, [sp, #0]
 8008f8c:	2319      	movs	r3, #25
 8008f8e:	2201      	movs	r2, #1
 8008f90:	497c      	ldr	r1, [pc, #496]	; (8009184 <HAL_I2C_Master_Receive+0x224>)
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	f000 fff8 	bl	8009f88 <I2C_WaitOnFlagUntilTimeout>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d001      	beq.n	8008fa2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008f9e:	2302      	movs	r3, #2
 8008fa0:	e1fe      	b.n	80093a0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d101      	bne.n	8008fb0 <HAL_I2C_Master_Receive+0x50>
 8008fac:	2302      	movs	r3, #2
 8008fae:	e1f7      	b.n	80093a0 <HAL_I2C_Master_Receive+0x440>
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f003 0301 	and.w	r3, r3, #1
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d007      	beq.n	8008fd6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f042 0201 	orr.w	r2, r2, #1
 8008fd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008fe4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2222      	movs	r2, #34	; 0x22
 8008fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2210      	movs	r2, #16
 8008ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	893a      	ldrh	r2, [r7, #8]
 8009006:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800900c:	b29a      	uxth	r2, r3
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	4a5c      	ldr	r2, [pc, #368]	; (8009188 <HAL_I2C_Master_Receive+0x228>)
 8009016:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009018:	8979      	ldrh	r1, [r7, #10]
 800901a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f000 fd66 	bl	8009af0 <I2C_MasterRequestRead>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d001      	beq.n	800902e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	e1b8      	b.n	80093a0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009032:	2b00      	cmp	r3, #0
 8009034:	d113      	bne.n	800905e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009036:	2300      	movs	r3, #0
 8009038:	623b      	str	r3, [r7, #32]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	695b      	ldr	r3, [r3, #20]
 8009040:	623b      	str	r3, [r7, #32]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	623b      	str	r3, [r7, #32]
 800904a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800905a:	601a      	str	r2, [r3, #0]
 800905c:	e18c      	b.n	8009378 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009062:	2b01      	cmp	r3, #1
 8009064:	d11b      	bne.n	800909e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009074:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009076:	2300      	movs	r3, #0
 8009078:	61fb      	str	r3, [r7, #28]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	695b      	ldr	r3, [r3, #20]
 8009080:	61fb      	str	r3, [r7, #28]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	699b      	ldr	r3, [r3, #24]
 8009088:	61fb      	str	r3, [r7, #28]
 800908a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800909a:	601a      	str	r2, [r3, #0]
 800909c:	e16c      	b.n	8009378 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d11b      	bne.n	80090de <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090c6:	2300      	movs	r3, #0
 80090c8:	61bb      	str	r3, [r7, #24]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	695b      	ldr	r3, [r3, #20]
 80090d0:	61bb      	str	r3, [r7, #24]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	699b      	ldr	r3, [r3, #24]
 80090d8:	61bb      	str	r3, [r7, #24]
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	e14c      	b.n	8009378 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80090ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090ee:	2300      	movs	r3, #0
 80090f0:	617b      	str	r3, [r7, #20]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	695b      	ldr	r3, [r3, #20]
 80090f8:	617b      	str	r3, [r7, #20]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	699b      	ldr	r3, [r3, #24]
 8009100:	617b      	str	r3, [r7, #20]
 8009102:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009104:	e138      	b.n	8009378 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800910a:	2b03      	cmp	r3, #3
 800910c:	f200 80f1 	bhi.w	80092f2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009114:	2b01      	cmp	r3, #1
 8009116:	d123      	bne.n	8009160 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800911a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f001 f88b 	bl	800a238 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d001      	beq.n	800912c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	e139      	b.n	80093a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	691a      	ldr	r2, [r3, #16]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009136:	b2d2      	uxtb	r2, r2
 8009138:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913e:	1c5a      	adds	r2, r3, #1
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009148:	3b01      	subs	r3, #1
 800914a:	b29a      	uxth	r2, r3
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009154:	b29b      	uxth	r3, r3
 8009156:	3b01      	subs	r3, #1
 8009158:	b29a      	uxth	r2, r3
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800915e:	e10b      	b.n	8009378 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009164:	2b02      	cmp	r3, #2
 8009166:	d14e      	bne.n	8009206 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916e:	2200      	movs	r2, #0
 8009170:	4906      	ldr	r1, [pc, #24]	; (800918c <HAL_I2C_Master_Receive+0x22c>)
 8009172:	68f8      	ldr	r0, [r7, #12]
 8009174:	f000 ff08 	bl	8009f88 <I2C_WaitOnFlagUntilTimeout>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d008      	beq.n	8009190 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	e10e      	b.n	80093a0 <HAL_I2C_Master_Receive+0x440>
 8009182:	bf00      	nop
 8009184:	00100002 	.word	0x00100002
 8009188:	ffff0000 	.word	0xffff0000
 800918c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800919e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	691a      	ldr	r2, [r3, #16]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091aa:	b2d2      	uxtb	r2, r2
 80091ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b2:	1c5a      	adds	r2, r3, #1
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091bc:	3b01      	subs	r3, #1
 80091be:	b29a      	uxth	r2, r3
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	3b01      	subs	r3, #1
 80091cc:	b29a      	uxth	r2, r3
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	691a      	ldr	r2, [r3, #16]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091dc:	b2d2      	uxtb	r2, r2
 80091de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e4:	1c5a      	adds	r2, r3, #1
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091ee:	3b01      	subs	r3, #1
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	3b01      	subs	r3, #1
 80091fe:	b29a      	uxth	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009204:	e0b8      	b.n	8009378 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009208:	9300      	str	r3, [sp, #0]
 800920a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920c:	2200      	movs	r2, #0
 800920e:	4966      	ldr	r1, [pc, #408]	; (80093a8 <HAL_I2C_Master_Receive+0x448>)
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f000 feb9 	bl	8009f88 <I2C_WaitOnFlagUntilTimeout>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d001      	beq.n	8009220 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	e0bf      	b.n	80093a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800922e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	691a      	ldr	r2, [r3, #16]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923a:	b2d2      	uxtb	r2, r2
 800923c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009242:	1c5a      	adds	r2, r3, #1
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800924c:	3b01      	subs	r3, #1
 800924e:	b29a      	uxth	r2, r3
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009258:	b29b      	uxth	r3, r3
 800925a:	3b01      	subs	r3, #1
 800925c:	b29a      	uxth	r2, r3
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009268:	2200      	movs	r2, #0
 800926a:	494f      	ldr	r1, [pc, #316]	; (80093a8 <HAL_I2C_Master_Receive+0x448>)
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f000 fe8b 	bl	8009f88 <I2C_WaitOnFlagUntilTimeout>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d001      	beq.n	800927c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	e091      	b.n	80093a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800928a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	691a      	ldr	r2, [r3, #16]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009296:	b2d2      	uxtb	r2, r2
 8009298:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929e:	1c5a      	adds	r2, r3, #1
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092a8:	3b01      	subs	r3, #1
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	3b01      	subs	r3, #1
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	691a      	ldr	r2, [r3, #16]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c8:	b2d2      	uxtb	r2, r2
 80092ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d0:	1c5a      	adds	r2, r3, #1
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092da:	3b01      	subs	r3, #1
 80092dc:	b29a      	uxth	r2, r3
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	3b01      	subs	r3, #1
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80092f0:	e042      	b.n	8009378 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092f6:	68f8      	ldr	r0, [r7, #12]
 80092f8:	f000 ff9e 	bl	800a238 <I2C_WaitOnRXNEFlagUntilTimeout>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d001      	beq.n	8009306 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e04c      	b.n	80093a0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	691a      	ldr	r2, [r3, #16]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009310:	b2d2      	uxtb	r2, r2
 8009312:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009318:	1c5a      	adds	r2, r3, #1
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009322:	3b01      	subs	r3, #1
 8009324:	b29a      	uxth	r2, r3
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800932e:	b29b      	uxth	r3, r3
 8009330:	3b01      	subs	r3, #1
 8009332:	b29a      	uxth	r2, r3
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	695b      	ldr	r3, [r3, #20]
 800933e:	f003 0304 	and.w	r3, r3, #4
 8009342:	2b04      	cmp	r3, #4
 8009344:	d118      	bne.n	8009378 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	691a      	ldr	r2, [r3, #16]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009350:	b2d2      	uxtb	r2, r2
 8009352:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009358:	1c5a      	adds	r2, r3, #1
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009362:	3b01      	subs	r3, #1
 8009364:	b29a      	uxth	r2, r3
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800936e:	b29b      	uxth	r3, r3
 8009370:	3b01      	subs	r3, #1
 8009372:	b29a      	uxth	r2, r3
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800937c:	2b00      	cmp	r3, #0
 800937e:	f47f aec2 	bne.w	8009106 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2220      	movs	r2, #32
 8009386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	e000      	b.n	80093a0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800939e:	2302      	movs	r3, #2
  }
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3728      	adds	r7, #40	; 0x28
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	00010004 	.word	0x00010004

080093ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b088      	sub	sp, #32
 80093b0:	af02      	add	r7, sp, #8
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	4608      	mov	r0, r1
 80093b6:	4611      	mov	r1, r2
 80093b8:	461a      	mov	r2, r3
 80093ba:	4603      	mov	r3, r0
 80093bc:	817b      	strh	r3, [r7, #10]
 80093be:	460b      	mov	r3, r1
 80093c0:	813b      	strh	r3, [r7, #8]
 80093c2:	4613      	mov	r3, r2
 80093c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80093c6:	f7fd fae3 	bl	8006990 <HAL_GetTick>
 80093ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	2b20      	cmp	r3, #32
 80093d6:	f040 80d9 	bne.w	800958c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	9300      	str	r3, [sp, #0]
 80093de:	2319      	movs	r3, #25
 80093e0:	2201      	movs	r2, #1
 80093e2:	496d      	ldr	r1, [pc, #436]	; (8009598 <HAL_I2C_Mem_Write+0x1ec>)
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f000 fdcf 	bl	8009f88 <I2C_WaitOnFlagUntilTimeout>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d001      	beq.n	80093f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80093f0:	2302      	movs	r3, #2
 80093f2:	e0cc      	b.n	800958e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d101      	bne.n	8009402 <HAL_I2C_Mem_Write+0x56>
 80093fe:	2302      	movs	r3, #2
 8009400:	e0c5      	b.n	800958e <HAL_I2C_Mem_Write+0x1e2>
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2201      	movs	r2, #1
 8009406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f003 0301 	and.w	r3, r3, #1
 8009414:	2b01      	cmp	r3, #1
 8009416:	d007      	beq.n	8009428 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f042 0201 	orr.w	r2, r2, #1
 8009426:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009436:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2221      	movs	r2, #33	; 0x21
 800943c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2240      	movs	r2, #64	; 0x40
 8009444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6a3a      	ldr	r2, [r7, #32]
 8009452:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009458:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800945e:	b29a      	uxth	r2, r3
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	4a4d      	ldr	r2, [pc, #308]	; (800959c <HAL_I2C_Mem_Write+0x1f0>)
 8009468:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800946a:	88f8      	ldrh	r0, [r7, #6]
 800946c:	893a      	ldrh	r2, [r7, #8]
 800946e:	8979      	ldrh	r1, [r7, #10]
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	9301      	str	r3, [sp, #4]
 8009474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	4603      	mov	r3, r0
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f000 fc06 	bl	8009c8c <I2C_RequestMemoryWrite>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d052      	beq.n	800952c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	e081      	b.n	800958e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800948e:	68f8      	ldr	r0, [r7, #12]
 8009490:	f000 fe50 	bl	800a134 <I2C_WaitOnTXEFlagUntilTimeout>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00d      	beq.n	80094b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800949e:	2b04      	cmp	r3, #4
 80094a0:	d107      	bne.n	80094b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	e06b      	b.n	800958e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ba:	781a      	ldrb	r2, [r3, #0]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c6:	1c5a      	adds	r2, r3, #1
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094d0:	3b01      	subs	r3, #1
 80094d2:	b29a      	uxth	r2, r3
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094dc:	b29b      	uxth	r3, r3
 80094de:	3b01      	subs	r3, #1
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	695b      	ldr	r3, [r3, #20]
 80094ec:	f003 0304 	and.w	r3, r3, #4
 80094f0:	2b04      	cmp	r3, #4
 80094f2:	d11b      	bne.n	800952c <HAL_I2C_Mem_Write+0x180>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d017      	beq.n	800952c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009500:	781a      	ldrb	r2, [r3, #0]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950c:	1c5a      	adds	r2, r3, #1
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009516:	3b01      	subs	r3, #1
 8009518:	b29a      	uxth	r2, r3
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009522:	b29b      	uxth	r3, r3
 8009524:	3b01      	subs	r3, #1
 8009526:	b29a      	uxth	r2, r3
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1aa      	bne.n	800948a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009534:	697a      	ldr	r2, [r7, #20]
 8009536:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f000 fe3c 	bl	800a1b6 <I2C_WaitOnBTFFlagUntilTimeout>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00d      	beq.n	8009560 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009548:	2b04      	cmp	r3, #4
 800954a:	d107      	bne.n	800955c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800955a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	e016      	b.n	800958e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800956e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2220      	movs	r2, #32
 8009574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009588:	2300      	movs	r3, #0
 800958a:	e000      	b.n	800958e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800958c:	2302      	movs	r3, #2
  }
}
 800958e:	4618      	mov	r0, r3
 8009590:	3718      	adds	r7, #24
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	00100002 	.word	0x00100002
 800959c:	ffff0000 	.word	0xffff0000

080095a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b08c      	sub	sp, #48	; 0x30
 80095a4:	af02      	add	r7, sp, #8
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	4608      	mov	r0, r1
 80095aa:	4611      	mov	r1, r2
 80095ac:	461a      	mov	r2, r3
 80095ae:	4603      	mov	r3, r0
 80095b0:	817b      	strh	r3, [r7, #10]
 80095b2:	460b      	mov	r3, r1
 80095b4:	813b      	strh	r3, [r7, #8]
 80095b6:	4613      	mov	r3, r2
 80095b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80095ba:	f7fd f9e9 	bl	8006990 <HAL_GetTick>
 80095be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b20      	cmp	r3, #32
 80095ca:	f040 8208 	bne.w	80099de <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80095ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d0:	9300      	str	r3, [sp, #0]
 80095d2:	2319      	movs	r3, #25
 80095d4:	2201      	movs	r2, #1
 80095d6:	497b      	ldr	r1, [pc, #492]	; (80097c4 <HAL_I2C_Mem_Read+0x224>)
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f000 fcd5 	bl	8009f88 <I2C_WaitOnFlagUntilTimeout>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d001      	beq.n	80095e8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80095e4:	2302      	movs	r3, #2
 80095e6:	e1fb      	b.n	80099e0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d101      	bne.n	80095f6 <HAL_I2C_Mem_Read+0x56>
 80095f2:	2302      	movs	r3, #2
 80095f4:	e1f4      	b.n	80099e0 <HAL_I2C_Mem_Read+0x440>
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 0301 	and.w	r3, r3, #1
 8009608:	2b01      	cmp	r3, #1
 800960a:	d007      	beq.n	800961c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f042 0201 	orr.w	r2, r2, #1
 800961a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800962a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2222      	movs	r2, #34	; 0x22
 8009630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2240      	movs	r2, #64	; 0x40
 8009638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009646:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800964c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009652:	b29a      	uxth	r2, r3
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	4a5b      	ldr	r2, [pc, #364]	; (80097c8 <HAL_I2C_Mem_Read+0x228>)
 800965c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800965e:	88f8      	ldrh	r0, [r7, #6]
 8009660:	893a      	ldrh	r2, [r7, #8]
 8009662:	8979      	ldrh	r1, [r7, #10]
 8009664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009666:	9301      	str	r3, [sp, #4]
 8009668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800966a:	9300      	str	r3, [sp, #0]
 800966c:	4603      	mov	r3, r0
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f000 fba2 	bl	8009db8 <I2C_RequestMemoryRead>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d001      	beq.n	800967e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	e1b0      	b.n	80099e0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009682:	2b00      	cmp	r3, #0
 8009684:	d113      	bne.n	80096ae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009686:	2300      	movs	r3, #0
 8009688:	623b      	str	r3, [r7, #32]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	695b      	ldr	r3, [r3, #20]
 8009690:	623b      	str	r3, [r7, #32]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	699b      	ldr	r3, [r3, #24]
 8009698:	623b      	str	r3, [r7, #32]
 800969a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096aa:	601a      	str	r2, [r3, #0]
 80096ac:	e184      	b.n	80099b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d11b      	bne.n	80096ee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096c6:	2300      	movs	r3, #0
 80096c8:	61fb      	str	r3, [r7, #28]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	695b      	ldr	r3, [r3, #20]
 80096d0:	61fb      	str	r3, [r7, #28]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	699b      	ldr	r3, [r3, #24]
 80096d8:	61fb      	str	r3, [r7, #28]
 80096da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096ea:	601a      	str	r2, [r3, #0]
 80096ec:	e164      	b.n	80099b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096f2:	2b02      	cmp	r3, #2
 80096f4:	d11b      	bne.n	800972e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009704:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009714:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009716:	2300      	movs	r3, #0
 8009718:	61bb      	str	r3, [r7, #24]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	695b      	ldr	r3, [r3, #20]
 8009720:	61bb      	str	r3, [r7, #24]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	699b      	ldr	r3, [r3, #24]
 8009728:	61bb      	str	r3, [r7, #24]
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	e144      	b.n	80099b8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800972e:	2300      	movs	r3, #0
 8009730:	617b      	str	r3, [r7, #20]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	695b      	ldr	r3, [r3, #20]
 8009738:	617b      	str	r3, [r7, #20]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	617b      	str	r3, [r7, #20]
 8009742:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009744:	e138      	b.n	80099b8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800974a:	2b03      	cmp	r3, #3
 800974c:	f200 80f1 	bhi.w	8009932 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009754:	2b01      	cmp	r3, #1
 8009756:	d123      	bne.n	80097a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800975a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800975c:	68f8      	ldr	r0, [r7, #12]
 800975e:	f000 fd6b 	bl	800a238 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d001      	beq.n	800976c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	e139      	b.n	80099e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	691a      	ldr	r2, [r3, #16]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009776:	b2d2      	uxtb	r2, r2
 8009778:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977e:	1c5a      	adds	r2, r3, #1
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009788:	3b01      	subs	r3, #1
 800978a:	b29a      	uxth	r2, r3
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009794:	b29b      	uxth	r3, r3
 8009796:	3b01      	subs	r3, #1
 8009798:	b29a      	uxth	r2, r3
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800979e:	e10b      	b.n	80099b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	d14e      	bne.n	8009846 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80097a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097aa:	9300      	str	r3, [sp, #0]
 80097ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ae:	2200      	movs	r2, #0
 80097b0:	4906      	ldr	r1, [pc, #24]	; (80097cc <HAL_I2C_Mem_Read+0x22c>)
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f000 fbe8 	bl	8009f88 <I2C_WaitOnFlagUntilTimeout>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d008      	beq.n	80097d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	e10e      	b.n	80099e0 <HAL_I2C_Mem_Read+0x440>
 80097c2:	bf00      	nop
 80097c4:	00100002 	.word	0x00100002
 80097c8:	ffff0000 	.word	0xffff0000
 80097cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	691a      	ldr	r2, [r3, #16]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ea:	b2d2      	uxtb	r2, r2
 80097ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f2:	1c5a      	adds	r2, r3, #1
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097fc:	3b01      	subs	r3, #1
 80097fe:	b29a      	uxth	r2, r3
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009808:	b29b      	uxth	r3, r3
 800980a:	3b01      	subs	r3, #1
 800980c:	b29a      	uxth	r2, r3
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	691a      	ldr	r2, [r3, #16]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981c:	b2d2      	uxtb	r2, r2
 800981e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009824:	1c5a      	adds	r2, r3, #1
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800982e:	3b01      	subs	r3, #1
 8009830:	b29a      	uxth	r2, r3
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800983a:	b29b      	uxth	r3, r3
 800983c:	3b01      	subs	r3, #1
 800983e:	b29a      	uxth	r2, r3
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009844:	e0b8      	b.n	80099b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009848:	9300      	str	r3, [sp, #0]
 800984a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984c:	2200      	movs	r2, #0
 800984e:	4966      	ldr	r1, [pc, #408]	; (80099e8 <HAL_I2C_Mem_Read+0x448>)
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f000 fb99 	bl	8009f88 <I2C_WaitOnFlagUntilTimeout>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d001      	beq.n	8009860 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	e0bf      	b.n	80099e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800986e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	691a      	ldr	r2, [r3, #16]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987a:	b2d2      	uxtb	r2, r2
 800987c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009882:	1c5a      	adds	r2, r3, #1
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800988c:	3b01      	subs	r3, #1
 800988e:	b29a      	uxth	r2, r3
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009898:	b29b      	uxth	r3, r3
 800989a:	3b01      	subs	r3, #1
 800989c:	b29a      	uxth	r2, r3
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80098a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a4:	9300      	str	r3, [sp, #0]
 80098a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a8:	2200      	movs	r2, #0
 80098aa:	494f      	ldr	r1, [pc, #316]	; (80099e8 <HAL_I2C_Mem_Read+0x448>)
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f000 fb6b 	bl	8009f88 <I2C_WaitOnFlagUntilTimeout>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d001      	beq.n	80098bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e091      	b.n	80099e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	691a      	ldr	r2, [r3, #16]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d6:	b2d2      	uxtb	r2, r2
 80098d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098de:	1c5a      	adds	r2, r3, #1
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098e8:	3b01      	subs	r3, #1
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	3b01      	subs	r3, #1
 80098f8:	b29a      	uxth	r2, r3
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	691a      	ldr	r2, [r3, #16]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009908:	b2d2      	uxtb	r2, r2
 800990a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009910:	1c5a      	adds	r2, r3, #1
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800991a:	3b01      	subs	r3, #1
 800991c:	b29a      	uxth	r2, r3
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009926:	b29b      	uxth	r3, r3
 8009928:	3b01      	subs	r3, #1
 800992a:	b29a      	uxth	r2, r3
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009930:	e042      	b.n	80099b8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009934:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009936:	68f8      	ldr	r0, [r7, #12]
 8009938:	f000 fc7e 	bl	800a238 <I2C_WaitOnRXNEFlagUntilTimeout>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d001      	beq.n	8009946 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e04c      	b.n	80099e0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	691a      	ldr	r2, [r3, #16]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009950:	b2d2      	uxtb	r2, r2
 8009952:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009958:	1c5a      	adds	r2, r3, #1
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009962:	3b01      	subs	r3, #1
 8009964:	b29a      	uxth	r2, r3
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800996e:	b29b      	uxth	r3, r3
 8009970:	3b01      	subs	r3, #1
 8009972:	b29a      	uxth	r2, r3
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	695b      	ldr	r3, [r3, #20]
 800997e:	f003 0304 	and.w	r3, r3, #4
 8009982:	2b04      	cmp	r3, #4
 8009984:	d118      	bne.n	80099b8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	691a      	ldr	r2, [r3, #16]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009990:	b2d2      	uxtb	r2, r2
 8009992:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009998:	1c5a      	adds	r2, r3, #1
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099a2:	3b01      	subs	r3, #1
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	3b01      	subs	r3, #1
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099bc:	2b00      	cmp	r3, #0
 80099be:	f47f aec2 	bne.w	8009746 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2220      	movs	r2, #32
 80099c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80099da:	2300      	movs	r3, #0
 80099dc:	e000      	b.n	80099e0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80099de:	2302      	movs	r3, #2
  }
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3728      	adds	r7, #40	; 0x28
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	00010004 	.word	0x00010004

080099ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b088      	sub	sp, #32
 80099f0:	af02      	add	r7, sp, #8
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	607a      	str	r2, [r7, #4]
 80099f6:	603b      	str	r3, [r7, #0]
 80099f8:	460b      	mov	r3, r1
 80099fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	2b08      	cmp	r3, #8
 8009a06:	d006      	beq.n	8009a16 <I2C_MasterRequestWrite+0x2a>
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d003      	beq.n	8009a16 <I2C_MasterRequestWrite+0x2a>
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009a14:	d108      	bne.n	8009a28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a24:	601a      	str	r2, [r3, #0]
 8009a26:	e00b      	b.n	8009a40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a2c:	2b12      	cmp	r3, #18
 8009a2e:	d107      	bne.n	8009a40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f000 fa9b 	bl	8009f88 <I2C_WaitOnFlagUntilTimeout>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00d      	beq.n	8009a74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a66:	d103      	bne.n	8009a70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009a70:	2303      	movs	r3, #3
 8009a72:	e035      	b.n	8009ae0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a7c:	d108      	bne.n	8009a90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009a7e:	897b      	ldrh	r3, [r7, #10]
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	461a      	mov	r2, r3
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009a8c:	611a      	str	r2, [r3, #16]
 8009a8e:	e01b      	b.n	8009ac8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009a90:	897b      	ldrh	r3, [r7, #10]
 8009a92:	11db      	asrs	r3, r3, #7
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	f003 0306 	and.w	r3, r3, #6
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	f063 030f 	orn	r3, r3, #15
 8009aa0:	b2da      	uxtb	r2, r3
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	490e      	ldr	r1, [pc, #56]	; (8009ae8 <I2C_MasterRequestWrite+0xfc>)
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f000 fac1 	bl	800a036 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d001      	beq.n	8009abe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	e010      	b.n	8009ae0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009abe:	897b      	ldrh	r3, [r7, #10]
 8009ac0:	b2da      	uxtb	r2, r3
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	4907      	ldr	r1, [pc, #28]	; (8009aec <I2C_MasterRequestWrite+0x100>)
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f000 fab1 	bl	800a036 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d001      	beq.n	8009ade <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	e000      	b.n	8009ae0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3718      	adds	r7, #24
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	00010008 	.word	0x00010008
 8009aec:	00010002 	.word	0x00010002

08009af0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b088      	sub	sp, #32
 8009af4:	af02      	add	r7, sp, #8
 8009af6:	60f8      	str	r0, [r7, #12]
 8009af8:	607a      	str	r2, [r7, #4]
 8009afa:	603b      	str	r3, [r7, #0]
 8009afc:	460b      	mov	r3, r1
 8009afe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b04:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b14:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	2b08      	cmp	r3, #8
 8009b1a:	d006      	beq.n	8009b2a <I2C_MasterRequestRead+0x3a>
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d003      	beq.n	8009b2a <I2C_MasterRequestRead+0x3a>
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009b28:	d108      	bne.n	8009b3c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b38:	601a      	str	r2, [r3, #0]
 8009b3a:	e00b      	b.n	8009b54 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b40:	2b11      	cmp	r3, #17
 8009b42:	d107      	bne.n	8009b54 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	9300      	str	r3, [sp, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009b60:	68f8      	ldr	r0, [r7, #12]
 8009b62:	f000 fa11 	bl	8009f88 <I2C_WaitOnFlagUntilTimeout>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d00d      	beq.n	8009b88 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b7a:	d103      	bne.n	8009b84 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009b84:	2303      	movs	r3, #3
 8009b86:	e079      	b.n	8009c7c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	691b      	ldr	r3, [r3, #16]
 8009b8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b90:	d108      	bne.n	8009ba4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009b92:	897b      	ldrh	r3, [r7, #10]
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	f043 0301 	orr.w	r3, r3, #1
 8009b9a:	b2da      	uxtb	r2, r3
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	611a      	str	r2, [r3, #16]
 8009ba2:	e05f      	b.n	8009c64 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009ba4:	897b      	ldrh	r3, [r7, #10]
 8009ba6:	11db      	asrs	r3, r3, #7
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	f003 0306 	and.w	r3, r3, #6
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	f063 030f 	orn	r3, r3, #15
 8009bb4:	b2da      	uxtb	r2, r3
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	4930      	ldr	r1, [pc, #192]	; (8009c84 <I2C_MasterRequestRead+0x194>)
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f000 fa37 	bl	800a036 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d001      	beq.n	8009bd2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e054      	b.n	8009c7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009bd2:	897b      	ldrh	r3, [r7, #10]
 8009bd4:	b2da      	uxtb	r2, r3
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	4929      	ldr	r1, [pc, #164]	; (8009c88 <I2C_MasterRequestRead+0x198>)
 8009be2:	68f8      	ldr	r0, [r7, #12]
 8009be4:	f000 fa27 	bl	800a036 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d001      	beq.n	8009bf2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e044      	b.n	8009c7c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	613b      	str	r3, [r7, #16]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	695b      	ldr	r3, [r3, #20]
 8009bfc:	613b      	str	r3, [r7, #16]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	699b      	ldr	r3, [r3, #24]
 8009c04:	613b      	str	r3, [r7, #16]
 8009c06:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c16:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	9300      	str	r3, [sp, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009c24:	68f8      	ldr	r0, [r7, #12]
 8009c26:	f000 f9af 	bl	8009f88 <I2C_WaitOnFlagUntilTimeout>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d00d      	beq.n	8009c4c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c3e:	d103      	bne.n	8009c48 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c46:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009c48:	2303      	movs	r3, #3
 8009c4a:	e017      	b.n	8009c7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009c4c:	897b      	ldrh	r3, [r7, #10]
 8009c4e:	11db      	asrs	r3, r3, #7
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	f003 0306 	and.w	r3, r3, #6
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	f063 030e 	orn	r3, r3, #14
 8009c5c:	b2da      	uxtb	r2, r3
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	4907      	ldr	r1, [pc, #28]	; (8009c88 <I2C_MasterRequestRead+0x198>)
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f000 f9e3 	bl	800a036 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d001      	beq.n	8009c7a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	e000      	b.n	8009c7c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3718      	adds	r7, #24
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	00010008 	.word	0x00010008
 8009c88:	00010002 	.word	0x00010002

08009c8c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b088      	sub	sp, #32
 8009c90:	af02      	add	r7, sp, #8
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	4608      	mov	r0, r1
 8009c96:	4611      	mov	r1, r2
 8009c98:	461a      	mov	r2, r3
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	817b      	strh	r3, [r7, #10]
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	813b      	strh	r3, [r7, #8]
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb8:	9300      	str	r3, [sp, #0]
 8009cba:	6a3b      	ldr	r3, [r7, #32]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009cc2:	68f8      	ldr	r0, [r7, #12]
 8009cc4:	f000 f960 	bl	8009f88 <I2C_WaitOnFlagUntilTimeout>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d00d      	beq.n	8009cea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cdc:	d103      	bne.n	8009ce6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ce4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	e05f      	b.n	8009daa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009cea:	897b      	ldrh	r3, [r7, #10]
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	461a      	mov	r2, r3
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009cf8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfc:	6a3a      	ldr	r2, [r7, #32]
 8009cfe:	492d      	ldr	r1, [pc, #180]	; (8009db4 <I2C_RequestMemoryWrite+0x128>)
 8009d00:	68f8      	ldr	r0, [r7, #12]
 8009d02:	f000 f998 	bl	800a036 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d001      	beq.n	8009d10 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e04c      	b.n	8009daa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d10:	2300      	movs	r3, #0
 8009d12:	617b      	str	r3, [r7, #20]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	695b      	ldr	r3, [r3, #20]
 8009d1a:	617b      	str	r3, [r7, #20]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	699b      	ldr	r3, [r3, #24]
 8009d22:	617b      	str	r3, [r7, #20]
 8009d24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d28:	6a39      	ldr	r1, [r7, #32]
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	f000 fa02 	bl	800a134 <I2C_WaitOnTXEFlagUntilTimeout>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00d      	beq.n	8009d52 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3a:	2b04      	cmp	r3, #4
 8009d3c:	d107      	bne.n	8009d4e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e02b      	b.n	8009daa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009d52:	88fb      	ldrh	r3, [r7, #6]
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d105      	bne.n	8009d64 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009d58:	893b      	ldrh	r3, [r7, #8]
 8009d5a:	b2da      	uxtb	r2, r3
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	611a      	str	r2, [r3, #16]
 8009d62:	e021      	b.n	8009da8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009d64:	893b      	ldrh	r3, [r7, #8]
 8009d66:	0a1b      	lsrs	r3, r3, #8
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	b2da      	uxtb	r2, r3
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d74:	6a39      	ldr	r1, [r7, #32]
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	f000 f9dc 	bl	800a134 <I2C_WaitOnTXEFlagUntilTimeout>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d00d      	beq.n	8009d9e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d86:	2b04      	cmp	r3, #4
 8009d88:	d107      	bne.n	8009d9a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e005      	b.n	8009daa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009d9e:	893b      	ldrh	r3, [r7, #8]
 8009da0:	b2da      	uxtb	r2, r3
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3718      	adds	r7, #24
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	00010002 	.word	0x00010002

08009db8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b088      	sub	sp, #32
 8009dbc:	af02      	add	r7, sp, #8
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	4608      	mov	r0, r1
 8009dc2:	4611      	mov	r1, r2
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	817b      	strh	r3, [r7, #10]
 8009dca:	460b      	mov	r3, r1
 8009dcc:	813b      	strh	r3, [r7, #8]
 8009dce:	4613      	mov	r3, r2
 8009dd0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009de0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009df0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df4:	9300      	str	r3, [sp, #0]
 8009df6:	6a3b      	ldr	r3, [r7, #32]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	f000 f8c2 	bl	8009f88 <I2C_WaitOnFlagUntilTimeout>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00d      	beq.n	8009e26 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e18:	d103      	bne.n	8009e22 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009e22:	2303      	movs	r3, #3
 8009e24:	e0aa      	b.n	8009f7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009e26:	897b      	ldrh	r3, [r7, #10]
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009e34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e38:	6a3a      	ldr	r2, [r7, #32]
 8009e3a:	4952      	ldr	r1, [pc, #328]	; (8009f84 <I2C_RequestMemoryRead+0x1cc>)
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f000 f8fa 	bl	800a036 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d001      	beq.n	8009e4c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e097      	b.n	8009f7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	617b      	str	r3, [r7, #20]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	695b      	ldr	r3, [r3, #20]
 8009e56:	617b      	str	r3, [r7, #20]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	699b      	ldr	r3, [r3, #24]
 8009e5e:	617b      	str	r3, [r7, #20]
 8009e60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e64:	6a39      	ldr	r1, [r7, #32]
 8009e66:	68f8      	ldr	r0, [r7, #12]
 8009e68:	f000 f964 	bl	800a134 <I2C_WaitOnTXEFlagUntilTimeout>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d00d      	beq.n	8009e8e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e76:	2b04      	cmp	r3, #4
 8009e78:	d107      	bne.n	8009e8a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e076      	b.n	8009f7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009e8e:	88fb      	ldrh	r3, [r7, #6]
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d105      	bne.n	8009ea0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009e94:	893b      	ldrh	r3, [r7, #8]
 8009e96:	b2da      	uxtb	r2, r3
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	611a      	str	r2, [r3, #16]
 8009e9e:	e021      	b.n	8009ee4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009ea0:	893b      	ldrh	r3, [r7, #8]
 8009ea2:	0a1b      	lsrs	r3, r3, #8
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	b2da      	uxtb	r2, r3
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eb0:	6a39      	ldr	r1, [r7, #32]
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	f000 f93e 	bl	800a134 <I2C_WaitOnTXEFlagUntilTimeout>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00d      	beq.n	8009eda <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec2:	2b04      	cmp	r3, #4
 8009ec4:	d107      	bne.n	8009ed6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ed4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e050      	b.n	8009f7c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009eda:	893b      	ldrh	r3, [r7, #8]
 8009edc:	b2da      	uxtb	r2, r3
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ee6:	6a39      	ldr	r1, [r7, #32]
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f000 f923 	bl	800a134 <I2C_WaitOnTXEFlagUntilTimeout>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d00d      	beq.n	8009f10 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef8:	2b04      	cmp	r3, #4
 8009efa:	d107      	bne.n	8009f0c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f0a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e035      	b.n	8009f7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f1e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	6a3b      	ldr	r3, [r7, #32]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	f000 f82b 	bl	8009f88 <I2C_WaitOnFlagUntilTimeout>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00d      	beq.n	8009f54 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f46:	d103      	bne.n	8009f50 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009f50:	2303      	movs	r3, #3
 8009f52:	e013      	b.n	8009f7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009f54:	897b      	ldrh	r3, [r7, #10]
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	f043 0301 	orr.w	r3, r3, #1
 8009f5c:	b2da      	uxtb	r2, r3
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f66:	6a3a      	ldr	r2, [r7, #32]
 8009f68:	4906      	ldr	r1, [pc, #24]	; (8009f84 <I2C_RequestMemoryRead+0x1cc>)
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f000 f863 	bl	800a036 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d001      	beq.n	8009f7a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	e000      	b.n	8009f7c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009f7a:	2300      	movs	r3, #0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3718      	adds	r7, #24
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}
 8009f84:	00010002 	.word	0x00010002

08009f88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	603b      	str	r3, [r7, #0]
 8009f94:	4613      	mov	r3, r2
 8009f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f98:	e025      	b.n	8009fe6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fa0:	d021      	beq.n	8009fe6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fa2:	f7fc fcf5 	bl	8006990 <HAL_GetTick>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	1ad3      	subs	r3, r2, r3
 8009fac:	683a      	ldr	r2, [r7, #0]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d302      	bcc.n	8009fb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d116      	bne.n	8009fe6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2220      	movs	r2, #32
 8009fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd2:	f043 0220 	orr.w	r2, r3, #32
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e023      	b.n	800a02e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	0c1b      	lsrs	r3, r3, #16
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d10d      	bne.n	800a00c <I2C_WaitOnFlagUntilTimeout+0x84>
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	695b      	ldr	r3, [r3, #20]
 8009ff6:	43da      	mvns	r2, r3
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	4013      	ands	r3, r2
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	bf0c      	ite	eq
 800a002:	2301      	moveq	r3, #1
 800a004:	2300      	movne	r3, #0
 800a006:	b2db      	uxtb	r3, r3
 800a008:	461a      	mov	r2, r3
 800a00a:	e00c      	b.n	800a026 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	699b      	ldr	r3, [r3, #24]
 800a012:	43da      	mvns	r2, r3
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	4013      	ands	r3, r2
 800a018:	b29b      	uxth	r3, r3
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	bf0c      	ite	eq
 800a01e:	2301      	moveq	r3, #1
 800a020:	2300      	movne	r3, #0
 800a022:	b2db      	uxtb	r3, r3
 800a024:	461a      	mov	r2, r3
 800a026:	79fb      	ldrb	r3, [r7, #7]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d0b6      	beq.n	8009f9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b084      	sub	sp, #16
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	60f8      	str	r0, [r7, #12]
 800a03e:	60b9      	str	r1, [r7, #8]
 800a040:	607a      	str	r2, [r7, #4]
 800a042:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a044:	e051      	b.n	800a0ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	695b      	ldr	r3, [r3, #20]
 800a04c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a054:	d123      	bne.n	800a09e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a064:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a06e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2200      	movs	r2, #0
 800a074:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2220      	movs	r2, #32
 800a07a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2200      	movs	r2, #0
 800a082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a08a:	f043 0204 	orr.w	r2, r3, #4
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2200      	movs	r2, #0
 800a096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	e046      	b.n	800a12c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0a4:	d021      	beq.n	800a0ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0a6:	f7fc fc73 	bl	8006990 <HAL_GetTick>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	1ad3      	subs	r3, r2, r3
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d302      	bcc.n	800a0bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d116      	bne.n	800a0ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2220      	movs	r2, #32
 800a0c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d6:	f043 0220 	orr.w	r2, r3, #32
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e020      	b.n	800a12c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	0c1b      	lsrs	r3, r3, #16
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d10c      	bne.n	800a10e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	695b      	ldr	r3, [r3, #20]
 800a0fa:	43da      	mvns	r2, r3
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	4013      	ands	r3, r2
 800a100:	b29b      	uxth	r3, r3
 800a102:	2b00      	cmp	r3, #0
 800a104:	bf14      	ite	ne
 800a106:	2301      	movne	r3, #1
 800a108:	2300      	moveq	r3, #0
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	e00b      	b.n	800a126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	699b      	ldr	r3, [r3, #24]
 800a114:	43da      	mvns	r2, r3
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	4013      	ands	r3, r2
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	bf14      	ite	ne
 800a120:	2301      	movne	r3, #1
 800a122:	2300      	moveq	r3, #0
 800a124:	b2db      	uxtb	r3, r3
 800a126:	2b00      	cmp	r3, #0
 800a128:	d18d      	bne.n	800a046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a12a:	2300      	movs	r3, #0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3710      	adds	r7, #16
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a140:	e02d      	b.n	800a19e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a142:	68f8      	ldr	r0, [r7, #12]
 800a144:	f000 f8ce 	bl	800a2e4 <I2C_IsAcknowledgeFailed>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d001      	beq.n	800a152 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a14e:	2301      	movs	r3, #1
 800a150:	e02d      	b.n	800a1ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a158:	d021      	beq.n	800a19e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a15a:	f7fc fc19 	bl	8006990 <HAL_GetTick>
 800a15e:	4602      	mov	r2, r0
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	1ad3      	subs	r3, r2, r3
 800a164:	68ba      	ldr	r2, [r7, #8]
 800a166:	429a      	cmp	r2, r3
 800a168:	d302      	bcc.n	800a170 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d116      	bne.n	800a19e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2200      	movs	r2, #0
 800a174:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2220      	movs	r2, #32
 800a17a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2200      	movs	r2, #0
 800a182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a18a:	f043 0220 	orr.w	r2, r3, #32
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2200      	movs	r2, #0
 800a196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	e007      	b.n	800a1ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	695b      	ldr	r3, [r3, #20]
 800a1a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1a8:	2b80      	cmp	r3, #128	; 0x80
 800a1aa:	d1ca      	bne.n	800a142 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b084      	sub	sp, #16
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	60f8      	str	r0, [r7, #12]
 800a1be:	60b9      	str	r1, [r7, #8]
 800a1c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a1c2:	e02d      	b.n	800a220 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a1c4:	68f8      	ldr	r0, [r7, #12]
 800a1c6:	f000 f88d 	bl	800a2e4 <I2C_IsAcknowledgeFailed>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d001      	beq.n	800a1d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e02d      	b.n	800a230 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1da:	d021      	beq.n	800a220 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1dc:	f7fc fbd8 	bl	8006990 <HAL_GetTick>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	1ad3      	subs	r3, r2, r3
 800a1e6:	68ba      	ldr	r2, [r7, #8]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d302      	bcc.n	800a1f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d116      	bne.n	800a220 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2220      	movs	r2, #32
 800a1fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2200      	movs	r2, #0
 800a204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20c:	f043 0220 	orr.w	r2, r3, #32
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2200      	movs	r2, #0
 800a218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a21c:	2301      	movs	r3, #1
 800a21e:	e007      	b.n	800a230 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	695b      	ldr	r3, [r3, #20]
 800a226:	f003 0304 	and.w	r3, r3, #4
 800a22a:	2b04      	cmp	r3, #4
 800a22c:	d1ca      	bne.n	800a1c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a244:	e042      	b.n	800a2cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	695b      	ldr	r3, [r3, #20]
 800a24c:	f003 0310 	and.w	r3, r3, #16
 800a250:	2b10      	cmp	r3, #16
 800a252:	d119      	bne.n	800a288 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f06f 0210 	mvn.w	r2, #16
 800a25c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2200      	movs	r2, #0
 800a262:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2220      	movs	r2, #32
 800a268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2200      	movs	r2, #0
 800a270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2200      	movs	r2, #0
 800a280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	e029      	b.n	800a2dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a288:	f7fc fb82 	bl	8006990 <HAL_GetTick>
 800a28c:	4602      	mov	r2, r0
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	1ad3      	subs	r3, r2, r3
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	429a      	cmp	r2, r3
 800a296:	d302      	bcc.n	800a29e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d116      	bne.n	800a2cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2220      	movs	r2, #32
 800a2a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b8:	f043 0220 	orr.w	r2, r3, #32
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e007      	b.n	800a2dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	695b      	ldr	r3, [r3, #20]
 800a2d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2d6:	2b40      	cmp	r3, #64	; 0x40
 800a2d8:	d1b5      	bne.n	800a246 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a2da:	2300      	movs	r3, #0
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3710      	adds	r7, #16
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	695b      	ldr	r3, [r3, #20]
 800a2f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2fa:	d11b      	bne.n	800a334 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a304:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2220      	movs	r2, #32
 800a310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a320:	f043 0204 	orr.w	r2, r3, #4
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	e000      	b.n	800a336 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a334:	2300      	movs	r3, #0
}
 800a336:	4618      	mov	r0, r3
 800a338:	370c      	adds	r7, #12
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr
	...

0800a344 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b088      	sub	sp, #32
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d101      	bne.n	800a356 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	e128      	b.n	800a5a8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d109      	bne.n	800a376 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	4a90      	ldr	r2, [pc, #576]	; (800a5b0 <HAL_I2S_Init+0x26c>)
 800a36e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f7f7 ff19 	bl	80021a8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2202      	movs	r2, #2
 800a37a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	69db      	ldr	r3, [r3, #28]
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	6812      	ldr	r2, [r2, #0]
 800a388:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800a38c:	f023 030f 	bic.w	r3, r3, #15
 800a390:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	2202      	movs	r2, #2
 800a398:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	695b      	ldr	r3, [r3, #20]
 800a39e:	2b02      	cmp	r3, #2
 800a3a0:	d060      	beq.n	800a464 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	68db      	ldr	r3, [r3, #12]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d102      	bne.n	800a3b0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800a3aa:	2310      	movs	r3, #16
 800a3ac:	617b      	str	r3, [r7, #20]
 800a3ae:	e001      	b.n	800a3b4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800a3b0:	2320      	movs	r3, #32
 800a3b2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	2b20      	cmp	r3, #32
 800a3ba:	d802      	bhi.n	800a3c2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	005b      	lsls	r3, r3, #1
 800a3c0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800a3c2:	2001      	movs	r0, #1
 800a3c4:	f001 f9a0 	bl	800b708 <HAL_RCCEx_GetPeriphCLKFreq>
 800a3c8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	691b      	ldr	r3, [r3, #16]
 800a3ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3d2:	d125      	bne.n	800a420 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d010      	beq.n	800a3fe <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	fbb2 f2f3 	udiv	r2, r2, r3
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	4413      	add	r3, r2
 800a3ec:	005b      	lsls	r3, r3, #1
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	695b      	ldr	r3, [r3, #20]
 800a3f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3f8:	3305      	adds	r3, #5
 800a3fa:	613b      	str	r3, [r7, #16]
 800a3fc:	e01f      	b.n	800a43e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	00db      	lsls	r3, r3, #3
 800a402:	68fa      	ldr	r2, [r7, #12]
 800a404:	fbb2 f2f3 	udiv	r2, r2, r3
 800a408:	4613      	mov	r3, r2
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	4413      	add	r3, r2
 800a40e:	005b      	lsls	r3, r3, #1
 800a410:	461a      	mov	r2, r3
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	695b      	ldr	r3, [r3, #20]
 800a416:	fbb2 f3f3 	udiv	r3, r2, r3
 800a41a:	3305      	adds	r3, #5
 800a41c:	613b      	str	r3, [r7, #16]
 800a41e:	e00e      	b.n	800a43e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800a420:	68fa      	ldr	r2, [r7, #12]
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	fbb2 f2f3 	udiv	r2, r2, r3
 800a428:	4613      	mov	r3, r2
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	4413      	add	r3, r2
 800a42e:	005b      	lsls	r3, r3, #1
 800a430:	461a      	mov	r2, r3
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	695b      	ldr	r3, [r3, #20]
 800a436:	fbb2 f3f3 	udiv	r3, r2, r3
 800a43a:	3305      	adds	r3, #5
 800a43c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	4a5c      	ldr	r2, [pc, #368]	; (800a5b4 <HAL_I2S_Init+0x270>)
 800a442:	fba2 2303 	umull	r2, r3, r2, r3
 800a446:	08db      	lsrs	r3, r3, #3
 800a448:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	f003 0301 	and.w	r3, r3, #1
 800a450:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800a452:	693a      	ldr	r2, [r7, #16]
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	1ad3      	subs	r3, r2, r3
 800a458:	085b      	lsrs	r3, r3, #1
 800a45a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	021b      	lsls	r3, r3, #8
 800a460:	61bb      	str	r3, [r7, #24]
 800a462:	e003      	b.n	800a46c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800a464:	2302      	movs	r3, #2
 800a466:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800a468:	2300      	movs	r3, #0
 800a46a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d902      	bls.n	800a478 <HAL_I2S_Init+0x134>
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	2bff      	cmp	r3, #255	; 0xff
 800a476:	d907      	bls.n	800a488 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a47c:	f043 0210 	orr.w	r2, r3, #16
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800a484:	2301      	movs	r3, #1
 800a486:	e08f      	b.n	800a5a8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	691a      	ldr	r2, [r3, #16]
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	ea42 0103 	orr.w	r1, r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	69fa      	ldr	r2, [r7, #28]
 800a498:	430a      	orrs	r2, r1
 800a49a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	69db      	ldr	r3, [r3, #28]
 800a4a2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800a4a6:	f023 030f 	bic.w	r3, r3, #15
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	6851      	ldr	r1, [r2, #4]
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	6892      	ldr	r2, [r2, #8]
 800a4b2:	4311      	orrs	r1, r2
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	68d2      	ldr	r2, [r2, #12]
 800a4b8:	4311      	orrs	r1, r2
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	6992      	ldr	r2, [r2, #24]
 800a4be:	430a      	orrs	r2, r1
 800a4c0:	431a      	orrs	r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4ca:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6a1b      	ldr	r3, [r3, #32]
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d161      	bne.n	800a598 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	4a38      	ldr	r2, [pc, #224]	; (800a5b8 <HAL_I2S_Init+0x274>)
 800a4d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4a37      	ldr	r2, [pc, #220]	; (800a5bc <HAL_I2S_Init+0x278>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d101      	bne.n	800a4e8 <HAL_I2S_Init+0x1a4>
 800a4e4:	4b36      	ldr	r3, [pc, #216]	; (800a5c0 <HAL_I2S_Init+0x27c>)
 800a4e6:	e001      	b.n	800a4ec <HAL_I2S_Init+0x1a8>
 800a4e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a4ec:	69db      	ldr	r3, [r3, #28]
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	6812      	ldr	r2, [r2, #0]
 800a4f2:	4932      	ldr	r1, [pc, #200]	; (800a5bc <HAL_I2S_Init+0x278>)
 800a4f4:	428a      	cmp	r2, r1
 800a4f6:	d101      	bne.n	800a4fc <HAL_I2S_Init+0x1b8>
 800a4f8:	4a31      	ldr	r2, [pc, #196]	; (800a5c0 <HAL_I2S_Init+0x27c>)
 800a4fa:	e001      	b.n	800a500 <HAL_I2S_Init+0x1bc>
 800a4fc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800a500:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800a504:	f023 030f 	bic.w	r3, r3, #15
 800a508:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a2b      	ldr	r2, [pc, #172]	; (800a5bc <HAL_I2S_Init+0x278>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d101      	bne.n	800a518 <HAL_I2S_Init+0x1d4>
 800a514:	4b2a      	ldr	r3, [pc, #168]	; (800a5c0 <HAL_I2S_Init+0x27c>)
 800a516:	e001      	b.n	800a51c <HAL_I2S_Init+0x1d8>
 800a518:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a51c:	2202      	movs	r2, #2
 800a51e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a25      	ldr	r2, [pc, #148]	; (800a5bc <HAL_I2S_Init+0x278>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d101      	bne.n	800a52e <HAL_I2S_Init+0x1ea>
 800a52a:	4b25      	ldr	r3, [pc, #148]	; (800a5c0 <HAL_I2S_Init+0x27c>)
 800a52c:	e001      	b.n	800a532 <HAL_I2S_Init+0x1ee>
 800a52e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a532:	69db      	ldr	r3, [r3, #28]
 800a534:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a53e:	d003      	beq.n	800a548 <HAL_I2S_Init+0x204>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d103      	bne.n	800a550 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800a548:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a54c:	613b      	str	r3, [r7, #16]
 800a54e:	e001      	b.n	800a554 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800a550:	2300      	movs	r3, #0
 800a552:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800a55e:	4313      	orrs	r3, r2
 800a560:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800a568:	4313      	orrs	r3, r2
 800a56a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	699b      	ldr	r3, [r3, #24]
 800a570:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800a572:	4313      	orrs	r3, r2
 800a574:	b29a      	uxth	r2, r3
 800a576:	897b      	ldrh	r3, [r7, #10]
 800a578:	4313      	orrs	r3, r2
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a580:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4a0d      	ldr	r2, [pc, #52]	; (800a5bc <HAL_I2S_Init+0x278>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d101      	bne.n	800a590 <HAL_I2S_Init+0x24c>
 800a58c:	4b0c      	ldr	r3, [pc, #48]	; (800a5c0 <HAL_I2S_Init+0x27c>)
 800a58e:	e001      	b.n	800a594 <HAL_I2S_Init+0x250>
 800a590:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a594:	897a      	ldrh	r2, [r7, #10]
 800a596:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2200      	movs	r2, #0
 800a59c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3720      	adds	r7, #32
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	0800a6bb 	.word	0x0800a6bb
 800a5b4:	cccccccd 	.word	0xcccccccd
 800a5b8:	0800a7d1 	.word	0x0800a7d1
 800a5bc:	40003800 	.word	0x40003800
 800a5c0:	40003400 	.word	0x40003400

0800a5c4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800a5cc:	bf00      	nop
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60c:	881a      	ldrh	r2, [r3, #0]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a618:	1c9a      	adds	r2, r3, #2
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a622:	b29b      	uxth	r3, r3
 800a624:	3b01      	subs	r3, #1
 800a626:	b29a      	uxth	r2, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a630:	b29b      	uxth	r3, r3
 800a632:	2b00      	cmp	r3, #0
 800a634:	d10e      	bne.n	800a654 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	685a      	ldr	r2, [r3, #4]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a644:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2201      	movs	r2, #1
 800a64a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f7ff ffb8 	bl	800a5c4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800a654:	bf00      	nop
 800a656:	3708      	adds	r7, #8
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	68da      	ldr	r2, [r3, #12]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66e:	b292      	uxth	r2, r2
 800a670:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a676:	1c9a      	adds	r2, r3, #2
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a680:	b29b      	uxth	r3, r3
 800a682:	3b01      	subs	r3, #1
 800a684:	b29a      	uxth	r2, r3
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a68e:	b29b      	uxth	r3, r3
 800a690:	2b00      	cmp	r3, #0
 800a692:	d10e      	bne.n	800a6b2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	685a      	ldr	r2, [r3, #4]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a6a2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f7ff ff93 	bl	800a5d8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800a6b2:	bf00      	nop
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b086      	sub	sp, #24
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	2b04      	cmp	r3, #4
 800a6d4:	d13a      	bne.n	800a74c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	f003 0301 	and.w	r3, r3, #1
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d109      	bne.n	800a6f4 <I2S_IRQHandler+0x3a>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ea:	2b40      	cmp	r3, #64	; 0x40
 800a6ec:	d102      	bne.n	800a6f4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f7ff ffb4 	bl	800a65c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6fa:	2b40      	cmp	r3, #64	; 0x40
 800a6fc:	d126      	bne.n	800a74c <I2S_IRQHandler+0x92>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	f003 0320 	and.w	r3, r3, #32
 800a708:	2b20      	cmp	r3, #32
 800a70a:	d11f      	bne.n	800a74c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	685a      	ldr	r2, [r3, #4]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a71a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800a71c:	2300      	movs	r3, #0
 800a71e:	613b      	str	r3, [r7, #16]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	613b      	str	r3, [r7, #16]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	689b      	ldr	r3, [r3, #8]
 800a72e:	613b      	str	r3, [r7, #16]
 800a730:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2201      	movs	r2, #1
 800a736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a73e:	f043 0202 	orr.w	r2, r3, #2
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f7ff ff50 	bl	800a5ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a752:	b2db      	uxtb	r3, r3
 800a754:	2b03      	cmp	r3, #3
 800a756:	d136      	bne.n	800a7c6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	f003 0302 	and.w	r3, r3, #2
 800a75e:	2b02      	cmp	r3, #2
 800a760:	d109      	bne.n	800a776 <I2S_IRQHandler+0xbc>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a76c:	2b80      	cmp	r3, #128	; 0x80
 800a76e:	d102      	bne.n	800a776 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f7ff ff45 	bl	800a600 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	f003 0308 	and.w	r3, r3, #8
 800a77c:	2b08      	cmp	r3, #8
 800a77e:	d122      	bne.n	800a7c6 <I2S_IRQHandler+0x10c>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	f003 0320 	and.w	r3, r3, #32
 800a78a:	2b20      	cmp	r3, #32
 800a78c:	d11b      	bne.n	800a7c6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	685a      	ldr	r2, [r3, #4]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a79c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800a79e:	2300      	movs	r3, #0
 800a7a0:	60fb      	str	r3, [r7, #12]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	60fb      	str	r3, [r7, #12]
 800a7aa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7b8:	f043 0204 	orr.w	r2, r3, #4
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f7ff ff13 	bl	800a5ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a7c6:	bf00      	nop
 800a7c8:	3718      	adds	r7, #24
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
	...

0800a7d0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b088      	sub	sp, #32
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4aa2      	ldr	r2, [pc, #648]	; (800aa70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d101      	bne.n	800a7ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800a7ea:	4ba2      	ldr	r3, [pc, #648]	; (800aa74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800a7ec:	e001      	b.n	800a7f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800a7ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a9b      	ldr	r2, [pc, #620]	; (800aa70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d101      	bne.n	800a80c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800a808:	4b9a      	ldr	r3, [pc, #616]	; (800aa74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800a80a:	e001      	b.n	800a810 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800a80c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a81c:	d004      	beq.n	800a828 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	2b00      	cmp	r3, #0
 800a824:	f040 8099 	bne.w	800a95a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	f003 0302 	and.w	r3, r3, #2
 800a82e:	2b02      	cmp	r3, #2
 800a830:	d107      	bne.n	800a842 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d002      	beq.n	800a842 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 f925 	bl	800aa8c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	f003 0301 	and.w	r3, r3, #1
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d107      	bne.n	800a85c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a852:	2b00      	cmp	r3, #0
 800a854:	d002      	beq.n	800a85c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 f9c8 	bl	800abec <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800a85c:	69bb      	ldr	r3, [r7, #24]
 800a85e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a862:	2b40      	cmp	r3, #64	; 0x40
 800a864:	d13a      	bne.n	800a8dc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	f003 0320 	and.w	r3, r3, #32
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d035      	beq.n	800a8dc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a7e      	ldr	r2, [pc, #504]	; (800aa70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d101      	bne.n	800a87e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800a87a:	4b7e      	ldr	r3, [pc, #504]	; (800aa74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800a87c:	e001      	b.n	800a882 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800a87e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a882:	685a      	ldr	r2, [r3, #4]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4979      	ldr	r1, [pc, #484]	; (800aa70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800a88a:	428b      	cmp	r3, r1
 800a88c:	d101      	bne.n	800a892 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800a88e:	4b79      	ldr	r3, [pc, #484]	; (800aa74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800a890:	e001      	b.n	800a896 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800a892:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a896:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a89a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	685a      	ldr	r2, [r3, #4]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a8aa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	60fb      	str	r3, [r7, #12]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	60fb      	str	r3, [r7, #12]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	60fb      	str	r3, [r7, #12]
 800a8c0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8ce:	f043 0202 	orr.w	r2, r3, #2
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f7ff fe88 	bl	800a5ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800a8dc:	69fb      	ldr	r3, [r7, #28]
 800a8de:	f003 0308 	and.w	r3, r3, #8
 800a8e2:	2b08      	cmp	r3, #8
 800a8e4:	f040 80be 	bne.w	800aa64 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	f003 0320 	and.w	r3, r3, #32
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f000 80b8 	beq.w	800aa64 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	685a      	ldr	r2, [r3, #4]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a902:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a59      	ldr	r2, [pc, #356]	; (800aa70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d101      	bne.n	800a912 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800a90e:	4b59      	ldr	r3, [pc, #356]	; (800aa74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800a910:	e001      	b.n	800a916 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800a912:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a916:	685a      	ldr	r2, [r3, #4]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4954      	ldr	r1, [pc, #336]	; (800aa70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800a91e:	428b      	cmp	r3, r1
 800a920:	d101      	bne.n	800a926 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800a922:	4b54      	ldr	r3, [pc, #336]	; (800aa74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800a924:	e001      	b.n	800a92a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800a926:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a92a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a92e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800a930:	2300      	movs	r3, #0
 800a932:	60bb      	str	r3, [r7, #8]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	60bb      	str	r3, [r7, #8]
 800a93c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2201      	movs	r2, #1
 800a942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a94a:	f043 0204 	orr.w	r2, r3, #4
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f7ff fe4a 	bl	800a5ec <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800a958:	e084      	b.n	800aa64 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800a95a:	69bb      	ldr	r3, [r7, #24]
 800a95c:	f003 0302 	and.w	r3, r3, #2
 800a960:	2b02      	cmp	r3, #2
 800a962:	d107      	bne.n	800a974 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d002      	beq.n	800a974 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f8be 	bl	800aaf0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800a974:	69fb      	ldr	r3, [r7, #28]
 800a976:	f003 0301 	and.w	r3, r3, #1
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d107      	bne.n	800a98e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a984:	2b00      	cmp	r3, #0
 800a986:	d002      	beq.n	800a98e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 f8fd 	bl	800ab88 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a994:	2b40      	cmp	r3, #64	; 0x40
 800a996:	d12f      	bne.n	800a9f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	f003 0320 	and.w	r3, r3, #32
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d02a      	beq.n	800a9f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	685a      	ldr	r2, [r3, #4]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a9b0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4a2e      	ldr	r2, [pc, #184]	; (800aa70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d101      	bne.n	800a9c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800a9bc:	4b2d      	ldr	r3, [pc, #180]	; (800aa74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800a9be:	e001      	b.n	800a9c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800a9c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a9c4:	685a      	ldr	r2, [r3, #4]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4929      	ldr	r1, [pc, #164]	; (800aa70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800a9cc:	428b      	cmp	r3, r1
 800a9ce:	d101      	bne.n	800a9d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800a9d0:	4b28      	ldr	r3, [pc, #160]	; (800aa74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800a9d2:	e001      	b.n	800a9d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800a9d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800a9d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a9dc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9ea:	f043 0202 	orr.w	r2, r3, #2
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f7ff fdfa 	bl	800a5ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800a9f8:	69bb      	ldr	r3, [r7, #24]
 800a9fa:	f003 0308 	and.w	r3, r3, #8
 800a9fe:	2b08      	cmp	r3, #8
 800aa00:	d131      	bne.n	800aa66 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	f003 0320 	and.w	r3, r3, #32
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d02c      	beq.n	800aa66 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a17      	ldr	r2, [pc, #92]	; (800aa70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d101      	bne.n	800aa1a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800aa16:	4b17      	ldr	r3, [pc, #92]	; (800aa74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800aa18:	e001      	b.n	800aa1e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800aa1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800aa1e:	685a      	ldr	r2, [r3, #4]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4912      	ldr	r1, [pc, #72]	; (800aa70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800aa26:	428b      	cmp	r3, r1
 800aa28:	d101      	bne.n	800aa2e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800aa2a:	4b12      	ldr	r3, [pc, #72]	; (800aa74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800aa2c:	e001      	b.n	800aa32 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800aa2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800aa32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800aa36:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	685a      	ldr	r2, [r3, #4]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800aa46:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa54:	f043 0204 	orr.w	r2, r3, #4
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f7ff fdc5 	bl	800a5ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800aa62:	e000      	b.n	800aa66 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800aa64:	bf00      	nop
}
 800aa66:	bf00      	nop
 800aa68:	3720      	adds	r7, #32
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	40003800 	.word	0x40003800
 800aa74:	40003400 	.word	0x40003400

0800aa78 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800aa80:	bf00      	nop
 800aa82:	370c      	adds	r7, #12
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa98:	1c99      	adds	r1, r3, #2
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	6251      	str	r1, [r2, #36]	; 0x24
 800aa9e:	881a      	ldrh	r2, [r3, #0]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	3b01      	subs	r3, #1
 800aaae:	b29a      	uxth	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d113      	bne.n	800aae6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	685a      	ldr	r2, [r3, #4]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800aacc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d106      	bne.n	800aae6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2201      	movs	r2, #1
 800aadc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f7ff ffc9 	bl	800aa78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800aae6:	bf00      	nop
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
	...

0800aaf0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafc:	1c99      	adds	r1, r3, #2
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	6251      	str	r1, [r2, #36]	; 0x24
 800ab02:	8819      	ldrh	r1, [r3, #0]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a1d      	ldr	r2, [pc, #116]	; (800ab80 <I2SEx_TxISR_I2SExt+0x90>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d101      	bne.n	800ab12 <I2SEx_TxISR_I2SExt+0x22>
 800ab0e:	4b1d      	ldr	r3, [pc, #116]	; (800ab84 <I2SEx_TxISR_I2SExt+0x94>)
 800ab10:	e001      	b.n	800ab16 <I2SEx_TxISR_I2SExt+0x26>
 800ab12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800ab16:	460a      	mov	r2, r1
 800ab18:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	3b01      	subs	r3, #1
 800ab22:	b29a      	uxth	r2, r3
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d121      	bne.n	800ab76 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a12      	ldr	r2, [pc, #72]	; (800ab80 <I2SEx_TxISR_I2SExt+0x90>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d101      	bne.n	800ab40 <I2SEx_TxISR_I2SExt+0x50>
 800ab3c:	4b11      	ldr	r3, [pc, #68]	; (800ab84 <I2SEx_TxISR_I2SExt+0x94>)
 800ab3e:	e001      	b.n	800ab44 <I2SEx_TxISR_I2SExt+0x54>
 800ab40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800ab44:	685a      	ldr	r2, [r3, #4]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	490d      	ldr	r1, [pc, #52]	; (800ab80 <I2SEx_TxISR_I2SExt+0x90>)
 800ab4c:	428b      	cmp	r3, r1
 800ab4e:	d101      	bne.n	800ab54 <I2SEx_TxISR_I2SExt+0x64>
 800ab50:	4b0c      	ldr	r3, [pc, #48]	; (800ab84 <I2SEx_TxISR_I2SExt+0x94>)
 800ab52:	e001      	b.n	800ab58 <I2SEx_TxISR_I2SExt+0x68>
 800ab54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800ab58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ab5c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d106      	bne.n	800ab76 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f7ff ff81 	bl	800aa78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800ab76:	bf00      	nop
 800ab78:	3708      	adds	r7, #8
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	40003800 	.word	0x40003800
 800ab84:	40003400 	.word	0x40003400

0800ab88 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	68d8      	ldr	r0, [r3, #12]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9a:	1c99      	adds	r1, r3, #2
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	62d1      	str	r1, [r2, #44]	; 0x2c
 800aba0:	b282      	uxth	r2, r0
 800aba2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	3b01      	subs	r3, #1
 800abac:	b29a      	uxth	r2, r3
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d113      	bne.n	800abe4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	685a      	ldr	r2, [r3, #4]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800abca:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d106      	bne.n	800abe4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2201      	movs	r2, #1
 800abda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f7ff ff4a 	bl	800aa78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800abe4:	bf00      	nop
 800abe6:	3708      	adds	r7, #8
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a20      	ldr	r2, [pc, #128]	; (800ac7c <I2SEx_RxISR_I2SExt+0x90>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d101      	bne.n	800ac02 <I2SEx_RxISR_I2SExt+0x16>
 800abfe:	4b20      	ldr	r3, [pc, #128]	; (800ac80 <I2SEx_RxISR_I2SExt+0x94>)
 800ac00:	e001      	b.n	800ac06 <I2SEx_RxISR_I2SExt+0x1a>
 800ac02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800ac06:	68d8      	ldr	r0, [r3, #12]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac0c:	1c99      	adds	r1, r3, #2
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	62d1      	str	r1, [r2, #44]	; 0x2c
 800ac12:	b282      	uxth	r2, r0
 800ac14:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	3b01      	subs	r3, #1
 800ac1e:	b29a      	uxth	r2, r3
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d121      	bne.n	800ac72 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4a12      	ldr	r2, [pc, #72]	; (800ac7c <I2SEx_RxISR_I2SExt+0x90>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d101      	bne.n	800ac3c <I2SEx_RxISR_I2SExt+0x50>
 800ac38:	4b11      	ldr	r3, [pc, #68]	; (800ac80 <I2SEx_RxISR_I2SExt+0x94>)
 800ac3a:	e001      	b.n	800ac40 <I2SEx_RxISR_I2SExt+0x54>
 800ac3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800ac40:	685a      	ldr	r2, [r3, #4]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	490d      	ldr	r1, [pc, #52]	; (800ac7c <I2SEx_RxISR_I2SExt+0x90>)
 800ac48:	428b      	cmp	r3, r1
 800ac4a:	d101      	bne.n	800ac50 <I2SEx_RxISR_I2SExt+0x64>
 800ac4c:	4b0c      	ldr	r3, [pc, #48]	; (800ac80 <I2SEx_RxISR_I2SExt+0x94>)
 800ac4e:	e001      	b.n	800ac54 <I2SEx_RxISR_I2SExt+0x68>
 800ac50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800ac54:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800ac58:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d106      	bne.n	800ac72 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2201      	movs	r2, #1
 800ac68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f7ff ff03 	bl	800aa78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800ac72:	bf00      	nop
 800ac74:	3708      	adds	r7, #8
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	40003800 	.word	0x40003800
 800ac80:	40003400 	.word	0x40003400

0800ac84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b086      	sub	sp, #24
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d101      	bne.n	800ac96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	e264      	b.n	800b160 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f003 0301 	and.w	r3, r3, #1
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d075      	beq.n	800ad8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800aca2:	4ba3      	ldr	r3, [pc, #652]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	f003 030c 	and.w	r3, r3, #12
 800acaa:	2b04      	cmp	r3, #4
 800acac:	d00c      	beq.n	800acc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800acae:	4ba0      	ldr	r3, [pc, #640]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800acb0:	689b      	ldr	r3, [r3, #8]
 800acb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800acb6:	2b08      	cmp	r3, #8
 800acb8:	d112      	bne.n	800ace0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800acba:	4b9d      	ldr	r3, [pc, #628]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800acc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800acc6:	d10b      	bne.n	800ace0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800acc8:	4b99      	ldr	r3, [pc, #612]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d05b      	beq.n	800ad8c <HAL_RCC_OscConfig+0x108>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d157      	bne.n	800ad8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800acdc:	2301      	movs	r3, #1
 800acde:	e23f      	b.n	800b160 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ace8:	d106      	bne.n	800acf8 <HAL_RCC_OscConfig+0x74>
 800acea:	4b91      	ldr	r3, [pc, #580]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4a90      	ldr	r2, [pc, #576]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800acf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800acf4:	6013      	str	r3, [r2, #0]
 800acf6:	e01d      	b.n	800ad34 <HAL_RCC_OscConfig+0xb0>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad00:	d10c      	bne.n	800ad1c <HAL_RCC_OscConfig+0x98>
 800ad02:	4b8b      	ldr	r3, [pc, #556]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a8a      	ldr	r2, [pc, #552]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800ad08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ad0c:	6013      	str	r3, [r2, #0]
 800ad0e:	4b88      	ldr	r3, [pc, #544]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	4a87      	ldr	r2, [pc, #540]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800ad14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad18:	6013      	str	r3, [r2, #0]
 800ad1a:	e00b      	b.n	800ad34 <HAL_RCC_OscConfig+0xb0>
 800ad1c:	4b84      	ldr	r3, [pc, #528]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a83      	ldr	r2, [pc, #524]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800ad22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad26:	6013      	str	r3, [r2, #0]
 800ad28:	4b81      	ldr	r3, [pc, #516]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a80      	ldr	r2, [pc, #512]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800ad2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ad32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d013      	beq.n	800ad64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad3c:	f7fb fe28 	bl	8006990 <HAL_GetTick>
 800ad40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad42:	e008      	b.n	800ad56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ad44:	f7fb fe24 	bl	8006990 <HAL_GetTick>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	1ad3      	subs	r3, r2, r3
 800ad4e:	2b64      	cmp	r3, #100	; 0x64
 800ad50:	d901      	bls.n	800ad56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ad52:	2303      	movs	r3, #3
 800ad54:	e204      	b.n	800b160 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad56:	4b76      	ldr	r3, [pc, #472]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d0f0      	beq.n	800ad44 <HAL_RCC_OscConfig+0xc0>
 800ad62:	e014      	b.n	800ad8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad64:	f7fb fe14 	bl	8006990 <HAL_GetTick>
 800ad68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad6a:	e008      	b.n	800ad7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ad6c:	f7fb fe10 	bl	8006990 <HAL_GetTick>
 800ad70:	4602      	mov	r2, r0
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	1ad3      	subs	r3, r2, r3
 800ad76:	2b64      	cmp	r3, #100	; 0x64
 800ad78:	d901      	bls.n	800ad7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ad7a:	2303      	movs	r3, #3
 800ad7c:	e1f0      	b.n	800b160 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad7e:	4b6c      	ldr	r3, [pc, #432]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d1f0      	bne.n	800ad6c <HAL_RCC_OscConfig+0xe8>
 800ad8a:	e000      	b.n	800ad8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f003 0302 	and.w	r3, r3, #2
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d063      	beq.n	800ae62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ad9a:	4b65      	ldr	r3, [pc, #404]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800ad9c:	689b      	ldr	r3, [r3, #8]
 800ad9e:	f003 030c 	and.w	r3, r3, #12
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d00b      	beq.n	800adbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ada6:	4b62      	ldr	r3, [pc, #392]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800ada8:	689b      	ldr	r3, [r3, #8]
 800adaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800adae:	2b08      	cmp	r3, #8
 800adb0:	d11c      	bne.n	800adec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800adb2:	4b5f      	ldr	r3, [pc, #380]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d116      	bne.n	800adec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800adbe:	4b5c      	ldr	r3, [pc, #368]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f003 0302 	and.w	r3, r3, #2
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d005      	beq.n	800add6 <HAL_RCC_OscConfig+0x152>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	68db      	ldr	r3, [r3, #12]
 800adce:	2b01      	cmp	r3, #1
 800add0:	d001      	beq.n	800add6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800add2:	2301      	movs	r3, #1
 800add4:	e1c4      	b.n	800b160 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800add6:	4b56      	ldr	r3, [pc, #344]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	691b      	ldr	r3, [r3, #16]
 800ade2:	00db      	lsls	r3, r3, #3
 800ade4:	4952      	ldr	r1, [pc, #328]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800ade6:	4313      	orrs	r3, r2
 800ade8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800adea:	e03a      	b.n	800ae62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	68db      	ldr	r3, [r3, #12]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d020      	beq.n	800ae36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800adf4:	4b4f      	ldr	r3, [pc, #316]	; (800af34 <HAL_RCC_OscConfig+0x2b0>)
 800adf6:	2201      	movs	r2, #1
 800adf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adfa:	f7fb fdc9 	bl	8006990 <HAL_GetTick>
 800adfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae00:	e008      	b.n	800ae14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ae02:	f7fb fdc5 	bl	8006990 <HAL_GetTick>
 800ae06:	4602      	mov	r2, r0
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	1ad3      	subs	r3, r2, r3
 800ae0c:	2b02      	cmp	r3, #2
 800ae0e:	d901      	bls.n	800ae14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ae10:	2303      	movs	r3, #3
 800ae12:	e1a5      	b.n	800b160 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae14:	4b46      	ldr	r3, [pc, #280]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f003 0302 	and.w	r3, r3, #2
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d0f0      	beq.n	800ae02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae20:	4b43      	ldr	r3, [pc, #268]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	00db      	lsls	r3, r3, #3
 800ae2e:	4940      	ldr	r1, [pc, #256]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800ae30:	4313      	orrs	r3, r2
 800ae32:	600b      	str	r3, [r1, #0]
 800ae34:	e015      	b.n	800ae62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ae36:	4b3f      	ldr	r3, [pc, #252]	; (800af34 <HAL_RCC_OscConfig+0x2b0>)
 800ae38:	2200      	movs	r2, #0
 800ae3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae3c:	f7fb fda8 	bl	8006990 <HAL_GetTick>
 800ae40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae42:	e008      	b.n	800ae56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ae44:	f7fb fda4 	bl	8006990 <HAL_GetTick>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	1ad3      	subs	r3, r2, r3
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	d901      	bls.n	800ae56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ae52:	2303      	movs	r3, #3
 800ae54:	e184      	b.n	800b160 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae56:	4b36      	ldr	r3, [pc, #216]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f003 0302 	and.w	r3, r3, #2
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d1f0      	bne.n	800ae44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f003 0308 	and.w	r3, r3, #8
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d030      	beq.n	800aed0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	695b      	ldr	r3, [r3, #20]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d016      	beq.n	800aea4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ae76:	4b30      	ldr	r3, [pc, #192]	; (800af38 <HAL_RCC_OscConfig+0x2b4>)
 800ae78:	2201      	movs	r2, #1
 800ae7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae7c:	f7fb fd88 	bl	8006990 <HAL_GetTick>
 800ae80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae82:	e008      	b.n	800ae96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ae84:	f7fb fd84 	bl	8006990 <HAL_GetTick>
 800ae88:	4602      	mov	r2, r0
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	1ad3      	subs	r3, r2, r3
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	d901      	bls.n	800ae96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ae92:	2303      	movs	r3, #3
 800ae94:	e164      	b.n	800b160 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae96:	4b26      	ldr	r3, [pc, #152]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800ae98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae9a:	f003 0302 	and.w	r3, r3, #2
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d0f0      	beq.n	800ae84 <HAL_RCC_OscConfig+0x200>
 800aea2:	e015      	b.n	800aed0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aea4:	4b24      	ldr	r3, [pc, #144]	; (800af38 <HAL_RCC_OscConfig+0x2b4>)
 800aea6:	2200      	movs	r2, #0
 800aea8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aeaa:	f7fb fd71 	bl	8006990 <HAL_GetTick>
 800aeae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aeb0:	e008      	b.n	800aec4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aeb2:	f7fb fd6d 	bl	8006990 <HAL_GetTick>
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	1ad3      	subs	r3, r2, r3
 800aebc:	2b02      	cmp	r3, #2
 800aebe:	d901      	bls.n	800aec4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800aec0:	2303      	movs	r3, #3
 800aec2:	e14d      	b.n	800b160 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aec4:	4b1a      	ldr	r3, [pc, #104]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800aec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aec8:	f003 0302 	and.w	r3, r3, #2
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1f0      	bne.n	800aeb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f003 0304 	and.w	r3, r3, #4
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f000 80a0 	beq.w	800b01e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aede:	2300      	movs	r3, #0
 800aee0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aee2:	4b13      	ldr	r3, [pc, #76]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800aee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d10f      	bne.n	800af0e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aeee:	2300      	movs	r3, #0
 800aef0:	60bb      	str	r3, [r7, #8]
 800aef2:	4b0f      	ldr	r3, [pc, #60]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800aef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef6:	4a0e      	ldr	r2, [pc, #56]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800aef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aefc:	6413      	str	r3, [r2, #64]	; 0x40
 800aefe:	4b0c      	ldr	r3, [pc, #48]	; (800af30 <HAL_RCC_OscConfig+0x2ac>)
 800af00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af06:	60bb      	str	r3, [r7, #8]
 800af08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800af0a:	2301      	movs	r3, #1
 800af0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af0e:	4b0b      	ldr	r3, [pc, #44]	; (800af3c <HAL_RCC_OscConfig+0x2b8>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af16:	2b00      	cmp	r3, #0
 800af18:	d121      	bne.n	800af5e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800af1a:	4b08      	ldr	r3, [pc, #32]	; (800af3c <HAL_RCC_OscConfig+0x2b8>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4a07      	ldr	r2, [pc, #28]	; (800af3c <HAL_RCC_OscConfig+0x2b8>)
 800af20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800af26:	f7fb fd33 	bl	8006990 <HAL_GetTick>
 800af2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af2c:	e011      	b.n	800af52 <HAL_RCC_OscConfig+0x2ce>
 800af2e:	bf00      	nop
 800af30:	40023800 	.word	0x40023800
 800af34:	42470000 	.word	0x42470000
 800af38:	42470e80 	.word	0x42470e80
 800af3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af40:	f7fb fd26 	bl	8006990 <HAL_GetTick>
 800af44:	4602      	mov	r2, r0
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	1ad3      	subs	r3, r2, r3
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	d901      	bls.n	800af52 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800af4e:	2303      	movs	r3, #3
 800af50:	e106      	b.n	800b160 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af52:	4b85      	ldr	r3, [pc, #532]	; (800b168 <HAL_RCC_OscConfig+0x4e4>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d0f0      	beq.n	800af40 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	2b01      	cmp	r3, #1
 800af64:	d106      	bne.n	800af74 <HAL_RCC_OscConfig+0x2f0>
 800af66:	4b81      	ldr	r3, [pc, #516]	; (800b16c <HAL_RCC_OscConfig+0x4e8>)
 800af68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af6a:	4a80      	ldr	r2, [pc, #512]	; (800b16c <HAL_RCC_OscConfig+0x4e8>)
 800af6c:	f043 0301 	orr.w	r3, r3, #1
 800af70:	6713      	str	r3, [r2, #112]	; 0x70
 800af72:	e01c      	b.n	800afae <HAL_RCC_OscConfig+0x32a>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	2b05      	cmp	r3, #5
 800af7a:	d10c      	bne.n	800af96 <HAL_RCC_OscConfig+0x312>
 800af7c:	4b7b      	ldr	r3, [pc, #492]	; (800b16c <HAL_RCC_OscConfig+0x4e8>)
 800af7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af80:	4a7a      	ldr	r2, [pc, #488]	; (800b16c <HAL_RCC_OscConfig+0x4e8>)
 800af82:	f043 0304 	orr.w	r3, r3, #4
 800af86:	6713      	str	r3, [r2, #112]	; 0x70
 800af88:	4b78      	ldr	r3, [pc, #480]	; (800b16c <HAL_RCC_OscConfig+0x4e8>)
 800af8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af8c:	4a77      	ldr	r2, [pc, #476]	; (800b16c <HAL_RCC_OscConfig+0x4e8>)
 800af8e:	f043 0301 	orr.w	r3, r3, #1
 800af92:	6713      	str	r3, [r2, #112]	; 0x70
 800af94:	e00b      	b.n	800afae <HAL_RCC_OscConfig+0x32a>
 800af96:	4b75      	ldr	r3, [pc, #468]	; (800b16c <HAL_RCC_OscConfig+0x4e8>)
 800af98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af9a:	4a74      	ldr	r2, [pc, #464]	; (800b16c <HAL_RCC_OscConfig+0x4e8>)
 800af9c:	f023 0301 	bic.w	r3, r3, #1
 800afa0:	6713      	str	r3, [r2, #112]	; 0x70
 800afa2:	4b72      	ldr	r3, [pc, #456]	; (800b16c <HAL_RCC_OscConfig+0x4e8>)
 800afa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afa6:	4a71      	ldr	r2, [pc, #452]	; (800b16c <HAL_RCC_OscConfig+0x4e8>)
 800afa8:	f023 0304 	bic.w	r3, r3, #4
 800afac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	689b      	ldr	r3, [r3, #8]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d015      	beq.n	800afe2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afb6:	f7fb fceb 	bl	8006990 <HAL_GetTick>
 800afba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afbc:	e00a      	b.n	800afd4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800afbe:	f7fb fce7 	bl	8006990 <HAL_GetTick>
 800afc2:	4602      	mov	r2, r0
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	1ad3      	subs	r3, r2, r3
 800afc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800afcc:	4293      	cmp	r3, r2
 800afce:	d901      	bls.n	800afd4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800afd0:	2303      	movs	r3, #3
 800afd2:	e0c5      	b.n	800b160 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afd4:	4b65      	ldr	r3, [pc, #404]	; (800b16c <HAL_RCC_OscConfig+0x4e8>)
 800afd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afd8:	f003 0302 	and.w	r3, r3, #2
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d0ee      	beq.n	800afbe <HAL_RCC_OscConfig+0x33a>
 800afe0:	e014      	b.n	800b00c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800afe2:	f7fb fcd5 	bl	8006990 <HAL_GetTick>
 800afe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800afe8:	e00a      	b.n	800b000 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800afea:	f7fb fcd1 	bl	8006990 <HAL_GetTick>
 800afee:	4602      	mov	r2, r0
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	1ad3      	subs	r3, r2, r3
 800aff4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aff8:	4293      	cmp	r3, r2
 800affa:	d901      	bls.n	800b000 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800affc:	2303      	movs	r3, #3
 800affe:	e0af      	b.n	800b160 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b000:	4b5a      	ldr	r3, [pc, #360]	; (800b16c <HAL_RCC_OscConfig+0x4e8>)
 800b002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b004:	f003 0302 	and.w	r3, r3, #2
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d1ee      	bne.n	800afea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b00c:	7dfb      	ldrb	r3, [r7, #23]
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d105      	bne.n	800b01e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b012:	4b56      	ldr	r3, [pc, #344]	; (800b16c <HAL_RCC_OscConfig+0x4e8>)
 800b014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b016:	4a55      	ldr	r2, [pc, #340]	; (800b16c <HAL_RCC_OscConfig+0x4e8>)
 800b018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b01c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	699b      	ldr	r3, [r3, #24]
 800b022:	2b00      	cmp	r3, #0
 800b024:	f000 809b 	beq.w	800b15e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b028:	4b50      	ldr	r3, [pc, #320]	; (800b16c <HAL_RCC_OscConfig+0x4e8>)
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	f003 030c 	and.w	r3, r3, #12
 800b030:	2b08      	cmp	r3, #8
 800b032:	d05c      	beq.n	800b0ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	699b      	ldr	r3, [r3, #24]
 800b038:	2b02      	cmp	r3, #2
 800b03a:	d141      	bne.n	800b0c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b03c:	4b4c      	ldr	r3, [pc, #304]	; (800b170 <HAL_RCC_OscConfig+0x4ec>)
 800b03e:	2200      	movs	r2, #0
 800b040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b042:	f7fb fca5 	bl	8006990 <HAL_GetTick>
 800b046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b048:	e008      	b.n	800b05c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b04a:	f7fb fca1 	bl	8006990 <HAL_GetTick>
 800b04e:	4602      	mov	r2, r0
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	1ad3      	subs	r3, r2, r3
 800b054:	2b02      	cmp	r3, #2
 800b056:	d901      	bls.n	800b05c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b058:	2303      	movs	r3, #3
 800b05a:	e081      	b.n	800b160 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b05c:	4b43      	ldr	r3, [pc, #268]	; (800b16c <HAL_RCC_OscConfig+0x4e8>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b064:	2b00      	cmp	r3, #0
 800b066:	d1f0      	bne.n	800b04a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	69da      	ldr	r2, [r3, #28]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6a1b      	ldr	r3, [r3, #32]
 800b070:	431a      	orrs	r2, r3
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b076:	019b      	lsls	r3, r3, #6
 800b078:	431a      	orrs	r2, r3
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b07e:	085b      	lsrs	r3, r3, #1
 800b080:	3b01      	subs	r3, #1
 800b082:	041b      	lsls	r3, r3, #16
 800b084:	431a      	orrs	r2, r3
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b08a:	061b      	lsls	r3, r3, #24
 800b08c:	4937      	ldr	r1, [pc, #220]	; (800b16c <HAL_RCC_OscConfig+0x4e8>)
 800b08e:	4313      	orrs	r3, r2
 800b090:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b092:	4b37      	ldr	r3, [pc, #220]	; (800b170 <HAL_RCC_OscConfig+0x4ec>)
 800b094:	2201      	movs	r2, #1
 800b096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b098:	f7fb fc7a 	bl	8006990 <HAL_GetTick>
 800b09c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b09e:	e008      	b.n	800b0b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b0a0:	f7fb fc76 	bl	8006990 <HAL_GetTick>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	1ad3      	subs	r3, r2, r3
 800b0aa:	2b02      	cmp	r3, #2
 800b0ac:	d901      	bls.n	800b0b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b0ae:	2303      	movs	r3, #3
 800b0b0:	e056      	b.n	800b160 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0b2:	4b2e      	ldr	r3, [pc, #184]	; (800b16c <HAL_RCC_OscConfig+0x4e8>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d0f0      	beq.n	800b0a0 <HAL_RCC_OscConfig+0x41c>
 800b0be:	e04e      	b.n	800b15e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0c0:	4b2b      	ldr	r3, [pc, #172]	; (800b170 <HAL_RCC_OscConfig+0x4ec>)
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b0c6:	f7fb fc63 	bl	8006990 <HAL_GetTick>
 800b0ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0cc:	e008      	b.n	800b0e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b0ce:	f7fb fc5f 	bl	8006990 <HAL_GetTick>
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	1ad3      	subs	r3, r2, r3
 800b0d8:	2b02      	cmp	r3, #2
 800b0da:	d901      	bls.n	800b0e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b0dc:	2303      	movs	r3, #3
 800b0de:	e03f      	b.n	800b160 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0e0:	4b22      	ldr	r3, [pc, #136]	; (800b16c <HAL_RCC_OscConfig+0x4e8>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d1f0      	bne.n	800b0ce <HAL_RCC_OscConfig+0x44a>
 800b0ec:	e037      	b.n	800b15e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	699b      	ldr	r3, [r3, #24]
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d101      	bne.n	800b0fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e032      	b.n	800b160 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b0fa:	4b1c      	ldr	r3, [pc, #112]	; (800b16c <HAL_RCC_OscConfig+0x4e8>)
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	699b      	ldr	r3, [r3, #24]
 800b104:	2b01      	cmp	r3, #1
 800b106:	d028      	beq.n	800b15a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b112:	429a      	cmp	r2, r3
 800b114:	d121      	bne.n	800b15a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b120:	429a      	cmp	r2, r3
 800b122:	d11a      	bne.n	800b15a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b124:	68fa      	ldr	r2, [r7, #12]
 800b126:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b12a:	4013      	ands	r3, r2
 800b12c:	687a      	ldr	r2, [r7, #4]
 800b12e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b130:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b132:	4293      	cmp	r3, r2
 800b134:	d111      	bne.n	800b15a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b140:	085b      	lsrs	r3, r3, #1
 800b142:	3b01      	subs	r3, #1
 800b144:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b146:	429a      	cmp	r2, r3
 800b148:	d107      	bne.n	800b15a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b154:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b156:	429a      	cmp	r2, r3
 800b158:	d001      	beq.n	800b15e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800b15a:	2301      	movs	r3, #1
 800b15c:	e000      	b.n	800b160 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800b15e:	2300      	movs	r3, #0
}
 800b160:	4618      	mov	r0, r3
 800b162:	3718      	adds	r7, #24
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}
 800b168:	40007000 	.word	0x40007000
 800b16c:	40023800 	.word	0x40023800
 800b170:	42470060 	.word	0x42470060

0800b174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b084      	sub	sp, #16
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d101      	bne.n	800b188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b184:	2301      	movs	r3, #1
 800b186:	e0cc      	b.n	800b322 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b188:	4b68      	ldr	r3, [pc, #416]	; (800b32c <HAL_RCC_ClockConfig+0x1b8>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f003 0307 	and.w	r3, r3, #7
 800b190:	683a      	ldr	r2, [r7, #0]
 800b192:	429a      	cmp	r2, r3
 800b194:	d90c      	bls.n	800b1b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b196:	4b65      	ldr	r3, [pc, #404]	; (800b32c <HAL_RCC_ClockConfig+0x1b8>)
 800b198:	683a      	ldr	r2, [r7, #0]
 800b19a:	b2d2      	uxtb	r2, r2
 800b19c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b19e:	4b63      	ldr	r3, [pc, #396]	; (800b32c <HAL_RCC_ClockConfig+0x1b8>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f003 0307 	and.w	r3, r3, #7
 800b1a6:	683a      	ldr	r2, [r7, #0]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d001      	beq.n	800b1b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	e0b8      	b.n	800b322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f003 0302 	and.w	r3, r3, #2
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d020      	beq.n	800b1fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f003 0304 	and.w	r3, r3, #4
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d005      	beq.n	800b1d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b1c8:	4b59      	ldr	r3, [pc, #356]	; (800b330 <HAL_RCC_ClockConfig+0x1bc>)
 800b1ca:	689b      	ldr	r3, [r3, #8]
 800b1cc:	4a58      	ldr	r2, [pc, #352]	; (800b330 <HAL_RCC_ClockConfig+0x1bc>)
 800b1ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b1d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f003 0308 	and.w	r3, r3, #8
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d005      	beq.n	800b1ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b1e0:	4b53      	ldr	r3, [pc, #332]	; (800b330 <HAL_RCC_ClockConfig+0x1bc>)
 800b1e2:	689b      	ldr	r3, [r3, #8]
 800b1e4:	4a52      	ldr	r2, [pc, #328]	; (800b330 <HAL_RCC_ClockConfig+0x1bc>)
 800b1e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b1ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b1ec:	4b50      	ldr	r3, [pc, #320]	; (800b330 <HAL_RCC_ClockConfig+0x1bc>)
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	494d      	ldr	r1, [pc, #308]	; (800b330 <HAL_RCC_ClockConfig+0x1bc>)
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f003 0301 	and.w	r3, r3, #1
 800b206:	2b00      	cmp	r3, #0
 800b208:	d044      	beq.n	800b294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	2b01      	cmp	r3, #1
 800b210:	d107      	bne.n	800b222 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b212:	4b47      	ldr	r3, [pc, #284]	; (800b330 <HAL_RCC_ClockConfig+0x1bc>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d119      	bne.n	800b252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b21e:	2301      	movs	r3, #1
 800b220:	e07f      	b.n	800b322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	2b02      	cmp	r3, #2
 800b228:	d003      	beq.n	800b232 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b22e:	2b03      	cmp	r3, #3
 800b230:	d107      	bne.n	800b242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b232:	4b3f      	ldr	r3, [pc, #252]	; (800b330 <HAL_RCC_ClockConfig+0x1bc>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d109      	bne.n	800b252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b23e:	2301      	movs	r3, #1
 800b240:	e06f      	b.n	800b322 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b242:	4b3b      	ldr	r3, [pc, #236]	; (800b330 <HAL_RCC_ClockConfig+0x1bc>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f003 0302 	and.w	r3, r3, #2
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d101      	bne.n	800b252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b24e:	2301      	movs	r3, #1
 800b250:	e067      	b.n	800b322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b252:	4b37      	ldr	r3, [pc, #220]	; (800b330 <HAL_RCC_ClockConfig+0x1bc>)
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	f023 0203 	bic.w	r2, r3, #3
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	4934      	ldr	r1, [pc, #208]	; (800b330 <HAL_RCC_ClockConfig+0x1bc>)
 800b260:	4313      	orrs	r3, r2
 800b262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b264:	f7fb fb94 	bl	8006990 <HAL_GetTick>
 800b268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b26a:	e00a      	b.n	800b282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b26c:	f7fb fb90 	bl	8006990 <HAL_GetTick>
 800b270:	4602      	mov	r2, r0
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	1ad3      	subs	r3, r2, r3
 800b276:	f241 3288 	movw	r2, #5000	; 0x1388
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d901      	bls.n	800b282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b27e:	2303      	movs	r3, #3
 800b280:	e04f      	b.n	800b322 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b282:	4b2b      	ldr	r3, [pc, #172]	; (800b330 <HAL_RCC_ClockConfig+0x1bc>)
 800b284:	689b      	ldr	r3, [r3, #8]
 800b286:	f003 020c 	and.w	r2, r3, #12
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	429a      	cmp	r2, r3
 800b292:	d1eb      	bne.n	800b26c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b294:	4b25      	ldr	r3, [pc, #148]	; (800b32c <HAL_RCC_ClockConfig+0x1b8>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f003 0307 	and.w	r3, r3, #7
 800b29c:	683a      	ldr	r2, [r7, #0]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d20c      	bcs.n	800b2bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2a2:	4b22      	ldr	r3, [pc, #136]	; (800b32c <HAL_RCC_ClockConfig+0x1b8>)
 800b2a4:	683a      	ldr	r2, [r7, #0]
 800b2a6:	b2d2      	uxtb	r2, r2
 800b2a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2aa:	4b20      	ldr	r3, [pc, #128]	; (800b32c <HAL_RCC_ClockConfig+0x1b8>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f003 0307 	and.w	r3, r3, #7
 800b2b2:	683a      	ldr	r2, [r7, #0]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d001      	beq.n	800b2bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	e032      	b.n	800b322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f003 0304 	and.w	r3, r3, #4
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d008      	beq.n	800b2da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b2c8:	4b19      	ldr	r3, [pc, #100]	; (800b330 <HAL_RCC_ClockConfig+0x1bc>)
 800b2ca:	689b      	ldr	r3, [r3, #8]
 800b2cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	4916      	ldr	r1, [pc, #88]	; (800b330 <HAL_RCC_ClockConfig+0x1bc>)
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f003 0308 	and.w	r3, r3, #8
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d009      	beq.n	800b2fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b2e6:	4b12      	ldr	r3, [pc, #72]	; (800b330 <HAL_RCC_ClockConfig+0x1bc>)
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	691b      	ldr	r3, [r3, #16]
 800b2f2:	00db      	lsls	r3, r3, #3
 800b2f4:	490e      	ldr	r1, [pc, #56]	; (800b330 <HAL_RCC_ClockConfig+0x1bc>)
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b2fa:	f000 f821 	bl	800b340 <HAL_RCC_GetSysClockFreq>
 800b2fe:	4602      	mov	r2, r0
 800b300:	4b0b      	ldr	r3, [pc, #44]	; (800b330 <HAL_RCC_ClockConfig+0x1bc>)
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	091b      	lsrs	r3, r3, #4
 800b306:	f003 030f 	and.w	r3, r3, #15
 800b30a:	490a      	ldr	r1, [pc, #40]	; (800b334 <HAL_RCC_ClockConfig+0x1c0>)
 800b30c:	5ccb      	ldrb	r3, [r1, r3]
 800b30e:	fa22 f303 	lsr.w	r3, r2, r3
 800b312:	4a09      	ldr	r2, [pc, #36]	; (800b338 <HAL_RCC_ClockConfig+0x1c4>)
 800b314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b316:	4b09      	ldr	r3, [pc, #36]	; (800b33c <HAL_RCC_ClockConfig+0x1c8>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7fb faf4 	bl	8006908 <HAL_InitTick>

  return HAL_OK;
 800b320:	2300      	movs	r3, #0
}
 800b322:	4618      	mov	r0, r3
 800b324:	3710      	adds	r7, #16
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	40023c00 	.word	0x40023c00
 800b330:	40023800 	.word	0x40023800
 800b334:	08011354 	.word	0x08011354
 800b338:	20000008 	.word	0x20000008
 800b33c:	200001e4 	.word	0x200001e4

0800b340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b340:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b344:	b084      	sub	sp, #16
 800b346:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b348:	2300      	movs	r3, #0
 800b34a:	607b      	str	r3, [r7, #4]
 800b34c:	2300      	movs	r3, #0
 800b34e:	60fb      	str	r3, [r7, #12]
 800b350:	2300      	movs	r3, #0
 800b352:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b354:	2300      	movs	r3, #0
 800b356:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b358:	4b67      	ldr	r3, [pc, #412]	; (800b4f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b35a:	689b      	ldr	r3, [r3, #8]
 800b35c:	f003 030c 	and.w	r3, r3, #12
 800b360:	2b08      	cmp	r3, #8
 800b362:	d00d      	beq.n	800b380 <HAL_RCC_GetSysClockFreq+0x40>
 800b364:	2b08      	cmp	r3, #8
 800b366:	f200 80bd 	bhi.w	800b4e4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d002      	beq.n	800b374 <HAL_RCC_GetSysClockFreq+0x34>
 800b36e:	2b04      	cmp	r3, #4
 800b370:	d003      	beq.n	800b37a <HAL_RCC_GetSysClockFreq+0x3a>
 800b372:	e0b7      	b.n	800b4e4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b374:	4b61      	ldr	r3, [pc, #388]	; (800b4fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 800b376:	60bb      	str	r3, [r7, #8]
       break;
 800b378:	e0b7      	b.n	800b4ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b37a:	4b61      	ldr	r3, [pc, #388]	; (800b500 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800b37c:	60bb      	str	r3, [r7, #8]
      break;
 800b37e:	e0b4      	b.n	800b4ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b380:	4b5d      	ldr	r3, [pc, #372]	; (800b4f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b388:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b38a:	4b5b      	ldr	r3, [pc, #364]	; (800b4f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b392:	2b00      	cmp	r3, #0
 800b394:	d04d      	beq.n	800b432 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b396:	4b58      	ldr	r3, [pc, #352]	; (800b4f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	099b      	lsrs	r3, r3, #6
 800b39c:	461a      	mov	r2, r3
 800b39e:	f04f 0300 	mov.w	r3, #0
 800b3a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b3a6:	f04f 0100 	mov.w	r1, #0
 800b3aa:	ea02 0800 	and.w	r8, r2, r0
 800b3ae:	ea03 0901 	and.w	r9, r3, r1
 800b3b2:	4640      	mov	r0, r8
 800b3b4:	4649      	mov	r1, r9
 800b3b6:	f04f 0200 	mov.w	r2, #0
 800b3ba:	f04f 0300 	mov.w	r3, #0
 800b3be:	014b      	lsls	r3, r1, #5
 800b3c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b3c4:	0142      	lsls	r2, r0, #5
 800b3c6:	4610      	mov	r0, r2
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	ebb0 0008 	subs.w	r0, r0, r8
 800b3ce:	eb61 0109 	sbc.w	r1, r1, r9
 800b3d2:	f04f 0200 	mov.w	r2, #0
 800b3d6:	f04f 0300 	mov.w	r3, #0
 800b3da:	018b      	lsls	r3, r1, #6
 800b3dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b3e0:	0182      	lsls	r2, r0, #6
 800b3e2:	1a12      	subs	r2, r2, r0
 800b3e4:	eb63 0301 	sbc.w	r3, r3, r1
 800b3e8:	f04f 0000 	mov.w	r0, #0
 800b3ec:	f04f 0100 	mov.w	r1, #0
 800b3f0:	00d9      	lsls	r1, r3, #3
 800b3f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b3f6:	00d0      	lsls	r0, r2, #3
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	460b      	mov	r3, r1
 800b3fc:	eb12 0208 	adds.w	r2, r2, r8
 800b400:	eb43 0309 	adc.w	r3, r3, r9
 800b404:	f04f 0000 	mov.w	r0, #0
 800b408:	f04f 0100 	mov.w	r1, #0
 800b40c:	0259      	lsls	r1, r3, #9
 800b40e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800b412:	0250      	lsls	r0, r2, #9
 800b414:	4602      	mov	r2, r0
 800b416:	460b      	mov	r3, r1
 800b418:	4610      	mov	r0, r2
 800b41a:	4619      	mov	r1, r3
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	461a      	mov	r2, r3
 800b420:	f04f 0300 	mov.w	r3, #0
 800b424:	f7f5 fbb4 	bl	8000b90 <__aeabi_uldivmod>
 800b428:	4602      	mov	r2, r0
 800b42a:	460b      	mov	r3, r1
 800b42c:	4613      	mov	r3, r2
 800b42e:	60fb      	str	r3, [r7, #12]
 800b430:	e04a      	b.n	800b4c8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b432:	4b31      	ldr	r3, [pc, #196]	; (800b4f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	099b      	lsrs	r3, r3, #6
 800b438:	461a      	mov	r2, r3
 800b43a:	f04f 0300 	mov.w	r3, #0
 800b43e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b442:	f04f 0100 	mov.w	r1, #0
 800b446:	ea02 0400 	and.w	r4, r2, r0
 800b44a:	ea03 0501 	and.w	r5, r3, r1
 800b44e:	4620      	mov	r0, r4
 800b450:	4629      	mov	r1, r5
 800b452:	f04f 0200 	mov.w	r2, #0
 800b456:	f04f 0300 	mov.w	r3, #0
 800b45a:	014b      	lsls	r3, r1, #5
 800b45c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b460:	0142      	lsls	r2, r0, #5
 800b462:	4610      	mov	r0, r2
 800b464:	4619      	mov	r1, r3
 800b466:	1b00      	subs	r0, r0, r4
 800b468:	eb61 0105 	sbc.w	r1, r1, r5
 800b46c:	f04f 0200 	mov.w	r2, #0
 800b470:	f04f 0300 	mov.w	r3, #0
 800b474:	018b      	lsls	r3, r1, #6
 800b476:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b47a:	0182      	lsls	r2, r0, #6
 800b47c:	1a12      	subs	r2, r2, r0
 800b47e:	eb63 0301 	sbc.w	r3, r3, r1
 800b482:	f04f 0000 	mov.w	r0, #0
 800b486:	f04f 0100 	mov.w	r1, #0
 800b48a:	00d9      	lsls	r1, r3, #3
 800b48c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b490:	00d0      	lsls	r0, r2, #3
 800b492:	4602      	mov	r2, r0
 800b494:	460b      	mov	r3, r1
 800b496:	1912      	adds	r2, r2, r4
 800b498:	eb45 0303 	adc.w	r3, r5, r3
 800b49c:	f04f 0000 	mov.w	r0, #0
 800b4a0:	f04f 0100 	mov.w	r1, #0
 800b4a4:	0299      	lsls	r1, r3, #10
 800b4a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b4aa:	0290      	lsls	r0, r2, #10
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	4610      	mov	r0, r2
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	f04f 0300 	mov.w	r3, #0
 800b4bc:	f7f5 fb68 	bl	8000b90 <__aeabi_uldivmod>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	4613      	mov	r3, r2
 800b4c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b4c8:	4b0b      	ldr	r3, [pc, #44]	; (800b4f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	0c1b      	lsrs	r3, r3, #16
 800b4ce:	f003 0303 	and.w	r3, r3, #3
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	005b      	lsls	r3, r3, #1
 800b4d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4e0:	60bb      	str	r3, [r7, #8]
      break;
 800b4e2:	e002      	b.n	800b4ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b4e4:	4b05      	ldr	r3, [pc, #20]	; (800b4fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 800b4e6:	60bb      	str	r3, [r7, #8]
      break;
 800b4e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b4ea:	68bb      	ldr	r3, [r7, #8]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3710      	adds	r7, #16
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b4f6:	bf00      	nop
 800b4f8:	40023800 	.word	0x40023800
 800b4fc:	00f42400 	.word	0x00f42400
 800b500:	007a1200 	.word	0x007a1200

0800b504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b504:	b480      	push	{r7}
 800b506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b508:	4b03      	ldr	r3, [pc, #12]	; (800b518 <HAL_RCC_GetHCLKFreq+0x14>)
 800b50a:	681b      	ldr	r3, [r3, #0]
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr
 800b516:	bf00      	nop
 800b518:	20000008 	.word	0x20000008

0800b51c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b520:	f7ff fff0 	bl	800b504 <HAL_RCC_GetHCLKFreq>
 800b524:	4602      	mov	r2, r0
 800b526:	4b05      	ldr	r3, [pc, #20]	; (800b53c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	0a9b      	lsrs	r3, r3, #10
 800b52c:	f003 0307 	and.w	r3, r3, #7
 800b530:	4903      	ldr	r1, [pc, #12]	; (800b540 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b532:	5ccb      	ldrb	r3, [r1, r3]
 800b534:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b538:	4618      	mov	r0, r3
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	40023800 	.word	0x40023800
 800b540:	08011364 	.word	0x08011364

0800b544 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b54c:	2300      	movs	r3, #0
 800b54e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800b550:	2300      	movs	r3, #0
 800b552:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f003 0301 	and.w	r3, r3, #1
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d105      	bne.n	800b56c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d035      	beq.n	800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b56c:	4b62      	ldr	r3, [pc, #392]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800b56e:	2200      	movs	r2, #0
 800b570:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b572:	f7fb fa0d 	bl	8006990 <HAL_GetTick>
 800b576:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b578:	e008      	b.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b57a:	f7fb fa09 	bl	8006990 <HAL_GetTick>
 800b57e:	4602      	mov	r2, r0
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	1ad3      	subs	r3, r2, r3
 800b584:	2b02      	cmp	r3, #2
 800b586:	d901      	bls.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b588:	2303      	movs	r3, #3
 800b58a:	e0b0      	b.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b58c:	4b5b      	ldr	r3, [pc, #364]	; (800b6fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b594:	2b00      	cmp	r3, #0
 800b596:	d1f0      	bne.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	019a      	lsls	r2, r3, #6
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	689b      	ldr	r3, [r3, #8]
 800b5a2:	071b      	lsls	r3, r3, #28
 800b5a4:	4955      	ldr	r1, [pc, #340]	; (800b6fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b5ac:	4b52      	ldr	r3, [pc, #328]	; (800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b5b2:	f7fb f9ed 	bl	8006990 <HAL_GetTick>
 800b5b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b5b8:	e008      	b.n	800b5cc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b5ba:	f7fb f9e9 	bl	8006990 <HAL_GetTick>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	1ad3      	subs	r3, r2, r3
 800b5c4:	2b02      	cmp	r3, #2
 800b5c6:	d901      	bls.n	800b5cc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b5c8:	2303      	movs	r3, #3
 800b5ca:	e090      	b.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b5cc:	4b4b      	ldr	r3, [pc, #300]	; (800b6fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d0f0      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f003 0302 	and.w	r3, r3, #2
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	f000 8083 	beq.w	800b6ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	60fb      	str	r3, [r7, #12]
 800b5ea:	4b44      	ldr	r3, [pc, #272]	; (800b6fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ee:	4a43      	ldr	r2, [pc, #268]	; (800b6fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b5f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5f4:	6413      	str	r3, [r2, #64]	; 0x40
 800b5f6:	4b41      	ldr	r3, [pc, #260]	; (800b6fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5fe:	60fb      	str	r3, [r7, #12]
 800b600:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b602:	4b3f      	ldr	r3, [pc, #252]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	4a3e      	ldr	r2, [pc, #248]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b60c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b60e:	f7fb f9bf 	bl	8006990 <HAL_GetTick>
 800b612:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b614:	e008      	b.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b616:	f7fb f9bb 	bl	8006990 <HAL_GetTick>
 800b61a:	4602      	mov	r2, r0
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	1ad3      	subs	r3, r2, r3
 800b620:	2b02      	cmp	r3, #2
 800b622:	d901      	bls.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800b624:	2303      	movs	r3, #3
 800b626:	e062      	b.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b628:	4b35      	ldr	r3, [pc, #212]	; (800b700 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b630:	2b00      	cmp	r3, #0
 800b632:	d0f0      	beq.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b634:	4b31      	ldr	r3, [pc, #196]	; (800b6fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b63c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d02f      	beq.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b64c:	693a      	ldr	r2, [r7, #16]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d028      	beq.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b652:	4b2a      	ldr	r3, [pc, #168]	; (800b6fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b65a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b65c:	4b29      	ldr	r3, [pc, #164]	; (800b704 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800b65e:	2201      	movs	r2, #1
 800b660:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b662:	4b28      	ldr	r3, [pc, #160]	; (800b704 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800b664:	2200      	movs	r2, #0
 800b666:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b668:	4a24      	ldr	r2, [pc, #144]	; (800b6fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b66e:	4b23      	ldr	r3, [pc, #140]	; (800b6fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b672:	f003 0301 	and.w	r3, r3, #1
 800b676:	2b01      	cmp	r3, #1
 800b678:	d114      	bne.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b67a:	f7fb f989 	bl	8006990 <HAL_GetTick>
 800b67e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b680:	e00a      	b.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b682:	f7fb f985 	bl	8006990 <HAL_GetTick>
 800b686:	4602      	mov	r2, r0
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	1ad3      	subs	r3, r2, r3
 800b68c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b690:	4293      	cmp	r3, r2
 800b692:	d901      	bls.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800b694:	2303      	movs	r3, #3
 800b696:	e02a      	b.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b698:	4b18      	ldr	r3, [pc, #96]	; (800b6fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b69a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b69c:	f003 0302 	and.w	r3, r3, #2
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d0ee      	beq.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6b0:	d10d      	bne.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800b6b2:	4b12      	ldr	r3, [pc, #72]	; (800b6fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b6b4:	689b      	ldr	r3, [r3, #8]
 800b6b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	68db      	ldr	r3, [r3, #12]
 800b6be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b6c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6c6:	490d      	ldr	r1, [pc, #52]	; (800b6fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	608b      	str	r3, [r1, #8]
 800b6cc:	e005      	b.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b6ce:	4b0b      	ldr	r3, [pc, #44]	; (800b6fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	4a0a      	ldr	r2, [pc, #40]	; (800b6fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b6d4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b6d8:	6093      	str	r3, [r2, #8]
 800b6da:	4b08      	ldr	r3, [pc, #32]	; (800b6fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b6dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	68db      	ldr	r3, [r3, #12]
 800b6e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b6e6:	4905      	ldr	r1, [pc, #20]	; (800b6fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800b6ec:	2300      	movs	r3, #0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3718      	adds	r7, #24
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	42470068 	.word	0x42470068
 800b6fc:	40023800 	.word	0x40023800
 800b700:	40007000 	.word	0x40007000
 800b704:	42470e40 	.word	0x42470e40

0800b708 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b708:	b480      	push	{r7}
 800b70a:	b087      	sub	sp, #28
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800b710:	2300      	movs	r3, #0
 800b712:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800b714:	2300      	movs	r3, #0
 800b716:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800b718:	2300      	movs	r3, #0
 800b71a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800b71c:	2300      	movs	r3, #0
 800b71e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2b01      	cmp	r3, #1
 800b724:	d13e      	bne.n	800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800b726:	4b23      	ldr	r3, [pc, #140]	; (800b7b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b72e:	60fb      	str	r3, [r7, #12]
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d005      	beq.n	800b742 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d12f      	bne.n	800b79c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800b73c:	4b1e      	ldr	r3, [pc, #120]	; (800b7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b73e:	617b      	str	r3, [r7, #20]
          break;
 800b740:	e02f      	b.n	800b7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800b742:	4b1c      	ldr	r3, [pc, #112]	; (800b7b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b74a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b74e:	d108      	bne.n	800b762 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b750:	4b18      	ldr	r3, [pc, #96]	; (800b7b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b758:	4a18      	ldr	r2, [pc, #96]	; (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800b75a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b75e:	613b      	str	r3, [r7, #16]
 800b760:	e007      	b.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b762:	4b14      	ldr	r3, [pc, #80]	; (800b7b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b76a:	4a15      	ldr	r2, [pc, #84]	; (800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800b76c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b770:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800b772:	4b10      	ldr	r3, [pc, #64]	; (800b7b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800b774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b778:	099b      	lsrs	r3, r3, #6
 800b77a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	fb02 f303 	mul.w	r3, r2, r3
 800b784:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800b786:	4b0b      	ldr	r3, [pc, #44]	; (800b7b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800b788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b78c:	0f1b      	lsrs	r3, r3, #28
 800b78e:	f003 0307 	and.w	r3, r3, #7
 800b792:	68ba      	ldr	r2, [r7, #8]
 800b794:	fbb2 f3f3 	udiv	r3, r2, r3
 800b798:	617b      	str	r3, [r7, #20]
          break;
 800b79a:	e002      	b.n	800b7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800b79c:	2300      	movs	r3, #0
 800b79e:	617b      	str	r3, [r7, #20]
          break;
 800b7a0:	bf00      	nop
        }
      }
      break;
 800b7a2:	bf00      	nop
    }
  }
  return frequency;
 800b7a4:	697b      	ldr	r3, [r7, #20]
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	371c      	adds	r7, #28
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr
 800b7b2:	bf00      	nop
 800b7b4:	40023800 	.word	0x40023800
 800b7b8:	00bb8000 	.word	0x00bb8000
 800b7bc:	007a1200 	.word	0x007a1200
 800b7c0:	00f42400 	.word	0x00f42400

0800b7c4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d101      	bne.n	800b7d6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	e01c      	b.n	800b810 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	795b      	ldrb	r3, [r3, #5]
 800b7da:	b2db      	uxtb	r3, r3
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d105      	bne.n	800b7ec <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f7f6 fd66 	bl	80022b8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2202      	movs	r2, #2
 800b7f0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f042 0204 	orr.w	r2, r2, #4
 800b800:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2201      	movs	r2, #1
 800b806:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2200      	movs	r2, #0
 800b80c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800b80e:	2300      	movs	r3, #0
}
 800b810:	4618      	mov	r0, r3
 800b812:	3708      	adds	r7, #8
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b084      	sub	sp, #16
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b822:	2300      	movs	r3, #0
 800b824:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	791b      	ldrb	r3, [r3, #4]
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d101      	bne.n	800b832 <HAL_RNG_GenerateRandomNumber+0x1a>
 800b82e:	2302      	movs	r3, #2
 800b830:	e03d      	b.n	800b8ae <HAL_RNG_GenerateRandomNumber+0x96>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2201      	movs	r2, #1
 800b836:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	795b      	ldrb	r3, [r3, #5]
 800b83c:	b2db      	uxtb	r3, r3
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d12c      	bne.n	800b89c <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2202      	movs	r2, #2
 800b846:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b848:	f7fb f8a2 	bl	8006990 <HAL_GetTick>
 800b84c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800b84e:	e011      	b.n	800b874 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800b850:	f7fb f89e 	bl	8006990 <HAL_GetTick>
 800b854:	4602      	mov	r2, r0
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	1ad3      	subs	r3, r2, r3
 800b85a:	2b02      	cmp	r3, #2
 800b85c:	d90a      	bls.n	800b874 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2201      	movs	r2, #1
 800b862:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2202      	movs	r2, #2
 800b868:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2200      	movs	r2, #0
 800b86e:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 800b870:	2301      	movs	r3, #1
 800b872:	e01c      	b.n	800b8ae <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	f003 0301 	and.w	r3, r3, #1
 800b87e:	2b01      	cmp	r3, #1
 800b880:	d1e6      	bne.n	800b850 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	689a      	ldr	r2, [r3, #8]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	68da      	ldr	r2, [r3, #12]
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2201      	movs	r2, #1
 800b898:	715a      	strb	r2, [r3, #5]
 800b89a:	e004      	b.n	800b8a6 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2204      	movs	r2, #4
 800b8a0:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	711a      	strb	r2, [r3, #4]

  return status;
 800b8ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3710      	adds	r7, #16
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}

0800b8b6 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 800b8b6:	b580      	push	{r7, lr}
 800b8b8:	b082      	sub	sp, #8
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	330c      	adds	r3, #12
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f7ff ffa7 	bl	800b818 <HAL_RNG_GenerateRandomNumber>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d102      	bne.n	800b8d6 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	e000      	b.n	800b8d8 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 800b8d6:	2300      	movs	r3, #0
  }
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3708      	adds	r7, #8
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d101      	bne.n	800b8f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e07b      	b.n	800b9ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d108      	bne.n	800b90c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b902:	d009      	beq.n	800b918 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2200      	movs	r2, #0
 800b908:	61da      	str	r2, [r3, #28]
 800b90a:	e005      	b.n	800b918 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2200      	movs	r2, #0
 800b910:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b924:	b2db      	uxtb	r3, r3
 800b926:	2b00      	cmp	r3, #0
 800b928:	d106      	bne.n	800b938 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2200      	movs	r2, #0
 800b92e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f7f6 fce2 	bl	80022fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2202      	movs	r2, #2
 800b93c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	681a      	ldr	r2, [r3, #0]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b94e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	689b      	ldr	r3, [r3, #8]
 800b95c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b960:	431a      	orrs	r2, r3
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b96a:	431a      	orrs	r2, r3
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	691b      	ldr	r3, [r3, #16]
 800b970:	f003 0302 	and.w	r3, r3, #2
 800b974:	431a      	orrs	r2, r3
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	695b      	ldr	r3, [r3, #20]
 800b97a:	f003 0301 	and.w	r3, r3, #1
 800b97e:	431a      	orrs	r2, r3
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	699b      	ldr	r3, [r3, #24]
 800b984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b988:	431a      	orrs	r2, r3
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	69db      	ldr	r3, [r3, #28]
 800b98e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b992:	431a      	orrs	r2, r3
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6a1b      	ldr	r3, [r3, #32]
 800b998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b99c:	ea42 0103 	orr.w	r1, r2, r3
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	430a      	orrs	r2, r1
 800b9ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	699b      	ldr	r3, [r3, #24]
 800b9b4:	0c1b      	lsrs	r3, r3, #16
 800b9b6:	f003 0104 	and.w	r1, r3, #4
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9be:	f003 0210 	and.w	r2, r3, #16
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	430a      	orrs	r2, r1
 800b9c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	69da      	ldr	r2, [r3, #28]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b9d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3708      	adds	r7, #8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b088      	sub	sp, #32
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	60f8      	str	r0, [r7, #12]
 800b9fa:	60b9      	str	r1, [r7, #8]
 800b9fc:	603b      	str	r3, [r7, #0]
 800b9fe:	4613      	mov	r3, r2
 800ba00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ba02:	2300      	movs	r3, #0
 800ba04:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d101      	bne.n	800ba14 <HAL_SPI_Transmit+0x22>
 800ba10:	2302      	movs	r3, #2
 800ba12:	e126      	b.n	800bc62 <HAL_SPI_Transmit+0x270>
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2201      	movs	r2, #1
 800ba18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ba1c:	f7fa ffb8 	bl	8006990 <HAL_GetTick>
 800ba20:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ba22:	88fb      	ldrh	r3, [r7, #6]
 800ba24:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d002      	beq.n	800ba38 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ba32:	2302      	movs	r3, #2
 800ba34:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ba36:	e10b      	b.n	800bc50 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d002      	beq.n	800ba44 <HAL_SPI_Transmit+0x52>
 800ba3e:	88fb      	ldrh	r3, [r7, #6]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d102      	bne.n	800ba4a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ba44:	2301      	movs	r3, #1
 800ba46:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ba48:	e102      	b.n	800bc50 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2203      	movs	r2, #3
 800ba4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2200      	movs	r2, #0
 800ba56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	68ba      	ldr	r2, [r7, #8]
 800ba5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	88fa      	ldrh	r2, [r7, #6]
 800ba62:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	88fa      	ldrh	r2, [r7, #6]
 800ba68:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2200      	movs	r2, #0
 800ba74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2200      	movs	r2, #0
 800ba86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba90:	d10f      	bne.n	800bab2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	681a      	ldr	r2, [r3, #0]
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800baa0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bab0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800babc:	2b40      	cmp	r3, #64	; 0x40
 800babe:	d007      	beq.n	800bad0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bace:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	68db      	ldr	r3, [r3, #12]
 800bad4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bad8:	d14b      	bne.n	800bb72 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d002      	beq.n	800bae8 <HAL_SPI_Transmit+0xf6>
 800bae2:	8afb      	ldrh	r3, [r7, #22]
 800bae4:	2b01      	cmp	r3, #1
 800bae6:	d13e      	bne.n	800bb66 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baec:	881a      	ldrh	r2, [r3, #0]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baf8:	1c9a      	adds	r2, r3, #2
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	3b01      	subs	r3, #1
 800bb06:	b29a      	uxth	r2, r3
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bb0c:	e02b      	b.n	800bb66 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	f003 0302 	and.w	r3, r3, #2
 800bb18:	2b02      	cmp	r3, #2
 800bb1a:	d112      	bne.n	800bb42 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb20:	881a      	ldrh	r2, [r3, #0]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb2c:	1c9a      	adds	r2, r3, #2
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	3b01      	subs	r3, #1
 800bb3a:	b29a      	uxth	r2, r3
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	86da      	strh	r2, [r3, #54]	; 0x36
 800bb40:	e011      	b.n	800bb66 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb42:	f7fa ff25 	bl	8006990 <HAL_GetTick>
 800bb46:	4602      	mov	r2, r0
 800bb48:	69bb      	ldr	r3, [r7, #24]
 800bb4a:	1ad3      	subs	r3, r2, r3
 800bb4c:	683a      	ldr	r2, [r7, #0]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d803      	bhi.n	800bb5a <HAL_SPI_Transmit+0x168>
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb58:	d102      	bne.n	800bb60 <HAL_SPI_Transmit+0x16e>
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d102      	bne.n	800bb66 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800bb60:	2303      	movs	r3, #3
 800bb62:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bb64:	e074      	b.n	800bc50 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb6a:	b29b      	uxth	r3, r3
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d1ce      	bne.n	800bb0e <HAL_SPI_Transmit+0x11c>
 800bb70:	e04c      	b.n	800bc0c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d002      	beq.n	800bb80 <HAL_SPI_Transmit+0x18e>
 800bb7a:	8afb      	ldrh	r3, [r7, #22]
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d140      	bne.n	800bc02 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	330c      	adds	r3, #12
 800bb8a:	7812      	ldrb	r2, [r2, #0]
 800bb8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb92:	1c5a      	adds	r2, r3, #1
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb9c:	b29b      	uxth	r3, r3
 800bb9e:	3b01      	subs	r3, #1
 800bba0:	b29a      	uxth	r2, r3
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800bba6:	e02c      	b.n	800bc02 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	f003 0302 	and.w	r3, r3, #2
 800bbb2:	2b02      	cmp	r3, #2
 800bbb4:	d113      	bne.n	800bbde <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	330c      	adds	r3, #12
 800bbc0:	7812      	ldrb	r2, [r2, #0]
 800bbc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbc8:	1c5a      	adds	r2, r3, #1
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	3b01      	subs	r3, #1
 800bbd6:	b29a      	uxth	r2, r3
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	86da      	strh	r2, [r3, #54]	; 0x36
 800bbdc:	e011      	b.n	800bc02 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bbde:	f7fa fed7 	bl	8006990 <HAL_GetTick>
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	1ad3      	subs	r3, r2, r3
 800bbe8:	683a      	ldr	r2, [r7, #0]
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d803      	bhi.n	800bbf6 <HAL_SPI_Transmit+0x204>
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbf4:	d102      	bne.n	800bbfc <HAL_SPI_Transmit+0x20a>
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d102      	bne.n	800bc02 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800bbfc:	2303      	movs	r3, #3
 800bbfe:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bc00:	e026      	b.n	800bc50 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d1cd      	bne.n	800bba8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bc0c:	69ba      	ldr	r2, [r7, #24]
 800bc0e:	6839      	ldr	r1, [r7, #0]
 800bc10:	68f8      	ldr	r0, [r7, #12]
 800bc12:	f000 fbcb 	bl	800c3ac <SPI_EndRxTxTransaction>
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d002      	beq.n	800bc22 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2220      	movs	r2, #32
 800bc20:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d10a      	bne.n	800bc40 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	613b      	str	r3, [r7, #16]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	613b      	str	r3, [r7, #16]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	613b      	str	r3, [r7, #16]
 800bc3e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d002      	beq.n	800bc4e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	77fb      	strb	r3, [r7, #31]
 800bc4c:	e000      	b.n	800bc50 <HAL_SPI_Transmit+0x25e>
  }

error:
 800bc4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2201      	movs	r2, #1
 800bc54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bc60:	7ffb      	ldrb	r3, [r7, #31]
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3720      	adds	r7, #32
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc6a:	b580      	push	{r7, lr}
 800bc6c:	b088      	sub	sp, #32
 800bc6e:	af02      	add	r7, sp, #8
 800bc70:	60f8      	str	r0, [r7, #12]
 800bc72:	60b9      	str	r1, [r7, #8]
 800bc74:	603b      	str	r3, [r7, #0]
 800bc76:	4613      	mov	r3, r2
 800bc78:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc86:	d112      	bne.n	800bcae <HAL_SPI_Receive+0x44>
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d10e      	bne.n	800bcae <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	2204      	movs	r2, #4
 800bc94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bc98:	88fa      	ldrh	r2, [r7, #6]
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	9300      	str	r3, [sp, #0]
 800bc9e:	4613      	mov	r3, r2
 800bca0:	68ba      	ldr	r2, [r7, #8]
 800bca2:	68b9      	ldr	r1, [r7, #8]
 800bca4:	68f8      	ldr	r0, [r7, #12]
 800bca6:	f000 f8f1 	bl	800be8c <HAL_SPI_TransmitReceive>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	e0ea      	b.n	800be84 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d101      	bne.n	800bcbc <HAL_SPI_Receive+0x52>
 800bcb8:	2302      	movs	r3, #2
 800bcba:	e0e3      	b.n	800be84 <HAL_SPI_Receive+0x21a>
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bcc4:	f7fa fe64 	bl	8006990 <HAL_GetTick>
 800bcc8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	d002      	beq.n	800bcdc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800bcd6:	2302      	movs	r3, #2
 800bcd8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bcda:	e0ca      	b.n	800be72 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d002      	beq.n	800bce8 <HAL_SPI_Receive+0x7e>
 800bce2:	88fb      	ldrh	r3, [r7, #6]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d102      	bne.n	800bcee <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800bce8:	2301      	movs	r3, #1
 800bcea:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bcec:	e0c1      	b.n	800be72 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2204      	movs	r2, #4
 800bcf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	68ba      	ldr	r2, [r7, #8]
 800bd00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	88fa      	ldrh	r2, [r7, #6]
 800bd06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	88fa      	ldrh	r2, [r7, #6]
 800bd0c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2200      	movs	r2, #0
 800bd12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2200      	movs	r2, #0
 800bd18:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	2200      	movs	r2, #0
 800bd24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	689b      	ldr	r3, [r3, #8]
 800bd30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd34:	d10f      	bne.n	800bd56 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bd54:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd60:	2b40      	cmp	r3, #64	; 0x40
 800bd62:	d007      	beq.n	800bd74 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd72:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d162      	bne.n	800be42 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800bd7c:	e02e      	b.n	800bddc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	f003 0301 	and.w	r3, r3, #1
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d115      	bne.n	800bdb8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f103 020c 	add.w	r2, r3, #12
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd98:	7812      	ldrb	r2, [r2, #0]
 800bd9a:	b2d2      	uxtb	r2, r2
 800bd9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bda2:	1c5a      	adds	r2, r3, #1
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bdac:	b29b      	uxth	r3, r3
 800bdae:	3b01      	subs	r3, #1
 800bdb0:	b29a      	uxth	r2, r3
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bdb6:	e011      	b.n	800bddc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bdb8:	f7fa fdea 	bl	8006990 <HAL_GetTick>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	1ad3      	subs	r3, r2, r3
 800bdc2:	683a      	ldr	r2, [r7, #0]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d803      	bhi.n	800bdd0 <HAL_SPI_Receive+0x166>
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bdce:	d102      	bne.n	800bdd6 <HAL_SPI_Receive+0x16c>
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d102      	bne.n	800bddc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800bdd6:	2303      	movs	r3, #3
 800bdd8:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bdda:	e04a      	b.n	800be72 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d1cb      	bne.n	800bd7e <HAL_SPI_Receive+0x114>
 800bde6:	e031      	b.n	800be4c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	f003 0301 	and.w	r3, r3, #1
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	d113      	bne.n	800be1e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	68da      	ldr	r2, [r3, #12]
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be00:	b292      	uxth	r2, r2
 800be02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be08:	1c9a      	adds	r2, r3, #2
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be12:	b29b      	uxth	r3, r3
 800be14:	3b01      	subs	r3, #1
 800be16:	b29a      	uxth	r2, r3
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800be1c:	e011      	b.n	800be42 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be1e:	f7fa fdb7 	bl	8006990 <HAL_GetTick>
 800be22:	4602      	mov	r2, r0
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	1ad3      	subs	r3, r2, r3
 800be28:	683a      	ldr	r2, [r7, #0]
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d803      	bhi.n	800be36 <HAL_SPI_Receive+0x1cc>
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be34:	d102      	bne.n	800be3c <HAL_SPI_Receive+0x1d2>
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d102      	bne.n	800be42 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800be3c:	2303      	movs	r3, #3
 800be3e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800be40:	e017      	b.n	800be72 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be46:	b29b      	uxth	r3, r3
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d1cd      	bne.n	800bde8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800be4c:	693a      	ldr	r2, [r7, #16]
 800be4e:	6839      	ldr	r1, [r7, #0]
 800be50:	68f8      	ldr	r0, [r7, #12]
 800be52:	f000 fa45 	bl	800c2e0 <SPI_EndRxTransaction>
 800be56:	4603      	mov	r3, r0
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d002      	beq.n	800be62 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2220      	movs	r2, #32
 800be60:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be66:	2b00      	cmp	r3, #0
 800be68:	d002      	beq.n	800be70 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800be6a:	2301      	movs	r3, #1
 800be6c:	75fb      	strb	r3, [r7, #23]
 800be6e:	e000      	b.n	800be72 <HAL_SPI_Receive+0x208>
  }

error :
 800be70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2201      	movs	r2, #1
 800be76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2200      	movs	r2, #0
 800be7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800be82:	7dfb      	ldrb	r3, [r7, #23]
}
 800be84:	4618      	mov	r0, r3
 800be86:	3718      	adds	r7, #24
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b08c      	sub	sp, #48	; 0x30
 800be90:	af00      	add	r7, sp, #0
 800be92:	60f8      	str	r0, [r7, #12]
 800be94:	60b9      	str	r1, [r7, #8]
 800be96:	607a      	str	r2, [r7, #4]
 800be98:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800be9a:	2301      	movs	r3, #1
 800be9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800be9e:	2300      	movs	r3, #0
 800bea0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800beaa:	2b01      	cmp	r3, #1
 800beac:	d101      	bne.n	800beb2 <HAL_SPI_TransmitReceive+0x26>
 800beae:	2302      	movs	r3, #2
 800beb0:	e18a      	b.n	800c1c8 <HAL_SPI_TransmitReceive+0x33c>
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2201      	movs	r2, #1
 800beb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800beba:	f7fa fd69 	bl	8006990 <HAL_GetTick>
 800bebe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800bed0:	887b      	ldrh	r3, [r7, #2]
 800bed2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bed4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d00f      	beq.n	800befc <HAL_SPI_TransmitReceive+0x70>
 800bedc:	69fb      	ldr	r3, [r7, #28]
 800bede:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bee2:	d107      	bne.n	800bef4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	689b      	ldr	r3, [r3, #8]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d103      	bne.n	800bef4 <HAL_SPI_TransmitReceive+0x68>
 800beec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bef0:	2b04      	cmp	r3, #4
 800bef2:	d003      	beq.n	800befc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800bef4:	2302      	movs	r3, #2
 800bef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800befa:	e15b      	b.n	800c1b4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d005      	beq.n	800bf0e <HAL_SPI_TransmitReceive+0x82>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d002      	beq.n	800bf0e <HAL_SPI_TransmitReceive+0x82>
 800bf08:	887b      	ldrh	r3, [r7, #2]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d103      	bne.n	800bf16 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bf14:	e14e      	b.n	800c1b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	2b04      	cmp	r3, #4
 800bf20:	d003      	beq.n	800bf2a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2205      	movs	r2, #5
 800bf26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	887a      	ldrh	r2, [r7, #2]
 800bf3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	887a      	ldrh	r2, [r7, #2]
 800bf40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	68ba      	ldr	r2, [r7, #8]
 800bf46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	887a      	ldrh	r2, [r7, #2]
 800bf4c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	887a      	ldrh	r2, [r7, #2]
 800bf52:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2200      	movs	r2, #0
 800bf58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf6a:	2b40      	cmp	r3, #64	; 0x40
 800bf6c:	d007      	beq.n	800bf7e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	68db      	ldr	r3, [r3, #12]
 800bf82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf86:	d178      	bne.n	800c07a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d002      	beq.n	800bf96 <HAL_SPI_TransmitReceive+0x10a>
 800bf90:	8b7b      	ldrh	r3, [r7, #26]
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	d166      	bne.n	800c064 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf9a:	881a      	ldrh	r2, [r3, #0]
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfa6:	1c9a      	adds	r2, r3, #2
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfb0:	b29b      	uxth	r3, r3
 800bfb2:	3b01      	subs	r3, #1
 800bfb4:	b29a      	uxth	r2, r3
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bfba:	e053      	b.n	800c064 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	689b      	ldr	r3, [r3, #8]
 800bfc2:	f003 0302 	and.w	r3, r3, #2
 800bfc6:	2b02      	cmp	r3, #2
 800bfc8:	d11b      	bne.n	800c002 <HAL_SPI_TransmitReceive+0x176>
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d016      	beq.n	800c002 <HAL_SPI_TransmitReceive+0x176>
 800bfd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd6:	2b01      	cmp	r3, #1
 800bfd8:	d113      	bne.n	800c002 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfde:	881a      	ldrh	r2, [r3, #0]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfea:	1c9a      	adds	r2, r3, #2
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	3b01      	subs	r3, #1
 800bff8:	b29a      	uxth	r2, r3
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bffe:	2300      	movs	r3, #0
 800c000:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	689b      	ldr	r3, [r3, #8]
 800c008:	f003 0301 	and.w	r3, r3, #1
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d119      	bne.n	800c044 <HAL_SPI_TransmitReceive+0x1b8>
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c014:	b29b      	uxth	r3, r3
 800c016:	2b00      	cmp	r3, #0
 800c018:	d014      	beq.n	800c044 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	68da      	ldr	r2, [r3, #12]
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c024:	b292      	uxth	r2, r2
 800c026:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c02c:	1c9a      	adds	r2, r3, #2
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c036:	b29b      	uxth	r3, r3
 800c038:	3b01      	subs	r3, #1
 800c03a:	b29a      	uxth	r2, r3
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c040:	2301      	movs	r3, #1
 800c042:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c044:	f7fa fca4 	bl	8006990 <HAL_GetTick>
 800c048:	4602      	mov	r2, r0
 800c04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04c:	1ad3      	subs	r3, r2, r3
 800c04e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c050:	429a      	cmp	r2, r3
 800c052:	d807      	bhi.n	800c064 <HAL_SPI_TransmitReceive+0x1d8>
 800c054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c056:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c05a:	d003      	beq.n	800c064 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c05c:	2303      	movs	r3, #3
 800c05e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c062:	e0a7      	b.n	800c1b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c068:	b29b      	uxth	r3, r3
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d1a6      	bne.n	800bfbc <HAL_SPI_TransmitReceive+0x130>
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c072:	b29b      	uxth	r3, r3
 800c074:	2b00      	cmp	r3, #0
 800c076:	d1a1      	bne.n	800bfbc <HAL_SPI_TransmitReceive+0x130>
 800c078:	e07c      	b.n	800c174 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d002      	beq.n	800c088 <HAL_SPI_TransmitReceive+0x1fc>
 800c082:	8b7b      	ldrh	r3, [r7, #26]
 800c084:	2b01      	cmp	r3, #1
 800c086:	d16b      	bne.n	800c160 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	330c      	adds	r3, #12
 800c092:	7812      	ldrb	r2, [r2, #0]
 800c094:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c09a:	1c5a      	adds	r2, r3, #1
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	3b01      	subs	r3, #1
 800c0a8:	b29a      	uxth	r2, r3
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c0ae:	e057      	b.n	800c160 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	689b      	ldr	r3, [r3, #8]
 800c0b6:	f003 0302 	and.w	r3, r3, #2
 800c0ba:	2b02      	cmp	r3, #2
 800c0bc:	d11c      	bne.n	800c0f8 <HAL_SPI_TransmitReceive+0x26c>
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d017      	beq.n	800c0f8 <HAL_SPI_TransmitReceive+0x26c>
 800c0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	d114      	bne.n	800c0f8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	330c      	adds	r3, #12
 800c0d8:	7812      	ldrb	r2, [r2, #0]
 800c0da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0e0:	1c5a      	adds	r2, r3, #1
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0ea:	b29b      	uxth	r3, r3
 800c0ec:	3b01      	subs	r3, #1
 800c0ee:	b29a      	uxth	r2, r3
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	689b      	ldr	r3, [r3, #8]
 800c0fe:	f003 0301 	and.w	r3, r3, #1
 800c102:	2b01      	cmp	r3, #1
 800c104:	d119      	bne.n	800c13a <HAL_SPI_TransmitReceive+0x2ae>
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c10a:	b29b      	uxth	r3, r3
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d014      	beq.n	800c13a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	68da      	ldr	r2, [r3, #12]
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c11a:	b2d2      	uxtb	r2, r2
 800c11c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c122:	1c5a      	adds	r2, r3, #1
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	3b01      	subs	r3, #1
 800c130:	b29a      	uxth	r2, r3
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c136:	2301      	movs	r3, #1
 800c138:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c13a:	f7fa fc29 	bl	8006990 <HAL_GetTick>
 800c13e:	4602      	mov	r2, r0
 800c140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c142:	1ad3      	subs	r3, r2, r3
 800c144:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c146:	429a      	cmp	r2, r3
 800c148:	d803      	bhi.n	800c152 <HAL_SPI_TransmitReceive+0x2c6>
 800c14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c150:	d102      	bne.n	800c158 <HAL_SPI_TransmitReceive+0x2cc>
 800c152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c154:	2b00      	cmp	r3, #0
 800c156:	d103      	bne.n	800c160 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c158:	2303      	movs	r3, #3
 800c15a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c15e:	e029      	b.n	800c1b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c164:	b29b      	uxth	r3, r3
 800c166:	2b00      	cmp	r3, #0
 800c168:	d1a2      	bne.n	800c0b0 <HAL_SPI_TransmitReceive+0x224>
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c16e:	b29b      	uxth	r3, r3
 800c170:	2b00      	cmp	r3, #0
 800c172:	d19d      	bne.n	800c0b0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c176:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c178:	68f8      	ldr	r0, [r7, #12]
 800c17a:	f000 f917 	bl	800c3ac <SPI_EndRxTxTransaction>
 800c17e:	4603      	mov	r3, r0
 800c180:	2b00      	cmp	r3, #0
 800c182:	d006      	beq.n	800c192 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c184:	2301      	movs	r3, #1
 800c186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2220      	movs	r2, #32
 800c18e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c190:	e010      	b.n	800c1b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	689b      	ldr	r3, [r3, #8]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d10b      	bne.n	800c1b2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c19a:	2300      	movs	r3, #0
 800c19c:	617b      	str	r3, [r7, #20]
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	68db      	ldr	r3, [r3, #12]
 800c1a4:	617b      	str	r3, [r7, #20]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	689b      	ldr	r3, [r3, #8]
 800c1ac:	617b      	str	r3, [r7, #20]
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	e000      	b.n	800c1b4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c1b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c1c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3730      	adds	r7, #48	; 0x30
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b088      	sub	sp, #32
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	60f8      	str	r0, [r7, #12]
 800c1d8:	60b9      	str	r1, [r7, #8]
 800c1da:	603b      	str	r3, [r7, #0]
 800c1dc:	4613      	mov	r3, r2
 800c1de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c1e0:	f7fa fbd6 	bl	8006990 <HAL_GetTick>
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e8:	1a9b      	subs	r3, r3, r2
 800c1ea:	683a      	ldr	r2, [r7, #0]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c1f0:	f7fa fbce 	bl	8006990 <HAL_GetTick>
 800c1f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c1f6:	4b39      	ldr	r3, [pc, #228]	; (800c2dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	015b      	lsls	r3, r3, #5
 800c1fc:	0d1b      	lsrs	r3, r3, #20
 800c1fe:	69fa      	ldr	r2, [r7, #28]
 800c200:	fb02 f303 	mul.w	r3, r2, r3
 800c204:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c206:	e054      	b.n	800c2b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c20e:	d050      	beq.n	800c2b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c210:	f7fa fbbe 	bl	8006990 <HAL_GetTick>
 800c214:	4602      	mov	r2, r0
 800c216:	69bb      	ldr	r3, [r7, #24]
 800c218:	1ad3      	subs	r3, r2, r3
 800c21a:	69fa      	ldr	r2, [r7, #28]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d902      	bls.n	800c226 <SPI_WaitFlagStateUntilTimeout+0x56>
 800c220:	69fb      	ldr	r3, [r7, #28]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d13d      	bne.n	800c2a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	685a      	ldr	r2, [r3, #4]
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c234:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c23e:	d111      	bne.n	800c264 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	689b      	ldr	r3, [r3, #8]
 800c244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c248:	d004      	beq.n	800c254 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	689b      	ldr	r3, [r3, #8]
 800c24e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c252:	d107      	bne.n	800c264 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c262:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c26c:	d10f      	bne.n	800c28e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c27c:	601a      	str	r2, [r3, #0]
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c28c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	2201      	movs	r2, #1
 800c292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	2200      	movs	r2, #0
 800c29a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c29e:	2303      	movs	r3, #3
 800c2a0:	e017      	b.n	800c2d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d101      	bne.n	800c2ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	3b01      	subs	r3, #1
 800c2b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	689a      	ldr	r2, [r3, #8]
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	4013      	ands	r3, r2
 800c2bc:	68ba      	ldr	r2, [r7, #8]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	bf0c      	ite	eq
 800c2c2:	2301      	moveq	r3, #1
 800c2c4:	2300      	movne	r3, #0
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	79fb      	ldrb	r3, [r7, #7]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d19b      	bne.n	800c208 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c2d0:	2300      	movs	r3, #0
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3720      	adds	r7, #32
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	20000008 	.word	0x20000008

0800c2e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b086      	sub	sp, #24
 800c2e4:	af02      	add	r7, sp, #8
 800c2e6:	60f8      	str	r0, [r7, #12]
 800c2e8:	60b9      	str	r1, [r7, #8]
 800c2ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c2f4:	d111      	bne.n	800c31a <SPI_EndRxTransaction+0x3a>
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	689b      	ldr	r3, [r3, #8]
 800c2fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2fe:	d004      	beq.n	800c30a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	689b      	ldr	r3, [r3, #8]
 800c304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c308:	d107      	bne.n	800c31a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	681a      	ldr	r2, [r3, #0]
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c318:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c322:	d12a      	bne.n	800c37a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	689b      	ldr	r3, [r3, #8]
 800c328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c32c:	d012      	beq.n	800c354 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	9300      	str	r3, [sp, #0]
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	2200      	movs	r2, #0
 800c336:	2180      	movs	r1, #128	; 0x80
 800c338:	68f8      	ldr	r0, [r7, #12]
 800c33a:	f7ff ff49 	bl	800c1d0 <SPI_WaitFlagStateUntilTimeout>
 800c33e:	4603      	mov	r3, r0
 800c340:	2b00      	cmp	r3, #0
 800c342:	d02d      	beq.n	800c3a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c348:	f043 0220 	orr.w	r2, r3, #32
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c350:	2303      	movs	r3, #3
 800c352:	e026      	b.n	800c3a2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	9300      	str	r3, [sp, #0]
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	2200      	movs	r2, #0
 800c35c:	2101      	movs	r1, #1
 800c35e:	68f8      	ldr	r0, [r7, #12]
 800c360:	f7ff ff36 	bl	800c1d0 <SPI_WaitFlagStateUntilTimeout>
 800c364:	4603      	mov	r3, r0
 800c366:	2b00      	cmp	r3, #0
 800c368:	d01a      	beq.n	800c3a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c36e:	f043 0220 	orr.w	r2, r3, #32
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c376:	2303      	movs	r3, #3
 800c378:	e013      	b.n	800c3a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	9300      	str	r3, [sp, #0]
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	2200      	movs	r2, #0
 800c382:	2101      	movs	r1, #1
 800c384:	68f8      	ldr	r0, [r7, #12]
 800c386:	f7ff ff23 	bl	800c1d0 <SPI_WaitFlagStateUntilTimeout>
 800c38a:	4603      	mov	r3, r0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d007      	beq.n	800c3a0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c394:	f043 0220 	orr.w	r2, r3, #32
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c39c:	2303      	movs	r3, #3
 800c39e:	e000      	b.n	800c3a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c3a0:	2300      	movs	r3, #0
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3710      	adds	r7, #16
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}
	...

0800c3ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b088      	sub	sp, #32
 800c3b0:	af02      	add	r7, sp, #8
 800c3b2:	60f8      	str	r0, [r7, #12]
 800c3b4:	60b9      	str	r1, [r7, #8]
 800c3b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c3b8:	4b1b      	ldr	r3, [pc, #108]	; (800c428 <SPI_EndRxTxTransaction+0x7c>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a1b      	ldr	r2, [pc, #108]	; (800c42c <SPI_EndRxTxTransaction+0x80>)
 800c3be:	fba2 2303 	umull	r2, r3, r2, r3
 800c3c2:	0d5b      	lsrs	r3, r3, #21
 800c3c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c3c8:	fb02 f303 	mul.w	r3, r2, r3
 800c3cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c3d6:	d112      	bne.n	800c3fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	9300      	str	r3, [sp, #0]
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	2180      	movs	r1, #128	; 0x80
 800c3e2:	68f8      	ldr	r0, [r7, #12]
 800c3e4:	f7ff fef4 	bl	800c1d0 <SPI_WaitFlagStateUntilTimeout>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d016      	beq.n	800c41c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3f2:	f043 0220 	orr.w	r2, r3, #32
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c3fa:	2303      	movs	r3, #3
 800c3fc:	e00f      	b.n	800c41e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d00a      	beq.n	800c41a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	3b01      	subs	r3, #1
 800c408:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c414:	2b80      	cmp	r3, #128	; 0x80
 800c416:	d0f2      	beq.n	800c3fe <SPI_EndRxTxTransaction+0x52>
 800c418:	e000      	b.n	800c41c <SPI_EndRxTxTransaction+0x70>
        break;
 800c41a:	bf00      	nop
  }

  return HAL_OK;
 800c41c:	2300      	movs	r3, #0
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3718      	adds	r7, #24
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
 800c426:	bf00      	nop
 800c428:	20000008 	.word	0x20000008
 800c42c:	165e9f81 	.word	0x165e9f81

0800c430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d101      	bne.n	800c442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c43e:	2301      	movs	r3, #1
 800c440:	e041      	b.n	800c4c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c448:	b2db      	uxtb	r3, r3
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d106      	bne.n	800c45c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2200      	movs	r2, #0
 800c452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f7f6 f836 	bl	80024c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2202      	movs	r2, #2
 800c460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681a      	ldr	r2, [r3, #0]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	3304      	adds	r3, #4
 800c46c:	4619      	mov	r1, r3
 800c46e:	4610      	mov	r0, r2
 800c470:	f000 fd68 	bl	800cf44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2201      	movs	r2, #1
 800c478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2201      	movs	r2, #1
 800c480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2201      	movs	r2, #1
 800c488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2201      	movs	r2, #1
 800c490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2201      	movs	r2, #1
 800c498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2201      	movs	r2, #1
 800c4a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2201      	movs	r2, #1
 800c4c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c4c4:	2300      	movs	r3, #0
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3708      	adds	r7, #8
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
	...

0800c4d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b085      	sub	sp, #20
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4de:	b2db      	uxtb	r3, r3
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d001      	beq.n	800c4e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	e04e      	b.n	800c586 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2202      	movs	r2, #2
 800c4ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	68da      	ldr	r2, [r3, #12]
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f042 0201 	orr.w	r2, r2, #1
 800c4fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a23      	ldr	r2, [pc, #140]	; (800c594 <HAL_TIM_Base_Start_IT+0xc4>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d022      	beq.n	800c550 <HAL_TIM_Base_Start_IT+0x80>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c512:	d01d      	beq.n	800c550 <HAL_TIM_Base_Start_IT+0x80>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4a1f      	ldr	r2, [pc, #124]	; (800c598 <HAL_TIM_Base_Start_IT+0xc8>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d018      	beq.n	800c550 <HAL_TIM_Base_Start_IT+0x80>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4a1e      	ldr	r2, [pc, #120]	; (800c59c <HAL_TIM_Base_Start_IT+0xcc>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d013      	beq.n	800c550 <HAL_TIM_Base_Start_IT+0x80>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4a1c      	ldr	r2, [pc, #112]	; (800c5a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d00e      	beq.n	800c550 <HAL_TIM_Base_Start_IT+0x80>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4a1b      	ldr	r2, [pc, #108]	; (800c5a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d009      	beq.n	800c550 <HAL_TIM_Base_Start_IT+0x80>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a19      	ldr	r2, [pc, #100]	; (800c5a8 <HAL_TIM_Base_Start_IT+0xd8>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d004      	beq.n	800c550 <HAL_TIM_Base_Start_IT+0x80>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	4a18      	ldr	r2, [pc, #96]	; (800c5ac <HAL_TIM_Base_Start_IT+0xdc>)
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d111      	bne.n	800c574 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	689b      	ldr	r3, [r3, #8]
 800c556:	f003 0307 	and.w	r3, r3, #7
 800c55a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2b06      	cmp	r3, #6
 800c560:	d010      	beq.n	800c584 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	681a      	ldr	r2, [r3, #0]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f042 0201 	orr.w	r2, r2, #1
 800c570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c572:	e007      	b.n	800c584 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f042 0201 	orr.w	r2, r2, #1
 800c582:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c584:	2300      	movs	r3, #0
}
 800c586:	4618      	mov	r0, r3
 800c588:	3714      	adds	r7, #20
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr
 800c592:	bf00      	nop
 800c594:	40010000 	.word	0x40010000
 800c598:	40000400 	.word	0x40000400
 800c59c:	40000800 	.word	0x40000800
 800c5a0:	40000c00 	.word	0x40000c00
 800c5a4:	40010400 	.word	0x40010400
 800c5a8:	40014000 	.word	0x40014000
 800c5ac:	40001800 	.word	0x40001800

0800c5b0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d109      	bne.n	800c5d4 <HAL_TIM_OC_Start_IT+0x24>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c5c6:	b2db      	uxtb	r3, r3
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	bf14      	ite	ne
 800c5cc:	2301      	movne	r3, #1
 800c5ce:	2300      	moveq	r3, #0
 800c5d0:	b2db      	uxtb	r3, r3
 800c5d2:	e022      	b.n	800c61a <HAL_TIM_OC_Start_IT+0x6a>
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	2b04      	cmp	r3, #4
 800c5d8:	d109      	bne.n	800c5ee <HAL_TIM_OC_Start_IT+0x3e>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c5e0:	b2db      	uxtb	r3, r3
 800c5e2:	2b01      	cmp	r3, #1
 800c5e4:	bf14      	ite	ne
 800c5e6:	2301      	movne	r3, #1
 800c5e8:	2300      	moveq	r3, #0
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	e015      	b.n	800c61a <HAL_TIM_OC_Start_IT+0x6a>
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	2b08      	cmp	r3, #8
 800c5f2:	d109      	bne.n	800c608 <HAL_TIM_OC_Start_IT+0x58>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	bf14      	ite	ne
 800c600:	2301      	movne	r3, #1
 800c602:	2300      	moveq	r3, #0
 800c604:	b2db      	uxtb	r3, r3
 800c606:	e008      	b.n	800c61a <HAL_TIM_OC_Start_IT+0x6a>
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	2b01      	cmp	r3, #1
 800c612:	bf14      	ite	ne
 800c614:	2301      	movne	r3, #1
 800c616:	2300      	moveq	r3, #0
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d001      	beq.n	800c622 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 800c61e:	2301      	movs	r3, #1
 800c620:	e0c2      	b.n	800c7a8 <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d104      	bne.n	800c632 <HAL_TIM_OC_Start_IT+0x82>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2202      	movs	r2, #2
 800c62c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c630:	e013      	b.n	800c65a <HAL_TIM_OC_Start_IT+0xaa>
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	2b04      	cmp	r3, #4
 800c636:	d104      	bne.n	800c642 <HAL_TIM_OC_Start_IT+0x92>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2202      	movs	r2, #2
 800c63c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c640:	e00b      	b.n	800c65a <HAL_TIM_OC_Start_IT+0xaa>
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	2b08      	cmp	r3, #8
 800c646:	d104      	bne.n	800c652 <HAL_TIM_OC_Start_IT+0xa2>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2202      	movs	r2, #2
 800c64c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c650:	e003      	b.n	800c65a <HAL_TIM_OC_Start_IT+0xaa>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2202      	movs	r2, #2
 800c656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	2b0c      	cmp	r3, #12
 800c65e:	d841      	bhi.n	800c6e4 <HAL_TIM_OC_Start_IT+0x134>
 800c660:	a201      	add	r2, pc, #4	; (adr r2, 800c668 <HAL_TIM_OC_Start_IT+0xb8>)
 800c662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c666:	bf00      	nop
 800c668:	0800c69d 	.word	0x0800c69d
 800c66c:	0800c6e5 	.word	0x0800c6e5
 800c670:	0800c6e5 	.word	0x0800c6e5
 800c674:	0800c6e5 	.word	0x0800c6e5
 800c678:	0800c6af 	.word	0x0800c6af
 800c67c:	0800c6e5 	.word	0x0800c6e5
 800c680:	0800c6e5 	.word	0x0800c6e5
 800c684:	0800c6e5 	.word	0x0800c6e5
 800c688:	0800c6c1 	.word	0x0800c6c1
 800c68c:	0800c6e5 	.word	0x0800c6e5
 800c690:	0800c6e5 	.word	0x0800c6e5
 800c694:	0800c6e5 	.word	0x0800c6e5
 800c698:	0800c6d3 	.word	0x0800c6d3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	68da      	ldr	r2, [r3, #12]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f042 0202 	orr.w	r2, r2, #2
 800c6aa:	60da      	str	r2, [r3, #12]
      break;
 800c6ac:	e01b      	b.n	800c6e6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	68da      	ldr	r2, [r3, #12]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f042 0204 	orr.w	r2, r2, #4
 800c6bc:	60da      	str	r2, [r3, #12]
      break;
 800c6be:	e012      	b.n	800c6e6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	68da      	ldr	r2, [r3, #12]
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f042 0208 	orr.w	r2, r2, #8
 800c6ce:	60da      	str	r2, [r3, #12]
      break;
 800c6d0:	e009      	b.n	800c6e6 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	68da      	ldr	r2, [r3, #12]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f042 0210 	orr.w	r2, r2, #16
 800c6e0:	60da      	str	r2, [r3, #12]
      break;
 800c6e2:	e000      	b.n	800c6e6 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 800c6e4:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	6839      	ldr	r1, [r7, #0]
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f000 ff12 	bl	800d518 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4a2d      	ldr	r2, [pc, #180]	; (800c7b0 <HAL_TIM_OC_Start_IT+0x200>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d004      	beq.n	800c708 <HAL_TIM_OC_Start_IT+0x158>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4a2c      	ldr	r2, [pc, #176]	; (800c7b4 <HAL_TIM_OC_Start_IT+0x204>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d101      	bne.n	800c70c <HAL_TIM_OC_Start_IT+0x15c>
 800c708:	2301      	movs	r3, #1
 800c70a:	e000      	b.n	800c70e <HAL_TIM_OC_Start_IT+0x15e>
 800c70c:	2300      	movs	r3, #0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d007      	beq.n	800c722 <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c720:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a22      	ldr	r2, [pc, #136]	; (800c7b0 <HAL_TIM_OC_Start_IT+0x200>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d022      	beq.n	800c772 <HAL_TIM_OC_Start_IT+0x1c2>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c734:	d01d      	beq.n	800c772 <HAL_TIM_OC_Start_IT+0x1c2>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a1f      	ldr	r2, [pc, #124]	; (800c7b8 <HAL_TIM_OC_Start_IT+0x208>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d018      	beq.n	800c772 <HAL_TIM_OC_Start_IT+0x1c2>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a1d      	ldr	r2, [pc, #116]	; (800c7bc <HAL_TIM_OC_Start_IT+0x20c>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d013      	beq.n	800c772 <HAL_TIM_OC_Start_IT+0x1c2>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4a1c      	ldr	r2, [pc, #112]	; (800c7c0 <HAL_TIM_OC_Start_IT+0x210>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d00e      	beq.n	800c772 <HAL_TIM_OC_Start_IT+0x1c2>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4a16      	ldr	r2, [pc, #88]	; (800c7b4 <HAL_TIM_OC_Start_IT+0x204>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d009      	beq.n	800c772 <HAL_TIM_OC_Start_IT+0x1c2>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4a18      	ldr	r2, [pc, #96]	; (800c7c4 <HAL_TIM_OC_Start_IT+0x214>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d004      	beq.n	800c772 <HAL_TIM_OC_Start_IT+0x1c2>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a16      	ldr	r2, [pc, #88]	; (800c7c8 <HAL_TIM_OC_Start_IT+0x218>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d111      	bne.n	800c796 <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	689b      	ldr	r3, [r3, #8]
 800c778:	f003 0307 	and.w	r3, r3, #7
 800c77c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	2b06      	cmp	r3, #6
 800c782:	d010      	beq.n	800c7a6 <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	681a      	ldr	r2, [r3, #0]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f042 0201 	orr.w	r2, r2, #1
 800c792:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c794:	e007      	b.n	800c7a6 <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	681a      	ldr	r2, [r3, #0]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f042 0201 	orr.w	r2, r2, #1
 800c7a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c7a6:	2300      	movs	r3, #0
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3710      	adds	r7, #16
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	40010000 	.word	0x40010000
 800c7b4:	40010400 	.word	0x40010400
 800c7b8:	40000400 	.word	0x40000400
 800c7bc:	40000800 	.word	0x40000800
 800c7c0:	40000c00 	.word	0x40000c00
 800c7c4:	40014000 	.word	0x40014000
 800c7c8:	40001800 	.word	0x40001800

0800c7cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d101      	bne.n	800c7de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	e041      	b.n	800c862 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7e4:	b2db      	uxtb	r3, r3
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d106      	bne.n	800c7f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 f839 	bl	800c86a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2202      	movs	r2, #2
 800c7fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	3304      	adds	r3, #4
 800c808:	4619      	mov	r1, r3
 800c80a:	4610      	mov	r0, r2
 800c80c:	f000 fb9a 	bl	800cf44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2201      	movs	r2, #1
 800c814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2201      	movs	r2, #1
 800c81c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2201      	movs	r2, #1
 800c824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2201      	movs	r2, #1
 800c82c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2201      	movs	r2, #1
 800c834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2201      	movs	r2, #1
 800c83c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2201      	movs	r2, #1
 800c844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2201      	movs	r2, #1
 800c84c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2201      	movs	r2, #1
 800c854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2201      	movs	r2, #1
 800c85c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c860:	2300      	movs	r3, #0
}
 800c862:	4618      	mov	r0, r3
 800c864:	3708      	adds	r7, #8
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}

0800c86a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c86a:	b480      	push	{r7}
 800c86c:	b083      	sub	sp, #12
 800c86e:	af00      	add	r7, sp, #0
 800c870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c872:	bf00      	nop
 800c874:	370c      	adds	r7, #12
 800c876:	46bd      	mov	sp, r7
 800c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87c:	4770      	bx	lr

0800c87e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c87e:	b580      	push	{r7, lr}
 800c880:	b086      	sub	sp, #24
 800c882:	af00      	add	r7, sp, #0
 800c884:	6078      	str	r0, [r7, #4]
 800c886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d101      	bne.n	800c892 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c88e:	2301      	movs	r3, #1
 800c890:	e097      	b.n	800c9c2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d106      	bne.n	800c8ac <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f7f5 fdc6 	bl	8002438 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2202      	movs	r2, #2
 800c8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	689b      	ldr	r3, [r3, #8]
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	6812      	ldr	r2, [r2, #0]
 800c8be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c8c2:	f023 0307 	bic.w	r3, r3, #7
 800c8c6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681a      	ldr	r2, [r3, #0]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	3304      	adds	r3, #4
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	4610      	mov	r0, r2
 800c8d4:	f000 fb36 	bl	800cf44 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	689b      	ldr	r3, [r3, #8]
 800c8de:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	699b      	ldr	r3, [r3, #24]
 800c8e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	6a1b      	ldr	r3, [r3, #32]
 800c8ee:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	697a      	ldr	r2, [r7, #20]
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c900:	f023 0303 	bic.w	r3, r3, #3
 800c904:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	689a      	ldr	r2, [r3, #8]
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	699b      	ldr	r3, [r3, #24]
 800c90e:	021b      	lsls	r3, r3, #8
 800c910:	4313      	orrs	r3, r2
 800c912:	693a      	ldr	r2, [r7, #16]
 800c914:	4313      	orrs	r3, r2
 800c916:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c91e:	f023 030c 	bic.w	r3, r3, #12
 800c922:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c92a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c92e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	68da      	ldr	r2, [r3, #12]
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	69db      	ldr	r3, [r3, #28]
 800c938:	021b      	lsls	r3, r3, #8
 800c93a:	4313      	orrs	r3, r2
 800c93c:	693a      	ldr	r2, [r7, #16]
 800c93e:	4313      	orrs	r3, r2
 800c940:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	691b      	ldr	r3, [r3, #16]
 800c946:	011a      	lsls	r2, r3, #4
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	6a1b      	ldr	r3, [r3, #32]
 800c94c:	031b      	lsls	r3, r3, #12
 800c94e:	4313      	orrs	r3, r2
 800c950:	693a      	ldr	r2, [r7, #16]
 800c952:	4313      	orrs	r3, r2
 800c954:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c95c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c964:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	685a      	ldr	r2, [r3, #4]
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	695b      	ldr	r3, [r3, #20]
 800c96e:	011b      	lsls	r3, r3, #4
 800c970:	4313      	orrs	r3, r2
 800c972:	68fa      	ldr	r2, [r7, #12]
 800c974:	4313      	orrs	r3, r2
 800c976:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	697a      	ldr	r2, [r7, #20]
 800c97e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	693a      	ldr	r2, [r7, #16]
 800c986:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	68fa      	ldr	r2, [r7, #12]
 800c98e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2201      	movs	r2, #1
 800c994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2201      	movs	r2, #1
 800c99c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c9c0:	2300      	movs	r3, #0
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3718      	adds	r7, #24
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}

0800c9ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c9ca:	b580      	push	{r7, lr}
 800c9cc:	b082      	sub	sp, #8
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	691b      	ldr	r3, [r3, #16]
 800c9d8:	f003 0302 	and.w	r3, r3, #2
 800c9dc:	2b02      	cmp	r3, #2
 800c9de:	d122      	bne.n	800ca26 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	68db      	ldr	r3, [r3, #12]
 800c9e6:	f003 0302 	and.w	r3, r3, #2
 800c9ea:	2b02      	cmp	r3, #2
 800c9ec:	d11b      	bne.n	800ca26 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f06f 0202 	mvn.w	r2, #2
 800c9f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	699b      	ldr	r3, [r3, #24]
 800ca04:	f003 0303 	and.w	r3, r3, #3
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d003      	beq.n	800ca14 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f000 fa7b 	bl	800cf08 <HAL_TIM_IC_CaptureCallback>
 800ca12:	e005      	b.n	800ca20 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f000 fa6d 	bl	800cef4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f000 fa7e 	bl	800cf1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2200      	movs	r2, #0
 800ca24:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	691b      	ldr	r3, [r3, #16]
 800ca2c:	f003 0304 	and.w	r3, r3, #4
 800ca30:	2b04      	cmp	r3, #4
 800ca32:	d122      	bne.n	800ca7a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	68db      	ldr	r3, [r3, #12]
 800ca3a:	f003 0304 	and.w	r3, r3, #4
 800ca3e:	2b04      	cmp	r3, #4
 800ca40:	d11b      	bne.n	800ca7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f06f 0204 	mvn.w	r2, #4
 800ca4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2202      	movs	r2, #2
 800ca50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	699b      	ldr	r3, [r3, #24]
 800ca58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d003      	beq.n	800ca68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f000 fa51 	bl	800cf08 <HAL_TIM_IC_CaptureCallback>
 800ca66:	e005      	b.n	800ca74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f000 fa43 	bl	800cef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f000 fa54 	bl	800cf1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2200      	movs	r2, #0
 800ca78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	691b      	ldr	r3, [r3, #16]
 800ca80:	f003 0308 	and.w	r3, r3, #8
 800ca84:	2b08      	cmp	r3, #8
 800ca86:	d122      	bne.n	800cace <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	68db      	ldr	r3, [r3, #12]
 800ca8e:	f003 0308 	and.w	r3, r3, #8
 800ca92:	2b08      	cmp	r3, #8
 800ca94:	d11b      	bne.n	800cace <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f06f 0208 	mvn.w	r2, #8
 800ca9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2204      	movs	r2, #4
 800caa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	69db      	ldr	r3, [r3, #28]
 800caac:	f003 0303 	and.w	r3, r3, #3
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d003      	beq.n	800cabc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f000 fa27 	bl	800cf08 <HAL_TIM_IC_CaptureCallback>
 800caba:	e005      	b.n	800cac8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f000 fa19 	bl	800cef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f000 fa2a 	bl	800cf1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	691b      	ldr	r3, [r3, #16]
 800cad4:	f003 0310 	and.w	r3, r3, #16
 800cad8:	2b10      	cmp	r3, #16
 800cada:	d122      	bne.n	800cb22 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	68db      	ldr	r3, [r3, #12]
 800cae2:	f003 0310 	and.w	r3, r3, #16
 800cae6:	2b10      	cmp	r3, #16
 800cae8:	d11b      	bne.n	800cb22 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f06f 0210 	mvn.w	r2, #16
 800caf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2208      	movs	r2, #8
 800caf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	69db      	ldr	r3, [r3, #28]
 800cb00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d003      	beq.n	800cb10 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f000 f9fd 	bl	800cf08 <HAL_TIM_IC_CaptureCallback>
 800cb0e:	e005      	b.n	800cb1c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f000 f9ef 	bl	800cef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f000 fa00 	bl	800cf1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	691b      	ldr	r3, [r3, #16]
 800cb28:	f003 0301 	and.w	r3, r3, #1
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	d10e      	bne.n	800cb4e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	68db      	ldr	r3, [r3, #12]
 800cb36:	f003 0301 	and.w	r3, r3, #1
 800cb3a:	2b01      	cmp	r3, #1
 800cb3c:	d107      	bne.n	800cb4e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f06f 0201 	mvn.w	r2, #1
 800cb46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f000 f9c9 	bl	800cee0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	691b      	ldr	r3, [r3, #16]
 800cb54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb58:	2b80      	cmp	r3, #128	; 0x80
 800cb5a:	d10e      	bne.n	800cb7a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	68db      	ldr	r3, [r3, #12]
 800cb62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb66:	2b80      	cmp	r3, #128	; 0x80
 800cb68:	d107      	bne.n	800cb7a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cb72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 fd7b 	bl	800d670 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	691b      	ldr	r3, [r3, #16]
 800cb80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb84:	2b40      	cmp	r3, #64	; 0x40
 800cb86:	d10e      	bne.n	800cba6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb92:	2b40      	cmp	r3, #64	; 0x40
 800cb94:	d107      	bne.n	800cba6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cb9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f000 f9c5 	bl	800cf30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	691b      	ldr	r3, [r3, #16]
 800cbac:	f003 0320 	and.w	r3, r3, #32
 800cbb0:	2b20      	cmp	r3, #32
 800cbb2:	d10e      	bne.n	800cbd2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	68db      	ldr	r3, [r3, #12]
 800cbba:	f003 0320 	and.w	r3, r3, #32
 800cbbe:	2b20      	cmp	r3, #32
 800cbc0:	d107      	bne.n	800cbd2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f06f 0220 	mvn.w	r2, #32
 800cbca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f000 fd45 	bl	800d65c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cbd2:	bf00      	nop
 800cbd4:	3708      	adds	r7, #8
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
	...

0800cbdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b084      	sub	sp, #16
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	60f8      	str	r0, [r7, #12]
 800cbe4:	60b9      	str	r1, [r7, #8]
 800cbe6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cbee:	2b01      	cmp	r3, #1
 800cbf0:	d101      	bne.n	800cbf6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800cbf2:	2302      	movs	r3, #2
 800cbf4:	e0ac      	b.n	800cd50 <HAL_TIM_PWM_ConfigChannel+0x174>
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2b0c      	cmp	r3, #12
 800cc02:	f200 809f 	bhi.w	800cd44 <HAL_TIM_PWM_ConfigChannel+0x168>
 800cc06:	a201      	add	r2, pc, #4	; (adr r2, 800cc0c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800cc08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc0c:	0800cc41 	.word	0x0800cc41
 800cc10:	0800cd45 	.word	0x0800cd45
 800cc14:	0800cd45 	.word	0x0800cd45
 800cc18:	0800cd45 	.word	0x0800cd45
 800cc1c:	0800cc81 	.word	0x0800cc81
 800cc20:	0800cd45 	.word	0x0800cd45
 800cc24:	0800cd45 	.word	0x0800cd45
 800cc28:	0800cd45 	.word	0x0800cd45
 800cc2c:	0800ccc3 	.word	0x0800ccc3
 800cc30:	0800cd45 	.word	0x0800cd45
 800cc34:	0800cd45 	.word	0x0800cd45
 800cc38:	0800cd45 	.word	0x0800cd45
 800cc3c:	0800cd03 	.word	0x0800cd03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	68b9      	ldr	r1, [r7, #8]
 800cc46:	4618      	mov	r0, r3
 800cc48:	f000 fa1c 	bl	800d084 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	699a      	ldr	r2, [r3, #24]
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f042 0208 	orr.w	r2, r2, #8
 800cc5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	699a      	ldr	r2, [r3, #24]
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f022 0204 	bic.w	r2, r2, #4
 800cc6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	6999      	ldr	r1, [r3, #24]
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	691a      	ldr	r2, [r3, #16]
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	430a      	orrs	r2, r1
 800cc7c:	619a      	str	r2, [r3, #24]
      break;
 800cc7e:	e062      	b.n	800cd46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	68b9      	ldr	r1, [r7, #8]
 800cc86:	4618      	mov	r0, r3
 800cc88:	f000 fa6c 	bl	800d164 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	699a      	ldr	r2, [r3, #24]
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	699a      	ldr	r2, [r3, #24]
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ccaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	6999      	ldr	r1, [r3, #24]
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	691b      	ldr	r3, [r3, #16]
 800ccb6:	021a      	lsls	r2, r3, #8
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	430a      	orrs	r2, r1
 800ccbe:	619a      	str	r2, [r3, #24]
      break;
 800ccc0:	e041      	b.n	800cd46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	68b9      	ldr	r1, [r7, #8]
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f000 fac1 	bl	800d250 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	69da      	ldr	r2, [r3, #28]
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f042 0208 	orr.w	r2, r2, #8
 800ccdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	69da      	ldr	r2, [r3, #28]
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f022 0204 	bic.w	r2, r2, #4
 800ccec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	69d9      	ldr	r1, [r3, #28]
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	691a      	ldr	r2, [r3, #16]
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	430a      	orrs	r2, r1
 800ccfe:	61da      	str	r2, [r3, #28]
      break;
 800cd00:	e021      	b.n	800cd46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	68b9      	ldr	r1, [r7, #8]
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f000 fb15 	bl	800d338 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	69da      	ldr	r2, [r3, #28]
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	69da      	ldr	r2, [r3, #28]
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	69d9      	ldr	r1, [r3, #28]
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	691b      	ldr	r3, [r3, #16]
 800cd38:	021a      	lsls	r2, r3, #8
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	430a      	orrs	r2, r1
 800cd40:	61da      	str	r2, [r3, #28]
      break;
 800cd42:	e000      	b.n	800cd46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800cd44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cd4e:	2300      	movs	r3, #0
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3710      	adds	r7, #16
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d101      	bne.n	800cd70 <HAL_TIM_ConfigClockSource+0x18>
 800cd6c:	2302      	movs	r3, #2
 800cd6e:	e0b3      	b.n	800ced8 <HAL_TIM_ConfigClockSource+0x180>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2201      	movs	r2, #1
 800cd74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2202      	movs	r2, #2
 800cd7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	689b      	ldr	r3, [r3, #8]
 800cd86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cd8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cd96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	68fa      	ldr	r2, [r7, #12]
 800cd9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cda8:	d03e      	beq.n	800ce28 <HAL_TIM_ConfigClockSource+0xd0>
 800cdaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cdae:	f200 8087 	bhi.w	800cec0 <HAL_TIM_ConfigClockSource+0x168>
 800cdb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdb6:	f000 8085 	beq.w	800cec4 <HAL_TIM_ConfigClockSource+0x16c>
 800cdba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdbe:	d87f      	bhi.n	800cec0 <HAL_TIM_ConfigClockSource+0x168>
 800cdc0:	2b70      	cmp	r3, #112	; 0x70
 800cdc2:	d01a      	beq.n	800cdfa <HAL_TIM_ConfigClockSource+0xa2>
 800cdc4:	2b70      	cmp	r3, #112	; 0x70
 800cdc6:	d87b      	bhi.n	800cec0 <HAL_TIM_ConfigClockSource+0x168>
 800cdc8:	2b60      	cmp	r3, #96	; 0x60
 800cdca:	d050      	beq.n	800ce6e <HAL_TIM_ConfigClockSource+0x116>
 800cdcc:	2b60      	cmp	r3, #96	; 0x60
 800cdce:	d877      	bhi.n	800cec0 <HAL_TIM_ConfigClockSource+0x168>
 800cdd0:	2b50      	cmp	r3, #80	; 0x50
 800cdd2:	d03c      	beq.n	800ce4e <HAL_TIM_ConfigClockSource+0xf6>
 800cdd4:	2b50      	cmp	r3, #80	; 0x50
 800cdd6:	d873      	bhi.n	800cec0 <HAL_TIM_ConfigClockSource+0x168>
 800cdd8:	2b40      	cmp	r3, #64	; 0x40
 800cdda:	d058      	beq.n	800ce8e <HAL_TIM_ConfigClockSource+0x136>
 800cddc:	2b40      	cmp	r3, #64	; 0x40
 800cdde:	d86f      	bhi.n	800cec0 <HAL_TIM_ConfigClockSource+0x168>
 800cde0:	2b30      	cmp	r3, #48	; 0x30
 800cde2:	d064      	beq.n	800ceae <HAL_TIM_ConfigClockSource+0x156>
 800cde4:	2b30      	cmp	r3, #48	; 0x30
 800cde6:	d86b      	bhi.n	800cec0 <HAL_TIM_ConfigClockSource+0x168>
 800cde8:	2b20      	cmp	r3, #32
 800cdea:	d060      	beq.n	800ceae <HAL_TIM_ConfigClockSource+0x156>
 800cdec:	2b20      	cmp	r3, #32
 800cdee:	d867      	bhi.n	800cec0 <HAL_TIM_ConfigClockSource+0x168>
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d05c      	beq.n	800ceae <HAL_TIM_ConfigClockSource+0x156>
 800cdf4:	2b10      	cmp	r3, #16
 800cdf6:	d05a      	beq.n	800ceae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800cdf8:	e062      	b.n	800cec0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6818      	ldr	r0, [r3, #0]
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	6899      	ldr	r1, [r3, #8]
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	685a      	ldr	r2, [r3, #4]
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	68db      	ldr	r3, [r3, #12]
 800ce0a:	f000 fb65 	bl	800d4d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	689b      	ldr	r3, [r3, #8]
 800ce14:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ce1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	68fa      	ldr	r2, [r7, #12]
 800ce24:	609a      	str	r2, [r3, #8]
      break;
 800ce26:	e04e      	b.n	800cec6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6818      	ldr	r0, [r3, #0]
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	6899      	ldr	r1, [r3, #8]
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	685a      	ldr	r2, [r3, #4]
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	68db      	ldr	r3, [r3, #12]
 800ce38:	f000 fb4e 	bl	800d4d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	689a      	ldr	r2, [r3, #8]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ce4a:	609a      	str	r2, [r3, #8]
      break;
 800ce4c:	e03b      	b.n	800cec6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6818      	ldr	r0, [r3, #0]
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	6859      	ldr	r1, [r3, #4]
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	68db      	ldr	r3, [r3, #12]
 800ce5a:	461a      	mov	r2, r3
 800ce5c:	f000 fac2 	bl	800d3e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	2150      	movs	r1, #80	; 0x50
 800ce66:	4618      	mov	r0, r3
 800ce68:	f000 fb1b 	bl	800d4a2 <TIM_ITRx_SetConfig>
      break;
 800ce6c:	e02b      	b.n	800cec6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6818      	ldr	r0, [r3, #0]
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	6859      	ldr	r1, [r3, #4]
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	68db      	ldr	r3, [r3, #12]
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	f000 fae1 	bl	800d442 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	2160      	movs	r1, #96	; 0x60
 800ce86:	4618      	mov	r0, r3
 800ce88:	f000 fb0b 	bl	800d4a2 <TIM_ITRx_SetConfig>
      break;
 800ce8c:	e01b      	b.n	800cec6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6818      	ldr	r0, [r3, #0]
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	6859      	ldr	r1, [r3, #4]
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	68db      	ldr	r3, [r3, #12]
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	f000 faa2 	bl	800d3e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	2140      	movs	r1, #64	; 0x40
 800cea6:	4618      	mov	r0, r3
 800cea8:	f000 fafb 	bl	800d4a2 <TIM_ITRx_SetConfig>
      break;
 800ceac:	e00b      	b.n	800cec6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681a      	ldr	r2, [r3, #0]
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	4610      	mov	r0, r2
 800ceba:	f000 faf2 	bl	800d4a2 <TIM_ITRx_SetConfig>
        break;
 800cebe:	e002      	b.n	800cec6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800cec0:	bf00      	nop
 800cec2:	e000      	b.n	800cec6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800cec4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2201      	movs	r2, #1
 800ceca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2200      	movs	r2, #0
 800ced2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ced6:	2300      	movs	r3, #0
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3710      	adds	r7, #16
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}

0800cee0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b083      	sub	sp, #12
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cee8:	bf00      	nop
 800ceea:	370c      	adds	r7, #12
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr

0800cef4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cef4:	b480      	push	{r7}
 800cef6:	b083      	sub	sp, #12
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cefc:	bf00      	nop
 800cefe:	370c      	adds	r7, #12
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr

0800cf08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b083      	sub	sp, #12
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cf10:	bf00      	nop
 800cf12:	370c      	adds	r7, #12
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr

0800cf1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b083      	sub	sp, #12
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cf24:	bf00      	nop
 800cf26:	370c      	adds	r7, #12
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2e:	4770      	bx	lr

0800cf30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cf30:	b480      	push	{r7}
 800cf32:	b083      	sub	sp, #12
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cf38:	bf00      	nop
 800cf3a:	370c      	adds	r7, #12
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr

0800cf44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cf44:	b480      	push	{r7}
 800cf46:	b085      	sub	sp, #20
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	4a40      	ldr	r2, [pc, #256]	; (800d058 <TIM_Base_SetConfig+0x114>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d013      	beq.n	800cf84 <TIM_Base_SetConfig+0x40>
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf62:	d00f      	beq.n	800cf84 <TIM_Base_SetConfig+0x40>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	4a3d      	ldr	r2, [pc, #244]	; (800d05c <TIM_Base_SetConfig+0x118>)
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d00b      	beq.n	800cf84 <TIM_Base_SetConfig+0x40>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	4a3c      	ldr	r2, [pc, #240]	; (800d060 <TIM_Base_SetConfig+0x11c>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d007      	beq.n	800cf84 <TIM_Base_SetConfig+0x40>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	4a3b      	ldr	r2, [pc, #236]	; (800d064 <TIM_Base_SetConfig+0x120>)
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	d003      	beq.n	800cf84 <TIM_Base_SetConfig+0x40>
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	4a3a      	ldr	r2, [pc, #232]	; (800d068 <TIM_Base_SetConfig+0x124>)
 800cf80:	4293      	cmp	r3, r2
 800cf82:	d108      	bne.n	800cf96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	685b      	ldr	r3, [r3, #4]
 800cf90:	68fa      	ldr	r2, [r7, #12]
 800cf92:	4313      	orrs	r3, r2
 800cf94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	4a2f      	ldr	r2, [pc, #188]	; (800d058 <TIM_Base_SetConfig+0x114>)
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	d02b      	beq.n	800cff6 <TIM_Base_SetConfig+0xb2>
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfa4:	d027      	beq.n	800cff6 <TIM_Base_SetConfig+0xb2>
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	4a2c      	ldr	r2, [pc, #176]	; (800d05c <TIM_Base_SetConfig+0x118>)
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d023      	beq.n	800cff6 <TIM_Base_SetConfig+0xb2>
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	4a2b      	ldr	r2, [pc, #172]	; (800d060 <TIM_Base_SetConfig+0x11c>)
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d01f      	beq.n	800cff6 <TIM_Base_SetConfig+0xb2>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	4a2a      	ldr	r2, [pc, #168]	; (800d064 <TIM_Base_SetConfig+0x120>)
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d01b      	beq.n	800cff6 <TIM_Base_SetConfig+0xb2>
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	4a29      	ldr	r2, [pc, #164]	; (800d068 <TIM_Base_SetConfig+0x124>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d017      	beq.n	800cff6 <TIM_Base_SetConfig+0xb2>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	4a28      	ldr	r2, [pc, #160]	; (800d06c <TIM_Base_SetConfig+0x128>)
 800cfca:	4293      	cmp	r3, r2
 800cfcc:	d013      	beq.n	800cff6 <TIM_Base_SetConfig+0xb2>
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	4a27      	ldr	r2, [pc, #156]	; (800d070 <TIM_Base_SetConfig+0x12c>)
 800cfd2:	4293      	cmp	r3, r2
 800cfd4:	d00f      	beq.n	800cff6 <TIM_Base_SetConfig+0xb2>
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	4a26      	ldr	r2, [pc, #152]	; (800d074 <TIM_Base_SetConfig+0x130>)
 800cfda:	4293      	cmp	r3, r2
 800cfdc:	d00b      	beq.n	800cff6 <TIM_Base_SetConfig+0xb2>
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	4a25      	ldr	r2, [pc, #148]	; (800d078 <TIM_Base_SetConfig+0x134>)
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d007      	beq.n	800cff6 <TIM_Base_SetConfig+0xb2>
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	4a24      	ldr	r2, [pc, #144]	; (800d07c <TIM_Base_SetConfig+0x138>)
 800cfea:	4293      	cmp	r3, r2
 800cfec:	d003      	beq.n	800cff6 <TIM_Base_SetConfig+0xb2>
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	4a23      	ldr	r2, [pc, #140]	; (800d080 <TIM_Base_SetConfig+0x13c>)
 800cff2:	4293      	cmp	r3, r2
 800cff4:	d108      	bne.n	800d008 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	68db      	ldr	r3, [r3, #12]
 800d002:	68fa      	ldr	r2, [r7, #12]
 800d004:	4313      	orrs	r3, r2
 800d006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	695b      	ldr	r3, [r3, #20]
 800d012:	4313      	orrs	r3, r2
 800d014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	68fa      	ldr	r2, [r7, #12]
 800d01a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	689a      	ldr	r2, [r3, #8]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	681a      	ldr	r2, [r3, #0]
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	4a0a      	ldr	r2, [pc, #40]	; (800d058 <TIM_Base_SetConfig+0x114>)
 800d030:	4293      	cmp	r3, r2
 800d032:	d003      	beq.n	800d03c <TIM_Base_SetConfig+0xf8>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	4a0c      	ldr	r2, [pc, #48]	; (800d068 <TIM_Base_SetConfig+0x124>)
 800d038:	4293      	cmp	r3, r2
 800d03a:	d103      	bne.n	800d044 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	691a      	ldr	r2, [r3, #16]
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2201      	movs	r2, #1
 800d048:	615a      	str	r2, [r3, #20]
}
 800d04a:	bf00      	nop
 800d04c:	3714      	adds	r7, #20
 800d04e:	46bd      	mov	sp, r7
 800d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d054:	4770      	bx	lr
 800d056:	bf00      	nop
 800d058:	40010000 	.word	0x40010000
 800d05c:	40000400 	.word	0x40000400
 800d060:	40000800 	.word	0x40000800
 800d064:	40000c00 	.word	0x40000c00
 800d068:	40010400 	.word	0x40010400
 800d06c:	40014000 	.word	0x40014000
 800d070:	40014400 	.word	0x40014400
 800d074:	40014800 	.word	0x40014800
 800d078:	40001800 	.word	0x40001800
 800d07c:	40001c00 	.word	0x40001c00
 800d080:	40002000 	.word	0x40002000

0800d084 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d084:	b480      	push	{r7}
 800d086:	b087      	sub	sp, #28
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6a1b      	ldr	r3, [r3, #32]
 800d092:	f023 0201 	bic.w	r2, r3, #1
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6a1b      	ldr	r3, [r3, #32]
 800d09e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	699b      	ldr	r3, [r3, #24]
 800d0aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f023 0303 	bic.w	r3, r3, #3
 800d0ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	68fa      	ldr	r2, [r7, #12]
 800d0c2:	4313      	orrs	r3, r2
 800d0c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	f023 0302 	bic.w	r3, r3, #2
 800d0cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	697a      	ldr	r2, [r7, #20]
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	4a20      	ldr	r2, [pc, #128]	; (800d15c <TIM_OC1_SetConfig+0xd8>)
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d003      	beq.n	800d0e8 <TIM_OC1_SetConfig+0x64>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	4a1f      	ldr	r2, [pc, #124]	; (800d160 <TIM_OC1_SetConfig+0xdc>)
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	d10c      	bne.n	800d102 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	f023 0308 	bic.w	r3, r3, #8
 800d0ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	68db      	ldr	r3, [r3, #12]
 800d0f4:	697a      	ldr	r2, [r7, #20]
 800d0f6:	4313      	orrs	r3, r2
 800d0f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	f023 0304 	bic.w	r3, r3, #4
 800d100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	4a15      	ldr	r2, [pc, #84]	; (800d15c <TIM_OC1_SetConfig+0xd8>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d003      	beq.n	800d112 <TIM_OC1_SetConfig+0x8e>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	4a14      	ldr	r2, [pc, #80]	; (800d160 <TIM_OC1_SetConfig+0xdc>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d111      	bne.n	800d136 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	695b      	ldr	r3, [r3, #20]
 800d126:	693a      	ldr	r2, [r7, #16]
 800d128:	4313      	orrs	r3, r2
 800d12a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	699b      	ldr	r3, [r3, #24]
 800d130:	693a      	ldr	r2, [r7, #16]
 800d132:	4313      	orrs	r3, r2
 800d134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	693a      	ldr	r2, [r7, #16]
 800d13a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	68fa      	ldr	r2, [r7, #12]
 800d140:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	685a      	ldr	r2, [r3, #4]
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	697a      	ldr	r2, [r7, #20]
 800d14e:	621a      	str	r2, [r3, #32]
}
 800d150:	bf00      	nop
 800d152:	371c      	adds	r7, #28
 800d154:	46bd      	mov	sp, r7
 800d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15a:	4770      	bx	lr
 800d15c:	40010000 	.word	0x40010000
 800d160:	40010400 	.word	0x40010400

0800d164 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d164:	b480      	push	{r7}
 800d166:	b087      	sub	sp, #28
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6a1b      	ldr	r3, [r3, #32]
 800d172:	f023 0210 	bic.w	r2, r3, #16
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6a1b      	ldr	r3, [r3, #32]
 800d17e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	699b      	ldr	r3, [r3, #24]
 800d18a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d19a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	021b      	lsls	r3, r3, #8
 800d1a2:	68fa      	ldr	r2, [r7, #12]
 800d1a4:	4313      	orrs	r3, r2
 800d1a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	f023 0320 	bic.w	r3, r3, #32
 800d1ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	689b      	ldr	r3, [r3, #8]
 800d1b4:	011b      	lsls	r3, r3, #4
 800d1b6:	697a      	ldr	r2, [r7, #20]
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	4a22      	ldr	r2, [pc, #136]	; (800d248 <TIM_OC2_SetConfig+0xe4>)
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d003      	beq.n	800d1cc <TIM_OC2_SetConfig+0x68>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	4a21      	ldr	r2, [pc, #132]	; (800d24c <TIM_OC2_SetConfig+0xe8>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d10d      	bne.n	800d1e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d1d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	68db      	ldr	r3, [r3, #12]
 800d1d8:	011b      	lsls	r3, r3, #4
 800d1da:	697a      	ldr	r2, [r7, #20]
 800d1dc:	4313      	orrs	r3, r2
 800d1de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	4a17      	ldr	r2, [pc, #92]	; (800d248 <TIM_OC2_SetConfig+0xe4>)
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d003      	beq.n	800d1f8 <TIM_OC2_SetConfig+0x94>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	4a16      	ldr	r2, [pc, #88]	; (800d24c <TIM_OC2_SetConfig+0xe8>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d113      	bne.n	800d220 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d1fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d206:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	695b      	ldr	r3, [r3, #20]
 800d20c:	009b      	lsls	r3, r3, #2
 800d20e:	693a      	ldr	r2, [r7, #16]
 800d210:	4313      	orrs	r3, r2
 800d212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	699b      	ldr	r3, [r3, #24]
 800d218:	009b      	lsls	r3, r3, #2
 800d21a:	693a      	ldr	r2, [r7, #16]
 800d21c:	4313      	orrs	r3, r2
 800d21e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	693a      	ldr	r2, [r7, #16]
 800d224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	68fa      	ldr	r2, [r7, #12]
 800d22a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	685a      	ldr	r2, [r3, #4]
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	697a      	ldr	r2, [r7, #20]
 800d238:	621a      	str	r2, [r3, #32]
}
 800d23a:	bf00      	nop
 800d23c:	371c      	adds	r7, #28
 800d23e:	46bd      	mov	sp, r7
 800d240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d244:	4770      	bx	lr
 800d246:	bf00      	nop
 800d248:	40010000 	.word	0x40010000
 800d24c:	40010400 	.word	0x40010400

0800d250 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d250:	b480      	push	{r7}
 800d252:	b087      	sub	sp, #28
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
 800d258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6a1b      	ldr	r3, [r3, #32]
 800d25e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6a1b      	ldr	r3, [r3, #32]
 800d26a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	69db      	ldr	r3, [r3, #28]
 800d276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d27e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	f023 0303 	bic.w	r3, r3, #3
 800d286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	68fa      	ldr	r2, [r7, #12]
 800d28e:	4313      	orrs	r3, r2
 800d290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	689b      	ldr	r3, [r3, #8]
 800d29e:	021b      	lsls	r3, r3, #8
 800d2a0:	697a      	ldr	r2, [r7, #20]
 800d2a2:	4313      	orrs	r3, r2
 800d2a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	4a21      	ldr	r2, [pc, #132]	; (800d330 <TIM_OC3_SetConfig+0xe0>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d003      	beq.n	800d2b6 <TIM_OC3_SetConfig+0x66>
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	4a20      	ldr	r2, [pc, #128]	; (800d334 <TIM_OC3_SetConfig+0xe4>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d10d      	bne.n	800d2d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d2bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	68db      	ldr	r3, [r3, #12]
 800d2c2:	021b      	lsls	r3, r3, #8
 800d2c4:	697a      	ldr	r2, [r7, #20]
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d2d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	4a16      	ldr	r2, [pc, #88]	; (800d330 <TIM_OC3_SetConfig+0xe0>)
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d003      	beq.n	800d2e2 <TIM_OC3_SetConfig+0x92>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	4a15      	ldr	r2, [pc, #84]	; (800d334 <TIM_OC3_SetConfig+0xe4>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d113      	bne.n	800d30a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d2e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d2f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	695b      	ldr	r3, [r3, #20]
 800d2f6:	011b      	lsls	r3, r3, #4
 800d2f8:	693a      	ldr	r2, [r7, #16]
 800d2fa:	4313      	orrs	r3, r2
 800d2fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	699b      	ldr	r3, [r3, #24]
 800d302:	011b      	lsls	r3, r3, #4
 800d304:	693a      	ldr	r2, [r7, #16]
 800d306:	4313      	orrs	r3, r2
 800d308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	693a      	ldr	r2, [r7, #16]
 800d30e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	68fa      	ldr	r2, [r7, #12]
 800d314:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	685a      	ldr	r2, [r3, #4]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	697a      	ldr	r2, [r7, #20]
 800d322:	621a      	str	r2, [r3, #32]
}
 800d324:	bf00      	nop
 800d326:	371c      	adds	r7, #28
 800d328:	46bd      	mov	sp, r7
 800d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32e:	4770      	bx	lr
 800d330:	40010000 	.word	0x40010000
 800d334:	40010400 	.word	0x40010400

0800d338 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d338:	b480      	push	{r7}
 800d33a:	b087      	sub	sp, #28
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6a1b      	ldr	r3, [r3, #32]
 800d346:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6a1b      	ldr	r3, [r3, #32]
 800d352:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	685b      	ldr	r3, [r3, #4]
 800d358:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	69db      	ldr	r3, [r3, #28]
 800d35e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d36e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	021b      	lsls	r3, r3, #8
 800d376:	68fa      	ldr	r2, [r7, #12]
 800d378:	4313      	orrs	r3, r2
 800d37a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d382:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	689b      	ldr	r3, [r3, #8]
 800d388:	031b      	lsls	r3, r3, #12
 800d38a:	693a      	ldr	r2, [r7, #16]
 800d38c:	4313      	orrs	r3, r2
 800d38e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	4a12      	ldr	r2, [pc, #72]	; (800d3dc <TIM_OC4_SetConfig+0xa4>)
 800d394:	4293      	cmp	r3, r2
 800d396:	d003      	beq.n	800d3a0 <TIM_OC4_SetConfig+0x68>
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	4a11      	ldr	r2, [pc, #68]	; (800d3e0 <TIM_OC4_SetConfig+0xa8>)
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d109      	bne.n	800d3b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d3a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	695b      	ldr	r3, [r3, #20]
 800d3ac:	019b      	lsls	r3, r3, #6
 800d3ae:	697a      	ldr	r2, [r7, #20]
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	697a      	ldr	r2, [r7, #20]
 800d3b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	68fa      	ldr	r2, [r7, #12]
 800d3be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	685a      	ldr	r2, [r3, #4]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	693a      	ldr	r2, [r7, #16]
 800d3cc:	621a      	str	r2, [r3, #32]
}
 800d3ce:	bf00      	nop
 800d3d0:	371c      	adds	r7, #28
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d8:	4770      	bx	lr
 800d3da:	bf00      	nop
 800d3dc:	40010000 	.word	0x40010000
 800d3e0:	40010400 	.word	0x40010400

0800d3e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b087      	sub	sp, #28
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	60f8      	str	r0, [r7, #12]
 800d3ec:	60b9      	str	r1, [r7, #8]
 800d3ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	6a1b      	ldr	r3, [r3, #32]
 800d3f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	6a1b      	ldr	r3, [r3, #32]
 800d3fa:	f023 0201 	bic.w	r2, r3, #1
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	699b      	ldr	r3, [r3, #24]
 800d406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d40e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	011b      	lsls	r3, r3, #4
 800d414:	693a      	ldr	r2, [r7, #16]
 800d416:	4313      	orrs	r3, r2
 800d418:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	f023 030a 	bic.w	r3, r3, #10
 800d420:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d422:	697a      	ldr	r2, [r7, #20]
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	4313      	orrs	r3, r2
 800d428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	693a      	ldr	r2, [r7, #16]
 800d42e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	697a      	ldr	r2, [r7, #20]
 800d434:	621a      	str	r2, [r3, #32]
}
 800d436:	bf00      	nop
 800d438:	371c      	adds	r7, #28
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr

0800d442 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d442:	b480      	push	{r7}
 800d444:	b087      	sub	sp, #28
 800d446:	af00      	add	r7, sp, #0
 800d448:	60f8      	str	r0, [r7, #12]
 800d44a:	60b9      	str	r1, [r7, #8]
 800d44c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	6a1b      	ldr	r3, [r3, #32]
 800d452:	f023 0210 	bic.w	r2, r3, #16
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	699b      	ldr	r3, [r3, #24]
 800d45e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	6a1b      	ldr	r3, [r3, #32]
 800d464:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d46c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	031b      	lsls	r3, r3, #12
 800d472:	697a      	ldr	r2, [r7, #20]
 800d474:	4313      	orrs	r3, r2
 800d476:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d47e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	011b      	lsls	r3, r3, #4
 800d484:	693a      	ldr	r2, [r7, #16]
 800d486:	4313      	orrs	r3, r2
 800d488:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	697a      	ldr	r2, [r7, #20]
 800d48e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	693a      	ldr	r2, [r7, #16]
 800d494:	621a      	str	r2, [r3, #32]
}
 800d496:	bf00      	nop
 800d498:	371c      	adds	r7, #28
 800d49a:	46bd      	mov	sp, r7
 800d49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a0:	4770      	bx	lr

0800d4a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d4a2:	b480      	push	{r7}
 800d4a4:	b085      	sub	sp, #20
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	6078      	str	r0, [r7, #4]
 800d4aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	689b      	ldr	r3, [r3, #8]
 800d4b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d4ba:	683a      	ldr	r2, [r7, #0]
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	4313      	orrs	r3, r2
 800d4c0:	f043 0307 	orr.w	r3, r3, #7
 800d4c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	68fa      	ldr	r2, [r7, #12]
 800d4ca:	609a      	str	r2, [r3, #8]
}
 800d4cc:	bf00      	nop
 800d4ce:	3714      	adds	r7, #20
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr

0800d4d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b087      	sub	sp, #28
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	60f8      	str	r0, [r7, #12]
 800d4e0:	60b9      	str	r1, [r7, #8]
 800d4e2:	607a      	str	r2, [r7, #4]
 800d4e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	689b      	ldr	r3, [r3, #8]
 800d4ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d4f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	021a      	lsls	r2, r3, #8
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	431a      	orrs	r2, r3
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	4313      	orrs	r3, r2
 800d500:	697a      	ldr	r2, [r7, #20]
 800d502:	4313      	orrs	r3, r2
 800d504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	697a      	ldr	r2, [r7, #20]
 800d50a:	609a      	str	r2, [r3, #8]
}
 800d50c:	bf00      	nop
 800d50e:	371c      	adds	r7, #28
 800d510:	46bd      	mov	sp, r7
 800d512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d516:	4770      	bx	lr

0800d518 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d518:	b480      	push	{r7}
 800d51a:	b087      	sub	sp, #28
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	60f8      	str	r0, [r7, #12]
 800d520:	60b9      	str	r1, [r7, #8]
 800d522:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	f003 031f 	and.w	r3, r3, #31
 800d52a:	2201      	movs	r2, #1
 800d52c:	fa02 f303 	lsl.w	r3, r2, r3
 800d530:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	6a1a      	ldr	r2, [r3, #32]
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	43db      	mvns	r3, r3
 800d53a:	401a      	ands	r2, r3
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	6a1a      	ldr	r2, [r3, #32]
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	f003 031f 	and.w	r3, r3, #31
 800d54a:	6879      	ldr	r1, [r7, #4]
 800d54c:	fa01 f303 	lsl.w	r3, r1, r3
 800d550:	431a      	orrs	r2, r3
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	621a      	str	r2, [r3, #32]
}
 800d556:	bf00      	nop
 800d558:	371c      	adds	r7, #28
 800d55a:	46bd      	mov	sp, r7
 800d55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d560:	4770      	bx	lr
	...

0800d564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d564:	b480      	push	{r7}
 800d566:	b085      	sub	sp, #20
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d574:	2b01      	cmp	r3, #1
 800d576:	d101      	bne.n	800d57c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d578:	2302      	movs	r3, #2
 800d57a:	e05a      	b.n	800d632 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2201      	movs	r2, #1
 800d580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2202      	movs	r2, #2
 800d588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	685b      	ldr	r3, [r3, #4]
 800d592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	689b      	ldr	r3, [r3, #8]
 800d59a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	68fa      	ldr	r2, [r7, #12]
 800d5aa:	4313      	orrs	r3, r2
 800d5ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	68fa      	ldr	r2, [r7, #12]
 800d5b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	4a21      	ldr	r2, [pc, #132]	; (800d640 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d022      	beq.n	800d606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5c8:	d01d      	beq.n	800d606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	4a1d      	ldr	r2, [pc, #116]	; (800d644 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	d018      	beq.n	800d606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	4a1b      	ldr	r2, [pc, #108]	; (800d648 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	d013      	beq.n	800d606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	4a1a      	ldr	r2, [pc, #104]	; (800d64c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d5e4:	4293      	cmp	r3, r2
 800d5e6:	d00e      	beq.n	800d606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4a18      	ldr	r2, [pc, #96]	; (800d650 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d009      	beq.n	800d606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	4a17      	ldr	r2, [pc, #92]	; (800d654 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	d004      	beq.n	800d606 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	4a15      	ldr	r2, [pc, #84]	; (800d658 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d602:	4293      	cmp	r3, r2
 800d604:	d10c      	bne.n	800d620 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d60c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	68ba      	ldr	r2, [r7, #8]
 800d614:	4313      	orrs	r3, r2
 800d616:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	68ba      	ldr	r2, [r7, #8]
 800d61e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2201      	movs	r2, #1
 800d624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2200      	movs	r2, #0
 800d62c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d630:	2300      	movs	r3, #0
}
 800d632:	4618      	mov	r0, r3
 800d634:	3714      	adds	r7, #20
 800d636:	46bd      	mov	sp, r7
 800d638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63c:	4770      	bx	lr
 800d63e:	bf00      	nop
 800d640:	40010000 	.word	0x40010000
 800d644:	40000400 	.word	0x40000400
 800d648:	40000800 	.word	0x40000800
 800d64c:	40000c00 	.word	0x40000c00
 800d650:	40010400 	.word	0x40010400
 800d654:	40014000 	.word	0x40014000
 800d658:	40001800 	.word	0x40001800

0800d65c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d65c:	b480      	push	{r7}
 800d65e:	b083      	sub	sp, #12
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d664:	bf00      	nop
 800d666:	370c      	adds	r7, #12
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr

0800d670 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d670:	b480      	push	{r7}
 800d672:	b083      	sub	sp, #12
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d678:	bf00      	nop
 800d67a:	370c      	adds	r7, #12
 800d67c:	46bd      	mov	sp, r7
 800d67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d682:	4770      	bx	lr

0800d684 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d684:	b084      	sub	sp, #16
 800d686:	b580      	push	{r7, lr}
 800d688:	b084      	sub	sp, #16
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	6078      	str	r0, [r7, #4]
 800d68e:	f107 001c 	add.w	r0, r7, #28
 800d692:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d122      	bne.n	800d6e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	68db      	ldr	r3, [r3, #12]
 800d6ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d6b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6b4:	687a      	ldr	r2, [r7, #4]
 800d6b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	68db      	ldr	r3, [r3, #12]
 800d6bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d6c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6c6:	2b01      	cmp	r3, #1
 800d6c8:	d105      	bne.n	800d6d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	68db      	ldr	r3, [r3, #12]
 800d6ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f000 f94a 	bl	800d970 <USB_CoreReset>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	73fb      	strb	r3, [r7, #15]
 800d6e0:	e01a      	b.n	800d718 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	68db      	ldr	r3, [r3, #12]
 800d6e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f000 f93e 	bl	800d970 <USB_CoreReset>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d6f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d106      	bne.n	800d70c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d702:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	639a      	str	r2, [r3, #56]	; 0x38
 800d70a:	e005      	b.n	800d718 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d710:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d71a:	2b01      	cmp	r3, #1
 800d71c:	d10b      	bne.n	800d736 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	689b      	ldr	r3, [r3, #8]
 800d722:	f043 0206 	orr.w	r2, r3, #6
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	689b      	ldr	r3, [r3, #8]
 800d72e:	f043 0220 	orr.w	r2, r3, #32
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d736:	7bfb      	ldrb	r3, [r7, #15]
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3710      	adds	r7, #16
 800d73c:	46bd      	mov	sp, r7
 800d73e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d742:	b004      	add	sp, #16
 800d744:	4770      	bx	lr

0800d746 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d746:	b480      	push	{r7}
 800d748:	b083      	sub	sp, #12
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	689b      	ldr	r3, [r3, #8]
 800d752:	f043 0201 	orr.w	r2, r3, #1
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d75a:	2300      	movs	r3, #0
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	370c      	adds	r7, #12
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr

0800d768 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d768:	b480      	push	{r7}
 800d76a:	b083      	sub	sp, #12
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	689b      	ldr	r3, [r3, #8]
 800d774:	f023 0201 	bic.w	r2, r3, #1
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d77c:	2300      	movs	r3, #0
}
 800d77e:	4618      	mov	r0, r3
 800d780:	370c      	adds	r7, #12
 800d782:	46bd      	mov	sp, r7
 800d784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d788:	4770      	bx	lr

0800d78a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d78a:	b580      	push	{r7, lr}
 800d78c:	b082      	sub	sp, #8
 800d78e:	af00      	add	r7, sp, #0
 800d790:	6078      	str	r0, [r7, #4]
 800d792:	460b      	mov	r3, r1
 800d794:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	68db      	ldr	r3, [r3, #12]
 800d79a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d7a2:	78fb      	ldrb	r3, [r7, #3]
 800d7a4:	2b01      	cmp	r3, #1
 800d7a6:	d106      	bne.n	800d7b6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	68db      	ldr	r3, [r3, #12]
 800d7ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	60da      	str	r2, [r3, #12]
 800d7b4:	e00b      	b.n	800d7ce <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d7b6:	78fb      	ldrb	r3, [r7, #3]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d106      	bne.n	800d7ca <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	68db      	ldr	r3, [r3, #12]
 800d7c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	60da      	str	r2, [r3, #12]
 800d7c8:	e001      	b.n	800d7ce <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	e003      	b.n	800d7d6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d7ce:	2032      	movs	r0, #50	; 0x32
 800d7d0:	f7f9 f8ea 	bl	80069a8 <HAL_Delay>

  return HAL_OK;
 800d7d4:	2300      	movs	r3, #0
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3708      	adds	r7, #8
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}
	...

0800d7e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b085      	sub	sp, #20
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	019b      	lsls	r3, r3, #6
 800d7f2:	f043 0220 	orr.w	r2, r3, #32
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	60fb      	str	r3, [r7, #12]
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	4a09      	ldr	r2, [pc, #36]	; (800d828 <USB_FlushTxFifo+0x48>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d901      	bls.n	800d80c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d808:	2303      	movs	r3, #3
 800d80a:	e006      	b.n	800d81a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	691b      	ldr	r3, [r3, #16]
 800d810:	f003 0320 	and.w	r3, r3, #32
 800d814:	2b20      	cmp	r3, #32
 800d816:	d0f0      	beq.n	800d7fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d818:	2300      	movs	r3, #0
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3714      	adds	r7, #20
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr
 800d826:	bf00      	nop
 800d828:	00030d40 	.word	0x00030d40

0800d82c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d82c:	b480      	push	{r7}
 800d82e:	b085      	sub	sp, #20
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d834:	2300      	movs	r3, #0
 800d836:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2210      	movs	r2, #16
 800d83c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	3301      	adds	r3, #1
 800d842:	60fb      	str	r3, [r7, #12]
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	4a09      	ldr	r2, [pc, #36]	; (800d86c <USB_FlushRxFifo+0x40>)
 800d848:	4293      	cmp	r3, r2
 800d84a:	d901      	bls.n	800d850 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d84c:	2303      	movs	r3, #3
 800d84e:	e006      	b.n	800d85e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	691b      	ldr	r3, [r3, #16]
 800d854:	f003 0310 	and.w	r3, r3, #16
 800d858:	2b10      	cmp	r3, #16
 800d85a:	d0f0      	beq.n	800d83e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d85c:	2300      	movs	r3, #0
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3714      	adds	r7, #20
 800d862:	46bd      	mov	sp, r7
 800d864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d868:	4770      	bx	lr
 800d86a:	bf00      	nop
 800d86c:	00030d40 	.word	0x00030d40

0800d870 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d870:	b480      	push	{r7}
 800d872:	b089      	sub	sp, #36	; 0x24
 800d874:	af00      	add	r7, sp, #0
 800d876:	60f8      	str	r0, [r7, #12]
 800d878:	60b9      	str	r1, [r7, #8]
 800d87a:	4611      	mov	r1, r2
 800d87c:	461a      	mov	r2, r3
 800d87e:	460b      	mov	r3, r1
 800d880:	71fb      	strb	r3, [r7, #7]
 800d882:	4613      	mov	r3, r2
 800d884:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d88e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d892:	2b00      	cmp	r3, #0
 800d894:	d11a      	bne.n	800d8cc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d896:	88bb      	ldrh	r3, [r7, #4]
 800d898:	3303      	adds	r3, #3
 800d89a:	089b      	lsrs	r3, r3, #2
 800d89c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d89e:	2300      	movs	r3, #0
 800d8a0:	61bb      	str	r3, [r7, #24]
 800d8a2:	e00f      	b.n	800d8c4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d8a4:	79fb      	ldrb	r3, [r7, #7]
 800d8a6:	031a      	lsls	r2, r3, #12
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	4413      	add	r3, r2
 800d8ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8b0:	461a      	mov	r2, r3
 800d8b2:	69fb      	ldr	r3, [r7, #28]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d8b8:	69fb      	ldr	r3, [r7, #28]
 800d8ba:	3304      	adds	r3, #4
 800d8bc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d8be:	69bb      	ldr	r3, [r7, #24]
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	61bb      	str	r3, [r7, #24]
 800d8c4:	69ba      	ldr	r2, [r7, #24]
 800d8c6:	693b      	ldr	r3, [r7, #16]
 800d8c8:	429a      	cmp	r2, r3
 800d8ca:	d3eb      	bcc.n	800d8a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d8cc:	2300      	movs	r3, #0
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3724      	adds	r7, #36	; 0x24
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d8:	4770      	bx	lr

0800d8da <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d8da:	b480      	push	{r7}
 800d8dc:	b089      	sub	sp, #36	; 0x24
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	60f8      	str	r0, [r7, #12]
 800d8e2:	60b9      	str	r1, [r7, #8]
 800d8e4:	4613      	mov	r3, r2
 800d8e6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d8f0:	88fb      	ldrh	r3, [r7, #6]
 800d8f2:	3303      	adds	r3, #3
 800d8f4:	089b      	lsrs	r3, r3, #2
 800d8f6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	61bb      	str	r3, [r7, #24]
 800d8fc:	e00b      	b.n	800d916 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d904:	681a      	ldr	r2, [r3, #0]
 800d906:	69fb      	ldr	r3, [r7, #28]
 800d908:	601a      	str	r2, [r3, #0]
    pDest++;
 800d90a:	69fb      	ldr	r3, [r7, #28]
 800d90c:	3304      	adds	r3, #4
 800d90e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d910:	69bb      	ldr	r3, [r7, #24]
 800d912:	3301      	adds	r3, #1
 800d914:	61bb      	str	r3, [r7, #24]
 800d916:	69ba      	ldr	r2, [r7, #24]
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	429a      	cmp	r2, r3
 800d91c:	d3ef      	bcc.n	800d8fe <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d91e:	69fb      	ldr	r3, [r7, #28]
}
 800d920:	4618      	mov	r0, r3
 800d922:	3724      	adds	r7, #36	; 0x24
 800d924:	46bd      	mov	sp, r7
 800d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92a:	4770      	bx	lr

0800d92c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b085      	sub	sp, #20
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	695b      	ldr	r3, [r3, #20]
 800d938:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	699b      	ldr	r3, [r3, #24]
 800d93e:	68fa      	ldr	r2, [r7, #12]
 800d940:	4013      	ands	r3, r2
 800d942:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d944:	68fb      	ldr	r3, [r7, #12]
}
 800d946:	4618      	mov	r0, r3
 800d948:	3714      	adds	r7, #20
 800d94a:	46bd      	mov	sp, r7
 800d94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d950:	4770      	bx	lr

0800d952 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d952:	b480      	push	{r7}
 800d954:	b083      	sub	sp, #12
 800d956:	af00      	add	r7, sp, #0
 800d958:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	695b      	ldr	r3, [r3, #20]
 800d95e:	f003 0301 	and.w	r3, r3, #1
}
 800d962:	4618      	mov	r0, r3
 800d964:	370c      	adds	r7, #12
 800d966:	46bd      	mov	sp, r7
 800d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96c:	4770      	bx	lr
	...

0800d970 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d970:	b480      	push	{r7}
 800d972:	b085      	sub	sp, #20
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d978:	2300      	movs	r3, #0
 800d97a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	3301      	adds	r3, #1
 800d980:	60fb      	str	r3, [r7, #12]
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	4a13      	ldr	r2, [pc, #76]	; (800d9d4 <USB_CoreReset+0x64>)
 800d986:	4293      	cmp	r3, r2
 800d988:	d901      	bls.n	800d98e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d98a:	2303      	movs	r3, #3
 800d98c:	e01b      	b.n	800d9c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	691b      	ldr	r3, [r3, #16]
 800d992:	2b00      	cmp	r3, #0
 800d994:	daf2      	bge.n	800d97c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d996:	2300      	movs	r3, #0
 800d998:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	691b      	ldr	r3, [r3, #16]
 800d99e:	f043 0201 	orr.w	r2, r3, #1
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	3301      	adds	r3, #1
 800d9aa:	60fb      	str	r3, [r7, #12]
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	4a09      	ldr	r2, [pc, #36]	; (800d9d4 <USB_CoreReset+0x64>)
 800d9b0:	4293      	cmp	r3, r2
 800d9b2:	d901      	bls.n	800d9b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d9b4:	2303      	movs	r3, #3
 800d9b6:	e006      	b.n	800d9c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	691b      	ldr	r3, [r3, #16]
 800d9bc:	f003 0301 	and.w	r3, r3, #1
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	d0f0      	beq.n	800d9a6 <USB_CoreReset+0x36>

  return HAL_OK;
 800d9c4:	2300      	movs	r3, #0
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3714      	adds	r7, #20
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d0:	4770      	bx	lr
 800d9d2:	bf00      	nop
 800d9d4:	00030d40 	.word	0x00030d40

0800d9d8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d9d8:	b084      	sub	sp, #16
 800d9da:	b580      	push	{r7, lr}
 800d9dc:	b084      	sub	sp, #16
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
 800d9e2:	f107 001c 	add.w	r0, r7, #28
 800d9e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da0a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da16:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da26:	2b00      	cmp	r3, #0
 800da28:	d018      	beq.n	800da5c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800da2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2c:	2b01      	cmp	r3, #1
 800da2e:	d10a      	bne.n	800da46 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	68ba      	ldr	r2, [r7, #8]
 800da3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800da3e:	f043 0304 	orr.w	r3, r3, #4
 800da42:	6013      	str	r3, [r2, #0]
 800da44:	e014      	b.n	800da70 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	68ba      	ldr	r2, [r7, #8]
 800da50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800da54:	f023 0304 	bic.w	r3, r3, #4
 800da58:	6013      	str	r3, [r2, #0]
 800da5a:	e009      	b.n	800da70 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	68ba      	ldr	r2, [r7, #8]
 800da66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800da6a:	f023 0304 	bic.w	r3, r3, #4
 800da6e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800da70:	2110      	movs	r1, #16
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f7ff feb4 	bl	800d7e0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f7ff fed7 	bl	800d82c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800da7e:	2300      	movs	r3, #0
 800da80:	60fb      	str	r3, [r7, #12]
 800da82:	e015      	b.n	800dab0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	015a      	lsls	r2, r3, #5
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	4413      	add	r3, r2
 800da8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da90:	461a      	mov	r2, r3
 800da92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da96:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	015a      	lsls	r2, r3, #5
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	4413      	add	r3, r2
 800daa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800daa4:	461a      	mov	r2, r3
 800daa6:	2300      	movs	r3, #0
 800daa8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	3301      	adds	r3, #1
 800daae:	60fb      	str	r3, [r7, #12]
 800dab0:	6a3b      	ldr	r3, [r7, #32]
 800dab2:	68fa      	ldr	r2, [r7, #12]
 800dab4:	429a      	cmp	r2, r3
 800dab6:	d3e5      	bcc.n	800da84 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800dab8:	2101      	movs	r1, #1
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f000 f8ac 	bl	800dc18 <USB_DriveVbus>

  HAL_Delay(200U);
 800dac0:	20c8      	movs	r0, #200	; 0xc8
 800dac2:	f7f8 ff71 	bl	80069a8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2200      	movs	r2, #0
 800daca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dad2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d00b      	beq.n	800daf8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dae6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	4a14      	ldr	r2, [pc, #80]	; (800db3c <USB_HostInit+0x164>)
 800daec:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	4a13      	ldr	r2, [pc, #76]	; (800db40 <USB_HostInit+0x168>)
 800daf2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800daf6:	e009      	b.n	800db0c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2280      	movs	r2, #128	; 0x80
 800dafc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	4a10      	ldr	r2, [pc, #64]	; (800db44 <USB_HostInit+0x16c>)
 800db02:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	4a10      	ldr	r2, [pc, #64]	; (800db48 <USB_HostInit+0x170>)
 800db08:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800db0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d105      	bne.n	800db1e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	699b      	ldr	r3, [r3, #24]
 800db16:	f043 0210 	orr.w	r2, r3, #16
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	699a      	ldr	r2, [r3, #24]
 800db22:	4b0a      	ldr	r3, [pc, #40]	; (800db4c <USB_HostInit+0x174>)
 800db24:	4313      	orrs	r3, r2
 800db26:	687a      	ldr	r2, [r7, #4]
 800db28:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800db2a:	2300      	movs	r3, #0
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3710      	adds	r7, #16
 800db30:	46bd      	mov	sp, r7
 800db32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800db36:	b004      	add	sp, #16
 800db38:	4770      	bx	lr
 800db3a:	bf00      	nop
 800db3c:	01000200 	.word	0x01000200
 800db40:	00e00300 	.word	0x00e00300
 800db44:	00600080 	.word	0x00600080
 800db48:	004000e0 	.word	0x004000e0
 800db4c:	a3200008 	.word	0xa3200008

0800db50 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800db50:	b480      	push	{r7}
 800db52:	b085      	sub	sp, #20
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	460b      	mov	r3, r1
 800db5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	68fa      	ldr	r2, [r7, #12]
 800db6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db6e:	f023 0303 	bic.w	r3, r3, #3
 800db72:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800db7a:	681a      	ldr	r2, [r3, #0]
 800db7c:	78fb      	ldrb	r3, [r7, #3]
 800db7e:	f003 0303 	and.w	r3, r3, #3
 800db82:	68f9      	ldr	r1, [r7, #12]
 800db84:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800db88:	4313      	orrs	r3, r2
 800db8a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800db8c:	78fb      	ldrb	r3, [r7, #3]
 800db8e:	2b01      	cmp	r3, #1
 800db90:	d107      	bne.n	800dba2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800db98:	461a      	mov	r2, r3
 800db9a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800db9e:	6053      	str	r3, [r2, #4]
 800dba0:	e009      	b.n	800dbb6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800dba2:	78fb      	ldrb	r3, [r7, #3]
 800dba4:	2b02      	cmp	r3, #2
 800dba6:	d106      	bne.n	800dbb6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dbae:	461a      	mov	r2, r3
 800dbb0:	f241 7370 	movw	r3, #6000	; 0x1770
 800dbb4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800dbb6:	2300      	movs	r3, #0
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3714      	adds	r7, #20
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr

0800dbc4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b084      	sub	sp, #16
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800dbe4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	68fa      	ldr	r2, [r7, #12]
 800dbea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800dbee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dbf2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800dbf4:	2064      	movs	r0, #100	; 0x64
 800dbf6:	f7f8 fed7 	bl	80069a8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	68fa      	ldr	r2, [r7, #12]
 800dbfe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800dc02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc06:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800dc08:	200a      	movs	r0, #10
 800dc0a:	f7f8 fecd 	bl	80069a8 <HAL_Delay>

  return HAL_OK;
 800dc0e:	2300      	movs	r3, #0
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	3710      	adds	r7, #16
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}

0800dc18 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b085      	sub	sp, #20
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	460b      	mov	r3, r1
 800dc22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800dc3c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d109      	bne.n	800dc5c <USB_DriveVbus+0x44>
 800dc48:	78fb      	ldrb	r3, [r7, #3]
 800dc4a:	2b01      	cmp	r3, #1
 800dc4c:	d106      	bne.n	800dc5c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	68fa      	ldr	r2, [r7, #12]
 800dc52:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800dc56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dc5a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dc62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc66:	d109      	bne.n	800dc7c <USB_DriveVbus+0x64>
 800dc68:	78fb      	ldrb	r3, [r7, #3]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d106      	bne.n	800dc7c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	68fa      	ldr	r2, [r7, #12]
 800dc72:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800dc76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc7a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800dc7c:	2300      	movs	r3, #0
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3714      	adds	r7, #20
 800dc82:	46bd      	mov	sp, r7
 800dc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc88:	4770      	bx	lr

0800dc8a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800dc8a:	b480      	push	{r7}
 800dc8c:	b085      	sub	sp, #20
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800dc96:	2300      	movs	r3, #0
 800dc98:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	0c5b      	lsrs	r3, r3, #17
 800dca8:	f003 0303 	and.w	r3, r3, #3
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3714      	adds	r7, #20
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr

0800dcb8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b085      	sub	sp, #20
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dcca:	689b      	ldr	r3, [r3, #8]
 800dccc:	b29b      	uxth	r3, r3
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3714      	adds	r7, #20
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd8:	4770      	bx	lr
	...

0800dcdc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b088      	sub	sp, #32
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
 800dce4:	4608      	mov	r0, r1
 800dce6:	4611      	mov	r1, r2
 800dce8:	461a      	mov	r2, r3
 800dcea:	4603      	mov	r3, r0
 800dcec:	70fb      	strb	r3, [r7, #3]
 800dcee:	460b      	mov	r3, r1
 800dcf0:	70bb      	strb	r3, [r7, #2]
 800dcf2:	4613      	mov	r3, r2
 800dcf4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800dcfe:	78fb      	ldrb	r3, [r7, #3]
 800dd00:	015a      	lsls	r2, r3, #5
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	4413      	add	r3, r2
 800dd06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd0a:	461a      	mov	r2, r3
 800dd0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd10:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800dd12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dd16:	2b03      	cmp	r3, #3
 800dd18:	d87e      	bhi.n	800de18 <USB_HC_Init+0x13c>
 800dd1a:	a201      	add	r2, pc, #4	; (adr r2, 800dd20 <USB_HC_Init+0x44>)
 800dd1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd20:	0800dd31 	.word	0x0800dd31
 800dd24:	0800dddb 	.word	0x0800dddb
 800dd28:	0800dd31 	.word	0x0800dd31
 800dd2c:	0800dd9d 	.word	0x0800dd9d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800dd30:	78fb      	ldrb	r3, [r7, #3]
 800dd32:	015a      	lsls	r2, r3, #5
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	4413      	add	r3, r2
 800dd38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd3c:	461a      	mov	r2, r3
 800dd3e:	f240 439d 	movw	r3, #1181	; 0x49d
 800dd42:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800dd44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	da10      	bge.n	800dd6e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800dd4c:	78fb      	ldrb	r3, [r7, #3]
 800dd4e:	015a      	lsls	r2, r3, #5
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	4413      	add	r3, r2
 800dd54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd58:	68db      	ldr	r3, [r3, #12]
 800dd5a:	78fa      	ldrb	r2, [r7, #3]
 800dd5c:	0151      	lsls	r1, r2, #5
 800dd5e:	693a      	ldr	r2, [r7, #16]
 800dd60:	440a      	add	r2, r1
 800dd62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dd66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dd6a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800dd6c:	e057      	b.n	800de1e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d051      	beq.n	800de1e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800dd7a:	78fb      	ldrb	r3, [r7, #3]
 800dd7c:	015a      	lsls	r2, r3, #5
 800dd7e:	693b      	ldr	r3, [r7, #16]
 800dd80:	4413      	add	r3, r2
 800dd82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd86:	68db      	ldr	r3, [r3, #12]
 800dd88:	78fa      	ldrb	r2, [r7, #3]
 800dd8a:	0151      	lsls	r1, r2, #5
 800dd8c:	693a      	ldr	r2, [r7, #16]
 800dd8e:	440a      	add	r2, r1
 800dd90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dd94:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800dd98:	60d3      	str	r3, [r2, #12]
      break;
 800dd9a:	e040      	b.n	800de1e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800dd9c:	78fb      	ldrb	r3, [r7, #3]
 800dd9e:	015a      	lsls	r2, r3, #5
 800dda0:	693b      	ldr	r3, [r7, #16]
 800dda2:	4413      	add	r3, r2
 800dda4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dda8:	461a      	mov	r2, r3
 800ddaa:	f240 639d 	movw	r3, #1693	; 0x69d
 800ddae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ddb0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	da34      	bge.n	800de22 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ddb8:	78fb      	ldrb	r3, [r7, #3]
 800ddba:	015a      	lsls	r2, r3, #5
 800ddbc:	693b      	ldr	r3, [r7, #16]
 800ddbe:	4413      	add	r3, r2
 800ddc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ddc4:	68db      	ldr	r3, [r3, #12]
 800ddc6:	78fa      	ldrb	r2, [r7, #3]
 800ddc8:	0151      	lsls	r1, r2, #5
 800ddca:	693a      	ldr	r2, [r7, #16]
 800ddcc:	440a      	add	r2, r1
 800ddce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ddd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ddd6:	60d3      	str	r3, [r2, #12]
      }

      break;
 800ddd8:	e023      	b.n	800de22 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ddda:	78fb      	ldrb	r3, [r7, #3]
 800dddc:	015a      	lsls	r2, r3, #5
 800ddde:	693b      	ldr	r3, [r7, #16]
 800dde0:	4413      	add	r3, r2
 800dde2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dde6:	461a      	mov	r2, r3
 800dde8:	f240 2325 	movw	r3, #549	; 0x225
 800ddec:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ddee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	da17      	bge.n	800de26 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800ddf6:	78fb      	ldrb	r3, [r7, #3]
 800ddf8:	015a      	lsls	r2, r3, #5
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	4413      	add	r3, r2
 800ddfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de02:	68db      	ldr	r3, [r3, #12]
 800de04:	78fa      	ldrb	r2, [r7, #3]
 800de06:	0151      	lsls	r1, r2, #5
 800de08:	693a      	ldr	r2, [r7, #16]
 800de0a:	440a      	add	r2, r1
 800de0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800de10:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800de14:	60d3      	str	r3, [r2, #12]
      }
      break;
 800de16:	e006      	b.n	800de26 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800de18:	2301      	movs	r3, #1
 800de1a:	77fb      	strb	r3, [r7, #31]
      break;
 800de1c:	e004      	b.n	800de28 <USB_HC_Init+0x14c>
      break;
 800de1e:	bf00      	nop
 800de20:	e002      	b.n	800de28 <USB_HC_Init+0x14c>
      break;
 800de22:	bf00      	nop
 800de24:	e000      	b.n	800de28 <USB_HC_Init+0x14c>
      break;
 800de26:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800de2e:	699a      	ldr	r2, [r3, #24]
 800de30:	78fb      	ldrb	r3, [r7, #3]
 800de32:	f003 030f 	and.w	r3, r3, #15
 800de36:	2101      	movs	r1, #1
 800de38:	fa01 f303 	lsl.w	r3, r1, r3
 800de3c:	6939      	ldr	r1, [r7, #16]
 800de3e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800de42:	4313      	orrs	r3, r2
 800de44:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	699b      	ldr	r3, [r3, #24]
 800de4a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800de52:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800de56:	2b00      	cmp	r3, #0
 800de58:	da03      	bge.n	800de62 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800de5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de5e:	61bb      	str	r3, [r7, #24]
 800de60:	e001      	b.n	800de66 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800de62:	2300      	movs	r3, #0
 800de64:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f7ff ff0f 	bl	800dc8a <USB_GetHostSpeed>
 800de6c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800de6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800de72:	2b02      	cmp	r3, #2
 800de74:	d106      	bne.n	800de84 <USB_HC_Init+0x1a8>
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	2b02      	cmp	r3, #2
 800de7a:	d003      	beq.n	800de84 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800de7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800de80:	617b      	str	r3, [r7, #20]
 800de82:	e001      	b.n	800de88 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800de84:	2300      	movs	r3, #0
 800de86:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800de88:	787b      	ldrb	r3, [r7, #1]
 800de8a:	059b      	lsls	r3, r3, #22
 800de8c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800de90:	78bb      	ldrb	r3, [r7, #2]
 800de92:	02db      	lsls	r3, r3, #11
 800de94:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800de98:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800de9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800de9e:	049b      	lsls	r3, r3, #18
 800dea0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800dea4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800dea6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800dea8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800deac:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800deae:	69bb      	ldr	r3, [r7, #24]
 800deb0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800deb2:	78fb      	ldrb	r3, [r7, #3]
 800deb4:	0159      	lsls	r1, r3, #5
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	440b      	add	r3, r1
 800deba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800debe:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dec4:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800dec6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800deca:	2b03      	cmp	r3, #3
 800decc:	d10f      	bne.n	800deee <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800dece:	78fb      	ldrb	r3, [r7, #3]
 800ded0:	015a      	lsls	r2, r3, #5
 800ded2:	693b      	ldr	r3, [r7, #16]
 800ded4:	4413      	add	r3, r2
 800ded6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	78fa      	ldrb	r2, [r7, #3]
 800dede:	0151      	lsls	r1, r2, #5
 800dee0:	693a      	ldr	r2, [r7, #16]
 800dee2:	440a      	add	r2, r1
 800dee4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dee8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800deec:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800deee:	7ffb      	ldrb	r3, [r7, #31]
}
 800def0:	4618      	mov	r0, r3
 800def2:	3720      	adds	r7, #32
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}

0800def8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b08c      	sub	sp, #48	; 0x30
 800defc:	af02      	add	r7, sp, #8
 800defe:	60f8      	str	r0, [r7, #12]
 800df00:	60b9      	str	r1, [r7, #8]
 800df02:	4613      	mov	r3, r2
 800df04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	785b      	ldrb	r3, [r3, #1]
 800df0e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800df10:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df14:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d02d      	beq.n	800df7e <USB_HC_StartXfer+0x86>
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	791b      	ldrb	r3, [r3, #4]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d129      	bne.n	800df7e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800df2a:	79fb      	ldrb	r3, [r7, #7]
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d117      	bne.n	800df60 <USB_HC_StartXfer+0x68>
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	79db      	ldrb	r3, [r3, #7]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d003      	beq.n	800df40 <USB_HC_StartXfer+0x48>
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	79db      	ldrb	r3, [r3, #7]
 800df3c:	2b02      	cmp	r3, #2
 800df3e:	d10f      	bne.n	800df60 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800df40:	69fb      	ldr	r3, [r7, #28]
 800df42:	015a      	lsls	r2, r3, #5
 800df44:	6a3b      	ldr	r3, [r7, #32]
 800df46:	4413      	add	r3, r2
 800df48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df4c:	68db      	ldr	r3, [r3, #12]
 800df4e:	69fa      	ldr	r2, [r7, #28]
 800df50:	0151      	lsls	r1, r2, #5
 800df52:	6a3a      	ldr	r2, [r7, #32]
 800df54:	440a      	add	r2, r1
 800df56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800df5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df5e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800df60:	79fb      	ldrb	r3, [r7, #7]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d10b      	bne.n	800df7e <USB_HC_StartXfer+0x86>
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	795b      	ldrb	r3, [r3, #5]
 800df6a:	2b01      	cmp	r3, #1
 800df6c:	d107      	bne.n	800df7e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	785b      	ldrb	r3, [r3, #1]
 800df72:	4619      	mov	r1, r3
 800df74:	68f8      	ldr	r0, [r7, #12]
 800df76:	f000 fa2f 	bl	800e3d8 <USB_DoPing>
      return HAL_OK;
 800df7a:	2300      	movs	r3, #0
 800df7c:	e0f8      	b.n	800e170 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	695b      	ldr	r3, [r3, #20]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d018      	beq.n	800dfb8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	695b      	ldr	r3, [r3, #20]
 800df8a:	68ba      	ldr	r2, [r7, #8]
 800df8c:	8912      	ldrh	r2, [r2, #8]
 800df8e:	4413      	add	r3, r2
 800df90:	3b01      	subs	r3, #1
 800df92:	68ba      	ldr	r2, [r7, #8]
 800df94:	8912      	ldrh	r2, [r2, #8]
 800df96:	fbb3 f3f2 	udiv	r3, r3, r2
 800df9a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800df9c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800df9e:	8b7b      	ldrh	r3, [r7, #26]
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d90b      	bls.n	800dfbc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800dfa4:	8b7b      	ldrh	r3, [r7, #26]
 800dfa6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800dfa8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dfaa:	68ba      	ldr	r2, [r7, #8]
 800dfac:	8912      	ldrh	r2, [r2, #8]
 800dfae:	fb02 f203 	mul.w	r2, r2, r3
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	611a      	str	r2, [r3, #16]
 800dfb6:	e001      	b.n	800dfbc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800dfb8:	2301      	movs	r3, #1
 800dfba:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	78db      	ldrb	r3, [r3, #3]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d007      	beq.n	800dfd4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800dfc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dfc6:	68ba      	ldr	r2, [r7, #8]
 800dfc8:	8912      	ldrh	r2, [r2, #8]
 800dfca:	fb02 f203 	mul.w	r2, r2, r3
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	611a      	str	r2, [r3, #16]
 800dfd2:	e003      	b.n	800dfdc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	695a      	ldr	r2, [r3, #20]
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	691b      	ldr	r3, [r3, #16]
 800dfe0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dfe4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dfe6:	04d9      	lsls	r1, r3, #19
 800dfe8:	4b63      	ldr	r3, [pc, #396]	; (800e178 <USB_HC_StartXfer+0x280>)
 800dfea:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dfec:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	7a9b      	ldrb	r3, [r3, #10]
 800dff2:	075b      	lsls	r3, r3, #29
 800dff4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dff8:	69f9      	ldr	r1, [r7, #28]
 800dffa:	0148      	lsls	r0, r1, #5
 800dffc:	6a39      	ldr	r1, [r7, #32]
 800dffe:	4401      	add	r1, r0
 800e000:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e004:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e006:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800e008:	79fb      	ldrb	r3, [r7, #7]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d009      	beq.n	800e022 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	68d9      	ldr	r1, [r3, #12]
 800e012:	69fb      	ldr	r3, [r7, #28]
 800e014:	015a      	lsls	r2, r3, #5
 800e016:	6a3b      	ldr	r3, [r7, #32]
 800e018:	4413      	add	r3, r2
 800e01a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e01e:	460a      	mov	r2, r1
 800e020:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800e022:	6a3b      	ldr	r3, [r7, #32]
 800e024:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e028:	689b      	ldr	r3, [r3, #8]
 800e02a:	f003 0301 	and.w	r3, r3, #1
 800e02e:	2b00      	cmp	r3, #0
 800e030:	bf0c      	ite	eq
 800e032:	2301      	moveq	r3, #1
 800e034:	2300      	movne	r3, #0
 800e036:	b2db      	uxtb	r3, r3
 800e038:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800e03a:	69fb      	ldr	r3, [r7, #28]
 800e03c:	015a      	lsls	r2, r3, #5
 800e03e:	6a3b      	ldr	r3, [r7, #32]
 800e040:	4413      	add	r3, r2
 800e042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	69fa      	ldr	r2, [r7, #28]
 800e04a:	0151      	lsls	r1, r2, #5
 800e04c:	6a3a      	ldr	r2, [r7, #32]
 800e04e:	440a      	add	r2, r1
 800e050:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e054:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e058:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800e05a:	69fb      	ldr	r3, [r7, #28]
 800e05c:	015a      	lsls	r2, r3, #5
 800e05e:	6a3b      	ldr	r3, [r7, #32]
 800e060:	4413      	add	r3, r2
 800e062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e066:	681a      	ldr	r2, [r3, #0]
 800e068:	7e7b      	ldrb	r3, [r7, #25]
 800e06a:	075b      	lsls	r3, r3, #29
 800e06c:	69f9      	ldr	r1, [r7, #28]
 800e06e:	0148      	lsls	r0, r1, #5
 800e070:	6a39      	ldr	r1, [r7, #32]
 800e072:	4401      	add	r1, r0
 800e074:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800e078:	4313      	orrs	r3, r2
 800e07a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800e07c:	69fb      	ldr	r3, [r7, #28]
 800e07e:	015a      	lsls	r2, r3, #5
 800e080:	6a3b      	ldr	r3, [r7, #32]
 800e082:	4413      	add	r3, r2
 800e084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e092:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	78db      	ldrb	r3, [r3, #3]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d004      	beq.n	800e0a6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e0a2:	613b      	str	r3, [r7, #16]
 800e0a4:	e003      	b.n	800e0ae <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e0ac:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e0b4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800e0b6:	69fb      	ldr	r3, [r7, #28]
 800e0b8:	015a      	lsls	r2, r3, #5
 800e0ba:	6a3b      	ldr	r3, [r7, #32]
 800e0bc:	4413      	add	r3, r2
 800e0be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800e0c8:	79fb      	ldrb	r3, [r7, #7]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d001      	beq.n	800e0d2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	e04e      	b.n	800e170 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	78db      	ldrb	r3, [r3, #3]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d149      	bne.n	800e16e <USB_HC_StartXfer+0x276>
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	695b      	ldr	r3, [r3, #20]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d045      	beq.n	800e16e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	79db      	ldrb	r3, [r3, #7]
 800e0e6:	2b03      	cmp	r3, #3
 800e0e8:	d830      	bhi.n	800e14c <USB_HC_StartXfer+0x254>
 800e0ea:	a201      	add	r2, pc, #4	; (adr r2, 800e0f0 <USB_HC_StartXfer+0x1f8>)
 800e0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0f0:	0800e101 	.word	0x0800e101
 800e0f4:	0800e125 	.word	0x0800e125
 800e0f8:	0800e101 	.word	0x0800e101
 800e0fc:	0800e125 	.word	0x0800e125
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	695b      	ldr	r3, [r3, #20]
 800e104:	3303      	adds	r3, #3
 800e106:	089b      	lsrs	r3, r3, #2
 800e108:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800e10a:	8afa      	ldrh	r2, [r7, #22]
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e110:	b29b      	uxth	r3, r3
 800e112:	429a      	cmp	r2, r3
 800e114:	d91c      	bls.n	800e150 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	699b      	ldr	r3, [r3, #24]
 800e11a:	f043 0220 	orr.w	r2, r3, #32
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	619a      	str	r2, [r3, #24]
        }
        break;
 800e122:	e015      	b.n	800e150 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	695b      	ldr	r3, [r3, #20]
 800e128:	3303      	adds	r3, #3
 800e12a:	089b      	lsrs	r3, r3, #2
 800e12c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800e12e:	8afa      	ldrh	r2, [r7, #22]
 800e130:	6a3b      	ldr	r3, [r7, #32]
 800e132:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e136:	691b      	ldr	r3, [r3, #16]
 800e138:	b29b      	uxth	r3, r3
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d90a      	bls.n	800e154 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	699b      	ldr	r3, [r3, #24]
 800e142:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	619a      	str	r2, [r3, #24]
        }
        break;
 800e14a:	e003      	b.n	800e154 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800e14c:	bf00      	nop
 800e14e:	e002      	b.n	800e156 <USB_HC_StartXfer+0x25e>
        break;
 800e150:	bf00      	nop
 800e152:	e000      	b.n	800e156 <USB_HC_StartXfer+0x25e>
        break;
 800e154:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	68d9      	ldr	r1, [r3, #12]
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	785a      	ldrb	r2, [r3, #1]
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	695b      	ldr	r3, [r3, #20]
 800e162:	b29b      	uxth	r3, r3
 800e164:	2000      	movs	r0, #0
 800e166:	9000      	str	r0, [sp, #0]
 800e168:	68f8      	ldr	r0, [r7, #12]
 800e16a:	f7ff fb81 	bl	800d870 <USB_WritePacket>
  }

  return HAL_OK;
 800e16e:	2300      	movs	r3, #0
}
 800e170:	4618      	mov	r0, r3
 800e172:	3728      	adds	r7, #40	; 0x28
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}
 800e178:	1ff80000 	.word	0x1ff80000

0800e17c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e17c:	b480      	push	{r7}
 800e17e:	b085      	sub	sp, #20
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e18e:	695b      	ldr	r3, [r3, #20]
 800e190:	b29b      	uxth	r3, r3
}
 800e192:	4618      	mov	r0, r3
 800e194:	3714      	adds	r7, #20
 800e196:	46bd      	mov	sp, r7
 800e198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19c:	4770      	bx	lr

0800e19e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800e19e:	b480      	push	{r7}
 800e1a0:	b089      	sub	sp, #36	; 0x24
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	6078      	str	r0, [r7, #4]
 800e1a6:	460b      	mov	r3, r1
 800e1a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800e1ae:	78fb      	ldrb	r3, [r7, #3]
 800e1b0:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	015a      	lsls	r2, r3, #5
 800e1ba:	69bb      	ldr	r3, [r7, #24]
 800e1bc:	4413      	add	r3, r2
 800e1be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	0c9b      	lsrs	r3, r3, #18
 800e1c6:	f003 0303 	and.w	r3, r3, #3
 800e1ca:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	015a      	lsls	r2, r3, #5
 800e1d0:	69bb      	ldr	r3, [r7, #24]
 800e1d2:	4413      	add	r3, r2
 800e1d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	0fdb      	lsrs	r3, r3, #31
 800e1dc:	f003 0301 	and.w	r3, r3, #1
 800e1e0:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	689b      	ldr	r3, [r3, #8]
 800e1e6:	f003 0320 	and.w	r3, r3, #32
 800e1ea:	2b20      	cmp	r3, #32
 800e1ec:	d104      	bne.n	800e1f8 <USB_HC_Halt+0x5a>
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d101      	bne.n	800e1f8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	e0e8      	b.n	800e3ca <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800e1f8:	693b      	ldr	r3, [r7, #16]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d002      	beq.n	800e204 <USB_HC_Halt+0x66>
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	2b02      	cmp	r3, #2
 800e202:	d173      	bne.n	800e2ec <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	015a      	lsls	r2, r3, #5
 800e208:	69bb      	ldr	r3, [r7, #24]
 800e20a:	4413      	add	r3, r2
 800e20c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	697a      	ldr	r2, [r7, #20]
 800e214:	0151      	lsls	r1, r2, #5
 800e216:	69ba      	ldr	r2, [r7, #24]
 800e218:	440a      	add	r2, r1
 800e21a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e21e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e222:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	689b      	ldr	r3, [r3, #8]
 800e228:	f003 0320 	and.w	r3, r3, #32
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	f040 80cb 	bne.w	800e3c8 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e236:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d143      	bne.n	800e2c6 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	015a      	lsls	r2, r3, #5
 800e242:	69bb      	ldr	r3, [r7, #24]
 800e244:	4413      	add	r3, r2
 800e246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	697a      	ldr	r2, [r7, #20]
 800e24e:	0151      	lsls	r1, r2, #5
 800e250:	69ba      	ldr	r2, [r7, #24]
 800e252:	440a      	add	r2, r1
 800e254:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e258:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e25c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	015a      	lsls	r2, r3, #5
 800e262:	69bb      	ldr	r3, [r7, #24]
 800e264:	4413      	add	r3, r2
 800e266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	697a      	ldr	r2, [r7, #20]
 800e26e:	0151      	lsls	r1, r2, #5
 800e270:	69ba      	ldr	r2, [r7, #24]
 800e272:	440a      	add	r2, r1
 800e274:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e278:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e27c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	015a      	lsls	r2, r3, #5
 800e282:	69bb      	ldr	r3, [r7, #24]
 800e284:	4413      	add	r3, r2
 800e286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	697a      	ldr	r2, [r7, #20]
 800e28e:	0151      	lsls	r1, r2, #5
 800e290:	69ba      	ldr	r2, [r7, #24]
 800e292:	440a      	add	r2, r1
 800e294:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e298:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e29c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800e29e:	69fb      	ldr	r3, [r7, #28]
 800e2a0:	3301      	adds	r3, #1
 800e2a2:	61fb      	str	r3, [r7, #28]
 800e2a4:	69fb      	ldr	r3, [r7, #28]
 800e2a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e2aa:	d81d      	bhi.n	800e2e8 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	015a      	lsls	r2, r3, #5
 800e2b0:	69bb      	ldr	r3, [r7, #24]
 800e2b2:	4413      	add	r3, r2
 800e2b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e2be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e2c2:	d0ec      	beq.n	800e29e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e2c4:	e080      	b.n	800e3c8 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e2c6:	697b      	ldr	r3, [r7, #20]
 800e2c8:	015a      	lsls	r2, r3, #5
 800e2ca:	69bb      	ldr	r3, [r7, #24]
 800e2cc:	4413      	add	r3, r2
 800e2ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	697a      	ldr	r2, [r7, #20]
 800e2d6:	0151      	lsls	r1, r2, #5
 800e2d8:	69ba      	ldr	r2, [r7, #24]
 800e2da:	440a      	add	r2, r1
 800e2dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e2e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e2e4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e2e6:	e06f      	b.n	800e3c8 <USB_HC_Halt+0x22a>
            break;
 800e2e8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e2ea:	e06d      	b.n	800e3c8 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	015a      	lsls	r2, r3, #5
 800e2f0:	69bb      	ldr	r3, [r7, #24]
 800e2f2:	4413      	add	r3, r2
 800e2f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	697a      	ldr	r2, [r7, #20]
 800e2fc:	0151      	lsls	r1, r2, #5
 800e2fe:	69ba      	ldr	r2, [r7, #24]
 800e300:	440a      	add	r2, r1
 800e302:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e306:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e30a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800e30c:	69bb      	ldr	r3, [r7, #24]
 800e30e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e312:	691b      	ldr	r3, [r3, #16]
 800e314:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d143      	bne.n	800e3a4 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	015a      	lsls	r2, r3, #5
 800e320:	69bb      	ldr	r3, [r7, #24]
 800e322:	4413      	add	r3, r2
 800e324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	697a      	ldr	r2, [r7, #20]
 800e32c:	0151      	lsls	r1, r2, #5
 800e32e:	69ba      	ldr	r2, [r7, #24]
 800e330:	440a      	add	r2, r1
 800e332:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e336:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e33a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	015a      	lsls	r2, r3, #5
 800e340:	69bb      	ldr	r3, [r7, #24]
 800e342:	4413      	add	r3, r2
 800e344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	697a      	ldr	r2, [r7, #20]
 800e34c:	0151      	lsls	r1, r2, #5
 800e34e:	69ba      	ldr	r2, [r7, #24]
 800e350:	440a      	add	r2, r1
 800e352:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e356:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e35a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	015a      	lsls	r2, r3, #5
 800e360:	69bb      	ldr	r3, [r7, #24]
 800e362:	4413      	add	r3, r2
 800e364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	697a      	ldr	r2, [r7, #20]
 800e36c:	0151      	lsls	r1, r2, #5
 800e36e:	69ba      	ldr	r2, [r7, #24]
 800e370:	440a      	add	r2, r1
 800e372:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e376:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e37a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800e37c:	69fb      	ldr	r3, [r7, #28]
 800e37e:	3301      	adds	r3, #1
 800e380:	61fb      	str	r3, [r7, #28]
 800e382:	69fb      	ldr	r3, [r7, #28]
 800e384:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e388:	d81d      	bhi.n	800e3c6 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	015a      	lsls	r2, r3, #5
 800e38e:	69bb      	ldr	r3, [r7, #24]
 800e390:	4413      	add	r3, r2
 800e392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e39c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e3a0:	d0ec      	beq.n	800e37c <USB_HC_Halt+0x1de>
 800e3a2:	e011      	b.n	800e3c8 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	015a      	lsls	r2, r3, #5
 800e3a8:	69bb      	ldr	r3, [r7, #24]
 800e3aa:	4413      	add	r3, r2
 800e3ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	697a      	ldr	r2, [r7, #20]
 800e3b4:	0151      	lsls	r1, r2, #5
 800e3b6:	69ba      	ldr	r2, [r7, #24]
 800e3b8:	440a      	add	r2, r1
 800e3ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e3be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e3c2:	6013      	str	r3, [r2, #0]
 800e3c4:	e000      	b.n	800e3c8 <USB_HC_Halt+0x22a>
          break;
 800e3c6:	bf00      	nop
    }
  }

  return HAL_OK;
 800e3c8:	2300      	movs	r3, #0
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	3724      	adds	r7, #36	; 0x24
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d4:	4770      	bx	lr
	...

0800e3d8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800e3d8:	b480      	push	{r7}
 800e3da:	b087      	sub	sp, #28
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
 800e3e0:	460b      	mov	r3, r1
 800e3e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800e3e8:	78fb      	ldrb	r3, [r7, #3]
 800e3ea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	04da      	lsls	r2, r3, #19
 800e3f4:	4b15      	ldr	r3, [pc, #84]	; (800e44c <USB_DoPing+0x74>)
 800e3f6:	4013      	ands	r3, r2
 800e3f8:	693a      	ldr	r2, [r7, #16]
 800e3fa:	0151      	lsls	r1, r2, #5
 800e3fc:	697a      	ldr	r2, [r7, #20]
 800e3fe:	440a      	add	r2, r1
 800e400:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e404:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e408:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800e40a:	693b      	ldr	r3, [r7, #16]
 800e40c:	015a      	lsls	r2, r3, #5
 800e40e:	697b      	ldr	r3, [r7, #20]
 800e410:	4413      	add	r3, r2
 800e412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e420:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e428:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	015a      	lsls	r2, r3, #5
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	4413      	add	r3, r2
 800e432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e436:	461a      	mov	r2, r3
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800e43c:	2300      	movs	r3, #0
}
 800e43e:	4618      	mov	r0, r3
 800e440:	371c      	adds	r7, #28
 800e442:	46bd      	mov	sp, r7
 800e444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e448:	4770      	bx	lr
 800e44a:	bf00      	nop
 800e44c:	1ff80000 	.word	0x1ff80000

0800e450 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b086      	sub	sp, #24
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800e45c:	2300      	movs	r3, #0
 800e45e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f7ff f981 	bl	800d768 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800e466:	2110      	movs	r1, #16
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f7ff f9b9 	bl	800d7e0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f7ff f9dc 	bl	800d82c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800e474:	2300      	movs	r3, #0
 800e476:	613b      	str	r3, [r7, #16]
 800e478:	e01f      	b.n	800e4ba <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800e47a:	693b      	ldr	r3, [r7, #16]
 800e47c:	015a      	lsls	r2, r3, #5
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	4413      	add	r3, r2
 800e482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e490:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e498:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e4a0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e4a2:	693b      	ldr	r3, [r7, #16]
 800e4a4:	015a      	lsls	r2, r3, #5
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	4413      	add	r3, r2
 800e4aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e4b4:	693b      	ldr	r3, [r7, #16]
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	613b      	str	r3, [r7, #16]
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	2b0f      	cmp	r3, #15
 800e4be:	d9dc      	bls.n	800e47a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	613b      	str	r3, [r7, #16]
 800e4c4:	e034      	b.n	800e530 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	015a      	lsls	r2, r3, #5
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	4413      	add	r3, r2
 800e4ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e4dc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e4e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e4ec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e4ee:	693b      	ldr	r3, [r7, #16]
 800e4f0:	015a      	lsls	r2, r3, #5
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	4413      	add	r3, r2
 800e4f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800e500:	697b      	ldr	r3, [r7, #20]
 800e502:	3301      	adds	r3, #1
 800e504:	617b      	str	r3, [r7, #20]
 800e506:	697b      	ldr	r3, [r7, #20]
 800e508:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e50c:	d80c      	bhi.n	800e528 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e50e:	693b      	ldr	r3, [r7, #16]
 800e510:	015a      	lsls	r2, r3, #5
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	4413      	add	r3, r2
 800e516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e520:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e524:	d0ec      	beq.n	800e500 <USB_StopHost+0xb0>
 800e526:	e000      	b.n	800e52a <USB_StopHost+0xda>
        break;
 800e528:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e52a:	693b      	ldr	r3, [r7, #16]
 800e52c:	3301      	adds	r3, #1
 800e52e:	613b      	str	r3, [r7, #16]
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	2b0f      	cmp	r3, #15
 800e534:	d9c7      	bls.n	800e4c6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e53c:	461a      	mov	r2, r3
 800e53e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e542:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e54a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f7ff f8fa 	bl	800d746 <USB_EnableGlobalInt>

  return HAL_OK;
 800e552:	2300      	movs	r3, #0
}
 800e554:	4618      	mov	r0, r3
 800e556:	3718      	adds	r7, #24
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}

0800e55c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800e55c:	b590      	push	{r4, r7, lr}
 800e55e:	b089      	sub	sp, #36	; 0x24
 800e560:	af04      	add	r7, sp, #16
 800e562:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800e564:	2301      	movs	r3, #1
 800e566:	2202      	movs	r2, #2
 800e568:	2102      	movs	r1, #2
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f000 fc66 	bl	800ee3c <USBH_FindInterface>
 800e570:	4603      	mov	r3, r0
 800e572:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e574:	7bfb      	ldrb	r3, [r7, #15]
 800e576:	2bff      	cmp	r3, #255	; 0xff
 800e578:	d002      	beq.n	800e580 <USBH_CDC_InterfaceInit+0x24>
 800e57a:	7bfb      	ldrb	r3, [r7, #15]
 800e57c:	2b01      	cmp	r3, #1
 800e57e:	d901      	bls.n	800e584 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e580:	2302      	movs	r3, #2
 800e582:	e13d      	b.n	800e800 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800e584:	7bfb      	ldrb	r3, [r7, #15]
 800e586:	4619      	mov	r1, r3
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f000 fc3b 	bl	800ee04 <USBH_SelectInterface>
 800e58e:	4603      	mov	r3, r0
 800e590:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800e592:	7bbb      	ldrb	r3, [r7, #14]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d001      	beq.n	800e59c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800e598:	2302      	movs	r3, #2
 800e59a:	e131      	b.n	800e800 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800e5a2:	2050      	movs	r0, #80	; 0x50
 800e5a4:	f002 f9da 	bl	801095c <malloc>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e5b2:	69db      	ldr	r3, [r3, #28]
 800e5b4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d101      	bne.n	800e5c0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800e5bc:	2302      	movs	r3, #2
 800e5be:	e11f      	b.n	800e800 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800e5c0:	2250      	movs	r2, #80	; 0x50
 800e5c2:	2100      	movs	r1, #0
 800e5c4:	68b8      	ldr	r0, [r7, #8]
 800e5c6:	f002 f9e7 	bl	8010998 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e5ca:	7bfb      	ldrb	r3, [r7, #15]
 800e5cc:	687a      	ldr	r2, [r7, #4]
 800e5ce:	211a      	movs	r1, #26
 800e5d0:	fb01 f303 	mul.w	r3, r1, r3
 800e5d4:	4413      	add	r3, r2
 800e5d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	b25b      	sxtb	r3, r3
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	da15      	bge.n	800e60e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e5e2:	7bfb      	ldrb	r3, [r7, #15]
 800e5e4:	687a      	ldr	r2, [r7, #4]
 800e5e6:	211a      	movs	r1, #26
 800e5e8:	fb01 f303 	mul.w	r3, r1, r3
 800e5ec:	4413      	add	r3, r2
 800e5ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e5f2:	781a      	ldrb	r2, [r3, #0]
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e5f8:	7bfb      	ldrb	r3, [r7, #15]
 800e5fa:	687a      	ldr	r2, [r7, #4]
 800e5fc:	211a      	movs	r1, #26
 800e5fe:	fb01 f303 	mul.w	r3, r1, r3
 800e602:	4413      	add	r3, r2
 800e604:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e608:	881a      	ldrh	r2, [r3, #0]
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	785b      	ldrb	r3, [r3, #1]
 800e612:	4619      	mov	r1, r3
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	f001 fe32 	bl	801027e <USBH_AllocPipe>
 800e61a:	4603      	mov	r3, r0
 800e61c:	461a      	mov	r2, r3
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	7819      	ldrb	r1, [r3, #0]
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	7858      	ldrb	r0, [r3, #1]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e636:	68ba      	ldr	r2, [r7, #8]
 800e638:	8952      	ldrh	r2, [r2, #10]
 800e63a:	9202      	str	r2, [sp, #8]
 800e63c:	2203      	movs	r2, #3
 800e63e:	9201      	str	r2, [sp, #4]
 800e640:	9300      	str	r3, [sp, #0]
 800e642:	4623      	mov	r3, r4
 800e644:	4602      	mov	r2, r0
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f001 fdea 	bl	8010220 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	781b      	ldrb	r3, [r3, #0]
 800e650:	2200      	movs	r2, #0
 800e652:	4619      	mov	r1, r3
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f002 f8f0 	bl	801083a <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800e65a:	2300      	movs	r3, #0
 800e65c:	2200      	movs	r2, #0
 800e65e:	210a      	movs	r1, #10
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f000 fbeb 	bl	800ee3c <USBH_FindInterface>
 800e666:	4603      	mov	r3, r0
 800e668:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e66a:	7bfb      	ldrb	r3, [r7, #15]
 800e66c:	2bff      	cmp	r3, #255	; 0xff
 800e66e:	d002      	beq.n	800e676 <USBH_CDC_InterfaceInit+0x11a>
 800e670:	7bfb      	ldrb	r3, [r7, #15]
 800e672:	2b01      	cmp	r3, #1
 800e674:	d901      	bls.n	800e67a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e676:	2302      	movs	r3, #2
 800e678:	e0c2      	b.n	800e800 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e67a:	7bfb      	ldrb	r3, [r7, #15]
 800e67c:	687a      	ldr	r2, [r7, #4]
 800e67e:	211a      	movs	r1, #26
 800e680:	fb01 f303 	mul.w	r3, r1, r3
 800e684:	4413      	add	r3, r2
 800e686:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e68a:	781b      	ldrb	r3, [r3, #0]
 800e68c:	b25b      	sxtb	r3, r3
 800e68e:	2b00      	cmp	r3, #0
 800e690:	da16      	bge.n	800e6c0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e692:	7bfb      	ldrb	r3, [r7, #15]
 800e694:	687a      	ldr	r2, [r7, #4]
 800e696:	211a      	movs	r1, #26
 800e698:	fb01 f303 	mul.w	r3, r1, r3
 800e69c:	4413      	add	r3, r2
 800e69e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e6a2:	781a      	ldrb	r2, [r3, #0]
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e6a8:	7bfb      	ldrb	r3, [r7, #15]
 800e6aa:	687a      	ldr	r2, [r7, #4]
 800e6ac:	211a      	movs	r1, #26
 800e6ae:	fb01 f303 	mul.w	r3, r1, r3
 800e6b2:	4413      	add	r3, r2
 800e6b4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e6b8:	881a      	ldrh	r2, [r3, #0]
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	835a      	strh	r2, [r3, #26]
 800e6be:	e015      	b.n	800e6ec <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e6c0:	7bfb      	ldrb	r3, [r7, #15]
 800e6c2:	687a      	ldr	r2, [r7, #4]
 800e6c4:	211a      	movs	r1, #26
 800e6c6:	fb01 f303 	mul.w	r3, r1, r3
 800e6ca:	4413      	add	r3, r2
 800e6cc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e6d0:	781a      	ldrb	r2, [r3, #0]
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e6d6:	7bfb      	ldrb	r3, [r7, #15]
 800e6d8:	687a      	ldr	r2, [r7, #4]
 800e6da:	211a      	movs	r1, #26
 800e6dc:	fb01 f303 	mul.w	r3, r1, r3
 800e6e0:	4413      	add	r3, r2
 800e6e2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e6e6:	881a      	ldrh	r2, [r3, #0]
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800e6ec:	7bfb      	ldrb	r3, [r7, #15]
 800e6ee:	687a      	ldr	r2, [r7, #4]
 800e6f0:	211a      	movs	r1, #26
 800e6f2:	fb01 f303 	mul.w	r3, r1, r3
 800e6f6:	4413      	add	r3, r2
 800e6f8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e6fc:	781b      	ldrb	r3, [r3, #0]
 800e6fe:	b25b      	sxtb	r3, r3
 800e700:	2b00      	cmp	r3, #0
 800e702:	da16      	bge.n	800e732 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e704:	7bfb      	ldrb	r3, [r7, #15]
 800e706:	687a      	ldr	r2, [r7, #4]
 800e708:	211a      	movs	r1, #26
 800e70a:	fb01 f303 	mul.w	r3, r1, r3
 800e70e:	4413      	add	r3, r2
 800e710:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e714:	781a      	ldrb	r2, [r3, #0]
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e71a:	7bfb      	ldrb	r3, [r7, #15]
 800e71c:	687a      	ldr	r2, [r7, #4]
 800e71e:	211a      	movs	r1, #26
 800e720:	fb01 f303 	mul.w	r3, r1, r3
 800e724:	4413      	add	r3, r2
 800e726:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e72a:	881a      	ldrh	r2, [r3, #0]
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	835a      	strh	r2, [r3, #26]
 800e730:	e015      	b.n	800e75e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e732:	7bfb      	ldrb	r3, [r7, #15]
 800e734:	687a      	ldr	r2, [r7, #4]
 800e736:	211a      	movs	r1, #26
 800e738:	fb01 f303 	mul.w	r3, r1, r3
 800e73c:	4413      	add	r3, r2
 800e73e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e742:	781a      	ldrb	r2, [r3, #0]
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e748:	7bfb      	ldrb	r3, [r7, #15]
 800e74a:	687a      	ldr	r2, [r7, #4]
 800e74c:	211a      	movs	r1, #26
 800e74e:	fb01 f303 	mul.w	r3, r1, r3
 800e752:	4413      	add	r3, r2
 800e754:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e758:	881a      	ldrh	r2, [r3, #0]
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	7b9b      	ldrb	r3, [r3, #14]
 800e762:	4619      	mov	r1, r3
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f001 fd8a 	bl	801027e <USBH_AllocPipe>
 800e76a:	4603      	mov	r3, r0
 800e76c:	461a      	mov	r2, r3
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	7bdb      	ldrb	r3, [r3, #15]
 800e776:	4619      	mov	r1, r3
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f001 fd80 	bl	801027e <USBH_AllocPipe>
 800e77e:	4603      	mov	r3, r0
 800e780:	461a      	mov	r2, r3
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	7b59      	ldrb	r1, [r3, #13]
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	7b98      	ldrb	r0, [r3, #14]
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e79a:	68ba      	ldr	r2, [r7, #8]
 800e79c:	8b12      	ldrh	r2, [r2, #24]
 800e79e:	9202      	str	r2, [sp, #8]
 800e7a0:	2202      	movs	r2, #2
 800e7a2:	9201      	str	r2, [sp, #4]
 800e7a4:	9300      	str	r3, [sp, #0]
 800e7a6:	4623      	mov	r3, r4
 800e7a8:	4602      	mov	r2, r0
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f001 fd38 	bl	8010220 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	7b19      	ldrb	r1, [r3, #12]
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	7bd8      	ldrb	r0, [r3, #15]
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e7c4:	68ba      	ldr	r2, [r7, #8]
 800e7c6:	8b52      	ldrh	r2, [r2, #26]
 800e7c8:	9202      	str	r2, [sp, #8]
 800e7ca:	2202      	movs	r2, #2
 800e7cc:	9201      	str	r2, [sp, #4]
 800e7ce:	9300      	str	r3, [sp, #0]
 800e7d0:	4623      	mov	r3, r4
 800e7d2:	4602      	mov	r2, r0
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	f001 fd23 	bl	8010220 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	7b5b      	ldrb	r3, [r3, #13]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f002 f825 	bl	801083a <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	7b1b      	ldrb	r3, [r3, #12]
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f002 f81e 	bl	801083a <USBH_LL_SetToggle>

  return USBH_OK;
 800e7fe:	2300      	movs	r3, #0
}
 800e800:	4618      	mov	r0, r3
 800e802:	3714      	adds	r7, #20
 800e804:	46bd      	mov	sp, r7
 800e806:	bd90      	pop	{r4, r7, pc}

0800e808 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b084      	sub	sp, #16
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e816:	69db      	ldr	r3, [r3, #28]
 800e818:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d00e      	beq.n	800e840 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	4619      	mov	r1, r3
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f001 fd18 	bl	801025e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	781b      	ldrb	r3, [r3, #0]
 800e832:	4619      	mov	r1, r3
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f001 fd43 	bl	80102c0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	2200      	movs	r2, #0
 800e83e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	7b1b      	ldrb	r3, [r3, #12]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d00e      	beq.n	800e866 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	7b1b      	ldrb	r3, [r3, #12]
 800e84c:	4619      	mov	r1, r3
 800e84e:	6878      	ldr	r0, [r7, #4]
 800e850:	f001 fd05 	bl	801025e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	7b1b      	ldrb	r3, [r3, #12]
 800e858:	4619      	mov	r1, r3
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f001 fd30 	bl	80102c0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	2200      	movs	r2, #0
 800e864:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	7b5b      	ldrb	r3, [r3, #13]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d00e      	beq.n	800e88c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	7b5b      	ldrb	r3, [r3, #13]
 800e872:	4619      	mov	r1, r3
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f001 fcf2 	bl	801025e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	7b5b      	ldrb	r3, [r3, #13]
 800e87e:	4619      	mov	r1, r3
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f001 fd1d 	bl	80102c0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	2200      	movs	r2, #0
 800e88a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e892:	69db      	ldr	r3, [r3, #28]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d00b      	beq.n	800e8b0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e89e:	69db      	ldr	r3, [r3, #28]
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f002 f863 	bl	801096c <free>
    phost->pActiveClass->pData = 0U;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800e8b0:	2300      	movs	r3, #0
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3710      	adds	r7, #16
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}

0800e8ba <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800e8ba:	b580      	push	{r7, lr}
 800e8bc:	b084      	sub	sp, #16
 800e8be:	af00      	add	r7, sp, #0
 800e8c0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e8c8:	69db      	ldr	r3, [r3, #28]
 800e8ca:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	3340      	adds	r3, #64	; 0x40
 800e8d0:	4619      	mov	r1, r3
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f000 f8b1 	bl	800ea3a <GetLineCoding>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800e8dc:	7afb      	ldrb	r3, [r7, #11]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d105      	bne.n	800e8ee <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e8e8:	2102      	movs	r1, #2
 800e8ea:	6878      	ldr	r0, [r7, #4]
 800e8ec:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800e8ee:	7afb      	ldrb	r3, [r7, #11]
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3710      	adds	r7, #16
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}

0800e8f8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b084      	sub	sp, #16
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800e900:	2301      	movs	r3, #1
 800e902:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800e904:	2300      	movs	r3, #0
 800e906:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e90e:	69db      	ldr	r3, [r3, #28]
 800e910:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e918:	2b04      	cmp	r3, #4
 800e91a:	d877      	bhi.n	800ea0c <USBH_CDC_Process+0x114>
 800e91c:	a201      	add	r2, pc, #4	; (adr r2, 800e924 <USBH_CDC_Process+0x2c>)
 800e91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e922:	bf00      	nop
 800e924:	0800e939 	.word	0x0800e939
 800e928:	0800e93f 	.word	0x0800e93f
 800e92c:	0800e96f 	.word	0x0800e96f
 800e930:	0800e9e3 	.word	0x0800e9e3
 800e934:	0800e9f1 	.word	0x0800e9f1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800e938:	2300      	movs	r3, #0
 800e93a:	73fb      	strb	r3, [r7, #15]
      break;
 800e93c:	e06d      	b.n	800ea1a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e942:	4619      	mov	r1, r3
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f000 f897 	bl	800ea78 <SetLineCoding>
 800e94a:	4603      	mov	r3, r0
 800e94c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e94e:	7bbb      	ldrb	r3, [r7, #14]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d104      	bne.n	800e95e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	2202      	movs	r2, #2
 800e958:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e95c:	e058      	b.n	800ea10 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800e95e:	7bbb      	ldrb	r3, [r7, #14]
 800e960:	2b01      	cmp	r3, #1
 800e962:	d055      	beq.n	800ea10 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	2204      	movs	r2, #4
 800e968:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e96c:	e050      	b.n	800ea10 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	3340      	adds	r3, #64	; 0x40
 800e972:	4619      	mov	r1, r3
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f000 f860 	bl	800ea3a <GetLineCoding>
 800e97a:	4603      	mov	r3, r0
 800e97c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e97e:	7bbb      	ldrb	r3, [r7, #14]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d126      	bne.n	800e9d2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	2200      	movs	r2, #0
 800e988:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e996:	791b      	ldrb	r3, [r3, #4]
 800e998:	429a      	cmp	r2, r3
 800e99a:	d13b      	bne.n	800ea14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9a6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	d133      	bne.n	800ea14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9b6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	d12b      	bne.n	800ea14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9c4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	d124      	bne.n	800ea14 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f000 f958 	bl	800ec80 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e9d0:	e020      	b.n	800ea14 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800e9d2:	7bbb      	ldrb	r3, [r7, #14]
 800e9d4:	2b01      	cmp	r3, #1
 800e9d6:	d01d      	beq.n	800ea14 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	2204      	movs	r2, #4
 800e9dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e9e0:	e018      	b.n	800ea14 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	f000 f867 	bl	800eab6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f000 f8da 	bl	800eba2 <CDC_ProcessReception>
      break;
 800e9ee:	e014      	b.n	800ea1a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800e9f0:	2100      	movs	r1, #0
 800e9f2:	6878      	ldr	r0, [r7, #4]
 800e9f4:	f000 ffe3 	bl	800f9be <USBH_ClrFeature>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e9fc:	7bbb      	ldrb	r3, [r7, #14]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d10a      	bne.n	800ea18 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	2200      	movs	r2, #0
 800ea06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800ea0a:	e005      	b.n	800ea18 <USBH_CDC_Process+0x120>

    default:
      break;
 800ea0c:	bf00      	nop
 800ea0e:	e004      	b.n	800ea1a <USBH_CDC_Process+0x122>
      break;
 800ea10:	bf00      	nop
 800ea12:	e002      	b.n	800ea1a <USBH_CDC_Process+0x122>
      break;
 800ea14:	bf00      	nop
 800ea16:	e000      	b.n	800ea1a <USBH_CDC_Process+0x122>
      break;
 800ea18:	bf00      	nop

  }

  return status;
 800ea1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	3710      	adds	r7, #16
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}

0800ea24 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ea24:	b480      	push	{r7}
 800ea26:	b083      	sub	sp, #12
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ea2c:	2300      	movs	r3, #0
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	370c      	adds	r7, #12
 800ea32:	46bd      	mov	sp, r7
 800ea34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea38:	4770      	bx	lr

0800ea3a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800ea3a:	b580      	push	{r7, lr}
 800ea3c:	b082      	sub	sp, #8
 800ea3e:	af00      	add	r7, sp, #0
 800ea40:	6078      	str	r0, [r7, #4]
 800ea42:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	22a1      	movs	r2, #161	; 0xa1
 800ea48:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2221      	movs	r2, #33	; 0x21
 800ea4e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2200      	movs	r2, #0
 800ea54:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2207      	movs	r2, #7
 800ea60:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	2207      	movs	r2, #7
 800ea66:	4619      	mov	r1, r3
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f001 f988 	bl	800fd7e <USBH_CtlReq>
 800ea6e:	4603      	mov	r3, r0
}
 800ea70:	4618      	mov	r0, r3
 800ea72:	3708      	adds	r7, #8
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}

0800ea78 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b082      	sub	sp, #8
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2221      	movs	r2, #33	; 0x21
 800ea86:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2220      	movs	r2, #32
 800ea8c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2200      	movs	r2, #0
 800ea92:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2200      	movs	r2, #0
 800ea98:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2207      	movs	r2, #7
 800ea9e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	2207      	movs	r2, #7
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	6878      	ldr	r0, [r7, #4]
 800eaa8:	f001 f969 	bl	800fd7e <USBH_CtlReq>
 800eaac:	4603      	mov	r3, r0
}
 800eaae:	4618      	mov	r0, r3
 800eab0:	3708      	adds	r7, #8
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}

0800eab6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800eab6:	b580      	push	{r7, lr}
 800eab8:	b086      	sub	sp, #24
 800eaba:	af02      	add	r7, sp, #8
 800eabc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eac4:	69db      	ldr	r3, [r3, #28]
 800eac6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800eac8:	2300      	movs	r3, #0
 800eaca:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ead2:	2b01      	cmp	r3, #1
 800ead4:	d002      	beq.n	800eadc <CDC_ProcessTransmission+0x26>
 800ead6:	2b02      	cmp	r3, #2
 800ead8:	d023      	beq.n	800eb22 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800eada:	e05e      	b.n	800eb9a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eae0:	68fa      	ldr	r2, [r7, #12]
 800eae2:	8b12      	ldrh	r2, [r2, #24]
 800eae4:	4293      	cmp	r3, r2
 800eae6:	d90b      	bls.n	800eb00 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	69d9      	ldr	r1, [r3, #28]
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	8b1a      	ldrh	r2, [r3, #24]
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	7b5b      	ldrb	r3, [r3, #13]
 800eaf4:	2001      	movs	r0, #1
 800eaf6:	9000      	str	r0, [sp, #0]
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f001 fb4e 	bl	801019a <USBH_BulkSendData>
 800eafe:	e00b      	b.n	800eb18 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800eb08:	b29a      	uxth	r2, r3
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	7b5b      	ldrb	r3, [r3, #13]
 800eb0e:	2001      	movs	r0, #1
 800eb10:	9000      	str	r0, [sp, #0]
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f001 fb41 	bl	801019a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	2202      	movs	r2, #2
 800eb1c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800eb20:	e03b      	b.n	800eb9a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	7b5b      	ldrb	r3, [r3, #13]
 800eb26:	4619      	mov	r1, r3
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f001 fe65 	bl	80107f8 <USBH_LL_GetURBState>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800eb32:	7afb      	ldrb	r3, [r7, #11]
 800eb34:	2b01      	cmp	r3, #1
 800eb36:	d128      	bne.n	800eb8a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb3c:	68fa      	ldr	r2, [r7, #12]
 800eb3e:	8b12      	ldrh	r2, [r2, #24]
 800eb40:	4293      	cmp	r3, r2
 800eb42:	d90e      	bls.n	800eb62 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb48:	68fa      	ldr	r2, [r7, #12]
 800eb4a:	8b12      	ldrh	r2, [r2, #24]
 800eb4c:	1a9a      	subs	r2, r3, r2
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	69db      	ldr	r3, [r3, #28]
 800eb56:	68fa      	ldr	r2, [r7, #12]
 800eb58:	8b12      	ldrh	r2, [r2, #24]
 800eb5a:	441a      	add	r2, r3
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	61da      	str	r2, [r3, #28]
 800eb60:	e002      	b.n	800eb68 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2200      	movs	r2, #0
 800eb66:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d004      	beq.n	800eb7a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	2201      	movs	r2, #1
 800eb74:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800eb78:	e00e      	b.n	800eb98 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f000 f868 	bl	800ec58 <USBH_CDC_TransmitCallback>
      break;
 800eb88:	e006      	b.n	800eb98 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800eb8a:	7afb      	ldrb	r3, [r7, #11]
 800eb8c:	2b02      	cmp	r3, #2
 800eb8e:	d103      	bne.n	800eb98 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2201      	movs	r2, #1
 800eb94:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800eb98:	bf00      	nop
  }
}
 800eb9a:	bf00      	nop
 800eb9c:	3710      	adds	r7, #16
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}

0800eba2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800eba2:	b580      	push	{r7, lr}
 800eba4:	b086      	sub	sp, #24
 800eba6:	af00      	add	r7, sp, #0
 800eba8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ebb0:	69db      	ldr	r3, [r3, #28]
 800ebb2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ebbe:	2b03      	cmp	r3, #3
 800ebc0:	d002      	beq.n	800ebc8 <CDC_ProcessReception+0x26>
 800ebc2:	2b04      	cmp	r3, #4
 800ebc4:	d00e      	beq.n	800ebe4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800ebc6:	e043      	b.n	800ec50 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800ebc8:	697b      	ldr	r3, [r7, #20]
 800ebca:	6a19      	ldr	r1, [r3, #32]
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	8b5a      	ldrh	r2, [r3, #26]
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	7b1b      	ldrb	r3, [r3, #12]
 800ebd4:	6878      	ldr	r0, [r7, #4]
 800ebd6:	f001 fb05 	bl	80101e4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	2204      	movs	r2, #4
 800ebde:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800ebe2:	e035      	b.n	800ec50 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	7b1b      	ldrb	r3, [r3, #12]
 800ebe8:	4619      	mov	r1, r3
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f001 fe04 	bl	80107f8 <USBH_LL_GetURBState>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800ebf4:	7cfb      	ldrb	r3, [r7, #19]
 800ebf6:	2b01      	cmp	r3, #1
 800ebf8:	d129      	bne.n	800ec4e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	7b1b      	ldrb	r3, [r3, #12]
 800ebfe:	4619      	mov	r1, r3
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f001 fd67 	bl	80106d4 <USBH_LL_GetLastXferSize>
 800ec06:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec0c:	68fa      	ldr	r2, [r7, #12]
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d016      	beq.n	800ec40 <CDC_ProcessReception+0x9e>
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	8b5b      	ldrh	r3, [r3, #26]
 800ec16:	461a      	mov	r2, r3
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d910      	bls.n	800ec40 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	1ad2      	subs	r2, r2, r3
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	6a1a      	ldr	r2, [r3, #32]
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	441a      	add	r2, r3
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	2203      	movs	r2, #3
 800ec3a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800ec3e:	e006      	b.n	800ec4e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	2200      	movs	r2, #0
 800ec44:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f000 f80f 	bl	800ec6c <USBH_CDC_ReceiveCallback>
      break;
 800ec4e:	bf00      	nop
  }
}
 800ec50:	bf00      	nop
 800ec52:	3718      	adds	r7, #24
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd80      	pop	{r7, pc}

0800ec58 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ec58:	b480      	push	{r7}
 800ec5a:	b083      	sub	sp, #12
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ec60:	bf00      	nop
 800ec62:	370c      	adds	r7, #12
 800ec64:	46bd      	mov	sp, r7
 800ec66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6a:	4770      	bx	lr

0800ec6c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	b083      	sub	sp, #12
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ec74:	bf00      	nop
 800ec76:	370c      	adds	r7, #12
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7e:	4770      	bx	lr

0800ec80 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ec80:	b480      	push	{r7}
 800ec82:	b083      	sub	sp, #12
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ec88:	bf00      	nop
 800ec8a:	370c      	adds	r7, #12
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec92:	4770      	bx	lr

0800ec94 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b084      	sub	sp, #16
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	60f8      	str	r0, [r7, #12]
 800ec9c:	60b9      	str	r1, [r7, #8]
 800ec9e:	4613      	mov	r3, r2
 800eca0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d101      	bne.n	800ecac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800eca8:	2302      	movs	r3, #2
 800ecaa:	e029      	b.n	800ed00 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	79fa      	ldrb	r2, [r7, #7]
 800ecb0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800ecc4:	68f8      	ldr	r0, [r7, #12]
 800ecc6:	f000 f81f 	bl	800ed08 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	2200      	movs	r2, #0
 800ecce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	2200      	movs	r2, #0
 800ecde:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	2200      	movs	r2, #0
 800ece6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d003      	beq.n	800ecf8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	68ba      	ldr	r2, [r7, #8]
 800ecf4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800ecf8:	68f8      	ldr	r0, [r7, #12]
 800ecfa:	f001 fc37 	bl	801056c <USBH_LL_Init>

  return USBH_OK;
 800ecfe:	2300      	movs	r3, #0
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	3710      	adds	r7, #16
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}

0800ed08 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b085      	sub	sp, #20
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ed10:	2300      	movs	r3, #0
 800ed12:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ed14:	2300      	movs	r3, #0
 800ed16:	60fb      	str	r3, [r7, #12]
 800ed18:	e009      	b.n	800ed2e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ed1a:	687a      	ldr	r2, [r7, #4]
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	33e0      	adds	r3, #224	; 0xe0
 800ed20:	009b      	lsls	r3, r3, #2
 800ed22:	4413      	add	r3, r2
 800ed24:	2200      	movs	r2, #0
 800ed26:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	60fb      	str	r3, [r7, #12]
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	2b0e      	cmp	r3, #14
 800ed32:	d9f2      	bls.n	800ed1a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ed34:	2300      	movs	r3, #0
 800ed36:	60fb      	str	r3, [r7, #12]
 800ed38:	e009      	b.n	800ed4e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ed3a:	687a      	ldr	r2, [r7, #4]
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	4413      	add	r3, r2
 800ed40:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ed44:	2200      	movs	r2, #0
 800ed46:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	60fb      	str	r3, [r7, #12]
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed54:	d3f1      	bcc.n	800ed3a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2200      	movs	r2, #0
 800ed5a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2200      	movs	r2, #0
 800ed60:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2201      	movs	r2, #1
 800ed66:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2201      	movs	r2, #1
 800ed74:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2240      	movs	r2, #64	; 0x40
 800ed7a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2200      	movs	r2, #0
 800ed80:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2200      	movs	r2, #0
 800ed86:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2201      	movs	r2, #1
 800ed8e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2200      	movs	r2, #0
 800ed96:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800eda2:	2300      	movs	r3, #0
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3714      	adds	r7, #20
 800eda8:	46bd      	mov	sp, r7
 800edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edae:	4770      	bx	lr

0800edb0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800edb0:	b480      	push	{r7}
 800edb2:	b085      	sub	sp, #20
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
 800edb8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800edba:	2300      	movs	r3, #0
 800edbc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d016      	beq.n	800edf2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d10e      	bne.n	800edec <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800edd4:	1c59      	adds	r1, r3, #1
 800edd6:	687a      	ldr	r2, [r7, #4]
 800edd8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800eddc:	687a      	ldr	r2, [r7, #4]
 800edde:	33de      	adds	r3, #222	; 0xde
 800ede0:	6839      	ldr	r1, [r7, #0]
 800ede2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ede6:	2300      	movs	r3, #0
 800ede8:	73fb      	strb	r3, [r7, #15]
 800edea:	e004      	b.n	800edf6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800edec:	2302      	movs	r3, #2
 800edee:	73fb      	strb	r3, [r7, #15]
 800edf0:	e001      	b.n	800edf6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800edf2:	2302      	movs	r3, #2
 800edf4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800edf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800edf8:	4618      	mov	r0, r3
 800edfa:	3714      	adds	r7, #20
 800edfc:	46bd      	mov	sp, r7
 800edfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee02:	4770      	bx	lr

0800ee04 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ee04:	b480      	push	{r7}
 800ee06:	b085      	sub	sp, #20
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	460b      	mov	r3, r1
 800ee0e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ee10:	2300      	movs	r3, #0
 800ee12:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800ee1a:	78fa      	ldrb	r2, [r7, #3]
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d204      	bcs.n	800ee2a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	78fa      	ldrb	r2, [r7, #3]
 800ee24:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800ee28:	e001      	b.n	800ee2e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ee2a:	2302      	movs	r3, #2
 800ee2c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ee2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee30:	4618      	mov	r0, r3
 800ee32:	3714      	adds	r7, #20
 800ee34:	46bd      	mov	sp, r7
 800ee36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3a:	4770      	bx	lr

0800ee3c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ee3c:	b480      	push	{r7}
 800ee3e:	b087      	sub	sp, #28
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
 800ee44:	4608      	mov	r0, r1
 800ee46:	4611      	mov	r1, r2
 800ee48:	461a      	mov	r2, r3
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	70fb      	strb	r3, [r7, #3]
 800ee4e:	460b      	mov	r3, r1
 800ee50:	70bb      	strb	r3, [r7, #2]
 800ee52:	4613      	mov	r3, r2
 800ee54:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ee56:	2300      	movs	r3, #0
 800ee58:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ee64:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ee66:	e025      	b.n	800eeb4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ee68:	7dfb      	ldrb	r3, [r7, #23]
 800ee6a:	221a      	movs	r2, #26
 800ee6c:	fb02 f303 	mul.w	r3, r2, r3
 800ee70:	3308      	adds	r3, #8
 800ee72:	68fa      	ldr	r2, [r7, #12]
 800ee74:	4413      	add	r3, r2
 800ee76:	3302      	adds	r3, #2
 800ee78:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	795b      	ldrb	r3, [r3, #5]
 800ee7e:	78fa      	ldrb	r2, [r7, #3]
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d002      	beq.n	800ee8a <USBH_FindInterface+0x4e>
 800ee84:	78fb      	ldrb	r3, [r7, #3]
 800ee86:	2bff      	cmp	r3, #255	; 0xff
 800ee88:	d111      	bne.n	800eeae <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ee8a:	693b      	ldr	r3, [r7, #16]
 800ee8c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ee8e:	78ba      	ldrb	r2, [r7, #2]
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d002      	beq.n	800ee9a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ee94:	78bb      	ldrb	r3, [r7, #2]
 800ee96:	2bff      	cmp	r3, #255	; 0xff
 800ee98:	d109      	bne.n	800eeae <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ee9a:	693b      	ldr	r3, [r7, #16]
 800ee9c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ee9e:	787a      	ldrb	r2, [r7, #1]
 800eea0:	429a      	cmp	r2, r3
 800eea2:	d002      	beq.n	800eeaa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800eea4:	787b      	ldrb	r3, [r7, #1]
 800eea6:	2bff      	cmp	r3, #255	; 0xff
 800eea8:	d101      	bne.n	800eeae <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800eeaa:	7dfb      	ldrb	r3, [r7, #23]
 800eeac:	e006      	b.n	800eebc <USBH_FindInterface+0x80>
    }
    if_ix++;
 800eeae:	7dfb      	ldrb	r3, [r7, #23]
 800eeb0:	3301      	adds	r3, #1
 800eeb2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800eeb4:	7dfb      	ldrb	r3, [r7, #23]
 800eeb6:	2b01      	cmp	r3, #1
 800eeb8:	d9d6      	bls.n	800ee68 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800eeba:	23ff      	movs	r3, #255	; 0xff
}
 800eebc:	4618      	mov	r0, r3
 800eebe:	371c      	adds	r7, #28
 800eec0:	46bd      	mov	sp, r7
 800eec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec6:	4770      	bx	lr

0800eec8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b082      	sub	sp, #8
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f001 fb87 	bl	80105e4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800eed6:	2101      	movs	r1, #1
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f001 fca0 	bl	801081e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800eede:	2300      	movs	r3, #0
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	3708      	adds	r7, #8
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}

0800eee8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b088      	sub	sp, #32
 800eeec:	af04      	add	r7, sp, #16
 800eeee:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800eef0:	2302      	movs	r3, #2
 800eef2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800eef4:	2300      	movs	r3, #0
 800eef6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800eefe:	b2db      	uxtb	r3, r3
 800ef00:	2b01      	cmp	r3, #1
 800ef02:	d102      	bne.n	800ef0a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2203      	movs	r2, #3
 800ef08:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	b2db      	uxtb	r3, r3
 800ef10:	2b0b      	cmp	r3, #11
 800ef12:	f200 81b3 	bhi.w	800f27c <USBH_Process+0x394>
 800ef16:	a201      	add	r2, pc, #4	; (adr r2, 800ef1c <USBH_Process+0x34>)
 800ef18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef1c:	0800ef4d 	.word	0x0800ef4d
 800ef20:	0800ef7f 	.word	0x0800ef7f
 800ef24:	0800efe7 	.word	0x0800efe7
 800ef28:	0800f217 	.word	0x0800f217
 800ef2c:	0800f27d 	.word	0x0800f27d
 800ef30:	0800f08b 	.word	0x0800f08b
 800ef34:	0800f1bd 	.word	0x0800f1bd
 800ef38:	0800f0c1 	.word	0x0800f0c1
 800ef3c:	0800f0e1 	.word	0x0800f0e1
 800ef40:	0800f101 	.word	0x0800f101
 800ef44:	0800f12f 	.word	0x0800f12f
 800ef48:	0800f1ff 	.word	0x0800f1ff
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ef52:	b2db      	uxtb	r3, r3
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	f000 8193 	beq.w	800f280 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2201      	movs	r2, #1
 800ef5e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ef60:	20c8      	movs	r0, #200	; 0xc8
 800ef62:	f001 fc9a 	bl	801089a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f001 fb99 	bl	801069e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2200      	movs	r2, #0
 800ef70:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2200      	movs	r2, #0
 800ef78:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ef7c:	e180      	b.n	800f280 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ef84:	2b01      	cmp	r3, #1
 800ef86:	d107      	bne.n	800ef98 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	2202      	movs	r2, #2
 800ef94:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ef96:	e182      	b.n	800f29e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ef9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800efa2:	d914      	bls.n	800efce <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800efaa:	3301      	adds	r3, #1
 800efac:	b2da      	uxtb	r2, r3
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800efba:	2b03      	cmp	r3, #3
 800efbc:	d903      	bls.n	800efc6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	220d      	movs	r2, #13
 800efc2:	701a      	strb	r2, [r3, #0]
      break;
 800efc4:	e16b      	b.n	800f29e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2200      	movs	r2, #0
 800efca:	701a      	strb	r2, [r3, #0]
      break;
 800efcc:	e167      	b.n	800f29e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800efd4:	f103 020a 	add.w	r2, r3, #10
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800efde:	200a      	movs	r0, #10
 800efe0:	f001 fc5b 	bl	801089a <USBH_Delay>
      break;
 800efe4:	e15b      	b.n	800f29e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800efec:	2b00      	cmp	r3, #0
 800efee:	d005      	beq.n	800effc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eff6:	2104      	movs	r1, #4
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800effc:	2064      	movs	r0, #100	; 0x64
 800effe:	f001 fc4c 	bl	801089a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f001 fb24 	bl	8010650 <USBH_LL_GetSpeed>
 800f008:	4603      	mov	r3, r0
 800f00a:	461a      	mov	r2, r3
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2205      	movs	r2, #5
 800f016:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f018:	2100      	movs	r1, #0
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f001 f92f 	bl	801027e <USBH_AllocPipe>
 800f020:	4603      	mov	r3, r0
 800f022:	461a      	mov	r2, r3
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f028:	2180      	movs	r1, #128	; 0x80
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	f001 f927 	bl	801027e <USBH_AllocPipe>
 800f030:	4603      	mov	r3, r0
 800f032:	461a      	mov	r2, r3
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	7919      	ldrb	r1, [r3, #4]
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f048:	687a      	ldr	r2, [r7, #4]
 800f04a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f04c:	b292      	uxth	r2, r2
 800f04e:	9202      	str	r2, [sp, #8]
 800f050:	2200      	movs	r2, #0
 800f052:	9201      	str	r2, [sp, #4]
 800f054:	9300      	str	r3, [sp, #0]
 800f056:	4603      	mov	r3, r0
 800f058:	2280      	movs	r2, #128	; 0x80
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	f001 f8e0 	bl	8010220 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	7959      	ldrb	r1, [r3, #5]
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f070:	687a      	ldr	r2, [r7, #4]
 800f072:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f074:	b292      	uxth	r2, r2
 800f076:	9202      	str	r2, [sp, #8]
 800f078:	2200      	movs	r2, #0
 800f07a:	9201      	str	r2, [sp, #4]
 800f07c:	9300      	str	r3, [sp, #0]
 800f07e:	4603      	mov	r3, r0
 800f080:	2200      	movs	r2, #0
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f001 f8cc 	bl	8010220 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f088:	e109      	b.n	800f29e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f000 f90c 	bl	800f2a8 <USBH_HandleEnum>
 800f090:	4603      	mov	r3, r0
 800f092:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800f094:	7bbb      	ldrb	r3, [r7, #14]
 800f096:	b2db      	uxtb	r3, r3
 800f098:	2b00      	cmp	r3, #0
 800f09a:	f040 80f3 	bne.w	800f284 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800f0ac:	2b01      	cmp	r3, #1
 800f0ae:	d103      	bne.n	800f0b8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2208      	movs	r2, #8
 800f0b4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f0b6:	e0e5      	b.n	800f284 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2207      	movs	r2, #7
 800f0bc:	701a      	strb	r2, [r3, #0]
      break;
 800f0be:	e0e1      	b.n	800f284 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	f000 80de 	beq.w	800f288 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f0d2:	2101      	movs	r1, #1
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2208      	movs	r2, #8
 800f0dc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800f0de:	e0d3      	b.n	800f288 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800f0e6:	b29b      	uxth	r3, r3
 800f0e8:	4619      	mov	r1, r3
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f000 fc20 	bl	800f930 <USBH_SetCfg>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	f040 80ca 	bne.w	800f28c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2209      	movs	r2, #9
 800f0fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f0fe:	e0c5      	b.n	800f28c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800f106:	f003 0320 	and.w	r3, r3, #32
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d00b      	beq.n	800f126 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800f10e:	2101      	movs	r1, #1
 800f110:	6878      	ldr	r0, [r7, #4]
 800f112:	f000 fc30 	bl	800f976 <USBH_SetFeature>
 800f116:	4603      	mov	r3, r0
 800f118:	2b00      	cmp	r3, #0
 800f11a:	f040 80b9 	bne.w	800f290 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	220a      	movs	r2, #10
 800f122:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f124:	e0b4      	b.n	800f290 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	220a      	movs	r2, #10
 800f12a:	701a      	strb	r2, [r3, #0]
      break;
 800f12c:	e0b0      	b.n	800f290 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f134:	2b00      	cmp	r3, #0
 800f136:	f000 80ad 	beq.w	800f294 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2200      	movs	r2, #0
 800f13e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f142:	2300      	movs	r3, #0
 800f144:	73fb      	strb	r3, [r7, #15]
 800f146:	e016      	b.n	800f176 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800f148:	7bfa      	ldrb	r2, [r7, #15]
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	32de      	adds	r2, #222	; 0xde
 800f14e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f152:	791a      	ldrb	r2, [r3, #4]
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d108      	bne.n	800f170 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800f15e:	7bfa      	ldrb	r2, [r7, #15]
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	32de      	adds	r2, #222	; 0xde
 800f164:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800f16e:	e005      	b.n	800f17c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f170:	7bfb      	ldrb	r3, [r7, #15]
 800f172:	3301      	adds	r3, #1
 800f174:	73fb      	strb	r3, [r7, #15]
 800f176:	7bfb      	ldrb	r3, [r7, #15]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d0e5      	beq.n	800f148 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f182:	2b00      	cmp	r3, #0
 800f184:	d016      	beq.n	800f1b4 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f18c:	689b      	ldr	r3, [r3, #8]
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	4798      	blx	r3
 800f192:	4603      	mov	r3, r0
 800f194:	2b00      	cmp	r3, #0
 800f196:	d109      	bne.n	800f1ac <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2206      	movs	r2, #6
 800f19c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f1a4:	2103      	movs	r1, #3
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f1aa:	e073      	b.n	800f294 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	220d      	movs	r2, #13
 800f1b0:	701a      	strb	r2, [r3, #0]
      break;
 800f1b2:	e06f      	b.n	800f294 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	220d      	movs	r2, #13
 800f1b8:	701a      	strb	r2, [r3, #0]
      break;
 800f1ba:	e06b      	b.n	800f294 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d017      	beq.n	800f1f6 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f1cc:	691b      	ldr	r3, [r3, #16]
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	4798      	blx	r3
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f1d6:	7bbb      	ldrb	r3, [r7, #14]
 800f1d8:	b2db      	uxtb	r3, r3
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d103      	bne.n	800f1e6 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	220b      	movs	r2, #11
 800f1e2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f1e4:	e058      	b.n	800f298 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800f1e6:	7bbb      	ldrb	r3, [r7, #14]
 800f1e8:	b2db      	uxtb	r3, r3
 800f1ea:	2b02      	cmp	r3, #2
 800f1ec:	d154      	bne.n	800f298 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	220d      	movs	r2, #13
 800f1f2:	701a      	strb	r2, [r3, #0]
      break;
 800f1f4:	e050      	b.n	800f298 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	220d      	movs	r2, #13
 800f1fa:	701a      	strb	r2, [r3, #0]
      break;
 800f1fc:	e04c      	b.n	800f298 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f204:	2b00      	cmp	r3, #0
 800f206:	d049      	beq.n	800f29c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f20e:	695b      	ldr	r3, [r3, #20]
 800f210:	6878      	ldr	r0, [r7, #4]
 800f212:	4798      	blx	r3
      }
      break;
 800f214:	e042      	b.n	800f29c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2200      	movs	r2, #0
 800f21a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f7ff fd72 	bl	800ed08 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d009      	beq.n	800f242 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f234:	68db      	ldr	r3, [r3, #12]
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	2200      	movs	r2, #0
 800f23e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d005      	beq.n	800f258 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f252:	2105      	movs	r1, #5
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800f25e:	b2db      	uxtb	r3, r3
 800f260:	2b01      	cmp	r3, #1
 800f262:	d107      	bne.n	800f274 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2200      	movs	r2, #0
 800f268:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f7ff fe2b 	bl	800eec8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f272:	e014      	b.n	800f29e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f001 f9b5 	bl	80105e4 <USBH_LL_Start>
      break;
 800f27a:	e010      	b.n	800f29e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800f27c:	bf00      	nop
 800f27e:	e00e      	b.n	800f29e <USBH_Process+0x3b6>
      break;
 800f280:	bf00      	nop
 800f282:	e00c      	b.n	800f29e <USBH_Process+0x3b6>
      break;
 800f284:	bf00      	nop
 800f286:	e00a      	b.n	800f29e <USBH_Process+0x3b6>
    break;
 800f288:	bf00      	nop
 800f28a:	e008      	b.n	800f29e <USBH_Process+0x3b6>
      break;
 800f28c:	bf00      	nop
 800f28e:	e006      	b.n	800f29e <USBH_Process+0x3b6>
      break;
 800f290:	bf00      	nop
 800f292:	e004      	b.n	800f29e <USBH_Process+0x3b6>
      break;
 800f294:	bf00      	nop
 800f296:	e002      	b.n	800f29e <USBH_Process+0x3b6>
      break;
 800f298:	bf00      	nop
 800f29a:	e000      	b.n	800f29e <USBH_Process+0x3b6>
      break;
 800f29c:	bf00      	nop
  }
  return USBH_OK;
 800f29e:	2300      	movs	r3, #0
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3710      	adds	r7, #16
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}

0800f2a8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b088      	sub	sp, #32
 800f2ac:	af04      	add	r7, sp, #16
 800f2ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	785b      	ldrb	r3, [r3, #1]
 800f2bc:	2b07      	cmp	r3, #7
 800f2be:	f200 81c1 	bhi.w	800f644 <USBH_HandleEnum+0x39c>
 800f2c2:	a201      	add	r2, pc, #4	; (adr r2, 800f2c8 <USBH_HandleEnum+0x20>)
 800f2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2c8:	0800f2e9 	.word	0x0800f2e9
 800f2cc:	0800f3a7 	.word	0x0800f3a7
 800f2d0:	0800f411 	.word	0x0800f411
 800f2d4:	0800f49f 	.word	0x0800f49f
 800f2d8:	0800f509 	.word	0x0800f509
 800f2dc:	0800f579 	.word	0x0800f579
 800f2e0:	0800f5bf 	.word	0x0800f5bf
 800f2e4:	0800f605 	.word	0x0800f605
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800f2e8:	2108      	movs	r1, #8
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f000 fa50 	bl	800f790 <USBH_Get_DevDesc>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f2f4:	7bbb      	ldrb	r3, [r7, #14]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d130      	bne.n	800f35c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2201      	movs	r2, #1
 800f308:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	7919      	ldrb	r1, [r3, #4]
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f31a:	687a      	ldr	r2, [r7, #4]
 800f31c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f31e:	b292      	uxth	r2, r2
 800f320:	9202      	str	r2, [sp, #8]
 800f322:	2200      	movs	r2, #0
 800f324:	9201      	str	r2, [sp, #4]
 800f326:	9300      	str	r3, [sp, #0]
 800f328:	4603      	mov	r3, r0
 800f32a:	2280      	movs	r2, #128	; 0x80
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f000 ff77 	bl	8010220 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	7959      	ldrb	r1, [r3, #5]
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f342:	687a      	ldr	r2, [r7, #4]
 800f344:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f346:	b292      	uxth	r2, r2
 800f348:	9202      	str	r2, [sp, #8]
 800f34a:	2200      	movs	r2, #0
 800f34c:	9201      	str	r2, [sp, #4]
 800f34e:	9300      	str	r3, [sp, #0]
 800f350:	4603      	mov	r3, r0
 800f352:	2200      	movs	r2, #0
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f000 ff63 	bl	8010220 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f35a:	e175      	b.n	800f648 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f35c:	7bbb      	ldrb	r3, [r7, #14]
 800f35e:	2b03      	cmp	r3, #3
 800f360:	f040 8172 	bne.w	800f648 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f36a:	3301      	adds	r3, #1
 800f36c:	b2da      	uxtb	r2, r3
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f37a:	2b03      	cmp	r3, #3
 800f37c:	d903      	bls.n	800f386 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	220d      	movs	r2, #13
 800f382:	701a      	strb	r2, [r3, #0]
      break;
 800f384:	e160      	b.n	800f648 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	795b      	ldrb	r3, [r3, #5]
 800f38a:	4619      	mov	r1, r3
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f000 ff97 	bl	80102c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	791b      	ldrb	r3, [r3, #4]
 800f396:	4619      	mov	r1, r3
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f000 ff91 	bl	80102c0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	701a      	strb	r2, [r3, #0]
      break;
 800f3a4:	e150      	b.n	800f648 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800f3a6:	2112      	movs	r1, #18
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	f000 f9f1 	bl	800f790 <USBH_Get_DevDesc>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f3b2:	7bbb      	ldrb	r3, [r7, #14]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d103      	bne.n	800f3c0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2202      	movs	r2, #2
 800f3bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f3be:	e145      	b.n	800f64c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f3c0:	7bbb      	ldrb	r3, [r7, #14]
 800f3c2:	2b03      	cmp	r3, #3
 800f3c4:	f040 8142 	bne.w	800f64c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f3ce:	3301      	adds	r3, #1
 800f3d0:	b2da      	uxtb	r2, r3
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f3de:	2b03      	cmp	r3, #3
 800f3e0:	d903      	bls.n	800f3ea <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	220d      	movs	r2, #13
 800f3e6:	701a      	strb	r2, [r3, #0]
      break;
 800f3e8:	e130      	b.n	800f64c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	795b      	ldrb	r3, [r3, #5]
 800f3ee:	4619      	mov	r1, r3
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f000 ff65 	bl	80102c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	791b      	ldrb	r3, [r3, #4]
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f000 ff5f 	bl	80102c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2200      	movs	r2, #0
 800f406:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2200      	movs	r2, #0
 800f40c:	701a      	strb	r2, [r3, #0]
      break;
 800f40e:	e11d      	b.n	800f64c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800f410:	2101      	movs	r1, #1
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f000 fa68 	bl	800f8e8 <USBH_SetAddress>
 800f418:	4603      	mov	r3, r0
 800f41a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f41c:	7bbb      	ldrb	r3, [r7, #14]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d132      	bne.n	800f488 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800f422:	2002      	movs	r0, #2
 800f424:	f001 fa39 	bl	801089a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2201      	movs	r2, #1
 800f42c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2203      	movs	r2, #3
 800f434:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	7919      	ldrb	r1, [r3, #4]
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f446:	687a      	ldr	r2, [r7, #4]
 800f448:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f44a:	b292      	uxth	r2, r2
 800f44c:	9202      	str	r2, [sp, #8]
 800f44e:	2200      	movs	r2, #0
 800f450:	9201      	str	r2, [sp, #4]
 800f452:	9300      	str	r3, [sp, #0]
 800f454:	4603      	mov	r3, r0
 800f456:	2280      	movs	r2, #128	; 0x80
 800f458:	6878      	ldr	r0, [r7, #4]
 800f45a:	f000 fee1 	bl	8010220 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	7959      	ldrb	r1, [r3, #5]
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f46e:	687a      	ldr	r2, [r7, #4]
 800f470:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f472:	b292      	uxth	r2, r2
 800f474:	9202      	str	r2, [sp, #8]
 800f476:	2200      	movs	r2, #0
 800f478:	9201      	str	r2, [sp, #4]
 800f47a:	9300      	str	r3, [sp, #0]
 800f47c:	4603      	mov	r3, r0
 800f47e:	2200      	movs	r2, #0
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f000 fecd 	bl	8010220 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f486:	e0e3      	b.n	800f650 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f488:	7bbb      	ldrb	r3, [r7, #14]
 800f48a:	2b03      	cmp	r3, #3
 800f48c:	f040 80e0 	bne.w	800f650 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	220d      	movs	r2, #13
 800f494:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2200      	movs	r2, #0
 800f49a:	705a      	strb	r2, [r3, #1]
      break;
 800f49c:	e0d8      	b.n	800f650 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800f49e:	2109      	movs	r1, #9
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f000 f99d 	bl	800f7e0 <USBH_Get_CfgDesc>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f4aa:	7bbb      	ldrb	r3, [r7, #14]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d103      	bne.n	800f4b8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2204      	movs	r2, #4
 800f4b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f4b6:	e0cd      	b.n	800f654 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f4b8:	7bbb      	ldrb	r3, [r7, #14]
 800f4ba:	2b03      	cmp	r3, #3
 800f4bc:	f040 80ca 	bne.w	800f654 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f4c6:	3301      	adds	r3, #1
 800f4c8:	b2da      	uxtb	r2, r3
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f4d6:	2b03      	cmp	r3, #3
 800f4d8:	d903      	bls.n	800f4e2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	220d      	movs	r2, #13
 800f4de:	701a      	strb	r2, [r3, #0]
      break;
 800f4e0:	e0b8      	b.n	800f654 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	795b      	ldrb	r3, [r3, #5]
 800f4e6:	4619      	mov	r1, r3
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	f000 fee9 	bl	80102c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	791b      	ldrb	r3, [r3, #4]
 800f4f2:	4619      	mov	r1, r3
 800f4f4:	6878      	ldr	r0, [r7, #4]
 800f4f6:	f000 fee3 	bl	80102c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2200      	movs	r2, #0
 800f504:	701a      	strb	r2, [r3, #0]
      break;
 800f506:	e0a5      	b.n	800f654 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800f50e:	4619      	mov	r1, r3
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f000 f965 	bl	800f7e0 <USBH_Get_CfgDesc>
 800f516:	4603      	mov	r3, r0
 800f518:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f51a:	7bbb      	ldrb	r3, [r7, #14]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d103      	bne.n	800f528 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2205      	movs	r2, #5
 800f524:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f526:	e097      	b.n	800f658 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f528:	7bbb      	ldrb	r3, [r7, #14]
 800f52a:	2b03      	cmp	r3, #3
 800f52c:	f040 8094 	bne.w	800f658 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f536:	3301      	adds	r3, #1
 800f538:	b2da      	uxtb	r2, r3
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f546:	2b03      	cmp	r3, #3
 800f548:	d903      	bls.n	800f552 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	220d      	movs	r2, #13
 800f54e:	701a      	strb	r2, [r3, #0]
      break;
 800f550:	e082      	b.n	800f658 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	795b      	ldrb	r3, [r3, #5]
 800f556:	4619      	mov	r1, r3
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f000 feb1 	bl	80102c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	791b      	ldrb	r3, [r3, #4]
 800f562:	4619      	mov	r1, r3
 800f564:	6878      	ldr	r0, [r7, #4]
 800f566:	f000 feab 	bl	80102c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	2200      	movs	r2, #0
 800f56e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2200      	movs	r2, #0
 800f574:	701a      	strb	r2, [r3, #0]
      break;
 800f576:	e06f      	b.n	800f658 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d019      	beq.n	800f5b6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f58e:	23ff      	movs	r3, #255	; 0xff
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f000 f949 	bl	800f828 <USBH_Get_StringDesc>
 800f596:	4603      	mov	r3, r0
 800f598:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f59a:	7bbb      	ldrb	r3, [r7, #14]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d103      	bne.n	800f5a8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2206      	movs	r2, #6
 800f5a4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f5a6:	e059      	b.n	800f65c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f5a8:	7bbb      	ldrb	r3, [r7, #14]
 800f5aa:	2b03      	cmp	r3, #3
 800f5ac:	d156      	bne.n	800f65c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	2206      	movs	r2, #6
 800f5b2:	705a      	strb	r2, [r3, #1]
      break;
 800f5b4:	e052      	b.n	800f65c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	2206      	movs	r2, #6
 800f5ba:	705a      	strb	r2, [r3, #1]
      break;
 800f5bc:	e04e      	b.n	800f65c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d019      	beq.n	800f5fc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f5d4:	23ff      	movs	r3, #255	; 0xff
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	f000 f926 	bl	800f828 <USBH_Get_StringDesc>
 800f5dc:	4603      	mov	r3, r0
 800f5de:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f5e0:	7bbb      	ldrb	r3, [r7, #14]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d103      	bne.n	800f5ee <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2207      	movs	r2, #7
 800f5ea:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f5ec:	e038      	b.n	800f660 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f5ee:	7bbb      	ldrb	r3, [r7, #14]
 800f5f0:	2b03      	cmp	r3, #3
 800f5f2:	d135      	bne.n	800f660 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2207      	movs	r2, #7
 800f5f8:	705a      	strb	r2, [r3, #1]
      break;
 800f5fa:	e031      	b.n	800f660 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2207      	movs	r2, #7
 800f600:	705a      	strb	r2, [r3, #1]
      break;
 800f602:	e02d      	b.n	800f660 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d017      	beq.n	800f63e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f61a:	23ff      	movs	r3, #255	; 0xff
 800f61c:	6878      	ldr	r0, [r7, #4]
 800f61e:	f000 f903 	bl	800f828 <USBH_Get_StringDesc>
 800f622:	4603      	mov	r3, r0
 800f624:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f626:	7bbb      	ldrb	r3, [r7, #14]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d102      	bne.n	800f632 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800f62c:	2300      	movs	r3, #0
 800f62e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800f630:	e018      	b.n	800f664 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f632:	7bbb      	ldrb	r3, [r7, #14]
 800f634:	2b03      	cmp	r3, #3
 800f636:	d115      	bne.n	800f664 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800f638:	2300      	movs	r3, #0
 800f63a:	73fb      	strb	r3, [r7, #15]
      break;
 800f63c:	e012      	b.n	800f664 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800f63e:	2300      	movs	r3, #0
 800f640:	73fb      	strb	r3, [r7, #15]
      break;
 800f642:	e00f      	b.n	800f664 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800f644:	bf00      	nop
 800f646:	e00e      	b.n	800f666 <USBH_HandleEnum+0x3be>
      break;
 800f648:	bf00      	nop
 800f64a:	e00c      	b.n	800f666 <USBH_HandleEnum+0x3be>
      break;
 800f64c:	bf00      	nop
 800f64e:	e00a      	b.n	800f666 <USBH_HandleEnum+0x3be>
      break;
 800f650:	bf00      	nop
 800f652:	e008      	b.n	800f666 <USBH_HandleEnum+0x3be>
      break;
 800f654:	bf00      	nop
 800f656:	e006      	b.n	800f666 <USBH_HandleEnum+0x3be>
      break;
 800f658:	bf00      	nop
 800f65a:	e004      	b.n	800f666 <USBH_HandleEnum+0x3be>
      break;
 800f65c:	bf00      	nop
 800f65e:	e002      	b.n	800f666 <USBH_HandleEnum+0x3be>
      break;
 800f660:	bf00      	nop
 800f662:	e000      	b.n	800f666 <USBH_HandleEnum+0x3be>
      break;
 800f664:	bf00      	nop
  }
  return Status;
 800f666:	7bfb      	ldrb	r3, [r7, #15]
}
 800f668:	4618      	mov	r0, r3
 800f66a:	3710      	adds	r7, #16
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}

0800f670 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800f670:	b480      	push	{r7}
 800f672:	b083      	sub	sp, #12
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
 800f678:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	683a      	ldr	r2, [r7, #0]
 800f67e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800f682:	bf00      	nop
 800f684:	370c      	adds	r7, #12
 800f686:	46bd      	mov	sp, r7
 800f688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68c:	4770      	bx	lr

0800f68e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800f68e:	b580      	push	{r7, lr}
 800f690:	b082      	sub	sp, #8
 800f692:	af00      	add	r7, sp, #0
 800f694:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f69c:	1c5a      	adds	r2, r3, #1
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800f6a4:	6878      	ldr	r0, [r7, #4]
 800f6a6:	f000 f804 	bl	800f6b2 <USBH_HandleSof>
}
 800f6aa:	bf00      	nop
 800f6ac:	3708      	adds	r7, #8
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}

0800f6b2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800f6b2:	b580      	push	{r7, lr}
 800f6b4:	b082      	sub	sp, #8
 800f6b6:	af00      	add	r7, sp, #0
 800f6b8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	781b      	ldrb	r3, [r3, #0]
 800f6be:	b2db      	uxtb	r3, r3
 800f6c0:	2b0b      	cmp	r3, #11
 800f6c2:	d10a      	bne.n	800f6da <USBH_HandleSof+0x28>
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d005      	beq.n	800f6da <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f6d4:	699b      	ldr	r3, [r3, #24]
 800f6d6:	6878      	ldr	r0, [r7, #4]
 800f6d8:	4798      	blx	r3
  }
}
 800f6da:	bf00      	nop
 800f6dc:	3708      	adds	r7, #8
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd80      	pop	{r7, pc}

0800f6e2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800f6e2:	b480      	push	{r7}
 800f6e4:	b083      	sub	sp, #12
 800f6e6:	af00      	add	r7, sp, #0
 800f6e8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2201      	movs	r2, #1
 800f6ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800f6f2:	bf00      	nop
}
 800f6f4:	370c      	adds	r7, #12
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fc:	4770      	bx	lr

0800f6fe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800f6fe:	b480      	push	{r7}
 800f700:	b083      	sub	sp, #12
 800f702:	af00      	add	r7, sp, #0
 800f704:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2200      	movs	r2, #0
 800f70a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800f70e:	bf00      	nop
}
 800f710:	370c      	adds	r7, #12
 800f712:	46bd      	mov	sp, r7
 800f714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f718:	4770      	bx	lr

0800f71a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f71a:	b480      	push	{r7}
 800f71c:	b083      	sub	sp, #12
 800f71e:	af00      	add	r7, sp, #0
 800f720:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2201      	movs	r2, #1
 800f726:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	2200      	movs	r2, #0
 800f72e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2200      	movs	r2, #0
 800f736:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f73a:	2300      	movs	r3, #0
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	370c      	adds	r7, #12
 800f740:	46bd      	mov	sp, r7
 800f742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f746:	4770      	bx	lr

0800f748 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b082      	sub	sp, #8
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2201      	movs	r2, #1
 800f754:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	2200      	movs	r2, #0
 800f75c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2200      	movs	r2, #0
 800f764:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800f768:	6878      	ldr	r0, [r7, #4]
 800f76a:	f000 ff56 	bl	801061a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	791b      	ldrb	r3, [r3, #4]
 800f772:	4619      	mov	r1, r3
 800f774:	6878      	ldr	r0, [r7, #4]
 800f776:	f000 fda3 	bl	80102c0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	795b      	ldrb	r3, [r3, #5]
 800f77e:	4619      	mov	r1, r3
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f000 fd9d 	bl	80102c0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f786:	2300      	movs	r3, #0
}
 800f788:	4618      	mov	r0, r3
 800f78a:	3708      	adds	r7, #8
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}

0800f790 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b086      	sub	sp, #24
 800f794:	af02      	add	r7, sp, #8
 800f796:	6078      	str	r0, [r7, #4]
 800f798:	460b      	mov	r3, r1
 800f79a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f7a2:	78fb      	ldrb	r3, [r7, #3]
 800f7a4:	b29b      	uxth	r3, r3
 800f7a6:	9300      	str	r3, [sp, #0]
 800f7a8:	4613      	mov	r3, r2
 800f7aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f7ae:	2100      	movs	r1, #0
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f000 f864 	bl	800f87e <USBH_GetDescriptor>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	73fb      	strb	r3, [r7, #15]
 800f7ba:	7bfb      	ldrb	r3, [r7, #15]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d10a      	bne.n	800f7d6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f203 3026 	addw	r0, r3, #806	; 0x326
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f7cc:	78fa      	ldrb	r2, [r7, #3]
 800f7ce:	b292      	uxth	r2, r2
 800f7d0:	4619      	mov	r1, r3
 800f7d2:	f000 f918 	bl	800fa06 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800f7d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7d8:	4618      	mov	r0, r3
 800f7da:	3710      	adds	r7, #16
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bd80      	pop	{r7, pc}

0800f7e0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b086      	sub	sp, #24
 800f7e4:	af02      	add	r7, sp, #8
 800f7e6:	6078      	str	r0, [r7, #4]
 800f7e8:	460b      	mov	r3, r1
 800f7ea:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	331c      	adds	r3, #28
 800f7f0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800f7f2:	887b      	ldrh	r3, [r7, #2]
 800f7f4:	9300      	str	r3, [sp, #0]
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f7fc:	2100      	movs	r1, #0
 800f7fe:	6878      	ldr	r0, [r7, #4]
 800f800:	f000 f83d 	bl	800f87e <USBH_GetDescriptor>
 800f804:	4603      	mov	r3, r0
 800f806:	72fb      	strb	r3, [r7, #11]
 800f808:	7afb      	ldrb	r3, [r7, #11]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d107      	bne.n	800f81e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f814:	887a      	ldrh	r2, [r7, #2]
 800f816:	68f9      	ldr	r1, [r7, #12]
 800f818:	4618      	mov	r0, r3
 800f81a:	f000 f964 	bl	800fae6 <USBH_ParseCfgDesc>
  }

  return status;
 800f81e:	7afb      	ldrb	r3, [r7, #11]
}
 800f820:	4618      	mov	r0, r3
 800f822:	3710      	adds	r7, #16
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}

0800f828 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b088      	sub	sp, #32
 800f82c:	af02      	add	r7, sp, #8
 800f82e:	60f8      	str	r0, [r7, #12]
 800f830:	607a      	str	r2, [r7, #4]
 800f832:	461a      	mov	r2, r3
 800f834:	460b      	mov	r3, r1
 800f836:	72fb      	strb	r3, [r7, #11]
 800f838:	4613      	mov	r3, r2
 800f83a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800f83c:	7afb      	ldrb	r3, [r7, #11]
 800f83e:	b29b      	uxth	r3, r3
 800f840:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f844:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f84c:	893b      	ldrh	r3, [r7, #8]
 800f84e:	9300      	str	r3, [sp, #0]
 800f850:	460b      	mov	r3, r1
 800f852:	2100      	movs	r1, #0
 800f854:	68f8      	ldr	r0, [r7, #12]
 800f856:	f000 f812 	bl	800f87e <USBH_GetDescriptor>
 800f85a:	4603      	mov	r3, r0
 800f85c:	75fb      	strb	r3, [r7, #23]
 800f85e:	7dfb      	ldrb	r3, [r7, #23]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d107      	bne.n	800f874 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f86a:	893a      	ldrh	r2, [r7, #8]
 800f86c:	6879      	ldr	r1, [r7, #4]
 800f86e:	4618      	mov	r0, r3
 800f870:	f000 fa37 	bl	800fce2 <USBH_ParseStringDesc>
  }

  return status;
 800f874:	7dfb      	ldrb	r3, [r7, #23]
}
 800f876:	4618      	mov	r0, r3
 800f878:	3718      	adds	r7, #24
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}

0800f87e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800f87e:	b580      	push	{r7, lr}
 800f880:	b084      	sub	sp, #16
 800f882:	af00      	add	r7, sp, #0
 800f884:	60f8      	str	r0, [r7, #12]
 800f886:	607b      	str	r3, [r7, #4]
 800f888:	460b      	mov	r3, r1
 800f88a:	72fb      	strb	r3, [r7, #11]
 800f88c:	4613      	mov	r3, r2
 800f88e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	789b      	ldrb	r3, [r3, #2]
 800f894:	2b01      	cmp	r3, #1
 800f896:	d11c      	bne.n	800f8d2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f898:	7afb      	ldrb	r3, [r7, #11]
 800f89a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f89e:	b2da      	uxtb	r2, r3
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	2206      	movs	r2, #6
 800f8a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	893a      	ldrh	r2, [r7, #8]
 800f8ae:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f8b0:	893b      	ldrh	r3, [r7, #8]
 800f8b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f8b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f8ba:	d104      	bne.n	800f8c6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	f240 4209 	movw	r2, #1033	; 0x409
 800f8c2:	829a      	strh	r2, [r3, #20]
 800f8c4:	e002      	b.n	800f8cc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	8b3a      	ldrh	r2, [r7, #24]
 800f8d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800f8d2:	8b3b      	ldrh	r3, [r7, #24]
 800f8d4:	461a      	mov	r2, r3
 800f8d6:	6879      	ldr	r1, [r7, #4]
 800f8d8:	68f8      	ldr	r0, [r7, #12]
 800f8da:	f000 fa50 	bl	800fd7e <USBH_CtlReq>
 800f8de:	4603      	mov	r3, r0
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	3710      	adds	r7, #16
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}

0800f8e8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b082      	sub	sp, #8
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	460b      	mov	r3, r1
 800f8f2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	789b      	ldrb	r3, [r3, #2]
 800f8f8:	2b01      	cmp	r3, #1
 800f8fa:	d10f      	bne.n	800f91c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2200      	movs	r2, #0
 800f900:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2205      	movs	r2, #5
 800f906:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f908:	78fb      	ldrb	r3, [r7, #3]
 800f90a:	b29a      	uxth	r2, r3
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2200      	movs	r2, #0
 800f914:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2200      	movs	r2, #0
 800f91a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f91c:	2200      	movs	r2, #0
 800f91e:	2100      	movs	r1, #0
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f000 fa2c 	bl	800fd7e <USBH_CtlReq>
 800f926:	4603      	mov	r3, r0
}
 800f928:	4618      	mov	r0, r3
 800f92a:	3708      	adds	r7, #8
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bd80      	pop	{r7, pc}

0800f930 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b082      	sub	sp, #8
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
 800f938:	460b      	mov	r3, r1
 800f93a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	789b      	ldrb	r3, [r3, #2]
 800f940:	2b01      	cmp	r3, #1
 800f942:	d10e      	bne.n	800f962 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2200      	movs	r2, #0
 800f948:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	2209      	movs	r2, #9
 800f94e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	887a      	ldrh	r2, [r7, #2]
 800f954:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	2200      	movs	r2, #0
 800f95a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2200      	movs	r2, #0
 800f960:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f962:	2200      	movs	r2, #0
 800f964:	2100      	movs	r1, #0
 800f966:	6878      	ldr	r0, [r7, #4]
 800f968:	f000 fa09 	bl	800fd7e <USBH_CtlReq>
 800f96c:	4603      	mov	r3, r0
}
 800f96e:	4618      	mov	r0, r3
 800f970:	3708      	adds	r7, #8
 800f972:	46bd      	mov	sp, r7
 800f974:	bd80      	pop	{r7, pc}

0800f976 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800f976:	b580      	push	{r7, lr}
 800f978:	b082      	sub	sp, #8
 800f97a:	af00      	add	r7, sp, #0
 800f97c:	6078      	str	r0, [r7, #4]
 800f97e:	460b      	mov	r3, r1
 800f980:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	789b      	ldrb	r3, [r3, #2]
 800f986:	2b01      	cmp	r3, #1
 800f988:	d10f      	bne.n	800f9aa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2200      	movs	r2, #0
 800f98e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2203      	movs	r2, #3
 800f994:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800f996:	78fb      	ldrb	r3, [r7, #3]
 800f998:	b29a      	uxth	r2, r3
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	2100      	movs	r1, #0
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f000 f9e5 	bl	800fd7e <USBH_CtlReq>
 800f9b4:	4603      	mov	r3, r0
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3708      	adds	r7, #8
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}

0800f9be <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800f9be:	b580      	push	{r7, lr}
 800f9c0:	b082      	sub	sp, #8
 800f9c2:	af00      	add	r7, sp, #0
 800f9c4:	6078      	str	r0, [r7, #4]
 800f9c6:	460b      	mov	r3, r1
 800f9c8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	789b      	ldrb	r3, [r3, #2]
 800f9ce:	2b01      	cmp	r3, #1
 800f9d0:	d10f      	bne.n	800f9f2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2202      	movs	r2, #2
 800f9d6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2201      	movs	r2, #1
 800f9dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800f9e4:	78fb      	ldrb	r3, [r7, #3]
 800f9e6:	b29a      	uxth	r2, r3
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	2100      	movs	r1, #0
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f000 f9c1 	bl	800fd7e <USBH_CtlReq>
 800f9fc:	4603      	mov	r3, r0
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	3708      	adds	r7, #8
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}

0800fa06 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800fa06:	b480      	push	{r7}
 800fa08:	b085      	sub	sp, #20
 800fa0a:	af00      	add	r7, sp, #0
 800fa0c:	60f8      	str	r0, [r7, #12]
 800fa0e:	60b9      	str	r1, [r7, #8]
 800fa10:	4613      	mov	r3, r2
 800fa12:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	781a      	ldrb	r2, [r3, #0]
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	785a      	ldrb	r2, [r3, #1]
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	3302      	adds	r3, #2
 800fa28:	781b      	ldrb	r3, [r3, #0]
 800fa2a:	b29a      	uxth	r2, r3
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	3303      	adds	r3, #3
 800fa30:	781b      	ldrb	r3, [r3, #0]
 800fa32:	b29b      	uxth	r3, r3
 800fa34:	021b      	lsls	r3, r3, #8
 800fa36:	b29b      	uxth	r3, r3
 800fa38:	4313      	orrs	r3, r2
 800fa3a:	b29a      	uxth	r2, r3
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	791a      	ldrb	r2, [r3, #4]
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	795a      	ldrb	r2, [r3, #5]
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800fa50:	68bb      	ldr	r3, [r7, #8]
 800fa52:	799a      	ldrb	r2, [r3, #6]
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	79da      	ldrb	r2, [r3, #7]
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800fa60:	88fb      	ldrh	r3, [r7, #6]
 800fa62:	2b08      	cmp	r3, #8
 800fa64:	d939      	bls.n	800fada <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	3308      	adds	r3, #8
 800fa6a:	781b      	ldrb	r3, [r3, #0]
 800fa6c:	b29a      	uxth	r2, r3
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	3309      	adds	r3, #9
 800fa72:	781b      	ldrb	r3, [r3, #0]
 800fa74:	b29b      	uxth	r3, r3
 800fa76:	021b      	lsls	r3, r3, #8
 800fa78:	b29b      	uxth	r3, r3
 800fa7a:	4313      	orrs	r3, r2
 800fa7c:	b29a      	uxth	r2, r3
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	330a      	adds	r3, #10
 800fa86:	781b      	ldrb	r3, [r3, #0]
 800fa88:	b29a      	uxth	r2, r3
 800fa8a:	68bb      	ldr	r3, [r7, #8]
 800fa8c:	330b      	adds	r3, #11
 800fa8e:	781b      	ldrb	r3, [r3, #0]
 800fa90:	b29b      	uxth	r3, r3
 800fa92:	021b      	lsls	r3, r3, #8
 800fa94:	b29b      	uxth	r3, r3
 800fa96:	4313      	orrs	r3, r2
 800fa98:	b29a      	uxth	r2, r3
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800fa9e:	68bb      	ldr	r3, [r7, #8]
 800faa0:	330c      	adds	r3, #12
 800faa2:	781b      	ldrb	r3, [r3, #0]
 800faa4:	b29a      	uxth	r2, r3
 800faa6:	68bb      	ldr	r3, [r7, #8]
 800faa8:	330d      	adds	r3, #13
 800faaa:	781b      	ldrb	r3, [r3, #0]
 800faac:	b29b      	uxth	r3, r3
 800faae:	021b      	lsls	r3, r3, #8
 800fab0:	b29b      	uxth	r3, r3
 800fab2:	4313      	orrs	r3, r2
 800fab4:	b29a      	uxth	r2, r3
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	7b9a      	ldrb	r2, [r3, #14]
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	7bda      	ldrb	r2, [r3, #15]
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	7c1a      	ldrb	r2, [r3, #16]
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800fad2:	68bb      	ldr	r3, [r7, #8]
 800fad4:	7c5a      	ldrb	r2, [r3, #17]
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	745a      	strb	r2, [r3, #17]
  }
}
 800fada:	bf00      	nop
 800fadc:	3714      	adds	r7, #20
 800fade:	46bd      	mov	sp, r7
 800fae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae4:	4770      	bx	lr

0800fae6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800fae6:	b580      	push	{r7, lr}
 800fae8:	b08a      	sub	sp, #40	; 0x28
 800faea:	af00      	add	r7, sp, #0
 800faec:	60f8      	str	r0, [r7, #12]
 800faee:	60b9      	str	r1, [r7, #8]
 800faf0:	4613      	mov	r3, r2
 800faf2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800faf8:	2300      	movs	r3, #0
 800fafa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800fafe:	2300      	movs	r3, #0
 800fb00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	781a      	ldrb	r2, [r3, #0]
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800fb10:	68bb      	ldr	r3, [r7, #8]
 800fb12:	785a      	ldrb	r2, [r3, #1]
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	3302      	adds	r3, #2
 800fb1c:	781b      	ldrb	r3, [r3, #0]
 800fb1e:	b29a      	uxth	r2, r3
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	3303      	adds	r3, #3
 800fb24:	781b      	ldrb	r3, [r3, #0]
 800fb26:	b29b      	uxth	r3, r3
 800fb28:	021b      	lsls	r3, r3, #8
 800fb2a:	b29b      	uxth	r3, r3
 800fb2c:	4313      	orrs	r3, r2
 800fb2e:	b29a      	uxth	r2, r3
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	791a      	ldrb	r2, [r3, #4]
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	795a      	ldrb	r2, [r3, #5]
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800fb44:	68bb      	ldr	r3, [r7, #8]
 800fb46:	799a      	ldrb	r2, [r3, #6]
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800fb4c:	68bb      	ldr	r3, [r7, #8]
 800fb4e:	79da      	ldrb	r2, [r3, #7]
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	7a1a      	ldrb	r2, [r3, #8]
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800fb5c:	88fb      	ldrh	r3, [r7, #6]
 800fb5e:	2b09      	cmp	r3, #9
 800fb60:	d95f      	bls.n	800fc22 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800fb62:	2309      	movs	r3, #9
 800fb64:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800fb66:	2300      	movs	r3, #0
 800fb68:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fb6a:	e051      	b.n	800fc10 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800fb6c:	f107 0316 	add.w	r3, r7, #22
 800fb70:	4619      	mov	r1, r3
 800fb72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb74:	f000 f8e8 	bl	800fd48 <USBH_GetNextDesc>
 800fb78:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800fb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb7c:	785b      	ldrb	r3, [r3, #1]
 800fb7e:	2b04      	cmp	r3, #4
 800fb80:	d146      	bne.n	800fc10 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800fb82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fb86:	221a      	movs	r2, #26
 800fb88:	fb02 f303 	mul.w	r3, r2, r3
 800fb8c:	3308      	adds	r3, #8
 800fb8e:	68fa      	ldr	r2, [r7, #12]
 800fb90:	4413      	add	r3, r2
 800fb92:	3302      	adds	r3, #2
 800fb94:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800fb96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb98:	69f8      	ldr	r0, [r7, #28]
 800fb9a:	f000 f846 	bl	800fc2a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800fb9e:	2300      	movs	r3, #0
 800fba0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800fba4:	2300      	movs	r3, #0
 800fba6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800fba8:	e022      	b.n	800fbf0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800fbaa:	f107 0316 	add.w	r3, r7, #22
 800fbae:	4619      	mov	r1, r3
 800fbb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fbb2:	f000 f8c9 	bl	800fd48 <USBH_GetNextDesc>
 800fbb6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800fbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbba:	785b      	ldrb	r3, [r3, #1]
 800fbbc:	2b05      	cmp	r3, #5
 800fbbe:	d117      	bne.n	800fbf0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800fbc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fbc4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800fbc8:	3201      	adds	r2, #1
 800fbca:	00d2      	lsls	r2, r2, #3
 800fbcc:	211a      	movs	r1, #26
 800fbce:	fb01 f303 	mul.w	r3, r1, r3
 800fbd2:	4413      	add	r3, r2
 800fbd4:	3308      	adds	r3, #8
 800fbd6:	68fa      	ldr	r2, [r7, #12]
 800fbd8:	4413      	add	r3, r2
 800fbda:	3304      	adds	r3, #4
 800fbdc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800fbde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fbe0:	69b8      	ldr	r0, [r7, #24]
 800fbe2:	f000 f851 	bl	800fc88 <USBH_ParseEPDesc>
            ep_ix++;
 800fbe6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fbea:	3301      	adds	r3, #1
 800fbec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800fbf0:	69fb      	ldr	r3, [r7, #28]
 800fbf2:	791b      	ldrb	r3, [r3, #4]
 800fbf4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800fbf8:	429a      	cmp	r2, r3
 800fbfa:	d204      	bcs.n	800fc06 <USBH_ParseCfgDesc+0x120>
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	885a      	ldrh	r2, [r3, #2]
 800fc00:	8afb      	ldrh	r3, [r7, #22]
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d8d1      	bhi.n	800fbaa <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800fc06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fc0a:	3301      	adds	r3, #1
 800fc0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fc10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fc14:	2b01      	cmp	r3, #1
 800fc16:	d804      	bhi.n	800fc22 <USBH_ParseCfgDesc+0x13c>
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	885a      	ldrh	r2, [r3, #2]
 800fc1c:	8afb      	ldrh	r3, [r7, #22]
 800fc1e:	429a      	cmp	r2, r3
 800fc20:	d8a4      	bhi.n	800fb6c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800fc22:	bf00      	nop
 800fc24:	3728      	adds	r7, #40	; 0x28
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd80      	pop	{r7, pc}

0800fc2a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800fc2a:	b480      	push	{r7}
 800fc2c:	b083      	sub	sp, #12
 800fc2e:	af00      	add	r7, sp, #0
 800fc30:	6078      	str	r0, [r7, #4]
 800fc32:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	781a      	ldrb	r2, [r3, #0]
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	785a      	ldrb	r2, [r3, #1]
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	789a      	ldrb	r2, [r3, #2]
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	78da      	ldrb	r2, [r3, #3]
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	791a      	ldrb	r2, [r3, #4]
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	795a      	ldrb	r2, [r3, #5]
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	799a      	ldrb	r2, [r3, #6]
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	79da      	ldrb	r2, [r3, #7]
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	7a1a      	ldrb	r2, [r3, #8]
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	721a      	strb	r2, [r3, #8]
}
 800fc7c:	bf00      	nop
 800fc7e:	370c      	adds	r7, #12
 800fc80:	46bd      	mov	sp, r7
 800fc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc86:	4770      	bx	lr

0800fc88 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800fc88:	b480      	push	{r7}
 800fc8a:	b083      	sub	sp, #12
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
 800fc90:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	781a      	ldrb	r2, [r3, #0]
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	785a      	ldrb	r2, [r3, #1]
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	789a      	ldrb	r2, [r3, #2]
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	78da      	ldrb	r2, [r3, #3]
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	3304      	adds	r3, #4
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	b29a      	uxth	r2, r3
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	3305      	adds	r3, #5
 800fcbe:	781b      	ldrb	r3, [r3, #0]
 800fcc0:	b29b      	uxth	r3, r3
 800fcc2:	021b      	lsls	r3, r3, #8
 800fcc4:	b29b      	uxth	r3, r3
 800fcc6:	4313      	orrs	r3, r2
 800fcc8:	b29a      	uxth	r2, r3
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	799a      	ldrb	r2, [r3, #6]
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	719a      	strb	r2, [r3, #6]
}
 800fcd6:	bf00      	nop
 800fcd8:	370c      	adds	r7, #12
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce0:	4770      	bx	lr

0800fce2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800fce2:	b480      	push	{r7}
 800fce4:	b087      	sub	sp, #28
 800fce6:	af00      	add	r7, sp, #0
 800fce8:	60f8      	str	r0, [r7, #12]
 800fcea:	60b9      	str	r1, [r7, #8]
 800fcec:	4613      	mov	r3, r2
 800fcee:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	3301      	adds	r3, #1
 800fcf4:	781b      	ldrb	r3, [r3, #0]
 800fcf6:	2b03      	cmp	r3, #3
 800fcf8:	d120      	bne.n	800fd3c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	781b      	ldrb	r3, [r3, #0]
 800fcfe:	1e9a      	subs	r2, r3, #2
 800fd00:	88fb      	ldrh	r3, [r7, #6]
 800fd02:	4293      	cmp	r3, r2
 800fd04:	bf28      	it	cs
 800fd06:	4613      	movcs	r3, r2
 800fd08:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	3302      	adds	r3, #2
 800fd0e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800fd10:	2300      	movs	r3, #0
 800fd12:	82fb      	strh	r3, [r7, #22]
 800fd14:	e00b      	b.n	800fd2e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800fd16:	8afb      	ldrh	r3, [r7, #22]
 800fd18:	68fa      	ldr	r2, [r7, #12]
 800fd1a:	4413      	add	r3, r2
 800fd1c:	781a      	ldrb	r2, [r3, #0]
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	701a      	strb	r2, [r3, #0]
      pdest++;
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	3301      	adds	r3, #1
 800fd26:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800fd28:	8afb      	ldrh	r3, [r7, #22]
 800fd2a:	3302      	adds	r3, #2
 800fd2c:	82fb      	strh	r3, [r7, #22]
 800fd2e:	8afa      	ldrh	r2, [r7, #22]
 800fd30:	8abb      	ldrh	r3, [r7, #20]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d3ef      	bcc.n	800fd16 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	2200      	movs	r2, #0
 800fd3a:	701a      	strb	r2, [r3, #0]
  }
}
 800fd3c:	bf00      	nop
 800fd3e:	371c      	adds	r7, #28
 800fd40:	46bd      	mov	sp, r7
 800fd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd46:	4770      	bx	lr

0800fd48 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800fd48:	b480      	push	{r7}
 800fd4a:	b085      	sub	sp, #20
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
 800fd50:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	881a      	ldrh	r2, [r3, #0]
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	781b      	ldrb	r3, [r3, #0]
 800fd5a:	b29b      	uxth	r3, r3
 800fd5c:	4413      	add	r3, r2
 800fd5e:	b29a      	uxth	r2, r3
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	781b      	ldrb	r3, [r3, #0]
 800fd68:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	4413      	add	r3, r2
 800fd6e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800fd70:	68fb      	ldr	r3, [r7, #12]
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	3714      	adds	r7, #20
 800fd76:	46bd      	mov	sp, r7
 800fd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7c:	4770      	bx	lr

0800fd7e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800fd7e:	b580      	push	{r7, lr}
 800fd80:	b086      	sub	sp, #24
 800fd82:	af00      	add	r7, sp, #0
 800fd84:	60f8      	str	r0, [r7, #12]
 800fd86:	60b9      	str	r1, [r7, #8]
 800fd88:	4613      	mov	r3, r2
 800fd8a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800fd8c:	2301      	movs	r3, #1
 800fd8e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	789b      	ldrb	r3, [r3, #2]
 800fd94:	2b01      	cmp	r3, #1
 800fd96:	d002      	beq.n	800fd9e <USBH_CtlReq+0x20>
 800fd98:	2b02      	cmp	r3, #2
 800fd9a:	d00f      	beq.n	800fdbc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800fd9c:	e027      	b.n	800fdee <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	68ba      	ldr	r2, [r7, #8]
 800fda2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	88fa      	ldrh	r2, [r7, #6]
 800fda8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	2201      	movs	r2, #1
 800fdae:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	2202      	movs	r2, #2
 800fdb4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	75fb      	strb	r3, [r7, #23]
      break;
 800fdba:	e018      	b.n	800fdee <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800fdbc:	68f8      	ldr	r0, [r7, #12]
 800fdbe:	f000 f81b 	bl	800fdf8 <USBH_HandleControl>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800fdc6:	7dfb      	ldrb	r3, [r7, #23]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d002      	beq.n	800fdd2 <USBH_CtlReq+0x54>
 800fdcc:	7dfb      	ldrb	r3, [r7, #23]
 800fdce:	2b03      	cmp	r3, #3
 800fdd0:	d106      	bne.n	800fde0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	2201      	movs	r2, #1
 800fdd6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	2200      	movs	r2, #0
 800fddc:	761a      	strb	r2, [r3, #24]
      break;
 800fdde:	e005      	b.n	800fdec <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800fde0:	7dfb      	ldrb	r3, [r7, #23]
 800fde2:	2b02      	cmp	r3, #2
 800fde4:	d102      	bne.n	800fdec <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	2201      	movs	r2, #1
 800fdea:	709a      	strb	r2, [r3, #2]
      break;
 800fdec:	bf00      	nop
  }
  return status;
 800fdee:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	3718      	adds	r7, #24
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	bd80      	pop	{r7, pc}

0800fdf8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b086      	sub	sp, #24
 800fdfc:	af02      	add	r7, sp, #8
 800fdfe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800fe00:	2301      	movs	r3, #1
 800fe02:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fe04:	2300      	movs	r3, #0
 800fe06:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	7e1b      	ldrb	r3, [r3, #24]
 800fe0c:	3b01      	subs	r3, #1
 800fe0e:	2b0a      	cmp	r3, #10
 800fe10:	f200 8156 	bhi.w	80100c0 <USBH_HandleControl+0x2c8>
 800fe14:	a201      	add	r2, pc, #4	; (adr r2, 800fe1c <USBH_HandleControl+0x24>)
 800fe16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe1a:	bf00      	nop
 800fe1c:	0800fe49 	.word	0x0800fe49
 800fe20:	0800fe63 	.word	0x0800fe63
 800fe24:	0800fecd 	.word	0x0800fecd
 800fe28:	0800fef3 	.word	0x0800fef3
 800fe2c:	0800ff2b 	.word	0x0800ff2b
 800fe30:	0800ff55 	.word	0x0800ff55
 800fe34:	0800ffa7 	.word	0x0800ffa7
 800fe38:	0800ffc9 	.word	0x0800ffc9
 800fe3c:	08010005 	.word	0x08010005
 800fe40:	0801002b 	.word	0x0801002b
 800fe44:	08010069 	.word	0x08010069
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f103 0110 	add.w	r1, r3, #16
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	795b      	ldrb	r3, [r3, #5]
 800fe52:	461a      	mov	r2, r3
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f000 f943 	bl	80100e0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2202      	movs	r2, #2
 800fe5e:	761a      	strb	r2, [r3, #24]
      break;
 800fe60:	e139      	b.n	80100d6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	795b      	ldrb	r3, [r3, #5]
 800fe66:	4619      	mov	r1, r3
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f000 fcc5 	bl	80107f8 <USBH_LL_GetURBState>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800fe72:	7bbb      	ldrb	r3, [r7, #14]
 800fe74:	2b01      	cmp	r3, #1
 800fe76:	d11e      	bne.n	800feb6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	7c1b      	ldrb	r3, [r3, #16]
 800fe7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fe80:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	8adb      	ldrh	r3, [r3, #22]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d00a      	beq.n	800fea0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800fe8a:	7b7b      	ldrb	r3, [r7, #13]
 800fe8c:	2b80      	cmp	r3, #128	; 0x80
 800fe8e:	d103      	bne.n	800fe98 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2203      	movs	r2, #3
 800fe94:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fe96:	e115      	b.n	80100c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2205      	movs	r2, #5
 800fe9c:	761a      	strb	r2, [r3, #24]
      break;
 800fe9e:	e111      	b.n	80100c4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800fea0:	7b7b      	ldrb	r3, [r7, #13]
 800fea2:	2b80      	cmp	r3, #128	; 0x80
 800fea4:	d103      	bne.n	800feae <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2209      	movs	r2, #9
 800feaa:	761a      	strb	r2, [r3, #24]
      break;
 800feac:	e10a      	b.n	80100c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	2207      	movs	r2, #7
 800feb2:	761a      	strb	r2, [r3, #24]
      break;
 800feb4:	e106      	b.n	80100c4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800feb6:	7bbb      	ldrb	r3, [r7, #14]
 800feb8:	2b04      	cmp	r3, #4
 800feba:	d003      	beq.n	800fec4 <USBH_HandleControl+0xcc>
 800febc:	7bbb      	ldrb	r3, [r7, #14]
 800febe:	2b02      	cmp	r3, #2
 800fec0:	f040 8100 	bne.w	80100c4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	220b      	movs	r2, #11
 800fec8:	761a      	strb	r2, [r3, #24]
      break;
 800feca:	e0fb      	b.n	80100c4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fed2:	b29a      	uxth	r2, r3
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	6899      	ldr	r1, [r3, #8]
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	899a      	ldrh	r2, [r3, #12]
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	791b      	ldrb	r3, [r3, #4]
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f000 f93a 	bl	801015e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	2204      	movs	r2, #4
 800feee:	761a      	strb	r2, [r3, #24]
      break;
 800fef0:	e0f1      	b.n	80100d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	791b      	ldrb	r3, [r3, #4]
 800fef6:	4619      	mov	r1, r3
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f000 fc7d 	bl	80107f8 <USBH_LL_GetURBState>
 800fefe:	4603      	mov	r3, r0
 800ff00:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ff02:	7bbb      	ldrb	r3, [r7, #14]
 800ff04:	2b01      	cmp	r3, #1
 800ff06:	d102      	bne.n	800ff0e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2209      	movs	r2, #9
 800ff0c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ff0e:	7bbb      	ldrb	r3, [r7, #14]
 800ff10:	2b05      	cmp	r3, #5
 800ff12:	d102      	bne.n	800ff1a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ff14:	2303      	movs	r3, #3
 800ff16:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ff18:	e0d6      	b.n	80100c8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ff1a:	7bbb      	ldrb	r3, [r7, #14]
 800ff1c:	2b04      	cmp	r3, #4
 800ff1e:	f040 80d3 	bne.w	80100c8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	220b      	movs	r2, #11
 800ff26:	761a      	strb	r2, [r3, #24]
      break;
 800ff28:	e0ce      	b.n	80100c8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	6899      	ldr	r1, [r3, #8]
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	899a      	ldrh	r2, [r3, #12]
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	795b      	ldrb	r3, [r3, #5]
 800ff36:	2001      	movs	r0, #1
 800ff38:	9000      	str	r0, [sp, #0]
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	f000 f8ea 	bl	8010114 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ff46:	b29a      	uxth	r2, r3
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	2206      	movs	r2, #6
 800ff50:	761a      	strb	r2, [r3, #24]
      break;
 800ff52:	e0c0      	b.n	80100d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	795b      	ldrb	r3, [r3, #5]
 800ff58:	4619      	mov	r1, r3
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f000 fc4c 	bl	80107f8 <USBH_LL_GetURBState>
 800ff60:	4603      	mov	r3, r0
 800ff62:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ff64:	7bbb      	ldrb	r3, [r7, #14]
 800ff66:	2b01      	cmp	r3, #1
 800ff68:	d103      	bne.n	800ff72 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2207      	movs	r2, #7
 800ff6e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ff70:	e0ac      	b.n	80100cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ff72:	7bbb      	ldrb	r3, [r7, #14]
 800ff74:	2b05      	cmp	r3, #5
 800ff76:	d105      	bne.n	800ff84 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	220c      	movs	r2, #12
 800ff7c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ff7e:	2303      	movs	r3, #3
 800ff80:	73fb      	strb	r3, [r7, #15]
      break;
 800ff82:	e0a3      	b.n	80100cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ff84:	7bbb      	ldrb	r3, [r7, #14]
 800ff86:	2b02      	cmp	r3, #2
 800ff88:	d103      	bne.n	800ff92 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2205      	movs	r2, #5
 800ff8e:	761a      	strb	r2, [r3, #24]
      break;
 800ff90:	e09c      	b.n	80100cc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ff92:	7bbb      	ldrb	r3, [r7, #14]
 800ff94:	2b04      	cmp	r3, #4
 800ff96:	f040 8099 	bne.w	80100cc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	220b      	movs	r2, #11
 800ff9e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ffa0:	2302      	movs	r3, #2
 800ffa2:	73fb      	strb	r3, [r7, #15]
      break;
 800ffa4:	e092      	b.n	80100cc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	791b      	ldrb	r3, [r3, #4]
 800ffaa:	2200      	movs	r2, #0
 800ffac:	2100      	movs	r1, #0
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f000 f8d5 	bl	801015e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ffba:	b29a      	uxth	r2, r3
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2208      	movs	r2, #8
 800ffc4:	761a      	strb	r2, [r3, #24]

      break;
 800ffc6:	e086      	b.n	80100d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	791b      	ldrb	r3, [r3, #4]
 800ffcc:	4619      	mov	r1, r3
 800ffce:	6878      	ldr	r0, [r7, #4]
 800ffd0:	f000 fc12 	bl	80107f8 <USBH_LL_GetURBState>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ffd8:	7bbb      	ldrb	r3, [r7, #14]
 800ffda:	2b01      	cmp	r3, #1
 800ffdc:	d105      	bne.n	800ffea <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	220d      	movs	r2, #13
 800ffe2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ffe8:	e072      	b.n	80100d0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ffea:	7bbb      	ldrb	r3, [r7, #14]
 800ffec:	2b04      	cmp	r3, #4
 800ffee:	d103      	bne.n	800fff8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	220b      	movs	r2, #11
 800fff4:	761a      	strb	r2, [r3, #24]
      break;
 800fff6:	e06b      	b.n	80100d0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800fff8:	7bbb      	ldrb	r3, [r7, #14]
 800fffa:	2b05      	cmp	r3, #5
 800fffc:	d168      	bne.n	80100d0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800fffe:	2303      	movs	r3, #3
 8010000:	73fb      	strb	r3, [r7, #15]
      break;
 8010002:	e065      	b.n	80100d0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	795b      	ldrb	r3, [r3, #5]
 8010008:	2201      	movs	r2, #1
 801000a:	9200      	str	r2, [sp, #0]
 801000c:	2200      	movs	r2, #0
 801000e:	2100      	movs	r1, #0
 8010010:	6878      	ldr	r0, [r7, #4]
 8010012:	f000 f87f 	bl	8010114 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801001c:	b29a      	uxth	r2, r3
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	220a      	movs	r2, #10
 8010026:	761a      	strb	r2, [r3, #24]
      break;
 8010028:	e055      	b.n	80100d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	795b      	ldrb	r3, [r3, #5]
 801002e:	4619      	mov	r1, r3
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	f000 fbe1 	bl	80107f8 <USBH_LL_GetURBState>
 8010036:	4603      	mov	r3, r0
 8010038:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 801003a:	7bbb      	ldrb	r3, [r7, #14]
 801003c:	2b01      	cmp	r3, #1
 801003e:	d105      	bne.n	801004c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8010040:	2300      	movs	r3, #0
 8010042:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	220d      	movs	r2, #13
 8010048:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801004a:	e043      	b.n	80100d4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 801004c:	7bbb      	ldrb	r3, [r7, #14]
 801004e:	2b02      	cmp	r3, #2
 8010050:	d103      	bne.n	801005a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	2209      	movs	r2, #9
 8010056:	761a      	strb	r2, [r3, #24]
      break;
 8010058:	e03c      	b.n	80100d4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 801005a:	7bbb      	ldrb	r3, [r7, #14]
 801005c:	2b04      	cmp	r3, #4
 801005e:	d139      	bne.n	80100d4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	220b      	movs	r2, #11
 8010064:	761a      	strb	r2, [r3, #24]
      break;
 8010066:	e035      	b.n	80100d4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	7e5b      	ldrb	r3, [r3, #25]
 801006c:	3301      	adds	r3, #1
 801006e:	b2da      	uxtb	r2, r3
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	765a      	strb	r2, [r3, #25]
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	7e5b      	ldrb	r3, [r3, #25]
 8010078:	2b02      	cmp	r3, #2
 801007a:	d806      	bhi.n	801008a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2201      	movs	r2, #1
 8010080:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	2201      	movs	r2, #1
 8010086:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8010088:	e025      	b.n	80100d6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010090:	2106      	movs	r1, #6
 8010092:	6878      	ldr	r0, [r7, #4]
 8010094:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2200      	movs	r2, #0
 801009a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	795b      	ldrb	r3, [r3, #5]
 80100a0:	4619      	mov	r1, r3
 80100a2:	6878      	ldr	r0, [r7, #4]
 80100a4:	f000 f90c 	bl	80102c0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	791b      	ldrb	r3, [r3, #4]
 80100ac:	4619      	mov	r1, r3
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f000 f906 	bl	80102c0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2200      	movs	r2, #0
 80100b8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80100ba:	2302      	movs	r3, #2
 80100bc:	73fb      	strb	r3, [r7, #15]
      break;
 80100be:	e00a      	b.n	80100d6 <USBH_HandleControl+0x2de>

    default:
      break;
 80100c0:	bf00      	nop
 80100c2:	e008      	b.n	80100d6 <USBH_HandleControl+0x2de>
      break;
 80100c4:	bf00      	nop
 80100c6:	e006      	b.n	80100d6 <USBH_HandleControl+0x2de>
      break;
 80100c8:	bf00      	nop
 80100ca:	e004      	b.n	80100d6 <USBH_HandleControl+0x2de>
      break;
 80100cc:	bf00      	nop
 80100ce:	e002      	b.n	80100d6 <USBH_HandleControl+0x2de>
      break;
 80100d0:	bf00      	nop
 80100d2:	e000      	b.n	80100d6 <USBH_HandleControl+0x2de>
      break;
 80100d4:	bf00      	nop
  }

  return status;
 80100d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80100d8:	4618      	mov	r0, r3
 80100da:	3710      	adds	r7, #16
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}

080100e0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b088      	sub	sp, #32
 80100e4:	af04      	add	r7, sp, #16
 80100e6:	60f8      	str	r0, [r7, #12]
 80100e8:	60b9      	str	r1, [r7, #8]
 80100ea:	4613      	mov	r3, r2
 80100ec:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80100ee:	79f9      	ldrb	r1, [r7, #7]
 80100f0:	2300      	movs	r3, #0
 80100f2:	9303      	str	r3, [sp, #12]
 80100f4:	2308      	movs	r3, #8
 80100f6:	9302      	str	r3, [sp, #8]
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	9301      	str	r3, [sp, #4]
 80100fc:	2300      	movs	r3, #0
 80100fe:	9300      	str	r3, [sp, #0]
 8010100:	2300      	movs	r3, #0
 8010102:	2200      	movs	r2, #0
 8010104:	68f8      	ldr	r0, [r7, #12]
 8010106:	f000 fb46 	bl	8010796 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 801010a:	2300      	movs	r3, #0
}
 801010c:	4618      	mov	r0, r3
 801010e:	3710      	adds	r7, #16
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}

08010114 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b088      	sub	sp, #32
 8010118:	af04      	add	r7, sp, #16
 801011a:	60f8      	str	r0, [r7, #12]
 801011c:	60b9      	str	r1, [r7, #8]
 801011e:	4611      	mov	r1, r2
 8010120:	461a      	mov	r2, r3
 8010122:	460b      	mov	r3, r1
 8010124:	80fb      	strh	r3, [r7, #6]
 8010126:	4613      	mov	r3, r2
 8010128:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010130:	2b00      	cmp	r3, #0
 8010132:	d001      	beq.n	8010138 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8010134:	2300      	movs	r3, #0
 8010136:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010138:	7979      	ldrb	r1, [r7, #5]
 801013a:	7e3b      	ldrb	r3, [r7, #24]
 801013c:	9303      	str	r3, [sp, #12]
 801013e:	88fb      	ldrh	r3, [r7, #6]
 8010140:	9302      	str	r3, [sp, #8]
 8010142:	68bb      	ldr	r3, [r7, #8]
 8010144:	9301      	str	r3, [sp, #4]
 8010146:	2301      	movs	r3, #1
 8010148:	9300      	str	r3, [sp, #0]
 801014a:	2300      	movs	r3, #0
 801014c:	2200      	movs	r2, #0
 801014e:	68f8      	ldr	r0, [r7, #12]
 8010150:	f000 fb21 	bl	8010796 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8010154:	2300      	movs	r3, #0
}
 8010156:	4618      	mov	r0, r3
 8010158:	3710      	adds	r7, #16
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}

0801015e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 801015e:	b580      	push	{r7, lr}
 8010160:	b088      	sub	sp, #32
 8010162:	af04      	add	r7, sp, #16
 8010164:	60f8      	str	r0, [r7, #12]
 8010166:	60b9      	str	r1, [r7, #8]
 8010168:	4611      	mov	r1, r2
 801016a:	461a      	mov	r2, r3
 801016c:	460b      	mov	r3, r1
 801016e:	80fb      	strh	r3, [r7, #6]
 8010170:	4613      	mov	r3, r2
 8010172:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010174:	7979      	ldrb	r1, [r7, #5]
 8010176:	2300      	movs	r3, #0
 8010178:	9303      	str	r3, [sp, #12]
 801017a:	88fb      	ldrh	r3, [r7, #6]
 801017c:	9302      	str	r3, [sp, #8]
 801017e:	68bb      	ldr	r3, [r7, #8]
 8010180:	9301      	str	r3, [sp, #4]
 8010182:	2301      	movs	r3, #1
 8010184:	9300      	str	r3, [sp, #0]
 8010186:	2300      	movs	r3, #0
 8010188:	2201      	movs	r2, #1
 801018a:	68f8      	ldr	r0, [r7, #12]
 801018c:	f000 fb03 	bl	8010796 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8010190:	2300      	movs	r3, #0

}
 8010192:	4618      	mov	r0, r3
 8010194:	3710      	adds	r7, #16
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}

0801019a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 801019a:	b580      	push	{r7, lr}
 801019c:	b088      	sub	sp, #32
 801019e:	af04      	add	r7, sp, #16
 80101a0:	60f8      	str	r0, [r7, #12]
 80101a2:	60b9      	str	r1, [r7, #8]
 80101a4:	4611      	mov	r1, r2
 80101a6:	461a      	mov	r2, r3
 80101a8:	460b      	mov	r3, r1
 80101aa:	80fb      	strh	r3, [r7, #6]
 80101ac:	4613      	mov	r3, r2
 80101ae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d001      	beq.n	80101be <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80101ba:	2300      	movs	r3, #0
 80101bc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80101be:	7979      	ldrb	r1, [r7, #5]
 80101c0:	7e3b      	ldrb	r3, [r7, #24]
 80101c2:	9303      	str	r3, [sp, #12]
 80101c4:	88fb      	ldrh	r3, [r7, #6]
 80101c6:	9302      	str	r3, [sp, #8]
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	9301      	str	r3, [sp, #4]
 80101cc:	2301      	movs	r3, #1
 80101ce:	9300      	str	r3, [sp, #0]
 80101d0:	2302      	movs	r3, #2
 80101d2:	2200      	movs	r2, #0
 80101d4:	68f8      	ldr	r0, [r7, #12]
 80101d6:	f000 fade 	bl	8010796 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80101da:	2300      	movs	r3, #0
}
 80101dc:	4618      	mov	r0, r3
 80101de:	3710      	adds	r7, #16
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bd80      	pop	{r7, pc}

080101e4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b088      	sub	sp, #32
 80101e8:	af04      	add	r7, sp, #16
 80101ea:	60f8      	str	r0, [r7, #12]
 80101ec:	60b9      	str	r1, [r7, #8]
 80101ee:	4611      	mov	r1, r2
 80101f0:	461a      	mov	r2, r3
 80101f2:	460b      	mov	r3, r1
 80101f4:	80fb      	strh	r3, [r7, #6]
 80101f6:	4613      	mov	r3, r2
 80101f8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80101fa:	7979      	ldrb	r1, [r7, #5]
 80101fc:	2300      	movs	r3, #0
 80101fe:	9303      	str	r3, [sp, #12]
 8010200:	88fb      	ldrh	r3, [r7, #6]
 8010202:	9302      	str	r3, [sp, #8]
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	9301      	str	r3, [sp, #4]
 8010208:	2301      	movs	r3, #1
 801020a:	9300      	str	r3, [sp, #0]
 801020c:	2302      	movs	r3, #2
 801020e:	2201      	movs	r2, #1
 8010210:	68f8      	ldr	r0, [r7, #12]
 8010212:	f000 fac0 	bl	8010796 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8010216:	2300      	movs	r3, #0
}
 8010218:	4618      	mov	r0, r3
 801021a:	3710      	adds	r7, #16
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}

08010220 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b086      	sub	sp, #24
 8010224:	af04      	add	r7, sp, #16
 8010226:	6078      	str	r0, [r7, #4]
 8010228:	4608      	mov	r0, r1
 801022a:	4611      	mov	r1, r2
 801022c:	461a      	mov	r2, r3
 801022e:	4603      	mov	r3, r0
 8010230:	70fb      	strb	r3, [r7, #3]
 8010232:	460b      	mov	r3, r1
 8010234:	70bb      	strb	r3, [r7, #2]
 8010236:	4613      	mov	r3, r2
 8010238:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801023a:	7878      	ldrb	r0, [r7, #1]
 801023c:	78ba      	ldrb	r2, [r7, #2]
 801023e:	78f9      	ldrb	r1, [r7, #3]
 8010240:	8b3b      	ldrh	r3, [r7, #24]
 8010242:	9302      	str	r3, [sp, #8]
 8010244:	7d3b      	ldrb	r3, [r7, #20]
 8010246:	9301      	str	r3, [sp, #4]
 8010248:	7c3b      	ldrb	r3, [r7, #16]
 801024a:	9300      	str	r3, [sp, #0]
 801024c:	4603      	mov	r3, r0
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	f000 fa53 	bl	80106fa <USBH_LL_OpenPipe>

  return USBH_OK;
 8010254:	2300      	movs	r3, #0
}
 8010256:	4618      	mov	r0, r3
 8010258:	3708      	adds	r7, #8
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}

0801025e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801025e:	b580      	push	{r7, lr}
 8010260:	b082      	sub	sp, #8
 8010262:	af00      	add	r7, sp, #0
 8010264:	6078      	str	r0, [r7, #4]
 8010266:	460b      	mov	r3, r1
 8010268:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 801026a:	78fb      	ldrb	r3, [r7, #3]
 801026c:	4619      	mov	r1, r3
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	f000 fa72 	bl	8010758 <USBH_LL_ClosePipe>

  return USBH_OK;
 8010274:	2300      	movs	r3, #0
}
 8010276:	4618      	mov	r0, r3
 8010278:	3708      	adds	r7, #8
 801027a:	46bd      	mov	sp, r7
 801027c:	bd80      	pop	{r7, pc}

0801027e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801027e:	b580      	push	{r7, lr}
 8010280:	b084      	sub	sp, #16
 8010282:	af00      	add	r7, sp, #0
 8010284:	6078      	str	r0, [r7, #4]
 8010286:	460b      	mov	r3, r1
 8010288:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f000 f836 	bl	80102fc <USBH_GetFreePipe>
 8010290:	4603      	mov	r3, r0
 8010292:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8010294:	89fb      	ldrh	r3, [r7, #14]
 8010296:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801029a:	4293      	cmp	r3, r2
 801029c:	d00a      	beq.n	80102b4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 801029e:	78fa      	ldrb	r2, [r7, #3]
 80102a0:	89fb      	ldrh	r3, [r7, #14]
 80102a2:	f003 030f 	and.w	r3, r3, #15
 80102a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80102aa:	6879      	ldr	r1, [r7, #4]
 80102ac:	33e0      	adds	r3, #224	; 0xe0
 80102ae:	009b      	lsls	r3, r3, #2
 80102b0:	440b      	add	r3, r1
 80102b2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80102b4:	89fb      	ldrh	r3, [r7, #14]
 80102b6:	b2db      	uxtb	r3, r3
}
 80102b8:	4618      	mov	r0, r3
 80102ba:	3710      	adds	r7, #16
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}

080102c0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80102c0:	b480      	push	{r7}
 80102c2:	b083      	sub	sp, #12
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
 80102c8:	460b      	mov	r3, r1
 80102ca:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80102cc:	78fb      	ldrb	r3, [r7, #3]
 80102ce:	2b0a      	cmp	r3, #10
 80102d0:	d80d      	bhi.n	80102ee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80102d2:	78fb      	ldrb	r3, [r7, #3]
 80102d4:	687a      	ldr	r2, [r7, #4]
 80102d6:	33e0      	adds	r3, #224	; 0xe0
 80102d8:	009b      	lsls	r3, r3, #2
 80102da:	4413      	add	r3, r2
 80102dc:	685a      	ldr	r2, [r3, #4]
 80102de:	78fb      	ldrb	r3, [r7, #3]
 80102e0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80102e4:	6879      	ldr	r1, [r7, #4]
 80102e6:	33e0      	adds	r3, #224	; 0xe0
 80102e8:	009b      	lsls	r3, r3, #2
 80102ea:	440b      	add	r3, r1
 80102ec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80102ee:	2300      	movs	r3, #0
}
 80102f0:	4618      	mov	r0, r3
 80102f2:	370c      	adds	r7, #12
 80102f4:	46bd      	mov	sp, r7
 80102f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fa:	4770      	bx	lr

080102fc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80102fc:	b480      	push	{r7}
 80102fe:	b085      	sub	sp, #20
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8010304:	2300      	movs	r3, #0
 8010306:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8010308:	2300      	movs	r3, #0
 801030a:	73fb      	strb	r3, [r7, #15]
 801030c:	e00f      	b.n	801032e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 801030e:	7bfb      	ldrb	r3, [r7, #15]
 8010310:	687a      	ldr	r2, [r7, #4]
 8010312:	33e0      	adds	r3, #224	; 0xe0
 8010314:	009b      	lsls	r3, r3, #2
 8010316:	4413      	add	r3, r2
 8010318:	685b      	ldr	r3, [r3, #4]
 801031a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801031e:	2b00      	cmp	r3, #0
 8010320:	d102      	bne.n	8010328 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8010322:	7bfb      	ldrb	r3, [r7, #15]
 8010324:	b29b      	uxth	r3, r3
 8010326:	e007      	b.n	8010338 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8010328:	7bfb      	ldrb	r3, [r7, #15]
 801032a:	3301      	adds	r3, #1
 801032c:	73fb      	strb	r3, [r7, #15]
 801032e:	7bfb      	ldrb	r3, [r7, #15]
 8010330:	2b0a      	cmp	r3, #10
 8010332:	d9ec      	bls.n	801030e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8010334:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8010338:	4618      	mov	r0, r3
 801033a:	3714      	adds	r7, #20
 801033c:	46bd      	mov	sp, r7
 801033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010342:	4770      	bx	lr

08010344 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010348:	2201      	movs	r2, #1
 801034a:	490e      	ldr	r1, [pc, #56]	; (8010384 <MX_USB_HOST_Init+0x40>)
 801034c:	480e      	ldr	r0, [pc, #56]	; (8010388 <MX_USB_HOST_Init+0x44>)
 801034e:	f7fe fca1 	bl	800ec94 <USBH_Init>
 8010352:	4603      	mov	r3, r0
 8010354:	2b00      	cmp	r3, #0
 8010356:	d001      	beq.n	801035c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010358:	f7f1 fe50 	bl	8001ffc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801035c:	490b      	ldr	r1, [pc, #44]	; (801038c <MX_USB_HOST_Init+0x48>)
 801035e:	480a      	ldr	r0, [pc, #40]	; (8010388 <MX_USB_HOST_Init+0x44>)
 8010360:	f7fe fd26 	bl	800edb0 <USBH_RegisterClass>
 8010364:	4603      	mov	r3, r0
 8010366:	2b00      	cmp	r3, #0
 8010368:	d001      	beq.n	801036e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801036a:	f7f1 fe47 	bl	8001ffc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801036e:	4806      	ldr	r0, [pc, #24]	; (8010388 <MX_USB_HOST_Init+0x44>)
 8010370:	f7fe fdaa 	bl	800eec8 <USBH_Start>
 8010374:	4603      	mov	r3, r0
 8010376:	2b00      	cmp	r3, #0
 8010378:	d001      	beq.n	801037e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801037a:	f7f1 fe3f 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801037e:	bf00      	nop
 8010380:	bd80      	pop	{r7, pc}
 8010382:	bf00      	nop
 8010384:	080103a5 	.word	0x080103a5
 8010388:	200006b8 	.word	0x200006b8
 801038c:	200001ec 	.word	0x200001ec

08010390 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8010394:	4802      	ldr	r0, [pc, #8]	; (80103a0 <MX_USB_HOST_Process+0x10>)
 8010396:	f7fe fda7 	bl	800eee8 <USBH_Process>
}
 801039a:	bf00      	nop
 801039c:	bd80      	pop	{r7, pc}
 801039e:	bf00      	nop
 80103a0:	200006b8 	.word	0x200006b8

080103a4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80103a4:	b480      	push	{r7}
 80103a6:	b083      	sub	sp, #12
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
 80103ac:	460b      	mov	r3, r1
 80103ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80103b0:	78fb      	ldrb	r3, [r7, #3]
 80103b2:	3b01      	subs	r3, #1
 80103b4:	2b04      	cmp	r3, #4
 80103b6:	d819      	bhi.n	80103ec <USBH_UserProcess+0x48>
 80103b8:	a201      	add	r2, pc, #4	; (adr r2, 80103c0 <USBH_UserProcess+0x1c>)
 80103ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103be:	bf00      	nop
 80103c0:	080103ed 	.word	0x080103ed
 80103c4:	080103dd 	.word	0x080103dd
 80103c8:	080103ed 	.word	0x080103ed
 80103cc:	080103e5 	.word	0x080103e5
 80103d0:	080103d5 	.word	0x080103d5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80103d4:	4b09      	ldr	r3, [pc, #36]	; (80103fc <USBH_UserProcess+0x58>)
 80103d6:	2203      	movs	r2, #3
 80103d8:	701a      	strb	r2, [r3, #0]
  break;
 80103da:	e008      	b.n	80103ee <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80103dc:	4b07      	ldr	r3, [pc, #28]	; (80103fc <USBH_UserProcess+0x58>)
 80103de:	2202      	movs	r2, #2
 80103e0:	701a      	strb	r2, [r3, #0]
  break;
 80103e2:	e004      	b.n	80103ee <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80103e4:	4b05      	ldr	r3, [pc, #20]	; (80103fc <USBH_UserProcess+0x58>)
 80103e6:	2201      	movs	r2, #1
 80103e8:	701a      	strb	r2, [r3, #0]
  break;
 80103ea:	e000      	b.n	80103ee <USBH_UserProcess+0x4a>

  default:
  break;
 80103ec:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80103ee:	bf00      	nop
 80103f0:	370c      	adds	r7, #12
 80103f2:	46bd      	mov	sp, r7
 80103f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f8:	4770      	bx	lr
 80103fa:	bf00      	nop
 80103fc:	200002b5 	.word	0x200002b5

08010400 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b08a      	sub	sp, #40	; 0x28
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010408:	f107 0314 	add.w	r3, r7, #20
 801040c:	2200      	movs	r2, #0
 801040e:	601a      	str	r2, [r3, #0]
 8010410:	605a      	str	r2, [r3, #4]
 8010412:	609a      	str	r2, [r3, #8]
 8010414:	60da      	str	r2, [r3, #12]
 8010416:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010420:	d147      	bne.n	80104b2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010422:	2300      	movs	r3, #0
 8010424:	613b      	str	r3, [r7, #16]
 8010426:	4b25      	ldr	r3, [pc, #148]	; (80104bc <HAL_HCD_MspInit+0xbc>)
 8010428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801042a:	4a24      	ldr	r2, [pc, #144]	; (80104bc <HAL_HCD_MspInit+0xbc>)
 801042c:	f043 0301 	orr.w	r3, r3, #1
 8010430:	6313      	str	r3, [r2, #48]	; 0x30
 8010432:	4b22      	ldr	r3, [pc, #136]	; (80104bc <HAL_HCD_MspInit+0xbc>)
 8010434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010436:	f003 0301 	and.w	r3, r3, #1
 801043a:	613b      	str	r3, [r7, #16]
 801043c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 801043e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010444:	2300      	movs	r3, #0
 8010446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010448:	2300      	movs	r3, #0
 801044a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 801044c:	f107 0314 	add.w	r3, r7, #20
 8010450:	4619      	mov	r1, r3
 8010452:	481b      	ldr	r0, [pc, #108]	; (80104c0 <HAL_HCD_MspInit+0xc0>)
 8010454:	f7f6 fbde 	bl	8006c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8010458:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801045c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801045e:	2302      	movs	r3, #2
 8010460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010462:	2300      	movs	r3, #0
 8010464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010466:	2300      	movs	r3, #0
 8010468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801046a:	230a      	movs	r3, #10
 801046c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801046e:	f107 0314 	add.w	r3, r7, #20
 8010472:	4619      	mov	r1, r3
 8010474:	4812      	ldr	r0, [pc, #72]	; (80104c0 <HAL_HCD_MspInit+0xc0>)
 8010476:	f7f6 fbcd 	bl	8006c14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801047a:	4b10      	ldr	r3, [pc, #64]	; (80104bc <HAL_HCD_MspInit+0xbc>)
 801047c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801047e:	4a0f      	ldr	r2, [pc, #60]	; (80104bc <HAL_HCD_MspInit+0xbc>)
 8010480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010484:	6353      	str	r3, [r2, #52]	; 0x34
 8010486:	2300      	movs	r3, #0
 8010488:	60fb      	str	r3, [r7, #12]
 801048a:	4b0c      	ldr	r3, [pc, #48]	; (80104bc <HAL_HCD_MspInit+0xbc>)
 801048c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801048e:	4a0b      	ldr	r2, [pc, #44]	; (80104bc <HAL_HCD_MspInit+0xbc>)
 8010490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010494:	6453      	str	r3, [r2, #68]	; 0x44
 8010496:	4b09      	ldr	r3, [pc, #36]	; (80104bc <HAL_HCD_MspInit+0xbc>)
 8010498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801049a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801049e:	60fb      	str	r3, [r7, #12]
 80104a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80104a2:	2200      	movs	r2, #0
 80104a4:	2100      	movs	r1, #0
 80104a6:	2043      	movs	r0, #67	; 0x43
 80104a8:	f7f6 fb7d 	bl	8006ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80104ac:	2043      	movs	r0, #67	; 0x43
 80104ae:	f7f6 fb96 	bl	8006bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80104b2:	bf00      	nop
 80104b4:	3728      	adds	r7, #40	; 0x28
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}
 80104ba:	bf00      	nop
 80104bc:	40023800 	.word	0x40023800
 80104c0:	40020000 	.word	0x40020000

080104c4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b082      	sub	sp, #8
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80104d2:	4618      	mov	r0, r3
 80104d4:	f7ff f8db 	bl	800f68e <USBH_LL_IncTimer>
}
 80104d8:	bf00      	nop
 80104da:	3708      	adds	r7, #8
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd80      	pop	{r7, pc}

080104e0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b082      	sub	sp, #8
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80104ee:	4618      	mov	r0, r3
 80104f0:	f7ff f913 	bl	800f71a <USBH_LL_Connect>
}
 80104f4:	bf00      	nop
 80104f6:	3708      	adds	r7, #8
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}

080104fc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b082      	sub	sp, #8
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801050a:	4618      	mov	r0, r3
 801050c:	f7ff f91c 	bl	800f748 <USBH_LL_Disconnect>
}
 8010510:	bf00      	nop
 8010512:	3708      	adds	r7, #8
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}

08010518 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010518:	b480      	push	{r7}
 801051a:	b083      	sub	sp, #12
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
 8010520:	460b      	mov	r3, r1
 8010522:	70fb      	strb	r3, [r7, #3]
 8010524:	4613      	mov	r3, r2
 8010526:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8010528:	bf00      	nop
 801052a:	370c      	adds	r7, #12
 801052c:	46bd      	mov	sp, r7
 801052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010532:	4770      	bx	lr

08010534 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b082      	sub	sp, #8
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010542:	4618      	mov	r0, r3
 8010544:	f7ff f8cd 	bl	800f6e2 <USBH_LL_PortEnabled>
}
 8010548:	bf00      	nop
 801054a:	3708      	adds	r7, #8
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}

08010550 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b082      	sub	sp, #8
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801055e:	4618      	mov	r0, r3
 8010560:	f7ff f8cd 	bl	800f6fe <USBH_LL_PortDisabled>
}
 8010564:	bf00      	nop
 8010566:	3708      	adds	r7, #8
 8010568:	46bd      	mov	sp, r7
 801056a:	bd80      	pop	{r7, pc}

0801056c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b082      	sub	sp, #8
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801057a:	2b01      	cmp	r3, #1
 801057c:	d12a      	bne.n	80105d4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801057e:	4a18      	ldr	r2, [pc, #96]	; (80105e0 <USBH_LL_Init+0x74>)
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	4a15      	ldr	r2, [pc, #84]	; (80105e0 <USBH_LL_Init+0x74>)
 801058a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801058e:	4b14      	ldr	r3, [pc, #80]	; (80105e0 <USBH_LL_Init+0x74>)
 8010590:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010594:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010596:	4b12      	ldr	r3, [pc, #72]	; (80105e0 <USBH_LL_Init+0x74>)
 8010598:	2208      	movs	r2, #8
 801059a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801059c:	4b10      	ldr	r3, [pc, #64]	; (80105e0 <USBH_LL_Init+0x74>)
 801059e:	2201      	movs	r2, #1
 80105a0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80105a2:	4b0f      	ldr	r3, [pc, #60]	; (80105e0 <USBH_LL_Init+0x74>)
 80105a4:	2200      	movs	r2, #0
 80105a6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80105a8:	4b0d      	ldr	r3, [pc, #52]	; (80105e0 <USBH_LL_Init+0x74>)
 80105aa:	2202      	movs	r2, #2
 80105ac:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80105ae:	4b0c      	ldr	r3, [pc, #48]	; (80105e0 <USBH_LL_Init+0x74>)
 80105b0:	2200      	movs	r2, #0
 80105b2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80105b4:	480a      	ldr	r0, [pc, #40]	; (80105e0 <USBH_LL_Init+0x74>)
 80105b6:	f7f6 fd2d 	bl	8007014 <HAL_HCD_Init>
 80105ba:	4603      	mov	r3, r0
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d001      	beq.n	80105c4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80105c0:	f7f1 fd1c 	bl	8001ffc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80105c4:	4806      	ldr	r0, [pc, #24]	; (80105e0 <USBH_LL_Init+0x74>)
 80105c6:	f7f7 f909 	bl	80077dc <HAL_HCD_GetCurrentFrame>
 80105ca:	4603      	mov	r3, r0
 80105cc:	4619      	mov	r1, r3
 80105ce:	6878      	ldr	r0, [r7, #4]
 80105d0:	f7ff f84e 	bl	800f670 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80105d4:	2300      	movs	r3, #0
}
 80105d6:	4618      	mov	r0, r3
 80105d8:	3708      	adds	r7, #8
 80105da:	46bd      	mov	sp, r7
 80105dc:	bd80      	pop	{r7, pc}
 80105de:	bf00      	nop
 80105e0:	20000a90 	.word	0x20000a90

080105e4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b084      	sub	sp, #16
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105ec:	2300      	movs	r3, #0
 80105ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80105f0:	2300      	movs	r3, #0
 80105f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80105fa:	4618      	mov	r0, r3
 80105fc:	f7f7 f878 	bl	80076f0 <HAL_HCD_Start>
 8010600:	4603      	mov	r3, r0
 8010602:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010604:	7bfb      	ldrb	r3, [r7, #15]
 8010606:	4618      	mov	r0, r3
 8010608:	f000 f952 	bl	80108b0 <USBH_Get_USB_Status>
 801060c:	4603      	mov	r3, r0
 801060e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010610:	7bbb      	ldrb	r3, [r7, #14]
}
 8010612:	4618      	mov	r0, r3
 8010614:	3710      	adds	r7, #16
 8010616:	46bd      	mov	sp, r7
 8010618:	bd80      	pop	{r7, pc}

0801061a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801061a:	b580      	push	{r7, lr}
 801061c:	b084      	sub	sp, #16
 801061e:	af00      	add	r7, sp, #0
 8010620:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010622:	2300      	movs	r3, #0
 8010624:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010626:	2300      	movs	r3, #0
 8010628:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010630:	4618      	mov	r0, r3
 8010632:	f7f7 f880 	bl	8007736 <HAL_HCD_Stop>
 8010636:	4603      	mov	r3, r0
 8010638:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801063a:	7bfb      	ldrb	r3, [r7, #15]
 801063c:	4618      	mov	r0, r3
 801063e:	f000 f937 	bl	80108b0 <USBH_Get_USB_Status>
 8010642:	4603      	mov	r3, r0
 8010644:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010646:	7bbb      	ldrb	r3, [r7, #14]
}
 8010648:	4618      	mov	r0, r3
 801064a:	3710      	adds	r7, #16
 801064c:	46bd      	mov	sp, r7
 801064e:	bd80      	pop	{r7, pc}

08010650 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b084      	sub	sp, #16
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010658:	2301      	movs	r3, #1
 801065a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010662:	4618      	mov	r0, r3
 8010664:	f7f7 f8c8 	bl	80077f8 <HAL_HCD_GetCurrentSpeed>
 8010668:	4603      	mov	r3, r0
 801066a:	2b02      	cmp	r3, #2
 801066c:	d00c      	beq.n	8010688 <USBH_LL_GetSpeed+0x38>
 801066e:	2b02      	cmp	r3, #2
 8010670:	d80d      	bhi.n	801068e <USBH_LL_GetSpeed+0x3e>
 8010672:	2b00      	cmp	r3, #0
 8010674:	d002      	beq.n	801067c <USBH_LL_GetSpeed+0x2c>
 8010676:	2b01      	cmp	r3, #1
 8010678:	d003      	beq.n	8010682 <USBH_LL_GetSpeed+0x32>
 801067a:	e008      	b.n	801068e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801067c:	2300      	movs	r3, #0
 801067e:	73fb      	strb	r3, [r7, #15]
    break;
 8010680:	e008      	b.n	8010694 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010682:	2301      	movs	r3, #1
 8010684:	73fb      	strb	r3, [r7, #15]
    break;
 8010686:	e005      	b.n	8010694 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010688:	2302      	movs	r3, #2
 801068a:	73fb      	strb	r3, [r7, #15]
    break;
 801068c:	e002      	b.n	8010694 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801068e:	2301      	movs	r3, #1
 8010690:	73fb      	strb	r3, [r7, #15]
    break;
 8010692:	bf00      	nop
  }
  return  speed;
 8010694:	7bfb      	ldrb	r3, [r7, #15]
}
 8010696:	4618      	mov	r0, r3
 8010698:	3710      	adds	r7, #16
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}

0801069e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801069e:	b580      	push	{r7, lr}
 80106a0:	b084      	sub	sp, #16
 80106a2:	af00      	add	r7, sp, #0
 80106a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106a6:	2300      	movs	r3, #0
 80106a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80106aa:	2300      	movs	r3, #0
 80106ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7f7 f85b 	bl	8007770 <HAL_HCD_ResetPort>
 80106ba:	4603      	mov	r3, r0
 80106bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80106be:	7bfb      	ldrb	r3, [r7, #15]
 80106c0:	4618      	mov	r0, r3
 80106c2:	f000 f8f5 	bl	80108b0 <USBH_Get_USB_Status>
 80106c6:	4603      	mov	r3, r0
 80106c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80106cc:	4618      	mov	r0, r3
 80106ce:	3710      	adds	r7, #16
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bd80      	pop	{r7, pc}

080106d4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b082      	sub	sp, #8
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
 80106dc:	460b      	mov	r3, r1
 80106de:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80106e6:	78fa      	ldrb	r2, [r7, #3]
 80106e8:	4611      	mov	r1, r2
 80106ea:	4618      	mov	r0, r3
 80106ec:	f7f7 f862 	bl	80077b4 <HAL_HCD_HC_GetXferCount>
 80106f0:	4603      	mov	r3, r0
}
 80106f2:	4618      	mov	r0, r3
 80106f4:	3708      	adds	r7, #8
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}

080106fa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80106fa:	b590      	push	{r4, r7, lr}
 80106fc:	b089      	sub	sp, #36	; 0x24
 80106fe:	af04      	add	r7, sp, #16
 8010700:	6078      	str	r0, [r7, #4]
 8010702:	4608      	mov	r0, r1
 8010704:	4611      	mov	r1, r2
 8010706:	461a      	mov	r2, r3
 8010708:	4603      	mov	r3, r0
 801070a:	70fb      	strb	r3, [r7, #3]
 801070c:	460b      	mov	r3, r1
 801070e:	70bb      	strb	r3, [r7, #2]
 8010710:	4613      	mov	r3, r2
 8010712:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010714:	2300      	movs	r3, #0
 8010716:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010718:	2300      	movs	r3, #0
 801071a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010722:	787c      	ldrb	r4, [r7, #1]
 8010724:	78ba      	ldrb	r2, [r7, #2]
 8010726:	78f9      	ldrb	r1, [r7, #3]
 8010728:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801072a:	9302      	str	r3, [sp, #8]
 801072c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010730:	9301      	str	r3, [sp, #4]
 8010732:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010736:	9300      	str	r3, [sp, #0]
 8010738:	4623      	mov	r3, r4
 801073a:	f7f6 fccd 	bl	80070d8 <HAL_HCD_HC_Init>
 801073e:	4603      	mov	r3, r0
 8010740:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010742:	7bfb      	ldrb	r3, [r7, #15]
 8010744:	4618      	mov	r0, r3
 8010746:	f000 f8b3 	bl	80108b0 <USBH_Get_USB_Status>
 801074a:	4603      	mov	r3, r0
 801074c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801074e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010750:	4618      	mov	r0, r3
 8010752:	3714      	adds	r7, #20
 8010754:	46bd      	mov	sp, r7
 8010756:	bd90      	pop	{r4, r7, pc}

08010758 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b084      	sub	sp, #16
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	460b      	mov	r3, r1
 8010762:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010764:	2300      	movs	r3, #0
 8010766:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010768:	2300      	movs	r3, #0
 801076a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010772:	78fa      	ldrb	r2, [r7, #3]
 8010774:	4611      	mov	r1, r2
 8010776:	4618      	mov	r0, r3
 8010778:	f7f6 fd3d 	bl	80071f6 <HAL_HCD_HC_Halt>
 801077c:	4603      	mov	r3, r0
 801077e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010780:	7bfb      	ldrb	r3, [r7, #15]
 8010782:	4618      	mov	r0, r3
 8010784:	f000 f894 	bl	80108b0 <USBH_Get_USB_Status>
 8010788:	4603      	mov	r3, r0
 801078a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801078c:	7bbb      	ldrb	r3, [r7, #14]
}
 801078e:	4618      	mov	r0, r3
 8010790:	3710      	adds	r7, #16
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}

08010796 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010796:	b590      	push	{r4, r7, lr}
 8010798:	b089      	sub	sp, #36	; 0x24
 801079a:	af04      	add	r7, sp, #16
 801079c:	6078      	str	r0, [r7, #4]
 801079e:	4608      	mov	r0, r1
 80107a0:	4611      	mov	r1, r2
 80107a2:	461a      	mov	r2, r3
 80107a4:	4603      	mov	r3, r0
 80107a6:	70fb      	strb	r3, [r7, #3]
 80107a8:	460b      	mov	r3, r1
 80107aa:	70bb      	strb	r3, [r7, #2]
 80107ac:	4613      	mov	r3, r2
 80107ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107b0:	2300      	movs	r3, #0
 80107b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80107b4:	2300      	movs	r3, #0
 80107b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80107be:	787c      	ldrb	r4, [r7, #1]
 80107c0:	78ba      	ldrb	r2, [r7, #2]
 80107c2:	78f9      	ldrb	r1, [r7, #3]
 80107c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80107c8:	9303      	str	r3, [sp, #12]
 80107ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80107cc:	9302      	str	r3, [sp, #8]
 80107ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d0:	9301      	str	r3, [sp, #4]
 80107d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80107d6:	9300      	str	r3, [sp, #0]
 80107d8:	4623      	mov	r3, r4
 80107da:	f7f6 fd2f 	bl	800723c <HAL_HCD_HC_SubmitRequest>
 80107de:	4603      	mov	r3, r0
 80107e0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80107e2:	7bfb      	ldrb	r3, [r7, #15]
 80107e4:	4618      	mov	r0, r3
 80107e6:	f000 f863 	bl	80108b0 <USBH_Get_USB_Status>
 80107ea:	4603      	mov	r3, r0
 80107ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80107f0:	4618      	mov	r0, r3
 80107f2:	3714      	adds	r7, #20
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd90      	pop	{r4, r7, pc}

080107f8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b082      	sub	sp, #8
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
 8010800:	460b      	mov	r3, r1
 8010802:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801080a:	78fa      	ldrb	r2, [r7, #3]
 801080c:	4611      	mov	r1, r2
 801080e:	4618      	mov	r0, r3
 8010810:	f7f6 ffbc 	bl	800778c <HAL_HCD_HC_GetURBState>
 8010814:	4603      	mov	r3, r0
}
 8010816:	4618      	mov	r0, r3
 8010818:	3708      	adds	r7, #8
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}

0801081e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801081e:	b580      	push	{r7, lr}
 8010820:	b082      	sub	sp, #8
 8010822:	af00      	add	r7, sp, #0
 8010824:	6078      	str	r0, [r7, #4]
 8010826:	460b      	mov	r3, r1
 8010828:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 801082a:	20c8      	movs	r0, #200	; 0xc8
 801082c:	f7f6 f8bc 	bl	80069a8 <HAL_Delay>
  return USBH_OK;
 8010830:	2300      	movs	r3, #0
}
 8010832:	4618      	mov	r0, r3
 8010834:	3708      	adds	r7, #8
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}

0801083a <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801083a:	b480      	push	{r7}
 801083c:	b085      	sub	sp, #20
 801083e:	af00      	add	r7, sp, #0
 8010840:	6078      	str	r0, [r7, #4]
 8010842:	460b      	mov	r3, r1
 8010844:	70fb      	strb	r3, [r7, #3]
 8010846:	4613      	mov	r3, r2
 8010848:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010850:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010852:	78fb      	ldrb	r3, [r7, #3]
 8010854:	68fa      	ldr	r2, [r7, #12]
 8010856:	212c      	movs	r1, #44	; 0x2c
 8010858:	fb01 f303 	mul.w	r3, r1, r3
 801085c:	4413      	add	r3, r2
 801085e:	333b      	adds	r3, #59	; 0x3b
 8010860:	781b      	ldrb	r3, [r3, #0]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d009      	beq.n	801087a <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010866:	78fb      	ldrb	r3, [r7, #3]
 8010868:	68fa      	ldr	r2, [r7, #12]
 801086a:	212c      	movs	r1, #44	; 0x2c
 801086c:	fb01 f303 	mul.w	r3, r1, r3
 8010870:	4413      	add	r3, r2
 8010872:	3354      	adds	r3, #84	; 0x54
 8010874:	78ba      	ldrb	r2, [r7, #2]
 8010876:	701a      	strb	r2, [r3, #0]
 8010878:	e008      	b.n	801088c <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801087a:	78fb      	ldrb	r3, [r7, #3]
 801087c:	68fa      	ldr	r2, [r7, #12]
 801087e:	212c      	movs	r1, #44	; 0x2c
 8010880:	fb01 f303 	mul.w	r3, r1, r3
 8010884:	4413      	add	r3, r2
 8010886:	3355      	adds	r3, #85	; 0x55
 8010888:	78ba      	ldrb	r2, [r7, #2]
 801088a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801088c:	2300      	movs	r3, #0
}
 801088e:	4618      	mov	r0, r3
 8010890:	3714      	adds	r7, #20
 8010892:	46bd      	mov	sp, r7
 8010894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010898:	4770      	bx	lr

0801089a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801089a:	b580      	push	{r7, lr}
 801089c:	b082      	sub	sp, #8
 801089e:	af00      	add	r7, sp, #0
 80108a0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	f7f6 f880 	bl	80069a8 <HAL_Delay>
}
 80108a8:	bf00      	nop
 80108aa:	3708      	adds	r7, #8
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bd80      	pop	{r7, pc}

080108b0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80108b0:	b480      	push	{r7}
 80108b2:	b085      	sub	sp, #20
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	4603      	mov	r3, r0
 80108b8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80108ba:	2300      	movs	r3, #0
 80108bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80108be:	79fb      	ldrb	r3, [r7, #7]
 80108c0:	2b03      	cmp	r3, #3
 80108c2:	d817      	bhi.n	80108f4 <USBH_Get_USB_Status+0x44>
 80108c4:	a201      	add	r2, pc, #4	; (adr r2, 80108cc <USBH_Get_USB_Status+0x1c>)
 80108c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108ca:	bf00      	nop
 80108cc:	080108dd 	.word	0x080108dd
 80108d0:	080108e3 	.word	0x080108e3
 80108d4:	080108e9 	.word	0x080108e9
 80108d8:	080108ef 	.word	0x080108ef
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80108dc:	2300      	movs	r3, #0
 80108de:	73fb      	strb	r3, [r7, #15]
    break;
 80108e0:	e00b      	b.n	80108fa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80108e2:	2302      	movs	r3, #2
 80108e4:	73fb      	strb	r3, [r7, #15]
    break;
 80108e6:	e008      	b.n	80108fa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80108e8:	2301      	movs	r3, #1
 80108ea:	73fb      	strb	r3, [r7, #15]
    break;
 80108ec:	e005      	b.n	80108fa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80108ee:	2302      	movs	r3, #2
 80108f0:	73fb      	strb	r3, [r7, #15]
    break;
 80108f2:	e002      	b.n	80108fa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80108f4:	2302      	movs	r3, #2
 80108f6:	73fb      	strb	r3, [r7, #15]
    break;
 80108f8:	bf00      	nop
  }
  return usb_status;
 80108fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80108fc:	4618      	mov	r0, r3
 80108fe:	3714      	adds	r7, #20
 8010900:	46bd      	mov	sp, r7
 8010902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010906:	4770      	bx	lr

08010908 <__errno>:
 8010908:	4b01      	ldr	r3, [pc, #4]	; (8010910 <__errno+0x8>)
 801090a:	6818      	ldr	r0, [r3, #0]
 801090c:	4770      	bx	lr
 801090e:	bf00      	nop
 8010910:	2000020c 	.word	0x2000020c

08010914 <__libc_init_array>:
 8010914:	b570      	push	{r4, r5, r6, lr}
 8010916:	4d0d      	ldr	r5, [pc, #52]	; (801094c <__libc_init_array+0x38>)
 8010918:	4c0d      	ldr	r4, [pc, #52]	; (8010950 <__libc_init_array+0x3c>)
 801091a:	1b64      	subs	r4, r4, r5
 801091c:	10a4      	asrs	r4, r4, #2
 801091e:	2600      	movs	r6, #0
 8010920:	42a6      	cmp	r6, r4
 8010922:	d109      	bne.n	8010938 <__libc_init_array+0x24>
 8010924:	4d0b      	ldr	r5, [pc, #44]	; (8010954 <__libc_init_array+0x40>)
 8010926:	4c0c      	ldr	r4, [pc, #48]	; (8010958 <__libc_init_array+0x44>)
 8010928:	f000 fc78 	bl	801121c <_init>
 801092c:	1b64      	subs	r4, r4, r5
 801092e:	10a4      	asrs	r4, r4, #2
 8010930:	2600      	movs	r6, #0
 8010932:	42a6      	cmp	r6, r4
 8010934:	d105      	bne.n	8010942 <__libc_init_array+0x2e>
 8010936:	bd70      	pop	{r4, r5, r6, pc}
 8010938:	f855 3b04 	ldr.w	r3, [r5], #4
 801093c:	4798      	blx	r3
 801093e:	3601      	adds	r6, #1
 8010940:	e7ee      	b.n	8010920 <__libc_init_array+0xc>
 8010942:	f855 3b04 	ldr.w	r3, [r5], #4
 8010946:	4798      	blx	r3
 8010948:	3601      	adds	r6, #1
 801094a:	e7f2      	b.n	8010932 <__libc_init_array+0x1e>
 801094c:	08011818 	.word	0x08011818
 8010950:	08011818 	.word	0x08011818
 8010954:	08011818 	.word	0x08011818
 8010958:	0801181c 	.word	0x0801181c

0801095c <malloc>:
 801095c:	4b02      	ldr	r3, [pc, #8]	; (8010968 <malloc+0xc>)
 801095e:	4601      	mov	r1, r0
 8010960:	6818      	ldr	r0, [r3, #0]
 8010962:	f000 b871 	b.w	8010a48 <_malloc_r>
 8010966:	bf00      	nop
 8010968:	2000020c 	.word	0x2000020c

0801096c <free>:
 801096c:	4b02      	ldr	r3, [pc, #8]	; (8010978 <free+0xc>)
 801096e:	4601      	mov	r1, r0
 8010970:	6818      	ldr	r0, [r3, #0]
 8010972:	f000 b819 	b.w	80109a8 <_free_r>
 8010976:	bf00      	nop
 8010978:	2000020c 	.word	0x2000020c

0801097c <memcpy>:
 801097c:	440a      	add	r2, r1
 801097e:	4291      	cmp	r1, r2
 8010980:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010984:	d100      	bne.n	8010988 <memcpy+0xc>
 8010986:	4770      	bx	lr
 8010988:	b510      	push	{r4, lr}
 801098a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801098e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010992:	4291      	cmp	r1, r2
 8010994:	d1f9      	bne.n	801098a <memcpy+0xe>
 8010996:	bd10      	pop	{r4, pc}

08010998 <memset>:
 8010998:	4402      	add	r2, r0
 801099a:	4603      	mov	r3, r0
 801099c:	4293      	cmp	r3, r2
 801099e:	d100      	bne.n	80109a2 <memset+0xa>
 80109a0:	4770      	bx	lr
 80109a2:	f803 1b01 	strb.w	r1, [r3], #1
 80109a6:	e7f9      	b.n	801099c <memset+0x4>

080109a8 <_free_r>:
 80109a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80109aa:	2900      	cmp	r1, #0
 80109ac:	d048      	beq.n	8010a40 <_free_r+0x98>
 80109ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109b2:	9001      	str	r0, [sp, #4]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	f1a1 0404 	sub.w	r4, r1, #4
 80109ba:	bfb8      	it	lt
 80109bc:	18e4      	addlt	r4, r4, r3
 80109be:	f000 f8c1 	bl	8010b44 <__malloc_lock>
 80109c2:	4a20      	ldr	r2, [pc, #128]	; (8010a44 <_free_r+0x9c>)
 80109c4:	9801      	ldr	r0, [sp, #4]
 80109c6:	6813      	ldr	r3, [r2, #0]
 80109c8:	4615      	mov	r5, r2
 80109ca:	b933      	cbnz	r3, 80109da <_free_r+0x32>
 80109cc:	6063      	str	r3, [r4, #4]
 80109ce:	6014      	str	r4, [r2, #0]
 80109d0:	b003      	add	sp, #12
 80109d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80109d6:	f000 b8bb 	b.w	8010b50 <__malloc_unlock>
 80109da:	42a3      	cmp	r3, r4
 80109dc:	d90b      	bls.n	80109f6 <_free_r+0x4e>
 80109de:	6821      	ldr	r1, [r4, #0]
 80109e0:	1862      	adds	r2, r4, r1
 80109e2:	4293      	cmp	r3, r2
 80109e4:	bf04      	itt	eq
 80109e6:	681a      	ldreq	r2, [r3, #0]
 80109e8:	685b      	ldreq	r3, [r3, #4]
 80109ea:	6063      	str	r3, [r4, #4]
 80109ec:	bf04      	itt	eq
 80109ee:	1852      	addeq	r2, r2, r1
 80109f0:	6022      	streq	r2, [r4, #0]
 80109f2:	602c      	str	r4, [r5, #0]
 80109f4:	e7ec      	b.n	80109d0 <_free_r+0x28>
 80109f6:	461a      	mov	r2, r3
 80109f8:	685b      	ldr	r3, [r3, #4]
 80109fa:	b10b      	cbz	r3, 8010a00 <_free_r+0x58>
 80109fc:	42a3      	cmp	r3, r4
 80109fe:	d9fa      	bls.n	80109f6 <_free_r+0x4e>
 8010a00:	6811      	ldr	r1, [r2, #0]
 8010a02:	1855      	adds	r5, r2, r1
 8010a04:	42a5      	cmp	r5, r4
 8010a06:	d10b      	bne.n	8010a20 <_free_r+0x78>
 8010a08:	6824      	ldr	r4, [r4, #0]
 8010a0a:	4421      	add	r1, r4
 8010a0c:	1854      	adds	r4, r2, r1
 8010a0e:	42a3      	cmp	r3, r4
 8010a10:	6011      	str	r1, [r2, #0]
 8010a12:	d1dd      	bne.n	80109d0 <_free_r+0x28>
 8010a14:	681c      	ldr	r4, [r3, #0]
 8010a16:	685b      	ldr	r3, [r3, #4]
 8010a18:	6053      	str	r3, [r2, #4]
 8010a1a:	4421      	add	r1, r4
 8010a1c:	6011      	str	r1, [r2, #0]
 8010a1e:	e7d7      	b.n	80109d0 <_free_r+0x28>
 8010a20:	d902      	bls.n	8010a28 <_free_r+0x80>
 8010a22:	230c      	movs	r3, #12
 8010a24:	6003      	str	r3, [r0, #0]
 8010a26:	e7d3      	b.n	80109d0 <_free_r+0x28>
 8010a28:	6825      	ldr	r5, [r4, #0]
 8010a2a:	1961      	adds	r1, r4, r5
 8010a2c:	428b      	cmp	r3, r1
 8010a2e:	bf04      	itt	eq
 8010a30:	6819      	ldreq	r1, [r3, #0]
 8010a32:	685b      	ldreq	r3, [r3, #4]
 8010a34:	6063      	str	r3, [r4, #4]
 8010a36:	bf04      	itt	eq
 8010a38:	1949      	addeq	r1, r1, r5
 8010a3a:	6021      	streq	r1, [r4, #0]
 8010a3c:	6054      	str	r4, [r2, #4]
 8010a3e:	e7c7      	b.n	80109d0 <_free_r+0x28>
 8010a40:	b003      	add	sp, #12
 8010a42:	bd30      	pop	{r4, r5, pc}
 8010a44:	200002b8 	.word	0x200002b8

08010a48 <_malloc_r>:
 8010a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a4a:	1ccd      	adds	r5, r1, #3
 8010a4c:	f025 0503 	bic.w	r5, r5, #3
 8010a50:	3508      	adds	r5, #8
 8010a52:	2d0c      	cmp	r5, #12
 8010a54:	bf38      	it	cc
 8010a56:	250c      	movcc	r5, #12
 8010a58:	2d00      	cmp	r5, #0
 8010a5a:	4606      	mov	r6, r0
 8010a5c:	db01      	blt.n	8010a62 <_malloc_r+0x1a>
 8010a5e:	42a9      	cmp	r1, r5
 8010a60:	d903      	bls.n	8010a6a <_malloc_r+0x22>
 8010a62:	230c      	movs	r3, #12
 8010a64:	6033      	str	r3, [r6, #0]
 8010a66:	2000      	movs	r0, #0
 8010a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a6a:	f000 f86b 	bl	8010b44 <__malloc_lock>
 8010a6e:	4921      	ldr	r1, [pc, #132]	; (8010af4 <_malloc_r+0xac>)
 8010a70:	680a      	ldr	r2, [r1, #0]
 8010a72:	4614      	mov	r4, r2
 8010a74:	b99c      	cbnz	r4, 8010a9e <_malloc_r+0x56>
 8010a76:	4f20      	ldr	r7, [pc, #128]	; (8010af8 <_malloc_r+0xb0>)
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	b923      	cbnz	r3, 8010a86 <_malloc_r+0x3e>
 8010a7c:	4621      	mov	r1, r4
 8010a7e:	4630      	mov	r0, r6
 8010a80:	f000 f83c 	bl	8010afc <_sbrk_r>
 8010a84:	6038      	str	r0, [r7, #0]
 8010a86:	4629      	mov	r1, r5
 8010a88:	4630      	mov	r0, r6
 8010a8a:	f000 f837 	bl	8010afc <_sbrk_r>
 8010a8e:	1c43      	adds	r3, r0, #1
 8010a90:	d123      	bne.n	8010ada <_malloc_r+0x92>
 8010a92:	230c      	movs	r3, #12
 8010a94:	6033      	str	r3, [r6, #0]
 8010a96:	4630      	mov	r0, r6
 8010a98:	f000 f85a 	bl	8010b50 <__malloc_unlock>
 8010a9c:	e7e3      	b.n	8010a66 <_malloc_r+0x1e>
 8010a9e:	6823      	ldr	r3, [r4, #0]
 8010aa0:	1b5b      	subs	r3, r3, r5
 8010aa2:	d417      	bmi.n	8010ad4 <_malloc_r+0x8c>
 8010aa4:	2b0b      	cmp	r3, #11
 8010aa6:	d903      	bls.n	8010ab0 <_malloc_r+0x68>
 8010aa8:	6023      	str	r3, [r4, #0]
 8010aaa:	441c      	add	r4, r3
 8010aac:	6025      	str	r5, [r4, #0]
 8010aae:	e004      	b.n	8010aba <_malloc_r+0x72>
 8010ab0:	6863      	ldr	r3, [r4, #4]
 8010ab2:	42a2      	cmp	r2, r4
 8010ab4:	bf0c      	ite	eq
 8010ab6:	600b      	streq	r3, [r1, #0]
 8010ab8:	6053      	strne	r3, [r2, #4]
 8010aba:	4630      	mov	r0, r6
 8010abc:	f000 f848 	bl	8010b50 <__malloc_unlock>
 8010ac0:	f104 000b 	add.w	r0, r4, #11
 8010ac4:	1d23      	adds	r3, r4, #4
 8010ac6:	f020 0007 	bic.w	r0, r0, #7
 8010aca:	1ac2      	subs	r2, r0, r3
 8010acc:	d0cc      	beq.n	8010a68 <_malloc_r+0x20>
 8010ace:	1a1b      	subs	r3, r3, r0
 8010ad0:	50a3      	str	r3, [r4, r2]
 8010ad2:	e7c9      	b.n	8010a68 <_malloc_r+0x20>
 8010ad4:	4622      	mov	r2, r4
 8010ad6:	6864      	ldr	r4, [r4, #4]
 8010ad8:	e7cc      	b.n	8010a74 <_malloc_r+0x2c>
 8010ada:	1cc4      	adds	r4, r0, #3
 8010adc:	f024 0403 	bic.w	r4, r4, #3
 8010ae0:	42a0      	cmp	r0, r4
 8010ae2:	d0e3      	beq.n	8010aac <_malloc_r+0x64>
 8010ae4:	1a21      	subs	r1, r4, r0
 8010ae6:	4630      	mov	r0, r6
 8010ae8:	f000 f808 	bl	8010afc <_sbrk_r>
 8010aec:	3001      	adds	r0, #1
 8010aee:	d1dd      	bne.n	8010aac <_malloc_r+0x64>
 8010af0:	e7cf      	b.n	8010a92 <_malloc_r+0x4a>
 8010af2:	bf00      	nop
 8010af4:	200002b8 	.word	0x200002b8
 8010af8:	200002bc 	.word	0x200002bc

08010afc <_sbrk_r>:
 8010afc:	b538      	push	{r3, r4, r5, lr}
 8010afe:	4d06      	ldr	r5, [pc, #24]	; (8010b18 <_sbrk_r+0x1c>)
 8010b00:	2300      	movs	r3, #0
 8010b02:	4604      	mov	r4, r0
 8010b04:	4608      	mov	r0, r1
 8010b06:	602b      	str	r3, [r5, #0]
 8010b08:	f7f1 fdb4 	bl	8002674 <_sbrk>
 8010b0c:	1c43      	adds	r3, r0, #1
 8010b0e:	d102      	bne.n	8010b16 <_sbrk_r+0x1a>
 8010b10:	682b      	ldr	r3, [r5, #0]
 8010b12:	b103      	cbz	r3, 8010b16 <_sbrk_r+0x1a>
 8010b14:	6023      	str	r3, [r4, #0]
 8010b16:	bd38      	pop	{r3, r4, r5, pc}
 8010b18:	20000d94 	.word	0x20000d94

08010b1c <strncat>:
 8010b1c:	b530      	push	{r4, r5, lr}
 8010b1e:	4604      	mov	r4, r0
 8010b20:	7825      	ldrb	r5, [r4, #0]
 8010b22:	4623      	mov	r3, r4
 8010b24:	3401      	adds	r4, #1
 8010b26:	2d00      	cmp	r5, #0
 8010b28:	d1fa      	bne.n	8010b20 <strncat+0x4>
 8010b2a:	3a01      	subs	r2, #1
 8010b2c:	d304      	bcc.n	8010b38 <strncat+0x1c>
 8010b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b32:	f803 4b01 	strb.w	r4, [r3], #1
 8010b36:	b904      	cbnz	r4, 8010b3a <strncat+0x1e>
 8010b38:	bd30      	pop	{r4, r5, pc}
 8010b3a:	2a00      	cmp	r2, #0
 8010b3c:	d1f5      	bne.n	8010b2a <strncat+0xe>
 8010b3e:	701a      	strb	r2, [r3, #0]
 8010b40:	e7f3      	b.n	8010b2a <strncat+0xe>
	...

08010b44 <__malloc_lock>:
 8010b44:	4801      	ldr	r0, [pc, #4]	; (8010b4c <__malloc_lock+0x8>)
 8010b46:	f000 b809 	b.w	8010b5c <__retarget_lock_acquire_recursive>
 8010b4a:	bf00      	nop
 8010b4c:	20000d9c 	.word	0x20000d9c

08010b50 <__malloc_unlock>:
 8010b50:	4801      	ldr	r0, [pc, #4]	; (8010b58 <__malloc_unlock+0x8>)
 8010b52:	f000 b804 	b.w	8010b5e <__retarget_lock_release_recursive>
 8010b56:	bf00      	nop
 8010b58:	20000d9c 	.word	0x20000d9c

08010b5c <__retarget_lock_acquire_recursive>:
 8010b5c:	4770      	bx	lr

08010b5e <__retarget_lock_release_recursive>:
 8010b5e:	4770      	bx	lr

08010b60 <atan>:
 8010b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b64:	ec55 4b10 	vmov	r4, r5, d0
 8010b68:	4bc3      	ldr	r3, [pc, #780]	; (8010e78 <atan+0x318>)
 8010b6a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010b6e:	429e      	cmp	r6, r3
 8010b70:	46ab      	mov	fp, r5
 8010b72:	dd18      	ble.n	8010ba6 <atan+0x46>
 8010b74:	4bc1      	ldr	r3, [pc, #772]	; (8010e7c <atan+0x31c>)
 8010b76:	429e      	cmp	r6, r3
 8010b78:	dc01      	bgt.n	8010b7e <atan+0x1e>
 8010b7a:	d109      	bne.n	8010b90 <atan+0x30>
 8010b7c:	b144      	cbz	r4, 8010b90 <atan+0x30>
 8010b7e:	4622      	mov	r2, r4
 8010b80:	462b      	mov	r3, r5
 8010b82:	4620      	mov	r0, r4
 8010b84:	4629      	mov	r1, r5
 8010b86:	f7ef fb25 	bl	80001d4 <__adddf3>
 8010b8a:	4604      	mov	r4, r0
 8010b8c:	460d      	mov	r5, r1
 8010b8e:	e006      	b.n	8010b9e <atan+0x3e>
 8010b90:	f1bb 0f00 	cmp.w	fp, #0
 8010b94:	f300 8131 	bgt.w	8010dfa <atan+0x29a>
 8010b98:	a59b      	add	r5, pc, #620	; (adr r5, 8010e08 <atan+0x2a8>)
 8010b9a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010b9e:	ec45 4b10 	vmov	d0, r4, r5
 8010ba2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ba6:	4bb6      	ldr	r3, [pc, #728]	; (8010e80 <atan+0x320>)
 8010ba8:	429e      	cmp	r6, r3
 8010baa:	dc14      	bgt.n	8010bd6 <atan+0x76>
 8010bac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010bb0:	429e      	cmp	r6, r3
 8010bb2:	dc0d      	bgt.n	8010bd0 <atan+0x70>
 8010bb4:	a396      	add	r3, pc, #600	; (adr r3, 8010e10 <atan+0x2b0>)
 8010bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bba:	ee10 0a10 	vmov	r0, s0
 8010bbe:	4629      	mov	r1, r5
 8010bc0:	f7ef fb08 	bl	80001d4 <__adddf3>
 8010bc4:	4baf      	ldr	r3, [pc, #700]	; (8010e84 <atan+0x324>)
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	f7ef ff4a 	bl	8000a60 <__aeabi_dcmpgt>
 8010bcc:	2800      	cmp	r0, #0
 8010bce:	d1e6      	bne.n	8010b9e <atan+0x3e>
 8010bd0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8010bd4:	e02b      	b.n	8010c2e <atan+0xce>
 8010bd6:	f000 f963 	bl	8010ea0 <fabs>
 8010bda:	4bab      	ldr	r3, [pc, #684]	; (8010e88 <atan+0x328>)
 8010bdc:	429e      	cmp	r6, r3
 8010bde:	ec55 4b10 	vmov	r4, r5, d0
 8010be2:	f300 80bf 	bgt.w	8010d64 <atan+0x204>
 8010be6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010bea:	429e      	cmp	r6, r3
 8010bec:	f300 80a0 	bgt.w	8010d30 <atan+0x1d0>
 8010bf0:	ee10 2a10 	vmov	r2, s0
 8010bf4:	ee10 0a10 	vmov	r0, s0
 8010bf8:	462b      	mov	r3, r5
 8010bfa:	4629      	mov	r1, r5
 8010bfc:	f7ef faea 	bl	80001d4 <__adddf3>
 8010c00:	4ba0      	ldr	r3, [pc, #640]	; (8010e84 <atan+0x324>)
 8010c02:	2200      	movs	r2, #0
 8010c04:	f7ef fae4 	bl	80001d0 <__aeabi_dsub>
 8010c08:	2200      	movs	r2, #0
 8010c0a:	4606      	mov	r6, r0
 8010c0c:	460f      	mov	r7, r1
 8010c0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010c12:	4620      	mov	r0, r4
 8010c14:	4629      	mov	r1, r5
 8010c16:	f7ef fadd 	bl	80001d4 <__adddf3>
 8010c1a:	4602      	mov	r2, r0
 8010c1c:	460b      	mov	r3, r1
 8010c1e:	4630      	mov	r0, r6
 8010c20:	4639      	mov	r1, r7
 8010c22:	f7ef fdb7 	bl	8000794 <__aeabi_ddiv>
 8010c26:	f04f 0a00 	mov.w	sl, #0
 8010c2a:	4604      	mov	r4, r0
 8010c2c:	460d      	mov	r5, r1
 8010c2e:	4622      	mov	r2, r4
 8010c30:	462b      	mov	r3, r5
 8010c32:	4620      	mov	r0, r4
 8010c34:	4629      	mov	r1, r5
 8010c36:	f7ef fc83 	bl	8000540 <__aeabi_dmul>
 8010c3a:	4602      	mov	r2, r0
 8010c3c:	460b      	mov	r3, r1
 8010c3e:	4680      	mov	r8, r0
 8010c40:	4689      	mov	r9, r1
 8010c42:	f7ef fc7d 	bl	8000540 <__aeabi_dmul>
 8010c46:	a374      	add	r3, pc, #464	; (adr r3, 8010e18 <atan+0x2b8>)
 8010c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c4c:	4606      	mov	r6, r0
 8010c4e:	460f      	mov	r7, r1
 8010c50:	f7ef fc76 	bl	8000540 <__aeabi_dmul>
 8010c54:	a372      	add	r3, pc, #456	; (adr r3, 8010e20 <atan+0x2c0>)
 8010c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c5a:	f7ef fabb 	bl	80001d4 <__adddf3>
 8010c5e:	4632      	mov	r2, r6
 8010c60:	463b      	mov	r3, r7
 8010c62:	f7ef fc6d 	bl	8000540 <__aeabi_dmul>
 8010c66:	a370      	add	r3, pc, #448	; (adr r3, 8010e28 <atan+0x2c8>)
 8010c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c6c:	f7ef fab2 	bl	80001d4 <__adddf3>
 8010c70:	4632      	mov	r2, r6
 8010c72:	463b      	mov	r3, r7
 8010c74:	f7ef fc64 	bl	8000540 <__aeabi_dmul>
 8010c78:	a36d      	add	r3, pc, #436	; (adr r3, 8010e30 <atan+0x2d0>)
 8010c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c7e:	f7ef faa9 	bl	80001d4 <__adddf3>
 8010c82:	4632      	mov	r2, r6
 8010c84:	463b      	mov	r3, r7
 8010c86:	f7ef fc5b 	bl	8000540 <__aeabi_dmul>
 8010c8a:	a36b      	add	r3, pc, #428	; (adr r3, 8010e38 <atan+0x2d8>)
 8010c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c90:	f7ef faa0 	bl	80001d4 <__adddf3>
 8010c94:	4632      	mov	r2, r6
 8010c96:	463b      	mov	r3, r7
 8010c98:	f7ef fc52 	bl	8000540 <__aeabi_dmul>
 8010c9c:	a368      	add	r3, pc, #416	; (adr r3, 8010e40 <atan+0x2e0>)
 8010c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ca2:	f7ef fa97 	bl	80001d4 <__adddf3>
 8010ca6:	4642      	mov	r2, r8
 8010ca8:	464b      	mov	r3, r9
 8010caa:	f7ef fc49 	bl	8000540 <__aeabi_dmul>
 8010cae:	a366      	add	r3, pc, #408	; (adr r3, 8010e48 <atan+0x2e8>)
 8010cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb4:	4680      	mov	r8, r0
 8010cb6:	4689      	mov	r9, r1
 8010cb8:	4630      	mov	r0, r6
 8010cba:	4639      	mov	r1, r7
 8010cbc:	f7ef fc40 	bl	8000540 <__aeabi_dmul>
 8010cc0:	a363      	add	r3, pc, #396	; (adr r3, 8010e50 <atan+0x2f0>)
 8010cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc6:	f7ef fa83 	bl	80001d0 <__aeabi_dsub>
 8010cca:	4632      	mov	r2, r6
 8010ccc:	463b      	mov	r3, r7
 8010cce:	f7ef fc37 	bl	8000540 <__aeabi_dmul>
 8010cd2:	a361      	add	r3, pc, #388	; (adr r3, 8010e58 <atan+0x2f8>)
 8010cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cd8:	f7ef fa7a 	bl	80001d0 <__aeabi_dsub>
 8010cdc:	4632      	mov	r2, r6
 8010cde:	463b      	mov	r3, r7
 8010ce0:	f7ef fc2e 	bl	8000540 <__aeabi_dmul>
 8010ce4:	a35e      	add	r3, pc, #376	; (adr r3, 8010e60 <atan+0x300>)
 8010ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cea:	f7ef fa71 	bl	80001d0 <__aeabi_dsub>
 8010cee:	4632      	mov	r2, r6
 8010cf0:	463b      	mov	r3, r7
 8010cf2:	f7ef fc25 	bl	8000540 <__aeabi_dmul>
 8010cf6:	a35c      	add	r3, pc, #368	; (adr r3, 8010e68 <atan+0x308>)
 8010cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cfc:	f7ef fa68 	bl	80001d0 <__aeabi_dsub>
 8010d00:	4632      	mov	r2, r6
 8010d02:	463b      	mov	r3, r7
 8010d04:	f7ef fc1c 	bl	8000540 <__aeabi_dmul>
 8010d08:	4602      	mov	r2, r0
 8010d0a:	460b      	mov	r3, r1
 8010d0c:	4640      	mov	r0, r8
 8010d0e:	4649      	mov	r1, r9
 8010d10:	f7ef fa60 	bl	80001d4 <__adddf3>
 8010d14:	4622      	mov	r2, r4
 8010d16:	462b      	mov	r3, r5
 8010d18:	f7ef fc12 	bl	8000540 <__aeabi_dmul>
 8010d1c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8010d20:	4602      	mov	r2, r0
 8010d22:	460b      	mov	r3, r1
 8010d24:	d14b      	bne.n	8010dbe <atan+0x25e>
 8010d26:	4620      	mov	r0, r4
 8010d28:	4629      	mov	r1, r5
 8010d2a:	f7ef fa51 	bl	80001d0 <__aeabi_dsub>
 8010d2e:	e72c      	b.n	8010b8a <atan+0x2a>
 8010d30:	ee10 0a10 	vmov	r0, s0
 8010d34:	4b53      	ldr	r3, [pc, #332]	; (8010e84 <atan+0x324>)
 8010d36:	2200      	movs	r2, #0
 8010d38:	4629      	mov	r1, r5
 8010d3a:	f7ef fa49 	bl	80001d0 <__aeabi_dsub>
 8010d3e:	4b51      	ldr	r3, [pc, #324]	; (8010e84 <atan+0x324>)
 8010d40:	4606      	mov	r6, r0
 8010d42:	460f      	mov	r7, r1
 8010d44:	2200      	movs	r2, #0
 8010d46:	4620      	mov	r0, r4
 8010d48:	4629      	mov	r1, r5
 8010d4a:	f7ef fa43 	bl	80001d4 <__adddf3>
 8010d4e:	4602      	mov	r2, r0
 8010d50:	460b      	mov	r3, r1
 8010d52:	4630      	mov	r0, r6
 8010d54:	4639      	mov	r1, r7
 8010d56:	f7ef fd1d 	bl	8000794 <__aeabi_ddiv>
 8010d5a:	f04f 0a01 	mov.w	sl, #1
 8010d5e:	4604      	mov	r4, r0
 8010d60:	460d      	mov	r5, r1
 8010d62:	e764      	b.n	8010c2e <atan+0xce>
 8010d64:	4b49      	ldr	r3, [pc, #292]	; (8010e8c <atan+0x32c>)
 8010d66:	429e      	cmp	r6, r3
 8010d68:	da1d      	bge.n	8010da6 <atan+0x246>
 8010d6a:	ee10 0a10 	vmov	r0, s0
 8010d6e:	4b48      	ldr	r3, [pc, #288]	; (8010e90 <atan+0x330>)
 8010d70:	2200      	movs	r2, #0
 8010d72:	4629      	mov	r1, r5
 8010d74:	f7ef fa2c 	bl	80001d0 <__aeabi_dsub>
 8010d78:	4b45      	ldr	r3, [pc, #276]	; (8010e90 <atan+0x330>)
 8010d7a:	4606      	mov	r6, r0
 8010d7c:	460f      	mov	r7, r1
 8010d7e:	2200      	movs	r2, #0
 8010d80:	4620      	mov	r0, r4
 8010d82:	4629      	mov	r1, r5
 8010d84:	f7ef fbdc 	bl	8000540 <__aeabi_dmul>
 8010d88:	4b3e      	ldr	r3, [pc, #248]	; (8010e84 <atan+0x324>)
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	f7ef fa22 	bl	80001d4 <__adddf3>
 8010d90:	4602      	mov	r2, r0
 8010d92:	460b      	mov	r3, r1
 8010d94:	4630      	mov	r0, r6
 8010d96:	4639      	mov	r1, r7
 8010d98:	f7ef fcfc 	bl	8000794 <__aeabi_ddiv>
 8010d9c:	f04f 0a02 	mov.w	sl, #2
 8010da0:	4604      	mov	r4, r0
 8010da2:	460d      	mov	r5, r1
 8010da4:	e743      	b.n	8010c2e <atan+0xce>
 8010da6:	462b      	mov	r3, r5
 8010da8:	ee10 2a10 	vmov	r2, s0
 8010dac:	4939      	ldr	r1, [pc, #228]	; (8010e94 <atan+0x334>)
 8010dae:	2000      	movs	r0, #0
 8010db0:	f7ef fcf0 	bl	8000794 <__aeabi_ddiv>
 8010db4:	f04f 0a03 	mov.w	sl, #3
 8010db8:	4604      	mov	r4, r0
 8010dba:	460d      	mov	r5, r1
 8010dbc:	e737      	b.n	8010c2e <atan+0xce>
 8010dbe:	4b36      	ldr	r3, [pc, #216]	; (8010e98 <atan+0x338>)
 8010dc0:	4e36      	ldr	r6, [pc, #216]	; (8010e9c <atan+0x33c>)
 8010dc2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010dc6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8010dca:	e9da 2300 	ldrd	r2, r3, [sl]
 8010dce:	f7ef f9ff 	bl	80001d0 <__aeabi_dsub>
 8010dd2:	4622      	mov	r2, r4
 8010dd4:	462b      	mov	r3, r5
 8010dd6:	f7ef f9fb 	bl	80001d0 <__aeabi_dsub>
 8010dda:	4602      	mov	r2, r0
 8010ddc:	460b      	mov	r3, r1
 8010dde:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010de2:	f7ef f9f5 	bl	80001d0 <__aeabi_dsub>
 8010de6:	f1bb 0f00 	cmp.w	fp, #0
 8010dea:	4604      	mov	r4, r0
 8010dec:	460d      	mov	r5, r1
 8010dee:	f6bf aed6 	bge.w	8010b9e <atan+0x3e>
 8010df2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010df6:	461d      	mov	r5, r3
 8010df8:	e6d1      	b.n	8010b9e <atan+0x3e>
 8010dfa:	a51d      	add	r5, pc, #116	; (adr r5, 8010e70 <atan+0x310>)
 8010dfc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010e00:	e6cd      	b.n	8010b9e <atan+0x3e>
 8010e02:	bf00      	nop
 8010e04:	f3af 8000 	nop.w
 8010e08:	54442d18 	.word	0x54442d18
 8010e0c:	bff921fb 	.word	0xbff921fb
 8010e10:	8800759c 	.word	0x8800759c
 8010e14:	7e37e43c 	.word	0x7e37e43c
 8010e18:	e322da11 	.word	0xe322da11
 8010e1c:	3f90ad3a 	.word	0x3f90ad3a
 8010e20:	24760deb 	.word	0x24760deb
 8010e24:	3fa97b4b 	.word	0x3fa97b4b
 8010e28:	a0d03d51 	.word	0xa0d03d51
 8010e2c:	3fb10d66 	.word	0x3fb10d66
 8010e30:	c54c206e 	.word	0xc54c206e
 8010e34:	3fb745cd 	.word	0x3fb745cd
 8010e38:	920083ff 	.word	0x920083ff
 8010e3c:	3fc24924 	.word	0x3fc24924
 8010e40:	5555550d 	.word	0x5555550d
 8010e44:	3fd55555 	.word	0x3fd55555
 8010e48:	2c6a6c2f 	.word	0x2c6a6c2f
 8010e4c:	bfa2b444 	.word	0xbfa2b444
 8010e50:	52defd9a 	.word	0x52defd9a
 8010e54:	3fadde2d 	.word	0x3fadde2d
 8010e58:	af749a6d 	.word	0xaf749a6d
 8010e5c:	3fb3b0f2 	.word	0x3fb3b0f2
 8010e60:	fe231671 	.word	0xfe231671
 8010e64:	3fbc71c6 	.word	0x3fbc71c6
 8010e68:	9998ebc4 	.word	0x9998ebc4
 8010e6c:	3fc99999 	.word	0x3fc99999
 8010e70:	54442d18 	.word	0x54442d18
 8010e74:	3ff921fb 	.word	0x3ff921fb
 8010e78:	440fffff 	.word	0x440fffff
 8010e7c:	7ff00000 	.word	0x7ff00000
 8010e80:	3fdbffff 	.word	0x3fdbffff
 8010e84:	3ff00000 	.word	0x3ff00000
 8010e88:	3ff2ffff 	.word	0x3ff2ffff
 8010e8c:	40038000 	.word	0x40038000
 8010e90:	3ff80000 	.word	0x3ff80000
 8010e94:	bff00000 	.word	0xbff00000
 8010e98:	080117c0 	.word	0x080117c0
 8010e9c:	080117a0 	.word	0x080117a0

08010ea0 <fabs>:
 8010ea0:	ec51 0b10 	vmov	r0, r1, d0
 8010ea4:	ee10 2a10 	vmov	r2, s0
 8010ea8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010eac:	ec43 2b10 	vmov	d0, r2, r3
 8010eb0:	4770      	bx	lr

08010eb2 <atan2>:
 8010eb2:	f000 b835 	b.w	8010f20 <__ieee754_atan2>
	...

08010eb8 <sqrt>:
 8010eb8:	b538      	push	{r3, r4, r5, lr}
 8010eba:	ed2d 8b02 	vpush	{d8}
 8010ebe:	ec55 4b10 	vmov	r4, r5, d0
 8010ec2:	f000 f8f7 	bl	80110b4 <__ieee754_sqrt>
 8010ec6:	4b15      	ldr	r3, [pc, #84]	; (8010f1c <sqrt+0x64>)
 8010ec8:	eeb0 8a40 	vmov.f32	s16, s0
 8010ecc:	eef0 8a60 	vmov.f32	s17, s1
 8010ed0:	f993 3000 	ldrsb.w	r3, [r3]
 8010ed4:	3301      	adds	r3, #1
 8010ed6:	d019      	beq.n	8010f0c <sqrt+0x54>
 8010ed8:	4622      	mov	r2, r4
 8010eda:	462b      	mov	r3, r5
 8010edc:	4620      	mov	r0, r4
 8010ede:	4629      	mov	r1, r5
 8010ee0:	f7ef fdc8 	bl	8000a74 <__aeabi_dcmpun>
 8010ee4:	b990      	cbnz	r0, 8010f0c <sqrt+0x54>
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	2300      	movs	r3, #0
 8010eea:	4620      	mov	r0, r4
 8010eec:	4629      	mov	r1, r5
 8010eee:	f7ef fd99 	bl	8000a24 <__aeabi_dcmplt>
 8010ef2:	b158      	cbz	r0, 8010f0c <sqrt+0x54>
 8010ef4:	f7ff fd08 	bl	8010908 <__errno>
 8010ef8:	2321      	movs	r3, #33	; 0x21
 8010efa:	6003      	str	r3, [r0, #0]
 8010efc:	2200      	movs	r2, #0
 8010efe:	2300      	movs	r3, #0
 8010f00:	4610      	mov	r0, r2
 8010f02:	4619      	mov	r1, r3
 8010f04:	f7ef fc46 	bl	8000794 <__aeabi_ddiv>
 8010f08:	ec41 0b18 	vmov	d8, r0, r1
 8010f0c:	eeb0 0a48 	vmov.f32	s0, s16
 8010f10:	eef0 0a68 	vmov.f32	s1, s17
 8010f14:	ecbd 8b02 	vpop	{d8}
 8010f18:	bd38      	pop	{r3, r4, r5, pc}
 8010f1a:	bf00      	nop
 8010f1c:	20000270 	.word	0x20000270

08010f20 <__ieee754_atan2>:
 8010f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f24:	ec57 6b11 	vmov	r6, r7, d1
 8010f28:	4273      	negs	r3, r6
 8010f2a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80110b0 <__ieee754_atan2+0x190>
 8010f2e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8010f32:	4333      	orrs	r3, r6
 8010f34:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010f38:	4573      	cmp	r3, lr
 8010f3a:	ec51 0b10 	vmov	r0, r1, d0
 8010f3e:	ee11 8a10 	vmov	r8, s2
 8010f42:	d80a      	bhi.n	8010f5a <__ieee754_atan2+0x3a>
 8010f44:	4244      	negs	r4, r0
 8010f46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010f4a:	4304      	orrs	r4, r0
 8010f4c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010f50:	4574      	cmp	r4, lr
 8010f52:	ee10 9a10 	vmov	r9, s0
 8010f56:	468c      	mov	ip, r1
 8010f58:	d907      	bls.n	8010f6a <__ieee754_atan2+0x4a>
 8010f5a:	4632      	mov	r2, r6
 8010f5c:	463b      	mov	r3, r7
 8010f5e:	f7ef f939 	bl	80001d4 <__adddf3>
 8010f62:	ec41 0b10 	vmov	d0, r0, r1
 8010f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f6a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8010f6e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010f72:	4334      	orrs	r4, r6
 8010f74:	d103      	bne.n	8010f7e <__ieee754_atan2+0x5e>
 8010f76:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f7a:	f7ff bdf1 	b.w	8010b60 <atan>
 8010f7e:	17bc      	asrs	r4, r7, #30
 8010f80:	f004 0402 	and.w	r4, r4, #2
 8010f84:	ea53 0909 	orrs.w	r9, r3, r9
 8010f88:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010f8c:	d107      	bne.n	8010f9e <__ieee754_atan2+0x7e>
 8010f8e:	2c02      	cmp	r4, #2
 8010f90:	d060      	beq.n	8011054 <__ieee754_atan2+0x134>
 8010f92:	2c03      	cmp	r4, #3
 8010f94:	d1e5      	bne.n	8010f62 <__ieee754_atan2+0x42>
 8010f96:	a142      	add	r1, pc, #264	; (adr r1, 80110a0 <__ieee754_atan2+0x180>)
 8010f98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f9c:	e7e1      	b.n	8010f62 <__ieee754_atan2+0x42>
 8010f9e:	ea52 0808 	orrs.w	r8, r2, r8
 8010fa2:	d106      	bne.n	8010fb2 <__ieee754_atan2+0x92>
 8010fa4:	f1bc 0f00 	cmp.w	ip, #0
 8010fa8:	da5f      	bge.n	801106a <__ieee754_atan2+0x14a>
 8010faa:	a13f      	add	r1, pc, #252	; (adr r1, 80110a8 <__ieee754_atan2+0x188>)
 8010fac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010fb0:	e7d7      	b.n	8010f62 <__ieee754_atan2+0x42>
 8010fb2:	4572      	cmp	r2, lr
 8010fb4:	d10f      	bne.n	8010fd6 <__ieee754_atan2+0xb6>
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8010fbc:	d107      	bne.n	8010fce <__ieee754_atan2+0xae>
 8010fbe:	2c02      	cmp	r4, #2
 8010fc0:	d84c      	bhi.n	801105c <__ieee754_atan2+0x13c>
 8010fc2:	4b35      	ldr	r3, [pc, #212]	; (8011098 <__ieee754_atan2+0x178>)
 8010fc4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010fc8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8010fcc:	e7c9      	b.n	8010f62 <__ieee754_atan2+0x42>
 8010fce:	2c02      	cmp	r4, #2
 8010fd0:	d848      	bhi.n	8011064 <__ieee754_atan2+0x144>
 8010fd2:	4b32      	ldr	r3, [pc, #200]	; (801109c <__ieee754_atan2+0x17c>)
 8010fd4:	e7f6      	b.n	8010fc4 <__ieee754_atan2+0xa4>
 8010fd6:	4573      	cmp	r3, lr
 8010fd8:	d0e4      	beq.n	8010fa4 <__ieee754_atan2+0x84>
 8010fda:	1a9b      	subs	r3, r3, r2
 8010fdc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8010fe0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010fe4:	da1e      	bge.n	8011024 <__ieee754_atan2+0x104>
 8010fe6:	2f00      	cmp	r7, #0
 8010fe8:	da01      	bge.n	8010fee <__ieee754_atan2+0xce>
 8010fea:	323c      	adds	r2, #60	; 0x3c
 8010fec:	db1e      	blt.n	801102c <__ieee754_atan2+0x10c>
 8010fee:	4632      	mov	r2, r6
 8010ff0:	463b      	mov	r3, r7
 8010ff2:	f7ef fbcf 	bl	8000794 <__aeabi_ddiv>
 8010ff6:	ec41 0b10 	vmov	d0, r0, r1
 8010ffa:	f7ff ff51 	bl	8010ea0 <fabs>
 8010ffe:	f7ff fdaf 	bl	8010b60 <atan>
 8011002:	ec51 0b10 	vmov	r0, r1, d0
 8011006:	2c01      	cmp	r4, #1
 8011008:	d013      	beq.n	8011032 <__ieee754_atan2+0x112>
 801100a:	2c02      	cmp	r4, #2
 801100c:	d015      	beq.n	801103a <__ieee754_atan2+0x11a>
 801100e:	2c00      	cmp	r4, #0
 8011010:	d0a7      	beq.n	8010f62 <__ieee754_atan2+0x42>
 8011012:	a319      	add	r3, pc, #100	; (adr r3, 8011078 <__ieee754_atan2+0x158>)
 8011014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011018:	f7ef f8da 	bl	80001d0 <__aeabi_dsub>
 801101c:	a318      	add	r3, pc, #96	; (adr r3, 8011080 <__ieee754_atan2+0x160>)
 801101e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011022:	e014      	b.n	801104e <__ieee754_atan2+0x12e>
 8011024:	a118      	add	r1, pc, #96	; (adr r1, 8011088 <__ieee754_atan2+0x168>)
 8011026:	e9d1 0100 	ldrd	r0, r1, [r1]
 801102a:	e7ec      	b.n	8011006 <__ieee754_atan2+0xe6>
 801102c:	2000      	movs	r0, #0
 801102e:	2100      	movs	r1, #0
 8011030:	e7e9      	b.n	8011006 <__ieee754_atan2+0xe6>
 8011032:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011036:	4619      	mov	r1, r3
 8011038:	e793      	b.n	8010f62 <__ieee754_atan2+0x42>
 801103a:	a30f      	add	r3, pc, #60	; (adr r3, 8011078 <__ieee754_atan2+0x158>)
 801103c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011040:	f7ef f8c6 	bl	80001d0 <__aeabi_dsub>
 8011044:	4602      	mov	r2, r0
 8011046:	460b      	mov	r3, r1
 8011048:	a10d      	add	r1, pc, #52	; (adr r1, 8011080 <__ieee754_atan2+0x160>)
 801104a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801104e:	f7ef f8bf 	bl	80001d0 <__aeabi_dsub>
 8011052:	e786      	b.n	8010f62 <__ieee754_atan2+0x42>
 8011054:	a10a      	add	r1, pc, #40	; (adr r1, 8011080 <__ieee754_atan2+0x160>)
 8011056:	e9d1 0100 	ldrd	r0, r1, [r1]
 801105a:	e782      	b.n	8010f62 <__ieee754_atan2+0x42>
 801105c:	a10c      	add	r1, pc, #48	; (adr r1, 8011090 <__ieee754_atan2+0x170>)
 801105e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011062:	e77e      	b.n	8010f62 <__ieee754_atan2+0x42>
 8011064:	2000      	movs	r0, #0
 8011066:	2100      	movs	r1, #0
 8011068:	e77b      	b.n	8010f62 <__ieee754_atan2+0x42>
 801106a:	a107      	add	r1, pc, #28	; (adr r1, 8011088 <__ieee754_atan2+0x168>)
 801106c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011070:	e777      	b.n	8010f62 <__ieee754_atan2+0x42>
 8011072:	bf00      	nop
 8011074:	f3af 8000 	nop.w
 8011078:	33145c07 	.word	0x33145c07
 801107c:	3ca1a626 	.word	0x3ca1a626
 8011080:	54442d18 	.word	0x54442d18
 8011084:	400921fb 	.word	0x400921fb
 8011088:	54442d18 	.word	0x54442d18
 801108c:	3ff921fb 	.word	0x3ff921fb
 8011090:	54442d18 	.word	0x54442d18
 8011094:	3fe921fb 	.word	0x3fe921fb
 8011098:	080117e0 	.word	0x080117e0
 801109c:	080117f8 	.word	0x080117f8
 80110a0:	54442d18 	.word	0x54442d18
 80110a4:	c00921fb 	.word	0xc00921fb
 80110a8:	54442d18 	.word	0x54442d18
 80110ac:	bff921fb 	.word	0xbff921fb
 80110b0:	7ff00000 	.word	0x7ff00000

080110b4 <__ieee754_sqrt>:
 80110b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110b8:	ec55 4b10 	vmov	r4, r5, d0
 80110bc:	4e56      	ldr	r6, [pc, #344]	; (8011218 <__ieee754_sqrt+0x164>)
 80110be:	43ae      	bics	r6, r5
 80110c0:	ee10 0a10 	vmov	r0, s0
 80110c4:	ee10 3a10 	vmov	r3, s0
 80110c8:	4629      	mov	r1, r5
 80110ca:	462a      	mov	r2, r5
 80110cc:	d110      	bne.n	80110f0 <__ieee754_sqrt+0x3c>
 80110ce:	ee10 2a10 	vmov	r2, s0
 80110d2:	462b      	mov	r3, r5
 80110d4:	f7ef fa34 	bl	8000540 <__aeabi_dmul>
 80110d8:	4602      	mov	r2, r0
 80110da:	460b      	mov	r3, r1
 80110dc:	4620      	mov	r0, r4
 80110de:	4629      	mov	r1, r5
 80110e0:	f7ef f878 	bl	80001d4 <__adddf3>
 80110e4:	4604      	mov	r4, r0
 80110e6:	460d      	mov	r5, r1
 80110e8:	ec45 4b10 	vmov	d0, r4, r5
 80110ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110f0:	2d00      	cmp	r5, #0
 80110f2:	dc10      	bgt.n	8011116 <__ieee754_sqrt+0x62>
 80110f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80110f8:	4330      	orrs	r0, r6
 80110fa:	d0f5      	beq.n	80110e8 <__ieee754_sqrt+0x34>
 80110fc:	b15d      	cbz	r5, 8011116 <__ieee754_sqrt+0x62>
 80110fe:	ee10 2a10 	vmov	r2, s0
 8011102:	462b      	mov	r3, r5
 8011104:	ee10 0a10 	vmov	r0, s0
 8011108:	f7ef f862 	bl	80001d0 <__aeabi_dsub>
 801110c:	4602      	mov	r2, r0
 801110e:	460b      	mov	r3, r1
 8011110:	f7ef fb40 	bl	8000794 <__aeabi_ddiv>
 8011114:	e7e6      	b.n	80110e4 <__ieee754_sqrt+0x30>
 8011116:	1509      	asrs	r1, r1, #20
 8011118:	d076      	beq.n	8011208 <__ieee754_sqrt+0x154>
 801111a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801111e:	07ce      	lsls	r6, r1, #31
 8011120:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8011124:	bf5e      	ittt	pl
 8011126:	0fda      	lsrpl	r2, r3, #31
 8011128:	005b      	lslpl	r3, r3, #1
 801112a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801112e:	0fda      	lsrs	r2, r3, #31
 8011130:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8011134:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8011138:	2000      	movs	r0, #0
 801113a:	106d      	asrs	r5, r5, #1
 801113c:	005b      	lsls	r3, r3, #1
 801113e:	f04f 0e16 	mov.w	lr, #22
 8011142:	4684      	mov	ip, r0
 8011144:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011148:	eb0c 0401 	add.w	r4, ip, r1
 801114c:	4294      	cmp	r4, r2
 801114e:	bfde      	ittt	le
 8011150:	1b12      	suble	r2, r2, r4
 8011152:	eb04 0c01 	addle.w	ip, r4, r1
 8011156:	1840      	addle	r0, r0, r1
 8011158:	0052      	lsls	r2, r2, #1
 801115a:	f1be 0e01 	subs.w	lr, lr, #1
 801115e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8011162:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011166:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801116a:	d1ed      	bne.n	8011148 <__ieee754_sqrt+0x94>
 801116c:	4671      	mov	r1, lr
 801116e:	2720      	movs	r7, #32
 8011170:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8011174:	4562      	cmp	r2, ip
 8011176:	eb04 060e 	add.w	r6, r4, lr
 801117a:	dc02      	bgt.n	8011182 <__ieee754_sqrt+0xce>
 801117c:	d113      	bne.n	80111a6 <__ieee754_sqrt+0xf2>
 801117e:	429e      	cmp	r6, r3
 8011180:	d811      	bhi.n	80111a6 <__ieee754_sqrt+0xf2>
 8011182:	2e00      	cmp	r6, #0
 8011184:	eb06 0e04 	add.w	lr, r6, r4
 8011188:	da43      	bge.n	8011212 <__ieee754_sqrt+0x15e>
 801118a:	f1be 0f00 	cmp.w	lr, #0
 801118e:	db40      	blt.n	8011212 <__ieee754_sqrt+0x15e>
 8011190:	f10c 0801 	add.w	r8, ip, #1
 8011194:	eba2 020c 	sub.w	r2, r2, ip
 8011198:	429e      	cmp	r6, r3
 801119a:	bf88      	it	hi
 801119c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80111a0:	1b9b      	subs	r3, r3, r6
 80111a2:	4421      	add	r1, r4
 80111a4:	46c4      	mov	ip, r8
 80111a6:	0052      	lsls	r2, r2, #1
 80111a8:	3f01      	subs	r7, #1
 80111aa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80111ae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80111b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80111b6:	d1dd      	bne.n	8011174 <__ieee754_sqrt+0xc0>
 80111b8:	4313      	orrs	r3, r2
 80111ba:	d006      	beq.n	80111ca <__ieee754_sqrt+0x116>
 80111bc:	1c4c      	adds	r4, r1, #1
 80111be:	bf13      	iteet	ne
 80111c0:	3101      	addne	r1, #1
 80111c2:	3001      	addeq	r0, #1
 80111c4:	4639      	moveq	r1, r7
 80111c6:	f021 0101 	bicne.w	r1, r1, #1
 80111ca:	1043      	asrs	r3, r0, #1
 80111cc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80111d0:	0849      	lsrs	r1, r1, #1
 80111d2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80111d6:	07c2      	lsls	r2, r0, #31
 80111d8:	bf48      	it	mi
 80111da:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80111de:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80111e2:	460c      	mov	r4, r1
 80111e4:	463d      	mov	r5, r7
 80111e6:	e77f      	b.n	80110e8 <__ieee754_sqrt+0x34>
 80111e8:	0ada      	lsrs	r2, r3, #11
 80111ea:	3815      	subs	r0, #21
 80111ec:	055b      	lsls	r3, r3, #21
 80111ee:	2a00      	cmp	r2, #0
 80111f0:	d0fa      	beq.n	80111e8 <__ieee754_sqrt+0x134>
 80111f2:	02d7      	lsls	r7, r2, #11
 80111f4:	d50a      	bpl.n	801120c <__ieee754_sqrt+0x158>
 80111f6:	f1c1 0420 	rsb	r4, r1, #32
 80111fa:	fa23 f404 	lsr.w	r4, r3, r4
 80111fe:	1e4d      	subs	r5, r1, #1
 8011200:	408b      	lsls	r3, r1
 8011202:	4322      	orrs	r2, r4
 8011204:	1b41      	subs	r1, r0, r5
 8011206:	e788      	b.n	801111a <__ieee754_sqrt+0x66>
 8011208:	4608      	mov	r0, r1
 801120a:	e7f0      	b.n	80111ee <__ieee754_sqrt+0x13a>
 801120c:	0052      	lsls	r2, r2, #1
 801120e:	3101      	adds	r1, #1
 8011210:	e7ef      	b.n	80111f2 <__ieee754_sqrt+0x13e>
 8011212:	46e0      	mov	r8, ip
 8011214:	e7be      	b.n	8011194 <__ieee754_sqrt+0xe0>
 8011216:	bf00      	nop
 8011218:	7ff00000 	.word	0x7ff00000

0801121c <_init>:
 801121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801121e:	bf00      	nop
 8011220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011222:	bc08      	pop	{r3}
 8011224:	469e      	mov	lr, r3
 8011226:	4770      	bx	lr

08011228 <_fini>:
 8011228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801122a:	bf00      	nop
 801122c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801122e:	bc08      	pop	{r3}
 8011230:	469e      	mov	lr, r3
 8011232:	4770      	bx	lr
